{"pr_number": 4503, "pr_title": "Off-heap timestamp cache and persistent storage integration", "pr_author": "OStevan", "pr_createdAt": "2020-01-10T15:39:55Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4503", "merge_commit": "4971ce2cbdf5953f8199675742a8849a627c9a76", "timeline": [{"oid": "ad20b75ae970cbdd4662431f0903e678a6136c48", "url": "https://github.com/palantir/atlasdb/commit/ad20b75ae970cbdd4662431f0903e678a6136c48", "message": "Keeping with the standard convention.", "committedDate": "2020-01-13T09:37:43Z", "type": "forcePushed"}, {"oid": "4c5fe75b740e8254cc4350cef33e939387aa466d", "url": "https://github.com/palantir/atlasdb/commit/4c5fe75b740e8254cc4350cef33e939387aa466d", "message": "Keeping with the standard convention.", "committedDate": "2020-01-13T14:43:04Z", "type": "forcePushed"}, {"oid": "28396260565a54b384a4f1297a8fc043488f38d2", "url": "https://github.com/palantir/atlasdb/commit/28396260565a54b384a4f1297a8fc043488f38d2", "message": "Small refactor.", "committedDate": "2020-01-13T15:21:18Z", "type": "forcePushed"}, {"oid": "8ddf10adf49bc946ac4981fba55178f08f5719f7", "url": "https://github.com/palantir/atlasdb/commit/8ddf10adf49bc946ac4981fba55178f08f5719f7", "message": "Enable persistent storage config.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "793e5882a7cc09fdbaa7ec2f2c760dbb5ed2f804", "url": "https://github.com/palantir/atlasdb/commit/793e5882a7cc09fdbaa7ec2f2c760dbb5ed2f804", "message": "Added a more detailed check.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "fa7716691d9a3eb667a7c9f8dbbbf17983edf845", "url": "https://github.com/palantir/atlasdb/commit/fa7716691d9a3eb667a7c9f8dbbbf17983edf845", "message": "ComparingTimestampCache implementation.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "804cf37b8e1710984b7eafca75648599c468bfb2", "url": "https://github.com/palantir/atlasdb/commit/804cf37b8e1710984b7eafca75648599c468bfb2", "message": "Refactor creation of TestTransactionManagerImpl", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "6e157957a33e85d616051a073fbd0fa4c4df89a7", "url": "https://github.com/palantir/atlasdb/commit/6e157957a33e85d616051a073fbd0fa4c4df89a7", "message": "Add tests for TimestampCache integration.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "0e7d30832acec4be42da4b6384cb7a9f63f4cb39", "url": "https://github.com/palantir/atlasdb/commit/0e7d30832acec4be42da4b6384cb7a9f63f4cb39", "message": "Fix the tests.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "96210e7050422fed4658d815b43845e3b914def5", "url": "https://github.com/palantir/atlasdb/commit/96210e7050422fed4658d815b43845e3b914def5", "message": "Keeping with the standard convention.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "96cd845b24a99dc586c5766ed6db6980c6c6da2a", "url": "https://github.com/palantir/atlasdb/commit/96cd845b24a99dc586c5766ed6db6980c6c6da2a", "message": "Small refactor.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "1f25387480f90b092a335771d79ed396bea6d71b", "url": "https://github.com/palantir/atlasdb/commit/1f25387480f90b092a335771d79ed396bea6d71b", "message": "Change config and add more info.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "5d61e02af57f160bf18ef9a9d5bb7b09b0f774e7", "url": "https://github.com/palantir/atlasdb/commit/5d61e02af57f160bf18ef9a9d5bb7b09b0f774e7", "message": "Update config.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "e5a53a09b4f826af8e7daa97dbf3e3f6450aa9b9", "url": "https://github.com/palantir/atlasdb/commit/e5a53a09b4f826af8e7daa97dbf3e3f6450aa9b9", "message": "Better deletion.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "9bb3607f69b7830f66ed817b5f181dce070be0dd", "url": "https://github.com/palantir/atlasdb/commit/9bb3607f69b7830f66ed817b5f181dce070be0dd", "message": "Test for aborting transaction.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "9bb3607f69b7830f66ed817b5f181dce070be0dd", "url": "https://github.com/palantir/atlasdb/commit/9bb3607f69b7830f66ed817b5f181dce070be0dd", "message": "Test for aborting transaction.", "committedDate": "2020-01-13T18:37:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2MTcwNg==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366061706", "body": "Some notes:\r\n- should we validate that the path is an absolute path?\r\n- it feels this method should be private, unless I'm missing something.", "bodyText": "Some notes:\n\nshould we validate that the path is an absolute path?\nit feels this method should be private, unless I'm missing something.", "bodyHTML": "<p dir=\"auto\">Some notes:</p>\n<ul dir=\"auto\">\n<li>should we validate that the path is an absolute path?</li>\n<li>it feels this method should be private, unless I'm missing something.</li>\n</ul>", "author": "jeremyk-91", "createdAt": "2020-01-13T22:25:06Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorages.java", "diffHunk": "@@ -17,20 +17,43 @@\n package com.palantir.atlasdb.factory;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Comparator;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n import com.google.common.base.MoreObjects;\n import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n \n-public final class PersistentStorageFactories {\n+public final class PersistentStorages {\n     private static final Pattern UUID_PATTERN = Pattern.compile(\n             \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\");\n \n     private static final Set<String> SANITIZED_PATHS = new HashSet<>();\n \n-    private PersistentStorageFactories() {}\n+    private PersistentStorages() {}\n+\n+    /**\n+     * Given the {@code absolutePath} deletes all sub-folders, sub-files and the folder pointed by it.\n+     *\n+     * @param absolutePath which we want to delete\n+     * @throws IOException if there is an underlying exception\n+     */\n+    public static void deletePath(Path absolutePath) throws IOException {\n+        try (Stream<Path> stream = Files.walk(absolutePath)) {", "originalCommit": "9bb3607f69b7830f66ed817b5f181dce070be0dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23fb0b848b5cf890a10b122aa0f89c9aaf2201ac", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorages.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorages.java\nindex a16fadc753..b4d98dece1 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorages.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorages.java\n", "chunk": "@@ -40,20 +40,6 @@ public final class PersistentStorages {\n \n     private PersistentStorages() {}\n \n-    /**\n-     * Given the {@code absolutePath} deletes all sub-folders, sub-files and the folder pointed by it.\n-     *\n-     * @param absolutePath which we want to delete\n-     * @throws IOException if there is an underlying exception\n-     */\n-    public static void deletePath(Path absolutePath) throws IOException {\n-        try (Stream<Path> stream = Files.walk(absolutePath)) {\n-            List<Path> sortedPaths = stream.sorted(Comparator.reverseOrder()).collect(Collectors.toList());\n-            for (Path filePath : sortedPaths) {\n-                Files.delete(filePath);\n-            }\n-        }\n-    }\n \n     /**\n      * For the given path does the following: 1) it is sanitized only once per VM lifetime 2) if it exists checks that\n", "next_change": {"commit": "5099c89f4ebdf50fc8efe37fe77f35ab0c7bedb3", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorages.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorageFactories.java\nsimilarity index 97%\nrename from atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorages.java\nrename to atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorageFactories.java\nindex b4d98dece1..145c347d9b 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorages.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorageFactories.java\n", "chunk": "@@ -32,13 +32,13 @@ import com.google.common.base.MoreObjects;\n import com.palantir.logsafe.Preconditions;\n import com.palantir.logsafe.SafeArg;\n \n-public final class PersistentStorages {\n+public final class PersistentStorageFactories {\n     private static final Pattern UUID_PATTERN = Pattern.compile(\n             \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\");\n \n     private static final Set<String> SANITIZED_PATHS = new HashSet<>();\n \n-    private PersistentStorages() {}\n+    private PersistentStorageFactories() {}\n \n \n     /**\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "4971ce2cbdf5953f8199675742a8849a627c9a76", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorages.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorageFactories.java\nsimilarity index 87%\nrename from atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorages.java\nrename to atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorageFactories.java\nindex a16fadc753..e096f53266 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorages.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorageFactories.java\n", "chunk": "@@ -32,28 +32,14 @@ import com.google.common.base.MoreObjects;\n import com.palantir.logsafe.Preconditions;\n import com.palantir.logsafe.SafeArg;\n \n-public final class PersistentStorages {\n+public final class PersistentStorageFactories {\n     private static final Pattern UUID_PATTERN = Pattern.compile(\n             \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\");\n \n     private static final Set<String> SANITIZED_PATHS = new HashSet<>();\n \n-    private PersistentStorages() {}\n+    private PersistentStorageFactories() {}\n \n-    /**\n-     * Given the {@code absolutePath} deletes all sub-folders, sub-files and the folder pointed by it.\n-     *\n-     * @param absolutePath which we want to delete\n-     * @throws IOException if there is an underlying exception\n-     */\n-    public static void deletePath(Path absolutePath) throws IOException {\n-        try (Stream<Path> stream = Files.walk(absolutePath)) {\n-            List<Path> sortedPaths = stream.sorted(Comparator.reverseOrder()).collect(Collectors.toList());\n-            for (Path filePath : sortedPaths) {\n-                Files.delete(filePath);\n-            }\n-        }\n-    }\n \n     /**\n      * For the given path does the following: 1) it is sanitized only once per VM lifetime 2) if it exists checks that\n", "next_change": null}]}, "commits_in_main": [{"oid": "4971ce2cbdf5953f8199675742a8849a627c9a76", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2MzEzNg==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366063136", "body": "nit: indentation", "bodyText": "nit: indentation", "bodyHTML": "<p dir=\"auto\">nit: indentation</p>", "author": "jeremyk-91", "createdAt": "2020-01-13T22:28:27Z", "path": "atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb;\n+\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.cache.DefaultTimestampCache;\n+import com.palantir.atlasdb.cache.OffHeapTimestampCache;\n+import com.palantir.atlasdb.cache.TimestampCache;\n+import com.palantir.atlasdb.persistent.api.PersistentTimestampStore;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class ComparingTimestampCache implements TimestampCache {\n+    private final TimestampCache first;\n+    private final TimestampCache second;\n+\n+    public static TimestampCache comparingOffHeapForTests(\n+            MetricsManager metricRegistry,\n+            PersistentTimestampStore persistentTimestampStore) {\n+        TimestampCache first = new DefaultTimestampCache(\n+                metricRegistry.getRegistry(),\n+                () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE);\n+\n+        TimestampCache second = OffHeapTimestampCache.create(\n+                persistentTimestampStore,\n+                metricRegistry.getTaggedRegistry(),\n+                () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE\n+        );", "originalCommit": "9bb3607f69b7830f66ed817b5f181dce070be0dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23fb0b848b5cf890a10b122aa0f89c9aaf2201ac", "changed_code": [{"header": "diff --git a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\nindex 6bb6a62cea..a6ea4e8ba9 100644\n--- a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n+++ b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n", "chunk": "@@ -42,8 +43,7 @@ public final class ComparingTimestampCache implements TimestampCache {\n         TimestampCache second = OffHeapTimestampCache.create(\n                 persistentTimestampStore,\n                 metricRegistry.getTaggedRegistry(),\n-                () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE\n-        );\n+                () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE);\n \n         return new ComparingTimestampCache(first, second);\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "4971ce2cbdf5953f8199675742a8849a627c9a76", "changed_code": [{"header": "diff --git a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\nindex 6bb6a62cea..f226d500e9 100644\n--- a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n+++ b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n", "chunk": "@@ -42,8 +43,7 @@ public final class ComparingTimestampCache implements TimestampCache {\n         TimestampCache second = OffHeapTimestampCache.create(\n                 persistentTimestampStore,\n                 metricRegistry.getTaggedRegistry(),\n-                () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE\n-        );\n+                () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE);\n \n         return new ComparingTimestampCache(first, second);\n     }\n", "next_change": {"commit": "1a4b4b058e9fc316a9157e83cba2fd26bf666d53", "changed_code": [{"header": "diff --git a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\nindex f226d500e9..1cc602d8a0 100644\n--- a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n+++ b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n", "chunk": "@@ -35,13 +35,13 @@ public final class ComparingTimestampCache implements TimestampCache {\n \n     public static TimestampCache comparingOffHeapForTests(\n             MetricsManager metricRegistry,\n-            PersistentTimestampStore persistentTimestampStore) {\n+            PhysicalPersistentStore physicalPersistentStore) {\n         TimestampCache first = new DefaultTimestampCache(\n                 metricRegistry.getRegistry(),\n                 () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE);\n \n         TimestampCache second = OffHeapTimestampCache.create(\n-                persistentTimestampStore,\n+                physicalPersistentStore,\n                 metricRegistry.getTaggedRegistry(),\n                 () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE);\n \n", "next_change": {"commit": "6327ceeb116649fb68f1227a53c5e025120c42d5", "changed_code": [{"header": "diff --git a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\nindex 1cc602d8a0..e43b717a42 100644\n--- a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n+++ b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n", "chunk": "@@ -35,13 +35,13 @@ public final class ComparingTimestampCache implements TimestampCache {\n \n     public static TimestampCache comparingOffHeapForTests(\n             MetricsManager metricRegistry,\n-            PhysicalPersistentStore physicalPersistentStore) {\n+            PersistentStore persistentStore) {\n         TimestampCache first = new DefaultTimestampCache(\n                 metricRegistry.getRegistry(),\n                 () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE);\n \n         TimestampCache second = OffHeapTimestampCache.create(\n-                physicalPersistentStore,\n+                persistentStore,\n                 metricRegistry.getTaggedRegistry(),\n                 () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE);\n \n", "next_change": {"commit": "b6b2930e41e8d9aeb62ef86b5e63cb2319a9c776", "changed_code": [{"header": "diff --git a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\nindex e43b717a42..683b3aba97 100644\n--- a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n+++ b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n", "chunk": "@@ -44,7 +44,6 @@ public final class ComparingTimestampCache implements TimestampCache {\n                 persistentStore,\n                 metricRegistry.getTaggedRegistry(),\n                 () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE);\n-\n         return new ComparingTimestampCache(first, second);\n     }\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "4971ce2cbdf5953f8199675742a8849a627c9a76", "message": "Merge commit", "committedDate": null}, {"oid": "1a4b4b058e9fc316a9157e83cba2fd26bf666d53", "committedDate": "2020-01-16 20:21:27 +0000", "message": "Persistent storage refactoring (#4512)"}, {"oid": "6327ceeb116649fb68f1227a53c5e025120c42d5", "committedDate": "2020-01-23 15:20:36 +0000", "message": "Remove concept of namespaces and LogicalPersistentStore. (#4522)"}, {"oid": "b6b2930e41e8d9aeb62ef86b5e63cb2319a9c776", "committedDate": "2020-01-23 15:33:47 +0000", "message": "Extract caching from the specific timestamp cache (#4524)"}, {"oid": "249de1a6f3e21eb3907451eb232d96066f659194", "committedDate": "2020-10-20 12:04:30 +0000", "message": "Upgrade gradle-baseline (#5044)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2MzY2OA==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366063668", "body": "I would include as Args the start timestamp and commit timestamps reported by each of the services in this case, for easier debugging.", "bodyText": "I would include as Args the start timestamp and commit timestamps reported by each of the services in this case, for easier debugging.", "bodyHTML": "<p dir=\"auto\">I would include as Args the start timestamp and commit timestamps reported by each of the services in this case, for easier debugging.</p>", "author": "jeremyk-91", "createdAt": "2020-01-13T22:29:57Z", "path": "atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb;\n+\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.cache.DefaultTimestampCache;\n+import com.palantir.atlasdb.cache.OffHeapTimestampCache;\n+import com.palantir.atlasdb.cache.TimestampCache;\n+import com.palantir.atlasdb.persistent.api.PersistentTimestampStore;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class ComparingTimestampCache implements TimestampCache {\n+    private final TimestampCache first;\n+    private final TimestampCache second;\n+\n+    public static TimestampCache comparingOffHeapForTests(\n+            MetricsManager metricRegistry,\n+            PersistentTimestampStore persistentTimestampStore) {\n+        TimestampCache first = new DefaultTimestampCache(\n+                metricRegistry.getRegistry(),\n+                () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE);\n+\n+        TimestampCache second = OffHeapTimestampCache.create(\n+                persistentTimestampStore,\n+                metricRegistry.getTaggedRegistry(),\n+                () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE\n+        );\n+\n+        return new ComparingTimestampCache(first, second);\n+    }\n+\n+    private ComparingTimestampCache(TimestampCache first, TimestampCache second) {\n+        this.first = first;\n+        this.second = second;\n+    }\n+\n+\n+    @Override\n+    public synchronized void clear() {\n+        first.clear();\n+        second.clear();\n+    }\n+\n+    @Override\n+    public synchronized void putAlreadyCommittedTransaction(Long startTimestamp, Long commitTimestamp) {\n+        first.putAlreadyCommittedTransaction(startTimestamp, commitTimestamp);\n+        second.putAlreadyCommittedTransaction(startTimestamp, commitTimestamp);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public synchronized Long getCommitTimestampIfPresent(Long startTimestamp) {\n+        Long firstCommitTimestamp = first.getCommitTimestampIfPresent(startTimestamp);\n+        Long secondCommitTimestamp = second.getCommitTimestampIfPresent(startTimestamp);\n+        if (firstCommitTimestamp == null || secondCommitTimestamp == null) {\n+            return Stream.of(firstCommitTimestamp, secondCommitTimestamp)\n+                    .filter(Objects::nonNull)\n+                    .findFirst()\n+                    .orElse(null);\n+        }\n+        Preconditions.checkState(firstCommitTimestamp.equals(secondCommitTimestamp),\n+                \"There is a bug in cache implementation\");", "originalCommit": "9bb3607f69b7830f66ed817b5f181dce070be0dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23fb0b848b5cf890a10b122aa0f89c9aaf2201ac", "changed_code": [{"header": "diff --git a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\nindex 6bb6a62cea..a6ea4e8ba9 100644\n--- a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n+++ b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n", "chunk": "@@ -77,8 +77,11 @@ public final class ComparingTimestampCache implements TimestampCache {\n                     .findFirst()\n                     .orElse(null);\n         }\n-        Preconditions.checkState(firstCommitTimestamp.equals(secondCommitTimestamp),\n-                \"There is a bug in cache implementation\");\n+        Preconditions.checkState(\n+                firstCommitTimestamp.equals(secondCommitTimestamp),\n+                \"There is a bug in cache implementation\",\n+                SafeArg.of(\"firstCommitTimestamp\", firstCommitTimestamp),\n+                SafeArg.of(\"secondCommitTimestamp\", secondCommitTimestamp));\n         return firstCommitTimestamp;\n     }\n }\n", "next_change": {"commit": "0a43ce1c06e5e297492a4bb2778aa05a88bb81b9", "changed_code": [{"header": "diff --git a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\nindex a6ea4e8ba9..f226d500e9 100644\n--- a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n+++ b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n", "chunk": "@@ -80,6 +80,7 @@ public final class ComparingTimestampCache implements TimestampCache {\n         Preconditions.checkState(\n                 firstCommitTimestamp.equals(secondCommitTimestamp),\n                 \"There is a bug in cache implementation\",\n+                SafeArg.of(\"startTimestamp\", startTimestamp),\n                 SafeArg.of(\"firstCommitTimestamp\", firstCommitTimestamp),\n                 SafeArg.of(\"secondCommitTimestamp\", secondCommitTimestamp));\n         return firstCommitTimestamp;\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "4971ce2cbdf5953f8199675742a8849a627c9a76", "changed_code": [{"header": "diff --git a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\nindex 6bb6a62cea..f226d500e9 100644\n--- a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n+++ b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n", "chunk": "@@ -77,8 +77,12 @@ public final class ComparingTimestampCache implements TimestampCache {\n                     .findFirst()\n                     .orElse(null);\n         }\n-        Preconditions.checkState(firstCommitTimestamp.equals(secondCommitTimestamp),\n-                \"There is a bug in cache implementation\");\n+        Preconditions.checkState(\n+                firstCommitTimestamp.equals(secondCommitTimestamp),\n+                \"There is a bug in cache implementation\",\n+                SafeArg.of(\"startTimestamp\", startTimestamp),\n+                SafeArg.of(\"firstCommitTimestamp\", firstCommitTimestamp),\n+                SafeArg.of(\"secondCommitTimestamp\", secondCommitTimestamp));\n         return firstCommitTimestamp;\n     }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "4971ce2cbdf5953f8199675742a8849a627c9a76", "message": "Merge commit", "committedDate": null}, {"oid": "1a4b4b058e9fc316a9157e83cba2fd26bf666d53", "committedDate": "2020-01-16 20:21:27 +0000", "message": "Persistent storage refactoring (#4512)"}, {"oid": "6327ceeb116649fb68f1227a53c5e025120c42d5", "committedDate": "2020-01-23 15:20:36 +0000", "message": "Remove concept of namespaces and LogicalPersistentStore. (#4522)"}, {"oid": "b6b2930e41e8d9aeb62ef86b5e63cb2319a9c776", "committedDate": "2020-01-23 15:33:47 +0000", "message": "Extract caching from the specific timestamp cache (#4524)"}, {"oid": "249de1a6f3e21eb3907451eb232d96066f659194", "committedDate": "2020-10-20 12:04:30 +0000", "message": "Upgrade gradle-baseline (#5044)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NTE3Mw==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366065173", "body": "nit: maybe `readThenAbortStillCaches...`? A `ReadTransaction` is something else, and could lead to confusion", "bodyText": "nit: maybe readThenAbortStillCaches...? A ReadTransaction is something else, and could lead to confusion", "bodyHTML": "<p dir=\"auto\">nit: maybe <code>readThenAbortStillCaches...</code>? A <code>ReadTransaction</code> is something else, and could lead to confusion</p>", "author": "jeremyk-91", "createdAt": "2020-01-13T22:34:04Z", "path": "atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java", "diffHunk": "@@ -168,6 +170,74 @@ public void shouldNotConflictIfImmutableTimestampLockExpiresIfNoReadsOrWrites()\n         txnManagerWithMocks.runTaskThrowOnConflict(txn -> null);\n     }\n \n+    @Test\n+    public void writeDoesNotPopulateTimestampCache() {\n+        Transaction transaction = txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(transaction.getTimestamp())).isNull();\n+    }\n+\n+    @Test\n+    public void readCachesWritersStartToCommitTimestamp() {\n+        Transaction writer = txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n+\n+        txMgr.runTaskWithRetry(txn -> {\n+            get(txn, TEST_TABLE, \"row\", \"column\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp()))\n+                .isNotNull()\n+                .isEqualTo(transactionService.get(writer.getTimestamp()));\n+    }\n+\n+    @Test\n+    public void overwriteCachesPreviousWritersStartToCommitTimestamp() {\n+        Transaction writer = txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"first\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n+\n+        txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"second\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp()))\n+                .isNotNull()\n+                .isEqualTo(transactionService.get(writer.getTimestamp()));\n+    }\n+\n+    @Test\n+    public void abortedReadTransactionStillCachesWritersCommitTimestamp() {", "originalCommit": "9bb3607f69b7830f66ed817b5f181dce070be0dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23fb0b848b5cf890a10b122aa0f89c9aaf2201ac", "changed_code": [{"header": "diff --git a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\nindex 58e2b1d8ac..172356aae5 100644\n--- a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n+++ b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n", "chunk": "@@ -189,43 +189,38 @@ public class TransactionManagerTest extends TransactionTestSetup {\n \n         assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n \n-        txMgr.runTaskWithRetry(txn -> {\n-            get(txn, TEST_TABLE, \"row\", \"column\");\n-            return txn;\n-        });\n+        txMgr.runTaskWithRetry(txn -> get(txn, TEST_TABLE, \"row\", \"column\"));\n \n         assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp()))\n-                .isNotNull()\n                 .isEqualTo(transactionService.get(writer.getTimestamp()));\n     }\n \n     @Test\n     public void overwriteCachesPreviousWritersStartToCommitTimestamp() {\n-        Transaction writer = txMgr.runTaskWithRetry(txn -> {\n+        Long writerStartTimestamp = txMgr.runTaskWithRetry(txn -> {\n             put(txn, TEST_TABLE, \"row\", \"column\", \"first\");\n-            return txn;\n+            return txn.getTimestamp();\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp)).isNull();\n \n         txMgr.runTaskWithRetry(txn -> {\n             put(txn, TEST_TABLE, \"row\", \"column\", \"second\");\n-            return txn;\n+            return null;\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp()))\n-                .isNotNull()\n-                .isEqualTo(transactionService.get(writer.getTimestamp()));\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp))\n+                .isEqualTo(transactionService.get(writerStartTimestamp));\n     }\n \n     @Test\n-    public void abortedReadTransactionStillCachesWritersCommitTimestamp() {\n-        Transaction writer = txMgr.runTaskWithRetry(txn -> {\n+    public void readThanAbortStillCachesWritersCommitTimestamp() {\n+        Long writerStartTimestamp = txMgr.runTaskWithRetry(txn -> {\n             put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n-            return txn;\n+            return txn.getTimestamp();\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp)).isNull();\n \n         assertThatThrownBy(() -> txMgr.runTaskWithRetry(txn -> {\n             get(txn, TEST_TABLE, \"row\", \"column\");\n", "next_change": null}]}, "revised_code_in_main": {"commit": "4971ce2cbdf5953f8199675742a8849a627c9a76", "changed_code": [{"header": "diff --git a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\nindex 58e2b1d8ac..172356aae5 100644\n--- a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n+++ b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n", "chunk": "@@ -189,43 +189,38 @@ public class TransactionManagerTest extends TransactionTestSetup {\n \n         assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n \n-        txMgr.runTaskWithRetry(txn -> {\n-            get(txn, TEST_TABLE, \"row\", \"column\");\n-            return txn;\n-        });\n+        txMgr.runTaskWithRetry(txn -> get(txn, TEST_TABLE, \"row\", \"column\"));\n \n         assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp()))\n-                .isNotNull()\n                 .isEqualTo(transactionService.get(writer.getTimestamp()));\n     }\n \n     @Test\n     public void overwriteCachesPreviousWritersStartToCommitTimestamp() {\n-        Transaction writer = txMgr.runTaskWithRetry(txn -> {\n+        Long writerStartTimestamp = txMgr.runTaskWithRetry(txn -> {\n             put(txn, TEST_TABLE, \"row\", \"column\", \"first\");\n-            return txn;\n+            return txn.getTimestamp();\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp)).isNull();\n \n         txMgr.runTaskWithRetry(txn -> {\n             put(txn, TEST_TABLE, \"row\", \"column\", \"second\");\n-            return txn;\n+            return null;\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp()))\n-                .isNotNull()\n-                .isEqualTo(transactionService.get(writer.getTimestamp()));\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp))\n+                .isEqualTo(transactionService.get(writerStartTimestamp));\n     }\n \n     @Test\n-    public void abortedReadTransactionStillCachesWritersCommitTimestamp() {\n-        Transaction writer = txMgr.runTaskWithRetry(txn -> {\n+    public void readThanAbortStillCachesWritersCommitTimestamp() {\n+        Long writerStartTimestamp = txMgr.runTaskWithRetry(txn -> {\n             put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n-            return txn;\n+            return txn.getTimestamp();\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp)).isNull();\n \n         assertThatThrownBy(() -> txMgr.runTaskWithRetry(txn -> {\n             get(txn, TEST_TABLE, \"row\", \"column\");\n", "next_change": {"commit": "249de1a6f3e21eb3907451eb232d96066f659194", "changed_code": [{"header": "diff --git a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\nindex 172356aae5..388d04b181 100644\n--- a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n+++ b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n", "chunk": "@@ -220,12 +229,14 @@ public class TransactionManagerTest extends TransactionTestSetup {\n             return txn.getTimestamp();\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp)).isNull();\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp))\n+                .isNull();\n \n         assertThatThrownBy(() -> txMgr.runTaskWithRetry(txn -> {\n-            get(txn, TEST_TABLE, \"row\", \"column\");\n-            throw new RuntimeException(\"abort\");\n-        })).isInstanceOf(RuntimeException.class)\n+                    get(txn, TEST_TABLE, \"row\", \"column\");\n+                    throw new RuntimeException(\"abort\");\n+                }))\n+                .isInstanceOf(RuntimeException.class)\n                 .hasMessageContaining(\"abort\");\n \n         assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp))\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "4971ce2cbdf5953f8199675742a8849a627c9a76", "message": "Merge commit", "committedDate": null}, {"oid": "0d5bedcf003c6ebf885c3c254bc84e665e8b320f", "committedDate": "2020-03-04 15:29:26 +0000", "message": "[LW] Wire LW into TransactionStarter (#4605)"}, {"oid": "250622b829a6b144bb5915acfa8ee1f8adafba80", "committedDate": "2020-05-05 15:17:09 +0100", "message": "[ETE] Batching Txns, Attempt 2 (#4711)"}, {"oid": "a513fd2750dff53dc4c8522654f301669c485836", "committedDate": "2020-05-27 21:04:15 +0000", "message": "TransactionManager#startTransactions API. (#4799)"}, {"oid": "777910033bc172e0946cefb9cec9832c5b881f0a", "committedDate": "2020-06-02 09:28:26 +0000", "message": "Lock watches wiring and exposing API for PreCommitCondition. (#4811)"}, {"oid": "a2af140630eb3fbbd3e7c181c64d6920f5901b41", "committedDate": "2020-08-24 15:06:26 +0100", "message": "[PD$-110002] Part 15: MetricsFilterEvaluationContext (#4939)"}, {"oid": "249de1a6f3e21eb3907451eb232d96066f659194", "committedDate": "2020-10-20 12:04:30 +0000", "message": "Upgrade gradle-baseline (#5044)"}, {"oid": "ed869bdb9ec2e67bc16159a470a9c9ac242a1258", "committedDate": "2020-12-17 17:47:01 +0000", "message": "[LW] No Op cache tracks version (#5140)"}, {"oid": "8c091e50e9a10820f2b5fdb117454355934a550e", "committedDate": "2021-01-07 16:29:21 +0000", "message": "[LW] Unify the NoOpLockWatchManager and its underlying cache (#5180)"}, {"oid": "8c5fad277dfbe46719859f7875f12507f11fb1b7", "committedDate": "2021-05-04 14:15:49 +0000", "message": "[LW] Wire cache into transactions (#5402)"}, {"oid": "4054a8353675411296a97f23579fcc93384bd092", "committedDate": "2021-10-15 13:04:23 +0000", "message": "IMT5: ~Kill~ Severely Wound InMemoryTimestampService (#5695)"}, {"oid": "ed506ef9d818085dcf00adc723b777ac9c88a571", "committedDate": "2021-12-13 10:17:10 +0000", "message": "IMT6: Proper DelegatingTimelockService (#5814)"}, {"oid": "748257d3dba0dbede5299e9a109f174739fa7995", "committedDate": "2022-03-02 13:45:09 +0000", "message": "Allow multiple TMs for dbkvs  (#5924)"}, {"oid": "e197bb79ca88c58ccc686c8227afb49f3c47a02f", "committedDate": "2022-09-26 17:52:46 +0000", "message": "[TTS] Readonly transactions on TTS (#6212)"}, {"oid": "153b09bec320ca893ff53c7deeed54a5e5d74361", "committedDate": "2022-09-30 08:30:04 +0000", "message": "Revert \"[TTS] Readonly transactions on TTS (#6212)\" (#6254)"}, {"oid": "f2ede61743ee0c9dd03f4fd73b84e76672a8dbe0", "committedDate": "2022-10-06 10:14:20 +0000", "message": "Revert Revert \"[TTS] Readonly transactions on TTS (#6212)\" #6254 (#6257)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NTYxNg==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366065616", "body": "In general throughout this class, is `isNotNull()` really needed? I imagine the `isEqualTo` check should be good enough. `Transaction#getTimestamp` returns a primitive `long`, so non-null.", "bodyText": "In general throughout this class, is isNotNull() really needed? I imagine the isEqualTo check should be good enough. Transaction#getTimestamp returns a primitive long, so non-null.", "bodyHTML": "<p dir=\"auto\">In general throughout this class, is <code>isNotNull()</code> really needed? I imagine the <code>isEqualTo</code> check should be good enough. <code>Transaction#getTimestamp</code> returns a primitive <code>long</code>, so non-null.</p>", "author": "jeremyk-91", "createdAt": "2020-01-13T22:35:17Z", "path": "atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java", "diffHunk": "@@ -168,6 +170,74 @@ public void shouldNotConflictIfImmutableTimestampLockExpiresIfNoReadsOrWrites()\n         txnManagerWithMocks.runTaskThrowOnConflict(txn -> null);\n     }\n \n+    @Test\n+    public void writeDoesNotPopulateTimestampCache() {\n+        Transaction transaction = txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(transaction.getTimestamp())).isNull();\n+    }\n+\n+    @Test\n+    public void readCachesWritersStartToCommitTimestamp() {\n+        Transaction writer = txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n+\n+        txMgr.runTaskWithRetry(txn -> {\n+            get(txn, TEST_TABLE, \"row\", \"column\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp()))\n+                .isNotNull()\n+                .isEqualTo(transactionService.get(writer.getTimestamp()));", "originalCommit": "9bb3607f69b7830f66ed817b5f181dce070be0dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23fb0b848b5cf890a10b122aa0f89c9aaf2201ac", "changed_code": [{"header": "diff --git a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\nindex 58e2b1d8ac..172356aae5 100644\n--- a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n+++ b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n", "chunk": "@@ -189,43 +189,38 @@ public class TransactionManagerTest extends TransactionTestSetup {\n \n         assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n \n-        txMgr.runTaskWithRetry(txn -> {\n-            get(txn, TEST_TABLE, \"row\", \"column\");\n-            return txn;\n-        });\n+        txMgr.runTaskWithRetry(txn -> get(txn, TEST_TABLE, \"row\", \"column\"));\n \n         assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp()))\n-                .isNotNull()\n                 .isEqualTo(transactionService.get(writer.getTimestamp()));\n     }\n \n     @Test\n     public void overwriteCachesPreviousWritersStartToCommitTimestamp() {\n-        Transaction writer = txMgr.runTaskWithRetry(txn -> {\n+        Long writerStartTimestamp = txMgr.runTaskWithRetry(txn -> {\n             put(txn, TEST_TABLE, \"row\", \"column\", \"first\");\n-            return txn;\n+            return txn.getTimestamp();\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp)).isNull();\n \n         txMgr.runTaskWithRetry(txn -> {\n             put(txn, TEST_TABLE, \"row\", \"column\", \"second\");\n-            return txn;\n+            return null;\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp()))\n-                .isNotNull()\n-                .isEqualTo(transactionService.get(writer.getTimestamp()));\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp))\n+                .isEqualTo(transactionService.get(writerStartTimestamp));\n     }\n \n     @Test\n-    public void abortedReadTransactionStillCachesWritersCommitTimestamp() {\n-        Transaction writer = txMgr.runTaskWithRetry(txn -> {\n+    public void readThanAbortStillCachesWritersCommitTimestamp() {\n+        Long writerStartTimestamp = txMgr.runTaskWithRetry(txn -> {\n             put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n-            return txn;\n+            return txn.getTimestamp();\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp)).isNull();\n \n         assertThatThrownBy(() -> txMgr.runTaskWithRetry(txn -> {\n             get(txn, TEST_TABLE, \"row\", \"column\");\n", "next_change": null}]}, "revised_code_in_main": {"commit": "4971ce2cbdf5953f8199675742a8849a627c9a76", "changed_code": [{"header": "diff --git a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\nindex 58e2b1d8ac..172356aae5 100644\n--- a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n+++ b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n", "chunk": "@@ -189,43 +189,38 @@ public class TransactionManagerTest extends TransactionTestSetup {\n \n         assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n \n-        txMgr.runTaskWithRetry(txn -> {\n-            get(txn, TEST_TABLE, \"row\", \"column\");\n-            return txn;\n-        });\n+        txMgr.runTaskWithRetry(txn -> get(txn, TEST_TABLE, \"row\", \"column\"));\n \n         assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp()))\n-                .isNotNull()\n                 .isEqualTo(transactionService.get(writer.getTimestamp()));\n     }\n \n     @Test\n     public void overwriteCachesPreviousWritersStartToCommitTimestamp() {\n-        Transaction writer = txMgr.runTaskWithRetry(txn -> {\n+        Long writerStartTimestamp = txMgr.runTaskWithRetry(txn -> {\n             put(txn, TEST_TABLE, \"row\", \"column\", \"first\");\n-            return txn;\n+            return txn.getTimestamp();\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp)).isNull();\n \n         txMgr.runTaskWithRetry(txn -> {\n             put(txn, TEST_TABLE, \"row\", \"column\", \"second\");\n-            return txn;\n+            return null;\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp()))\n-                .isNotNull()\n-                .isEqualTo(transactionService.get(writer.getTimestamp()));\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp))\n+                .isEqualTo(transactionService.get(writerStartTimestamp));\n     }\n \n     @Test\n-    public void abortedReadTransactionStillCachesWritersCommitTimestamp() {\n-        Transaction writer = txMgr.runTaskWithRetry(txn -> {\n+    public void readThanAbortStillCachesWritersCommitTimestamp() {\n+        Long writerStartTimestamp = txMgr.runTaskWithRetry(txn -> {\n             put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n-            return txn;\n+            return txn.getTimestamp();\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp)).isNull();\n \n         assertThatThrownBy(() -> txMgr.runTaskWithRetry(txn -> {\n             get(txn, TEST_TABLE, \"row\", \"column\");\n", "next_change": {"commit": "249de1a6f3e21eb3907451eb232d96066f659194", "changed_code": [{"header": "diff --git a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\nindex 172356aae5..388d04b181 100644\n--- a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n+++ b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n", "chunk": "@@ -220,12 +229,14 @@ public class TransactionManagerTest extends TransactionTestSetup {\n             return txn.getTimestamp();\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp)).isNull();\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp))\n+                .isNull();\n \n         assertThatThrownBy(() -> txMgr.runTaskWithRetry(txn -> {\n-            get(txn, TEST_TABLE, \"row\", \"column\");\n-            throw new RuntimeException(\"abort\");\n-        })).isInstanceOf(RuntimeException.class)\n+                    get(txn, TEST_TABLE, \"row\", \"column\");\n+                    throw new RuntimeException(\"abort\");\n+                }))\n+                .isInstanceOf(RuntimeException.class)\n                 .hasMessageContaining(\"abort\");\n \n         assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp))\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "4971ce2cbdf5953f8199675742a8849a627c9a76", "message": "Merge commit", "committedDate": null}, {"oid": "0d5bedcf003c6ebf885c3c254bc84e665e8b320f", "committedDate": "2020-03-04 15:29:26 +0000", "message": "[LW] Wire LW into TransactionStarter (#4605)"}, {"oid": "250622b829a6b144bb5915acfa8ee1f8adafba80", "committedDate": "2020-05-05 15:17:09 +0100", "message": "[ETE] Batching Txns, Attempt 2 (#4711)"}, {"oid": "a513fd2750dff53dc4c8522654f301669c485836", "committedDate": "2020-05-27 21:04:15 +0000", "message": "TransactionManager#startTransactions API. (#4799)"}, {"oid": "777910033bc172e0946cefb9cec9832c5b881f0a", "committedDate": "2020-06-02 09:28:26 +0000", "message": "Lock watches wiring and exposing API for PreCommitCondition. (#4811)"}, {"oid": "a2af140630eb3fbbd3e7c181c64d6920f5901b41", "committedDate": "2020-08-24 15:06:26 +0100", "message": "[PD$-110002] Part 15: MetricsFilterEvaluationContext (#4939)"}, {"oid": "249de1a6f3e21eb3907451eb232d96066f659194", "committedDate": "2020-10-20 12:04:30 +0000", "message": "Upgrade gradle-baseline (#5044)"}, {"oid": "ed869bdb9ec2e67bc16159a470a9c9ac242a1258", "committedDate": "2020-12-17 17:47:01 +0000", "message": "[LW] No Op cache tracks version (#5140)"}, {"oid": "8c091e50e9a10820f2b5fdb117454355934a550e", "committedDate": "2021-01-07 16:29:21 +0000", "message": "[LW] Unify the NoOpLockWatchManager and its underlying cache (#5180)"}, {"oid": "8c5fad277dfbe46719859f7875f12507f11fb1b7", "committedDate": "2021-05-04 14:15:49 +0000", "message": "[LW] Wire cache into transactions (#5402)"}, {"oid": "4054a8353675411296a97f23579fcc93384bd092", "committedDate": "2021-10-15 13:04:23 +0000", "message": "IMT5: ~Kill~ Severely Wound InMemoryTimestampService (#5695)"}, {"oid": "ed506ef9d818085dcf00adc723b777ac9c88a571", "committedDate": "2021-12-13 10:17:10 +0000", "message": "IMT6: Proper DelegatingTimelockService (#5814)"}, {"oid": "748257d3dba0dbede5299e9a109f174739fa7995", "committedDate": "2022-03-02 13:45:09 +0000", "message": "Allow multiple TMs for dbkvs  (#5924)"}, {"oid": "e197bb79ca88c58ccc686c8227afb49f3c47a02f", "committedDate": "2022-09-26 17:52:46 +0000", "message": "[TTS] Readonly transactions on TTS (#6212)"}, {"oid": "153b09bec320ca893ff53c7deeed54a5e5d74361", "committedDate": "2022-09-30 08:30:04 +0000", "message": "Revert \"[TTS] Readonly transactions on TTS (#6212)\" (#6254)"}, {"oid": "f2ede61743ee0c9dd03f4fd73b84e76672a8dbe0", "committedDate": "2022-10-06 10:14:20 +0000", "message": "Revert Revert \"[TTS] Readonly transactions on TTS (#6212)\" #6254 (#6257)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NTgxNQ==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366065815", "body": "Might be cleaner in terms of minimum visibility to just return the timestamp from the transaction task.", "bodyText": "Might be cleaner in terms of minimum visibility to just return the timestamp from the transaction task.", "bodyHTML": "<p dir=\"auto\">Might be cleaner in terms of minimum visibility to just return the timestamp from the transaction task.</p>", "author": "jeremyk-91", "createdAt": "2020-01-13T22:35:45Z", "path": "atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java", "diffHunk": "@@ -168,6 +170,74 @@ public void shouldNotConflictIfImmutableTimestampLockExpiresIfNoReadsOrWrites()\n         txnManagerWithMocks.runTaskThrowOnConflict(txn -> null);\n     }\n \n+    @Test\n+    public void writeDoesNotPopulateTimestampCache() {\n+        Transaction transaction = txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n+            return txn;\n+        });", "originalCommit": "9bb3607f69b7830f66ed817b5f181dce070be0dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23fb0b848b5cf890a10b122aa0f89c9aaf2201ac", "changed_code": [{"header": "diff --git a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\nindex 58e2b1d8ac..172356aae5 100644\n--- a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n+++ b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n", "chunk": "@@ -172,12 +172,12 @@ public class TransactionManagerTest extends TransactionTestSetup {\n \n     @Test\n     public void writeDoesNotPopulateTimestampCache() {\n-        Transaction transaction = txMgr.runTaskWithRetry(txn -> {\n+        Long writerStartTimestamp = txMgr.runTaskWithRetry(txn -> {\n             put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n-            return txn;\n+            return txn.getTimestamp();\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(transaction.getTimestamp())).isNull();\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp)).isNull();\n     }\n \n     @Test\n", "next_change": null}]}, "revised_code_in_main": {"commit": "4971ce2cbdf5953f8199675742a8849a627c9a76", "changed_code": [{"header": "diff --git a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\nindex 58e2b1d8ac..172356aae5 100644\n--- a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n+++ b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n", "chunk": "@@ -172,12 +172,12 @@ public class TransactionManagerTest extends TransactionTestSetup {\n \n     @Test\n     public void writeDoesNotPopulateTimestampCache() {\n-        Transaction transaction = txMgr.runTaskWithRetry(txn -> {\n+        Long writerStartTimestamp = txMgr.runTaskWithRetry(txn -> {\n             put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n-            return txn;\n+            return txn.getTimestamp();\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(transaction.getTimestamp())).isNull();\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp)).isNull();\n     }\n \n     @Test\n", "next_change": {"commit": "249de1a6f3e21eb3907451eb232d96066f659194", "changed_code": [{"header": "diff --git a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\nindex 172356aae5..388d04b181 100644\n--- a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n+++ b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n", "chunk": "@@ -177,7 +183,8 @@ public class TransactionManagerTest extends TransactionTestSetup {\n             return txn.getTimestamp();\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp)).isNull();\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp))\n+                .isNull();\n     }\n \n     @Test\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "4971ce2cbdf5953f8199675742a8849a627c9a76", "message": "Merge commit", "committedDate": null}, {"oid": "0d5bedcf003c6ebf885c3c254bc84e665e8b320f", "committedDate": "2020-03-04 15:29:26 +0000", "message": "[LW] Wire LW into TransactionStarter (#4605)"}, {"oid": "250622b829a6b144bb5915acfa8ee1f8adafba80", "committedDate": "2020-05-05 15:17:09 +0100", "message": "[ETE] Batching Txns, Attempt 2 (#4711)"}, {"oid": "a513fd2750dff53dc4c8522654f301669c485836", "committedDate": "2020-05-27 21:04:15 +0000", "message": "TransactionManager#startTransactions API. (#4799)"}, {"oid": "777910033bc172e0946cefb9cec9832c5b881f0a", "committedDate": "2020-06-02 09:28:26 +0000", "message": "Lock watches wiring and exposing API for PreCommitCondition. (#4811)"}, {"oid": "a2af140630eb3fbbd3e7c181c64d6920f5901b41", "committedDate": "2020-08-24 15:06:26 +0100", "message": "[PD$-110002] Part 15: MetricsFilterEvaluationContext (#4939)"}, {"oid": "249de1a6f3e21eb3907451eb232d96066f659194", "committedDate": "2020-10-20 12:04:30 +0000", "message": "Upgrade gradle-baseline (#5044)"}, {"oid": "ed869bdb9ec2e67bc16159a470a9c9ac242a1258", "committedDate": "2020-12-17 17:47:01 +0000", "message": "[LW] No Op cache tracks version (#5140)"}, {"oid": "8c091e50e9a10820f2b5fdb117454355934a550e", "committedDate": "2021-01-07 16:29:21 +0000", "message": "[LW] Unify the NoOpLockWatchManager and its underlying cache (#5180)"}, {"oid": "8c5fad277dfbe46719859f7875f12507f11fb1b7", "committedDate": "2021-05-04 14:15:49 +0000", "message": "[LW] Wire cache into transactions (#5402)"}, {"oid": "4054a8353675411296a97f23579fcc93384bd092", "committedDate": "2021-10-15 13:04:23 +0000", "message": "IMT5: ~Kill~ Severely Wound InMemoryTimestampService (#5695)"}, {"oid": "ed506ef9d818085dcf00adc723b777ac9c88a571", "committedDate": "2021-12-13 10:17:10 +0000", "message": "IMT6: Proper DelegatingTimelockService (#5814)"}, {"oid": "748257d3dba0dbede5299e9a109f174739fa7995", "committedDate": "2022-03-02 13:45:09 +0000", "message": "Allow multiple TMs for dbkvs  (#5924)"}, {"oid": "e197bb79ca88c58ccc686c8227afb49f3c47a02f", "committedDate": "2022-09-26 17:52:46 +0000", "message": "[TTS] Readonly transactions on TTS (#6212)"}, {"oid": "153b09bec320ca893ff53c7deeed54a5e5d74361", "committedDate": "2022-09-30 08:30:04 +0000", "message": "Revert \"[TTS] Readonly transactions on TTS (#6212)\" (#6254)"}, {"oid": "f2ede61743ee0c9dd03f4fd73b84e76672a8dbe0", "committedDate": "2022-10-06 10:14:20 +0000", "message": "Revert Revert \"[TTS] Readonly transactions on TTS (#6212)\" #6254 (#6257)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NjUxMw==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366066513", "body": "I think we should test the logic in this class in this PR, especially since it's on a live path", "bodyText": "I think we should test the logic in this class in this PR, especially since it's on a live path", "bodyHTML": "<p dir=\"auto\">I think we should test the logic in this class in this PR, especially since it's on a live path</p>", "author": "jeremyk-91", "createdAt": "2020-01-13T22:37:46Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -495,6 +514,19 @@ private TransactionManager serializableInternal(@Output List<AutoCloseable> clos\n         return transactionManager;\n     }\n \n+    private TimestampCache getTimestampCache(\n+            MetricsManager metricsManager,\n+            Supplier<AtlasDbRuntimeConfig> runtimeConfigSupplier,\n+            Optional<PersistentTimestampStore> persistentTimestampStore) {\n+        LongSupplier cacheSize = () -> runtimeConfigSupplier.get().getTimestampCacheSize();\n+        Supplier<TimestampCache> timestampCacheSupplier = () ->\n+                persistentTimestampStore.map(store ->\n+                        OffHeapTimestampCache.create(store, metricsManager.getTaggedRegistry(), cacheSize))\n+                        .orElseGet(() -> new DefaultTimestampCache(metricsManager.getRegistry(), cacheSize));\n+\n+        return config().timestampCache().orElseGet(timestampCacheSupplier);", "originalCommit": "9bb3607f69b7830f66ed817b5f181dce070be0dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3966635617454f5426d2c79f6f16ac87da120ce7", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex d2b30578ab..bdf0504b84 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -524,7 +535,7 @@ public abstract class TransactionManagers {\n                         OffHeapTimestampCache.create(store, metricsManager.getTaggedRegistry(), cacheSize))\n                         .orElseGet(() -> new DefaultTimestampCache(metricsManager.getRegistry(), cacheSize));\n \n-        return config().timestampCache().orElseGet(timestampCacheSupplier);\n+        return atlasDbConfig.timestampCache().orElseGet(timestampCacheSupplier);\n     }\n \n     private static Callback<TransactionManager> createClearsTable() {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "4971ce2cbdf5953f8199675742a8849a627c9a76", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex d2b30578ab..ebbbd4a187 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -524,7 +538,7 @@ public abstract class TransactionManagers {\n                         OffHeapTimestampCache.create(store, metricsManager.getTaggedRegistry(), cacheSize))\n                         .orElseGet(() -> new DefaultTimestampCache(metricsManager.getRegistry(), cacheSize));\n \n-        return config().timestampCache().orElseGet(timestampCacheSupplier);\n+        return atlasDbConfig.timestampCache().orElseGet(timestampCacheSupplier);\n     }\n \n     private static Callback<TransactionManager> createClearsTable() {\n", "next_change": {"commit": "b2c255a21d89fd59cf0313d121cdd4f4bef64efe", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex ebbbd4a187..f25e5c8ab6 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -527,18 +527,32 @@ public abstract class TransactionManagers {\n     }\n \n     @VisibleForTesting\n-    static TimestampCache getTimestampCache(\n-            AtlasDbConfig atlasDbConfig,\n+    static TimestampCache timestampCache(\n+            AtlasDbConfig config,\n             MetricsManager metricsManager,\n-            Supplier<AtlasDbRuntimeConfig> runtimeConfigSupplier,\n-            Optional<PersistentTimestampStore> persistentTimestampStore) {\n-        LongSupplier cacheSize = () -> runtimeConfigSupplier.get().getTimestampCacheSize();\n+            Supplier<AtlasDbRuntimeConfig> runtimeConfig,\n+            Optional<PersistentTimestampStore> timestampStore) {\n+        LongSupplier cacheSize = () -> runtimeConfig.get().getTimestampCacheSize();\n         Supplier<TimestampCache> timestampCacheSupplier = () ->\n-                persistentTimestampStore.map(store ->\n+                timestampStore.map(store ->\n                         OffHeapTimestampCache.create(store, metricsManager.getTaggedRegistry(), cacheSize))\n                         .orElseGet(() -> new DefaultTimestampCache(metricsManager.getRegistry(), cacheSize));\n \n-        return atlasDbConfig.timestampCache().orElseGet(timestampCacheSupplier);\n+        return config.timestampCache().orElseGet(timestampCacheSupplier);\n+    }\n+\n+    private static TimestampCache instrumentedTimestampCache(\n+            AtlasDbConfig config,\n+            MetricsManager metricsManager,\n+            Supplier<AtlasDbRuntimeConfig> runtimeConfig,\n+            Optional<PersistentTimestampStore> timestampStore) {\n+        TimestampCache timestampCache = timestampCache(config, metricsManager, runtimeConfig, timestampStore);\n+\n+        return AtlasDbMetrics.instrumentTimed(\n+                metricsManager.getRegistry(),\n+                TimestampCache.class,\n+                timestampCache,\n+                MetricRegistry.name(timestampCache.getClass()));\n     }\n \n     private static Callback<TransactionManager> createClearsTable() {\n", "next_change": {"commit": "6327ceeb116649fb68f1227a53c5e025120c42d5", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex f25e5c8ab6..ee7c2b9910 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -509,52 +497,6 @@ public abstract class TransactionManagers {\n         return transactionManager;\n     }\n \n-    @VisibleForTesting\n-    static Optional<PersistentTimestampStore> constructPersistentTimestampStoreIfConfigured(\n-            AtlasDbConfig config,\n-            PersistentStorageFactory persistentStorageFactory,\n-            @Output List<AutoCloseable> closeables) {\n-        return initializeCloseable(\n-                config.persistentStorage().map(storageConfig -> {\n-                    Preconditions.checkState(\n-                            storageConfig instanceof RocksDbPersistentStorageConfig,\n-                            \"Storage config is not RocksDbPersistentStorageConfig.\",\n-                            SafeArg.of(\"configClass\", storageConfig.getClass()));\n-                    return persistentStorageFactory\n-                            .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig);\n-                }),\n-                closeables);\n-    }\n-\n-    @VisibleForTesting\n-    static TimestampCache timestampCache(\n-            AtlasDbConfig config,\n-            MetricsManager metricsManager,\n-            Supplier<AtlasDbRuntimeConfig> runtimeConfig,\n-            Optional<PersistentTimestampStore> timestampStore) {\n-        LongSupplier cacheSize = () -> runtimeConfig.get().getTimestampCacheSize();\n-        Supplier<TimestampCache> timestampCacheSupplier = () ->\n-                timestampStore.map(store ->\n-                        OffHeapTimestampCache.create(store, metricsManager.getTaggedRegistry(), cacheSize))\n-                        .orElseGet(() -> new DefaultTimestampCache(metricsManager.getRegistry(), cacheSize));\n-\n-        return config.timestampCache().orElseGet(timestampCacheSupplier);\n-    }\n-\n-    private static TimestampCache instrumentedTimestampCache(\n-            AtlasDbConfig config,\n-            MetricsManager metricsManager,\n-            Supplier<AtlasDbRuntimeConfig> runtimeConfig,\n-            Optional<PersistentTimestampStore> timestampStore) {\n-        TimestampCache timestampCache = timestampCache(config, metricsManager, runtimeConfig, timestampStore);\n-\n-        return AtlasDbMetrics.instrumentTimed(\n-                metricsManager.getRegistry(),\n-                TimestampCache.class,\n-                timestampCache,\n-                MetricRegistry.name(timestampCache.getClass()));\n-    }\n-\n     private static Callback<TransactionManager> createClearsTable() {\n         TableReference clearsTableRef = TargetedSweepTableFactory.of().getTableClearsTable(null).getTableRef();\n         byte[] clearsTableMetadata = TargetedSweepSchema.INSTANCE.getLatestSchema()\n", "next_change": {"commit": "b91eeec5563f46e8a2556316a127a0ed0986f8c0", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex ee7c2b9910..613733b01c 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -491,12 +546,23 @@ public abstract class TransactionManagers {\n                         lockAndTimestampServices,\n                         keyValueService,\n                         transactionManager,\n-                        Suppliers.compose(AtlasDbRuntimeConfig::compact, runtimeConfigSupplier::get)),\n+                        runtime.map(AtlasDbRuntimeConfig::compact)),\n                 closeables);\n \n         return transactionManager;\n     }\n \n+    @VisibleForTesting\n+    String getServiceName() {\n+        return Stream.of(config().namespace(),\n+                config().timelock().flatMap(TimeLockClientConfig::client),\n+                config().keyValueService().namespace())\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .findFirst()\n+                .orElse(\"UNKNOWN\");\n+    }\n+\n     private static Callback<TransactionManager> createClearsTable() {\n         TableReference clearsTableRef = TargetedSweepTableFactory.of().getTableClearsTable(null).getTableRef();\n         byte[] clearsTableMetadata = TargetedSweepSchema.INSTANCE.getLatestSchema()\n", "next_change": {"commit": "d050105f11fa6cb7fd3aafbc59543de315d1afa8", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex 613733b01c..d78a4f0d8a 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -552,15 +552,18 @@ public abstract class TransactionManagers {\n         return transactionManager;\n     }\n \n+    abstract Optional<String> serviceIdentifierOverride();\n+\n     @VisibleForTesting\n-    String getServiceName() {\n-        return Stream.of(config().namespace(),\n+    @Value.Derived\n+    String serviceName() {\n+        return serviceIdentifierOverride().orElseGet(() -> Stream.of(config().namespace(),\n                 config().timelock().flatMap(TimeLockClientConfig::client),\n                 config().keyValueService().namespace())\n                 .filter(Optional::isPresent)\n                 .map(Optional::get)\n                 .findFirst()\n-                .orElse(\"UNKNOWN\");\n+                .orElse(\"UNKNOWN\"));\n     }\n \n     private static Callback<TransactionManager> createClearsTable() {\n", "next_change": {"commit": "f8ce36368070c43e87676ac1d1bbd9a79674d3a7", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex d78a4f0d8a..6af3b5219b 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -552,18 +549,84 @@ public abstract class TransactionManagers {\n         return transactionManager;\n     }\n \n+    private MetricsManager setUpMetricsAndGetMetricsManager() {\n+        MetricRegistry internalAtlasDbMetrics = new MetricRegistry();\n+        TaggedMetricRegistry internalTaggedAtlasDbMetrics = new DefaultTaggedMetricRegistry();\n+        MetricsManager metricsManager = MetricsManagers.of(\n+                internalAtlasDbMetrics,\n+                internalTaggedAtlasDbMetrics,\n+                runtimeConfig()\n+                        .map(runtimeConfigRefreshable -> runtimeConfigRefreshable.map(\n+                                maybeRuntime -> maybeRuntime.map(AtlasDbRuntimeConfig::enableMetricFiltering)\n+                                        .orElse(true)))\n+                        .orElseGet(() -> Refreshable.only(true)));\n+        globalTaggedMetricRegistry().addMetrics(\n+                AtlasDbMetricNames.LIBRARY_ORIGIN_TAG,\n+                AtlasDbMetricNames.LIBRARY_ORIGIN_VALUE,\n+                metricsManager.getPublishableMetrics());\n+        return metricsManager;\n+    }\n+\n+    private Optional<TimeLockFeedbackBackgroundTask> getTimeLockFeedbackBackgroundTask(\n+            @Output List<AutoCloseable> closeables,\n+            AtlasDbConfig config,\n+            Refreshable<AtlasDbRuntimeConfig> runtimeConfig) {\n+        if (isUsingTimeLock(config, runtimeConfig.current())) {\n+            Refreshable<List<TimeLockClientFeedbackService>> refreshableTimeLockClientFeedbackServices\n+                    = getTimeLockClientFeedbackServices(config, runtimeConfig, userAgent());\n+            return Optional.of(initializeCloseable(\n+                    () -> TimeLockFeedbackBackgroundTask.create(\n+                            globalTaggedMetricRegistry(),\n+                            () -> AtlasDbVersion.readVersion(),\n+                            serviceName(),\n+                            refreshableTimeLockClientFeedbackServices,\n+                            namespace()), closeables));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @VisibleForTesting\n+    static Refreshable<List<TimeLockClientFeedbackService>> getTimeLockClientFeedbackServices(AtlasDbConfig config,\n+            Refreshable<AtlasDbRuntimeConfig> runtimeConfig,\n+            UserAgent userAgent) {\n+        Refreshable<ServerListConfig> serverListConfigSupplier =\n+                getServerListConfigSupplierForTimeLock(config, runtimeConfig);\n+        DialogueClients.ReloadingFactory reloadingFactory = DialogueClients.create(\n+                Refreshable.only(ServicesConfigBlock.builder().build()));\n+\n+        BroadcastDialogueClientFactory broadcastDialogueClientFactory = BroadcastDialogueClientFactory.create(\n+                reloadingFactory,\n+                serverListConfigSupplier,\n+                userAgent,\n+                AuxiliaryRemotingParameters\n+                        .builder()\n+                        .shouldRetry(true)\n+                        .userAgent(userAgent)\n+                        .shouldLimitPayload(true)\n+                        .build());\n+\n+        return broadcastDialogueClientFactory.getSingleNodeProxies(\n+                TimeLockClientFeedbackService.class,\n+                true);\n+    }\n+\n     abstract Optional<String> serviceIdentifierOverride();\n \n     @VisibleForTesting\n     @Value.Derived\n     String serviceName() {\n-        return serviceIdentifierOverride().orElseGet(() -> Stream.of(config().namespace(),\n+        return serviceIdentifierOverride().orElseGet(this::namespace);\n+    }\n+\n+    @Value.Derived\n+    String namespace() {\n+        return Stream.of(config().namespace(),\n                 config().timelock().flatMap(TimeLockClientConfig::client),\n                 config().keyValueService().namespace())\n                 .filter(Optional::isPresent)\n                 .map(Optional::get)\n                 .findFirst()\n-                .orElse(\"UNKNOWN\"));\n+                .orElse(\"UNKNOWN\");\n     }\n \n     private static Callback<TransactionManager> createClearsTable() {\n", "next_change": {"commit": "249de1a6f3e21eb3907451eb232d96066f659194", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex 6af3b5219b..bfb6d1a562 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -620,9 +650,10 @@ public abstract class TransactionManagers {\n \n     @Value.Derived\n     String namespace() {\n-        return Stream.of(config().namespace(),\n-                config().timelock().flatMap(TimeLockClientConfig::client),\n-                config().keyValueService().namespace())\n+        return Stream.of(\n+                        config().namespace(),\n+                        config().timelock().flatMap(TimeLockClientConfig::client),\n+                        config().keyValueService().namespace())\n                 .filter(Optional::isPresent)\n                 .map(Optional::get)\n                 .findFirst()\n", "next_change": null}, {"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex 6af3b5219b..bfb6d1a562 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -630,8 +661,10 @@ public abstract class TransactionManagers {\n     }\n \n     private static Callback<TransactionManager> createClearsTable() {\n-        TableReference clearsTableRef = TargetedSweepTableFactory.of().getTableClearsTable(null).getTableRef();\n-        byte[] clearsTableMetadata = TargetedSweepSchema.INSTANCE.getLatestSchema()\n+        TableReference clearsTableRef =\n+                TargetedSweepTableFactory.of().getTableClearsTable(null).getTableRef();\n+        byte[] clearsTableMetadata = TargetedSweepSchema.INSTANCE\n+                .getLatestSchema()\n                 .getAllTablesAndIndexMetadata()\n                 .get(clearsTableRef)\n                 .persistToBytes();\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "4971ce2cbdf5953f8199675742a8849a627c9a76", "message": "Merge commit", "committedDate": null}, {"oid": "b2c255a21d89fd59cf0313d121cdd4f4bef64efe", "committedDate": "2020-01-15 10:45:16 +0000", "message": "Instrument timestamp cache (#4510)"}, {"oid": "1a4b4b058e9fc316a9157e83cba2fd26bf666d53", "committedDate": "2020-01-16 20:21:27 +0000", "message": "Persistent storage refactoring (#4512)"}, {"oid": "1fcf8cf1ad00671ef6697b6477736368b24c0316", "committedDate": "2020-01-21 11:53:18 +0000", "message": "Shorter Nonblocking Calls, Part 3: Breaking the TimeLock Logjam (#4520)"}, {"oid": "6327ceeb116649fb68f1227a53c5e025120c42d5", "committedDate": "2020-01-23 15:20:36 +0000", "message": "Remove concept of namespaces and LogicalPersistentStore. (#4522)"}, {"oid": "a4f9b32b914b25cef8d8a7e9ed3006441598207d", "committedDate": "2020-02-18 18:27:35 +0000", "message": "Start migrating AtlasDB to full conjure (#4545)"}, {"oid": "90813f3cb8568007a71f7de6db7e2a31e6cbcc9e", "committedDate": "2020-02-27 20:00:44 +0000", "message": "[Conjure Undertow, Part 2] Upgrade timelock dependency and inline (#4609)"}, {"oid": "f17735e1546ec9544da9182d957f16c818d3f2a2", "committedDate": "2020-03-03 19:49:33 +0000", "message": "Client side changes for conjure endpoints (#4628)"}, {"oid": "0d5bedcf003c6ebf885c3c254bc84e665e8b320f", "committedDate": "2020-03-04 15:29:26 +0000", "message": "[LW] Wire LW into TransactionStarter (#4605)"}, {"oid": "62dddc89a5ccc49a6e5e47d5c3406158a20db5de", "committedDate": "2020-03-05 18:57:27 +0000", "message": "[PDS-113120] Conjure TimeLock Service had blocking and non-bloc\u2026 (#4638)"}, {"oid": "5fa91177e3b5178d901a02295e0ac81181d482d0", "committedDate": "2020-03-10 19:07:44 +0000", "message": "[Conjure Java Runtime] Part 26: Story of Thanatosis (Removing AtlasDB-Feign Entirely) (#4561)"}, {"oid": "68713a1d545d280d1abb6162a324e1aa27d3c3f2", "committedDate": "2020-03-11 09:38:50 +0000", "message": "[PDS-113349] Clients for Paxos resources should not support blocking operations (#4643)"}, {"oid": "e7f2a021efeedb28322fb16c5931b7229435a04a", "committedDate": "2020-04-06 16:45:04 +0100", "message": "[LW] Remove old client and resource and use undertow (#4676)"}, {"oid": "19cbbbca5667f4498daeaaec0277d5861bbde69f", "committedDate": "2020-04-22 13:45:52 +0100", "message": "Use refreshable for runtime config (#4723)"}, {"oid": "618c241d51923cc5a692e412ccd083014a190f73", "committedDate": "2020-04-27 09:30:46 +0100", "message": "Remove deprecation until downstream services catch up. (#4733)"}, {"oid": "ce3c1f084f1c9f04721617f988f1c5970fbddda0", "committedDate": "2020-04-27 09:37:49 +0100", "message": "allow disabling sweepstats kvs live (#4731)"}, {"oid": "62325dbfd96ca380c2ad3768f66f09dd303b0ab8", "committedDate": "2020-05-12 11:57:31 +0100", "message": "[Dialogue] Part 1: BlockingSensitive -> TimeoutSensitive Nomenclature Changes (#4761)"}, {"oid": "75e61de317e66f88ef63f941cc9b356636dc97d9", "committedDate": "2020-05-13 18:10:19 +0100", "message": "[Dialogue] Part 4: Runtime Configuration and ETE Testing (#4766)"}, {"oid": "1ecb93b081ad795074b29c5a99f73993e4b19cfc", "committedDate": "2020-05-15 09:26:12 +0100", "message": "[Dialogue] Part 5: Fix Missing Instrumentation (#4776)"}, {"oid": "e3c27c5054ea8cc0cecf3d71c34047460a4e1090", "committedDate": "2020-05-18 08:02:46 +0000", "message": "[Dialogue] Part 6: Road to Multitenancy (#4778)"}, {"oid": "b246de59728aec2c63dcefa96d50268c3a37c6eb", "committedDate": "2020-05-26 14:42:41 +0100", "message": "[Dialogue] Part 9: Shims for Lesser Used Services: AtlasDB -> TimeLock (#4794)"}, {"oid": "a513fd2750dff53dc4c8522654f301669c485836", "committedDate": "2020-05-27 21:04:15 +0000", "message": "TransactionManager#startTransactions API. (#4799)"}, {"oid": "777910033bc172e0946cefb9cec9832c5b881f0a", "committedDate": "2020-06-02 09:28:26 +0000", "message": "Lock watches wiring and exposing API for PreCommitCondition. (#4811)"}, {"oid": "25eb18882f8524911efb1aec3d1391abeb1cf3d8", "committedDate": "2020-06-09 10:22:33 +0100", "message": "[PDS-95791/Post Mortems] Local Lock Trackers (#4825)"}, {"oid": "b91eeec5563f46e8a2556316a127a0ed0986f8c0", "committedDate": "2020-06-16 16:19:57 +0100", "message": "Feedback 1 (#4833)"}, {"oid": "e26bd3fcac8c8535b31a8d70350ecf286d7ce4e1", "committedDate": "2020-06-16 16:31:20 +0100", "message": "Override serviceName"}, {"oid": "9312e5695ed971cc164f4c3daafab07715a42e2b", "committedDate": "2020-06-16 16:35:51 +0100", "message": "Revert \"Override serviceName\""}, {"oid": "5dface245b6f8e471b6a6328bdacf8f51bdb027f", "committedDate": "2020-06-16 17:46:39 +0100", "message": "override service name (#4840)"}, {"oid": "d050105f11fa6cb7fd3aafbc59543de315d1afa8", "committedDate": "2020-06-17 15:03:36 +0100", "message": "Add serviceId (#4843)"}, {"oid": "289a4c2602433af52fe5a79a835b911ef2031184", "committedDate": "2020-06-22 14:43:34 +0100", "message": "[PD$-110002] CONTENTIOUS - Part 4: Redirect All Metrics To TaggedMetricRegistries (#4846)"}, {"oid": "4f949bb68f78f4a53a0a2df4984bad6977c71b98", "committedDate": "2020-06-22 14:19:33 +0000", "message": "[LW] Client side event cache (#4806)"}, {"oid": "3607c938ec15496cf16c94ee2c26a0d898e075e5", "committedDate": "2020-06-22 19:11:39 +0100", "message": "report feedback to timeLock (#4845)"}, {"oid": "2944989da4636325dd338e60bd50c60abd1f78ee", "committedDate": "2020-06-23 11:36:02 +0100", "message": "[Dialogue] Part 13: Bonfire of Configuration (#4855)"}, {"oid": "3347cca284f5c1dfafe45ccab7c035e69af16a21", "committedDate": "2020-06-23 12:32:51 +0100", "message": "[PDS$-110002] Part 5 "}, {"oid": "4784255206dac195c9162206a9948c3f4fc9cfad", "committedDate": "2020-06-25 18:06:49 +0100", "message": "[Dialogue] Part 14: Pure Dialogue for LockWatchingService (#4857)"}, {"oid": "934207a84be4ddaa282e10da644febd466eef34e", "committedDate": "2020-06-30 20:25:54 +0100", "message": "[PD$-110002] Part 6: One-Shots and Legacies (#4867)"}, {"oid": "f8ce36368070c43e87676ac1d1bbd9a79674d3a7", "committedDate": "2020-07-07 14:54:45 +0000", "message": "Namespace in TM (#4869)"}, {"oid": "28e509daee925a4b4f749e1b9667c3c0bb74959e", "committedDate": "2020-07-07 17:06:50 +0000", "message": "Atlas dialogue consumption provides a ptexecutor cached pool (#4883)"}, {"oid": "d131351916b55cbe69ab7c7ed9410f17094980e8", "committedDate": "2020-07-07 21:45:27 +0100", "message": "Add logging to initialisation path (#4886)"}, {"oid": "f6d41b09dcb27216600b297e73ceb86a6a91876e", "committedDate": "2020-07-29 14:40:28 +0100", "message": "[TimeLock blue-green] PingV2 "}, {"oid": "eda6513b192b3169ef4ba40c1cbe7e6ba529d1e1", "committedDate": "2020-08-14 14:37:45 +0100", "message": "Reuse Dialogue Factory in Timelock Adjudication Service (#4937)"}, {"oid": "5db7a1e5d87dd3be1f604e725b66d68d185dac6e", "committedDate": "2020-08-21 11:33:11 +0100", "message": "Don't Register Duplicate Metrics (#4954)"}, {"oid": "a2af140630eb3fbbd3e7c181c64d6920f5901b41", "committedDate": "2020-08-24 15:06:26 +0100", "message": "[PD$-110002] Part 15: MetricsFilterEvaluationContext (#4939)"}, {"oid": "64f0660ba1c3f8b05222d729f625cc21a796c4cc", "committedDate": "2020-09-07 18:16:55 +0100", "message": "Bug fix (#4976)"}, {"oid": "249de1a6f3e21eb3907451eb232d96066f659194", "committedDate": "2020-10-20 12:04:30 +0000", "message": "Upgrade gradle-baseline (#5044)"}, {"oid": "8106ea9c4dd52cded65c5bbee63bf68ade32bffd", "committedDate": "2020-10-22 10:48:31 +0000", "message": "Leader Election Metrics 1a: Client Side Wiring (#5062)"}, {"oid": "bbcad9eac1cbf82158df0b66b98c724ec9f3c645", "committedDate": "2020-10-26 18:13:06 +0000", "message": "Fail on compiler warnings (#5081)"}, {"oid": "91aa45873fbe458d6fb8bfa3bd12111b684e9052", "committedDate": "2020-10-27 13:26:25 +0000", "message": "Enforce more error-prone checks (#5082)"}, {"oid": "1b498ace48020b97cbc1e058c3bd4ee987bd71e0", "committedDate": "2020-11-25 15:30:15 +0000", "message": "Excavator: Upgrades Baseline to the latest version (#5054)"}, {"oid": "29eb638a9bb80d2eee2d7fcd0d3b11f7b497ea25", "committedDate": "2020-11-30 11:47:07 +0000", "message": "[Cross Client Batching LeaderTimes - 3b] "}, {"oid": "ed869bdb9ec2e67bc16159a470a9c9ac242a1258", "committedDate": "2020-12-17 17:47:01 +0000", "message": "[LW] No Op cache tracks version (#5140)"}, {"oid": "8c091e50e9a10820f2b5fdb117454355934a550e", "committedDate": "2021-01-07 16:29:21 +0000", "message": "[LW] Unify the NoOpLockWatchManager and its underlying cache (#5180)"}, {"oid": "e75db01e281f12bd105b1ebf8623858866551ae9", "committedDate": "2021-01-26 11:06:20 +0000", "message": "Excavator: Upgrades Baseline to the latest version (#5169)"}, {"oid": "1737f7f27a84c4258384bd7f0e7e3efe52891749", "committedDate": "2021-02-16 12:49:33 +0000", "message": "[Cross Client Batching] "}, {"oid": "de4d0a7ad60b030ce3d61625bc22f1f4153ea314", "committedDate": "2021-03-02 12:07:56 +0000", "message": "install and runtime keyValueService config must be merged (#5282)"}, {"oid": "4c40d4306cb92f1fd2dc793a301f3d9246ad426e", "committedDate": "2021-03-02 13:37:10 +0000", "message": "[CCB] "}, {"oid": "fd350803832dd39eb1de79d9bc414b187c783557", "committedDate": "2021-03-04 14:39:01 +0000", "message": "[CCB] "}, {"oid": "5038278a4f39f1e558e837e77857a096522dac5a", "committedDate": "2021-03-24 11:15:35 +0000", "message": "[PDS-169034] Background Sweep configuration (#5334)"}, {"oid": "de682a394d0380f87620c72dd1a47545b7ff8642", "committedDate": "2021-03-31 13:15:09 +0000", "message": "[PDS-172208] "}, {"oid": "197aa64b26377782bccf2322eaa973f42d4de177", "committedDate": "2021-04-26 10:17:14 +0100", "message": "[LW] CodeGen for caching and register watches (#5395)"}, {"oid": "8c5fad277dfbe46719859f7875f12507f11fb1b7", "committedDate": "2021-05-04 14:15:49 +0000", "message": "[LW] Wire cache into transactions (#5402)"}, {"oid": "f3f9d6a1d3fc95f5094880b8ef965a3a440701d5", "committedDate": "2021-05-10 14:32:37 +0000", "message": "[LW] Make the value cache configurable (#5442)"}, {"oid": "92438961b5d26ac29b96be10c8d6d1ad3f75617b", "committedDate": "2021-06-08 11:07:49 +0000", "message": "Introduce Immutables Meta-Annotations (#5494)"}, {"oid": "dfc86abe9c0d31cbb9959042e418acda1f6d7e3b", "committedDate": "2021-07-26 21:15:39 +0000", "message": "Manually run the SafeLogger migration (#5572)"}, {"oid": "d960176dc37396732885a63552634e5865942751", "committedDate": "2021-07-27 13:11:19 +0100", "message": "Revert \"Manually run the SafeLogger migration\" (#5573)"}, {"oid": "3f5ff3415fc2301941b870c65ef38103c6cfa907", "committedDate": "2021-07-27 13:22:46 +0000", "message": "Manually run the SafeLogger migration, take 2 (#5575)"}, {"oid": "551a6850007309911551a39e2795e46d327d966b", "committedDate": "2021-08-17 16:19:26 +0000", "message": "[Correctness Logging] Part 1: Explicit Timestamp Violation Metrics (#5599)"}, {"oid": "ccee1801a9d7faa2afcce4ef4b29caf14a4c6161", "committedDate": "2021-09-10 13:45:39 +0000", "message": "Leaky sweep (#5628)"}, {"oid": "396611accd1630c53b532f3282b59911dbf294e1", "committedDate": "2021-09-23 11:51:48 +0000", "message": "Nuke Persistent Lock (#5654)"}, {"oid": "da1ecd97c5650243e6e5f97af221d826cf8d0363", "committedDate": "2021-09-23 15:48:58 +0000", "message": "Do not recreate configs unnecessarily (#5651)"}, {"oid": "d72b58f72c91ccb297ec061ec7a1157a200d05fb", "committedDate": "2021-10-06 12:56:25 +0000", "message": "[IMT2] Moving code around (#5689)"}, {"oid": "c43510ec73325dd1926b40480b599de96b4a8405", "committedDate": "2021-10-07 16:00:27 +0000", "message": "IMT3: add InMemoryLockAndTimestampServiceFactory (#5691)"}, {"oid": "9233c1a43980144c96b1ddcd14796e3b33769cbf", "committedDate": "2021-10-11 10:27:20 +0000", "message": "IMT4: createInMemory rewiring (#5692)"}, {"oid": "c0156a2217f0d6a813122630b987020a3fb21a54", "committedDate": "2021-10-29 13:22:02 +0000", "message": "Leaks are good (#5729)"}, {"oid": "976b455042e5ed9fe518759e77e888a5148ad29f", "committedDate": "2021-11-24 16:51:24 +0000", "message": "[TXN3] PutUnlessExists table (#5763)"}, {"oid": "24802b54f1747b53d652744cf779f1436ef095df", "committedDate": "2021-11-26 13:17:26 +0000", "message": "[Transactions3] TimedConsensusForgettingStore (#5788)"}, {"oid": "d9bc84947088995c680c99d84bd86c49c9ee8f39", "committedDate": "2021-12-02 14:26:42 +0000", "message": "[Jank] Remember oldest timestamp after TS has been running (#5772)"}, {"oid": "1d8416939e6b2f63f29a94dc5b1096452f24331e", "committedDate": "2021-12-07 12:25:36 +0000", "message": "Disable TL adjudication flag (#5810)"}, {"oid": "748257d3dba0dbede5299e9a109f174739fa7995", "committedDate": "2022-03-02 13:45:09 +0000", "message": "Allow multiple TMs for dbkvs  (#5924)"}, {"oid": "83cec56c9ce57777f9b92bd94f54e9379ca89469", "committedDate": "2022-04-12 18:07:45 +0000", "message": "[Runtime Config] Part 1: Merge semantics, abstracting merged config and exposing DerivedSnapshotConfig. (#5995)"}, {"oid": "434b45092b064bb46ae28d5ae93eba8a67d2c83b", "committedDate": "2022-05-03 17:07:19 +0000", "message": "[PDS-265137 -> Develop] Accept Staging Reads on Version Three (#6022)"}, {"oid": "3b1dded26663aee93389b009f6b9b42f5b9d74ca", "committedDate": "2022-06-24 13:51:02 +0100", "message": "Make thread dump configurable (#6084)"}, {"oid": "d55ea59da1e181c82f7460e2384bd7b9e1288ccd", "committedDate": "2022-07-01 11:14:33 +0100", "message": "Kill redundant Oldest TS ts tracker (#6113)"}, {"oid": "cb6fd92be6964ea7c1b0cca8e8fe09a56cecaa4e", "committedDate": "2022-07-19 18:14:40 +0000", "message": "[TTS] Force enable sweep queue writes (#6127)"}, {"oid": "3b81ff19acac2abe71337b2b30eecaefe68d802c", "committedDate": "2022-07-25 16:38:58 +0000", "message": "Timelock topology metric (#6157)"}, {"oid": "e197bb79ca88c58ccc686c8227afb49f3c47a02f", "committedDate": "2022-09-26 17:52:46 +0000", "message": "[TTS] Readonly transactions on TTS (#6212)"}, {"oid": "153b09bec320ca893ff53c7deeed54a5e5d74361", "committedDate": "2022-09-30 08:30:04 +0000", "message": "Revert \"[TTS] Readonly transactions on TTS (#6212)\" (#6254)"}, {"oid": "f2ede61743ee0c9dd03f4fd73b84e76672a8dbe0", "committedDate": "2022-10-06 10:14:20 +0000", "message": "Revert Revert \"[TTS] Readonly transactions on TTS (#6212)\" #6254 (#6257)"}, {"oid": "717c2e5e8fe4163802a9e7fc3596448ad3d36010", "committedDate": "2022-10-17 10:02:08 +0000", "message": "[TTS] Update A (#6263)"}, {"oid": "58a31e4d48ac138a0ec5e2186c4582a2a89dd72e", "committedDate": "2023-04-13 20:17:13 +0100", "message": "Don't register SweeperService (#6516)"}, {"oid": "a732d2ad19db9312e9d3ef7b01079b81616c950d", "committedDate": "2023-04-14 15:31:25 +0000", "message": "Simplify sweep enabled configuration (#6515)"}, {"oid": "9d3b419972f969d98a2e09c33312f005c2725460", "committedDate": "2023-05-18 15:38:07 +0000", "message": "Skramer/buggify timelock (#6557)"}]}, {"oid": "23fb0b848b5cf890a10b122aa0f89c9aaf2201ac", "url": "https://github.com/palantir/atlasdb/commit/23fb0b848b5cf890a10b122aa0f89c9aaf2201ac", "message": "Initial comments fixed.", "committedDate": "2020-01-14T10:10:43Z", "type": "commit"}, {"oid": "3966635617454f5426d2c79f6f16ac87da120ce7", "url": "https://github.com/palantir/atlasdb/commit/3966635617454f5426d2c79f6f16ac87da120ce7", "message": "Added tests for hot path.", "committedDate": "2020-01-14T12:03:16Z", "type": "commit"}, {"oid": "d744687cba4ca8290fab98c832dd69ce670b16d5", "url": "https://github.com/palantir/atlasdb/commit/d744687cba4ca8290fab98c832dd69ce670b16d5", "message": "Fixed indentation.", "committedDate": "2020-01-14T12:48:16Z", "type": "commit"}, {"oid": "33a6f5397d6e8989ecb79a5ab096cefab08eef91", "url": "https://github.com/palantir/atlasdb/commit/33a6f5397d6e8989ecb79a5ab096cefab08eef91", "message": "Test simplification.", "committedDate": "2020-01-14T13:56:29Z", "type": "commit"}, {"oid": "a372ff6d385cbcba4bba9cc0210e5e3fa5df216f", "url": "https://github.com/palantir/atlasdb/commit/a372ff6d385cbcba4bba9cc0210e5e3fa5df216f", "message": "Simplify tests.", "committedDate": "2020-01-14T13:58:27Z", "type": "commit"}, {"oid": "5099c89f4ebdf50fc8efe37fe77f35ab0c7bedb3", "url": "https://github.com/palantir/atlasdb/commit/5099c89f4ebdf50fc8efe37fe77f35ab0c7bedb3", "message": "Revert rename.", "committedDate": "2020-01-14T15:20:40Z", "type": "commit"}, {"oid": "3ccb94af6c4bc2651b4449f4461aeef34c0f759e", "url": "https://github.com/palantir/atlasdb/commit/3ccb94af6c4bc2651b4449f4461aeef34c0f759e", "message": "Fix absolute paths.", "committedDate": "2020-01-14T15:56:46Z", "type": "commit"}, {"oid": "0a43ce1c06e5e297492a4bb2778aa05a88bb81b9", "url": "https://github.com/palantir/atlasdb/commit/0a43ce1c06e5e297492a4bb2778aa05a88bb81b9", "message": "More fixes.", "committedDate": "2020-01-14T17:04:09Z", "type": "commit"}, {"oid": "ad865b2757050ea6ea113acdfd4f374553cd6cea", "url": "https://github.com/palantir/atlasdb/commit/ad865b2757050ea6ea113acdfd4f374553cd6cea", "message": "Better solution for multitenancy.", "committedDate": "2020-01-14T17:45:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMjQwMg==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366512402", "body": "nit: maybe `constructPersistentTimestampStoreIfConfigured`?", "bodyText": "nit: maybe constructPersistentTimestampStoreIfConfigured?", "bodyHTML": "<p dir=\"auto\">nit: maybe <code>constructPersistentTimestampStoreIfConfigured</code>?</p>", "author": "jeremyk-91", "createdAt": "2020-01-14T18:52:03Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -495,6 +509,32 @@ private TransactionManager serializableInternal(@Output List<AutoCloseable> clos\n         return transactionManager;\n     }\n \n+    @VisibleForTesting\n+    static Optional<PersistentTimestampStore> constructPersistentTimestampStore(", "originalCommit": "ad865b2757050ea6ea113acdfd4f374553cd6cea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMDU5OQ==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366530599", "bodyText": "Renamed.", "author": "OStevan", "createdAt": "2020-01-14T19:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMjQwMg=="}], "type": "inlineReview", "revised_code": {"commit": "503dfbde8603ebba45e769b9f253dc5d58f71d30", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex cf6c4b0cf1..ebbbd4a187 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -510,13 +510,19 @@ public abstract class TransactionManagers {\n     }\n \n     @VisibleForTesting\n-    static Optional<PersistentTimestampStore> constructPersistentTimestampStore(\n+    static Optional<PersistentTimestampStore> constructPersistentTimestampStoreIfConfigured(\n             AtlasDbConfig config,\n             PersistentStorageFactory persistentStorageFactory,\n             @Output List<AutoCloseable> closeables) {\n         return initializeCloseable(\n-                config.persistentStorage().map(storageConfig -> persistentStorageFactory\n-                        .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig)),\n+                config.persistentStorage().map(storageConfig -> {\n+                    Preconditions.checkState(\n+                            storageConfig instanceof RocksDbPersistentStorageConfig,\n+                            \"Storage config is not RocksDbPersistentStorageConfig.\",\n+                            SafeArg.of(\"configClass\", storageConfig.getClass()));\n+                    return persistentStorageFactory\n+                            .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig);\n+                }),\n                 closeables);\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "4971ce2cbdf5953f8199675742a8849a627c9a76", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex cf6c4b0cf1..ebbbd4a187 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -510,13 +510,19 @@ public abstract class TransactionManagers {\n     }\n \n     @VisibleForTesting\n-    static Optional<PersistentTimestampStore> constructPersistentTimestampStore(\n+    static Optional<PersistentTimestampStore> constructPersistentTimestampStoreIfConfigured(\n             AtlasDbConfig config,\n             PersistentStorageFactory persistentStorageFactory,\n             @Output List<AutoCloseable> closeables) {\n         return initializeCloseable(\n-                config.persistentStorage().map(storageConfig -> persistentStorageFactory\n-                        .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig)),\n+                config.persistentStorage().map(storageConfig -> {\n+                    Preconditions.checkState(\n+                            storageConfig instanceof RocksDbPersistentStorageConfig,\n+                            \"Storage config is not RocksDbPersistentStorageConfig.\",\n+                            SafeArg.of(\"configClass\", storageConfig.getClass()));\n+                    return persistentStorageFactory\n+                            .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig);\n+                }),\n                 closeables);\n     }\n \n", "next_change": {"commit": "b2c255a21d89fd59cf0313d121cdd4f4bef64efe", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex ebbbd4a187..f25e5c8ab6 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -527,18 +527,32 @@ public abstract class TransactionManagers {\n     }\n \n     @VisibleForTesting\n-    static TimestampCache getTimestampCache(\n-            AtlasDbConfig atlasDbConfig,\n+    static TimestampCache timestampCache(\n+            AtlasDbConfig config,\n             MetricsManager metricsManager,\n-            Supplier<AtlasDbRuntimeConfig> runtimeConfigSupplier,\n-            Optional<PersistentTimestampStore> persistentTimestampStore) {\n-        LongSupplier cacheSize = () -> runtimeConfigSupplier.get().getTimestampCacheSize();\n+            Supplier<AtlasDbRuntimeConfig> runtimeConfig,\n+            Optional<PersistentTimestampStore> timestampStore) {\n+        LongSupplier cacheSize = () -> runtimeConfig.get().getTimestampCacheSize();\n         Supplier<TimestampCache> timestampCacheSupplier = () ->\n-                persistentTimestampStore.map(store ->\n+                timestampStore.map(store ->\n                         OffHeapTimestampCache.create(store, metricsManager.getTaggedRegistry(), cacheSize))\n                         .orElseGet(() -> new DefaultTimestampCache(metricsManager.getRegistry(), cacheSize));\n \n-        return atlasDbConfig.timestampCache().orElseGet(timestampCacheSupplier);\n+        return config.timestampCache().orElseGet(timestampCacheSupplier);\n+    }\n+\n+    private static TimestampCache instrumentedTimestampCache(\n+            AtlasDbConfig config,\n+            MetricsManager metricsManager,\n+            Supplier<AtlasDbRuntimeConfig> runtimeConfig,\n+            Optional<PersistentTimestampStore> timestampStore) {\n+        TimestampCache timestampCache = timestampCache(config, metricsManager, runtimeConfig, timestampStore);\n+\n+        return AtlasDbMetrics.instrumentTimed(\n+                metricsManager.getRegistry(),\n+                TimestampCache.class,\n+                timestampCache,\n+                MetricRegistry.name(timestampCache.getClass()));\n     }\n \n     private static Callback<TransactionManager> createClearsTable() {\n", "next_change": {"commit": "6327ceeb116649fb68f1227a53c5e025120c42d5", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex f25e5c8ab6..ee7c2b9910 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -509,52 +497,6 @@ public abstract class TransactionManagers {\n         return transactionManager;\n     }\n \n-    @VisibleForTesting\n-    static Optional<PersistentTimestampStore> constructPersistentTimestampStoreIfConfigured(\n-            AtlasDbConfig config,\n-            PersistentStorageFactory persistentStorageFactory,\n-            @Output List<AutoCloseable> closeables) {\n-        return initializeCloseable(\n-                config.persistentStorage().map(storageConfig -> {\n-                    Preconditions.checkState(\n-                            storageConfig instanceof RocksDbPersistentStorageConfig,\n-                            \"Storage config is not RocksDbPersistentStorageConfig.\",\n-                            SafeArg.of(\"configClass\", storageConfig.getClass()));\n-                    return persistentStorageFactory\n-                            .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig);\n-                }),\n-                closeables);\n-    }\n-\n-    @VisibleForTesting\n-    static TimestampCache timestampCache(\n-            AtlasDbConfig config,\n-            MetricsManager metricsManager,\n-            Supplier<AtlasDbRuntimeConfig> runtimeConfig,\n-            Optional<PersistentTimestampStore> timestampStore) {\n-        LongSupplier cacheSize = () -> runtimeConfig.get().getTimestampCacheSize();\n-        Supplier<TimestampCache> timestampCacheSupplier = () ->\n-                timestampStore.map(store ->\n-                        OffHeapTimestampCache.create(store, metricsManager.getTaggedRegistry(), cacheSize))\n-                        .orElseGet(() -> new DefaultTimestampCache(metricsManager.getRegistry(), cacheSize));\n-\n-        return config.timestampCache().orElseGet(timestampCacheSupplier);\n-    }\n-\n-    private static TimestampCache instrumentedTimestampCache(\n-            AtlasDbConfig config,\n-            MetricsManager metricsManager,\n-            Supplier<AtlasDbRuntimeConfig> runtimeConfig,\n-            Optional<PersistentTimestampStore> timestampStore) {\n-        TimestampCache timestampCache = timestampCache(config, metricsManager, runtimeConfig, timestampStore);\n-\n-        return AtlasDbMetrics.instrumentTimed(\n-                metricsManager.getRegistry(),\n-                TimestampCache.class,\n-                timestampCache,\n-                MetricRegistry.name(timestampCache.getClass()));\n-    }\n-\n     private static Callback<TransactionManager> createClearsTable() {\n         TableReference clearsTableRef = TargetedSweepTableFactory.of().getTableClearsTable(null).getTableRef();\n         byte[] clearsTableMetadata = TargetedSweepSchema.INSTANCE.getLatestSchema()\n", "next_change": {"commit": "b91eeec5563f46e8a2556316a127a0ed0986f8c0", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex ee7c2b9910..613733b01c 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -491,12 +546,23 @@ public abstract class TransactionManagers {\n                         lockAndTimestampServices,\n                         keyValueService,\n                         transactionManager,\n-                        Suppliers.compose(AtlasDbRuntimeConfig::compact, runtimeConfigSupplier::get)),\n+                        runtime.map(AtlasDbRuntimeConfig::compact)),\n                 closeables);\n \n         return transactionManager;\n     }\n \n+    @VisibleForTesting\n+    String getServiceName() {\n+        return Stream.of(config().namespace(),\n+                config().timelock().flatMap(TimeLockClientConfig::client),\n+                config().keyValueService().namespace())\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .findFirst()\n+                .orElse(\"UNKNOWN\");\n+    }\n+\n     private static Callback<TransactionManager> createClearsTable() {\n         TableReference clearsTableRef = TargetedSweepTableFactory.of().getTableClearsTable(null).getTableRef();\n         byte[] clearsTableMetadata = TargetedSweepSchema.INSTANCE.getLatestSchema()\n", "next_change": {"commit": "d050105f11fa6cb7fd3aafbc59543de315d1afa8", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex 613733b01c..d78a4f0d8a 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -552,15 +552,18 @@ public abstract class TransactionManagers {\n         return transactionManager;\n     }\n \n+    abstract Optional<String> serviceIdentifierOverride();\n+\n     @VisibleForTesting\n-    String getServiceName() {\n-        return Stream.of(config().namespace(),\n+    @Value.Derived\n+    String serviceName() {\n+        return serviceIdentifierOverride().orElseGet(() -> Stream.of(config().namespace(),\n                 config().timelock().flatMap(TimeLockClientConfig::client),\n                 config().keyValueService().namespace())\n                 .filter(Optional::isPresent)\n                 .map(Optional::get)\n                 .findFirst()\n-                .orElse(\"UNKNOWN\");\n+                .orElse(\"UNKNOWN\"));\n     }\n \n     private static Callback<TransactionManager> createClearsTable() {\n", "next_change": {"commit": "f8ce36368070c43e87676ac1d1bbd9a79674d3a7", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex d78a4f0d8a..6af3b5219b 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -552,18 +549,84 @@ public abstract class TransactionManagers {\n         return transactionManager;\n     }\n \n+    private MetricsManager setUpMetricsAndGetMetricsManager() {\n+        MetricRegistry internalAtlasDbMetrics = new MetricRegistry();\n+        TaggedMetricRegistry internalTaggedAtlasDbMetrics = new DefaultTaggedMetricRegistry();\n+        MetricsManager metricsManager = MetricsManagers.of(\n+                internalAtlasDbMetrics,\n+                internalTaggedAtlasDbMetrics,\n+                runtimeConfig()\n+                        .map(runtimeConfigRefreshable -> runtimeConfigRefreshable.map(\n+                                maybeRuntime -> maybeRuntime.map(AtlasDbRuntimeConfig::enableMetricFiltering)\n+                                        .orElse(true)))\n+                        .orElseGet(() -> Refreshable.only(true)));\n+        globalTaggedMetricRegistry().addMetrics(\n+                AtlasDbMetricNames.LIBRARY_ORIGIN_TAG,\n+                AtlasDbMetricNames.LIBRARY_ORIGIN_VALUE,\n+                metricsManager.getPublishableMetrics());\n+        return metricsManager;\n+    }\n+\n+    private Optional<TimeLockFeedbackBackgroundTask> getTimeLockFeedbackBackgroundTask(\n+            @Output List<AutoCloseable> closeables,\n+            AtlasDbConfig config,\n+            Refreshable<AtlasDbRuntimeConfig> runtimeConfig) {\n+        if (isUsingTimeLock(config, runtimeConfig.current())) {\n+            Refreshable<List<TimeLockClientFeedbackService>> refreshableTimeLockClientFeedbackServices\n+                    = getTimeLockClientFeedbackServices(config, runtimeConfig, userAgent());\n+            return Optional.of(initializeCloseable(\n+                    () -> TimeLockFeedbackBackgroundTask.create(\n+                            globalTaggedMetricRegistry(),\n+                            () -> AtlasDbVersion.readVersion(),\n+                            serviceName(),\n+                            refreshableTimeLockClientFeedbackServices,\n+                            namespace()), closeables));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @VisibleForTesting\n+    static Refreshable<List<TimeLockClientFeedbackService>> getTimeLockClientFeedbackServices(AtlasDbConfig config,\n+            Refreshable<AtlasDbRuntimeConfig> runtimeConfig,\n+            UserAgent userAgent) {\n+        Refreshable<ServerListConfig> serverListConfigSupplier =\n+                getServerListConfigSupplierForTimeLock(config, runtimeConfig);\n+        DialogueClients.ReloadingFactory reloadingFactory = DialogueClients.create(\n+                Refreshable.only(ServicesConfigBlock.builder().build()));\n+\n+        BroadcastDialogueClientFactory broadcastDialogueClientFactory = BroadcastDialogueClientFactory.create(\n+                reloadingFactory,\n+                serverListConfigSupplier,\n+                userAgent,\n+                AuxiliaryRemotingParameters\n+                        .builder()\n+                        .shouldRetry(true)\n+                        .userAgent(userAgent)\n+                        .shouldLimitPayload(true)\n+                        .build());\n+\n+        return broadcastDialogueClientFactory.getSingleNodeProxies(\n+                TimeLockClientFeedbackService.class,\n+                true);\n+    }\n+\n     abstract Optional<String> serviceIdentifierOverride();\n \n     @VisibleForTesting\n     @Value.Derived\n     String serviceName() {\n-        return serviceIdentifierOverride().orElseGet(() -> Stream.of(config().namespace(),\n+        return serviceIdentifierOverride().orElseGet(this::namespace);\n+    }\n+\n+    @Value.Derived\n+    String namespace() {\n+        return Stream.of(config().namespace(),\n                 config().timelock().flatMap(TimeLockClientConfig::client),\n                 config().keyValueService().namespace())\n                 .filter(Optional::isPresent)\n                 .map(Optional::get)\n                 .findFirst()\n-                .orElse(\"UNKNOWN\"));\n+                .orElse(\"UNKNOWN\");\n     }\n \n     private static Callback<TransactionManager> createClearsTable() {\n", "next_change": {"commit": "249de1a6f3e21eb3907451eb232d96066f659194", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex 6af3b5219b..bfb6d1a562 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -620,9 +650,10 @@ public abstract class TransactionManagers {\n \n     @Value.Derived\n     String namespace() {\n-        return Stream.of(config().namespace(),\n-                config().timelock().flatMap(TimeLockClientConfig::client),\n-                config().keyValueService().namespace())\n+        return Stream.of(\n+                        config().namespace(),\n+                        config().timelock().flatMap(TimeLockClientConfig::client),\n+                        config().keyValueService().namespace())\n                 .filter(Optional::isPresent)\n                 .map(Optional::get)\n                 .findFirst()\n", "next_change": null}, {"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex 6af3b5219b..bfb6d1a562 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -630,8 +661,10 @@ public abstract class TransactionManagers {\n     }\n \n     private static Callback<TransactionManager> createClearsTable() {\n-        TableReference clearsTableRef = TargetedSweepTableFactory.of().getTableClearsTable(null).getTableRef();\n-        byte[] clearsTableMetadata = TargetedSweepSchema.INSTANCE.getLatestSchema()\n+        TableReference clearsTableRef =\n+                TargetedSweepTableFactory.of().getTableClearsTable(null).getTableRef();\n+        byte[] clearsTableMetadata = TargetedSweepSchema.INSTANCE\n+                .getLatestSchema()\n                 .getAllTablesAndIndexMetadata()\n                 .get(clearsTableRef)\n                 .persistToBytes();\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "4971ce2cbdf5953f8199675742a8849a627c9a76", "message": "Merge commit", "committedDate": null}, {"oid": "b2c255a21d89fd59cf0313d121cdd4f4bef64efe", "committedDate": "2020-01-15 10:45:16 +0000", "message": "Instrument timestamp cache (#4510)"}, {"oid": "1a4b4b058e9fc316a9157e83cba2fd26bf666d53", "committedDate": "2020-01-16 20:21:27 +0000", "message": "Persistent storage refactoring (#4512)"}, {"oid": "1fcf8cf1ad00671ef6697b6477736368b24c0316", "committedDate": "2020-01-21 11:53:18 +0000", "message": "Shorter Nonblocking Calls, Part 3: Breaking the TimeLock Logjam (#4520)"}, {"oid": "6327ceeb116649fb68f1227a53c5e025120c42d5", "committedDate": "2020-01-23 15:20:36 +0000", "message": "Remove concept of namespaces and LogicalPersistentStore. (#4522)"}, {"oid": "a4f9b32b914b25cef8d8a7e9ed3006441598207d", "committedDate": "2020-02-18 18:27:35 +0000", "message": "Start migrating AtlasDB to full conjure (#4545)"}, {"oid": "90813f3cb8568007a71f7de6db7e2a31e6cbcc9e", "committedDate": "2020-02-27 20:00:44 +0000", "message": "[Conjure Undertow, Part 2] Upgrade timelock dependency and inline (#4609)"}, {"oid": "f17735e1546ec9544da9182d957f16c818d3f2a2", "committedDate": "2020-03-03 19:49:33 +0000", "message": "Client side changes for conjure endpoints (#4628)"}, {"oid": "0d5bedcf003c6ebf885c3c254bc84e665e8b320f", "committedDate": "2020-03-04 15:29:26 +0000", "message": "[LW] Wire LW into TransactionStarter (#4605)"}, {"oid": "62dddc89a5ccc49a6e5e47d5c3406158a20db5de", "committedDate": "2020-03-05 18:57:27 +0000", "message": "[PDS-113120] Conjure TimeLock Service had blocking and non-bloc\u2026 (#4638)"}, {"oid": "5fa91177e3b5178d901a02295e0ac81181d482d0", "committedDate": "2020-03-10 19:07:44 +0000", "message": "[Conjure Java Runtime] Part 26: Story of Thanatosis (Removing AtlasDB-Feign Entirely) (#4561)"}, {"oid": "68713a1d545d280d1abb6162a324e1aa27d3c3f2", "committedDate": "2020-03-11 09:38:50 +0000", "message": "[PDS-113349] Clients for Paxos resources should not support blocking operations (#4643)"}, {"oid": "e7f2a021efeedb28322fb16c5931b7229435a04a", "committedDate": "2020-04-06 16:45:04 +0100", "message": "[LW] Remove old client and resource and use undertow (#4676)"}, {"oid": "19cbbbca5667f4498daeaaec0277d5861bbde69f", "committedDate": "2020-04-22 13:45:52 +0100", "message": "Use refreshable for runtime config (#4723)"}, {"oid": "618c241d51923cc5a692e412ccd083014a190f73", "committedDate": "2020-04-27 09:30:46 +0100", "message": "Remove deprecation until downstream services catch up. (#4733)"}, {"oid": "ce3c1f084f1c9f04721617f988f1c5970fbddda0", "committedDate": "2020-04-27 09:37:49 +0100", "message": "allow disabling sweepstats kvs live (#4731)"}, {"oid": "62325dbfd96ca380c2ad3768f66f09dd303b0ab8", "committedDate": "2020-05-12 11:57:31 +0100", "message": "[Dialogue] Part 1: BlockingSensitive -> TimeoutSensitive Nomenclature Changes (#4761)"}, {"oid": "75e61de317e66f88ef63f941cc9b356636dc97d9", "committedDate": "2020-05-13 18:10:19 +0100", "message": "[Dialogue] Part 4: Runtime Configuration and ETE Testing (#4766)"}, {"oid": "1ecb93b081ad795074b29c5a99f73993e4b19cfc", "committedDate": "2020-05-15 09:26:12 +0100", "message": "[Dialogue] Part 5: Fix Missing Instrumentation (#4776)"}, {"oid": "e3c27c5054ea8cc0cecf3d71c34047460a4e1090", "committedDate": "2020-05-18 08:02:46 +0000", "message": "[Dialogue] Part 6: Road to Multitenancy (#4778)"}, {"oid": "b246de59728aec2c63dcefa96d50268c3a37c6eb", "committedDate": "2020-05-26 14:42:41 +0100", "message": "[Dialogue] Part 9: Shims for Lesser Used Services: AtlasDB -> TimeLock (#4794)"}, {"oid": "a513fd2750dff53dc4c8522654f301669c485836", "committedDate": "2020-05-27 21:04:15 +0000", "message": "TransactionManager#startTransactions API. (#4799)"}, {"oid": "777910033bc172e0946cefb9cec9832c5b881f0a", "committedDate": "2020-06-02 09:28:26 +0000", "message": "Lock watches wiring and exposing API for PreCommitCondition. (#4811)"}, {"oid": "25eb18882f8524911efb1aec3d1391abeb1cf3d8", "committedDate": "2020-06-09 10:22:33 +0100", "message": "[PDS-95791/Post Mortems] Local Lock Trackers (#4825)"}, {"oid": "b91eeec5563f46e8a2556316a127a0ed0986f8c0", "committedDate": "2020-06-16 16:19:57 +0100", "message": "Feedback 1 (#4833)"}, {"oid": "e26bd3fcac8c8535b31a8d70350ecf286d7ce4e1", "committedDate": "2020-06-16 16:31:20 +0100", "message": "Override serviceName"}, {"oid": "9312e5695ed971cc164f4c3daafab07715a42e2b", "committedDate": "2020-06-16 16:35:51 +0100", "message": "Revert \"Override serviceName\""}, {"oid": "5dface245b6f8e471b6a6328bdacf8f51bdb027f", "committedDate": "2020-06-16 17:46:39 +0100", "message": "override service name (#4840)"}, {"oid": "d050105f11fa6cb7fd3aafbc59543de315d1afa8", "committedDate": "2020-06-17 15:03:36 +0100", "message": "Add serviceId (#4843)"}, {"oid": "289a4c2602433af52fe5a79a835b911ef2031184", "committedDate": "2020-06-22 14:43:34 +0100", "message": "[PD$-110002] CONTENTIOUS - Part 4: Redirect All Metrics To TaggedMetricRegistries (#4846)"}, {"oid": "4f949bb68f78f4a53a0a2df4984bad6977c71b98", "committedDate": "2020-06-22 14:19:33 +0000", "message": "[LW] Client side event cache (#4806)"}, {"oid": "3607c938ec15496cf16c94ee2c26a0d898e075e5", "committedDate": "2020-06-22 19:11:39 +0100", "message": "report feedback to timeLock (#4845)"}, {"oid": "2944989da4636325dd338e60bd50c60abd1f78ee", "committedDate": "2020-06-23 11:36:02 +0100", "message": "[Dialogue] Part 13: Bonfire of Configuration (#4855)"}, {"oid": "3347cca284f5c1dfafe45ccab7c035e69af16a21", "committedDate": "2020-06-23 12:32:51 +0100", "message": "[PDS$-110002] Part 5 "}, {"oid": "4784255206dac195c9162206a9948c3f4fc9cfad", "committedDate": "2020-06-25 18:06:49 +0100", "message": "[Dialogue] Part 14: Pure Dialogue for LockWatchingService (#4857)"}, {"oid": "934207a84be4ddaa282e10da644febd466eef34e", "committedDate": "2020-06-30 20:25:54 +0100", "message": "[PD$-110002] Part 6: One-Shots and Legacies (#4867)"}, {"oid": "f8ce36368070c43e87676ac1d1bbd9a79674d3a7", "committedDate": "2020-07-07 14:54:45 +0000", "message": "Namespace in TM (#4869)"}, {"oid": "28e509daee925a4b4f749e1b9667c3c0bb74959e", "committedDate": "2020-07-07 17:06:50 +0000", "message": "Atlas dialogue consumption provides a ptexecutor cached pool (#4883)"}, {"oid": "d131351916b55cbe69ab7c7ed9410f17094980e8", "committedDate": "2020-07-07 21:45:27 +0100", "message": "Add logging to initialisation path (#4886)"}, {"oid": "f6d41b09dcb27216600b297e73ceb86a6a91876e", "committedDate": "2020-07-29 14:40:28 +0100", "message": "[TimeLock blue-green] PingV2 "}, {"oid": "eda6513b192b3169ef4ba40c1cbe7e6ba529d1e1", "committedDate": "2020-08-14 14:37:45 +0100", "message": "Reuse Dialogue Factory in Timelock Adjudication Service (#4937)"}, {"oid": "5db7a1e5d87dd3be1f604e725b66d68d185dac6e", "committedDate": "2020-08-21 11:33:11 +0100", "message": "Don't Register Duplicate Metrics (#4954)"}, {"oid": "a2af140630eb3fbbd3e7c181c64d6920f5901b41", "committedDate": "2020-08-24 15:06:26 +0100", "message": "[PD$-110002] Part 15: MetricsFilterEvaluationContext (#4939)"}, {"oid": "64f0660ba1c3f8b05222d729f625cc21a796c4cc", "committedDate": "2020-09-07 18:16:55 +0100", "message": "Bug fix (#4976)"}, {"oid": "249de1a6f3e21eb3907451eb232d96066f659194", "committedDate": "2020-10-20 12:04:30 +0000", "message": "Upgrade gradle-baseline (#5044)"}, {"oid": "8106ea9c4dd52cded65c5bbee63bf68ade32bffd", "committedDate": "2020-10-22 10:48:31 +0000", "message": "Leader Election Metrics 1a: Client Side Wiring (#5062)"}, {"oid": "bbcad9eac1cbf82158df0b66b98c724ec9f3c645", "committedDate": "2020-10-26 18:13:06 +0000", "message": "Fail on compiler warnings (#5081)"}, {"oid": "91aa45873fbe458d6fb8bfa3bd12111b684e9052", "committedDate": "2020-10-27 13:26:25 +0000", "message": "Enforce more error-prone checks (#5082)"}, {"oid": "1b498ace48020b97cbc1e058c3bd4ee987bd71e0", "committedDate": "2020-11-25 15:30:15 +0000", "message": "Excavator: Upgrades Baseline to the latest version (#5054)"}, {"oid": "29eb638a9bb80d2eee2d7fcd0d3b11f7b497ea25", "committedDate": "2020-11-30 11:47:07 +0000", "message": "[Cross Client Batching LeaderTimes - 3b] "}, {"oid": "ed869bdb9ec2e67bc16159a470a9c9ac242a1258", "committedDate": "2020-12-17 17:47:01 +0000", "message": "[LW] No Op cache tracks version (#5140)"}, {"oid": "8c091e50e9a10820f2b5fdb117454355934a550e", "committedDate": "2021-01-07 16:29:21 +0000", "message": "[LW] Unify the NoOpLockWatchManager and its underlying cache (#5180)"}, {"oid": "e75db01e281f12bd105b1ebf8623858866551ae9", "committedDate": "2021-01-26 11:06:20 +0000", "message": "Excavator: Upgrades Baseline to the latest version (#5169)"}, {"oid": "1737f7f27a84c4258384bd7f0e7e3efe52891749", "committedDate": "2021-02-16 12:49:33 +0000", "message": "[Cross Client Batching] "}, {"oid": "de4d0a7ad60b030ce3d61625bc22f1f4153ea314", "committedDate": "2021-03-02 12:07:56 +0000", "message": "install and runtime keyValueService config must be merged (#5282)"}, {"oid": "4c40d4306cb92f1fd2dc793a301f3d9246ad426e", "committedDate": "2021-03-02 13:37:10 +0000", "message": "[CCB] "}, {"oid": "fd350803832dd39eb1de79d9bc414b187c783557", "committedDate": "2021-03-04 14:39:01 +0000", "message": "[CCB] "}, {"oid": "5038278a4f39f1e558e837e77857a096522dac5a", "committedDate": "2021-03-24 11:15:35 +0000", "message": "[PDS-169034] Background Sweep configuration (#5334)"}, {"oid": "de682a394d0380f87620c72dd1a47545b7ff8642", "committedDate": "2021-03-31 13:15:09 +0000", "message": "[PDS-172208] "}, {"oid": "197aa64b26377782bccf2322eaa973f42d4de177", "committedDate": "2021-04-26 10:17:14 +0100", "message": "[LW] CodeGen for caching and register watches (#5395)"}, {"oid": "8c5fad277dfbe46719859f7875f12507f11fb1b7", "committedDate": "2021-05-04 14:15:49 +0000", "message": "[LW] Wire cache into transactions (#5402)"}, {"oid": "f3f9d6a1d3fc95f5094880b8ef965a3a440701d5", "committedDate": "2021-05-10 14:32:37 +0000", "message": "[LW] Make the value cache configurable (#5442)"}, {"oid": "92438961b5d26ac29b96be10c8d6d1ad3f75617b", "committedDate": "2021-06-08 11:07:49 +0000", "message": "Introduce Immutables Meta-Annotations (#5494)"}, {"oid": "dfc86abe9c0d31cbb9959042e418acda1f6d7e3b", "committedDate": "2021-07-26 21:15:39 +0000", "message": "Manually run the SafeLogger migration (#5572)"}, {"oid": "d960176dc37396732885a63552634e5865942751", "committedDate": "2021-07-27 13:11:19 +0100", "message": "Revert \"Manually run the SafeLogger migration\" (#5573)"}, {"oid": "3f5ff3415fc2301941b870c65ef38103c6cfa907", "committedDate": "2021-07-27 13:22:46 +0000", "message": "Manually run the SafeLogger migration, take 2 (#5575)"}, {"oid": "551a6850007309911551a39e2795e46d327d966b", "committedDate": "2021-08-17 16:19:26 +0000", "message": "[Correctness Logging] Part 1: Explicit Timestamp Violation Metrics (#5599)"}, {"oid": "ccee1801a9d7faa2afcce4ef4b29caf14a4c6161", "committedDate": "2021-09-10 13:45:39 +0000", "message": "Leaky sweep (#5628)"}, {"oid": "396611accd1630c53b532f3282b59911dbf294e1", "committedDate": "2021-09-23 11:51:48 +0000", "message": "Nuke Persistent Lock (#5654)"}, {"oid": "da1ecd97c5650243e6e5f97af221d826cf8d0363", "committedDate": "2021-09-23 15:48:58 +0000", "message": "Do not recreate configs unnecessarily (#5651)"}, {"oid": "d72b58f72c91ccb297ec061ec7a1157a200d05fb", "committedDate": "2021-10-06 12:56:25 +0000", "message": "[IMT2] Moving code around (#5689)"}, {"oid": "c43510ec73325dd1926b40480b599de96b4a8405", "committedDate": "2021-10-07 16:00:27 +0000", "message": "IMT3: add InMemoryLockAndTimestampServiceFactory (#5691)"}, {"oid": "9233c1a43980144c96b1ddcd14796e3b33769cbf", "committedDate": "2021-10-11 10:27:20 +0000", "message": "IMT4: createInMemory rewiring (#5692)"}, {"oid": "c0156a2217f0d6a813122630b987020a3fb21a54", "committedDate": "2021-10-29 13:22:02 +0000", "message": "Leaks are good (#5729)"}, {"oid": "976b455042e5ed9fe518759e77e888a5148ad29f", "committedDate": "2021-11-24 16:51:24 +0000", "message": "[TXN3] PutUnlessExists table (#5763)"}, {"oid": "24802b54f1747b53d652744cf779f1436ef095df", "committedDate": "2021-11-26 13:17:26 +0000", "message": "[Transactions3] TimedConsensusForgettingStore (#5788)"}, {"oid": "d9bc84947088995c680c99d84bd86c49c9ee8f39", "committedDate": "2021-12-02 14:26:42 +0000", "message": "[Jank] Remember oldest timestamp after TS has been running (#5772)"}, {"oid": "1d8416939e6b2f63f29a94dc5b1096452f24331e", "committedDate": "2021-12-07 12:25:36 +0000", "message": "Disable TL adjudication flag (#5810)"}, {"oid": "748257d3dba0dbede5299e9a109f174739fa7995", "committedDate": "2022-03-02 13:45:09 +0000", "message": "Allow multiple TMs for dbkvs  (#5924)"}, {"oid": "83cec56c9ce57777f9b92bd94f54e9379ca89469", "committedDate": "2022-04-12 18:07:45 +0000", "message": "[Runtime Config] Part 1: Merge semantics, abstracting merged config and exposing DerivedSnapshotConfig. (#5995)"}, {"oid": "434b45092b064bb46ae28d5ae93eba8a67d2c83b", "committedDate": "2022-05-03 17:07:19 +0000", "message": "[PDS-265137 -> Develop] Accept Staging Reads on Version Three (#6022)"}, {"oid": "3b1dded26663aee93389b009f6b9b42f5b9d74ca", "committedDate": "2022-06-24 13:51:02 +0100", "message": "Make thread dump configurable (#6084)"}, {"oid": "d55ea59da1e181c82f7460e2384bd7b9e1288ccd", "committedDate": "2022-07-01 11:14:33 +0100", "message": "Kill redundant Oldest TS ts tracker (#6113)"}, {"oid": "cb6fd92be6964ea7c1b0cca8e8fe09a56cecaa4e", "committedDate": "2022-07-19 18:14:40 +0000", "message": "[TTS] Force enable sweep queue writes (#6127)"}, {"oid": "3b81ff19acac2abe71337b2b30eecaefe68d802c", "committedDate": "2022-07-25 16:38:58 +0000", "message": "Timelock topology metric (#6157)"}, {"oid": "e197bb79ca88c58ccc686c8227afb49f3c47a02f", "committedDate": "2022-09-26 17:52:46 +0000", "message": "[TTS] Readonly transactions on TTS (#6212)"}, {"oid": "153b09bec320ca893ff53c7deeed54a5e5d74361", "committedDate": "2022-09-30 08:30:04 +0000", "message": "Revert \"[TTS] Readonly transactions on TTS (#6212)\" (#6254)"}, {"oid": "f2ede61743ee0c9dd03f4fd73b84e76672a8dbe0", "committedDate": "2022-10-06 10:14:20 +0000", "message": "Revert Revert \"[TTS] Readonly transactions on TTS (#6212)\" #6254 (#6257)"}, {"oid": "717c2e5e8fe4163802a9e7fc3596448ad3d36010", "committedDate": "2022-10-17 10:02:08 +0000", "message": "[TTS] Update A (#6263)"}, {"oid": "58a31e4d48ac138a0ec5e2186c4582a2a89dd72e", "committedDate": "2023-04-13 20:17:13 +0100", "message": "Don't register SweeperService (#6516)"}, {"oid": "a732d2ad19db9312e9d3ef7b01079b81616c950d", "committedDate": "2023-04-14 15:31:25 +0000", "message": "Simplify sweep enabled configuration (#6515)"}, {"oid": "9d3b419972f969d98a2e09c33312f005c2725460", "committedDate": "2023-05-18 15:38:07 +0000", "message": "Skramer/buggify timelock (#6557)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMjcwMQ==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366512701", "body": "I would `Preconditions.checkState` this for readability (instead of the class cast exception you'd get if we ship a bug here)", "bodyText": "I would Preconditions.checkState this for readability (instead of the class cast exception you'd get if we ship a bug here)", "bodyHTML": "<p dir=\"auto\">I would <code>Preconditions.checkState</code> this for readability (instead of the class cast exception you'd get if we ship a bug here)</p>", "author": "jeremyk-91", "createdAt": "2020-01-14T18:52:38Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -495,6 +509,32 @@ private TransactionManager serializableInternal(@Output List<AutoCloseable> clos\n         return transactionManager;\n     }\n \n+    @VisibleForTesting\n+    static Optional<PersistentTimestampStore> constructPersistentTimestampStore(\n+            AtlasDbConfig config,\n+            PersistentStorageFactory persistentStorageFactory,\n+            @Output List<AutoCloseable> closeables) {\n+        return initializeCloseable(\n+                config.persistentStorage().map(storageConfig -> persistentStorageFactory\n+                        .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig)),", "originalCommit": "ad865b2757050ea6ea113acdfd4f374553cd6cea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMDYyOQ==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366530629", "bodyText": "Added.", "author": "OStevan", "createdAt": "2020-01-14T19:30:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMjcwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "503dfbde8603ebba45e769b9f253dc5d58f71d30", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex cf6c4b0cf1..ebbbd4a187 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -510,13 +510,19 @@ public abstract class TransactionManagers {\n     }\n \n     @VisibleForTesting\n-    static Optional<PersistentTimestampStore> constructPersistentTimestampStore(\n+    static Optional<PersistentTimestampStore> constructPersistentTimestampStoreIfConfigured(\n             AtlasDbConfig config,\n             PersistentStorageFactory persistentStorageFactory,\n             @Output List<AutoCloseable> closeables) {\n         return initializeCloseable(\n-                config.persistentStorage().map(storageConfig -> persistentStorageFactory\n-                        .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig)),\n+                config.persistentStorage().map(storageConfig -> {\n+                    Preconditions.checkState(\n+                            storageConfig instanceof RocksDbPersistentStorageConfig,\n+                            \"Storage config is not RocksDbPersistentStorageConfig.\",\n+                            SafeArg.of(\"configClass\", storageConfig.getClass()));\n+                    return persistentStorageFactory\n+                            .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig);\n+                }),\n                 closeables);\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "4971ce2cbdf5953f8199675742a8849a627c9a76", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex cf6c4b0cf1..ebbbd4a187 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -510,13 +510,19 @@ public abstract class TransactionManagers {\n     }\n \n     @VisibleForTesting\n-    static Optional<PersistentTimestampStore> constructPersistentTimestampStore(\n+    static Optional<PersistentTimestampStore> constructPersistentTimestampStoreIfConfigured(\n             AtlasDbConfig config,\n             PersistentStorageFactory persistentStorageFactory,\n             @Output List<AutoCloseable> closeables) {\n         return initializeCloseable(\n-                config.persistentStorage().map(storageConfig -> persistentStorageFactory\n-                        .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig)),\n+                config.persistentStorage().map(storageConfig -> {\n+                    Preconditions.checkState(\n+                            storageConfig instanceof RocksDbPersistentStorageConfig,\n+                            \"Storage config is not RocksDbPersistentStorageConfig.\",\n+                            SafeArg.of(\"configClass\", storageConfig.getClass()));\n+                    return persistentStorageFactory\n+                            .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig);\n+                }),\n                 closeables);\n     }\n \n", "next_change": {"commit": "b2c255a21d89fd59cf0313d121cdd4f4bef64efe", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex ebbbd4a187..f25e5c8ab6 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -527,18 +527,32 @@ public abstract class TransactionManagers {\n     }\n \n     @VisibleForTesting\n-    static TimestampCache getTimestampCache(\n-            AtlasDbConfig atlasDbConfig,\n+    static TimestampCache timestampCache(\n+            AtlasDbConfig config,\n             MetricsManager metricsManager,\n-            Supplier<AtlasDbRuntimeConfig> runtimeConfigSupplier,\n-            Optional<PersistentTimestampStore> persistentTimestampStore) {\n-        LongSupplier cacheSize = () -> runtimeConfigSupplier.get().getTimestampCacheSize();\n+            Supplier<AtlasDbRuntimeConfig> runtimeConfig,\n+            Optional<PersistentTimestampStore> timestampStore) {\n+        LongSupplier cacheSize = () -> runtimeConfig.get().getTimestampCacheSize();\n         Supplier<TimestampCache> timestampCacheSupplier = () ->\n-                persistentTimestampStore.map(store ->\n+                timestampStore.map(store ->\n                         OffHeapTimestampCache.create(store, metricsManager.getTaggedRegistry(), cacheSize))\n                         .orElseGet(() -> new DefaultTimestampCache(metricsManager.getRegistry(), cacheSize));\n \n-        return atlasDbConfig.timestampCache().orElseGet(timestampCacheSupplier);\n+        return config.timestampCache().orElseGet(timestampCacheSupplier);\n+    }\n+\n+    private static TimestampCache instrumentedTimestampCache(\n+            AtlasDbConfig config,\n+            MetricsManager metricsManager,\n+            Supplier<AtlasDbRuntimeConfig> runtimeConfig,\n+            Optional<PersistentTimestampStore> timestampStore) {\n+        TimestampCache timestampCache = timestampCache(config, metricsManager, runtimeConfig, timestampStore);\n+\n+        return AtlasDbMetrics.instrumentTimed(\n+                metricsManager.getRegistry(),\n+                TimestampCache.class,\n+                timestampCache,\n+                MetricRegistry.name(timestampCache.getClass()));\n     }\n \n     private static Callback<TransactionManager> createClearsTable() {\n", "next_change": {"commit": "6327ceeb116649fb68f1227a53c5e025120c42d5", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex f25e5c8ab6..ee7c2b9910 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -509,52 +497,6 @@ public abstract class TransactionManagers {\n         return transactionManager;\n     }\n \n-    @VisibleForTesting\n-    static Optional<PersistentTimestampStore> constructPersistentTimestampStoreIfConfigured(\n-            AtlasDbConfig config,\n-            PersistentStorageFactory persistentStorageFactory,\n-            @Output List<AutoCloseable> closeables) {\n-        return initializeCloseable(\n-                config.persistentStorage().map(storageConfig -> {\n-                    Preconditions.checkState(\n-                            storageConfig instanceof RocksDbPersistentStorageConfig,\n-                            \"Storage config is not RocksDbPersistentStorageConfig.\",\n-                            SafeArg.of(\"configClass\", storageConfig.getClass()));\n-                    return persistentStorageFactory\n-                            .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig);\n-                }),\n-                closeables);\n-    }\n-\n-    @VisibleForTesting\n-    static TimestampCache timestampCache(\n-            AtlasDbConfig config,\n-            MetricsManager metricsManager,\n-            Supplier<AtlasDbRuntimeConfig> runtimeConfig,\n-            Optional<PersistentTimestampStore> timestampStore) {\n-        LongSupplier cacheSize = () -> runtimeConfig.get().getTimestampCacheSize();\n-        Supplier<TimestampCache> timestampCacheSupplier = () ->\n-                timestampStore.map(store ->\n-                        OffHeapTimestampCache.create(store, metricsManager.getTaggedRegistry(), cacheSize))\n-                        .orElseGet(() -> new DefaultTimestampCache(metricsManager.getRegistry(), cacheSize));\n-\n-        return config.timestampCache().orElseGet(timestampCacheSupplier);\n-    }\n-\n-    private static TimestampCache instrumentedTimestampCache(\n-            AtlasDbConfig config,\n-            MetricsManager metricsManager,\n-            Supplier<AtlasDbRuntimeConfig> runtimeConfig,\n-            Optional<PersistentTimestampStore> timestampStore) {\n-        TimestampCache timestampCache = timestampCache(config, metricsManager, runtimeConfig, timestampStore);\n-\n-        return AtlasDbMetrics.instrumentTimed(\n-                metricsManager.getRegistry(),\n-                TimestampCache.class,\n-                timestampCache,\n-                MetricRegistry.name(timestampCache.getClass()));\n-    }\n-\n     private static Callback<TransactionManager> createClearsTable() {\n         TableReference clearsTableRef = TargetedSweepTableFactory.of().getTableClearsTable(null).getTableRef();\n         byte[] clearsTableMetadata = TargetedSweepSchema.INSTANCE.getLatestSchema()\n", "next_change": {"commit": "b91eeec5563f46e8a2556316a127a0ed0986f8c0", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex ee7c2b9910..613733b01c 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -491,12 +546,23 @@ public abstract class TransactionManagers {\n                         lockAndTimestampServices,\n                         keyValueService,\n                         transactionManager,\n-                        Suppliers.compose(AtlasDbRuntimeConfig::compact, runtimeConfigSupplier::get)),\n+                        runtime.map(AtlasDbRuntimeConfig::compact)),\n                 closeables);\n \n         return transactionManager;\n     }\n \n+    @VisibleForTesting\n+    String getServiceName() {\n+        return Stream.of(config().namespace(),\n+                config().timelock().flatMap(TimeLockClientConfig::client),\n+                config().keyValueService().namespace())\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .findFirst()\n+                .orElse(\"UNKNOWN\");\n+    }\n+\n     private static Callback<TransactionManager> createClearsTable() {\n         TableReference clearsTableRef = TargetedSweepTableFactory.of().getTableClearsTable(null).getTableRef();\n         byte[] clearsTableMetadata = TargetedSweepSchema.INSTANCE.getLatestSchema()\n", "next_change": {"commit": "d050105f11fa6cb7fd3aafbc59543de315d1afa8", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex 613733b01c..d78a4f0d8a 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -552,15 +552,18 @@ public abstract class TransactionManagers {\n         return transactionManager;\n     }\n \n+    abstract Optional<String> serviceIdentifierOverride();\n+\n     @VisibleForTesting\n-    String getServiceName() {\n-        return Stream.of(config().namespace(),\n+    @Value.Derived\n+    String serviceName() {\n+        return serviceIdentifierOverride().orElseGet(() -> Stream.of(config().namespace(),\n                 config().timelock().flatMap(TimeLockClientConfig::client),\n                 config().keyValueService().namespace())\n                 .filter(Optional::isPresent)\n                 .map(Optional::get)\n                 .findFirst()\n-                .orElse(\"UNKNOWN\");\n+                .orElse(\"UNKNOWN\"));\n     }\n \n     private static Callback<TransactionManager> createClearsTable() {\n", "next_change": {"commit": "f8ce36368070c43e87676ac1d1bbd9a79674d3a7", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex d78a4f0d8a..6af3b5219b 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -552,18 +549,84 @@ public abstract class TransactionManagers {\n         return transactionManager;\n     }\n \n+    private MetricsManager setUpMetricsAndGetMetricsManager() {\n+        MetricRegistry internalAtlasDbMetrics = new MetricRegistry();\n+        TaggedMetricRegistry internalTaggedAtlasDbMetrics = new DefaultTaggedMetricRegistry();\n+        MetricsManager metricsManager = MetricsManagers.of(\n+                internalAtlasDbMetrics,\n+                internalTaggedAtlasDbMetrics,\n+                runtimeConfig()\n+                        .map(runtimeConfigRefreshable -> runtimeConfigRefreshable.map(\n+                                maybeRuntime -> maybeRuntime.map(AtlasDbRuntimeConfig::enableMetricFiltering)\n+                                        .orElse(true)))\n+                        .orElseGet(() -> Refreshable.only(true)));\n+        globalTaggedMetricRegistry().addMetrics(\n+                AtlasDbMetricNames.LIBRARY_ORIGIN_TAG,\n+                AtlasDbMetricNames.LIBRARY_ORIGIN_VALUE,\n+                metricsManager.getPublishableMetrics());\n+        return metricsManager;\n+    }\n+\n+    private Optional<TimeLockFeedbackBackgroundTask> getTimeLockFeedbackBackgroundTask(\n+            @Output List<AutoCloseable> closeables,\n+            AtlasDbConfig config,\n+            Refreshable<AtlasDbRuntimeConfig> runtimeConfig) {\n+        if (isUsingTimeLock(config, runtimeConfig.current())) {\n+            Refreshable<List<TimeLockClientFeedbackService>> refreshableTimeLockClientFeedbackServices\n+                    = getTimeLockClientFeedbackServices(config, runtimeConfig, userAgent());\n+            return Optional.of(initializeCloseable(\n+                    () -> TimeLockFeedbackBackgroundTask.create(\n+                            globalTaggedMetricRegistry(),\n+                            () -> AtlasDbVersion.readVersion(),\n+                            serviceName(),\n+                            refreshableTimeLockClientFeedbackServices,\n+                            namespace()), closeables));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @VisibleForTesting\n+    static Refreshable<List<TimeLockClientFeedbackService>> getTimeLockClientFeedbackServices(AtlasDbConfig config,\n+            Refreshable<AtlasDbRuntimeConfig> runtimeConfig,\n+            UserAgent userAgent) {\n+        Refreshable<ServerListConfig> serverListConfigSupplier =\n+                getServerListConfigSupplierForTimeLock(config, runtimeConfig);\n+        DialogueClients.ReloadingFactory reloadingFactory = DialogueClients.create(\n+                Refreshable.only(ServicesConfigBlock.builder().build()));\n+\n+        BroadcastDialogueClientFactory broadcastDialogueClientFactory = BroadcastDialogueClientFactory.create(\n+                reloadingFactory,\n+                serverListConfigSupplier,\n+                userAgent,\n+                AuxiliaryRemotingParameters\n+                        .builder()\n+                        .shouldRetry(true)\n+                        .userAgent(userAgent)\n+                        .shouldLimitPayload(true)\n+                        .build());\n+\n+        return broadcastDialogueClientFactory.getSingleNodeProxies(\n+                TimeLockClientFeedbackService.class,\n+                true);\n+    }\n+\n     abstract Optional<String> serviceIdentifierOverride();\n \n     @VisibleForTesting\n     @Value.Derived\n     String serviceName() {\n-        return serviceIdentifierOverride().orElseGet(() -> Stream.of(config().namespace(),\n+        return serviceIdentifierOverride().orElseGet(this::namespace);\n+    }\n+\n+    @Value.Derived\n+    String namespace() {\n+        return Stream.of(config().namespace(),\n                 config().timelock().flatMap(TimeLockClientConfig::client),\n                 config().keyValueService().namespace())\n                 .filter(Optional::isPresent)\n                 .map(Optional::get)\n                 .findFirst()\n-                .orElse(\"UNKNOWN\"));\n+                .orElse(\"UNKNOWN\");\n     }\n \n     private static Callback<TransactionManager> createClearsTable() {\n", "next_change": {"commit": "249de1a6f3e21eb3907451eb232d96066f659194", "changed_code": [{"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex 6af3b5219b..bfb6d1a562 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -620,9 +650,10 @@ public abstract class TransactionManagers {\n \n     @Value.Derived\n     String namespace() {\n-        return Stream.of(config().namespace(),\n-                config().timelock().flatMap(TimeLockClientConfig::client),\n-                config().keyValueService().namespace())\n+        return Stream.of(\n+                        config().namespace(),\n+                        config().timelock().flatMap(TimeLockClientConfig::client),\n+                        config().keyValueService().namespace())\n                 .filter(Optional::isPresent)\n                 .map(Optional::get)\n                 .findFirst()\n", "next_change": null}, {"header": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex 6af3b5219b..bfb6d1a562 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n", "chunk": "@@ -630,8 +661,10 @@ public abstract class TransactionManagers {\n     }\n \n     private static Callback<TransactionManager> createClearsTable() {\n-        TableReference clearsTableRef = TargetedSweepTableFactory.of().getTableClearsTable(null).getTableRef();\n-        byte[] clearsTableMetadata = TargetedSweepSchema.INSTANCE.getLatestSchema()\n+        TableReference clearsTableRef =\n+                TargetedSweepTableFactory.of().getTableClearsTable(null).getTableRef();\n+        byte[] clearsTableMetadata = TargetedSweepSchema.INSTANCE\n+                .getLatestSchema()\n                 .getAllTablesAndIndexMetadata()\n                 .get(clearsTableRef)\n                 .persistToBytes();\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "4971ce2cbdf5953f8199675742a8849a627c9a76", "message": "Merge commit", "committedDate": null}, {"oid": "b2c255a21d89fd59cf0313d121cdd4f4bef64efe", "committedDate": "2020-01-15 10:45:16 +0000", "message": "Instrument timestamp cache (#4510)"}, {"oid": "1a4b4b058e9fc316a9157e83cba2fd26bf666d53", "committedDate": "2020-01-16 20:21:27 +0000", "message": "Persistent storage refactoring (#4512)"}, {"oid": "1fcf8cf1ad00671ef6697b6477736368b24c0316", "committedDate": "2020-01-21 11:53:18 +0000", "message": "Shorter Nonblocking Calls, Part 3: Breaking the TimeLock Logjam (#4520)"}, {"oid": "6327ceeb116649fb68f1227a53c5e025120c42d5", "committedDate": "2020-01-23 15:20:36 +0000", "message": "Remove concept of namespaces and LogicalPersistentStore. (#4522)"}, {"oid": "a4f9b32b914b25cef8d8a7e9ed3006441598207d", "committedDate": "2020-02-18 18:27:35 +0000", "message": "Start migrating AtlasDB to full conjure (#4545)"}, {"oid": "90813f3cb8568007a71f7de6db7e2a31e6cbcc9e", "committedDate": "2020-02-27 20:00:44 +0000", "message": "[Conjure Undertow, Part 2] Upgrade timelock dependency and inline (#4609)"}, {"oid": "f17735e1546ec9544da9182d957f16c818d3f2a2", "committedDate": "2020-03-03 19:49:33 +0000", "message": "Client side changes for conjure endpoints (#4628)"}, {"oid": "0d5bedcf003c6ebf885c3c254bc84e665e8b320f", "committedDate": "2020-03-04 15:29:26 +0000", "message": "[LW] Wire LW into TransactionStarter (#4605)"}, {"oid": "62dddc89a5ccc49a6e5e47d5c3406158a20db5de", "committedDate": "2020-03-05 18:57:27 +0000", "message": "[PDS-113120] Conjure TimeLock Service had blocking and non-bloc\u2026 (#4638)"}, {"oid": "5fa91177e3b5178d901a02295e0ac81181d482d0", "committedDate": "2020-03-10 19:07:44 +0000", "message": "[Conjure Java Runtime] Part 26: Story of Thanatosis (Removing AtlasDB-Feign Entirely) (#4561)"}, {"oid": "68713a1d545d280d1abb6162a324e1aa27d3c3f2", "committedDate": "2020-03-11 09:38:50 +0000", "message": "[PDS-113349] Clients for Paxos resources should not support blocking operations (#4643)"}, {"oid": "e7f2a021efeedb28322fb16c5931b7229435a04a", "committedDate": "2020-04-06 16:45:04 +0100", "message": "[LW] Remove old client and resource and use undertow (#4676)"}, {"oid": "19cbbbca5667f4498daeaaec0277d5861bbde69f", "committedDate": "2020-04-22 13:45:52 +0100", "message": "Use refreshable for runtime config (#4723)"}, {"oid": "618c241d51923cc5a692e412ccd083014a190f73", "committedDate": "2020-04-27 09:30:46 +0100", "message": "Remove deprecation until downstream services catch up. (#4733)"}, {"oid": "ce3c1f084f1c9f04721617f988f1c5970fbddda0", "committedDate": "2020-04-27 09:37:49 +0100", "message": "allow disabling sweepstats kvs live (#4731)"}, {"oid": "62325dbfd96ca380c2ad3768f66f09dd303b0ab8", "committedDate": "2020-05-12 11:57:31 +0100", "message": "[Dialogue] Part 1: BlockingSensitive -> TimeoutSensitive Nomenclature Changes (#4761)"}, {"oid": "75e61de317e66f88ef63f941cc9b356636dc97d9", "committedDate": "2020-05-13 18:10:19 +0100", "message": "[Dialogue] Part 4: Runtime Configuration and ETE Testing (#4766)"}, {"oid": "1ecb93b081ad795074b29c5a99f73993e4b19cfc", "committedDate": "2020-05-15 09:26:12 +0100", "message": "[Dialogue] Part 5: Fix Missing Instrumentation (#4776)"}, {"oid": "e3c27c5054ea8cc0cecf3d71c34047460a4e1090", "committedDate": "2020-05-18 08:02:46 +0000", "message": "[Dialogue] Part 6: Road to Multitenancy (#4778)"}, {"oid": "b246de59728aec2c63dcefa96d50268c3a37c6eb", "committedDate": "2020-05-26 14:42:41 +0100", "message": "[Dialogue] Part 9: Shims for Lesser Used Services: AtlasDB -> TimeLock (#4794)"}, {"oid": "a513fd2750dff53dc4c8522654f301669c485836", "committedDate": "2020-05-27 21:04:15 +0000", "message": "TransactionManager#startTransactions API. (#4799)"}, {"oid": "777910033bc172e0946cefb9cec9832c5b881f0a", "committedDate": "2020-06-02 09:28:26 +0000", "message": "Lock watches wiring and exposing API for PreCommitCondition. (#4811)"}, {"oid": "25eb18882f8524911efb1aec3d1391abeb1cf3d8", "committedDate": "2020-06-09 10:22:33 +0100", "message": "[PDS-95791/Post Mortems] Local Lock Trackers (#4825)"}, {"oid": "b91eeec5563f46e8a2556316a127a0ed0986f8c0", "committedDate": "2020-06-16 16:19:57 +0100", "message": "Feedback 1 (#4833)"}, {"oid": "e26bd3fcac8c8535b31a8d70350ecf286d7ce4e1", "committedDate": "2020-06-16 16:31:20 +0100", "message": "Override serviceName"}, {"oid": "9312e5695ed971cc164f4c3daafab07715a42e2b", "committedDate": "2020-06-16 16:35:51 +0100", "message": "Revert \"Override serviceName\""}, {"oid": "5dface245b6f8e471b6a6328bdacf8f51bdb027f", "committedDate": "2020-06-16 17:46:39 +0100", "message": "override service name (#4840)"}, {"oid": "d050105f11fa6cb7fd3aafbc59543de315d1afa8", "committedDate": "2020-06-17 15:03:36 +0100", "message": "Add serviceId (#4843)"}, {"oid": "289a4c2602433af52fe5a79a835b911ef2031184", "committedDate": "2020-06-22 14:43:34 +0100", "message": "[PD$-110002] CONTENTIOUS - Part 4: Redirect All Metrics To TaggedMetricRegistries (#4846)"}, {"oid": "4f949bb68f78f4a53a0a2df4984bad6977c71b98", "committedDate": "2020-06-22 14:19:33 +0000", "message": "[LW] Client side event cache (#4806)"}, {"oid": "3607c938ec15496cf16c94ee2c26a0d898e075e5", "committedDate": "2020-06-22 19:11:39 +0100", "message": "report feedback to timeLock (#4845)"}, {"oid": "2944989da4636325dd338e60bd50c60abd1f78ee", "committedDate": "2020-06-23 11:36:02 +0100", "message": "[Dialogue] Part 13: Bonfire of Configuration (#4855)"}, {"oid": "3347cca284f5c1dfafe45ccab7c035e69af16a21", "committedDate": "2020-06-23 12:32:51 +0100", "message": "[PDS$-110002] Part 5 "}, {"oid": "4784255206dac195c9162206a9948c3f4fc9cfad", "committedDate": "2020-06-25 18:06:49 +0100", "message": "[Dialogue] Part 14: Pure Dialogue for LockWatchingService (#4857)"}, {"oid": "934207a84be4ddaa282e10da644febd466eef34e", "committedDate": "2020-06-30 20:25:54 +0100", "message": "[PD$-110002] Part 6: One-Shots and Legacies (#4867)"}, {"oid": "f8ce36368070c43e87676ac1d1bbd9a79674d3a7", "committedDate": "2020-07-07 14:54:45 +0000", "message": "Namespace in TM (#4869)"}, {"oid": "28e509daee925a4b4f749e1b9667c3c0bb74959e", "committedDate": "2020-07-07 17:06:50 +0000", "message": "Atlas dialogue consumption provides a ptexecutor cached pool (#4883)"}, {"oid": "d131351916b55cbe69ab7c7ed9410f17094980e8", "committedDate": "2020-07-07 21:45:27 +0100", "message": "Add logging to initialisation path (#4886)"}, {"oid": "f6d41b09dcb27216600b297e73ceb86a6a91876e", "committedDate": "2020-07-29 14:40:28 +0100", "message": "[TimeLock blue-green] PingV2 "}, {"oid": "eda6513b192b3169ef4ba40c1cbe7e6ba529d1e1", "committedDate": "2020-08-14 14:37:45 +0100", "message": "Reuse Dialogue Factory in Timelock Adjudication Service (#4937)"}, {"oid": "5db7a1e5d87dd3be1f604e725b66d68d185dac6e", "committedDate": "2020-08-21 11:33:11 +0100", "message": "Don't Register Duplicate Metrics (#4954)"}, {"oid": "a2af140630eb3fbbd3e7c181c64d6920f5901b41", "committedDate": "2020-08-24 15:06:26 +0100", "message": "[PD$-110002] Part 15: MetricsFilterEvaluationContext (#4939)"}, {"oid": "64f0660ba1c3f8b05222d729f625cc21a796c4cc", "committedDate": "2020-09-07 18:16:55 +0100", "message": "Bug fix (#4976)"}, {"oid": "249de1a6f3e21eb3907451eb232d96066f659194", "committedDate": "2020-10-20 12:04:30 +0000", "message": "Upgrade gradle-baseline (#5044)"}, {"oid": "8106ea9c4dd52cded65c5bbee63bf68ade32bffd", "committedDate": "2020-10-22 10:48:31 +0000", "message": "Leader Election Metrics 1a: Client Side Wiring (#5062)"}, {"oid": "bbcad9eac1cbf82158df0b66b98c724ec9f3c645", "committedDate": "2020-10-26 18:13:06 +0000", "message": "Fail on compiler warnings (#5081)"}, {"oid": "91aa45873fbe458d6fb8bfa3bd12111b684e9052", "committedDate": "2020-10-27 13:26:25 +0000", "message": "Enforce more error-prone checks (#5082)"}, {"oid": "1b498ace48020b97cbc1e058c3bd4ee987bd71e0", "committedDate": "2020-11-25 15:30:15 +0000", "message": "Excavator: Upgrades Baseline to the latest version (#5054)"}, {"oid": "29eb638a9bb80d2eee2d7fcd0d3b11f7b497ea25", "committedDate": "2020-11-30 11:47:07 +0000", "message": "[Cross Client Batching LeaderTimes - 3b] "}, {"oid": "ed869bdb9ec2e67bc16159a470a9c9ac242a1258", "committedDate": "2020-12-17 17:47:01 +0000", "message": "[LW] No Op cache tracks version (#5140)"}, {"oid": "8c091e50e9a10820f2b5fdb117454355934a550e", "committedDate": "2021-01-07 16:29:21 +0000", "message": "[LW] Unify the NoOpLockWatchManager and its underlying cache (#5180)"}, {"oid": "e75db01e281f12bd105b1ebf8623858866551ae9", "committedDate": "2021-01-26 11:06:20 +0000", "message": "Excavator: Upgrades Baseline to the latest version (#5169)"}, {"oid": "1737f7f27a84c4258384bd7f0e7e3efe52891749", "committedDate": "2021-02-16 12:49:33 +0000", "message": "[Cross Client Batching] "}, {"oid": "de4d0a7ad60b030ce3d61625bc22f1f4153ea314", "committedDate": "2021-03-02 12:07:56 +0000", "message": "install and runtime keyValueService config must be merged (#5282)"}, {"oid": "4c40d4306cb92f1fd2dc793a301f3d9246ad426e", "committedDate": "2021-03-02 13:37:10 +0000", "message": "[CCB] "}, {"oid": "fd350803832dd39eb1de79d9bc414b187c783557", "committedDate": "2021-03-04 14:39:01 +0000", "message": "[CCB] "}, {"oid": "5038278a4f39f1e558e837e77857a096522dac5a", "committedDate": "2021-03-24 11:15:35 +0000", "message": "[PDS-169034] Background Sweep configuration (#5334)"}, {"oid": "de682a394d0380f87620c72dd1a47545b7ff8642", "committedDate": "2021-03-31 13:15:09 +0000", "message": "[PDS-172208] "}, {"oid": "197aa64b26377782bccf2322eaa973f42d4de177", "committedDate": "2021-04-26 10:17:14 +0100", "message": "[LW] CodeGen for caching and register watches (#5395)"}, {"oid": "8c5fad277dfbe46719859f7875f12507f11fb1b7", "committedDate": "2021-05-04 14:15:49 +0000", "message": "[LW] Wire cache into transactions (#5402)"}, {"oid": "f3f9d6a1d3fc95f5094880b8ef965a3a440701d5", "committedDate": "2021-05-10 14:32:37 +0000", "message": "[LW] Make the value cache configurable (#5442)"}, {"oid": "92438961b5d26ac29b96be10c8d6d1ad3f75617b", "committedDate": "2021-06-08 11:07:49 +0000", "message": "Introduce Immutables Meta-Annotations (#5494)"}, {"oid": "dfc86abe9c0d31cbb9959042e418acda1f6d7e3b", "committedDate": "2021-07-26 21:15:39 +0000", "message": "Manually run the SafeLogger migration (#5572)"}, {"oid": "d960176dc37396732885a63552634e5865942751", "committedDate": "2021-07-27 13:11:19 +0100", "message": "Revert \"Manually run the SafeLogger migration\" (#5573)"}, {"oid": "3f5ff3415fc2301941b870c65ef38103c6cfa907", "committedDate": "2021-07-27 13:22:46 +0000", "message": "Manually run the SafeLogger migration, take 2 (#5575)"}, {"oid": "551a6850007309911551a39e2795e46d327d966b", "committedDate": "2021-08-17 16:19:26 +0000", "message": "[Correctness Logging] Part 1: Explicit Timestamp Violation Metrics (#5599)"}, {"oid": "ccee1801a9d7faa2afcce4ef4b29caf14a4c6161", "committedDate": "2021-09-10 13:45:39 +0000", "message": "Leaky sweep (#5628)"}, {"oid": "396611accd1630c53b532f3282b59911dbf294e1", "committedDate": "2021-09-23 11:51:48 +0000", "message": "Nuke Persistent Lock (#5654)"}, {"oid": "da1ecd97c5650243e6e5f97af221d826cf8d0363", "committedDate": "2021-09-23 15:48:58 +0000", "message": "Do not recreate configs unnecessarily (#5651)"}, {"oid": "d72b58f72c91ccb297ec061ec7a1157a200d05fb", "committedDate": "2021-10-06 12:56:25 +0000", "message": "[IMT2] Moving code around (#5689)"}, {"oid": "c43510ec73325dd1926b40480b599de96b4a8405", "committedDate": "2021-10-07 16:00:27 +0000", "message": "IMT3: add InMemoryLockAndTimestampServiceFactory (#5691)"}, {"oid": "9233c1a43980144c96b1ddcd14796e3b33769cbf", "committedDate": "2021-10-11 10:27:20 +0000", "message": "IMT4: createInMemory rewiring (#5692)"}, {"oid": "c0156a2217f0d6a813122630b987020a3fb21a54", "committedDate": "2021-10-29 13:22:02 +0000", "message": "Leaks are good (#5729)"}, {"oid": "976b455042e5ed9fe518759e77e888a5148ad29f", "committedDate": "2021-11-24 16:51:24 +0000", "message": "[TXN3] PutUnlessExists table (#5763)"}, {"oid": "24802b54f1747b53d652744cf779f1436ef095df", "committedDate": "2021-11-26 13:17:26 +0000", "message": "[Transactions3] TimedConsensusForgettingStore (#5788)"}, {"oid": "d9bc84947088995c680c99d84bd86c49c9ee8f39", "committedDate": "2021-12-02 14:26:42 +0000", "message": "[Jank] Remember oldest timestamp after TS has been running (#5772)"}, {"oid": "1d8416939e6b2f63f29a94dc5b1096452f24331e", "committedDate": "2021-12-07 12:25:36 +0000", "message": "Disable TL adjudication flag (#5810)"}, {"oid": "748257d3dba0dbede5299e9a109f174739fa7995", "committedDate": "2022-03-02 13:45:09 +0000", "message": "Allow multiple TMs for dbkvs  (#5924)"}, {"oid": "83cec56c9ce57777f9b92bd94f54e9379ca89469", "committedDate": "2022-04-12 18:07:45 +0000", "message": "[Runtime Config] Part 1: Merge semantics, abstracting merged config and exposing DerivedSnapshotConfig. (#5995)"}, {"oid": "434b45092b064bb46ae28d5ae93eba8a67d2c83b", "committedDate": "2022-05-03 17:07:19 +0000", "message": "[PDS-265137 -> Develop] Accept Staging Reads on Version Three (#6022)"}, {"oid": "3b1dded26663aee93389b009f6b9b42f5b9d74ca", "committedDate": "2022-06-24 13:51:02 +0100", "message": "Make thread dump configurable (#6084)"}, {"oid": "d55ea59da1e181c82f7460e2384bd7b9e1288ccd", "committedDate": "2022-07-01 11:14:33 +0100", "message": "Kill redundant Oldest TS ts tracker (#6113)"}, {"oid": "cb6fd92be6964ea7c1b0cca8e8fe09a56cecaa4e", "committedDate": "2022-07-19 18:14:40 +0000", "message": "[TTS] Force enable sweep queue writes (#6127)"}, {"oid": "3b81ff19acac2abe71337b2b30eecaefe68d802c", "committedDate": "2022-07-25 16:38:58 +0000", "message": "Timelock topology metric (#6157)"}, {"oid": "e197bb79ca88c58ccc686c8227afb49f3c47a02f", "committedDate": "2022-09-26 17:52:46 +0000", "message": "[TTS] Readonly transactions on TTS (#6212)"}, {"oid": "153b09bec320ca893ff53c7deeed54a5e5d74361", "committedDate": "2022-09-30 08:30:04 +0000", "message": "Revert \"[TTS] Readonly transactions on TTS (#6212)\" (#6254)"}, {"oid": "f2ede61743ee0c9dd03f4fd73b84e76672a8dbe0", "committedDate": "2022-10-06 10:14:20 +0000", "message": "Revert Revert \"[TTS] Readonly transactions on TTS (#6212)\" #6254 (#6257)"}, {"oid": "717c2e5e8fe4163802a9e7fc3596448ad3d36010", "committedDate": "2022-10-17 10:02:08 +0000", "message": "[TTS] Update A (#6263)"}, {"oid": "58a31e4d48ac138a0ec5e2186c4582a2a89dd72e", "committedDate": "2023-04-13 20:17:13 +0100", "message": "Don't register SweeperService (#6516)"}, {"oid": "a732d2ad19db9312e9d3ef7b01079b81616c950d", "committedDate": "2023-04-14 15:31:25 +0000", "message": "Simplify sweep enabled configuration (#6515)"}, {"oid": "9d3b419972f969d98a2e09c33312f005c2725460", "committedDate": "2023-05-18 15:38:07 +0000", "message": "Skramer/buggify timelock (#6557)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMzU4Nw==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366513587", "body": "There's probably something around `persistentTimestampStoreNotConstructedEvenIfConfiguredIfExplicitlyProvided`, though I'm okay with passing on that if it's really hard to test.", "bodyText": "There's probably something around persistentTimestampStoreNotConstructedEvenIfConfiguredIfExplicitlyProvided, though I'm okay with passing on that if it's really hard to test.", "bodyHTML": "<p dir=\"auto\">There's probably something around <code>persistentTimestampStoreNotConstructedEvenIfConfiguredIfExplicitlyProvided</code>, though I'm okay with passing on that if it's really hard to test.</p>", "author": "jeremyk-91", "createdAt": "2020-01-14T18:54:26Z", "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java", "diffHunk": "@@ -714,6 +722,88 @@ public void kvsDoesNotRecordSweepStatsIfSweepQueueWritesAndTargetedSweepEnabled(\n         assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService), is(false));\n     }\n \n+    @Test\n+    public void providedTimestampCacheOverridesAnyOtherConfig() {\n+        MetricRegistry metricRegistry = metricsManager.getRegistry();\n+        TimestampCache expectedTimestampCache = new DefaultTimestampCache(metricRegistry, () -> 10000L);\n+\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .timestampCache(expectedTimestampCache)\n+                .build();\n+\n+        TimestampCache timestampCache = constructTimestampCache(installConfig, Optional.empty());\n+\n+        assertThat(timestampCache).isSameAs(expectedTimestampCache);\n+    }\n+\n+    @Test\n+    public void usingInMemoryTimestampCache() {\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .build();\n+\n+        TimestampCache timestampCache = constructTimestampCache(installConfig, Optional.empty());\n+\n+        assertThat(timestampCache).isInstanceOf(DefaultTimestampCache.class);\n+    }\n+\n+    @Test\n+    public void usingPersistentStorage() throws IOException {\n+        File storageFolder = temporaryFolder.newFolder();\n+        String storagePath = Files.currentFolder().toPath()\n+                .relativize(storageFolder.toPath())\n+                .toString();\n+\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .persistentStorage(\n+                        ImmutableRocksDbPersistentStorageConfig.builder()\n+                                .storagePath(storagePath)\n+                                .build())\n+                .build();\n+\n+        Optional<PersistentTimestampStore> persistentTimestampStore =\n+                TransactionManagers.constructPersistentTimestampStore(\n+                        installConfig,\n+                        new DefaultPersistentStorageFactory(),\n+                        new LinkedList<>());\n+\n+        TimestampCache timestampCache = constructTimestampCache(installConfig, persistentTimestampStore);\n+\n+        assertThat(timestampCache).isInstanceOf(OffHeapTimestampCache.class);\n+    }\n+\n+    @Test\n+    public void persistentTimestampStoreNotConstructed() {\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .build();\n+\n+        Optional<PersistentTimestampStore> persistentTimestampStore =\n+                TransactionManagers.constructPersistentTimestampStore(\n+                        installConfig,\n+                        new DefaultPersistentStorageFactory(),\n+                        new LinkedList<>());\n+\n+        assertThat(persistentTimestampStore)\n+                .isEmpty();\n+    }\n+", "originalCommit": "ad865b2757050ea6ea113acdfd4f374553cd6cea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMDczMw==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366530733", "bodyText": "Will be resolved in a following PR.", "author": "OStevan", "createdAt": "2020-01-14T19:30:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMzU4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc5ODEzNw==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366798137", "bodyText": "After discussing offline we decided that if the config is provided the persistent storage is initialized so this is not useful anymore.", "author": "OStevan", "createdAt": "2020-01-15T10:24:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMzU4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "503dfbde8603ebba45e769b9f253dc5d58f71d30", "changed_code": [{"header": "diff --git a/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java b/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\nindex 8f2c3681dc..f2b48ef4c1 100644\n--- a/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\n+++ b/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\n", "chunk": "@@ -785,7 +785,7 @@ public class TransactionManagersTest {\n                 .build();\n \n         Optional<PersistentTimestampStore> persistentTimestampStore =\n-                TransactionManagers.constructPersistentTimestampStore(\n+                TransactionManagers.constructPersistentTimestampStoreIfConfigured(\n                         installConfig,\n                         new DefaultPersistentStorageFactory(),\n                         new LinkedList<>());\n", "next_change": null}]}, "revised_code_in_main": {"commit": "4971ce2cbdf5953f8199675742a8849a627c9a76", "changed_code": [{"header": "diff --git a/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java b/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\nindex 8f2c3681dc..f2b48ef4c1 100644\n--- a/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\n+++ b/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\n", "chunk": "@@ -785,7 +785,7 @@ public class TransactionManagersTest {\n                 .build();\n \n         Optional<PersistentTimestampStore> persistentTimestampStore =\n-                TransactionManagers.constructPersistentTimestampStore(\n+                TransactionManagers.constructPersistentTimestampStoreIfConfigured(\n                         installConfig,\n                         new DefaultPersistentStorageFactory(),\n                         new LinkedList<>());\n", "next_change": {"commit": "1a4b4b058e9fc316a9157e83cba2fd26bf666d53", "changed_code": [{"header": "diff --git a/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java b/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\nindex f2b48ef4c1..66e027b489 100644\n--- a/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\n+++ b/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\n", "chunk": "@@ -766,42 +766,42 @@ public class TransactionManagersTest {\n                                 .build())\n                 .build();\n \n-        Optional<PersistentTimestampStore> persistentTimestampStore =\n-                TransactionManagers.constructPersistentTimestampStoreIfConfigured(\n+        Optional<PhysicalPersistentStore> persistentStore =\n+                TransactionManagers.constructPersistentStoreIfConfigured(\n                         installConfig,\n-                        new DefaultPersistentStorageFactory(),\n+                        new DefaultPhysicalPersistentStorageFactory(),\n                         new LinkedList<>());\n \n-        TimestampCache timestampCache = constructTimestampCache(installConfig, persistentTimestampStore);\n+        TimestampCache timestampCache = constructTimestampCache(installConfig, persistentStore);\n \n         assertThat(timestampCache).isInstanceOf(OffHeapTimestampCache.class);\n     }\n \n     @Test\n-    public void persistentTimestampStoreNotConstructed() {\n+    public void persistentStoreNotConstructed() {\n         AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n                 .keyValueService(new InMemoryAtlasDbConfig())\n                 .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n                 .build();\n \n-        Optional<PersistentTimestampStore> persistentTimestampStore =\n-                TransactionManagers.constructPersistentTimestampStoreIfConfigured(\n+        Optional<PhysicalPersistentStore> persistentStore =\n+                TransactionManagers.constructPersistentStoreIfConfigured(\n                         installConfig,\n-                        new DefaultPersistentStorageFactory(),\n+                        new DefaultPhysicalPersistentStorageFactory(),\n                         new LinkedList<>());\n \n-        assertThat(persistentTimestampStore)\n+        assertThat(persistentStore)\n                 .isEmpty();\n     }\n \n     private TimestampCache constructTimestampCache(\n             AtlasDbConfig installConfig,\n-            Optional<PersistentTimestampStore> persistentTimestampStore) {\n-        return TransactionManagers.getTimestampCache(\n+            Optional<PhysicalPersistentStore> persistentStore) {\n+        return TransactionManagers.timestampCache(\n                 installConfig,\n                 metricsManager,\n                 () -> ImmutableAtlasDbRuntimeConfig.builder().build(),\n-                persistentTimestampStore);\n+                persistentStore);\n     }\n \n     private KeyValueService initializeKeyValueServiceWithSweepSettings(\n", "next_change": {"commit": "6327ceeb116649fb68f1227a53c5e025120c42d5", "changed_code": [{"header": "diff --git a/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java b/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\nindex 66e027b489..f9dad3a867 100644\n--- a/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\n+++ b/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\n", "chunk": "@@ -722,88 +715,6 @@ public class TransactionManagersTest {\n         assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService), is(false));\n     }\n \n-    @Test\n-    public void providedTimestampCacheOverridesAnyOtherConfig() {\n-        MetricRegistry metricRegistry = metricsManager.getRegistry();\n-        TimestampCache expectedTimestampCache = new DefaultTimestampCache(metricRegistry, () -> 10000L);\n-\n-        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n-                .keyValueService(new InMemoryAtlasDbConfig())\n-                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n-                .timestampCache(expectedTimestampCache)\n-                .build();\n-\n-        TimestampCache timestampCache = constructTimestampCache(installConfig, Optional.empty());\n-\n-        assertThat(timestampCache).isSameAs(expectedTimestampCache);\n-    }\n-\n-    @Test\n-    public void usingInMemoryTimestampCache() {\n-        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n-                .keyValueService(new InMemoryAtlasDbConfig())\n-                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n-                .build();\n-\n-        TimestampCache timestampCache = constructTimestampCache(installConfig, Optional.empty());\n-\n-        assertThat(timestampCache).isInstanceOf(DefaultTimestampCache.class);\n-    }\n-\n-    @Test\n-    public void usingPersistentStorage() throws IOException {\n-        File storageFolder = temporaryFolder.newFolder();\n-        String storagePath = Files.currentFolder().toPath()\n-                .relativize(storageFolder.toPath())\n-                .toString();\n-\n-        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n-                .keyValueService(new InMemoryAtlasDbConfig())\n-                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n-                .persistentStorage(\n-                        ImmutableRocksDbPersistentStorageConfig.builder()\n-                                .storagePath(storagePath)\n-                                .build())\n-                .build();\n-\n-        Optional<PhysicalPersistentStore> persistentStore =\n-                TransactionManagers.constructPersistentStoreIfConfigured(\n-                        installConfig,\n-                        new DefaultPhysicalPersistentStorageFactory(),\n-                        new LinkedList<>());\n-\n-        TimestampCache timestampCache = constructTimestampCache(installConfig, persistentStore);\n-\n-        assertThat(timestampCache).isInstanceOf(OffHeapTimestampCache.class);\n-    }\n-\n-    @Test\n-    public void persistentStoreNotConstructed() {\n-        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n-                .keyValueService(new InMemoryAtlasDbConfig())\n-                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n-                .build();\n-\n-        Optional<PhysicalPersistentStore> persistentStore =\n-                TransactionManagers.constructPersistentStoreIfConfigured(\n-                        installConfig,\n-                        new DefaultPhysicalPersistentStorageFactory(),\n-                        new LinkedList<>());\n-\n-        assertThat(persistentStore)\n-                .isEmpty();\n-    }\n-\n-    private TimestampCache constructTimestampCache(\n-            AtlasDbConfig installConfig,\n-            Optional<PhysicalPersistentStore> persistentStore) {\n-        return TransactionManagers.timestampCache(\n-                installConfig,\n-                metricsManager,\n-                () -> ImmutableAtlasDbRuntimeConfig.builder().build(),\n-                persistentStore);\n-    }\n-\n     private KeyValueService initializeKeyValueServiceWithSweepSettings(\n             boolean enableSweepQueueWrites, boolean enableTargetedSweep) {\n         AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n", "next_change": {"commit": "cf40424eab290e29d0527e76363c241b86e94a28", "changed_code": [{"header": "diff --git a/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java b/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\nindex f9dad3a867..f5e42af163 100644\n--- a/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\n+++ b/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\n", "chunk": "@@ -694,25 +719,25 @@ public class TransactionManagersTest {\n     @Test\n     public void kvsRecordsSweepStatsIfBothSweepQueueWritesAndTargetedSweepDisabled() {\n         KeyValueService keyValueService = initializeKeyValueServiceWithSweepSettings(false, false);\n-        assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService), is(true));\n+        assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService)).isEqualTo(true);\n     }\n \n     @Test\n     public void kvsRecordsSweepStatsIfSweepQueueWritesDisabledButTargetedSweepEnabled() {\n         KeyValueService keyValueService = initializeKeyValueServiceWithSweepSettings(false, true);\n-        assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService), is(true));\n+        assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService)).isEqualTo(true);\n     }\n \n     @Test\n     public void kvsRecordsSweepStatsIfSweepQueueWritesEnabledButTargetedSweepDisabled() {\n         KeyValueService keyValueService = initializeKeyValueServiceWithSweepSettings(true, false);\n-        assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService), is(true));\n+        assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService)).isEqualTo(true);\n     }\n \n     @Test\n     public void kvsDoesNotRecordSweepStatsIfSweepQueueWritesAndTargetedSweepEnabled() {\n         KeyValueService keyValueService = initializeKeyValueServiceWithSweepSettings(true, true);\n-        assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService), is(false));\n+        assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService)).isEqualTo(false);\n     }\n \n     private KeyValueService initializeKeyValueServiceWithSweepSettings(\n", "next_change": {"commit": "26ae58539e811bbd63988cafefe2f1aa7271c0d1", "changed_code": [{"header": "diff --git a/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java b/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\nindex f5e42af163..02a8a65087 100644\n--- a/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\n+++ b/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\n", "chunk": "@@ -719,25 +721,25 @@ public class TransactionManagersTest {\n     @Test\n     public void kvsRecordsSweepStatsIfBothSweepQueueWritesAndTargetedSweepDisabled() {\n         KeyValueService keyValueService = initializeKeyValueServiceWithSweepSettings(false, false);\n-        assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService)).isEqualTo(true);\n+        assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService)).isTrue();\n     }\n \n     @Test\n     public void kvsRecordsSweepStatsIfSweepQueueWritesDisabledButTargetedSweepEnabled() {\n         KeyValueService keyValueService = initializeKeyValueServiceWithSweepSettings(false, true);\n-        assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService)).isEqualTo(true);\n+        assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService)).isTrue();\n     }\n \n     @Test\n     public void kvsRecordsSweepStatsIfSweepQueueWritesEnabledButTargetedSweepDisabled() {\n         KeyValueService keyValueService = initializeKeyValueServiceWithSweepSettings(true, false);\n-        assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService)).isEqualTo(true);\n+        assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService)).isTrue();\n     }\n \n     @Test\n     public void kvsDoesNotRecordSweepStatsIfSweepQueueWritesAndTargetedSweepEnabled() {\n         KeyValueService keyValueService = initializeKeyValueServiceWithSweepSettings(true, true);\n-        assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService)).isEqualTo(false);\n+        assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService)).isFalse();\n     }\n \n     private KeyValueService initializeKeyValueServiceWithSweepSettings(\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "4971ce2cbdf5953f8199675742a8849a627c9a76", "message": "Merge commit", "committedDate": null}, {"oid": "b2c255a21d89fd59cf0313d121cdd4f4bef64efe", "committedDate": "2020-01-15 10:45:16 +0000", "message": "Instrument timestamp cache (#4510)"}, {"oid": "1a4b4b058e9fc316a9157e83cba2fd26bf666d53", "committedDate": "2020-01-16 20:21:27 +0000", "message": "Persistent storage refactoring (#4512)"}, {"oid": "6327ceeb116649fb68f1227a53c5e025120c42d5", "committedDate": "2020-01-23 15:20:36 +0000", "message": "Remove concept of namespaces and LogicalPersistentStore. (#4522)"}, {"oid": "f17735e1546ec9544da9182d957f16c818d3f2a2", "committedDate": "2020-03-03 19:49:33 +0000", "message": "Client side changes for conjure endpoints (#4628)"}, {"oid": "5fa91177e3b5178d901a02295e0ac81181d482d0", "committedDate": "2020-03-10 19:07:44 +0000", "message": "[Conjure Java Runtime] Part 26: Story of Thanatosis (Removing AtlasDB-Feign Entirely) (#4561)"}, {"oid": "19cbbbca5667f4498daeaaec0277d5861bbde69f", "committedDate": "2020-04-22 13:45:52 +0100", "message": "Use refreshable for runtime config (#4723)"}, {"oid": "e3c27c5054ea8cc0cecf3d71c34047460a4e1090", "committedDate": "2020-05-18 08:02:46 +0000", "message": "[Dialogue] Part 6: Road to Multitenancy (#4778)"}, {"oid": "b91eeec5563f46e8a2556316a127a0ed0986f8c0", "committedDate": "2020-06-16 16:19:57 +0100", "message": "Feedback 1 (#4833)"}, {"oid": "e26bd3fcac8c8535b31a8d70350ecf286d7ce4e1", "committedDate": "2020-06-16 16:31:20 +0100", "message": "Override serviceName"}, {"oid": "9312e5695ed971cc164f4c3daafab07715a42e2b", "committedDate": "2020-06-16 16:35:51 +0100", "message": "Revert \"Override serviceName\""}, {"oid": "5dface245b6f8e471b6a6328bdacf8f51bdb027f", "committedDate": "2020-06-16 17:46:39 +0100", "message": "override service name (#4840)"}, {"oid": "d050105f11fa6cb7fd3aafbc59543de315d1afa8", "committedDate": "2020-06-17 15:03:36 +0100", "message": "Add serviceId (#4843)"}, {"oid": "3607c938ec15496cf16c94ee2c26a0d898e075e5", "committedDate": "2020-06-22 19:11:39 +0100", "message": "report feedback to timeLock (#4845)"}, {"oid": "f6d41b09dcb27216600b297e73ceb86a6a91876e", "committedDate": "2020-07-29 14:40:28 +0100", "message": "[TimeLock blue-green] PingV2 "}, {"oid": "eda6513b192b3169ef4ba40c1cbe7e6ba529d1e1", "committedDate": "2020-08-14 14:37:45 +0100", "message": "Reuse Dialogue Factory in Timelock Adjudication Service (#4937)"}, {"oid": "5db7a1e5d87dd3be1f604e725b66d68d185dac6e", "committedDate": "2020-08-21 11:33:11 +0100", "message": "Don't Register Duplicate Metrics (#4954)"}, {"oid": "249de1a6f3e21eb3907451eb232d96066f659194", "committedDate": "2020-10-20 12:04:30 +0000", "message": "Upgrade gradle-baseline (#5044)"}, {"oid": "8106ea9c4dd52cded65c5bbee63bf68ade32bffd", "committedDate": "2020-10-22 10:48:31 +0000", "message": "Leader Election Metrics 1a: Client Side Wiring (#5062)"}, {"oid": "cf40424eab290e29d0527e76363c241b86e94a28", "committedDate": "2020-11-25 13:09:15 +0000", "message": "Excavator: Prefer AssertJ (#5130)"}, {"oid": "1b498ace48020b97cbc1e058c3bd4ee987bd71e0", "committedDate": "2020-11-25 15:30:15 +0000", "message": "Excavator: Upgrades Baseline to the latest version (#5054)"}, {"oid": "29eb638a9bb80d2eee2d7fcd0d3b11f7b497ea25", "committedDate": "2020-11-30 11:47:07 +0000", "message": "[Cross Client Batching LeaderTimes - 3b] "}, {"oid": "26ae58539e811bbd63988cafefe2f1aa7271c0d1", "committedDate": "2021-01-06 16:34:54 +0000", "message": "Excavator: Prefer AssertJ (#5134)"}, {"oid": "2e12d76f78b03e7cf13cf61b43ba8cd4f4877240", "committedDate": "2021-01-11 15:46:31 +0000", "message": "More errorprone checks enabled (#5188)"}, {"oid": "1737f7f27a84c4258384bd7f0e7e3efe52891749", "committedDate": "2021-02-16 12:49:33 +0000", "message": "[Cross Client Batching] "}, {"oid": "197aa64b26377782bccf2322eaa973f42d4de177", "committedDate": "2021-04-26 10:17:14 +0100", "message": "[LW] CodeGen for caching and register watches (#5395)"}, {"oid": "b8d9989aa62996e5e315641177021848ec4ce9fe", "committedDate": "2021-07-28 10:20:41 +0000", "message": "Exclusion Hunter V: DefaultCharset (#5552)"}, {"oid": "d72b58f72c91ccb297ec061ec7a1157a200d05fb", "committedDate": "2021-10-06 12:56:25 +0000", "message": "[IMT2] Moving code around (#5689)"}, {"oid": "c43510ec73325dd1926b40480b599de96b4a8405", "committedDate": "2021-10-07 16:00:27 +0000", "message": "IMT3: add InMemoryLockAndTimestampServiceFactory (#5691)"}, {"oid": "9233c1a43980144c96b1ddcd14796e3b33769cbf", "committedDate": "2021-10-11 10:27:20 +0000", "message": "IMT4: createInMemory rewiring (#5692)"}, {"oid": "4054a8353675411296a97f23579fcc93384bd092", "committedDate": "2021-10-15 13:04:23 +0000", "message": "IMT5: ~Kill~ Severely Wound InMemoryTimestampService (#5695)"}]}, {"oid": "503dfbde8603ebba45e769b9f253dc5d58f71d30", "url": "https://github.com/palantir/atlasdb/commit/503dfbde8603ebba45e769b9f253dc5d58f71d30", "message": "Small fixes.", "committedDate": "2020-01-14T19:31:08Z", "type": "commit"}]}