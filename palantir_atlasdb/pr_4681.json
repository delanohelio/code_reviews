{"pr_number": 4681, "pr_title": "[PDS-114184] Make Atlas CLI Validate Step Use Many Transactions", "pr_author": "Jolyon-S", "pr_createdAt": "2020-03-27T11:04:56Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4681", "merge_commit": "820f68579096f9617742cc3c3e713161f81965f8", "timeline": [{"oid": "196cb6a207d0505c780cd6da129e57539ed28e0b", "url": "https://github.com/palantir/atlasdb/commit/196cb6a207d0505c780cd6da129e57539ed28e0b", "message": "use many txns to validate instead", "committedDate": "2020-03-27T11:02:00Z", "type": "commit"}, {"oid": "92589ffbfb68052efaccd25bdd5b21468d2c85a9", "url": "https://github.com/palantir/atlasdb/commit/92589ffbfb68052efaccd25bdd5b21468d2c85a9", "message": "Add generated changelog entries", "committedDate": "2020-03-27T11:02:00Z", "type": "commit"}, {"oid": "5428dd5f269dc99d66afe76618c387fced56965b", "url": "https://github.com/palantir/atlasdb/commit/5428dd5f269dc99d66afe76618c387fced56965b", "message": "wrap in runtime exception", "committedDate": "2020-03-27T11:34:41Z", "type": "commit"}, {"oid": "d3591f775af7e396175d5ff89bd3cc97d3ac88a4", "url": "https://github.com/palantir/atlasdb/commit/d3591f775af7e396175d5ff89bd3cc97d3ac88a4", "message": "Merge branch 'validateManyTxns' of github.com:palantir/atlasdb into validateManyTxns", "committedDate": "2020-03-27T11:34:52Z", "type": "commit"}, {"oid": "5a2bd102d0a0d52ea3b89322ddba5b711540379c", "url": "https://github.com/palantir/atlasdb/commit/5a2bd102d0a0d52ea3b89322ddba5b711540379c", "message": "remove unnecessary diff", "committedDate": "2020-03-27T11:37:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxODQyMg==", "url": "https://github.com/palantir/atlasdb/pull/4681#discussion_r399218422", "body": "Do you need this try-catch?", "bodyText": "Do you need this try-catch?", "bodyHTML": "<p dir=\"auto\">Do you need this try-catch?</p>", "author": "jkozlowski", "createdAt": "2020-03-27T12:07:38Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "diffHunk": "@@ -114,31 +113,27 @@ private void validateTables(Set<TableReference> tables) {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationFromTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t1 -> {\n-                    validateTable(table, limit, t1);\n-                    return null;\n-                });\n+        byte[] nextRowName = new byte[0];\n+        while (nextRowName != null) {\n+            nextRowName = validateNextRow(table, limit, nextRowName);\n+        }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private void validateTable(final TableReference table, final int limit, final Transaction t1) {\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationToTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t2 -> {\n-                    validateTable(table, limit, t1, t2);\n-                    return null;\n-                });\n-    }\n-\n-    private void validateTable(TableReference table, int limit, Transaction t1, Transaction t2) {\n-        RangeRequest.Builder builder = RangeRequest.builder().batchHint(limit);\n-        byte[] nextRowName = new byte[0];\n-        while (nextRowName != null) {\n-            RangeRequest range = builder.startRowInclusive(nextRowName).build();\n-            nextRowName = validateAndGetNextRowName(table, limit, t1, t2, range);\n+    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+        try {\n+            return validationFromTransactionManager.runTaskWithRetry(t1 ->\n+                    validationToTransactionManager.runTaskWithRetry(t2 -> {\n+                                RangeRequest range = RangeRequest.builder()\n+                                        .batchHint(limit)\n+                                        .startRowInclusive(nextRowName)\n+                                        .build();\n+                                return validateAndGetNextRowName(table, limit, t1, t2, range);\n+                            }\n+                    ));\n+        } catch (Exception e) {", "originalCommit": "5a2bd102d0a0d52ea3b89322ddba5b711540379c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1MDI1NA==", "url": "https://github.com/palantir/atlasdb/pull/4681#discussion_r399250254", "bodyText": "gradle complains if I don't", "author": "Jolyon-S", "createdAt": "2020-03-27T13:07:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxODQyMg=="}], "type": "inlineReview", "revised_code": {"commit": "9d475c773e5b6a149d9c3c3ab687abcc004ca796", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 172239ce69..df8e5c06fe 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -113,25 +113,26 @@ public class KeyValueServiceValidator {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n+        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n         byte[] nextRowName = new byte[0];\n         while (nextRowName != null) {\n-            nextRowName = validateNextRow(table, limit, nextRowName);\n+            nextRowName = validateNextBatchOfRows(table, limit, nextRowName);\n         }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+    private byte[] validateNextBatchOfRows(TableReference table, int limit, byte[] nextRowName) {\n         try {\n+            // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n-                                RangeRequest range = RangeRequest.builder()\n-                                        .batchHint(limit)\n-                                        .startRowInclusive(nextRowName)\n-                                        .build();\n-                                return validateAndGetNextRowName(table, limit, t1, t2, range);\n-                            }\n-                    ));\n+                        RangeRequest range = RangeRequest.builder()\n+                                .batchHint(limit)\n+                                .startRowInclusive(nextRowName)\n+                                .build();\n+                        return validateAndGetNextRowName(table, limit, t1, t2, range);\n+                    }));\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "820f68579096f9617742cc3c3e713161f81965f8", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 172239ce69..df8e5c06fe 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -113,25 +113,26 @@ public class KeyValueServiceValidator {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n+        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n         byte[] nextRowName = new byte[0];\n         while (nextRowName != null) {\n-            nextRowName = validateNextRow(table, limit, nextRowName);\n+            nextRowName = validateNextBatchOfRows(table, limit, nextRowName);\n         }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+    private byte[] validateNextBatchOfRows(TableReference table, int limit, byte[] nextRowName) {\n         try {\n+            // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n-                                RangeRequest range = RangeRequest.builder()\n-                                        .batchHint(limit)\n-                                        .startRowInclusive(nextRowName)\n-                                        .build();\n-                                return validateAndGetNextRowName(table, limit, t1, t2, range);\n-                            }\n-                    ));\n+                        RangeRequest range = RangeRequest.builder()\n+                                .batchHint(limit)\n+                                .startRowInclusive(nextRowName)\n+                                .build();\n+                        return validateAndGetNextRowName(table, limit, t1, t2, range);\n+                    }));\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         }\n", "next_change": {"commit": "249de1a6f3e21eb3907451eb232d96066f659194", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex df8e5c06fe..9a20f10247 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -138,18 +138,13 @@ public class KeyValueServiceValidator {\n         }\n     }\n \n-    private byte[] validateAndGetNextRowName(TableReference table,\n-                                             int limit,\n-                                             Transaction t1,\n-                                             Transaction t2,\n-                                             RangeRequest range) {\n-        BatchingVisitableView<RowResult<byte[]>> bv1 =\n-                BatchingVisitableView.of(t1.getRange(table, range));\n+    private byte[] validateAndGetNextRowName(\n+            TableReference table, int limit, Transaction t1, Transaction t2, RangeRequest range) {\n+        BatchingVisitableView<RowResult<byte[]>> bv1 = BatchingVisitableView.of(t1.getRange(table, range));\n         List<RowResult<byte[]>> rrs1 = bv1.limit(limit).immutableCopy();\n         Map<Cell, byte[]> cells1 = Cells.convertRowResultsToCells(rrs1);\n \n-        BatchingVisitableView<RowResult<byte[]>> bv2 =\n-                BatchingVisitableView.of(t2.getRange(table, range));\n+        BatchingVisitableView<RowResult<byte[]>> bv2 = BatchingVisitableView.of(t2.getRange(table, range));\n         List<RowResult<byte[]>> rrs2 = bv2.limit(limit).immutableCopy();\n         Map<Cell, byte[]> cells2 = Cells.convertRowResultsToCells(rrs2);\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "820f68579096f9617742cc3c3e713161f81965f8", "message": "Merge commit", "committedDate": null}, {"oid": "249de1a6f3e21eb3907451eb232d96066f659194", "committedDate": "2020-10-20 12:04:30 +0000", "message": "Upgrade gradle-baseline (#5044)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxODgwOA==", "url": "https://github.com/palantir/atlasdb/pull/4681#discussion_r399218808", "body": "Can you keep this comment, it's pretty important.", "bodyText": "Can you keep this comment, it's pretty important.", "bodyHTML": "<p dir=\"auto\">Can you keep this comment, it's pretty important.</p>", "author": "jkozlowski", "createdAt": "2020-03-27T12:08:20Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "diffHunk": "@@ -114,31 +113,27 @@ private void validateTables(Set<TableReference> tables) {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH", "originalCommit": "5a2bd102d0a0d52ea3b89322ddba5b711540379c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e70c3ee59c22b657103541ee8ce8965293e463c3", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 172239ce69..1854ea90e4 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -113,6 +113,8 @@ public class KeyValueServiceValidator {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n+        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n+        // not using retries as each attempt could take up to 8 hours\n         byte[] nextRowName = new byte[0];\n         while (nextRowName != null) {\n             nextRowName = validateNextRow(table, limit, nextRowName);\n", "next_change": {"commit": "cc8a6d29c2b44d2811cb66cb17748a9d79364692", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 1854ea90e4..1839959b38 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -114,19 +114,17 @@ public class KeyValueServiceValidator {\n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n         // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        // not using retries as each attempt could take up to 8 hours\n         byte[] nextRowName = new byte[0];\n         while (nextRowName != null) {\n-            nextRowName = validateNextRow(table, limit, nextRowName);\n+            nextRowName = validateNextBatchOfRows(table, limit, nextRowName);\n         }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+    private byte[] validateNextBatchOfRows(TableReference table, int limit, byte[] nextRowName) {\n         try {\n             // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-            // not using retries as each attempt could take up to 8 hours\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n                                 RangeRequest range = RangeRequest.builder()\n", "next_change": {"commit": "9d475c773e5b6a149d9c3c3ab687abcc004ca796", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 1839959b38..df8e5c06fe 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -127,13 +127,12 @@ public class KeyValueServiceValidator {\n             // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n-                                RangeRequest range = RangeRequest.builder()\n-                                        .batchHint(limit)\n-                                        .startRowInclusive(nextRowName)\n-                                        .build();\n-                                return validateAndGetNextRowName(table, limit, t1, t2, range);\n-                            }\n-                    ));\n+                        RangeRequest range = RangeRequest.builder()\n+                                .batchHint(limit)\n+                                .startRowInclusive(nextRowName)\n+                                .build();\n+                        return validateAndGetNextRowName(table, limit, t1, t2, range);\n+                    }));\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "820f68579096f9617742cc3c3e713161f81965f8", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 172239ce69..df8e5c06fe 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -113,25 +113,26 @@ public class KeyValueServiceValidator {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n+        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n         byte[] nextRowName = new byte[0];\n         while (nextRowName != null) {\n-            nextRowName = validateNextRow(table, limit, nextRowName);\n+            nextRowName = validateNextBatchOfRows(table, limit, nextRowName);\n         }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+    private byte[] validateNextBatchOfRows(TableReference table, int limit, byte[] nextRowName) {\n         try {\n+            // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n-                                RangeRequest range = RangeRequest.builder()\n-                                        .batchHint(limit)\n-                                        .startRowInclusive(nextRowName)\n-                                        .build();\n-                                return validateAndGetNextRowName(table, limit, t1, t2, range);\n-                            }\n-                    ));\n+                        RangeRequest range = RangeRequest.builder()\n+                                .batchHint(limit)\n+                                .startRowInclusive(nextRowName)\n+                                .build();\n+                        return validateAndGetNextRowName(table, limit, t1, t2, range);\n+                    }));\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         }\n", "next_change": {"commit": "249de1a6f3e21eb3907451eb232d96066f659194", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex df8e5c06fe..9a20f10247 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -138,18 +138,13 @@ public class KeyValueServiceValidator {\n         }\n     }\n \n-    private byte[] validateAndGetNextRowName(TableReference table,\n-                                             int limit,\n-                                             Transaction t1,\n-                                             Transaction t2,\n-                                             RangeRequest range) {\n-        BatchingVisitableView<RowResult<byte[]>> bv1 =\n-                BatchingVisitableView.of(t1.getRange(table, range));\n+    private byte[] validateAndGetNextRowName(\n+            TableReference table, int limit, Transaction t1, Transaction t2, RangeRequest range) {\n+        BatchingVisitableView<RowResult<byte[]>> bv1 = BatchingVisitableView.of(t1.getRange(table, range));\n         List<RowResult<byte[]>> rrs1 = bv1.limit(limit).immutableCopy();\n         Map<Cell, byte[]> cells1 = Cells.convertRowResultsToCells(rrs1);\n \n-        BatchingVisitableView<RowResult<byte[]>> bv2 =\n-                BatchingVisitableView.of(t2.getRange(table, range));\n+        BatchingVisitableView<RowResult<byte[]>> bv2 = BatchingVisitableView.of(t2.getRange(table, range));\n         List<RowResult<byte[]>> rrs2 = bv2.limit(limit).immutableCopy();\n         Map<Cell, byte[]> cells2 = Cells.convertRowResultsToCells(rrs2);\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "820f68579096f9617742cc3c3e713161f81965f8", "message": "Merge commit", "committedDate": null}, {"oid": "249de1a6f3e21eb3907451eb232d96066f659194", "committedDate": "2020-10-20 12:04:30 +0000", "message": "Upgrade gradle-baseline (#5044)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxOTQ3Mg==", "url": "https://github.com/palantir/atlasdb/pull/4681#discussion_r399219472", "body": "Feels like creating this range should belong in validateAndGetNextRowName", "bodyText": "Feels like creating this range should belong in validateAndGetNextRowName", "bodyHTML": "<p dir=\"auto\">Feels like creating this range should belong in validateAndGetNextRowName</p>", "author": "jkozlowski", "createdAt": "2020-03-27T12:09:38Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "diffHunk": "@@ -114,31 +113,27 @@ private void validateTables(Set<TableReference> tables) {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationFromTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t1 -> {\n-                    validateTable(table, limit, t1);\n-                    return null;\n-                });\n+        byte[] nextRowName = new byte[0];\n+        while (nextRowName != null) {\n+            nextRowName = validateNextRow(table, limit, nextRowName);\n+        }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private void validateTable(final TableReference table, final int limit, final Transaction t1) {\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationToTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t2 -> {\n-                    validateTable(table, limit, t1, t2);\n-                    return null;\n-                });\n-    }\n-\n-    private void validateTable(TableReference table, int limit, Transaction t1, Transaction t2) {\n-        RangeRequest.Builder builder = RangeRequest.builder().batchHint(limit);\n-        byte[] nextRowName = new byte[0];\n-        while (nextRowName != null) {\n-            RangeRequest range = builder.startRowInclusive(nextRowName).build();\n-            nextRowName = validateAndGetNextRowName(table, limit, t1, t2, range);\n+    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+        try {\n+            return validationFromTransactionManager.runTaskWithRetry(t1 ->\n+                    validationToTransactionManager.runTaskWithRetry(t2 -> {\n+                                RangeRequest range = RangeRequest.builder()", "originalCommit": "5a2bd102d0a0d52ea3b89322ddba5b711540379c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxOTk2OQ==", "url": "https://github.com/palantir/atlasdb/pull/4681#discussion_r399219969", "bodyText": "Actually, it's probably fine.", "author": "jkozlowski", "createdAt": "2020-03-27T12:10:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxOTQ3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e70c3ee59c22b657103541ee8ce8965293e463c3", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 172239ce69..1854ea90e4 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -123,6 +125,8 @@ public class KeyValueServiceValidator {\n \n     private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n         try {\n+            // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n+            // not using retries as each attempt could take up to 8 hours\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n                                 RangeRequest range = RangeRequest.builder()\n", "next_change": {"commit": "cc8a6d29c2b44d2811cb66cb17748a9d79364692", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 1854ea90e4..1839959b38 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -114,19 +114,17 @@ public class KeyValueServiceValidator {\n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n         // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        // not using retries as each attempt could take up to 8 hours\n         byte[] nextRowName = new byte[0];\n         while (nextRowName != null) {\n-            nextRowName = validateNextRow(table, limit, nextRowName);\n+            nextRowName = validateNextBatchOfRows(table, limit, nextRowName);\n         }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+    private byte[] validateNextBatchOfRows(TableReference table, int limit, byte[] nextRowName) {\n         try {\n             // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-            // not using retries as each attempt could take up to 8 hours\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n                                 RangeRequest range = RangeRequest.builder()\n", "next_change": {"commit": "9d475c773e5b6a149d9c3c3ab687abcc004ca796", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 1839959b38..df8e5c06fe 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -127,13 +127,12 @@ public class KeyValueServiceValidator {\n             // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n-                                RangeRequest range = RangeRequest.builder()\n-                                        .batchHint(limit)\n-                                        .startRowInclusive(nextRowName)\n-                                        .build();\n-                                return validateAndGetNextRowName(table, limit, t1, t2, range);\n-                            }\n-                    ));\n+                        RangeRequest range = RangeRequest.builder()\n+                                .batchHint(limit)\n+                                .startRowInclusive(nextRowName)\n+                                .build();\n+                        return validateAndGetNextRowName(table, limit, t1, t2, range);\n+                    }));\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "820f68579096f9617742cc3c3e713161f81965f8", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 172239ce69..df8e5c06fe 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -113,25 +113,26 @@ public class KeyValueServiceValidator {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n+        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n         byte[] nextRowName = new byte[0];\n         while (nextRowName != null) {\n-            nextRowName = validateNextRow(table, limit, nextRowName);\n+            nextRowName = validateNextBatchOfRows(table, limit, nextRowName);\n         }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+    private byte[] validateNextBatchOfRows(TableReference table, int limit, byte[] nextRowName) {\n         try {\n+            // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n-                                RangeRequest range = RangeRequest.builder()\n-                                        .batchHint(limit)\n-                                        .startRowInclusive(nextRowName)\n-                                        .build();\n-                                return validateAndGetNextRowName(table, limit, t1, t2, range);\n-                            }\n-                    ));\n+                        RangeRequest range = RangeRequest.builder()\n+                                .batchHint(limit)\n+                                .startRowInclusive(nextRowName)\n+                                .build();\n+                        return validateAndGetNextRowName(table, limit, t1, t2, range);\n+                    }));\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         }\n", "next_change": {"commit": "249de1a6f3e21eb3907451eb232d96066f659194", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex df8e5c06fe..9a20f10247 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -138,18 +138,13 @@ public class KeyValueServiceValidator {\n         }\n     }\n \n-    private byte[] validateAndGetNextRowName(TableReference table,\n-                                             int limit,\n-                                             Transaction t1,\n-                                             Transaction t2,\n-                                             RangeRequest range) {\n-        BatchingVisitableView<RowResult<byte[]>> bv1 =\n-                BatchingVisitableView.of(t1.getRange(table, range));\n+    private byte[] validateAndGetNextRowName(\n+            TableReference table, int limit, Transaction t1, Transaction t2, RangeRequest range) {\n+        BatchingVisitableView<RowResult<byte[]>> bv1 = BatchingVisitableView.of(t1.getRange(table, range));\n         List<RowResult<byte[]>> rrs1 = bv1.limit(limit).immutableCopy();\n         Map<Cell, byte[]> cells1 = Cells.convertRowResultsToCells(rrs1);\n \n-        BatchingVisitableView<RowResult<byte[]>> bv2 =\n-                BatchingVisitableView.of(t2.getRange(table, range));\n+        BatchingVisitableView<RowResult<byte[]>> bv2 = BatchingVisitableView.of(t2.getRange(table, range));\n         List<RowResult<byte[]>> rrs2 = bv2.limit(limit).immutableCopy();\n         Map<Cell, byte[]> cells2 = Cells.convertRowResultsToCells(rrs2);\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "820f68579096f9617742cc3c3e713161f81965f8", "message": "Merge commit", "committedDate": null}, {"oid": "249de1a6f3e21eb3907451eb232d96066f659194", "committedDate": "2020-10-20 12:04:30 +0000", "message": "Upgrade gradle-baseline (#5044)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyMTkyOA==", "url": "https://github.com/palantir/atlasdb/pull/4681#discussion_r399221928", "body": "This change means that with default batch size, we'll do a transaction each 100 rows, so it will be probably quite slow, but probably fine.", "bodyText": "This change means that with default batch size, we'll do a transaction each 100 rows, so it will be probably quite slow, but probably fine.", "bodyHTML": "<p dir=\"auto\">This change means that with default batch size, we'll do a transaction each 100 rows, so it will be probably quite slow, but probably fine.</p>", "author": "jkozlowski", "createdAt": "2020-03-27T12:14:32Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "diffHunk": "@@ -114,31 +113,27 @@ private void validateTables(Set<TableReference> tables) {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationFromTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t1 -> {\n-                    validateTable(table, limit, t1);\n-                    return null;\n-                });\n+        byte[] nextRowName = new byte[0];\n+        while (nextRowName != null) {\n+            nextRowName = validateNextRow(table, limit, nextRowName);\n+        }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private void validateTable(final TableReference table, final int limit, final Transaction t1) {\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationToTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t2 -> {\n-                    validateTable(table, limit, t1, t2);\n-                    return null;\n-                });\n-    }\n-\n-    private void validateTable(TableReference table, int limit, Transaction t1, Transaction t2) {\n-        RangeRequest.Builder builder = RangeRequest.builder().batchHint(limit);\n-        byte[] nextRowName = new byte[0];\n-        while (nextRowName != null) {\n-            RangeRequest range = builder.startRowInclusive(nextRowName).build();\n-            nextRowName = validateAndGetNextRowName(table, limit, t1, t2, range);\n+    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+        try {\n+            return validationFromTransactionManager.runTaskWithRetry(t1 ->", "originalCommit": "5a2bd102d0a0d52ea3b89322ddba5b711540379c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MzE1Mw==", "url": "https://github.com/palantir/atlasdb/pull/4681#discussion_r453583153", "bodyText": "This should be fine, most people override this anyway. And it's run with embedded timelock usually, so overhead should be minimal.", "author": "jkozlowski", "createdAt": "2020-07-13T11:28:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyMTkyOA=="}], "type": "inlineReview", "revised_code": {"commit": "e70c3ee59c22b657103541ee8ce8965293e463c3", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 172239ce69..1854ea90e4 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -123,6 +125,8 @@ public class KeyValueServiceValidator {\n \n     private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n         try {\n+            // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n+            // not using retries as each attempt could take up to 8 hours\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n                                 RangeRequest range = RangeRequest.builder()\n", "next_change": {"commit": "cc8a6d29c2b44d2811cb66cb17748a9d79364692", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 1854ea90e4..1839959b38 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -114,19 +114,17 @@ public class KeyValueServiceValidator {\n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n         // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        // not using retries as each attempt could take up to 8 hours\n         byte[] nextRowName = new byte[0];\n         while (nextRowName != null) {\n-            nextRowName = validateNextRow(table, limit, nextRowName);\n+            nextRowName = validateNextBatchOfRows(table, limit, nextRowName);\n         }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+    private byte[] validateNextBatchOfRows(TableReference table, int limit, byte[] nextRowName) {\n         try {\n             // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-            // not using retries as each attempt could take up to 8 hours\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n                                 RangeRequest range = RangeRequest.builder()\n", "next_change": {"commit": "9d475c773e5b6a149d9c3c3ab687abcc004ca796", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 1839959b38..df8e5c06fe 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -127,13 +127,12 @@ public class KeyValueServiceValidator {\n             // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n-                                RangeRequest range = RangeRequest.builder()\n-                                        .batchHint(limit)\n-                                        .startRowInclusive(nextRowName)\n-                                        .build();\n-                                return validateAndGetNextRowName(table, limit, t1, t2, range);\n-                            }\n-                    ));\n+                        RangeRequest range = RangeRequest.builder()\n+                                .batchHint(limit)\n+                                .startRowInclusive(nextRowName)\n+                                .build();\n+                        return validateAndGetNextRowName(table, limit, t1, t2, range);\n+                    }));\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "820f68579096f9617742cc3c3e713161f81965f8", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 172239ce69..df8e5c06fe 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -113,25 +113,26 @@ public class KeyValueServiceValidator {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n+        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n         byte[] nextRowName = new byte[0];\n         while (nextRowName != null) {\n-            nextRowName = validateNextRow(table, limit, nextRowName);\n+            nextRowName = validateNextBatchOfRows(table, limit, nextRowName);\n         }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+    private byte[] validateNextBatchOfRows(TableReference table, int limit, byte[] nextRowName) {\n         try {\n+            // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n-                                RangeRequest range = RangeRequest.builder()\n-                                        .batchHint(limit)\n-                                        .startRowInclusive(nextRowName)\n-                                        .build();\n-                                return validateAndGetNextRowName(table, limit, t1, t2, range);\n-                            }\n-                    ));\n+                        RangeRequest range = RangeRequest.builder()\n+                                .batchHint(limit)\n+                                .startRowInclusive(nextRowName)\n+                                .build();\n+                        return validateAndGetNextRowName(table, limit, t1, t2, range);\n+                    }));\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         }\n", "next_change": {"commit": "249de1a6f3e21eb3907451eb232d96066f659194", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex df8e5c06fe..9a20f10247 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -138,18 +138,13 @@ public class KeyValueServiceValidator {\n         }\n     }\n \n-    private byte[] validateAndGetNextRowName(TableReference table,\n-                                             int limit,\n-                                             Transaction t1,\n-                                             Transaction t2,\n-                                             RangeRequest range) {\n-        BatchingVisitableView<RowResult<byte[]>> bv1 =\n-                BatchingVisitableView.of(t1.getRange(table, range));\n+    private byte[] validateAndGetNextRowName(\n+            TableReference table, int limit, Transaction t1, Transaction t2, RangeRequest range) {\n+        BatchingVisitableView<RowResult<byte[]>> bv1 = BatchingVisitableView.of(t1.getRange(table, range));\n         List<RowResult<byte[]>> rrs1 = bv1.limit(limit).immutableCopy();\n         Map<Cell, byte[]> cells1 = Cells.convertRowResultsToCells(rrs1);\n \n-        BatchingVisitableView<RowResult<byte[]>> bv2 =\n-                BatchingVisitableView.of(t2.getRange(table, range));\n+        BatchingVisitableView<RowResult<byte[]>> bv2 = BatchingVisitableView.of(t2.getRange(table, range));\n         List<RowResult<byte[]>> rrs2 = bv2.limit(limit).immutableCopy();\n         Map<Cell, byte[]> cells2 = Cells.convertRowResultsToCells(rrs2);\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "820f68579096f9617742cc3c3e713161f81965f8", "message": "Merge commit", "committedDate": null}, {"oid": "249de1a6f3e21eb3907451eb232d96066f659194", "committedDate": "2020-10-20 12:04:30 +0000", "message": "Upgrade gradle-baseline (#5044)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxOTY4OQ==", "url": "https://github.com/palantir/atlasdb/pull/4681#discussion_r399219689", "body": "Please retain the comment on why this is runTaskWithRetry: it's non-obvious.", "bodyText": "Please retain the comment on why this is runTaskWithRetry: it's non-obvious.", "bodyHTML": "<p dir=\"auto\">Please retain the comment on why this is runTaskWithRetry: it's non-obvious.</p>", "author": "jeremyk-91", "createdAt": "2020-03-27T12:10:01Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "diffHunk": "@@ -114,31 +113,27 @@ private void validateTables(Set<TableReference> tables) {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationFromTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t1 -> {\n-                    validateTable(table, limit, t1);\n-                    return null;\n-                });\n+        byte[] nextRowName = new byte[0];\n+        while (nextRowName != null) {\n+            nextRowName = validateNextRow(table, limit, nextRowName);\n+        }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private void validateTable(final TableReference table, final int limit, final Transaction t1) {\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationToTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t2 -> {\n-                    validateTable(table, limit, t1, t2);\n-                    return null;\n-                });\n-    }\n-\n-    private void validateTable(TableReference table, int limit, Transaction t1, Transaction t2) {\n-        RangeRequest.Builder builder = RangeRequest.builder().batchHint(limit);\n-        byte[] nextRowName = new byte[0];\n-        while (nextRowName != null) {\n-            RangeRequest range = builder.startRowInclusive(nextRowName).build();\n-            nextRowName = validateAndGetNextRowName(table, limit, t1, t2, range);\n+    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+        try {\n+            return validationFromTransactionManager.runTaskWithRetry(t1 ->", "originalCommit": "5a2bd102d0a0d52ea3b89322ddba5b711540379c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e70c3ee59c22b657103541ee8ce8965293e463c3", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 172239ce69..1854ea90e4 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -123,6 +125,8 @@ public class KeyValueServiceValidator {\n \n     private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n         try {\n+            // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n+            // not using retries as each attempt could take up to 8 hours\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n                                 RangeRequest range = RangeRequest.builder()\n", "next_change": {"commit": "cc8a6d29c2b44d2811cb66cb17748a9d79364692", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 1854ea90e4..1839959b38 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -114,19 +114,17 @@ public class KeyValueServiceValidator {\n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n         // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        // not using retries as each attempt could take up to 8 hours\n         byte[] nextRowName = new byte[0];\n         while (nextRowName != null) {\n-            nextRowName = validateNextRow(table, limit, nextRowName);\n+            nextRowName = validateNextBatchOfRows(table, limit, nextRowName);\n         }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+    private byte[] validateNextBatchOfRows(TableReference table, int limit, byte[] nextRowName) {\n         try {\n             // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-            // not using retries as each attempt could take up to 8 hours\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n                                 RangeRequest range = RangeRequest.builder()\n", "next_change": {"commit": "9d475c773e5b6a149d9c3c3ab687abcc004ca796", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 1839959b38..df8e5c06fe 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -127,13 +127,12 @@ public class KeyValueServiceValidator {\n             // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n-                                RangeRequest range = RangeRequest.builder()\n-                                        .batchHint(limit)\n-                                        .startRowInclusive(nextRowName)\n-                                        .build();\n-                                return validateAndGetNextRowName(table, limit, t1, t2, range);\n-                            }\n-                    ));\n+                        RangeRequest range = RangeRequest.builder()\n+                                .batchHint(limit)\n+                                .startRowInclusive(nextRowName)\n+                                .build();\n+                        return validateAndGetNextRowName(table, limit, t1, t2, range);\n+                    }));\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "820f68579096f9617742cc3c3e713161f81965f8", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 172239ce69..df8e5c06fe 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -113,25 +113,26 @@ public class KeyValueServiceValidator {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n+        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n         byte[] nextRowName = new byte[0];\n         while (nextRowName != null) {\n-            nextRowName = validateNextRow(table, limit, nextRowName);\n+            nextRowName = validateNextBatchOfRows(table, limit, nextRowName);\n         }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+    private byte[] validateNextBatchOfRows(TableReference table, int limit, byte[] nextRowName) {\n         try {\n+            // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n-                                RangeRequest range = RangeRequest.builder()\n-                                        .batchHint(limit)\n-                                        .startRowInclusive(nextRowName)\n-                                        .build();\n-                                return validateAndGetNextRowName(table, limit, t1, t2, range);\n-                            }\n-                    ));\n+                        RangeRequest range = RangeRequest.builder()\n+                                .batchHint(limit)\n+                                .startRowInclusive(nextRowName)\n+                                .build();\n+                        return validateAndGetNextRowName(table, limit, t1, t2, range);\n+                    }));\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         }\n", "next_change": {"commit": "249de1a6f3e21eb3907451eb232d96066f659194", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex df8e5c06fe..9a20f10247 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -138,18 +138,13 @@ public class KeyValueServiceValidator {\n         }\n     }\n \n-    private byte[] validateAndGetNextRowName(TableReference table,\n-                                             int limit,\n-                                             Transaction t1,\n-                                             Transaction t2,\n-                                             RangeRequest range) {\n-        BatchingVisitableView<RowResult<byte[]>> bv1 =\n-                BatchingVisitableView.of(t1.getRange(table, range));\n+    private byte[] validateAndGetNextRowName(\n+            TableReference table, int limit, Transaction t1, Transaction t2, RangeRequest range) {\n+        BatchingVisitableView<RowResult<byte[]>> bv1 = BatchingVisitableView.of(t1.getRange(table, range));\n         List<RowResult<byte[]>> rrs1 = bv1.limit(limit).immutableCopy();\n         Map<Cell, byte[]> cells1 = Cells.convertRowResultsToCells(rrs1);\n \n-        BatchingVisitableView<RowResult<byte[]>> bv2 =\n-                BatchingVisitableView.of(t2.getRange(table, range));\n+        BatchingVisitableView<RowResult<byte[]>> bv2 = BatchingVisitableView.of(t2.getRange(table, range));\n         List<RowResult<byte[]>> rrs2 = bv2.limit(limit).immutableCopy();\n         Map<Cell, byte[]> cells2 = Cells.convertRowResultsToCells(rrs2);\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "820f68579096f9617742cc3c3e713161f81965f8", "message": "Merge commit", "committedDate": null}, {"oid": "249de1a6f3e21eb3907451eb232d96066f659194", "committedDate": "2020-10-20 12:04:30 +0000", "message": "Upgrade gradle-baseline (#5044)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxOTg5NQ==", "url": "https://github.com/palantir/atlasdb/pull/4681#discussion_r399219895", "body": "nit: `validateNextBatchOfRows` / `startRow` for the param?", "bodyText": "nit: validateNextBatchOfRows / startRow for the param?", "bodyHTML": "<p dir=\"auto\">nit: <code>validateNextBatchOfRows</code> / <code>startRow</code> for the param?</p>", "author": "jeremyk-91", "createdAt": "2020-03-27T12:10:26Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "diffHunk": "@@ -114,31 +113,27 @@ private void validateTables(Set<TableReference> tables) {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationFromTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t1 -> {\n-                    validateTable(table, limit, t1);\n-                    return null;\n-                });\n+        byte[] nextRowName = new byte[0];\n+        while (nextRowName != null) {\n+            nextRowName = validateNextRow(table, limit, nextRowName);\n+        }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private void validateTable(final TableReference table, final int limit, final Transaction t1) {\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationToTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t2 -> {\n-                    validateTable(table, limit, t1, t2);\n-                    return null;\n-                });\n-    }\n-\n-    private void validateTable(TableReference table, int limit, Transaction t1, Transaction t2) {\n-        RangeRequest.Builder builder = RangeRequest.builder().batchHint(limit);\n-        byte[] nextRowName = new byte[0];\n-        while (nextRowName != null) {\n-            RangeRequest range = builder.startRowInclusive(nextRowName).build();\n-            nextRowName = validateAndGetNextRowName(table, limit, t1, t2, range);\n+    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {", "originalCommit": "5a2bd102d0a0d52ea3b89322ddba5b711540379c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e70c3ee59c22b657103541ee8ce8965293e463c3", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 172239ce69..1854ea90e4 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -123,6 +125,8 @@ public class KeyValueServiceValidator {\n \n     private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n         try {\n+            // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n+            // not using retries as each attempt could take up to 8 hours\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n                                 RangeRequest range = RangeRequest.builder()\n", "next_change": {"commit": "cc8a6d29c2b44d2811cb66cb17748a9d79364692", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 1854ea90e4..1839959b38 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -114,19 +114,17 @@ public class KeyValueServiceValidator {\n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n         // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        // not using retries as each attempt could take up to 8 hours\n         byte[] nextRowName = new byte[0];\n         while (nextRowName != null) {\n-            nextRowName = validateNextRow(table, limit, nextRowName);\n+            nextRowName = validateNextBatchOfRows(table, limit, nextRowName);\n         }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+    private byte[] validateNextBatchOfRows(TableReference table, int limit, byte[] nextRowName) {\n         try {\n             // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-            // not using retries as each attempt could take up to 8 hours\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n                                 RangeRequest range = RangeRequest.builder()\n", "next_change": {"commit": "9d475c773e5b6a149d9c3c3ab687abcc004ca796", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 1839959b38..df8e5c06fe 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -127,13 +127,12 @@ public class KeyValueServiceValidator {\n             // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n-                                RangeRequest range = RangeRequest.builder()\n-                                        .batchHint(limit)\n-                                        .startRowInclusive(nextRowName)\n-                                        .build();\n-                                return validateAndGetNextRowName(table, limit, t1, t2, range);\n-                            }\n-                    ));\n+                        RangeRequest range = RangeRequest.builder()\n+                                .batchHint(limit)\n+                                .startRowInclusive(nextRowName)\n+                                .build();\n+                        return validateAndGetNextRowName(table, limit, t1, t2, range);\n+                    }));\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "820f68579096f9617742cc3c3e713161f81965f8", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex 172239ce69..df8e5c06fe 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -113,25 +113,26 @@ public class KeyValueServiceValidator {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n+        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n         byte[] nextRowName = new byte[0];\n         while (nextRowName != null) {\n-            nextRowName = validateNextRow(table, limit, nextRowName);\n+            nextRowName = validateNextBatchOfRows(table, limit, nextRowName);\n         }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+    private byte[] validateNextBatchOfRows(TableReference table, int limit, byte[] nextRowName) {\n         try {\n+            // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n             return validationFromTransactionManager.runTaskWithRetry(t1 ->\n                     validationToTransactionManager.runTaskWithRetry(t2 -> {\n-                                RangeRequest range = RangeRequest.builder()\n-                                        .batchHint(limit)\n-                                        .startRowInclusive(nextRowName)\n-                                        .build();\n-                                return validateAndGetNextRowName(table, limit, t1, t2, range);\n-                            }\n-                    ));\n+                        RangeRequest range = RangeRequest.builder()\n+                                .batchHint(limit)\n+                                .startRowInclusive(nextRowName)\n+                                .build();\n+                        return validateAndGetNextRowName(table, limit, t1, t2, range);\n+                    }));\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         }\n", "next_change": {"commit": "249de1a6f3e21eb3907451eb232d96066f659194", "changed_code": [{"header": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\nindex df8e5c06fe..9a20f10247 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java\n", "chunk": "@@ -138,18 +138,13 @@ public class KeyValueServiceValidator {\n         }\n     }\n \n-    private byte[] validateAndGetNextRowName(TableReference table,\n-                                             int limit,\n-                                             Transaction t1,\n-                                             Transaction t2,\n-                                             RangeRequest range) {\n-        BatchingVisitableView<RowResult<byte[]>> bv1 =\n-                BatchingVisitableView.of(t1.getRange(table, range));\n+    private byte[] validateAndGetNextRowName(\n+            TableReference table, int limit, Transaction t1, Transaction t2, RangeRequest range) {\n+        BatchingVisitableView<RowResult<byte[]>> bv1 = BatchingVisitableView.of(t1.getRange(table, range));\n         List<RowResult<byte[]>> rrs1 = bv1.limit(limit).immutableCopy();\n         Map<Cell, byte[]> cells1 = Cells.convertRowResultsToCells(rrs1);\n \n-        BatchingVisitableView<RowResult<byte[]>> bv2 =\n-                BatchingVisitableView.of(t2.getRange(table, range));\n+        BatchingVisitableView<RowResult<byte[]>> bv2 = BatchingVisitableView.of(t2.getRange(table, range));\n         List<RowResult<byte[]>> rrs2 = bv2.limit(limit).immutableCopy();\n         Map<Cell, byte[]> cells2 = Cells.convertRowResultsToCells(rrs2);\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "820f68579096f9617742cc3c3e713161f81965f8", "message": "Merge commit", "committedDate": null}, {"oid": "249de1a6f3e21eb3907451eb232d96066f659194", "committedDate": "2020-10-20 12:04:30 +0000", "message": "Upgrade gradle-baseline (#5044)"}]}, {"oid": "e70c3ee59c22b657103541ee8ce8965293e463c3", "url": "https://github.com/palantir/atlasdb/commit/e70c3ee59c22b657103541ee8ce8965293e463c3", "message": "Merge branch 'develop' into validateManyTxns\n\n# Conflicts:\n#\tatlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "committedDate": "2020-07-13T11:43:59Z", "type": "commit"}, {"oid": "cc8a6d29c2b44d2811cb66cb17748a9d79364692", "url": "https://github.com/palantir/atlasdb/commit/cc8a6d29c2b44d2811cb66cb17748a9d79364692", "message": "merge in develop and action comments", "committedDate": "2020-07-13T11:45:30Z", "type": "commit"}, {"oid": "c3124b9608a3bf8b8cbed9acd304b133e330e543", "url": "https://github.com/palantir/atlasdb/commit/c3124b9608a3bf8b8cbed9acd304b133e330e543", "message": "Merge branch 'develop' into validateManyTxns", "committedDate": "2020-07-20T10:23:45Z", "type": "commit"}, {"oid": "9d475c773e5b6a149d9c3c3ab687abcc004ca796", "url": "https://github.com/palantir/atlasdb/commit/9d475c773e5b6a149d9c3c3ab687abcc004ca796", "message": "fix checkstyle", "committedDate": "2020-07-28T11:55:23Z", "type": "commit"}]}