{"pr_number": 4982, "pr_title": "[Part 1] | TimeLock shoots itself", "pr_author": "sudiksha27", "pr_createdAt": "2020-09-11T08:43:53Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4982", "timeline": [{"oid": "e07b9b94caca037fa334253bd6ff133f699f72e7", "url": "https://github.com/palantir/atlasdb/commit/e07b9b94caca037fa334253bd6ff133f699f72e7", "message": "TimeLock corruption pingers", "committedDate": "2020-09-11T08:33:45Z", "type": "commit"}, {"oid": "2d78ed07f04634f96c6d6fa1911a920d02b3d468", "url": "https://github.com/palantir/atlasdb/commit/2d78ed07f04634f96c6d6fa1911a920d02b3d468", "message": "Refactor", "committedDate": "2020-09-11T08:51:59Z", "type": "commit"}, {"oid": "84d91e82e6c27d1cd405ff18d46b2c4afd70e839", "url": "https://github.com/palantir/atlasdb/commit/84d91e82e6c27d1cd405ff18d46b2c4afd70e839", "message": "Redesign", "committedDate": "2020-09-13T21:25:23Z", "type": "commit"}, {"oid": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933", "url": "https://github.com/palantir/atlasdb/commit/a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933", "message": "Refactor", "committedDate": "2020-09-14T20:29:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4MTQ5OQ==", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488581499", "body": "```suggestion\r\n        return corruptionDetectors.stream().noneMatch(CorruptionDetector::hasDetectedCorruption);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return !(corruptionDetectors.stream().anyMatch(detector -> detector.hasDetectedCorruption()));\n          \n          \n            \n                    return corruptionDetectors.stream().noneMatch(CorruptionDetector::hasDetectedCorruption);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-k x x-first\">!</span><span class=\"x x-last\">(</span>corruptionDetectors<span class=\"pl-k\">.</span>stream()<span class=\"pl-k\">.</span><span class=\"x x-first\">anyMatch(detector </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x\"> detector</span><span class=\"pl-k x x-last\">.</span>hasDetectedCorruption<span class=\"x x-first x-last\">())</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> corruptionDetectors<span class=\"pl-k\">.</span>stream()<span class=\"pl-k\">.</span><span class=\"x x-first\">noneMatch(</span><span class=\"pl-smi x\">CorruptionDetector</span><span class=\"pl-k x x-last\">::</span>hasDetectedCorruption);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gmaretic", "createdAt": "2020-09-15T11:10:17Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockCorruptionHealthCheck.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.util.List;\n+\n+public class TimeLockCorruptionHealthCheck {\n+    private final List<CorruptionDetector> corruptionDetectors;\n+\n+    public TimeLockCorruptionHealthCheck(List<CorruptionDetector> corruptionDetectors) {\n+        this.corruptionDetectors = corruptionDetectors;\n+    }\n+\n+    public boolean isHealthy() {\n+        return !(corruptionDetectors.stream().anyMatch(detector -> detector.hasDetectedCorruption()));", "originalCommit": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4MjYxMg==", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488582612", "body": "```suggestion\r\n    private final boolean hasCorruption;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean hasCorruption;\n          \n          \n            \n                private final boolean hasCorruption;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">boolean</span> hasCorruption;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-k\">boolean</span> hasCorruption;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gmaretic", "createdAt": "2020-09-15T11:12:34Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockCorruptionStatus.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+public enum TimeLockCorruptionStatus {\n+    HEALTHY(false),\n+    CORRUPTION(true);\n+\n+    private boolean hasCorruption;", "originalCommit": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4Mjg1Ng==", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488582856", "body": "```suggestion\r\n    private volatile TimeLockCorruptionStatus localCorruptionState = TimeLockCorruptionStatus.HEALTHY;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private TimeLockCorruptionStatus localCorruptionState = TimeLockCorruptionStatus.HEALTHY;\n          \n          \n            \n                private volatile TimeLockCorruptionStatus localCorruptionState = TimeLockCorruptionStatus.HEALTHY;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">TimeLockCorruptionStatus</span> localCorruptionState <span class=\"pl-k\">=</span> <span class=\"pl-smi\">TimeLockCorruptionStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>HEALTHY</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k x x-first\">volatile</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">TimeLockCorruptionStatus</span> localCorruptionState <span class=\"pl-k\">=</span> <span class=\"pl-smi\">TimeLockCorruptionStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>HEALTHY</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gmaretic", "createdAt": "2020-09-15T11:13:05Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockLocalCorruptionDetector.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.common.concurrent.NamedThreadFactory;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.timelock.corruption.TimeLockCorruptionPinger;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class TimeLockLocalCorruptionDetector implements CorruptionDetector {\n+    private static final Logger log = LoggerFactory.getLogger(\n+            TimeLockLocalCorruptionDetector.class);\n+\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    private static final Duration TIMELOCK_CORRUPTION_ANALYSIS_INTERVAL = Duration.ofMinutes(5);\n+    private static final String CORRUPTION_DETECTOR_THREAD_PREFIX = \"timelock-corruption-detector\";\n+\n+    private final ScheduledExecutorService executor = PTExecutors.newSingleThreadScheduledExecutor(\n+            new NamedThreadFactory(CORRUPTION_DETECTOR_THREAD_PREFIX, true));\n+    private final List<TimeLockCorruptionPinger> corruptionPingers;\n+\n+    private TimeLockCorruptionStatus localCorruptionState = TimeLockCorruptionStatus.HEALTHY;", "originalCommit": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4NTM1MQ==", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488585351", "body": "Depends on what this task exactly does, but would be nice if we could avoid checking every 5 minutes and detect corruption as part of normal operation", "bodyText": "Depends on what this task exactly does, but would be nice if we could avoid checking every 5 minutes and detect corruption as part of normal operation", "bodyHTML": "<p dir=\"auto\">Depends on what this task exactly does, but would be nice if we could avoid checking every 5 minutes and detect corruption as part of normal operation</p>", "author": "gmaretic", "createdAt": "2020-09-15T11:17:41Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockLocalCorruptionDetector.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.common.concurrent.NamedThreadFactory;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.timelock.corruption.TimeLockCorruptionPinger;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class TimeLockLocalCorruptionDetector implements CorruptionDetector {\n+    private static final Logger log = LoggerFactory.getLogger(\n+            TimeLockLocalCorruptionDetector.class);\n+\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    private static final Duration TIMELOCK_CORRUPTION_ANALYSIS_INTERVAL = Duration.ofMinutes(5);\n+    private static final String CORRUPTION_DETECTOR_THREAD_PREFIX = \"timelock-corruption-detector\";\n+\n+    private final ScheduledExecutorService executor = PTExecutors.newSingleThreadScheduledExecutor(\n+            new NamedThreadFactory(CORRUPTION_DETECTOR_THREAD_PREFIX, true));\n+    private final List<TimeLockCorruptionPinger> corruptionPingers;\n+\n+    private TimeLockCorruptionStatus localCorruptionState = TimeLockCorruptionStatus.HEALTHY;\n+\n+    public static TimeLockLocalCorruptionDetector create(List<TimeLockCorruptionPinger> corruptionPingers) {\n+        TimeLockLocalCorruptionDetector timeLockLocalCorruptionDetector\n+                = new TimeLockLocalCorruptionDetector(corruptionPingers);\n+\n+//        TODO(snanda) - uncomment when TL corruption detection goes live\n+//        timeLockLocalCorruptionDetector.scheduleWithFixedDelay();\n+        return timeLockLocalCorruptionDetector;\n+    }\n+\n+    private TimeLockLocalCorruptionDetector(List<TimeLockCorruptionPinger> corruptionPingers) {\n+        this.corruptionPingers = corruptionPingers;\n+    }\n+\n+    private void scheduleWithFixedDelay() {\n+        executor.scheduleWithFixedDelay(() -> {\n+                    if (detectedSignsOfCorruption()) {", "originalCommit": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4NTk1OA==", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488585958", "body": "We will retry in 5 minutes I guess, but maybe we should retry sooner here", "bodyText": "We will retry in 5 minutes I guess, but maybe we should retry sooner here", "bodyHTML": "<p dir=\"auto\">We will retry in 5 minutes I guess, but maybe we should retry sooner here</p>", "author": "gmaretic", "createdAt": "2020-09-15T11:18:44Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockLocalCorruptionDetector.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.common.concurrent.NamedThreadFactory;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.timelock.corruption.TimeLockCorruptionPinger;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class TimeLockLocalCorruptionDetector implements CorruptionDetector {\n+    private static final Logger log = LoggerFactory.getLogger(\n+            TimeLockLocalCorruptionDetector.class);\n+\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    private static final Duration TIMELOCK_CORRUPTION_ANALYSIS_INTERVAL = Duration.ofMinutes(5);\n+    private static final String CORRUPTION_DETECTOR_THREAD_PREFIX = \"timelock-corruption-detector\";\n+\n+    private final ScheduledExecutorService executor = PTExecutors.newSingleThreadScheduledExecutor(\n+            new NamedThreadFactory(CORRUPTION_DETECTOR_THREAD_PREFIX, true));\n+    private final List<TimeLockCorruptionPinger> corruptionPingers;\n+\n+    private TimeLockCorruptionStatus localCorruptionState = TimeLockCorruptionStatus.HEALTHY;\n+\n+    public static TimeLockLocalCorruptionDetector create(List<TimeLockCorruptionPinger> corruptionPingers) {\n+        TimeLockLocalCorruptionDetector timeLockLocalCorruptionDetector\n+                = new TimeLockLocalCorruptionDetector(corruptionPingers);\n+\n+//        TODO(snanda) - uncomment when TL corruption detection goes live\n+//        timeLockLocalCorruptionDetector.scheduleWithFixedDelay();\n+        return timeLockLocalCorruptionDetector;\n+    }\n+\n+    private TimeLockLocalCorruptionDetector(List<TimeLockCorruptionPinger> corruptionPingers) {\n+        this.corruptionPingers = corruptionPingers;\n+    }\n+\n+    private void scheduleWithFixedDelay() {\n+        executor.scheduleWithFixedDelay(() -> {\n+                    if (detectedSignsOfCorruption()) {\n+                        killTimeLock();\n+                    }\n+                },\n+                TIMELOCK_CORRUPTION_ANALYSIS_INTERVAL.getSeconds(),\n+                TIMELOCK_CORRUPTION_ANALYSIS_INTERVAL.getSeconds(),\n+                TimeUnit.SECONDS);\n+    }\n+\n+    private void killTimeLock() {\n+        corruptionPingers.forEach(this::reportCorruptionToRemote);\n+        localDetectedCorruption();\n+    }\n+\n+    private void localDetectedCorruption() {\n+        localCorruptionState = TimeLockCorruptionStatus.CORRUPTION;\n+    }\n+\n+    private void reportCorruptionToRemote(TimeLockCorruptionPinger pinger) {\n+        try {\n+            pinger.corruptionDetected(AUTH_HEADER);\n+        } catch (Exception e) {\n+            log.warn(\"Failed to report corruption to remote.\", e);", "originalCommit": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "35d6ff4abf1ee82a3a2b99ea3835f08964acba89", "url": "https://github.com/palantir/atlasdb/commit/35d6ff4abf1ee82a3a2b99ea3835f08964acba89", "message": "Address comments - 1", "committedDate": "2020-09-15T12:38:56Z", "type": "commit"}, {"oid": "285139c428f6e70f057608e4ba33069d43fc02eb", "url": "https://github.com/palantir/atlasdb/commit/285139c428f6e70f057608e4ba33069d43fc02eb", "message": "Parallel notification", "committedDate": "2020-09-15T12:56:32Z", "type": "commit"}, {"oid": "8d5f6eeee769214e9dc3fe3853c4abc280cb5d11", "url": "https://github.com/palantir/atlasdb/commit/8d5f6eeee769214e9dc3fe3853c4abc280cb5d11", "message": "Volatile state", "committedDate": "2020-09-15T12:59:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2NTcwMw==", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488665703", "body": "```suggestion\r\n        corruptionNotifiers.forEach(this::reportCorruptionToRemote);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    corruptionNotifiers.forEach(this::submitTask);\n          \n          \n            \n                    corruptionNotifiers.forEach(this::reportCorruptionToRemote);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        corruptionNotifiers<span class=\"pl-k\">.</span>forEach(<span class=\"pl-c1\">this</span><span class=\"pl-k\">::</span><span class=\"x x-first x-last\">submitTask</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        corruptionNotifiers<span class=\"pl-k\">.</span>forEach(<span class=\"pl-c1\">this</span><span class=\"pl-k\">::</span><span class=\"x x-first x-last\">reportCorruptionToRemote</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gmaretic", "createdAt": "2020-09-15T13:26:55Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/LocalCorruptionHandler.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.rholder.retry.RetryException;\n+import com.github.rholder.retry.Retryer;\n+import com.github.rholder.retry.StopStrategies;\n+import com.github.rholder.retry.WaitStrategies;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.timelock.corruption.TimeLockCorruptionNotifier;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class LocalCorruptionHandler {\n+    private static final Logger log = LoggerFactory.getLogger(\n+            LocalCorruptionHandler.class);\n+\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    private final List<TimeLockCorruptionNotifier> corruptionNotifiers;\n+    private final Retryer<Void> corruptionNotifyRetryer;\n+    private final ExecutorService executorService;\n+\n+    public LocalCorruptionHandler(\n+            List<TimeLockCorruptionNotifier> corruptionNotifiers) {\n+        this.corruptionNotifiers = corruptionNotifiers;\n+        this.executorService = PTExecutors.newFixedThreadPool(corruptionNotifiers.size());\n+        this.corruptionNotifyRetryer = new Retryer<>(StopStrategies.stopAfterAttempt(5),\n+                WaitStrategies.fixedWait(200, TimeUnit.MILLISECONDS),\n+                attempt -> !attempt.hasResult());\n+    }\n+\n+    public void notifyRemoteServersOfCorruption() {\n+        corruptionNotifiers.forEach(this::submitTask);", "originalCommit": "8d5f6eeee769214e9dc3fe3853c4abc280cb5d11", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2NTk5MA==", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488665990", "body": "This is a bit too resource intensive now, as we are always creating this executor service, even when no corruption happened (also you forgot to shut it down eventually).\r\nAlso there is no need to do this asynchronously at this point really, so just run it synchronously", "bodyText": "This is a bit too resource intensive now, as we are always creating this executor service, even when no corruption happened (also you forgot to shut it down eventually).\nAlso there is no need to do this asynchronously at this point really, so just run it synchronously", "bodyHTML": "<p dir=\"auto\">This is a bit too resource intensive now, as we are always creating this executor service, even when no corruption happened (also you forgot to shut it down eventually).<br>\nAlso there is no need to do this asynchronously at this point really, so just run it synchronously</p>", "author": "gmaretic", "createdAt": "2020-09-15T13:27:18Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/LocalCorruptionHandler.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.rholder.retry.RetryException;\n+import com.github.rholder.retry.Retryer;\n+import com.github.rholder.retry.StopStrategies;\n+import com.github.rholder.retry.WaitStrategies;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.timelock.corruption.TimeLockCorruptionNotifier;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class LocalCorruptionHandler {\n+    private static final Logger log = LoggerFactory.getLogger(\n+            LocalCorruptionHandler.class);\n+\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    private final List<TimeLockCorruptionNotifier> corruptionNotifiers;\n+    private final Retryer<Void> corruptionNotifyRetryer;\n+    private final ExecutorService executorService;\n+\n+    public LocalCorruptionHandler(\n+            List<TimeLockCorruptionNotifier> corruptionNotifiers) {\n+        this.corruptionNotifiers = corruptionNotifiers;\n+        this.executorService = PTExecutors.newFixedThreadPool(corruptionNotifiers.size());", "originalCommit": "8d5f6eeee769214e9dc3fe3853c4abc280cb5d11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2OTc0Mw==", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488669743", "bodyText": "Ah right, that makes sense.", "author": "sudiksha27", "createdAt": "2020-09-15T13:32:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2NTk5MA=="}], "type": "inlineReview"}, {"oid": "72465a9fdefb5abb5895cbb08109708933fcc5cb", "url": "https://github.com/palantir/atlasdb/commit/72465a9fdefb5abb5895cbb08109708933fcc5cb", "message": "Revert \"Parallel notification\"\n\nThis reverts commit 285139c428f6e70f057608e4ba33069d43fc02eb.", "committedDate": "2020-09-15T13:30:08Z", "type": "commit"}, {"oid": "2e537c2696c30eb6cf532f356364f02de88e7c6e", "url": "https://github.com/palantir/atlasdb/commit/2e537c2696c30eb6cf532f356364f02de88e7c6e", "message": "Do not kill", "committedDate": "2020-09-15T13:44:47Z", "type": "commit"}]}