{"pr_number": 1828, "pr_title": "[#1272] Implement new Device Connection API methods", "pr_createdAt": "2020-03-11T12:41:28Z", "pr_url": "https://github.com/eclipse/hono/pull/1828", "merge_commit": "2760ef2abea9015a4b0b4095effae3c67b24e79c", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NjExOA==", "url": "https://github.com/eclipse/hono/pull/1828#discussion_r390946118", "body": "final ?", "bodyText": "final ?", "bodyHTML": "<p dir=\"auto\">final ?</p>", "author": "sophokles73", "createdAt": "2020-03-11T12:48:52Z", "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Versioned.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceconnection.infinispan.client;\n+\n+/**\n+ * A versioned entry.\n+ * \n+ * @param <T> The payload type.\n+ */\n+public class Versioned<T> {", "originalCommit": "0f22270cce271059d9003e3d48adf421458d03bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66147524277f3efefad19f2c67040ae81b90b6ea", "changed_code": [{"header": "diff --git a/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Versioned.java b/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Versioned.java\nindex e3b1a24a1..7ff399c48 100644\n--- a/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Versioned.java\n+++ b/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Versioned.java\n", "chunk": "@@ -18,7 +18,7 @@ package org.eclipse.hono.deviceconnection.infinispan.client;\n  * \n  * @param <T> The payload type.\n  */\n-public class Versioned<T> {\n+public final class Versioned<T> {\n \n     private final long version;\n     private final T value;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NzI2OQ==", "url": "https://github.com/eclipse/hono/pull/1828#discussion_r390947269", "body": "Since the `HotrodCache` class uses a `org.infinispan.client.hotrod.RemoteCache` field now (instead of `org.infinispan.commons.api.BasicCache`), this mock had to be changed.\r\nUnfortunately, the `org.infinispan.client.hotrod.RemoteCache` has a dependency on the `infinispan-query-dsl` module (for the `retrieveEntriesByQuery` method) and without having that module integrated, creating the mock here will fail.\r\nTherefore I've added `infinispan-query-dsl` as a test-only dependency (CQ still needed for that). As alternative option, I only see removing this test class.", "bodyText": "Since the HotrodCache class uses a org.infinispan.client.hotrod.RemoteCache field now (instead of org.infinispan.commons.api.BasicCache), this mock had to be changed.\nUnfortunately, the org.infinispan.client.hotrod.RemoteCache has a dependency on the infinispan-query-dsl module (for the retrieveEntriesByQuery method) and without having that module integrated, creating the mock here will fail.\nTherefore I've added infinispan-query-dsl as a test-only dependency (CQ still needed for that). As alternative option, I only see removing this test class.", "bodyHTML": "<p dir=\"auto\">Since the <code>HotrodCache</code> class uses a <code>org.infinispan.client.hotrod.RemoteCache</code> field now (instead of <code>org.infinispan.commons.api.BasicCache</code>), this mock had to be changed.<br>\nUnfortunately, the <code>org.infinispan.client.hotrod.RemoteCache</code> has a dependency on the <code>infinispan-query-dsl</code> module (for the <code>retrieveEntriesByQuery</code> method) and without having that module integrated, creating the mock here will fail.<br>\nTherefore I've added <code>infinispan-query-dsl</code> as a test-only dependency (CQ still needed for that). As alternative option, I only see removing this test class.</p>", "author": "calohmn", "createdAt": "2020-03-11T12:50:56Z", "path": "client-device-connection-infinispan/src/test/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCacheTest.java", "diffHunk": "@@ -152,10 +161,149 @@ void testPutFails(final VertxTestContext ctx) {\n             }));\n     }\n \n-    private BasicCache<Object, Object> givenAConnectedCache() {\n+    /**\n+     * Verifies that a request to remove a cache entry with a version\n+     * results in the value being removed in the data grid.\n+     *\n+     * @param ctx The vert.x text context.\n+     */\n+    @Test\n+    void testRemoveWithVersionSucceeds(final VertxTestContext ctx) {\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> grid = givenAConnectedCache();\n+        when(grid.removeWithVersion(anyString(), anyLong())).thenReturn(true);\n+        cache.connect()\n+                .compose(c -> c.removeWithVersion(\"key\", 1L))\n+                .setHandler(ctx.succeeding(v -> {\n+                    ctx.verify(() -> {\n+                        verify(grid).removeWithVersion(\"key\", 1L);\n+                        assertThat(v).isTrue();\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a request to remove a cache entry with a version\n+     * fails with the root cause for the failure to access the data grid.\n+     *\n+     * @param ctx The vert.x text context.\n+     */\n+    @Test\n+    void testRemoveWithVersionFails(final VertxTestContext ctx) {\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> grid = givenAConnectedCache();\n+        when(grid.removeWithVersion(anyString(), anyLong())).thenThrow(new IllegalStateException());\n+        cache.connect()\n+                .compose(c -> c.removeWithVersion(\"key\", 1L))\n+                .setHandler(ctx.failing(t -> {\n+                    ctx.verify(() -> {\n+                        verify(grid).removeWithVersion(\"key\", 1L);\n+                        assertThat(t).isInstanceOf(IllegalStateException.class);\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a request to get a cache entry along with its version\n+     * results in the value being retrieved from the data grid.\n+     *\n+     * @param ctx The vert.x text context.\n+     */\n+    @Test\n+    void testGetWithVersionSucceeds(final VertxTestContext ctx) {\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> grid = givenAConnectedCache();\n+        @SuppressWarnings(\"unchecked\")\n+        final MetadataValue<Object> metadataValue = mock(MetadataValue.class);\n+        final Object value = \"testValue\";\n+        when(metadataValue.getValue()).thenReturn(value);\n+        final long version = 1L;\n+        when(metadataValue.getVersion()).thenReturn(version);\n+        when(grid.getWithMetadata(anyString())).thenReturn(metadataValue);\n+        cache.connect()\n+                .compose(c -> c.getWithVersion(\"key\"))\n+                .setHandler(ctx.succeeding(v -> {\n+                    ctx.verify(() -> {\n+                        verify(grid).getWithMetadata(\"key\");\n+                        assertThat(v.getVersion()).isEqualTo(version);\n+                        assertThat(v.getValue()).isEqualTo(value);\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a request to get a cache entry along with its version\n+     * fails with the root cause for the failure to access the data grid.\n+     *\n+     * @param ctx The vert.x text context.\n+     */\n+    @Test\n+    void testGetWithVersionFails(final VertxTestContext ctx) {\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> grid = givenAConnectedCache();\n+        when(grid.getWithMetadata(anyString())).thenThrow(new IllegalStateException());\n+        cache.connect()\n+                .compose(c -> c.getWithVersion(\"key\"))\n+                .setHandler(ctx.failing(t -> {\n+                    ctx.verify(() -> {\n+                        verify(grid).getWithMetadata(\"key\");\n+                        assertThat(t).isInstanceOf(IllegalStateException.class);\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a request to get a map of all cache entries with given keys\n+     * results in the map value being retrieved from the data grid.\n+     *\n+     * @param ctx The vert.x text context.\n+     */\n+    @Test\n+    void testGetAllSucceeds(final VertxTestContext ctx) {\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> grid = givenAConnectedCache();\n+        final Map<Object, Object> mapValue = new HashMap<>();\n+        when(grid.getAll(anySet())).thenReturn(mapValue);\n+        final Set<String> keys = Set.of(\"key\");\n+        cache.connect()\n+                .compose(c -> c.getAll(keys))\n+                .setHandler(ctx.succeeding(v -> {\n+                    ctx.verify(() -> {\n+                        verify(grid).getAll(keys);\n+                        assertThat(v).isEqualTo(mapValue);\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a request to get a map of all cache entries with given keys\n+     * fails with the root cause for the failure to access the data grid.\n+     *\n+     * @param ctx The vert.x text context.\n+     */\n+    @Test\n+    void testGetAllFails(final VertxTestContext ctx) {\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> grid = givenAConnectedCache();\n+        when(grid.getAll(anySet())).thenThrow(new IllegalStateException());\n+        final Set<String> keys = Set.of(\"key\");\n+        cache.connect()\n+                .compose(c -> c.getAll(keys))\n+                .setHandler(ctx.failing(t -> {\n+                    ctx.verify(() -> {\n+                        verify(grid).getAll(keys);\n+                        assertThat(t).isInstanceOf(IllegalStateException.class);\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    private org.infinispan.client.hotrod.RemoteCache<Object, Object> givenAConnectedCache() {\n+        final Configuration configuration = mock(Configuration.class);\n         @SuppressWarnings(\"unchecked\")\n-        final BasicCache<Object, Object> result = mock(BasicCache.class);\n-        when(remoteCacheManager.getCache(anyString())).thenReturn(result);\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> result = mock(org.infinispan.client.hotrod.RemoteCache.class);", "originalCommit": "0f22270cce271059d9003e3d48adf421458d03bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "66147524277f3efefad19f2c67040ae81b90b6ea", "url": "https://github.com/eclipse/hono/commit/66147524277f3efefad19f2c67040ae81b90b6ea", "message": "[#1272] Implement new Device Connection API methods.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-03-11T14:46:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1OTkxNg==", "url": "https://github.com/eclipse/hono/pull/1828#discussion_r391659916", "body": "the last known gateway id ?", "bodyText": "the last known gateway id ?", "bodyHTML": "<p dir=\"auto\">the last known gateway id ?</p>", "author": "sophokles73", "createdAt": "2020-03-12T14:29:16Z", "path": "services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java", "diffHunk": "@@ -139,4 +139,28 @@ public void testGetLastKnownGatewayForDeviceNotFound(final VertxTestContext ctx)\n             ctx.completeNow();\n         }));\n     }\n+\n+    /**\n+     * Verifies that the last known gateway id can be set via the <em>setCommandHandlingAdapterInstance</em> operation.", "originalCommit": "66147524277f3efefad19f2c67040ae81b90b6ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc5MDMwNQ==", "url": "https://github.com/eclipse/hono/pull/1828#discussion_r391790305", "bodyText": "Fixed.", "author": "calohmn", "createdAt": "2020-03-12T17:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1OTkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "48812c147d8ec2a2ade479217cf30df9aa96caf4", "changed_code": [{"header": "diff --git a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\nindex 1ed3fdb49..408f20575 100644\n--- a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n+++ b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n", "chunk": "@@ -141,7 +141,8 @@ public class RemoteCacheBasedDeviceConnectionServiceTest {\n     }\n \n     /**\n-     * Verifies that the last known gateway id can be set via the <em>setCommandHandlingAdapterInstance</em> operation.\n+     * Verifies that the <em>setCommandHandlingAdapterInstance</em> operation succeeds and invokes the\n+     * corresponding method on the {@link DeviceConnectionInfo} instance.\n      *\n      * @param ctx The vert.x context.\n      */\n", "next_change": null}]}, "revised_code_in_main": {"commit": "2760ef2abea9015a4b0b4095effae3c67b24e79c", "changed_code": [{"header": "diff --git a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\nindex 1ed3fdb49..408f20575 100644\n--- a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n+++ b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n", "chunk": "@@ -141,7 +141,8 @@ public class RemoteCacheBasedDeviceConnectionServiceTest {\n     }\n \n     /**\n-     * Verifies that the last known gateway id can be set via the <em>setCommandHandlingAdapterInstance</em> operation.\n+     * Verifies that the <em>setCommandHandlingAdapterInstance</em> operation succeeds and invokes the\n+     * corresponding method on the {@link DeviceConnectionInfo} instance.\n      *\n      * @param ctx The vert.x context.\n      */\n", "next_change": {"commit": "3dca60db2a92b7db1eb7ed9834674ab2b9690854", "changed_code": [{"header": "diff --git a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\nindex 408f20575..0c39762e6 100644\n--- a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n+++ b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n", "chunk": "@@ -151,15 +156,15 @@ public class RemoteCacheBasedDeviceConnectionServiceTest {\n \n         final String deviceId = \"testDevice\";\n         final String adapterInstanceId = \"adapterInstanceId\";\n-        when(cache.setCommandHandlingAdapterInstance(anyString(), anyString(), anyString(), any(SpanContext.class)))\n+        when(cache.setCommandHandlingAdapterInstance(anyString(), anyString(), anyString(), anyInt(), any(SpanContext.class)))\n                 .thenReturn(Future.succeededFuture());\n \n         givenAStartedService()\n-                .compose(ok -> svc.setCommandHandlingAdapterInstance(Constants.DEFAULT_TENANT, deviceId, adapterInstanceId, span))\n+                .compose(ok -> svc.setCommandHandlingAdapterInstance(Constants.DEFAULT_TENANT, deviceId, adapterInstanceId, -1, span))\n                 .setHandler(ctx.succeeding(result -> {\n                     ctx.verify(() -> {\n                         assertThat(result.getStatus()).isEqualTo(HttpURLConnection.HTTP_NO_CONTENT);\n-                        verify(cache).setCommandHandlingAdapterInstance(eq(Constants.DEFAULT_TENANT), eq(deviceId), eq(adapterInstanceId), any(SpanContext.class));\n+                        verify(cache).setCommandHandlingAdapterInstance(eq(Constants.DEFAULT_TENANT), eq(deviceId), eq(adapterInstanceId), anyInt(), any(SpanContext.class));\n                     });\n                     ctx.completeNow();\n                 }));\n", "next_change": {"commit": "d99f19ed48b936c45a7a4f5c7afc9a42dda35248", "changed_code": [{"header": "diff --git a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\nindex 0c39762e6..0ca7f0c3e 100644\n--- a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n+++ b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n", "chunk": "@@ -156,15 +155,15 @@ public class RemoteCacheBasedDeviceConnectionServiceTest {\n \n         final String deviceId = \"testDevice\";\n         final String adapterInstanceId = \"adapterInstanceId\";\n-        when(cache.setCommandHandlingAdapterInstance(anyString(), anyString(), anyString(), anyInt(), any(SpanContext.class)))\n+        when(cache.setCommandHandlingAdapterInstance(anyString(), anyString(), anyString(), any(), any(SpanContext.class)))\n                 .thenReturn(Future.succeededFuture());\n \n         givenAStartedService()\n-                .compose(ok -> svc.setCommandHandlingAdapterInstance(Constants.DEFAULT_TENANT, deviceId, adapterInstanceId, -1, span))\n+                .compose(ok -> svc.setCommandHandlingAdapterInstance(Constants.DEFAULT_TENANT, deviceId, adapterInstanceId, null, span))\n                 .setHandler(ctx.succeeding(result -> {\n                     ctx.verify(() -> {\n                         assertThat(result.getStatus()).isEqualTo(HttpURLConnection.HTTP_NO_CONTENT);\n-                        verify(cache).setCommandHandlingAdapterInstance(eq(Constants.DEFAULT_TENANT), eq(deviceId), eq(adapterInstanceId), anyInt(), any(SpanContext.class));\n+                        verify(cache).setCommandHandlingAdapterInstance(eq(Constants.DEFAULT_TENANT), eq(deviceId), eq(adapterInstanceId), any(), any(SpanContext.class));\n                     });\n                     ctx.completeNow();\n                 }));\n", "next_change": {"commit": "478e626f1d4d7f481184a16f85775b88cbdfeff6", "changed_code": [{"header": "diff --git a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\nindex 0ca7f0c3e..b93956de7 100644\n--- a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n+++ b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n", "chunk": "@@ -155,17 +156,20 @@ public class RemoteCacheBasedDeviceConnectionServiceTest {\n \n         final String deviceId = \"testDevice\";\n         final String adapterInstanceId = \"adapterInstanceId\";\n-        when(cache.setCommandHandlingAdapterInstance(anyString(), anyString(), anyString(), any(), any(SpanContext.class)))\n+        final boolean updateOnly = true;\n+        when(cache.setCommandHandlingAdapterInstance(anyString(), anyString(), anyString(), any(), anyBoolean(), any(SpanContext.class)))\n                 .thenReturn(Future.succeededFuture());\n \n         givenAStartedService()\n-                .compose(ok -> svc.setCommandHandlingAdapterInstance(Constants.DEFAULT_TENANT, deviceId, adapterInstanceId, null, span))\n-                .setHandler(ctx.succeeding(result -> {\n-                    ctx.verify(() -> {\n-                        assertThat(result.getStatus()).isEqualTo(HttpURLConnection.HTTP_NO_CONTENT);\n-                        verify(cache).setCommandHandlingAdapterInstance(eq(Constants.DEFAULT_TENANT), eq(deviceId), eq(adapterInstanceId), any(), any(SpanContext.class));\n-                    });\n-                    ctx.completeNow();\n-                }));\n+        .compose(ok -> svc.setCommandHandlingAdapterInstance(Constants.DEFAULT_TENANT, deviceId, adapterInstanceId, null,\n+                updateOnly, span))\n+        .setHandler(ctx.succeeding(result -> {\n+            ctx.verify(() -> {\n+                assertThat(result.getStatus()).isEqualTo(HttpURLConnection.HTTP_NO_CONTENT);\n+                verify(cache).setCommandHandlingAdapterInstance(eq(Constants.DEFAULT_TENANT), eq(deviceId), eq(adapterInstanceId), any(),\n+                        eq(updateOnly), any(SpanContext.class));\n+            });\n+            ctx.completeNow();\n+        }));\n     }\n }\n", "next_change": {"commit": "5e867466b06d7c92b754c5a6ba31bfa00a050e60", "changed_code": [{"header": "diff --git a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/CacheBasedDeviceConnectionServiceTest.java\nsimilarity index 71%\nrename from services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\nrename to services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/CacheBasedDeviceConnectionServiceTest.java\nindex b93956de7..859a2ddad 100644\n--- a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n+++ b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/CacheBasedDeviceConnectionServiceTest.java\n", "chunk": "@@ -172,4 +172,56 @@ public class RemoteCacheBasedDeviceConnectionServiceTest {\n             ctx.completeNow();\n         }));\n     }\n+\n+    /**\n+     * Verifies that the <em>removeCommandHandlingAdapterInstance</em> operation succeeds, invokes the\n+     * corresponding method on the {@link DeviceConnectionInfo} instance, and returns the correct status code.\n+     * This test uses a {@code true} return value of <em>removeCommandHandlingAdapterInstance</em>.\n+     *\n+     * @param ctx The vert.x context.\n+     */\n+    @Test\n+    public void testRemoveCommandHandlingAdapterInstanceReturningTrue(final VertxTestContext ctx) {\n+\n+        final String deviceId = \"testDevice\";\n+        final String adapterInstanceId = \"adapterInstanceId\";\n+        when(cache.removeCommandHandlingAdapterInstance(anyString(), anyString(), anyString(), any(SpanContext.class)))\n+                .thenReturn(Future.succeededFuture(true));\n+\n+        givenAStartedService()\n+                .compose(ok -> svc.removeCommandHandlingAdapterInstance(Constants.DEFAULT_TENANT, deviceId, adapterInstanceId, span))\n+                .setHandler(ctx.succeeding(result -> {\n+                    ctx.verify(() -> {\n+                        assertThat(result.getStatus()).isEqualTo(HttpURLConnection.HTTP_NO_CONTENT);\n+                        verify(cache).removeCommandHandlingAdapterInstance(eq(Constants.DEFAULT_TENANT), eq(deviceId), eq(adapterInstanceId), any(SpanContext.class));\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that the <em>removeCommandHandlingAdapterInstance</em> operation succeeds, invokes the\n+     * corresponding method on the {@link DeviceConnectionInfo} instance, and returns the correct status code.\n+     * This test uses a {@code false} return value of <em>removeCommandHandlingAdapterInstance</em>.\n+     *\n+     * @param ctx The vert.x context.\n+     */\n+    @Test\n+    public void testRemoveCommandHandlingAdapterInstanceReturningFalse(final VertxTestContext ctx) {\n+\n+        final String deviceId = \"testDevice\";\n+        final String adapterInstanceId = \"adapterInstanceId\";\n+        when(cache.removeCommandHandlingAdapterInstance(anyString(), anyString(), anyString(), any(SpanContext.class)))\n+                .thenReturn(Future.succeededFuture(false));\n+\n+        givenAStartedService()\n+                .compose(ok -> svc.removeCommandHandlingAdapterInstance(Constants.DEFAULT_TENANT, deviceId, adapterInstanceId, span))\n+                .setHandler(ctx.succeeding(result -> {\n+                    ctx.verify(() -> {\n+                        assertThat(result.getStatus()).isEqualTo(HttpURLConnection.HTTP_PRECON_FAILED);\n+                        verify(cache).removeCommandHandlingAdapterInstance(eq(Constants.DEFAULT_TENANT), eq(deviceId), eq(adapterInstanceId), any(SpanContext.class));\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "2760ef2abea9015a4b0b4095effae3c67b24e79c", "message": "Merge commit", "committedDate": null}, {"oid": "f8ea5facfce262dd056ff76a9affc00b5a46c1c0", "committedDate": "2020-03-19 17:02:27 +0100", "message": "Make sure Infinispan based device connection service implementation doesn't use eventbus anymore"}, {"oid": "0e622a43550aabb5595724c40d90d8893446b9b8", "committedDate": "2020-04-09 09:25:29 +0200", "message": "Provide an embedded cache version for the device connection service"}, {"oid": "3dca60db2a92b7db1eb7ed9834674ab2b9690854", "committedDate": "2020-04-21 14:23:46 +0200", "message": "[#1858] Add lifespan to setCommandHandlingAdapterInstance."}, {"oid": "d99f19ed48b936c45a7a4f5c7afc9a42dda35248", "committedDate": "2020-04-23 16:48:39 +0200", "message": "[#1858] Use ttd value as command consumer lifespan."}, {"oid": "478e626f1d4d7f481184a16f85775b88cbdfeff6", "committedDate": "2020-05-06 09:52:30 +0200", "message": "[#1858] Add 'updateOnly' param to setCommandHandlingAdapterInstance."}, {"oid": "5e867466b06d7c92b754c5a6ba31bfa00a050e60", "committedDate": "2020-05-06 13:57:45 +0200", "message": "Let removeCommandHandlingAdapterInstance() return 412 if not removed."}]}, {"oid": "48812c147d8ec2a2ade479217cf30df9aa96caf4", "url": "https://github.com/eclipse/hono/commit/48812c147d8ec2a2ade479217cf30df9aa96caf4", "message": "[#1272] Implement new Device Connection API methods.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-03-12T17:46:56Z", "type": "commit"}, {"oid": "48812c147d8ec2a2ade479217cf30df9aa96caf4", "url": "https://github.com/eclipse/hono/commit/48812c147d8ec2a2ade479217cf30df9aa96caf4", "message": "[#1272] Implement new Device Connection API methods.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-03-12T17:46:56Z", "type": "forcePushed"}]}