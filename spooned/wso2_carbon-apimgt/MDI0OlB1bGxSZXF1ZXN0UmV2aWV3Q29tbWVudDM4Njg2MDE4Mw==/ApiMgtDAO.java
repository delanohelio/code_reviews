[CompilationUnitImpl][CtCommentImpl]/* Copyright (c) 2005-2011, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

 WSO2 Inc. licenses this file to you under the Apache License,
 Version 2.0 (the "License"); you may not use this file except
 in compliance with the License.
 You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
 */
[CtPackageDeclarationImpl]package org.wso2.carbon.apimgt.impl.dao;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.ApiTypeWrapper;
[CtImportImpl]import java.util.ArrayList;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.policy.QuotaPolicy;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.utils.RemoteUserManagerClient;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.dto.APISubscriptionInfoDTO;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.policy.QueryParameterCondition;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.OAuthAppRequest;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.policy.ApplicationPolicy;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.dto.ConditionDTO;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.policy.APIPolicy;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.APICategory;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.factory.SQLConstantManagerFactory;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.workflow.WorkflowConstants;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.SubscribedAPI;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.policy.Policy;
[CtUnresolvedImport]import org.wso2.carbon.utils.multitenancy.MultitenantUtils;
[CtUnresolvedImport]import org.apache.commons.logging.LogFactory;
[CtImportImpl]import java.util.Map;
[CtImportImpl]import java.util.Arrays;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.APIIdentifier;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.APIStatus;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.Comment;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.APIStore;
[CtImportImpl]import java.sql.*;
[CtImportImpl]import java.util.Set;
[CtImportImpl]import java.util.regex.Matcher;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.BlockConditionAlreadyExistsException;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.policy.GlobalPolicy;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.APIConstants;
[CtUnresolvedImport]import com.google.common.collect.Lists;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.dto.TierPermissionDTO;
[CtUnresolvedImport]import org.wso2.carbon.identity.oauth.IdentityOAuthAdminException;
[CtUnresolvedImport]import org.wso2.carbon.user.core.util.UserCoreUtil;
[CtUnresolvedImport]import org.wso2.carbon.identity.core.util.IdentityTenantUtil;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.URITemplate;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.ThrottlePolicyConstants;
[CtImportImpl]import java.util.regex.Pattern;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.botDataAPI.BotDetectionData;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.policy.Condition;
[CtImportImpl]import java.util.Calendar;
[CtImportImpl]import java.io.IOException;
[CtImportImpl]import java.nio.charset.Charset;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.APIProduct;
[CtImportImpl]import java.util.TreeMap;
[CtUnresolvedImport]import org.wso2.carbon.utils.DBUtils;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.ApplicationConstants;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.Subscriber;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.APIManagementException;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.factory.KeyManagerHolder;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.Label;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.APIKey;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.dto.APIKeyInfoDTO;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.dto.ConditionGroupDTO;
[CtUnresolvedImport]import org.wso2.carbon.utils.multitenancy.MultitenantConstants;
[CtImportImpl]import java.util.HashMap;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.KeyManager;
[CtImportImpl]import java.util.LinkedHashSet;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.policy.PolicyConstants;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.policy.Pipeline;
[CtImportImpl]import java.util.LinkedHashMap;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.policy.IPCondition;
[CtImportImpl]import java.util.Comparator;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.BlockConditionsDTO;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.dto.APIKeyValidationInfoDTO;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.APIProductResource;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.LifeCycleEvent;
[CtUnresolvedImport]import com.google.gson.Gson;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.SubscriptionAlreadyExistingException;
[CtImportImpl]import java.util.List;
[CtImportImpl]import java.util.UUID;
[CtUnresolvedImport]import com.google.common.base.Splitter;
[CtImportImpl]import java.util.HashSet;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.Application;
[CtImportImpl]import java.util.Collections;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.utils.APIUtil;
[CtImportImpl]import java.io.UnsupportedEncodingException;
[CtUnresolvedImport]import org.json.simple.JSONObject;
[CtImportImpl]import java.io.ByteArrayInputStream;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.Scope;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.APIManagerConfiguration;
[CtUnresolvedImport]import org.json.simple.JSONArray;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.ResourcePath;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.utils.ApplicationUtils;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.SubscriptionBlockedException;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.policy.BandwidthLimit;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.APIProductIdentifier;
[CtImportImpl]import org.apache.commons.lang3.StringUtils;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.policy.RequestCountLimit;
[CtImportImpl]import java.util.Iterator;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.API;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.MonetizationUsagePublishInfo;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.policy.HeaderCondition;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.Tier;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.dto.UserApplicationAPIUsage;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.workflow.WorkflowExecutorFactory;
[CtImportImpl]import java.io.InputStream;
[CtUnresolvedImport]import org.wso2.carbon.core.util.CryptoException;
[CtImportImpl]import java.math.BigDecimal;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.dto.APIInfoDTO;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.dto.ApplicationRegistrationWorkflowDTO;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.Identifier;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.impl.workflow.WorkflowStatus;
[CtUnresolvedImport]import org.wso2.carbon.identity.core.util.IdentityUtil;
[CtUnresolvedImport]import org.apache.commons.logging.Log;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.Workflow;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.AccessTokenInfo;
[CtUnresolvedImport]import org.wso2.carbon.apimgt.api.model.policy.JWTClaimsCondition;
[CtClassImpl][CtJavaDocImpl]/**
 * This class represent the ApiMgtDAO.
 */
public class ApiMgtDAO {
    [CtFieldImpl]private static final [CtTypeReferenceImpl]org.apache.commons.logging.Log log = [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.logging.LogFactory.getLog([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.class);

    [CtFieldImpl]private static [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO INSTANCE = [CtLiteralImpl]null;

    [CtFieldImpl]private [CtTypeReferenceImpl]boolean forceCaseInsensitiveComparisons = [CtLiteralImpl]false;

    [CtFieldImpl]private [CtTypeReferenceImpl]boolean multiGroupAppSharingEnabled = [CtLiteralImpl]false;

    [CtFieldImpl]private static [CtTypeReferenceImpl]boolean initialAutoCommit = [CtLiteralImpl]false;

    [CtFieldImpl]private final [CtTypeReferenceImpl]java.lang.Object scopeMutex = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.Object();

    [CtConstructorImpl]private ApiMgtDAO() [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.APIManagerConfiguration configuration = [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder.getInstance().getAPIManagerConfigurationService().getAPIManagerConfiguration();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String caseSensitiveComparison = [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder.getInstance().getAPIManagerConfigurationService().getAPIManagerConfiguration().getFirstProperty([CtTypeAccessImpl]APIConstants.API_STORE_FORCE_CI_COMPARISIONS);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]caseSensitiveComparison != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtFieldWriteImpl]forceCaseInsensitiveComparisons = [CtInvocationImpl][CtTypeAccessImpl]java.lang.Boolean.parseBoolean([CtVariableReadImpl]caseSensitiveComparison);
        }
        [CtAssignmentImpl][CtFieldWriteImpl]multiGroupAppSharingEnabled = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.isMultiGroupAppSharingEnabled();
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> getAPIVersionsMatchingApiName([CtParameterImpl][CtTypeReferenceImpl]java.lang.String apiName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String username) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> versionList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_VERSIONS_MATCHES_API_NAME_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]apiName);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]username);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]versionList.add([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"API_VERSION"));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get API versions matches API name" + [CtVariableReadImpl]apiName, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]versionList;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Method to get the instance of the ApiMgtDAO.
     *
     * @return {@link ApiMgtDAO} instance
     */
    public static [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO getInstance() [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.INSTANCE == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtFieldWriteImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.INSTANCE = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO();
        }
        [CtReturnImpl]return [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.INSTANCE;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Persist the details of the token generation request (allowed domains & validity period) to be used back
     * when approval has been granted.
     *
     * @param dto
     * 		DTO related to Application Registration.
     * @param onlyKeyMappingEntry
     * 		When this flag is enabled, only AM_APPLICATION_KEY_MAPPING will get affected.
     * @throws APIManagementException
     * 		if failed to create entries in  AM_APPLICATION_REGISTRATION and
     * 		AM_APPLICATION_KEY_MAPPING tables.
     */
    public [CtTypeReferenceImpl]void createApplicationRegistrationEntry([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.ApplicationRegistrationWorkflowDTO dto, [CtParameterImpl][CtTypeReferenceImpl]boolean onlyKeyMappingEntry) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement queryPs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement appRegPs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application = [CtInvocationImpl][CtVariableReadImpl]dto.getApplication();
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtInvocationImpl][CtVariableReadImpl]application.getSubscriber();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String jsonString = [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]dto.getAppInfoDTO().getOAuthApplicationInfo().getJsonString();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String registrationQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_REGISTRATION_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String registrationEntry = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_APPLICATION_REGISTRATION_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String keyMappingEntry = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_APPLICATION_KEY_MAPPING_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]queryPs = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]registrationQuery);
            [CtInvocationImpl][CtVariableReadImpl]queryPs.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]subscriber.getId());
            [CtInvocationImpl][CtVariableReadImpl]queryPs.setInt([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]application.getId());
            [CtInvocationImpl][CtVariableReadImpl]queryPs.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]dto.getKeyType());
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]queryPs.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Application '" + [CtInvocationImpl][CtVariableReadImpl]application.getName()) + [CtLiteralImpl]"' is already registered.");
            }
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]onlyKeyMappingEntry) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]appRegPs = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]registrationEntry);
                [CtInvocationImpl][CtVariableReadImpl]appRegPs.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]subscriber.getId());
                [CtInvocationImpl][CtVariableReadImpl]appRegPs.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]dto.getWorkflowReference());
                [CtInvocationImpl][CtVariableReadImpl]appRegPs.setInt([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]application.getId());
                [CtInvocationImpl][CtVariableReadImpl]appRegPs.setString([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]dto.getKeyType());
                [CtInvocationImpl][CtVariableReadImpl]appRegPs.setString([CtLiteralImpl]5, [CtInvocationImpl][CtVariableReadImpl]dto.getDomainList());
                [CtInvocationImpl][CtVariableReadImpl]appRegPs.setLong([CtLiteralImpl]6, [CtInvocationImpl][CtVariableReadImpl]dto.getValidityTime());
                [CtInvocationImpl][CtVariableReadImpl]appRegPs.setString([CtLiteralImpl]7, [CtInvocationImpl](([CtTypeReferenceImpl]java.lang.String) ([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]dto.getAppInfoDTO().getOAuthApplicationInfo().getParameter([CtLiteralImpl]"tokenScope"))));
                [CtInvocationImpl][CtVariableReadImpl]appRegPs.setString([CtLiteralImpl]8, [CtVariableReadImpl]jsonString);
                [CtInvocationImpl][CtVariableReadImpl]appRegPs.execute();
            }
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]keyMappingEntry);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]application.getId());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]dto.getKeyType());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]dto.getStatus().toString());
            [CtInvocationImpl][CtVariableReadImpl]ps.execute();
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                [CtInvocationImpl]handleException([CtLiteralImpl]"Error occurred while Rolling back changes done on Application Registration", [CtVariableReadImpl]e1);
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while creating an " + [CtLiteralImpl]"Application Registration Entry for Application : ") + [CtInvocationImpl][CtVariableReadImpl]application.getName(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeStatement([CtVariableReadImpl]queryPs);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeStatement([CtVariableReadImpl]appRegPs);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo getOAuthApplication([CtParameterImpl][CtTypeReferenceImpl]java.lang.String consumerKey) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo oAuthApplicationInfo = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_OAUTH_APPLICATION_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]consumerKey);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]oAuthApplicationInfo.setClientId([CtVariableReadImpl]consumerKey);
                [CtInvocationImpl][CtVariableReadImpl]oAuthApplicationInfo.setCallBackURL([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CALLBACK_URL"));
                [CtInvocationImpl][CtVariableReadImpl]oAuthApplicationInfo.setClientSecret([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.decryptToken([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CONSUMER_SECRET")));
                [CtInvocationImpl][CtVariableReadImpl]oAuthApplicationInfo.addParameter([CtTypeAccessImpl]ApplicationConstants.OAUTH_REDIRECT_URIS, [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CALLBACK_URL"));
                [CtInvocationImpl][CtVariableReadImpl]oAuthApplicationInfo.addParameter([CtTypeAccessImpl]ApplicationConstants.OAUTH_CLIENT_NAME, [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APP_NAME"));
                [CtInvocationImpl][CtVariableReadImpl]oAuthApplicationInfo.addParameter([CtTypeAccessImpl]ApplicationConstants.OAUTH_CLIENT_GRANT, [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"GRANT_TYPES"));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while executing SQL for getting OAuth application info", [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.core.util.CryptoException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Unable to decrypt consumer secret of consumer key " + [CtVariableReadImpl]consumerKey, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]oAuthApplicationInfo;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get the creator of the OAuth App.
     *
     * @param consumerKey
     * 		Client ID of the OAuth App
     * @return {@code Subscriber} with name and TenantId set.
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber getOwnerForConsumerApp([CtParameterImpl][CtTypeReferenceImpl]java.lang.String consumerKey) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String username;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_OWNER_FOR_CONSUMER_APP_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]consumerKey);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]username = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"USERNAME");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domainName = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]APIConstants.IDENTITY_OAUTH2_FIELD_USER_DOMAIN);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String endUsernameWithDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]username, [CtVariableReadImpl]domainName);
                [CtAssignmentImpl][CtVariableWriteImpl]subscriber = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber([CtVariableReadImpl]endUsernameWithDomain);
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setTenantId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"TENANT_ID"));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while executing SQL for getting User Id : SQL " + [CtVariableReadImpl]sqlQuery, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]subscriber;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get Subscribed APIs for given userId
     *
     * @param userId
     * 		id of the user
     * @return APIInfoDTO[]
     * @throws APIManagementException
     * 		if failed to get Subscribed APIs
     */
    public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APIInfoDTO[] getSubscribedAPIsOfUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APIInfoDTO> apiInfoDTOList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APIInfoDTO>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtCommentImpl]// identify logged in user
        [CtTypeReferenceImpl]java.lang.String loginUserName = [CtInvocationImpl]getLoginUserName([CtVariableReadImpl]userId);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantAwareUsername = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantAwareUsername([CtVariableReadImpl]loginUserName);
        [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtVariableReadImpl]loginUserName);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIBED_APIS_OF_USER_SQL;
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIBED_APIS_OF_USER_CASE_INSENSITIVE_SQL;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]tenantAwareUsername);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APIInfoDTO infoDTO = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APIInfoDTO();
                [CtInvocationImpl][CtVariableReadImpl]infoDTO.setProviderId([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomain([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_PROVIDER")));
                [CtInvocationImpl][CtVariableReadImpl]infoDTO.setApiName([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_NAME"));
                [CtInvocationImpl][CtVariableReadImpl]infoDTO.setVersion([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_VERSION"));
                [CtInvocationImpl][CtVariableReadImpl]apiInfoDTOList.add([CtVariableReadImpl]infoDTO);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while executing SQL", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]apiInfoDTOList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APIInfoDTO[[CtInvocationImpl][CtVariableReadImpl]apiInfoDTOList.size()]);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get API key information for given API
     *
     * @param apiInfoDTO
     * 		API info
     * @return APIKeyInfoDTO[]
     * @throws APIManagementException
     * 		if failed to get key info for given API
     */
    public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APIKeyInfoDTO[] getSubscribedUsersForAPI([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APIInfoDTO apiInfoDTO) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APIKeyInfoDTO[] apiKeyInfoDTOs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APIKeyInfoDTO> apiKeyInfoList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APIKeyInfoDTO>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIBED_USERS_FOR_API_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]apiInfoDTO.getProviderId()));
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]apiInfoDTO.getApiName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]apiInfoDTO.getVersion());
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userId = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]APIConstants.SUBSCRIBER_FIELD_USER_ID);
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APIKeyInfoDTO apiKeyInfoDTO = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APIKeyInfoDTO();
                [CtInvocationImpl][CtVariableReadImpl]apiKeyInfoDTO.setUserId([CtVariableReadImpl]userId);
                [CtInvocationImpl][CtVariableReadImpl]apiKeyInfoList.add([CtVariableReadImpl]apiKeyInfoDTO);
            } 
            [CtAssignmentImpl][CtVariableWriteImpl]apiKeyInfoDTOs = [CtInvocationImpl][CtVariableReadImpl]apiKeyInfoList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APIKeyInfoDTO[[CtInvocationImpl][CtVariableReadImpl]apiKeyInfoList.size()]);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while executing SQL", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]apiKeyInfoDTOs;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is to update the access token
     *
     * @param userId
     * 		id of the user
     * @param apiInfoDTO
     * 		Api info
     * @param statusEnum
     * 		Status of the access key
     * @throws APIManagementException
     * 		if failed to update the access token
     */
    public [CtTypeReferenceImpl]void changeAccessTokenStatus([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APIInfoDTO apiInfoDTO, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String statusEnum) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantAwareUsername = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantAwareUsername([CtVariableReadImpl]userId);
        [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtVariableReadImpl]userId);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String accessTokenStoreTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.ACCESS_TOKEN_STORE_TABLE;
        [CtAssignmentImpl][CtVariableWriteImpl]accessTokenStoreTable = [CtInvocationImpl]getAccessTokenStoreTableNameOfUserId([CtVariableReadImpl]userId, [CtVariableReadImpl]accessTokenStoreTable);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.CHANGE_ACCESS_TOKEN_STATUS_PREFIX + [CtVariableReadImpl]accessTokenStoreTable) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.CHANGE_ACCESS_TOKEN_STATUS_DEFAULT_SUFFIX;
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.CHANGE_ACCESS_TOKEN_STATUS_PREFIX + [CtVariableReadImpl]accessTokenStoreTable) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.CHANGE_ACCESS_TOKEN_STATUS_CASE_INSENSITIVE_SUFFIX;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]statusEnum);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]tenantAwareUsername);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]3, [CtVariableReadImpl]tenantId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]4, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]apiInfoDTO.getProviderId()));
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]5, [CtInvocationImpl][CtVariableReadImpl]apiInfoDTO.getApiName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]6, [CtInvocationImpl][CtVariableReadImpl]apiInfoDTO.getVersion());
            [CtLocalVariableImpl][CtTypeReferenceImpl]int count = [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Number of rows being updated : " + [CtVariableReadImpl]count);
            }
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback the changeAccessTokenStatus operation", [CtVariableReadImpl]e1);
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while executing SQL", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]boolean validateSubscriptionDetails([CtParameterImpl][CtTypeReferenceImpl]java.lang.String context, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String version, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String consumerKey, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APIKeyValidationInfoDTO infoDTO) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean defaultVersionInvoked = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String apiTenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomainFromRequestURL([CtVariableReadImpl]context);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiTenantDomain == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]apiTenantDomain = [CtFieldReadImpl]org.wso2.carbon.utils.multitenancy.MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]int apiOwnerTenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantIdFromTenantDomain([CtVariableReadImpl]apiTenantDomain);
        [CtIfImpl][CtCommentImpl]// Check if the api version has been prefixed with _default_
        if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]version != [CtLiteralImpl]null) && [CtInvocationImpl][CtVariableReadImpl]version.startsWith([CtTypeAccessImpl]APIConstants.DEFAULT_VERSION_PREFIX)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]defaultVersionInvoked = [CtLiteralImpl]true;
            [CtAssignmentImpl][CtCommentImpl]// Remove the prefix from the version.
            [CtVariableWriteImpl]version = [CtArrayReadImpl][CtInvocationImpl][CtVariableReadImpl]version.split([CtTypeAccessImpl]APIConstants.DEFAULT_VERSION_PREFIX)[[CtLiteralImpl]1];
        }
        [CtInvocationImpl]validateSubscriptionDetails([CtVariableReadImpl]infoDTO, [CtVariableReadImpl]context, [CtVariableReadImpl]version, [CtVariableReadImpl]consumerKey, [CtVariableReadImpl]defaultVersionInvoked);
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]infoDTO.isAuthorized();
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]boolean isAnyPolicyContentAware([CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String apiPolicy, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String appPolicy, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String subPolicy, [CtParameterImpl][CtTypeReferenceImpl]int subscriptionTenantId, [CtParameterImpl][CtTypeReferenceImpl]int appTenantId, [CtParameterImpl][CtTypeReferenceImpl]int apiId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isAnyContentAware = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtCommentImpl]// only check if using CEP based throttling.
        [CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.IS_ANY_POLICY_CONTENT_AWARE_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String dbProdName = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]conn.getMetaData().getDatabaseProductName();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]apiPolicy);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]subscriptionTenantId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtVariableReadImpl]apiPolicy);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]4, [CtVariableReadImpl]subscriptionTenantId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]5, [CtVariableReadImpl]apiId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]6, [CtVariableReadImpl]subscriptionTenantId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]7, [CtVariableReadImpl]apiId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]8, [CtVariableReadImpl]subscriptionTenantId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]9, [CtVariableReadImpl]subPolicy);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]10, [CtVariableReadImpl]subscriptionTenantId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]11, [CtVariableReadImpl]appPolicy);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]12, [CtVariableReadImpl]appTenantId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl][CtCommentImpl]// We only expect one result if all are not content aware.
            if ([CtBinaryOperatorImpl][CtVariableReadImpl]resultSet == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtLiteralImpl]" Result set Null");
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]int count = [CtLiteralImpl]0;
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]count = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]1);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]count > [CtLiteralImpl]0) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]isAnyContentAware = [CtLiteralImpl]true;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get content awareness of the policies ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtLiteralImpl]null, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]isAnyContentAware;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void addSubscriber([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupingId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_SUBSCRIBER_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]query, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtLiteralImpl]"subscriber_id" });
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]subscriber.getTenantId());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]subscriber.getEmail());
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Timestamp timestamp = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.sql.Timestamp([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]subscriber.getSubscribedDate().getTime());
            [CtInvocationImpl][CtVariableReadImpl]ps.setTimestamp([CtLiteralImpl]4, [CtVariableReadImpl]timestamp);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]5, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setTimestamp([CtLiteralImpl]6, [CtVariableReadImpl]timestamp);
            [CtInvocationImpl][CtVariableReadImpl]ps.setTimestamp([CtLiteralImpl]7, [CtVariableReadImpl]timestamp);
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            [CtLocalVariableImpl][CtTypeReferenceImpl]int subscriberId = [CtLiteralImpl]0;
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.getGeneratedKeys();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]subscriberId = [CtInvocationImpl][CtTypeAccessImpl]java.lang.Integer.parseInt([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]1));
            }
            [CtInvocationImpl][CtVariableReadImpl]subscriber.setId([CtVariableReadImpl]subscriberId);
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Error while rolling back the failed operation", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error in adding new subscriber: " + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Derives info about monetization usage publish job
     *
     * @return ifno about the monetization usage publish job
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.MonetizationUsagePublishInfo getMonetizationUsagePublishInfo() throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_MONETIZATION_USAGE_PUBLISH_INFO;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]query);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.MonetizationUsagePublishInfo monetizationUsagePublishInfo = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.MonetizationUsagePublishInfo();
                [CtInvocationImpl][CtVariableReadImpl]monetizationUsagePublishInfo.setId([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"ID"));
                [CtInvocationImpl][CtVariableReadImpl]monetizationUsagePublishInfo.setState([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"STATE"));
                [CtInvocationImpl][CtVariableReadImpl]monetizationUsagePublishInfo.setStatus([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"STATUS"));
                [CtInvocationImpl][CtVariableReadImpl]monetizationUsagePublishInfo.setStartedTime([CtInvocationImpl][CtVariableReadImpl]rs.getLong([CtLiteralImpl]"STARTED_TIME"));
                [CtInvocationImpl][CtVariableReadImpl]monetizationUsagePublishInfo.setLastPublishTime([CtInvocationImpl][CtVariableReadImpl]rs.getLong([CtLiteralImpl]"PUBLISHED_TIME"));
                [CtReturnImpl]return [CtVariableReadImpl]monetizationUsagePublishInfo;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while retrieving Monetization Usage Publish Info: ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtLiteralImpl]null;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add info about monetization usage publish job
     *
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void addMonetizationUsagePublishInfo([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.MonetizationUsagePublishInfo monetizationUsagePublishInfo) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_MONETIZATION_USAGE_PUBLISH_INFO;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]monetizationUsagePublishInfo.getId());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]monetizationUsagePublishInfo.getState());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]monetizationUsagePublishInfo.getStatus());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]4, [CtInvocationImpl][CtTypeAccessImpl]java.lang.Long.toString([CtInvocationImpl][CtVariableReadImpl]monetizationUsagePublishInfo.getStartedTime()));
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]5, [CtInvocationImpl][CtTypeAccessImpl]java.lang.Long.toString([CtInvocationImpl][CtVariableReadImpl]monetizationUsagePublishInfo.getLastPublishTime()));
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Error while rolling back the failed operation", [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while adding monetization usage publish Info: ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Updates info about monetization usage publish job
     *
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void updateUsagePublishInfo([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.MonetizationUsagePublishInfo monetizationUsagePublishInfo) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_MONETIZATION_USAGE_PUBLISH_INFO;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]monetizationUsagePublishInfo.getState());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]monetizationUsagePublishInfo.getStatus());
            [CtInvocationImpl][CtVariableReadImpl]ps.setLong([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]monetizationUsagePublishInfo.getStartedTime());
            [CtInvocationImpl][CtVariableReadImpl]ps.setLong([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]monetizationUsagePublishInfo.getLastPublishTime());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]5, [CtInvocationImpl][CtVariableReadImpl]monetizationUsagePublishInfo.getId());
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Error while rolling back the failed operation", [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while updating monetization usage publish Info: " + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void updateSubscriber([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_SUBSCRIBER_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]subscriber.getTenantId());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]subscriber.getEmail());
            [CtInvocationImpl][CtVariableReadImpl]ps.setTimestamp([CtLiteralImpl]4, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.sql.Timestamp([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]subscriber.getSubscribedDate().getTime()));
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]5, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setTimestamp([CtLiteralImpl]6, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.sql.Timestamp([CtInvocationImpl][CtTypeAccessImpl]java.lang.System.currentTimeMillis()));
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]7, [CtInvocationImpl][CtVariableReadImpl]subscriber.getId());
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Error while rolling back the failed operation", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error in updating subscriber: " + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber getSubscriber([CtParameterImpl][CtTypeReferenceImpl]int subscriberId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIBER_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]subscriberId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"USER_ID"));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setId([CtVariableReadImpl]subscriberId);
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setTenantId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"TENANT_ID"));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setEmail([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"EMAIL_ADDRESS"));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setSubscribedDate([CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.Date([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]rs.getTimestamp([CtLiteralImpl]"DATE_SUBSCRIBED").getTime()));
                [CtReturnImpl]return [CtVariableReadImpl]subscriber;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while retrieving subscriber: " + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtLiteralImpl]null;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]int addSubscription([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.ApiTypeWrapper apiTypeWrapper, [CtParameterImpl][CtTypeReferenceImpl]int applicationId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String status) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl]final [CtTypeReferenceImpl]boolean isProduct = [CtInvocationImpl][CtVariableReadImpl]apiTypeWrapper.isAPIProduct();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement preparedStForInsert = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int subscriptionId = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int id = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier identifier;
            [CtLocalVariableImpl][CtCommentImpl]// Query to check if this subscription already exists
            [CtTypeReferenceImpl]java.lang.String checkDuplicateQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.CHECK_EXISTING_SUBSCRIPTION_API_SQL;
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isProduct) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]identifier = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]apiTypeWrapper.getApi().getId();
                [CtAssignmentImpl][CtVariableWriteImpl]id = [CtInvocationImpl]getAPIID([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]apiTypeWrapper.getApi().getId(), [CtVariableReadImpl]conn);
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]identifier = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]apiTypeWrapper.getApiProduct().getId();
                [CtAssignmentImpl][CtVariableWriteImpl]id = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]apiTypeWrapper.getApiProduct().getProductId();
            }
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]checkDuplicateQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]id);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]applicationId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl][CtCommentImpl]// If the subscription already exists
            if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subStatus = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"SUB_STATUS");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subCreationStatus = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"SUBS_CREATE_STATE");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String applicationName = [CtInvocationImpl]getApplicationNameFromId([CtVariableReadImpl]applicationId);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.UNBLOCKED.equals([CtVariableReadImpl]subStatus) || [CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.ON_HOLD.equals([CtVariableReadImpl]subStatus)) || [CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.REJECTED.equals([CtVariableReadImpl]subStatus)) && [CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionCreatedStatus.SUBSCRIBE.equals([CtVariableReadImpl]subCreationStatus)) [CtBlockImpl]{
                    [CtInvocationImpl][CtCommentImpl]// Throw error saying subscription already exists.
                    [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Subscription already exists for API/API Prouct " + [CtInvocationImpl][CtVariableReadImpl]apiTypeWrapper.getName()) + [CtLiteralImpl]" in Application ") + [CtVariableReadImpl]applicationName);
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.SubscriptionAlreadyExistingException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Subscription already exists for API/API Prouct " + [CtInvocationImpl][CtVariableReadImpl]apiTypeWrapper.getName()) + [CtLiteralImpl]" in Application ") + [CtVariableReadImpl]applicationName);
                } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.UNBLOCKED.equals([CtVariableReadImpl]subStatus) && [CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionCreatedStatus.UN_SUBSCRIBE.equals([CtVariableReadImpl]subCreationStatus)) [CtBlockImpl]{
                    [CtInvocationImpl]deleteSubscriptionByApiIDAndAppID([CtVariableReadImpl]id, [CtVariableReadImpl]applicationId, [CtVariableReadImpl]conn);
                } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.BLOCKED.equals([CtVariableReadImpl]subStatus) || [CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.PROD_ONLY_BLOCKED.equals([CtVariableReadImpl]subStatus)) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Subscription to API/API Prouct " + [CtInvocationImpl][CtVariableReadImpl]apiTypeWrapper.getName()) + [CtLiteralImpl]" through application ") + [CtVariableReadImpl]applicationName) + [CtLiteralImpl]" was blocked");
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.SubscriptionBlockedException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Subscription to API/API Product " + [CtInvocationImpl][CtVariableReadImpl]apiTypeWrapper.getName()) + [CtLiteralImpl]" through ") + [CtLiteralImpl]"application ") + [CtVariableReadImpl]applicationName) + [CtLiteralImpl]" was blocked");
                } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.REJECTED.equals([CtVariableReadImpl]subStatus)) [CtBlockImpl]{
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.SubscriptionBlockedException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Subscription to API " + [CtInvocationImpl][CtVariableReadImpl]apiTypeWrapper.getName()) + [CtLiteralImpl]" through application ") + [CtVariableReadImpl]applicationName) + [CtLiteralImpl]" was rejected");
                }
            }
            [CtLocalVariableImpl][CtCommentImpl]// This query to update the AM_SUBSCRIPTION table
            [CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_SUBSCRIPTION_SQL;
            [CtAssignmentImpl][CtCommentImpl]// Adding data to the AM_SUBSCRIPTION table
            [CtCommentImpl]// ps = conn.prepareStatement(sqlQuery, Statement.RETURN_GENERATED_KEYS);
            [CtVariableWriteImpl]preparedStForInsert = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtLiteralImpl]"SUBSCRIPTION_ID" });
            [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]conn.getMetaData().getDriverName().contains([CtLiteralImpl]"PostgreSQL")) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]preparedStForInsert = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtLiteralImpl]"subscription_id" });
            }
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isProduct) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]preparedStForInsert.setString([CtLiteralImpl]1, [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]apiTypeWrapper.getApi().getId().getTier());
            } else [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]preparedStForInsert.setString([CtLiteralImpl]1, [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]apiTypeWrapper.getApiProduct().getId().getTier());
            }
            [CtInvocationImpl][CtVariableReadImpl]preparedStForInsert.setInt([CtLiteralImpl]2, [CtVariableReadImpl]id);
            [CtInvocationImpl][CtVariableReadImpl]preparedStForInsert.setInt([CtLiteralImpl]3, [CtVariableReadImpl]applicationId);
            [CtInvocationImpl][CtVariableReadImpl]preparedStForInsert.setString([CtLiteralImpl]4, [CtConditionalImpl][CtBinaryOperatorImpl][CtVariableReadImpl]status != [CtLiteralImpl]null ? [CtVariableReadImpl]status : [CtFieldReadImpl]APIConstants.SubscriptionStatus.UNBLOCKED);
            [CtInvocationImpl][CtVariableReadImpl]preparedStForInsert.setString([CtLiteralImpl]5, [CtTypeAccessImpl]APIConstants.SubscriptionCreatedStatus.SUBSCRIBE);
            [CtInvocationImpl][CtVariableReadImpl]preparedStForInsert.setString([CtLiteralImpl]6, [CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName());
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Timestamp timestamp = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.sql.Timestamp([CtInvocationImpl][CtTypeAccessImpl]java.lang.System.currentTimeMillis());
            [CtInvocationImpl][CtVariableReadImpl]preparedStForInsert.setTimestamp([CtLiteralImpl]7, [CtVariableReadImpl]timestamp);
            [CtInvocationImpl][CtVariableReadImpl]preparedStForInsert.setTimestamp([CtLiteralImpl]8, [CtVariableReadImpl]timestamp);
            [CtInvocationImpl][CtVariableReadImpl]preparedStForInsert.setString([CtLiteralImpl]9, [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]java.util.UUID.randomUUID().toString());
            [CtInvocationImpl][CtVariableReadImpl]preparedStForInsert.executeUpdate();
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]preparedStForInsert.getGeneratedKeys();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtCommentImpl]// subscriptionId = rs.getInt(1);
                [CtVariableWriteImpl]subscriptionId = [CtInvocationImpl][CtTypeAccessImpl]java.lang.Integer.parseInt([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]1));
            } 
            [CtInvocationImpl][CtCommentImpl]// finally commit transaction
            [CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback the add subscription ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to add subscriber data ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]preparedStForInsert, [CtLiteralImpl]null, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]subscriptionId;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Removes the subscription entry from AM_SUBSCRIPTIONS for identifier.
     *
     * @param identifier
     * 		Identifier
     * @param applicationId
     * 		ID of the application which has the subscription
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void removeSubscription([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier identifier, [CtParameterImpl][CtTypeReferenceImpl]int applicationId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int id = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String uuid;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriptionUUIDQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_UUID_SQL;
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]identifier instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]id = [CtInvocationImpl]getAPIID([CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier) (identifier)), [CtVariableReadImpl]conn);
            } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]identifier instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]id = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier) (identifier)).getProductId();
            }
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]subscriptionUUIDQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]id);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]applicationId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]uuid = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"UUID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI subscribedAPI = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI([CtVariableReadImpl]uuid);
                [CtInvocationImpl]removeSubscription([CtVariableReadImpl]subscribedAPI, [CtVariableReadImpl]conn);
            } else [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"UUID does not exist for the given apiId:" + [CtVariableReadImpl]id) + [CtLiteralImpl]" and ") + [CtLiteralImpl]"application id:") + [CtVariableReadImpl]applicationId);
            }
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback the add subscription ", [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to add subscriber data ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Removes a subscription specified by SubscribedAPI object
     *
     * @param subscription
     * 		SubscribedAPI object
     * @param conn
     * 		database connection object
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void removeSubscription([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI subscription, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement preparedStForUpdateOrDelete = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subStatus = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriptionStatusQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_STATUS_BY_UUID_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]subscriptionStatusQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]subscription.getUUID());
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]subStatus = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"SUB_STATUS");
            }
            [CtLocalVariableImpl][CtCommentImpl]// If the user was unblocked, remove the entry from DB, else change the status and keep the entry.
            [CtTypeReferenceImpl]java.lang.String updateQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_SUBSCRIPTION_SQL;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_SUBSCRIPTION_SQL;
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.BLOCKED.equals([CtVariableReadImpl]subStatus) || [CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.PROD_ONLY_BLOCKED.equals([CtVariableReadImpl]subStatus)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]preparedStForUpdateOrDelete = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]updateQuery);
                [CtInvocationImpl][CtVariableReadImpl]preparedStForUpdateOrDelete.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]subscription.getUUID());
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]preparedStForUpdateOrDelete = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]deleteQuery);
                [CtInvocationImpl][CtVariableReadImpl]preparedStForUpdateOrDelete.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]subscription.getUUID());
            }
            [CtInvocationImpl][CtVariableReadImpl]preparedStForUpdateOrDelete.executeUpdate();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to add subscriber data ", [CtVariableReadImpl]e);
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to add subscriber data ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtLiteralImpl]null, [CtVariableReadImpl]resultSet);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]preparedStForUpdateOrDelete, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Removes a subscription by id by force without considering the subscription blocking state of the user
     *
     * @param subscription_id
     * 		id of subscription
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void removeSubscriptionById([CtParameterImpl][CtTypeReferenceImpl]int subscription_id) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_SUBSCRIPTION_BY_ID_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]subscription_id);
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback remove subscription ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to remove subscription data ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void removeAllSubscriptions([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiIdentifier) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int apiId;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]apiId = [CtInvocationImpl]getAPIID([CtVariableReadImpl]apiIdentifier, [CtVariableReadImpl]conn);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_ALL_SUBSCRIPTIONS_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback remove all subscription ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to remove all subscriptions data ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.lang.String getSubscriptionStatusById([CtParameterImpl][CtTypeReferenceImpl]int subscriptionId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriptionStatus = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getApiQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_STATUS_BY_ID_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]getApiQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]subscriptionId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]subscriptionStatus = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"SUB_STATUS");
            }
            [CtReturnImpl]return [CtVariableReadImpl]subscriptionStatus;
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to retrieve subscription status", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtLiteralImpl]null;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * returns the SubscribedAPI object which is related to the subscriptionId
     *
     * @param subscriptionId
     * 		subscription id
     * @return {@link SubscribedAPI} Object which contains the subscribed API information.
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI getSubscriptionById([CtParameterImpl][CtTypeReferenceImpl]int subscriptionId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getSubscriptionQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_BY_ID_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]getSubscriptionQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]subscriptionId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI subscribedAPI = [CtLiteralImpl]null;
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]int applicationId = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"APPLICATION_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application = [CtInvocationImpl]getLightweightApplicationById([CtVariableReadImpl]applicationId);
                [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]APIConstants.API_PRODUCT.equals([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"API_TYPE"))) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier apiProductIdentifier = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomain([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"API_PROVIDER")), [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"API_NAME"), [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"API_VERSION"));
                    [CtInvocationImpl][CtVariableReadImpl]apiProductIdentifier.setProductId([CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"API_ID"));
                    [CtAssignmentImpl][CtVariableWriteImpl]subscribedAPI = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI([CtInvocationImpl][CtVariableReadImpl]application.getSubscriber(), [CtVariableReadImpl]apiProductIdentifier);
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiIdentifier = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomain([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"API_PROVIDER")), [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"API_NAME"), [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"API_VERSION"));
                    [CtAssignmentImpl][CtVariableWriteImpl]subscribedAPI = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI([CtInvocationImpl][CtVariableReadImpl]application.getSubscriber(), [CtVariableReadImpl]apiIdentifier);
                }
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setSubscriptionId([CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"SUBSCRIPTION_ID"));
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setSubStatus([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"SUB_STATUS"));
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setSubCreatedStatus([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"SUBS_CREATE_STATE"));
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setTier([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Tier([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"TIER_ID")));
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setUUID([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"UUID"));
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setApplication([CtVariableReadImpl]application);
            }
            [CtReturnImpl]return [CtVariableReadImpl]subscribedAPI;
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to retrieve subscription from subscription id", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtLiteralImpl]null;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * returns the SubscribedAPI object which is related to the UUID
     *
     * @param uuid
     * 		UUID of Application
     * @return {@link SubscribedAPI} Object which contains the subscribed API information.
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI getSubscriptionByUUID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String uuid) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getSubscriptionQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_BY_UUID_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]getSubscriptionQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]uuid);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI subscribedAPI = [CtLiteralImpl]null;
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]int applicationId = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"APPLICATION_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application = [CtInvocationImpl]getApplicationById([CtVariableReadImpl]applicationId);
                [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]APIConstants.API_PRODUCT.equals([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"API_TYPE"))) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier apiProductIdentifier = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomain([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"API_PROVIDER")), [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"API_NAME"), [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"API_VERSION"));
                    [CtInvocationImpl][CtVariableReadImpl]apiProductIdentifier.setProductId([CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"API_ID"));
                    [CtAssignmentImpl][CtVariableWriteImpl]subscribedAPI = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI([CtInvocationImpl][CtVariableReadImpl]application.getSubscriber(), [CtVariableReadImpl]apiProductIdentifier);
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiIdentifier = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomain([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"API_PROVIDER")), [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"API_NAME"), [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"API_VERSION"));
                    [CtAssignmentImpl][CtVariableWriteImpl]subscribedAPI = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI([CtInvocationImpl][CtVariableReadImpl]application.getSubscriber(), [CtVariableReadImpl]apiIdentifier);
                }
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setUUID([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"UUID"));
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setSubscriptionId([CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"SUBSCRIPTION_ID"));
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setSubStatus([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"SUB_STATUS"));
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setSubCreatedStatus([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"SUBS_CREATE_STATE"));
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setTier([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Tier([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"TIER_ID")));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Timestamp createdTime = [CtInvocationImpl][CtVariableReadImpl]resultSet.getTimestamp([CtLiteralImpl]"CREATED_TIME");
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setCreatedTime([CtConditionalImpl][CtBinaryOperatorImpl][CtVariableReadImpl]createdTime == [CtLiteralImpl]null ? [CtLiteralImpl]null : [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.valueOf([CtInvocationImpl][CtVariableReadImpl]createdTime.getTime()));
                [CtTryImpl]try [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Timestamp updated_time = [CtInvocationImpl][CtVariableReadImpl]resultSet.getTimestamp([CtLiteralImpl]"UPDATED_TIME");
                    [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setUpdatedTime([CtConditionalImpl][CtBinaryOperatorImpl][CtVariableReadImpl]updated_time == [CtLiteralImpl]null ? [CtLiteralImpl]null : [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.valueOf([CtInvocationImpl][CtVariableReadImpl]updated_time.getTime()));
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
                    [CtInvocationImpl][CtCommentImpl]// fixing Timestamp issue with default value '0000-00-00 00:00:00'for existing applications created
                    [CtVariableReadImpl]subscribedAPI.setUpdatedTime([CtInvocationImpl][CtVariableReadImpl]subscribedAPI.getCreatedTime());
                }
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setApplication([CtVariableReadImpl]application);
            }
            [CtReturnImpl]return [CtVariableReadImpl]subscribedAPI;
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to retrieve subscription from subscription id", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtLiteralImpl]null;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method used tot get Subscriber from subscriberId.
     *
     * @param subscriberName
     * 		id
     * @return Subscriber
     * @throws APIManagementException
     * 		if failed to get Subscriber from subscriber id
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber getSubscriber([CtParameterImpl][CtTypeReferenceImpl]java.lang.String subscriberName) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtVariableReadImpl]subscriberName);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_TENANT_SUBSCRIBER_SQL;
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_TENANT_SUBSCRIBER_CASE_INSENSITIVE_SQL;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]subscriberName);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
            [CtAssignmentImpl][CtVariableWriteImpl]result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]subscriber = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber([CtInvocationImpl][CtVariableReadImpl]result.getString([CtTypeAccessImpl]APIConstants.SUBSCRIBER_FIELD_EMAIL_ADDRESS));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setEmail([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"EMAIL_ADDRESS"));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setId([CtInvocationImpl][CtVariableReadImpl]result.getInt([CtLiteralImpl]"SUBSCRIBER_ID"));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setName([CtVariableReadImpl]subscriberName);
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setSubscribedDate([CtInvocationImpl][CtVariableReadImpl]result.getDate([CtTypeAccessImpl]APIConstants.SUBSCRIBER_FIELD_DATE_SUBSCRIBED));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setTenantId([CtInvocationImpl][CtVariableReadImpl]result.getInt([CtLiteralImpl]"TENANT_ID"));
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get Subscriber for :" + [CtVariableReadImpl]subscriberName, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]result);
        }
        [CtReturnImpl]return [CtVariableReadImpl]subscriber;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier> getAPIByConsumerKey([CtParameterImpl][CtTypeReferenceImpl]java.lang.String accessToken) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getAPISql = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_BY_CONSUMER_KEY_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier> apiSet = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getAPISql);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String encryptedAccessToken = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.encryptToken([CtVariableReadImpl]accessToken);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]encryptedAccessToken);
            [CtAssignmentImpl][CtVariableWriteImpl]result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]apiSet.add([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_PROVIDER"), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_NAME"), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_VERSION")));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get API ID for token: " + [CtVariableReadImpl]accessToken, [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.core.util.CryptoException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get API ID for token: " + [CtVariableReadImpl]accessToken, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]result);
        }
        [CtReturnImpl]return [CtVariableReadImpl]apiSet;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method returns the set of APIs for given subscriber, subscribed under the specified application.
     *
     * @param subscriber
     * 		subscriber
     * @param applicationName
     * 		Application Name
     * @return Set<API>
     * @throws org.wso2.carbon.apimgt.api.APIManagementException
     * 		if failed to get SubscribedAPIs
     */
    public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI> getSubscribedAPIs([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String applicationName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupingId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI> subscribedAPIs = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.LinkedHashSet<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIBED_APIS_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithGroupId = [CtBinaryOperatorImpl][CtLiteralImpl]" AND (APP.GROUP_ID = ? OR ((APP.GROUP_ID='' OR APP.GROUP_ID IS NULL)" + [CtLiteralImpl]" AND SUB.USER_ID = ?))";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithGroupIdorceCaseInsensitiveComp = [CtBinaryOperatorImpl][CtLiteralImpl]" AND (APP.GROUP_ID = ?" + [CtLiteralImpl]" OR ((APP.GROUP_ID='' OR APP.GROUP_ID IS NULL) AND LOWER(SUB.USER_ID) = LOWER(?)))";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClause = [CtLiteralImpl]" AND SUB.USER_ID = ? ";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseCaseSensitive = [CtLiteralImpl]" AND LOWER(SUB.USER_ID) = LOWER(?) ";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithMultiGroupId = [CtBinaryOperatorImpl][CtLiteralImpl]" AND  ( (APP.APPLICATION_ID IN (SELECT APPLICATION_ID FROM " + [CtLiteralImpl]"AM_APPLICATION_GROUP_MAPPING WHERE GROUP_ID IN ($params)  AND TENANT = ?))  OR  ( SUB.USER_ID = ? ))";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithMultiGroupIdCaseInsensitive = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]" AND  ( (APP.APPLICATION_ID IN  (SELECT APPLICATION_ID " + [CtLiteralImpl]"FROM AM_APPLICATION_GROUP_MAPPING  WHERE GROUP_ID IN ($params) AND TENANT = ?))  OR  ( LOWER(SUB.USER_ID) = LOWER") + [CtLiteralImpl]"(?) ))";
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]groupingId != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtLiteralImpl]"null".equals([CtVariableReadImpl]groupingId))) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]groupingId.isEmpty())) [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                        [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithMultiGroupIdCaseInsensitive;
                    } else [CtBlockImpl]{
                        [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithMultiGroupId;
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String groupIdArr[] = [CtInvocationImpl][CtVariableReadImpl]groupingId.split([CtLiteralImpl]",");
                    [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl]fillQueryParams([CtVariableReadImpl]connection, [CtVariableReadImpl]sqlQuery, [CtVariableReadImpl]groupIdArr, [CtLiteralImpl]3);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]applicationName);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int paramIndex = [CtBinaryOperatorImpl][CtFieldReadImpl][CtVariableReadImpl]groupIdArr.length + [CtLiteralImpl]2;
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]tenantDomain);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                } else [CtBlockImpl]{
                    [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                        [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithGroupIdorceCaseInsensitiveComp;
                    } else [CtBlockImpl]{
                        [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithGroupId;
                    }
                    [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]applicationName);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtVariableReadImpl]groupingId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseCaseSensitive;
                } else [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClause;
                }
                [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantId);
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]applicationName);
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
            }
            [CtAssignmentImpl][CtVariableWriteImpl]result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiIdentifier = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomain([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_PROVIDER")), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_NAME"), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_VERSION"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI subscribedAPI = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI([CtVariableReadImpl]subscriber, [CtVariableReadImpl]apiIdentifier);
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setSubscriptionId([CtInvocationImpl][CtVariableReadImpl]result.getInt([CtLiteralImpl]"SUBS_ID"));
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setSubStatus([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUB_STATUS"));
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setSubCreatedStatus([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUBS_CREATE_STATE"));
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setUUID([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUB_UUID"));
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setTier([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Tier([CtInvocationImpl][CtVariableReadImpl]result.getString([CtTypeAccessImpl]APIConstants.SUBSCRIPTION_FIELD_TIER_ID)));
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"APP_NAME"), [CtVariableReadImpl]subscriber);
                [CtInvocationImpl][CtVariableReadImpl]application.setUUID([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"APP_UUID"));
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setApplication([CtVariableReadImpl]application);
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPIs.add([CtVariableReadImpl]subscribedAPI);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get SubscribedAPI of :" + [CtInvocationImpl][CtVariableReadImpl]subscriber.getName(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]result);
        }
        [CtReturnImpl]return [CtVariableReadImpl]subscribedAPIs;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method returns the set of APIs for given subscriber, subscribed under the specified application.
     *
     * @param subscriber
     * 		subscriber
     * @param applicationId
     * 		Application Id
     * @return Set<API>
     * @throws org.wso2.carbon.apimgt.api.APIManagementException
     * 		if failed to get SubscribedAPIs
     */
    public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI> getSubscribedAPIsByApplicationId([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber, [CtParameterImpl][CtTypeReferenceImpl]int applicationId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupingId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI> subscribedAPIs = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.LinkedHashSet<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIBED_APIS_BY_ID_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithGroupId = [CtBinaryOperatorImpl][CtLiteralImpl]" AND (APP.GROUP_ID = ? OR ((APP.GROUP_ID='' OR APP.GROUP_ID IS NULL)" + [CtLiteralImpl]" AND SUB.USER_ID = ?))";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithGroupIdorceCaseInsensitiveComp = [CtBinaryOperatorImpl][CtLiteralImpl]" AND (APP.GROUP_ID = ?" + [CtLiteralImpl]" OR ((APP.GROUP_ID='' OR APP.GROUP_ID IS NULL) AND LOWER(SUB.USER_ID) = LOWER(?)))";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClause = [CtLiteralImpl]" AND SUB.USER_ID = ? ";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseCaseSensitive = [CtLiteralImpl]" AND LOWER(SUB.USER_ID) = LOWER(?) ";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithMultiGroupId = [CtBinaryOperatorImpl][CtLiteralImpl]" AND  ( (APP.APPLICATION_ID IN (SELECT APPLICATION_ID FROM " + [CtLiteralImpl]"AM_APPLICATION_GROUP_MAPPING WHERE GROUP_ID IN ($params)  AND TENANT = ?))  OR  ( SUB.USER_ID = ? ))";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithMultiGroupIdCaseInsensitive = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]" AND  ( (APP.APPLICATION_ID IN  (SELECT APPLICATION_ID " + [CtLiteralImpl]"FROM AM_APPLICATION_GROUP_MAPPING  WHERE GROUP_ID IN ($params) AND TENANT = ?))  OR  ( LOWER(SUB.USER_ID) = LOWER") + [CtLiteralImpl]"(?) ))";
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]groupingId != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtLiteralImpl]"null".equals([CtVariableReadImpl]groupingId))) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]groupingId.isEmpty())) [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                        [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithMultiGroupIdCaseInsensitive;
                    } else [CtBlockImpl]{
                        [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithMultiGroupId;
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String groupIdArr[] = [CtInvocationImpl][CtVariableReadImpl]groupingId.split([CtLiteralImpl]",");
                    [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl]fillQueryParams([CtVariableReadImpl]connection, [CtVariableReadImpl]sqlQuery, [CtVariableReadImpl]groupIdArr, [CtLiteralImpl]3);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]applicationId);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int paramIndex = [CtBinaryOperatorImpl][CtFieldReadImpl][CtVariableReadImpl]groupIdArr.length + [CtLiteralImpl]2;
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]tenantDomain);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                } else [CtBlockImpl]{
                    [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                        [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithGroupIdorceCaseInsensitiveComp;
                    } else [CtBlockImpl]{
                        [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithGroupId;
                    }
                    [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]applicationId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtVariableReadImpl]groupingId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseCaseSensitive;
                } else [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClause;
                }
                [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantId);
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]applicationId);
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
            }
            [CtAssignmentImpl][CtVariableWriteImpl]result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiIdentifier = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomain([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_PROVIDER")), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_NAME"), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_VERSION"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI subscribedAPI = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI([CtVariableReadImpl]subscriber, [CtVariableReadImpl]apiIdentifier);
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setSubscriptionId([CtInvocationImpl][CtVariableReadImpl]result.getInt([CtLiteralImpl]"SUBS_ID"));
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setSubStatus([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUB_STATUS"));
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setSubCreatedStatus([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUBS_CREATE_STATE"));
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setUUID([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUB_UUID"));
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setTier([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Tier([CtInvocationImpl][CtVariableReadImpl]result.getString([CtTypeAccessImpl]APIConstants.SUBSCRIPTION_FIELD_TIER_ID)));
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"APP_NAME"), [CtVariableReadImpl]subscriber);
                [CtInvocationImpl][CtVariableReadImpl]application.setId([CtInvocationImpl][CtVariableReadImpl]result.getInt([CtLiteralImpl]"APP_ID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setOwner([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"OWNER"));
                [CtInvocationImpl][CtVariableReadImpl]application.setCallbackUrl([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"CALLBACK_URL"));
                [CtInvocationImpl][CtVariableReadImpl]application.setUUID([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"APP_UUID"));
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl]getGroupId([CtInvocationImpl][CtVariableReadImpl]application.getId()));
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]int subscriptionId = [CtInvocationImpl][CtVariableReadImpl]result.getInt([CtLiteralImpl]"SUBS_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey> apiKeys = [CtInvocationImpl]getAPIKeysBySubscription([CtVariableReadImpl]subscriptionId);
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey key : [CtVariableReadImpl]apiKeys) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.addKey([CtVariableReadImpl]key);
                }
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setApplication([CtVariableReadImpl]application);
                [CtInvocationImpl][CtVariableReadImpl]subscribedAPIs.add([CtVariableReadImpl]subscribedAPI);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get SubscribedAPI of :" + [CtInvocationImpl][CtVariableReadImpl]subscriber.getName(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]result);
        }
        [CtReturnImpl]return [CtVariableReadImpl]subscribedAPIs;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope> getScopesForApplicationSubscription([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber, [CtParameterImpl][CtTypeReferenceImpl]int applicationId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement getIncludedApisInProduct = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement getSubscribedApisAndProducts = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet1 = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope> scopeHashMap = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.Integer> apiIdSet = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQueryForGetSubscribedApis = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIBED_API_IDs_BY_APP_ID_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]getSubscribedApisAndProducts = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQueryForGetSubscribedApis);
            [CtInvocationImpl][CtVariableReadImpl]getSubscribedApisAndProducts.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantId);
            [CtInvocationImpl][CtVariableReadImpl]getSubscribedApisAndProducts.setInt([CtLiteralImpl]2, [CtVariableReadImpl]applicationId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]getSubscribedApisAndProducts.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]int apiId = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"API_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getIncludedApisInProductQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_INCLUDED_APIS_IN_PRODUCT_SQL;
                [CtAssignmentImpl][CtVariableWriteImpl]getIncludedApisInProduct = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]getIncludedApisInProductQuery);
                [CtInvocationImpl][CtVariableReadImpl]getIncludedApisInProduct.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
                [CtAssignmentImpl][CtVariableWriteImpl]resultSet1 = [CtInvocationImpl][CtVariableReadImpl]getIncludedApisInProduct.executeQuery();
                [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet1.next()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int includedApiId = [CtInvocationImpl][CtVariableReadImpl]resultSet1.getInt([CtLiteralImpl]"API_ID");
                    [CtInvocationImpl][CtVariableReadImpl]apiIdSet.add([CtVariableReadImpl]includedApiId);
                } 
                [CtInvocationImpl][CtVariableReadImpl]apiIdSet.add([CtVariableReadImpl]apiId);
            } 
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]apiIdSet.isEmpty()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String apiIdList = [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.join([CtVariableReadImpl]apiIdSet, [CtLiteralImpl]", ");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SCOPE_BY_SUBSCRIBED_API_PREFIX + [CtVariableReadImpl]apiIdList) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SCOPE_BY_SUBSCRIBED_ID_SUFFIX;
                [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]conn.getMetaData().getDriverName().contains([CtLiteralImpl]"Oracle")) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SCOPE_BY_SUBSCRIBED_ID_ORACLE_SQL + [CtVariableReadImpl]apiIdList) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SCOPE_BY_SUBSCRIBED_ID_SUFFIX;
                }
                [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statement = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery)) [CtBlockImpl]{
                    [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet finalResultSet = [CtInvocationImpl][CtVariableReadImpl]statement.executeQuery()) [CtBlockImpl]{
                        [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]finalResultSet.next()) [CtBlockImpl]{
                            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope scope;
                            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String scopeKey = [CtInvocationImpl][CtVariableReadImpl]finalResultSet.getString([CtLiteralImpl]1);
                            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]scopeHashMap.containsKey([CtVariableReadImpl]scopeKey)) [CtBlockImpl]{
                                [CtAssignmentImpl][CtCommentImpl]// scope already exists append roles.
                                [CtVariableWriteImpl]scope = [CtInvocationImpl][CtVariableReadImpl]scopeHashMap.get([CtVariableReadImpl]scopeKey);
                                [CtInvocationImpl][CtVariableReadImpl]scope.setRoles([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]scope.getRoles().concat([CtBinaryOperatorImpl][CtLiteralImpl]"," + [CtInvocationImpl][CtVariableReadImpl]finalResultSet.getString([CtLiteralImpl]4)).trim());
                            } else [CtBlockImpl]{
                                [CtAssignmentImpl][CtVariableWriteImpl]scope = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope();
                                [CtInvocationImpl][CtVariableReadImpl]scope.setKey([CtVariableReadImpl]scopeKey);
                                [CtInvocationImpl][CtVariableReadImpl]scope.setName([CtInvocationImpl][CtVariableReadImpl]finalResultSet.getString([CtLiteralImpl]2));
                                [CtInvocationImpl][CtVariableReadImpl]scope.setDescription([CtInvocationImpl][CtVariableReadImpl]finalResultSet.getString([CtLiteralImpl]3));
                                [CtInvocationImpl][CtVariableReadImpl]scope.setRoles([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]finalResultSet.getString([CtLiteralImpl]4).trim());
                            }
                            [CtInvocationImpl][CtVariableReadImpl]scopeHashMap.put([CtVariableReadImpl]scopeKey, [CtVariableReadImpl]scope);
                        } 
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to retrieve scopes for application subscription ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]getSubscribedApisAndProducts, [CtLiteralImpl]null, [CtVariableReadImpl]resultSet);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]getIncludedApisInProduct, [CtLiteralImpl]null, [CtVariableReadImpl]resultSet1);
        }
        [CtReturnImpl]return [CtInvocationImpl]populateScopeSet([CtVariableReadImpl]scopeHashMap);
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey> getAPIKeysBySubscription([CtParameterImpl][CtTypeReferenceImpl]int subscriptionId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getKeysSql = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_KEY_BY_SUBSCRIPTION_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey> apiKeys = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getKeysSql);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]subscriptionId);
            [CtAssignmentImpl][CtVariableWriteImpl]result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey apiKey = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey();
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String decryptedAccessToken = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.decryptToken([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"ACCESS_TOKEN"));
                [CtInvocationImpl][CtVariableReadImpl]apiKey.setAccessToken([CtVariableReadImpl]decryptedAccessToken);
                [CtInvocationImpl][CtVariableReadImpl]apiKey.setType([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"TOKEN_TYPE"));
                [CtInvocationImpl][CtVariableReadImpl]apiKeys.add([CtVariableReadImpl]apiKey);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get API keys for subscription: " + [CtVariableReadImpl]subscriptionId, [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.core.util.CryptoException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get API keys for subscription: " + [CtVariableReadImpl]subscriptionId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]result);
        }
        [CtReturnImpl]return [CtVariableReadImpl]apiKeys;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.lang.Integer getSubscriptionCount([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String applicationName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupingId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Integer subscriptionCount = [CtLiteralImpl]0;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_COUNT_SQL;
            [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_COUNT_CASE_INSENSITIVE_SQL;
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithGroupId = [CtBinaryOperatorImpl][CtLiteralImpl]" AND (APP.GROUP_ID = ? OR " + [CtLiteralImpl]"((APP.GROUP_ID = '' OR APP.GROUP_ID IS NULL) AND SUB.USER_ID = ?)) ";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithMultiGroupId = [CtBinaryOperatorImpl][CtLiteralImpl]" AND  ( (APP.APPLICATION_ID IN (SELECT APPLICATION_ID  FROM " + [CtLiteralImpl]"AM_APPLICATION_GROUP_MAPPING WHERE GROUP_ID IN ($params) AND TENANT = ?))  OR  ( SUB.USER_ID = ? ))";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithUserId = [CtLiteralImpl]" AND SUB.USER_ID = ? ";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseCaseSensitive = [CtLiteralImpl]" AND LOWER(SUB.USER_ID) = LOWER(?) ";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String appIdentifier;
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean hasGrouping = [CtLiteralImpl]false;
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]groupingId != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtLiteralImpl]"null".equals([CtVariableReadImpl]groupingId))) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]groupingId.isEmpty())) [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithMultiGroupId;
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] groupIdArr = [CtInvocationImpl][CtVariableReadImpl]groupingId.split([CtLiteralImpl]",");
                    [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl]fillQueryParams([CtVariableReadImpl]connection, [CtVariableReadImpl]sqlQuery, [CtVariableReadImpl]groupIdArr, [CtLiteralImpl]3);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]applicationName);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int paramIndex = [CtBinaryOperatorImpl][CtFieldReadImpl][CtVariableReadImpl]groupIdArr.length + [CtLiteralImpl]2;
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]tenantDomain);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                } else [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithGroupId;
                    [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]applicationName);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtVariableReadImpl]groupingId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseCaseSensitive;
                } else [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithUserId;
                }
                [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]applicationName);
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
            }
            [CtAssignmentImpl][CtVariableWriteImpl]result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]subscriptionCount = [CtInvocationImpl][CtVariableReadImpl]result.getInt([CtLiteralImpl]"SUB_COUNT");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get SubscribedAPI of :" + [CtInvocationImpl][CtVariableReadImpl]subscriber.getName(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]result);
        }
        [CtReturnImpl]return [CtVariableReadImpl]subscriptionCount;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.lang.Integer getSubscriptionCountByApplicationId([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber, [CtParameterImpl][CtTypeReferenceImpl]int applicationId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupingId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Integer subscriptionCount = [CtLiteralImpl]0;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_COUNT_BY_APP_ID_SQL;
            [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_COUNT_BY_APP_ID_CASE_INSENSITIVE_SQL;
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithGroupId = [CtBinaryOperatorImpl][CtLiteralImpl]" AND (APP.GROUP_ID = ? OR " + [CtLiteralImpl]"((APP.GROUP_ID = '' OR APP.GROUP_ID IS NULL) AND SUB.USER_ID = ?)) ";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithMultiGroupId = [CtBinaryOperatorImpl][CtLiteralImpl]" AND  ( (APP.APPLICATION_ID IN (SELECT APPLICATION_ID  FROM " + [CtLiteralImpl]"AM_APPLICATION_GROUP_MAPPING WHERE GROUP_ID IN ($params) AND TENANT = ?))  OR  ( SUB.USER_ID = ? ))";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithUserId = [CtLiteralImpl]" AND SUB.USER_ID = ? ";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseCaseSensitive = [CtLiteralImpl]" AND LOWER(SUB.USER_ID) = LOWER(?) ";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String appIdentifier;
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean hasGrouping = [CtLiteralImpl]false;
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]groupingId != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtLiteralImpl]"null".equals([CtVariableReadImpl]groupingId))) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]groupingId.isEmpty())) [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithMultiGroupId;
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] groupIdArr = [CtInvocationImpl][CtVariableReadImpl]groupingId.split([CtLiteralImpl]",");
                    [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl]fillQueryParams([CtVariableReadImpl]connection, [CtVariableReadImpl]sqlQuery, [CtVariableReadImpl]groupIdArr, [CtLiteralImpl]3);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int paramIndex = [CtBinaryOperatorImpl][CtFieldReadImpl][CtVariableReadImpl]groupIdArr.length + [CtLiteralImpl]2;
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]tenantDomain);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                } else [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithGroupId;
                    [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtVariableReadImpl]groupingId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseCaseSensitive;
                } else [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithUserId;
                }
                [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
            }
            [CtAssignmentImpl][CtVariableWriteImpl]result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]subscriptionCount = [CtInvocationImpl][CtVariableReadImpl]result.getInt([CtLiteralImpl]"SUB_COUNT");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get SubscribedAPI of :" + [CtInvocationImpl][CtVariableReadImpl]subscriber.getName(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]result);
        }
        [CtReturnImpl]return [CtVariableReadImpl]subscriptionCount;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Gets the subscribed API's, by the group for the application.
     *
     * @param subscriber
     * 		the subscriber subscribing for the api
     * @param applicationName
     * 		the application to which the api's are subscribed
     * @param startSubIndex
     * 		the start index for pagination
     * @param endSubIndex
     * 		end index for pagination
     * @param groupingId
     * 		the group id of the application
     * @return the set of subscribed API's.
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI> getPaginatedSubscribedAPIs([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String applicationName, [CtParameterImpl][CtTypeReferenceImpl]int startSubIndex, [CtParameterImpl][CtTypeReferenceImpl]int endSubIndex, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupingId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI> subscribedAPIs = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.LinkedHashSet<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtInvocationImpl]appendSubscriptionQueryWhereClause([CtVariableReadImpl]groupingId, [CtTypeAccessImpl]SQLConstants.GET_PAGINATED_SUBSCRIBED_APIS_SQL);
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtInvocationImpl]getSubscriptionResultSet([CtVariableReadImpl]groupingId, [CtVariableReadImpl]subscriber, [CtVariableReadImpl]applicationName, [CtVariableReadImpl]ps)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]int index = [CtLiteralImpl]0;
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]index >= [CtVariableReadImpl]startSubIndex) && [CtBinaryOperatorImpl]([CtVariableReadImpl]index < [CtVariableReadImpl]endSubIndex)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String apiType = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"TYPE");
                    [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]APIConstants.API_PRODUCT.toString().equals([CtVariableReadImpl]apiType)) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier identifier = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomain([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_PROVIDER")), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_NAME"), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_VERSION"));
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI subscribedAPI = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI([CtVariableReadImpl]subscriber, [CtVariableReadImpl]identifier);
                        [CtInvocationImpl]initSubscribedAPI([CtVariableReadImpl]subscribedAPI, [CtVariableReadImpl]subscriber, [CtVariableReadImpl]result);
                        [CtInvocationImpl][CtVariableReadImpl]subscribedAPIs.add([CtVariableReadImpl]subscribedAPI);
                    } else [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomain([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_PROVIDER")), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_NAME"), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_VERSION"));
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI subscribedAPI = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI([CtVariableReadImpl]subscriber, [CtVariableReadImpl]identifier);
                        [CtInvocationImpl]initSubscribedAPI([CtVariableReadImpl]subscribedAPI, [CtVariableReadImpl]subscriber, [CtVariableReadImpl]result);
                        [CtInvocationImpl][CtVariableReadImpl]subscribedAPIs.add([CtVariableReadImpl]subscribedAPI);
                    }
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index == [CtBinaryOperatorImpl]([CtVariableReadImpl]endSubIndex - [CtLiteralImpl]1)) [CtBlockImpl]{
                        [CtBreakImpl]break;
                    }
                }
                [CtUnaryOperatorImpl][CtVariableWriteImpl]index++;
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get SubscribedAPI of :" + [CtInvocationImpl][CtVariableReadImpl]subscriber.getName(), [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]subscribedAPIs;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.lang.String appendSubscriptionQueryWhereClause([CtParameterImpl]final [CtTypeReferenceImpl]java.lang.String groupingId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sqlQuery) [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]groupingId != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtLiteralImpl]"null".equals([CtVariableReadImpl]groupingId))) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]groupingId.isEmpty())) [CtBlockImpl]{
            [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] groupIDArray = [CtInvocationImpl][CtVariableReadImpl]groupingId.split([CtLiteralImpl]",");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> questionMarks = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>([CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.nCopies([CtFieldReadImpl][CtVariableReadImpl]groupIDArray.length, [CtLiteralImpl]"?"));
                [CtLocalVariableImpl]final [CtTypeReferenceImpl]java.lang.String paramString = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.join([CtLiteralImpl]",", [CtVariableReadImpl]questionMarks);
                [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]" AND  ( (APP.APPLICATION_ID IN  (SELECT APPLICATION_ID " + [CtLiteralImpl]" FROM AM_APPLICATION_GROUP_MAPPING  ") + [CtLiteralImpl]" WHERE GROUP_ID IN (") + [CtVariableReadImpl]paramString) + [CtLiteralImpl]") AND TENANT = ?))") + [CtLiteralImpl]"  OR  ( LOWER(SUB.USER_ID) = LOWER(?) ))";
                } else [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]" AND  ( (APP.APPLICATION_ID IN (SELECT APPLICATION_ID FROM " + [CtLiteralImpl]"AM_APPLICATION_GROUP_MAPPING WHERE GROUP_ID IN (") + [CtVariableReadImpl]paramString) + [CtLiteralImpl]") AND TENANT = ?))  ") + [CtLiteralImpl]"OR  ( SUB.USER_ID = ? ))";
                }
            } else [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtBinaryOperatorImpl][CtLiteralImpl]" AND (APP.GROUP_ID = ? OR ((APP.GROUP_ID='' OR APP.GROUP_ID IS NULL)" + [CtLiteralImpl]" AND LOWER(SUB.USER_ID) = LOWER(?)))";
            } else [CtBlockImpl]{
                [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtBinaryOperatorImpl][CtLiteralImpl]" AND (APP.GROUP_ID = ? OR ((APP.GROUP_ID='' OR APP.GROUP_ID IS NULL)" + [CtLiteralImpl]" AND SUB.USER_ID = ?))";
            }
        } else [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtLiteralImpl]" AND LOWER(SUB.USER_ID) = LOWER(?)  ";
        } else [CtBlockImpl]{
            [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtLiteralImpl]" AND  SUB.USER_ID = ? ";
        }
        [CtReturnImpl]return [CtVariableReadImpl]sqlQuery;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.sql.ResultSet getSubscriptionResultSet([CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupingId, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String applicationName, [CtParameterImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statement) throws [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
        [CtLocalVariableImpl][CtTypeReferenceImpl]int paramIndex = [CtLiteralImpl]0;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]groupingId != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtLiteralImpl]"null".equals([CtVariableReadImpl]groupingId))) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]groupingId.isEmpty())) [CtBlockImpl]{
            [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] groupIDArray = [CtInvocationImpl][CtVariableReadImpl]groupingId.split([CtLiteralImpl]",");
                [CtInvocationImpl][CtVariableReadImpl]statement.setInt([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]tenantId);
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]applicationName);
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String groupId : [CtVariableReadImpl]groupIDArray) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]groupId);
                }
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]tenantDomain);
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
            } else [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]statement.setInt([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]tenantId);
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]applicationName);
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]groupingId);
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
            }
        } else [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]statement.setInt([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]tenantId);
            [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]applicationName);
            [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
        }
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]statement.executeQuery();
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void initSubscribedAPI([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI subscribedAPI, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber, [CtParameterImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet) throws [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setUUID([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"SUB_UUID"));
        [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setSubStatus([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"SUB_STATUS"));
        [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setSubCreatedStatus([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"SUBS_CREATE_STATE"));
        [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setTier([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Tier([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]APIConstants.SUBSCRIPTION_FIELD_TIER_ID)));
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"APP_NAME"), [CtVariableReadImpl]subscriber);
        [CtInvocationImpl][CtVariableReadImpl]application.setUUID([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"APP_UUID"));
        [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setApplication([CtVariableReadImpl]application);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Gets the subscribed API's, by the group for the application.
     *
     * @param subscriber
     * 		the subscriber subscribing for the api
     * @param applicationId
     * 		the application to which the api's are subscribed
     * @param startSubIndex
     * 		the start index for pagination
     * @param endSubIndex
     * 		end index for pagination
     * @param groupingId
     * 		the group id of the application
     * @return the set of subscribed API's.
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI> getPaginatedSubscribedAPIs([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber, [CtParameterImpl][CtTypeReferenceImpl]int applicationId, [CtParameterImpl][CtTypeReferenceImpl]int startSubIndex, [CtParameterImpl][CtTypeReferenceImpl]int endSubIndex, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupingId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI> subscribedAPIs = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.LinkedHashSet<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_PAGINATED_SUBSCRIBED_APIS_BY_APP_ID_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClause = [CtLiteralImpl]" AND  SUB.USER_ID = ? ";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseForceCaseInsensitiveComp = [CtLiteralImpl]" AND LOWER(SUB.USER_ID) = LOWER(?)  ";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithGroupId = [CtBinaryOperatorImpl][CtLiteralImpl]" AND (APP.GROUP_ID = ? OR ((APP.GROUP_ID='' OR APP.GROUP_ID IS NULL)" + [CtLiteralImpl]" AND SUB.USER_ID = ?))";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithGroupIdorceCaseInsensitiveComp = [CtBinaryOperatorImpl][CtLiteralImpl]" AND (APP.GROUP_ID = ?" + [CtLiteralImpl]" OR ((APP.GROUP_ID='' OR APP.GROUP_ID IS NULL) AND LOWER(SUB.USER_ID) = LOWER(?)))";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithMultiGroupId = [CtBinaryOperatorImpl][CtLiteralImpl]" AND  ( (APP.APPLICATION_ID IN (SELECT APPLICATION_ID FROM " + [CtLiteralImpl]"AM_APPLICATION_GROUP_MAPPING WHERE GROUP_ID IN ($params) AND TENANT = ?))  OR  ( SUB.USER_ID = ? ))";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithMultiGroupIdCaseInsensitive = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]" AND  ( (APP.APPLICATION_ID IN  (SELECT APPLICATION_ID " + [CtLiteralImpl]"FROM AM_APPLICATION_GROUP_MAPPING  WHERE GROUP_ID IN ($params) AND TENANT = ?))  OR  ( LOWER(SUB.USER_ID) = LOWER") + [CtLiteralImpl]"(?) ))";
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]groupingId != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtLiteralImpl]"null".equals([CtVariableReadImpl]groupingId))) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]groupingId.isEmpty())) [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                        [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithMultiGroupIdCaseInsensitive;
                    } else [CtBlockImpl]{
                        [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithMultiGroupId;
                    }
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String groupIDArray[] = [CtInvocationImpl][CtVariableReadImpl]groupingId.split([CtLiteralImpl]",");
                    [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl]fillQueryParams([CtVariableReadImpl]connection, [CtVariableReadImpl]sqlQuery, [CtVariableReadImpl]groupIDArray, [CtLiteralImpl]3);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]applicationId);
                    [CtLocalVariableImpl][CtCommentImpl]// dynamically seeting the parameter index
                    [CtTypeReferenceImpl]int paramIndex = [CtBinaryOperatorImpl][CtFieldReadImpl][CtVariableReadImpl]groupIDArray.length + [CtLiteralImpl]2;
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]tenantDomain);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                } else [CtBlockImpl]{
                    [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                        [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithGroupIdorceCaseInsensitiveComp;
                    } else [CtBlockImpl]{
                        [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithGroupId;
                    }
                    [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]applicationId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtVariableReadImpl]groupingId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseForceCaseInsensitiveComp;
                } else [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClause;
                }
                [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantId);
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]applicationId);
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
            }
            [CtAssignmentImpl][CtVariableWriteImpl]result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]int index = [CtLiteralImpl]0;
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]index >= [CtVariableReadImpl]startSubIndex) && [CtBinaryOperatorImpl]([CtVariableReadImpl]index < [CtVariableReadImpl]endSubIndex)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiIdentifier = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomain([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_PROVIDER")), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_NAME"), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_VERSION"));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI subscribedAPI = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI([CtVariableReadImpl]subscriber, [CtVariableReadImpl]apiIdentifier);
                    [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setSubStatus([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUB_STATUS"));
                    [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setSubCreatedStatus([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUBS_CREATE_STATE"));
                    [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setTier([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Tier([CtInvocationImpl][CtVariableReadImpl]result.getString([CtTypeAccessImpl]APIConstants.SUBSCRIPTION_FIELD_TIER_ID)));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"APP_NAME"), [CtVariableReadImpl]subscriber);
                    [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setApplication([CtVariableReadImpl]application);
                    [CtInvocationImpl][CtVariableReadImpl]subscribedAPIs.add([CtVariableReadImpl]subscribedAPI);
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index == [CtBinaryOperatorImpl]([CtVariableReadImpl]endSubIndex - [CtLiteralImpl]1)) [CtBlockImpl]{
                        [CtBreakImpl]break;
                    }
                }
                [CtUnaryOperatorImpl][CtVariableWriteImpl]index++;
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get SubscribedAPI of :" + [CtInvocationImpl][CtVariableReadImpl]subscriber.getName(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]result);
        }
        [CtReturnImpl]return [CtVariableReadImpl]subscribedAPIs;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method returns the set of APIs for given subscriber
     *
     * @param subscriber
     * 		subscriber
     * @return Set<API>
     * @throws org.wso2.carbon.apimgt.api.APIManagementException
     * 		if failed to get SubscribedAPIs
     */
    public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI> getSubscribedAPIs([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupingId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI> subscribedAPIs = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.LinkedHashSet<>();
        [CtLocalVariableImpl][CtCommentImpl]// identify subscribeduser used email/ordinalusername
        [CtTypeReferenceImpl]java.lang.String subscribedUserName = [CtInvocationImpl]getLoginUserName([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
        [CtInvocationImpl][CtVariableReadImpl]subscriber.setName([CtVariableReadImpl]subscribedUserName);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtInvocationImpl]appendSubscriptionQueryWhereClause([CtVariableReadImpl]groupingId, [CtTypeAccessImpl]SQLConstants.GET_SUBSCRIBED_APIS_OF_SUBSCRIBER_SQL);
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtInvocationImpl]getSubscriptionResultSet([CtVariableReadImpl]groupingId, [CtVariableReadImpl]subscriber, [CtVariableReadImpl]ps)) [CtBlockImpl]{
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String apiType = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"TYPE");
                [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]APIConstants.API_PRODUCT.toString().equals([CtVariableReadImpl]apiType)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier identifier = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomain([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_PROVIDER")), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_NAME"), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_VERSION"));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI subscribedAPI = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI([CtVariableReadImpl]subscriber, [CtVariableReadImpl]identifier);
                    [CtInvocationImpl]initSubscribedAPIDetailed([CtVariableReadImpl]subscribedAPI, [CtVariableReadImpl]subscriber, [CtVariableReadImpl]result);
                    [CtInvocationImpl][CtVariableReadImpl]subscribedAPIs.add([CtVariableReadImpl]subscribedAPI);
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomain([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_PROVIDER")), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_NAME"), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_VERSION"));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI subscribedAPI = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI([CtVariableReadImpl]subscriber, [CtVariableReadImpl]identifier);
                    [CtInvocationImpl]initSubscribedAPIDetailed([CtVariableReadImpl]subscribedAPI, [CtVariableReadImpl]subscriber, [CtVariableReadImpl]result);
                    [CtInvocationImpl][CtVariableReadImpl]subscribedAPIs.add([CtVariableReadImpl]subscribedAPI);
                }
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get SubscribedAPI of :" + [CtInvocationImpl][CtVariableReadImpl]subscriber.getName(), [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]subscribedAPIs;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.sql.ResultSet getSubscriptionResultSet([CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupingId, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber, [CtParameterImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statement) throws [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
        [CtLocalVariableImpl][CtTypeReferenceImpl]int paramIndex = [CtLiteralImpl]0;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]groupingId != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtLiteralImpl]"null".equals([CtVariableReadImpl]groupingId))) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]groupingId.isEmpty())) [CtBlockImpl]{
            [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] groupIDArray = [CtInvocationImpl][CtVariableReadImpl]groupingId.split([CtLiteralImpl]",");
                [CtInvocationImpl][CtVariableReadImpl]statement.setInt([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]tenantId);
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String groupId : [CtVariableReadImpl]groupIDArray) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]groupId);
                }
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]tenantDomain);
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
            } else [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]statement.setInt([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]tenantId);
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]groupingId);
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
            }
        } else [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]statement.setInt([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]tenantId);
            [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
        }
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]statement.executeQuery();
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void initSubscribedAPIDetailed([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI subscribedAPI, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber, [CtParameterImpl][CtTypeReferenceImpl]java.sql.ResultSet result) throws [CtTypeReferenceImpl]java.sql.SQLException, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setSubscriptionId([CtInvocationImpl][CtVariableReadImpl]result.getInt([CtLiteralImpl]"SUBS_ID"));
        [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setSubStatus([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUB_STATUS"));
        [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setSubCreatedStatus([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUBS_CREATE_STATE"));
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tierName = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtTypeAccessImpl]APIConstants.SUBSCRIPTION_FIELD_TIER_ID);
        [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setTier([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Tier([CtVariableReadImpl]tierName));
        [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setUUID([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUB_UUID"));
        [CtLocalVariableImpl][CtCommentImpl]// setting NULL for subscriber. If needed, Subscriber object should be constructed &
        [CtCommentImpl]// passed in
        [CtTypeReferenceImpl]int applicationId = [CtInvocationImpl][CtVariableReadImpl]result.getInt([CtLiteralImpl]"APP_ID");
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"APP_NAME"), [CtVariableReadImpl]subscriber);
        [CtInvocationImpl][CtVariableReadImpl]application.setId([CtInvocationImpl][CtVariableReadImpl]result.getInt([CtLiteralImpl]"APP_ID"));
        [CtInvocationImpl][CtVariableReadImpl]application.setTokenType([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"APP_TOKEN_TYPE"));
        [CtInvocationImpl][CtVariableReadImpl]application.setCallbackUrl([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"CALLBACK_URL"));
        [CtInvocationImpl][CtVariableReadImpl]application.setUUID([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"APP_UUID"));
        [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl]getGroupId([CtInvocationImpl][CtVariableReadImpl]application.getId()));
            [CtInvocationImpl][CtVariableReadImpl]application.setOwner([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"OWNER"));
        }
        [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.setApplication([CtVariableReadImpl]application);
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]boolean isAccessTokenExists([CtParameterImpl][CtTypeReferenceImpl]java.lang.String accessToken) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String accessTokenStoreTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.ACCESS_TOKEN_STORE_TABLE;
        [CtAssignmentImpl][CtVariableWriteImpl]accessTokenStoreTable = [CtInvocationImpl]getAccessTokenStoreTableFromAccessToken([CtVariableReadImpl]accessToken, [CtVariableReadImpl]accessTokenStoreTable);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getTokenSql = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.IS_ACCESS_TOKEN_EXISTS_PREFIX + [CtVariableReadImpl]accessTokenStoreTable) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.IS_ACCESS_TOKEN_EXISTS_SUFFIX;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean tokenExists = [CtLiteralImpl]false;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getTokenSql);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String encryptedAccessToken = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.encryptToken([CtVariableReadImpl]accessToken);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]encryptedAccessToken);
            [CtAssignmentImpl][CtVariableWriteImpl]result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]tokenExists = [CtLiteralImpl]true;
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to check availability of the access token. ", [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.core.util.CryptoException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to check availability of the access token. ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]result);
        }
        [CtReturnImpl]return [CtVariableReadImpl]tokenExists;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]boolean isAccessTokenRevoked([CtParameterImpl][CtTypeReferenceImpl]java.lang.String accessToken) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String accessTokenStoreTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.ACCESS_TOKEN_STORE_TABLE;
        [CtAssignmentImpl][CtVariableWriteImpl]accessTokenStoreTable = [CtInvocationImpl]getAccessTokenStoreTableFromAccessToken([CtVariableReadImpl]accessToken, [CtVariableReadImpl]accessTokenStoreTable);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getTokenSql = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.IS_ACCESS_TOKEN_REVOKED_PREFIX + [CtVariableReadImpl]accessTokenStoreTable) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.IS_ACCESS_TOKE_REVOKED_SUFFIX;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean tokenExists = [CtLiteralImpl]false;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getTokenSql);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String encryptedAccessToken = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.encryptToken([CtVariableReadImpl]accessToken);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]encryptedAccessToken);
            [CtAssignmentImpl][CtVariableWriteImpl]result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtLiteralImpl]"REVOKED".equals([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"TOKEN_STATE"))) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]tokenExists = [CtLiteralImpl]true;
                }
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to check availability of the access token. ", [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.core.util.CryptoException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to check availability of the access token. ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]result);
        }
        [CtReturnImpl]return [CtVariableReadImpl]tokenExists;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey getAccessTokenData([CtParameterImpl][CtTypeReferenceImpl]java.lang.String accessToken) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey apiKey = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String accessTokenStoreTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.ACCESS_TOKEN_STORE_TABLE;
        [CtAssignmentImpl][CtVariableWriteImpl]accessTokenStoreTable = [CtInvocationImpl]getAccessTokenStoreTableFromAccessToken([CtVariableReadImpl]accessToken, [CtVariableReadImpl]accessTokenStoreTable);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getTokenSql = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ACCESS_TOKEN_DATA_PREFIX + [CtVariableReadImpl]accessTokenStoreTable) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ACCESS_TOKEN_DATA_SUFFIX;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getTokenSql);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.encryptToken([CtVariableReadImpl]accessToken));
            [CtAssignmentImpl][CtVariableWriteImpl]result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String decryptedAccessToken = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.decryptToken([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"ACCESS_TOKEN"));[CtCommentImpl]// todo - check

                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String endUserName = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtTypeAccessImpl]APIConstants.IDENTITY_OAUTH2_FIELD_AUTHORIZED_USER);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domainName = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtTypeAccessImpl]APIConstants.IDENTITY_OAUTH2_FIELD_USER_DOMAIN);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String endUsernameWithDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]endUserName, [CtVariableReadImpl]domainName);
                [CtInvocationImpl][CtVariableReadImpl]apiKey.setAuthUser([CtVariableReadImpl]endUsernameWithDomain);
                [CtInvocationImpl][CtVariableReadImpl]apiKey.setAccessToken([CtVariableReadImpl]decryptedAccessToken);
                [CtInvocationImpl][CtVariableReadImpl]apiKey.setCreatedDate([CtArrayReadImpl][CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]result.getTimestamp([CtLiteralImpl]"TIME_CREATED").toString().split([CtLiteralImpl]"\\.")[[CtLiteralImpl]0]);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String consumerKey = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"CONSUMER_KEY");
                [CtInvocationImpl][CtVariableReadImpl]apiKey.setConsumerKey([CtVariableReadImpl]consumerKey);
                [CtInvocationImpl][CtVariableReadImpl]apiKey.setValidityPeriod([CtInvocationImpl][CtVariableReadImpl]result.getLong([CtLiteralImpl]"VALIDITY_PERIOD"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> scopes = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
                [CtDoImpl]do [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]scopes.add([CtInvocationImpl][CtVariableReadImpl]result.getString([CtTypeAccessImpl]APIConstants.IDENTITY_OAUTH2_FIELD_TOKEN_SCOPE));
                } while ([CtInvocationImpl][CtVariableReadImpl]result.next() );
                [CtInvocationImpl][CtVariableReadImpl]apiKey.setTokenScope([CtInvocationImpl]getScopeString([CtVariableReadImpl]scopes));
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get the access token data. ", [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.core.util.CryptoException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get the access token data. ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]result);
        }
        [CtReturnImpl]return [CtVariableReadImpl]apiKey;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey> getAccessTokens([CtParameterImpl][CtTypeReferenceImpl]java.lang.String query) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey> tokenDataMap = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey>();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.checkAccessTokenPartitioningEnabled() && [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.checkUserNameAssertionEnabled()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] keyStoreTables = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getAvailableKeyStoreTables();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]keyStoreTables != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String keyStoreTable : [CtVariableReadImpl]keyStoreTables) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey> tokenDataMapTmp = [CtInvocationImpl]getAccessTokens([CtVariableReadImpl]query, [CtInvocationImpl]getTokenSql([CtVariableReadImpl]keyStoreTable));
                    [CtInvocationImpl][CtVariableReadImpl]tokenDataMap.putAll([CtVariableReadImpl]tokenDataMapTmp);
                }
            }
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]tokenDataMap = [CtInvocationImpl]getAccessTokens([CtVariableReadImpl]query, [CtInvocationImpl]getTokenSql([CtLiteralImpl]null));
        }
        [CtReturnImpl]return [CtVariableReadImpl]tokenDataMap;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey> getAccessTokens([CtParameterImpl][CtTypeReferenceImpl]java.lang.String query, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String getTokenSql) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey> tokenDataMap = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getTokenSql);
            [CtAssignmentImpl][CtVariableWriteImpl]result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean accessTokenRowBreaker = [CtLiteralImpl]false;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Integer i = [CtLiteralImpl]0;
            [CtWhileImpl]while ([CtBinaryOperatorImpl][CtVariableReadImpl]accessTokenRowBreaker || [CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]accessTokenRowBreaker = [CtLiteralImpl]false;
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String accessToken = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.decryptToken([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"ACCESS_TOKEN"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String regex = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"(?i)[a-zA-Z0-9_.-|]*" + [CtInvocationImpl][CtVariableReadImpl]query.trim()) + [CtLiteralImpl]"(?i)[a-zA-Z0-9_.-|]*";
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.regex.Pattern pattern;
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.regex.Matcher matcher;
                [CtAssignmentImpl][CtVariableWriteImpl]pattern = [CtInvocationImpl][CtTypeAccessImpl]java.util.regex.Pattern.compile([CtVariableReadImpl]regex);
                [CtAssignmentImpl][CtVariableWriteImpl]matcher = [CtInvocationImpl][CtVariableReadImpl]pattern.matcher([CtVariableReadImpl]accessToken);
                [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]matcher.matches()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey apiKey = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey();
                    [CtInvocationImpl][CtVariableReadImpl]apiKey.setAccessToken([CtVariableReadImpl]accessToken);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String username = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtTypeAccessImpl]APIConstants.IDENTITY_OAUTH2_FIELD_AUTHORIZED_USER);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domainName = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtTypeAccessImpl]APIConstants.IDENTITY_OAUTH2_FIELD_USER_DOMAIN);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String endUsernameWithDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]username, [CtVariableReadImpl]domainName);
                    [CtInvocationImpl][CtVariableReadImpl]apiKey.setAuthUser([CtVariableReadImpl]endUsernameWithDomain);
                    [CtInvocationImpl][CtVariableReadImpl]apiKey.setCreatedDate([CtArrayReadImpl][CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]result.getTimestamp([CtLiteralImpl]"TIME_CREATED").toString().split([CtLiteralImpl]"\\.")[[CtLiteralImpl]0]);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String consumerKey = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"CONSUMER_KEY");
                    [CtInvocationImpl][CtVariableReadImpl]apiKey.setConsumerKey([CtVariableReadImpl]consumerKey);
                    [CtInvocationImpl][CtVariableReadImpl]apiKey.setValidityPeriod([CtInvocationImpl][CtVariableReadImpl]result.getLong([CtLiteralImpl]"VALIDITY_PERIOD"));
                    [CtLocalVariableImpl][CtCommentImpl]// Load all the rows to in memory and build the scope string
                    [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> scopes = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tokenString = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"ACCESS_TOKEN");
                    [CtDoImpl]do [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String currentRowTokenString = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"ACCESS_TOKEN");
                        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]tokenString.equals([CtVariableReadImpl]currentRowTokenString)) [CtBlockImpl]{
                            [CtInvocationImpl][CtVariableReadImpl]scopes.add([CtInvocationImpl][CtVariableReadImpl]result.getString([CtTypeAccessImpl]APIConstants.IDENTITY_OAUTH2_FIELD_TOKEN_SCOPE));
                        } else [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]accessTokenRowBreaker = [CtLiteralImpl]true;
                            [CtBreakImpl]break;
                        }
                    } while ([CtInvocationImpl][CtVariableReadImpl]result.next() );
                    [CtInvocationImpl][CtVariableReadImpl]apiKey.setTokenScope([CtInvocationImpl]getScopeString([CtVariableReadImpl]scopes));
                    [CtInvocationImpl][CtVariableReadImpl]tokenDataMap.put([CtVariableReadImpl]i, [CtVariableReadImpl]apiKey);
                    [CtUnaryOperatorImpl][CtVariableWriteImpl]i++;
                }
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get access token data. ", [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.core.util.CryptoException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get access token data. ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]result);
        }
        [CtReturnImpl]return [CtVariableReadImpl]tokenDataMap;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.lang.String getTokenSql([CtParameterImpl][CtTypeReferenceImpl]java.lang.String accessTokenStoreTable) [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tokenStoreTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.ACCESS_TOKEN_STORE_TABLE;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]accessTokenStoreTable != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]tokenStoreTable = [CtVariableReadImpl]accessTokenStoreTable;
        }
        [CtReturnImpl]return [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_TOKEN_SQL_PREFIX + [CtVariableReadImpl]tokenStoreTable) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_TOKEN_SQL_SUFFIX;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey> getAccessTokensByUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String user, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String loggedInUser) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey> tokenDataMap = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String accessTokenStoreTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.ACCESS_TOKEN_STORE_TABLE;
        [CtAssignmentImpl][CtVariableWriteImpl]accessTokenStoreTable = [CtInvocationImpl]getAccessTokenStoreTableNameOfUserId([CtVariableReadImpl]user, [CtVariableReadImpl]accessTokenStoreTable);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getTokenSql = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ACCESS_TOKEN_BY_USER_PREFIX + [CtVariableReadImpl]accessTokenStoreTable) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ACCESS_TOKEN_BY_USER_SUFFIX;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getTokenSql);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]user);
            [CtAssignmentImpl][CtVariableWriteImpl]result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Integer i = [CtLiteralImpl]0;
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean accessTokenRowBreaker = [CtLiteralImpl]false;
            [CtWhileImpl]while ([CtBinaryOperatorImpl][CtVariableReadImpl]accessTokenRowBreaker || [CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]accessTokenRowBreaker = [CtLiteralImpl]false;
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String username = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtTypeAccessImpl]APIConstants.IDENTITY_OAUTH2_FIELD_AUTHORIZED_USER);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domainName = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtTypeAccessImpl]APIConstants.IDENTITY_OAUTH2_FIELD_USER_DOMAIN);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String authorizedUserWithDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]username, [CtVariableReadImpl]domainName);
                [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.isLoggedInUserAuthorizedToRevokeToken([CtVariableReadImpl]loggedInUser, [CtVariableReadImpl]authorizedUserWithDomain)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String accessToken = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.decryptToken([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"ACCESS_TOKEN"));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey apiKey = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey();
                    [CtInvocationImpl][CtVariableReadImpl]apiKey.setAccessToken([CtVariableReadImpl]accessToken);
                    [CtInvocationImpl][CtVariableReadImpl]apiKey.setAuthUser([CtVariableReadImpl]authorizedUserWithDomain);
                    [CtInvocationImpl][CtVariableReadImpl]apiKey.setCreatedDate([CtArrayReadImpl][CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]result.getTimestamp([CtLiteralImpl]"TIME_CREATED").toString().split([CtLiteralImpl]"\\.")[[CtLiteralImpl]0]);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String consumerKey = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"CONSUMER_KEY");
                    [CtInvocationImpl][CtVariableReadImpl]apiKey.setConsumerKey([CtVariableReadImpl]consumerKey);
                    [CtInvocationImpl][CtVariableReadImpl]apiKey.setValidityPeriod([CtInvocationImpl][CtVariableReadImpl]result.getLong([CtLiteralImpl]"VALIDITY_PERIOD"));
                    [CtLocalVariableImpl][CtCommentImpl]// Load all the rows to in memory and build the scope string
                    [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> scopes = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tokenString = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"ACCESS_TOKEN");
                    [CtDoImpl]do [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String currentRowTokenString = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"ACCESS_TOKEN");
                        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]tokenString.equals([CtVariableReadImpl]currentRowTokenString)) [CtBlockImpl]{
                            [CtInvocationImpl][CtVariableReadImpl]scopes.add([CtInvocationImpl][CtVariableReadImpl]result.getString([CtTypeAccessImpl]APIConstants.IDENTITY_OAUTH2_FIELD_TOKEN_SCOPE));
                        } else [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]accessTokenRowBreaker = [CtLiteralImpl]true;
                            [CtBreakImpl]break;
                        }
                    } while ([CtInvocationImpl][CtVariableReadImpl]result.next() );
                    [CtInvocationImpl][CtVariableReadImpl]apiKey.setTokenScope([CtInvocationImpl]getScopeString([CtVariableReadImpl]scopes));
                    [CtInvocationImpl][CtVariableReadImpl]tokenDataMap.put([CtVariableReadImpl]i, [CtVariableReadImpl]apiKey);
                    [CtUnaryOperatorImpl][CtVariableWriteImpl]i++;
                }
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get access token data. ", [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.core.util.CryptoException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get access token data. ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]result);
        }
        [CtReturnImpl]return [CtVariableReadImpl]tokenDataMap;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo> getOAuthApplications([CtParameterImpl][CtTypeReferenceImpl]int applicationId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo> map = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo prodApp = [CtInvocationImpl]getClientOfApplication([CtVariableReadImpl]applicationId, [CtLiteralImpl]"PRODUCTION");
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]prodApp != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]map.put([CtLiteralImpl]"PRODUCTION", [CtVariableReadImpl]prodApp);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo sandboxApp = [CtInvocationImpl]getClientOfApplication([CtVariableReadImpl]applicationId, [CtLiteralImpl]"SANDBOX");
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]sandboxApp != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]map.put([CtLiteralImpl]"SANDBOX", [CtVariableReadImpl]sandboxApp);
        }
        [CtReturnImpl]return [CtVariableReadImpl]map;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo getClientOfApplication([CtParameterImpl][CtTypeReferenceImpl]int applicationID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String keyType) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_CLIENT_OF_APPLICATION_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.KeyManager keyManager = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo oAuthApplication = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String consumerKey = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationID);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]keyType);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]consumerKey = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]1);
            } 
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]consumerKey != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]keyManager = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.factory.KeyManagerHolder.getKeyManagerInstance();
                [CtAssignmentImpl][CtVariableWriteImpl]oAuthApplication = [CtInvocationImpl][CtVariableReadImpl]keyManager.retrieveApplication([CtVariableReadImpl]consumerKey);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get  client of application. SQL error", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]oAuthApplication;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey getKeyStatusOfApplication([CtParameterImpl][CtTypeReferenceImpl]java.lang.String keyType, [CtParameterImpl][CtTypeReferenceImpl]int applicationId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement preparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey key = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_KEY_STATUS_OF_APPLICATION_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]preparedStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
            [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setString([CtLiteralImpl]2, [CtVariableReadImpl]keyType);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]preparedStatement.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]key = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey();
                [CtInvocationImpl][CtVariableReadImpl]key.setState([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"STATE"));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error occurred while getting the State of Access Token", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]preparedStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]key;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Gets ConsumerKeys when given the Application ID.
     *
     * @param applicationId
     * @return {@link java.util.Set} containing ConsumerKeys
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.String> getConsumerKeysOfApplication([CtParameterImpl][CtTypeReferenceImpl]int applicationId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement preparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.String> consumerKeys = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<[CtTypeReferenceImpl]java.lang.String>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_CONSUMER_KEYS_OF_APPLICATION_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]preparedStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]preparedStatement.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String consumerKey = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"CONSUMER_KEY");
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]consumerKey != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]consumerKeys.add([CtVariableReadImpl]consumerKey);
                }
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error occurred while getting the State of Access Token", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]preparedStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]consumerKeys;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.String> getApplicationKeys([CtParameterImpl][CtTypeReferenceImpl]int applicationId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.String> apiKeys = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<[CtTypeReferenceImpl]java.lang.String>();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.checkAccessTokenPartitioningEnabled() && [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.checkUserNameAssertionEnabled()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] keyStoreTables = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getAvailableKeyStoreTables();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]keyStoreTables != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String keyStoreTable : [CtVariableReadImpl]keyStoreTables) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]apiKeys = [CtInvocationImpl]getApplicationKeys([CtVariableReadImpl]applicationId, [CtInvocationImpl]getKeysSql([CtVariableReadImpl]keyStoreTable));
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]apiKeys.size() > [CtLiteralImpl]0) [CtBlockImpl]{
                        [CtBreakImpl]break;
                    }
                }
            }
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]apiKeys = [CtInvocationImpl]getApplicationKeys([CtVariableReadImpl]applicationId, [CtInvocationImpl]getKeysSql([CtLiteralImpl]null));
        }
        [CtReturnImpl]return [CtVariableReadImpl]apiKeys;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void updateTierPermissions([CtParameterImpl][CtTypeReferenceImpl]java.lang.String tierName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String permissionType, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String roles, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement insertOrUpdatePS = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int tierPermissionId = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getTierPermissionQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_TIER_PERMISSION_ID_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]getTierPermissionQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]tierName);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]tierPermissionId = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"TIER_PERMISSIONS_ID");
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]tierPermissionId == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_TIER_PERMISSION_SQL;
                [CtAssignmentImpl][CtVariableWriteImpl]insertOrUpdatePS = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]query);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.setString([CtLiteralImpl]1, [CtVariableReadImpl]tierName);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.setString([CtLiteralImpl]2, [CtVariableReadImpl]permissionType);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.setString([CtLiteralImpl]3, [CtVariableReadImpl]roles);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.setInt([CtLiteralImpl]4, [CtVariableReadImpl]tenantId);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.execute();
            } else [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_TIER_PERMISSION_SQL;
                [CtAssignmentImpl][CtVariableWriteImpl]insertOrUpdatePS = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]query);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.setString([CtLiteralImpl]1, [CtVariableReadImpl]tierName);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.setString([CtLiteralImpl]2, [CtVariableReadImpl]permissionType);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.setString([CtLiteralImpl]3, [CtVariableReadImpl]roles);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.setInt([CtLiteralImpl]4, [CtVariableReadImpl]tierPermissionId);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.setInt([CtLiteralImpl]5, [CtVariableReadImpl]tenantId);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.executeUpdate();
            }
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error in updating tier permissions: " + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]insertOrUpdatePS, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.TierPermissionDTO> getTierPermissions([CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.TierPermissionDTO> tierPermissions = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.TierPermissionDTO>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getTierPermissionQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_TIER_PERMISSIONS_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]getTierPermissionQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.TierPermissionDTO tierPermission = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.TierPermissionDTO();
                [CtInvocationImpl][CtVariableReadImpl]tierPermission.setTierName([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"TIER"));
                [CtInvocationImpl][CtVariableReadImpl]tierPermission.setPermissionType([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"PERMISSIONS_TYPE"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roles = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"ROLES");
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]roles != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]roles.isEmpty())) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String roleList[] = [CtInvocationImpl][CtVariableReadImpl]roles.split([CtLiteralImpl]",");
                    [CtInvocationImpl][CtVariableReadImpl]tierPermission.setRoles([CtVariableReadImpl]roleList);
                }
                [CtInvocationImpl][CtVariableReadImpl]tierPermissions.add([CtVariableReadImpl]tierPermission);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get Tier permission information ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]tierPermissions;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.TierPermissionDTO getTierPermission([CtParameterImpl][CtTypeReferenceImpl]java.lang.String tierName, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.TierPermissionDTO tierPermission = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getTierPermissionQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_PERMISSION_OF_TIER_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]getTierPermissionQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]tierName);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]tierPermission = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.TierPermissionDTO();
                [CtInvocationImpl][CtVariableReadImpl]tierPermission.setTierName([CtVariableReadImpl]tierName);
                [CtInvocationImpl][CtVariableReadImpl]tierPermission.setPermissionType([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"PERMISSIONS_TYPE"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roles = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"ROLES");
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]roles != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String roleList[] = [CtInvocationImpl][CtVariableReadImpl]roles.split([CtLiteralImpl]",");
                    [CtInvocationImpl][CtVariableReadImpl]tierPermission.setRoles([CtVariableReadImpl]roleList);
                }
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get Tier permission information for Tier " + [CtVariableReadImpl]tierName, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]tierPermission;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.TierPermissionDTO getThrottleTierPermission([CtParameterImpl][CtTypeReferenceImpl]java.lang.String tierName, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.TierPermissionDTO tierPermission = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getTierPermissionQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_THROTTLE_TIER_PERMISSION_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]getTierPermissionQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]tierName);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]tierPermission = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.TierPermissionDTO();
                [CtInvocationImpl][CtVariableReadImpl]tierPermission.setTierName([CtVariableReadImpl]tierName);
                [CtInvocationImpl][CtVariableReadImpl]tierPermission.setPermissionType([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"PERMISSIONS_TYPE"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roles = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"ROLES");
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]roles != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String roleList[] = [CtInvocationImpl][CtVariableReadImpl]roles.split([CtLiteralImpl]",");
                    [CtInvocationImpl][CtVariableReadImpl]tierPermission.setRoles([CtVariableReadImpl]roleList);
                }
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get Tier permission information for Tier " + [CtVariableReadImpl]tierName, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]tierPermission;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void updateThrottleTierPermissions([CtParameterImpl][CtTypeReferenceImpl]java.lang.String tierName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String permissionType, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String roles, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement insertOrUpdatePS = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int tierPermissionId = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getTierPermissionQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_THROTTLE_TIER_PERMISSION_ID_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]getTierPermissionQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]tierName);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]tierPermissionId = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"THROTTLE_TIER_PERMISSIONS_ID");
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]tierPermissionId == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_THROTTLE_TIER_PERMISSION_SQL;
                [CtAssignmentImpl][CtVariableWriteImpl]insertOrUpdatePS = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]query);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.setString([CtLiteralImpl]1, [CtVariableReadImpl]tierName);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.setString([CtLiteralImpl]2, [CtVariableReadImpl]permissionType);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.setString([CtLiteralImpl]3, [CtVariableReadImpl]roles);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.setInt([CtLiteralImpl]4, [CtVariableReadImpl]tenantId);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.execute();
            } else [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_THROTTLE_TIER_PERMISSION_SQL;
                [CtAssignmentImpl][CtVariableWriteImpl]insertOrUpdatePS = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]query);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.setString([CtLiteralImpl]1, [CtVariableReadImpl]tierName);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.setString([CtLiteralImpl]2, [CtVariableReadImpl]permissionType);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.setString([CtLiteralImpl]3, [CtVariableReadImpl]roles);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.setInt([CtLiteralImpl]4, [CtVariableReadImpl]tierPermissionId);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.setInt([CtLiteralImpl]5, [CtVariableReadImpl]tenantId);
                [CtInvocationImpl][CtVariableReadImpl]insertOrUpdatePS.executeUpdate();
            }
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error in updating tier permissions: " + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]insertOrUpdatePS, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.TierPermissionDTO> getThrottleTierPermissions([CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.TierPermissionDTO> tierPermissions = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.TierPermissionDTO>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getTierPermissionQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_THROTTLE_TIER_PERMISSIONS_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]getTierPermissionQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.TierPermissionDTO tierPermission = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.TierPermissionDTO();
                [CtInvocationImpl][CtVariableReadImpl]tierPermission.setTierName([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"TIER"));
                [CtInvocationImpl][CtVariableReadImpl]tierPermission.setPermissionType([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"PERMISSIONS_TYPE"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roles = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"ROLES");
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]roles != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]roles.isEmpty())) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String roleList[] = [CtInvocationImpl][CtVariableReadImpl]roles.split([CtLiteralImpl]",");
                    [CtInvocationImpl][CtVariableReadImpl]tierPermission.setRoles([CtVariableReadImpl]roleList);
                }
                [CtInvocationImpl][CtVariableReadImpl]tierPermissions.add([CtVariableReadImpl]tierPermission);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get Tier permission information ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]tierPermissions;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.String> getApplicationKeys([CtParameterImpl][CtTypeReferenceImpl]int applicationId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String getKeysSql) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.String> apiKeys = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<[CtTypeReferenceImpl]java.lang.String>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getKeysSql);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
            [CtAssignmentImpl][CtVariableWriteImpl]result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]apiKeys.add([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.decryptToken([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"ACCESS_TOKEN")));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get keys for application: " + [CtVariableReadImpl]applicationId, [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.core.util.CryptoException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get keys for application: " + [CtVariableReadImpl]applicationId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]result);
        }
        [CtReturnImpl]return [CtVariableReadImpl]apiKeys;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.lang.String getKeysSql([CtParameterImpl][CtTypeReferenceImpl]java.lang.String accessTokenStoreTable) [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tokenStoreTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.ACCESS_TOKEN_STORE_TABLE;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]accessTokenStoreTable != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]tokenStoreTable = [CtVariableReadImpl]accessTokenStoreTable;
        }
        [CtReturnImpl]return [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_KEY_SQL_PREFIX + [CtVariableReadImpl]tokenStoreTable) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_KEY_SQL_SUFFIX;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get access token data based on application ID
     *
     * @param subscriptionId
     * 		Subscription Id
     * @return access token data
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> getAccessTokenData([CtParameterImpl][CtTypeReferenceImpl]int subscriptionId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> apiKeys = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.checkAccessTokenPartitioningEnabled() && [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.checkUserNameAssertionEnabled()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] keyStoreTables = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getAvailableKeyStoreTables();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]keyStoreTables != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String keyStoreTable : [CtVariableReadImpl]keyStoreTables) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]apiKeys = [CtInvocationImpl]getAccessTokenData([CtVariableReadImpl]subscriptionId, [CtInvocationImpl]getKeysSqlUsingSubscriptionId([CtVariableReadImpl]keyStoreTable));
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]apiKeys.size() > [CtLiteralImpl]0) [CtBlockImpl]{
                        [CtBreakImpl]break;
                    }
                }
            }
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]apiKeys = [CtInvocationImpl]getAccessTokenData([CtVariableReadImpl]subscriptionId, [CtInvocationImpl]getKeysSqlUsingSubscriptionId([CtLiteralImpl]null));
        }
        [CtReturnImpl]return [CtVariableReadImpl]apiKeys;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> getAccessTokenData([CtParameterImpl][CtTypeReferenceImpl]int subscriptionId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String getKeysSql) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> apiKeys = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getKeysSql);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]subscriptionId);
            [CtAssignmentImpl][CtVariableWriteImpl]result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]apiKeys.put([CtLiteralImpl]"token", [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.decryptToken([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"ACCESS_TOKEN")));
                [CtInvocationImpl][CtVariableReadImpl]apiKeys.put([CtLiteralImpl]"status", [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"TOKEN_STATE"));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get keys for application: " + [CtVariableReadImpl]subscriptionId, [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.core.util.CryptoException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get keys for application: " + [CtVariableReadImpl]subscriptionId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]result);
        }
        [CtReturnImpl]return [CtVariableReadImpl]apiKeys;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.lang.String getKeysSqlUsingSubscriptionId([CtParameterImpl][CtTypeReferenceImpl]java.lang.String accessTokenStoreTable) [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tokenStoreTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.ACCESS_TOKEN_STORE_TABLE;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]accessTokenStoreTable != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]tokenStoreTable = [CtVariableReadImpl]accessTokenStoreTable;
        }
        [CtReturnImpl]return [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_KEY_SQL_OF_SUBSCRIPTION_ID_PREFIX + [CtVariableReadImpl]tokenStoreTable) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_KEY_SQL_OF_SUBSCRIPTION_ID_SUFFIX;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method returns the set of Subscribers for given provider
     *
     * @param providerName
     * 		name of the provider
     * @return Set<Subscriber>
     * @throws APIManagementException
     * 		if failed to get subscribers for given provider
     */
    public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber> getSubscribersOfProvider([CtParameterImpl][CtTypeReferenceImpl]java.lang.String providerName) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber> subscribers = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIBERS_OF_PROVIDER_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtVariableReadImpl]providerName));
            [CtAssignmentImpl][CtVariableWriteImpl]result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtCommentImpl]// Subscription table should have API_VERSION AND API_PROVIDER
                [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber([CtInvocationImpl][CtVariableReadImpl]result.getString([CtTypeAccessImpl]APIConstants.SUBSCRIBER_FIELD_EMAIL_ADDRESS));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setName([CtInvocationImpl][CtVariableReadImpl]result.getString([CtTypeAccessImpl]APIConstants.SUBSCRIBER_FIELD_USER_ID));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setSubscribedDate([CtInvocationImpl][CtVariableReadImpl]result.getDate([CtTypeAccessImpl]APIConstants.SUBSCRIBER_FIELD_DATE_SUBSCRIBED));
                [CtInvocationImpl][CtVariableReadImpl]subscribers.add([CtVariableReadImpl]subscriber);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to subscribers for :" + [CtVariableReadImpl]providerName, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]result);
        }
        [CtReturnImpl]return [CtVariableReadImpl]subscribers;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber> getSubscribersOfAPI([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber> subscribers = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIBERS_OF_API_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]identifier.getApiName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]identifier.getVersion());
            [CtAssignmentImpl][CtVariableWriteImpl]result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber([CtInvocationImpl][CtVariableReadImpl]result.getString([CtTypeAccessImpl]APIConstants.SUBSCRIBER_FIELD_USER_ID));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setSubscribedDate([CtInvocationImpl][CtVariableReadImpl]result.getTimestamp([CtTypeAccessImpl]APIConstants.SUBSCRIBER_FIELD_DATE_SUBSCRIBED));
                [CtInvocationImpl][CtVariableReadImpl]subscribers.add([CtVariableReadImpl]subscriber);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get subscribers for :" + [CtInvocationImpl][CtVariableReadImpl]identifier.getApiName(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]result);
        }
        [CtReturnImpl]return [CtVariableReadImpl]subscribers;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]long getAPISubscriptionCountByAPI([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier identifier) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_SUBSCRIPTION_COUNT_BY_API_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String artifactType = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.API_IDENTIFIER_TYPE;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]identifier instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]artifactType = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.API_PRODUCT_IDENTIFIER_TYPE;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]long subscriptions = [CtLiteralImpl]0;
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]identifier.getName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]identifier.getVersion());
            [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery()) [CtBlockImpl]{
                [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]subscriptions = [CtInvocationImpl][CtVariableReadImpl]result.getLong([CtLiteralImpl]"SUB_ID");
                } 
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get subscription count for " + [CtVariableReadImpl]artifactType, [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]subscriptions;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is used to update the subscriber
     *
     * @param apiTypeWrapper
     * 		APIIdentifier
     * @param applicationId
     * 		Application id
     * @throws org.wso2.carbon.apimgt.api.APIManagementException
     * 		if failed to update subscriber
     */
    public [CtTypeReferenceImpl]void updateSubscriptions([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.ApiTypeWrapper apiTypeWrapper, [CtParameterImpl][CtTypeReferenceImpl]int applicationId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtInvocationImpl]addSubscription([CtVariableReadImpl]apiTypeWrapper, [CtVariableReadImpl]applicationId, [CtTypeAccessImpl]APIConstants.SubscriptionStatus.UNBLOCKED);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is used to update the subscription
     *
     * @param identifier
     * 		APIIdentifier
     * @param subStatus
     * 		Subscription Status[BLOCKED/UNBLOCKED]
     * @param applicationId
     * 		Application id
     * @throws org.wso2.carbon.apimgt.api.APIManagementException
     * 		if failed to update subscriber
     */
    public [CtTypeReferenceImpl]void updateSubscription([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String subStatus, [CtParameterImpl][CtTypeReferenceImpl]int applicationId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement updatePs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int apiId = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getApiQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_ID_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]getApiQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]identifier.getApiName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]identifier.getVersion());
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]apiId = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"API_ID");
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiId == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Unable to get the API ID for: " + [CtVariableReadImpl]identifier;
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subsCreateStatus = [CtInvocationImpl]getSubscriptionCreaeteStatus([CtVariableReadImpl]identifier, [CtVariableReadImpl]applicationId, [CtVariableReadImpl]conn);
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionCreatedStatus.UN_SUBSCRIBE.equals([CtVariableReadImpl]subsCreateStatus)) [CtBlockImpl]{
                [CtInvocationImpl]deleteSubscriptionByApiIDAndAppID([CtVariableReadImpl]apiId, [CtVariableReadImpl]applicationId, [CtVariableReadImpl]conn);
            }
            [CtLocalVariableImpl][CtCommentImpl]// This query to update the AM_SUBSCRIPTION table
            [CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_SUBSCRIPTION_OF_APPLICATION_SQL;
            [CtAssignmentImpl][CtCommentImpl]// Updating data to the AM_SUBSCRIPTION table
            [CtVariableWriteImpl]updatePs = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]updatePs.setString([CtLiteralImpl]1, [CtVariableReadImpl]subStatus);
            [CtInvocationImpl][CtVariableReadImpl]updatePs.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName());
            [CtInvocationImpl][CtVariableReadImpl]updatePs.setTimestamp([CtLiteralImpl]3, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.sql.Timestamp([CtInvocationImpl][CtTypeAccessImpl]java.lang.System.currentTimeMillis()));
            [CtInvocationImpl][CtVariableReadImpl]updatePs.setInt([CtLiteralImpl]4, [CtVariableReadImpl]apiId);
            [CtInvocationImpl][CtVariableReadImpl]updatePs.setInt([CtLiteralImpl]5, [CtVariableReadImpl]applicationId);
            [CtInvocationImpl][CtVariableReadImpl]updatePs.execute();
            [CtInvocationImpl][CtCommentImpl]// finally commit transaction
            [CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback the add subscription ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to update subscription data ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]updatePs, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is used to update the subscription
     *
     * @param subscribedAPI
     * 		subscribedAPI object that represents the new subscription detals
     * @throws APIManagementException
     * 		if failed to update subscription
     */
    public [CtTypeReferenceImpl]void updateSubscription([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI subscribedAPI) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtCommentImpl]// This query to update the AM_SUBSCRIPTION table
            [CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_SUBSCRIPTION_OF_UUID_SQL;
            [CtAssignmentImpl][CtCommentImpl]// Updating data to the AM_SUBSCRIPTION table
            [CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.getSubStatus());
            [CtInvocationImpl][CtCommentImpl]// TODO Need to find logged in user who does this update.
            [CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtLiteralImpl]null);
            [CtInvocationImpl][CtVariableReadImpl]ps.setTimestamp([CtLiteralImpl]3, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.sql.Timestamp([CtInvocationImpl][CtTypeAccessImpl]java.lang.System.currentTimeMillis()));
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]subscribedAPI.getUUID());
            [CtInvocationImpl][CtVariableReadImpl]ps.execute();
            [CtInvocationImpl][CtCommentImpl]// finally commit transaction
            [CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback the update subscription ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to update subscription data ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void updateSubscriptionStatus([CtParameterImpl][CtTypeReferenceImpl]int subscriptionId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String status) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtCommentImpl]// This query is to update the AM_SUBSCRIPTION table
            [CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_SUBSCRIPTION_STATUS_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]status);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]subscriptionId);
            [CtInvocationImpl][CtVariableReadImpl]ps.execute();
            [CtInvocationImpl][CtCommentImpl]// Commit transaction
            [CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback subscription status update ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to update subscription status ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.lang.String getRegistrationApprovalState([CtParameterImpl][CtTypeReferenceImpl]int appId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String keyType) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String state = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_REGISTRATION_APPROVAL_STATUS_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]appId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]keyType);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]state = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"STATE");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while getting Application Registration State.", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]state;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Update the consumer key and application status for the given key type and application.
     *
     * @param application
     * @param keyType
     */
    public [CtTypeReferenceImpl]void updateApplicationKeyTypeMapping([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String keyType) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo app = [CtInvocationImpl][CtVariableReadImpl]application.getOAuthApp([CtVariableReadImpl]keyType);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String consumerKey = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]app != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]consumerKey = [CtInvocationImpl][CtVariableReadImpl]app.getClientId();
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]consumerKey != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]application.getId() != [CtUnaryOperatorImpl](-[CtLiteralImpl]1))) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String addApplicationKeyMapping = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_APPLICAITON_KEY_TYPE_MAPPINGS_SQL;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
                [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
                [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]addApplicationKeyMapping);
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]consumerKey);
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]application.getId());
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtVariableReadImpl]keyType);
                [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
                [CtInvocationImpl][CtVariableReadImpl]connection.commit();
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
                [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error updating the CONSUMER KEY of the AM_APPLICATION_KEY_MAPPING table where " + [CtLiteralImpl]"APPLICATION_ID = ") + [CtInvocationImpl][CtVariableReadImpl]application.getId()) + [CtLiteralImpl]" and KEY_TYPE = ") + [CtVariableReadImpl]keyType, [CtVariableReadImpl]e);
            } finally [CtBlockImpl]{
                [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method will create a new client at key-manager side.further it will add new record to
     * the AM_APPLICATION_KEY_MAPPING table
     *
     * @param keyType
     * @param applicationName
     * 		apim application name.
     * @param userName
     * 		apim user name
     * @param clientId
     * 		this is the consumner key.
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void createApplicationKeyTypeMappingForManualClients([CtParameterImpl][CtTypeReferenceImpl]java.lang.String keyType, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String applicationName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String clientId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String consumerKey = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]clientId != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]consumerKey = [CtVariableReadImpl]clientId;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtCommentImpl]// APIM application id.
        [CtTypeReferenceImpl]int applicationId = [CtInvocationImpl]getApplicationId([CtVariableReadImpl]applicationName, [CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]consumerKey != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String addApplicationKeyMapping = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_APPLICATION_KEY_TYPE_MAPPING_SQL;
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
                [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
                [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]addApplicationKeyMapping);
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]consumerKey);
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtVariableReadImpl]keyType);
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]4, [CtTypeAccessImpl]APIConstants.AppRegistrationStatus.REGISTRATION_COMPLETED);
                [CtInvocationImpl][CtCommentImpl]// If the CK/CS pair is pasted on the screen set this to MAPPED
                [CtVariableReadImpl]ps.setString([CtLiteralImpl]5, [CtLiteralImpl]"MAPPED");
                [CtInvocationImpl][CtVariableReadImpl]ps.execute();
                [CtInvocationImpl][CtVariableReadImpl]connection.commit();
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
                [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error while inserting record to the AM_APPLICATION_KEY_MAPPING table,  " + [CtLiteralImpl]"error is =  ") + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]e);
            } finally [CtBlockImpl]{
                [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Updates the state of the Application Registration.
     *
     * @param state
     * 		State of the registration.
     * @param keyType
     * 		PRODUCTION | SANDBOX
     * @param appId
     * 		ID of the Application.
     * @throws APIManagementException
     * 		if updating fails.
     */
    public [CtTypeReferenceImpl]void updateApplicationRegistration([CtParameterImpl][CtTypeReferenceImpl]java.lang.String state, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String keyType, [CtParameterImpl][CtTypeReferenceImpl]int appId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlStmt = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_APPLICATION_KEY_MAPPING_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlStmt);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]state);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]appId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtVariableReadImpl]keyType);
            [CtInvocationImpl][CtVariableReadImpl]ps.execute();
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while updating registration entry.", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param apiIdentifier
     * 		APIIdentifier
     * @param userId
     * 		User Id
     * @return true if user subscribed for given APIIdentifier
     * @throws APIManagementException
     * 		if failed to check subscribed or not
     */
    public [CtTypeReferenceImpl]boolean isSubscribed([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiIdentifier, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isSubscribed = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String loginUserName = [CtInvocationImpl]getLoginUserName([CtVariableReadImpl]userId);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_SQL;
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_CASE_INSENSITIVE_SQL;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getApiName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getVersion());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]4, [CtVariableReadImpl]loginUserName);
            [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId;
            [CtAssignmentImpl][CtVariableWriteImpl]tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtVariableReadImpl]loginUserName);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]5, [CtVariableReadImpl]tenantId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]isSubscribed = [CtLiteralImpl]true;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while checking if user has subscribed to the API ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]isSubscribed;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param apiIdentifier
     * @param userId
     * @param applicationId
     * @return true if user app subscribed for given APIIdentifier
     * @throws APIManagementException
     * 		if failed to check subscribed or not
     */
    public [CtTypeReferenceImpl]boolean isSubscribedToApp([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiIdentifier, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId, [CtParameterImpl][CtTypeReferenceImpl]int applicationId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isSubscribed = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String loginUserName = [CtInvocationImpl]getLoginUserName([CtVariableReadImpl]userId);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APP_SUBSCRIPTION_TO_API_SQL;
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APP_SUBSCRIPTION_TO_API_CASE_INSENSITIVE_SQL;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getApiName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getVersion());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]4, [CtVariableReadImpl]loginUserName);
            [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId;
            [CtAssignmentImpl][CtVariableWriteImpl]tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtVariableReadImpl]loginUserName);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]5, [CtVariableReadImpl]tenantId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]6, [CtVariableReadImpl]applicationId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]isSubscribed = [CtLiteralImpl]true;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while checking if user has subscribed to the API ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]isSubscribed;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param providerName
     * 		Name of the provider
     * @return UserApplicationAPIUsage of given provider
     * @throws org.wso2.carbon.apimgt.api.APIManagementException
     * 		if failed to get
     * 		UserApplicationAPIUsage for given provider
     */
    public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.UserApplicationAPIUsage[] getAllAPIUsageByProvider([CtParameterImpl][CtTypeReferenceImpl]java.lang.String providerName) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APP_API_USAGE_BY_PROVIDER_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtVariableReadImpl]providerName));
            [CtAssignmentImpl][CtVariableWriteImpl]result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.UserApplicationAPIUsage> userApplicationUsages = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.TreeMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.UserApplicationAPIUsage>();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]int subId = [CtInvocationImpl][CtVariableReadImpl]result.getInt([CtLiteralImpl]"SUBSCRIPTION_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> keyData = [CtInvocationImpl]getAccessTokenData([CtVariableReadImpl]subId);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String accessToken = [CtInvocationImpl][CtVariableReadImpl]keyData.get([CtLiteralImpl]"token");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tokenStatus = [CtInvocationImpl][CtVariableReadImpl]keyData.get([CtLiteralImpl]"status");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userId = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"USER_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String application = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"APPNAME");
                [CtLocalVariableImpl][CtTypeReferenceImpl]int appId = [CtInvocationImpl][CtVariableReadImpl]result.getInt([CtLiteralImpl]"APPLICATION_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subStatus = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUB_STATUS");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subsCreateState = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUBS_CREATE_STATE");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String key = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]userId + [CtLiteralImpl]"::") + [CtVariableReadImpl]application;
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.UserApplicationAPIUsage usage = [CtInvocationImpl][CtVariableReadImpl]userApplicationUsages.get([CtVariableReadImpl]key);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]usage == [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]usage = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.UserApplicationAPIUsage();
                    [CtInvocationImpl][CtVariableReadImpl]usage.setUserId([CtVariableReadImpl]userId);
                    [CtInvocationImpl][CtVariableReadImpl]usage.setApplicationName([CtVariableReadImpl]application);
                    [CtInvocationImpl][CtVariableReadImpl]usage.setAppId([CtVariableReadImpl]appId);
                    [CtInvocationImpl][CtVariableReadImpl]usage.setAccessToken([CtVariableReadImpl]accessToken);
                    [CtInvocationImpl][CtVariableReadImpl]usage.setAccessTokenStatus([CtVariableReadImpl]tokenStatus);
                    [CtInvocationImpl][CtVariableReadImpl]userApplicationUsages.put([CtVariableReadImpl]key, [CtVariableReadImpl]usage);
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiId = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_PROVIDER"), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_NAME"), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_VERSION"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI apiSubscription = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber([CtVariableReadImpl]userId), [CtVariableReadImpl]apiId);
                [CtInvocationImpl][CtVariableReadImpl]apiSubscription.setSubStatus([CtVariableReadImpl]subStatus);
                [CtInvocationImpl][CtVariableReadImpl]apiSubscription.setSubCreatedStatus([CtVariableReadImpl]subsCreateState);
                [CtInvocationImpl][CtVariableReadImpl]apiSubscription.setUUID([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUB_UUID"));
                [CtInvocationImpl][CtVariableReadImpl]apiSubscription.setTier([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Tier([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUB_TIER_ID")));
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application applicationObj = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"APP_UUID"));
                [CtInvocationImpl][CtVariableReadImpl]apiSubscription.setApplication([CtVariableReadImpl]applicationObj);
                [CtInvocationImpl][CtVariableReadImpl]usage.addApiSubscriptions([CtVariableReadImpl]apiSubscription);
            } 
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userApplicationUsages.values().toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.UserApplicationAPIUsage[[CtInvocationImpl][CtVariableReadImpl]userApplicationUsages.size()]);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to find API Usage for :" + [CtVariableReadImpl]providerName, [CtVariableReadImpl]e);
            [CtReturnImpl]return [CtLiteralImpl]null;
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]result);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param providerName
     * 		Name of the provider
     * @return UserApplicationAPIUsage of given provider
     * @throws org.wso2.carbon.apimgt.api.APIManagementException
     * 		if failed to get
     * 		UserApplicationAPIUsage for given provider
     */
    public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.UserApplicationAPIUsage[] getAllAPIProductUsageByProvider([CtParameterImpl][CtTypeReferenceImpl]java.lang.String providerName) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.GET_APP_API_USAGE_BY_PROVIDER_SQL)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtVariableReadImpl]providerName));
            [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.UserApplicationAPIUsage> userApplicationUsages = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.TreeMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.UserApplicationAPIUsage>();
                [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int subId = [CtInvocationImpl][CtVariableReadImpl]result.getInt([CtLiteralImpl]"SUBSCRIPTION_ID");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> keyData = [CtInvocationImpl]getAccessTokenData([CtVariableReadImpl]subId);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String accessToken = [CtInvocationImpl][CtVariableReadImpl]keyData.get([CtLiteralImpl]"token");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tokenStatus = [CtInvocationImpl][CtVariableReadImpl]keyData.get([CtLiteralImpl]"status");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userId = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"USER_ID");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String application = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"APPNAME");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int appId = [CtInvocationImpl][CtVariableReadImpl]result.getInt([CtLiteralImpl]"APPLICATION_ID");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subStatus = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUB_STATUS");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subsCreateState = [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUBS_CREATE_STATE");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String key = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]userId + [CtLiteralImpl]"::") + [CtVariableReadImpl]application;
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.UserApplicationAPIUsage usage = [CtInvocationImpl][CtVariableReadImpl]userApplicationUsages.get([CtVariableReadImpl]key);
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]usage == [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]usage = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.UserApplicationAPIUsage();
                        [CtInvocationImpl][CtVariableReadImpl]usage.setUserId([CtVariableReadImpl]userId);
                        [CtInvocationImpl][CtVariableReadImpl]usage.setApplicationName([CtVariableReadImpl]application);
                        [CtInvocationImpl][CtVariableReadImpl]usage.setAppId([CtVariableReadImpl]appId);
                        [CtInvocationImpl][CtVariableReadImpl]usage.setAccessToken([CtVariableReadImpl]accessToken);
                        [CtInvocationImpl][CtVariableReadImpl]usage.setAccessTokenStatus([CtVariableReadImpl]tokenStatus);
                        [CtInvocationImpl][CtVariableReadImpl]userApplicationUsages.put([CtVariableReadImpl]key, [CtVariableReadImpl]usage);
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier apiProductId = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_PROVIDER"), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_NAME"), [CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_VERSION"));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI apiSubscription = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber([CtVariableReadImpl]userId), [CtVariableReadImpl]apiProductId);
                    [CtInvocationImpl][CtVariableReadImpl]apiSubscription.setSubStatus([CtVariableReadImpl]subStatus);
                    [CtInvocationImpl][CtVariableReadImpl]apiSubscription.setSubCreatedStatus([CtVariableReadImpl]subsCreateState);
                    [CtInvocationImpl][CtVariableReadImpl]apiSubscription.setUUID([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUB_UUID"));
                    [CtInvocationImpl][CtVariableReadImpl]apiSubscription.setTier([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Tier([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUB_TIER_ID")));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application applicationObj = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"APP_UUID"));
                    [CtInvocationImpl][CtVariableReadImpl]apiSubscription.setApplication([CtVariableReadImpl]applicationObj);
                    [CtInvocationImpl][CtVariableReadImpl]usage.addApiSubscriptions([CtVariableReadImpl]apiSubscription);
                } 
                [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userApplicationUsages.values().toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.UserApplicationAPIUsage[[CtInvocationImpl][CtVariableReadImpl]userApplicationUsages.size()]);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to find API Product Usage for :" + [CtVariableReadImpl]providerName, [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.UserApplicationAPIUsage[]{  };
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param apiName
     * 		Name of the API
     * @param apiVersion
     * 		Version of the API
     * @param provider
     * 		Name of API creator
     * @return All subscriptions of a given API
     * @throws org.wso2.carbon.apimgt.api.APIManagementException
     */
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI> getSubscriptionsOfAPI([CtParameterImpl][CtTypeReferenceImpl]java.lang.String apiName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String apiVersion, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String provider) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI> subscriptions = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTIONS_OF_API_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]apiName);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]apiVersion);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtVariableReadImpl]provider);
            [CtAssignmentImpl][CtVariableWriteImpl]result = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiId = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"API_PROVIDER"), [CtVariableReadImpl]apiName, [CtVariableReadImpl]apiVersion);
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"USER_ID"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI subscription = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.SubscribedAPI([CtVariableReadImpl]subscriber, [CtVariableReadImpl]apiId);
                [CtInvocationImpl][CtVariableReadImpl]subscription.setUUID([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUB_UUID"));
                [CtInvocationImpl][CtVariableReadImpl]subscription.setSubStatus([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUB_STATUS"));
                [CtInvocationImpl][CtVariableReadImpl]subscription.setSubCreatedStatus([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUBS_CREATE_STATE"));
                [CtInvocationImpl][CtVariableReadImpl]subscription.setTier([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Tier([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUB_TIER_ID")));
                [CtInvocationImpl][CtVariableReadImpl]subscription.setCreatedTime([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"SUB_CREATED_TIME"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtInvocationImpl][CtVariableReadImpl]result.getInt([CtLiteralImpl]"APPLICATION_ID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setName([CtInvocationImpl][CtVariableReadImpl]result.getString([CtLiteralImpl]"APPNAME"));
                [CtInvocationImpl][CtVariableReadImpl]subscription.setApplication([CtVariableReadImpl]application);
                [CtInvocationImpl][CtVariableReadImpl]subscriptions.add([CtVariableReadImpl]subscription);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while reading subscriptions of API: " + [CtVariableReadImpl]apiName) + [CtLiteralImpl]':') + [CtVariableReadImpl]apiVersion, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]result);
        }
        [CtReturnImpl]return [CtVariableReadImpl]subscriptions;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void updateOAuthConsumerApp([CtParameterImpl][CtTypeReferenceImpl]java.lang.String appName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String callbackUrl) throws [CtTypeReferenceImpl]org.wso2.carbon.identity.oauth.IdentityOAuthAdminException, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlStmt = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_OAUTH_CONSUMER_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlStmt);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]callbackUrl);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]appName);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error when updating OAuth consumer App for " + [CtVariableReadImpl]appName, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]boolean isDuplicateConsumer([CtParameterImpl][CtTypeReferenceImpl]java.lang.String consumerKey) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ALL_OAUTH_CONSUMER_APPS_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isDuplicateConsumer = [CtLiteralImpl]false;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]consumerKey);
            [CtAssignmentImpl][CtVariableWriteImpl]rSet = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]isDuplicateConsumer = [CtLiteralImpl]true;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error when reading the application information from" + [CtLiteralImpl]" the persistence store.", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]isDuplicateConsumer;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]int addApplication([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int applicationId = [CtLiteralImpl]0;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String loginUserName = [CtInvocationImpl]getLoginUserName([CtVariableReadImpl]userId);
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]applicationId = [CtInvocationImpl]addApplication([CtVariableReadImpl]application, [CtVariableReadImpl]loginUserName, [CtVariableReadImpl]conn);
            [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtInvocationImpl]getSubscriber([CtVariableReadImpl]userId);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                [CtInvocationImpl]updateGroupIDMappings([CtVariableReadImpl]conn, [CtVariableReadImpl]applicationId, [CtInvocationImpl][CtVariableReadImpl]application.getGroupId(), [CtVariableReadImpl]tenantDomain);
            }
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback the add Application ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to add Application", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtLiteralImpl]null, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
        [CtReturnImpl]return [CtVariableReadImpl]applicationId;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void addRating([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier id, [CtParameterImpl][CtTypeReferenceImpl]int rating, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String user) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtInvocationImpl]addOrUpdateRating([CtVariableReadImpl]id, [CtVariableReadImpl]rating, [CtVariableReadImpl]user, [CtVariableReadImpl]conn);
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback the add Application ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to add Application", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtLiteralImpl]null, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param identifier
     * 		Identifier
     * @param rating
     * 		Rating
     * @param userId
     * 		User Id
     * @throws APIManagementException
     * 		if failed to add Rating
     */
    public [CtTypeReferenceImpl]void addOrUpdateRating([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier identifier, [CtParameterImpl][CtTypeReferenceImpl]int rating, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException, [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement psSelect = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId;
            [CtAssignmentImpl][CtVariableWriteImpl]tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtVariableReadImpl]userId);
            [CtLocalVariableImpl][CtCommentImpl]// Get subscriber Id
            [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtInvocationImpl]getSubscriber([CtVariableReadImpl]userId, [CtVariableReadImpl]tenantId, [CtVariableReadImpl]conn);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]subscriber == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Could not load Subscriber records for: " + [CtVariableReadImpl]userId;
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]int id;
            [CtAssignmentImpl][CtVariableWriteImpl]id = [CtInvocationImpl]getAPIID([CtVariableReadImpl]identifier, [CtVariableReadImpl]conn);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]id == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Could not load API record for: " + [CtInvocationImpl][CtVariableReadImpl]identifier.getName();
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean userRatingExists = [CtLiteralImpl]false;
            [CtLocalVariableImpl][CtCommentImpl]// This query to check the ratings already exists for the user in the AM_API_RATINGS table
            [CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_RATING_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]psSelect = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]psSelect.setInt([CtLiteralImpl]1, [CtVariableReadImpl]id);
            [CtInvocationImpl][CtVariableReadImpl]psSelect.setInt([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]subscriber.getId());
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]psSelect.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userRatingExists = [CtLiteralImpl]true;
            } 
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlAddQuery;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String ratingId = [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]java.util.UUID.randomUUID().toString();
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]userRatingExists) [CtBlockImpl]{
                [CtAssignmentImpl][CtCommentImpl]// This query to insert into the AM_API_RATINGS table
                [CtVariableWriteImpl]sqlAddQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_API_RATING_SQL;
                [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlAddQuery);
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]ratingId);
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]rating);
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]3, [CtVariableReadImpl]id);
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]subscriber.getId());
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtCommentImpl]// This query to update the AM_API_RATINGS table
                [CtVariableWriteImpl]sqlAddQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_API_RATING_SQL;
                [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlAddQuery);
                [CtInvocationImpl][CtCommentImpl]// Adding data to the AM_API_RATINGS table
                [CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]rating);
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]id);
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]subscriber.getId());
            }
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to add API rating of the user:" + [CtVariableReadImpl]userId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtLiteralImpl]null, [CtVariableReadImpl]rs);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]psSelect, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void removeAPIRating([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier id, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String user) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtInvocationImpl]removeAPIRating([CtVariableReadImpl]id, [CtVariableReadImpl]user, [CtVariableReadImpl]conn);
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback the add Application ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to add Application", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtLiteralImpl]null, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param identifier
     * 		Identifier
     * @param userId
     * 		User Id
     * @throws APIManagementException
     * 		if failed to remove API user Rating
     */
    public [CtTypeReferenceImpl]void removeAPIRating([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier identifier, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException, [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement psSelect = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String rateId = [CtLiteralImpl]null;
            [CtAssignmentImpl][CtVariableWriteImpl]tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtVariableReadImpl]userId);
            [CtLocalVariableImpl][CtCommentImpl]// Get subscriber Id
            [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtInvocationImpl]getSubscriber([CtVariableReadImpl]userId, [CtVariableReadImpl]tenantId, [CtVariableReadImpl]conn);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]subscriber == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Could not load Subscriber records for: " + [CtVariableReadImpl]userId;
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
            }
            [CtLocalVariableImpl][CtCommentImpl]// Get API Id
            [CtTypeReferenceImpl]int id = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
            [CtAssignmentImpl][CtVariableWriteImpl]id = [CtInvocationImpl]getAPIID([CtVariableReadImpl]identifier, [CtVariableReadImpl]conn);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]id == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Could not load API record for: " + [CtInvocationImpl][CtVariableReadImpl]identifier.getName();
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
            }
            [CtLocalVariableImpl][CtCommentImpl]// This query to check the ratings already exists for the user in the AM_API_RATINGS table
            [CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_RATING_ID_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]psSelect = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]psSelect.setInt([CtLiteralImpl]1, [CtVariableReadImpl]id);
            [CtInvocationImpl][CtVariableReadImpl]psSelect.setInt([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]subscriber.getId());
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]psSelect.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]rateId = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"RATING_ID");
            } 
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlDeleteQuery;
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]rateId != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtCommentImpl]// This query to delete the specific rate row from the AM_API_RATINGS table
                [CtVariableWriteImpl]sqlDeleteQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_RATING_SQL;
                [CtAssignmentImpl][CtCommentImpl]// Adding data to the AM_API_RATINGS  table
                [CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlDeleteQuery);
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]rateId);
                [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to delete API rating", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]psSelect, [CtLiteralImpl]null, [CtVariableReadImpl]rs);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]int getUserRating([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier id, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String user) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int userRating = [CtLiteralImpl]0;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]userRating = [CtInvocationImpl]getUserRating([CtVariableReadImpl]id, [CtVariableReadImpl]user, [CtVariableReadImpl]conn);
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback getting user ratings ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get user ratings", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtLiteralImpl]null, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
        [CtReturnImpl]return [CtVariableReadImpl]userRating;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param identifier
     * 		Identifier
     * @param userId
     * 		User Id
     * @throws APIManagementException
     * 		if failed to get User API Rating
     */
    public [CtTypeReferenceImpl]int getUserRating([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier identifier, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException, [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int userRating = [CtLiteralImpl]0;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId;
            [CtAssignmentImpl][CtVariableWriteImpl]tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtVariableReadImpl]userId);
            [CtLocalVariableImpl][CtCommentImpl]// Get subscriber Id
            [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtInvocationImpl]getSubscriber([CtVariableReadImpl]userId, [CtVariableReadImpl]tenantId, [CtVariableReadImpl]conn);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]subscriber == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Could not load Subscriber records for: " + [CtVariableReadImpl]userId;
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
            }
            [CtLocalVariableImpl][CtCommentImpl]// Get API Id
            [CtTypeReferenceImpl]int id = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
            [CtAssignmentImpl][CtVariableWriteImpl]id = [CtInvocationImpl]getAPIID([CtVariableReadImpl]identifier, [CtVariableReadImpl]conn);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]id == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Could not load API record for: " + [CtInvocationImpl][CtVariableReadImpl]identifier.getName();
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
            }
            [CtLocalVariableImpl][CtCommentImpl]// This query to update the AM_API_RATINGS table
            [CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_RATING_SQL;
            [CtAssignmentImpl][CtCommentImpl]// Adding data to the AM_API_RATINGS  table
            [CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]id);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]subscriber.getId());
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userRating = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"RATING");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to add Application", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtLiteralImpl]null, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]userRating;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param identifier
     * 		Identifier
     * @param user
     * 		User name
     * @throws APIManagementException
     * 		if failed to get user API Ratings
     */
    public [CtTypeReferenceImpl]org.json.simple.JSONObject getUserRatingInfo([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier identifier, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String user) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.json.simple.JSONObject userRating = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]userRating = [CtInvocationImpl]getUserRatingInfo([CtVariableReadImpl]identifier, [CtVariableReadImpl]user, [CtVariableReadImpl]conn);
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback getting user ratings info ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get user ratings info", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtLiteralImpl]null, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
        [CtReturnImpl]return [CtVariableReadImpl]userRating;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param identifier
     * 		Identifier
     * @param userId
     * 		User Id
     * @param conn
     * 		Database connection
     * @throws APIManagementException
     * 		if failed to get user API Ratings
     */
    private [CtTypeReferenceImpl]org.json.simple.JSONObject getUserRatingInfo([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier identifier, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException, [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.json.simple.JSONObject ratingObj = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.json.simple.JSONObject();
        [CtLocalVariableImpl][CtTypeReferenceImpl]int userRating = [CtLiteralImpl]0;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int id = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String ratingId = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId;
            [CtAssignmentImpl][CtVariableWriteImpl]tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtVariableReadImpl]userId);
            [CtLocalVariableImpl][CtCommentImpl]// Get subscriber Id
            [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtInvocationImpl]getSubscriber([CtVariableReadImpl]userId, [CtVariableReadImpl]tenantId, [CtVariableReadImpl]conn);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]subscriber == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Could not load Subscriber records for: " + [CtVariableReadImpl]userId;
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
            }
            [CtAssignmentImpl][CtCommentImpl]// Get API Id
            [CtVariableWriteImpl]id = [CtInvocationImpl]getAPIID([CtVariableReadImpl]identifier, [CtVariableReadImpl]conn);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_RATING_INFO_SQL;
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]id == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Could not load API record for: " + [CtInvocationImpl][CtVariableReadImpl]identifier.getName();
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
            }
            [CtAssignmentImpl][CtCommentImpl]// This query to get rating information from the AM_API_RATINGS table
            [CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]subscriber.getId());
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]id);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]ratingId = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"RATING_ID");
                [CtAssignmentImpl][CtVariableWriteImpl]userRating = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"RATING");
            } 
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]ratingId != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtInvocationImpl][CtCommentImpl]// A rating record exists
                [CtVariableReadImpl]ratingObj.put([CtTypeAccessImpl]APIConstants.RATING_ID, [CtVariableReadImpl]ratingId);
                [CtInvocationImpl][CtVariableReadImpl]ratingObj.put([CtTypeAccessImpl]APIConstants.USER_NAME, [CtVariableReadImpl]userId);
                [CtInvocationImpl][CtVariableReadImpl]ratingObj.put([CtTypeAccessImpl]APIConstants.RATING, [CtVariableReadImpl]userRating);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to retrieve API ratings ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtLiteralImpl]null, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]ratingObj;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param apiId
     * 		API Identifier
     * @throws APIManagementException
     * 		if failed to get API Ratings
     */
    public [CtTypeReferenceImpl]org.json.simple.JSONArray getAPIRatings([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier apiId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.json.simple.JSONArray apiRatings = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]apiRatings = [CtInvocationImpl]getAPIRatings([CtVariableReadImpl]apiId, [CtVariableReadImpl]conn);
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback getting user ratings info ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get user ratings info", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtLiteralImpl]null, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
        [CtReturnImpl]return [CtVariableReadImpl]apiRatings;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param identifier
     * 		Identifier
     * @param conn
     * 		Database connection
     * @throws APIManagementException
     * 		if failed to get API Ratings
     */
    private [CtTypeReferenceImpl]org.json.simple.JSONArray getAPIRatings([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier identifier, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException, [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement psSubscriber = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rsSubscriber = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.json.simple.JSONArray ratingArray = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.json.simple.JSONArray();
        [CtLocalVariableImpl][CtTypeReferenceImpl]int userRating = [CtLiteralImpl]0;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String ratingId = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int id = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int subscriberId = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtCommentImpl]// Get API Id
            [CtVariableWriteImpl]id = [CtInvocationImpl]getAPIID([CtVariableReadImpl]identifier, [CtVariableReadImpl]conn);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]id == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Could not load API record for: " + [CtInvocationImpl][CtVariableReadImpl]identifier.getName();
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
            }
            [CtLocalVariableImpl][CtCommentImpl]// This query to get rating information from the AM_API_RATINGS table
            [CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_ALL_RATINGS_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]id);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.json.simple.JSONObject ratingObj = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.json.simple.JSONObject();
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriberName = [CtLiteralImpl]null;
                [CtAssignmentImpl][CtVariableWriteImpl]ratingId = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"RATING_ID");
                [CtAssignmentImpl][CtVariableWriteImpl]subscriberId = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"SUBSCRIBER_ID");
                [CtAssignmentImpl][CtVariableWriteImpl]userRating = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"RATING");
                [CtInvocationImpl][CtVariableReadImpl]ratingObj.put([CtTypeAccessImpl]APIConstants.RATING_ID, [CtVariableReadImpl]ratingId);
                [CtLocalVariableImpl][CtCommentImpl]// SQL Query to get subscriber name
                [CtTypeReferenceImpl]java.lang.String sqlSubscriberQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIBER_NAME_FROM_ID_SQL;
                [CtAssignmentImpl][CtVariableWriteImpl]psSubscriber = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlSubscriberQuery);
                [CtInvocationImpl][CtVariableReadImpl]psSubscriber.setInt([CtLiteralImpl]1, [CtVariableReadImpl]subscriberId);
                [CtAssignmentImpl][CtVariableWriteImpl]rsSubscriber = [CtInvocationImpl][CtVariableReadImpl]psSubscriber.executeQuery();
                [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rsSubscriber.next()) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]subscriberName = [CtInvocationImpl][CtVariableReadImpl]rsSubscriber.getString([CtLiteralImpl]"USER_ID");
                } 
                [CtInvocationImpl][CtVariableReadImpl]ratingObj.put([CtTypeAccessImpl]APIConstants.USER_NAME, [CtVariableReadImpl]subscriberName);
                [CtInvocationImpl][CtVariableReadImpl]ratingObj.put([CtTypeAccessImpl]APIConstants.RATING, [CtVariableReadImpl]userRating);
                [CtInvocationImpl][CtVariableReadImpl]ratingArray.add([CtVariableReadImpl]ratingObj);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to retrieve API ratings ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtLiteralImpl]null, [CtVariableReadImpl]rs);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]psSubscriber, [CtLiteralImpl]null, [CtVariableReadImpl]rsSubscriber);
        }
        [CtReturnImpl]return [CtVariableReadImpl]ratingArray;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]float getAverageRating([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier apiId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]float avrRating = [CtLiteralImpl]0;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]avrRating = [CtInvocationImpl]getAverageRating([CtVariableReadImpl]apiId, [CtVariableReadImpl]conn);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback getting user ratings ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get user ratings", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtLiteralImpl]null, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
        [CtReturnImpl]return [CtVariableReadImpl]avrRating;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]float getAverageRating([CtParameterImpl][CtTypeReferenceImpl]int apiId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]float avrRating = [CtLiteralImpl]0;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiId == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Invalid APIId : " + [CtVariableReadImpl]apiId;
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtReturnImpl]return [CtFieldReadImpl][CtTypeAccessImpl]java.lang.Float.[CtFieldReferenceImpl]NEGATIVE_INFINITY;
            }
            [CtLocalVariableImpl][CtCommentImpl]// This query to update the AM_API_RATINGS table
            [CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_AVERAGE_RATING_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]avrRating = [CtInvocationImpl][CtVariableReadImpl]rs.getFloat([CtLiteralImpl]"RATING");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback getting user ratings ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get user ratings", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]avrRating;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param identifier
     * 		Identifier
     * @throws APIManagementException
     * 		if failed to add Application
     */
    public [CtTypeReferenceImpl]float getAverageRating([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier identifier, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException, [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]float avrRating = [CtLiteralImpl]0;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtCommentImpl]// Get API Id
            [CtTypeReferenceImpl]int apiId;
            [CtAssignmentImpl][CtVariableWriteImpl]apiId = [CtInvocationImpl]getAPIID([CtVariableReadImpl]identifier, [CtVariableReadImpl]conn);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiId == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Could not load API record for: " + [CtInvocationImpl][CtVariableReadImpl]identifier.getName();
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtReturnImpl]return [CtFieldReadImpl][CtTypeAccessImpl]java.lang.Float.[CtFieldReferenceImpl]NEGATIVE_INFINITY;
            }
            [CtLocalVariableImpl][CtCommentImpl]// This query to update the AM_API_RATINGS table
            [CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_AVERAGE_RATING_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]avrRating = [CtInvocationImpl][CtVariableReadImpl]rs.getFloat([CtLiteralImpl]"RATING");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get average rating ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtLiteralImpl]null, [CtVariableReadImpl]rs);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.math.BigDecimal decimal = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.math.BigDecimal([CtVariableReadImpl]avrRating);
        [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.lang.Float.parseFloat([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]decimal.setScale([CtLiteralImpl]1, [CtFieldReadImpl][CtTypeAccessImpl]java.math.BigDecimal.[CtFieldReferenceImpl]ROUND_UP).toString());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param application
     * 		Application
     * @param userId
     * 		User Id
     * @throws APIManagementException
     * 		if failed to add Application
     */
    public [CtTypeReferenceImpl]int addApplication([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException, [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int applicationId = [CtLiteralImpl]0;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtVariableReadImpl]userId);
            [CtLocalVariableImpl][CtCommentImpl]// Get subscriber Id
            [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtInvocationImpl]getSubscriber([CtVariableReadImpl]userId, [CtVariableReadImpl]tenantId, [CtVariableReadImpl]conn);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]subscriber == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Could not load Subscriber records for: " + [CtVariableReadImpl]userId;
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
            }
            [CtLocalVariableImpl][CtCommentImpl]// This query to update the AM_APPLICATION table
            [CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.APP_APPLICATION_SQL;
            [CtAssignmentImpl][CtCommentImpl]// Adding data to the AM_APPLICATION  table
            [CtCommentImpl]// ps = conn.prepareStatement(sqlQuery);
            [CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtLiteralImpl]"APPLICATION_ID" });
            [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]conn.getMetaData().getDriverName().contains([CtLiteralImpl]"PostgreSQL")) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtLiteralImpl]"application_id" });
            }
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]application.getName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]subscriber.getId());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]application.getTier());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]application.getCallbackUrl());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]5, [CtInvocationImpl][CtVariableReadImpl]application.getDescription());
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]APIConstants.DEFAULT_APPLICATION_NAME.equals([CtInvocationImpl][CtVariableReadImpl]application.getName())) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]6, [CtTypeAccessImpl]APIConstants.ApplicationStatus.APPLICATION_APPROVED);
            } else [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]6, [CtTypeAccessImpl]APIConstants.ApplicationStatus.APPLICATION_CREATED);
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String groupId = [CtInvocationImpl][CtVariableReadImpl]application.getGroupId();
            [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                [CtAssignmentImpl][CtCommentImpl]// setting an empty groupId since groupid's should be saved in groupId mapping table
                [CtVariableWriteImpl]groupId = [CtLiteralImpl]"";
            }
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]7, [CtVariableReadImpl]groupId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]8, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Timestamp timestamp = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.sql.Timestamp([CtInvocationImpl][CtTypeAccessImpl]java.lang.System.currentTimeMillis());
            [CtInvocationImpl][CtVariableReadImpl]ps.setTimestamp([CtLiteralImpl]9, [CtVariableReadImpl]timestamp);
            [CtInvocationImpl][CtVariableReadImpl]ps.setTimestamp([CtLiteralImpl]10, [CtVariableReadImpl]timestamp);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]11, [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]java.util.UUID.randomUUID().toString());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]12, [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.valueOf([CtInvocationImpl][CtVariableReadImpl]application.getTokenType()));
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.getGeneratedKeys();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]applicationId = [CtInvocationImpl][CtTypeAccessImpl]java.lang.Integer.parseInt([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]1));
            } 
            [CtIfImpl][CtCommentImpl]// Adding data to AM_APPLICATION_ATTRIBUTES table
            if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]application.getApplicationAttributes() != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtInvocationImpl]addApplicationAttributes([CtVariableReadImpl]conn, [CtInvocationImpl][CtVariableReadImpl]application.getApplicationAttributes(), [CtVariableReadImpl]applicationId, [CtVariableReadImpl]tenantId);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to add Application", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtLiteralImpl]null, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]applicationId;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void updateApplication([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement preparedStatement = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtCommentImpl]// This query to update the AM_APPLICATION table
            [CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_APPLICATION_SQL;
            [CtAssignmentImpl][CtCommentImpl]// Adding data to the AM_APPLICATION  table
            [CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]application.getName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]application.getTier());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]application.getCallbackUrl());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]application.getDescription());
            [CtInvocationImpl][CtCommentImpl]// TODO need to find the proper user who updates this application.
            [CtVariableReadImpl]ps.setString([CtLiteralImpl]5, [CtLiteralImpl]null);
            [CtInvocationImpl][CtVariableReadImpl]ps.setTimestamp([CtLiteralImpl]6, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.sql.Timestamp([CtInvocationImpl][CtTypeAccessImpl]java.lang.System.currentTimeMillis()));
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]7, [CtInvocationImpl][CtVariableReadImpl]application.getTokenType());
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]8, [CtInvocationImpl][CtVariableReadImpl]application.getId());
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtInvocationImpl][CtVariableReadImpl]application.getSubscriber();
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                [CtInvocationImpl]updateGroupIDMappings([CtVariableReadImpl]conn, [CtInvocationImpl][CtVariableReadImpl]application.getId(), [CtInvocationImpl][CtVariableReadImpl]application.getGroupId(), [CtVariableReadImpl]tenantDomain);
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtInvocationImpl][CtVariableReadImpl]application.getSubscriber();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
            [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.identity.core.util.IdentityTenantUtil.getTenantId([CtVariableReadImpl]domain);
            [CtAssignmentImpl][CtVariableWriteImpl]preparedStatement = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtTypeAccessImpl]SQLConstants.REMOVE_APPLICATION_ATTRIBUTES_SQL);
            [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]application.getId());
            [CtInvocationImpl][CtVariableReadImpl]preparedStatement.execute();
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Old attributes of application - " + [CtInvocationImpl][CtVariableReadImpl]application.getName()) + [CtLiteralImpl]" are removed");
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]application.getApplicationAttributes() != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]application.getApplicationAttributes().isEmpty())) [CtBlockImpl]{
                [CtInvocationImpl]addApplicationAttributes([CtVariableReadImpl]conn, [CtInvocationImpl][CtVariableReadImpl]application.getApplicationAttributes(), [CtInvocationImpl][CtVariableReadImpl]application.getId(), [CtVariableReadImpl]tenantId);
            }
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
            [CtInvocationImpl]updateOAuthConsumerApp([CtInvocationImpl][CtVariableReadImpl]application.getName(), [CtInvocationImpl][CtVariableReadImpl]application.getCallbackUrl());
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback the update Application ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to update Application", [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.identity.oauth.IdentityOAuthAdminException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to update OAuth Consumer Application", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]preparedStatement, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Update the status of the Application creation process
     *
     * @param applicationId
     * @param status
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void updateApplicationStatus([CtParameterImpl][CtTypeReferenceImpl]int applicationId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String status) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String updateSqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_APPLICATION_STATUS_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]updateSqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]status);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]applicationId);
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback the update Application ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to update Application", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * get the status of the Application creation process
     *
     * @param appName
     * @return  * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.lang.String getApplicationStatus([CtParameterImpl][CtTypeReferenceImpl]java.lang.String appName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]int applicationId = [CtInvocationImpl]getApplicationId([CtVariableReadImpl]appName, [CtVariableReadImpl]userId);
        [CtReturnImpl]return [CtInvocationImpl]getApplicationStatusById([CtVariableReadImpl]applicationId);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * get the status of the Application creation process given the application Id
     *
     * @param applicationId
     * 		Id of the Application
     * @return  * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.lang.String getApplicationStatusById([CtParameterImpl][CtTypeReferenceImpl]int applicationId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String status = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_STATUS_BY_ID_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]status = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"APPLICATION_STATUS");
            } 
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback the update Application ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to update Application", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]status;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Check whether given application name is available under current subscriber or group
     *
     * @param appName
     * 		application name
     * @param username
     * 		subscriber
     * @param groupId
     * 		group of the subscriber
     * @return true if application is available for the subscriber
     * @throws APIManagementException
     * 		if failed to get applications for given subscriber
     */
    public [CtTypeReferenceImpl]boolean isApplicationExist([CtParameterImpl][CtTypeReferenceImpl]java.lang.String appName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String username, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]username == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]false;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtInvocationImpl]getSubscriber([CtVariableReadImpl]username);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement preparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int appId = [CtLiteralImpl]0;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_ID_PREFIX;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithGroupId = [CtBinaryOperatorImpl][CtLiteralImpl]" AND (APP.GROUP_ID = ? OR ((APP.GROUP_ID='' OR APP.GROUP_ID IS NULL)" + [CtLiteralImpl]" AND SUB.USER_ID = ?))";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithGroupIdCaseInsensitive = [CtBinaryOperatorImpl][CtLiteralImpl]" AND (APP.GROUP_ID = ? " + [CtLiteralImpl]"OR ((APP.GROUP_ID='' OR APP.GROUP_ID IS NULL) AND LOWER(SUB.USER_ID) = LOWER(?)))";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithMultiGroupId = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]" AND  ( (APP.APPLICATION_ID IN (SELECT APPLICATION_ID  FROM " + [CtLiteralImpl]"AM_APPLICATION_GROUP_MAPPING WHERE GROUP_ID IN ($params) AND TENANT = ?))  OR  ( SUB.USER_ID = ? ) ") + [CtLiteralImpl]"OR (APP.APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE GROUP_ID = ?)))";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithMultiGroupIdCaseInsensitive = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]" AND  ( (APP.APPLICATION_ID IN  (SELECT APPLICATION_ID " + [CtLiteralImpl]"FROM AM_APPLICATION_GROUP_MAPPING WHERE GROUP_ID IN ($params) AND TENANT = ?)) ") + [CtLiteralImpl]"OR (LOWER(SUB.USER_ID) = LOWER(?))") + [CtLiteralImpl]"OR (APP.APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE GROUP_ID = ?)))";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClause = [CtLiteralImpl]" AND SUB.USER_ID = ? ";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseCaseInsensitive = [CtLiteralImpl]" AND LOWER(SUB.USER_ID) = LOWER(?) ";
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtVariableReadImpl]groupId)) [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                        [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithMultiGroupIdCaseInsensitive;
                    } else [CtBlockImpl]{
                        [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithMultiGroupId;
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] grpIdArray = [CtInvocationImpl][CtVariableReadImpl]groupId.split([CtLiteralImpl]",");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int noOfParams = [CtFieldReadImpl][CtVariableReadImpl]grpIdArray.length;
                    [CtAssignmentImpl][CtVariableWriteImpl]preparedStatement = [CtInvocationImpl]fillQueryParams([CtVariableReadImpl]connection, [CtVariableReadImpl]sqlQuery, [CtVariableReadImpl]grpIdArray, [CtLiteralImpl]2);
                    [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]appName);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int paramIndex = [CtBinaryOperatorImpl][CtVariableReadImpl]noOfParams + [CtLiteralImpl]1;
                    [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]tenantDomain);
                    [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]tenantDomain + [CtLiteralImpl]'/') + [CtVariableReadImpl]groupId);
                } else [CtBlockImpl]{
                    [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                        [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithGroupIdCaseInsensitive;
                    } else [CtBlockImpl]{
                        [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithGroupId;
                    }
                    [CtAssignmentImpl][CtVariableWriteImpl]preparedStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                    [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]appName);
                    [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setString([CtLiteralImpl]2, [CtVariableReadImpl]groupId);
                    [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseCaseInsensitive;
                } else [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClause;
                }
                [CtAssignmentImpl][CtVariableWriteImpl]preparedStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]appName);
                [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
            }
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]preparedStatement.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]appId = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"APPLICATION_ID");
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]appId > [CtLiteralImpl]0) [CtBlockImpl]{
                [CtReturnImpl]return [CtLiteralImpl]true;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error while getting the id  of " + [CtVariableReadImpl]appName) + [CtLiteralImpl]" from the persistence store.", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]preparedStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtLiteralImpl]false;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Check whether the new user has an application
     *
     * @param appName
     * 		application name
     * @param username
     * 		subscriber
     * @return true if application is available for the subscriber
     * @throws APIManagementException
     * 		if failed to get applications for given subscriber
     */
    public [CtTypeReferenceImpl]boolean isApplicationOwnedBySubscriber([CtParameterImpl][CtTypeReferenceImpl]java.lang.String appName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String username) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]username == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]false;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtInvocationImpl]getSubscriber([CtVariableReadImpl]username);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement preparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int appId = [CtLiteralImpl]0;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_ID_PREFIX;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClause = [CtLiteralImpl]" AND SUB.USER_ID = ? ";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseCaseInsensitive = [CtLiteralImpl]" AND LOWER(SUB.USER_ID) = LOWER(?) ";
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseCaseInsensitive;
            } else [CtBlockImpl]{
                [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClause;
            }
            [CtAssignmentImpl][CtVariableWriteImpl]preparedStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]appName);
            [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]preparedStatement.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]appId = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"APPLICATION_ID");
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]appId > [CtLiteralImpl]0) [CtBlockImpl]{
                [CtReturnImpl]return [CtLiteralImpl]true;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error while getting the id  of " + [CtVariableReadImpl]appName) + [CtLiteralImpl]" from the persistence store.", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]preparedStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtLiteralImpl]false;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param username
     * 		Subscriber
     * @return ApplicationId for given appname.
     * @throws APIManagementException
     * 		if failed to get Applications for given subscriber.
     */
    public [CtTypeReferenceImpl]int getApplicationId([CtParameterImpl][CtTypeReferenceImpl]java.lang.String appName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String username) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]username == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]0;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtInvocationImpl]getSubscriber([CtVariableReadImpl]username);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int appId = [CtLiteralImpl]0;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_ID_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]subscriber.getId());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]appName);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]appId = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"APPLICATION_ID");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error when getting the application id from" + [CtLiteralImpl]" the persistence store.", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]appId;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Find the name of the application by Id
     *
     * @param applicationId
     * 		- applicatoin id
     * @return - application name
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.lang.String getApplicationNameFromId([CtParameterImpl][CtTypeReferenceImpl]int applicationId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String appName = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_NAME_FROM_ID_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]appName = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NAME");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error when getting the application name for id " + [CtVariableReadImpl]applicationId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]appName;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]int getAllApplicationCount([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupingId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String search) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]groupingId != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtLiteralImpl]"null".equals([CtVariableReadImpl]groupingId))) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]groupingId.isEmpty())) [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATIONS_COUNNT_CASESENSITVE_WITH_MULTIGROUPID;
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATIONS_COUNNT_NONE_CASESENSITVE_WITH_MULTIGROUPID;
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] grpIdArray = [CtInvocationImpl][CtVariableReadImpl]groupingId.split([CtLiteralImpl]",");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int noOfParams = [CtFieldReadImpl][CtVariableReadImpl]grpIdArray.length;
                    [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl]fillQueryParams([CtVariableReadImpl]connection, [CtVariableReadImpl]sqlQuery, [CtVariableReadImpl]grpIdArray, [CtLiteralImpl]1);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]noOfParams, [CtVariableReadImpl]tenantDomain);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]noOfParams, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]noOfParams, [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"%" + [CtVariableReadImpl]search) + [CtLiteralImpl]"%");
                } else [CtBlockImpl]{
                    [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATIONS_COUNNT_CASESENSITVE_WITHGROUPID;
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATIONS_COUNNT_NONE_CASESENSITVE_WITHGROUPID;
                    }
                    [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]groupingId);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"%" + [CtVariableReadImpl]search) + [CtLiteralImpl]"%");
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATIONS_COUNNT_CASESENSITVE;
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATIONS_COUNNT_NONE_CASESENSITVE;
                }
                [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"%" + [CtVariableReadImpl]search) + [CtLiteralImpl]"%");
            }
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]int applicationCount = [CtLiteralImpl]0;
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]resultSet != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]applicationCount = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"count");
                } 
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]applicationCount > [CtLiteralImpl]0) [CtBlockImpl]{
                [CtReturnImpl]return [CtVariableReadImpl]applicationCount;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get applicaiton count : ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtLiteralImpl]0;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns all applications created by given user Id
     *
     * @param userId
     * @return  * @throws APIManagementException
     */
    public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application[] getApplicationsByOwner([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String appName = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application[] applications = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATIONS_BY_OWNER;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]userId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application> applicationsList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application>();
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application;
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"UUID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setName([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NAME"));
                [CtInvocationImpl][CtVariableReadImpl]application.setOwner([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CREATED_BY"));
                [CtInvocationImpl][CtVariableReadImpl]application.setStatus([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_STATUS"));
                [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"GROUP_ID"));
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl]getGroupId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"APPLICATION_ID")));
                }
                [CtInvocationImpl][CtVariableReadImpl]applicationsList.add([CtVariableReadImpl]application);
            } 
            [CtAssignmentImpl][CtVariableWriteImpl]applications = [CtInvocationImpl][CtVariableReadImpl]applicationsList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application[[CtInvocationImpl][CtVariableReadImpl]applicationsList.size()]);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error when getting the application name for id " + [CtVariableReadImpl]userId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]applications;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns all applications created by given user Id
     *
     * @param userName
     * @return  * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]boolean updateApplicationOwner([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isAppUpdated = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_APPLICATION_OWNER;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtInvocationImpl]getSubscriber([CtVariableReadImpl]userName);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]subscriber != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]int subscriberId = [CtInvocationImpl][CtInvocationImpl]getSubscriber([CtVariableReadImpl]userName).getId();
                [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
                [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
                [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]userName);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]2, [CtVariableReadImpl]subscriberId);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]application.getUUID());
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeUpdate();
                [CtInvocationImpl][CtVariableReadImpl]connection.commit();
                [CtAssignmentImpl][CtVariableWriteImpl]isAppUpdated = [CtLiteralImpl]true;
            } else [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtBinaryOperatorImpl][CtLiteralImpl]"Error when retrieving subscriber details for user " + [CtVariableReadImpl]userName;
                [CtInvocationImpl]handleException([CtVariableReadImpl]errorMessage, [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]errorMessage));
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error when updating application owner for user " + [CtVariableReadImpl]userName, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
        [CtReturnImpl]return [CtVariableReadImpl]isAppUpdated;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * #TODO later we might need to use only this method.
     *
     * @param subscriber
     * 		The subscriber.
     * @param groupingId
     * 		The groupId to which the applications must belong.
     * @param start
     * 		The start index.
     * @param offset
     * 		The offset.
     * @param search
     * 		The search string.
     * @param sortOrder
     * 		The sort order.
     * @param sortColumn
     * 		The sort column.
     * @return Application[] The array of applications.
     * @throws APIManagementException
     */
    public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application[] getApplicationsWithPagination([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupingId, [CtParameterImpl][CtTypeReferenceImpl]int start, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String search, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortColumn, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application[] applications = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]groupingId != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtLiteralImpl]"null".equals([CtVariableReadImpl]groupingId))) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]groupingId.isEmpty())) [CtBlockImpl]{
            [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.factory.SQLConstantManagerFactory.getSQlString([CtLiteralImpl]"GET_APPLICATIONS_PREFIX_NONE_CASESENSITVE_WITH_MULTIGROUPID");
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.factory.SQLConstantManagerFactory.getSQlString([CtLiteralImpl]"GET_APPLICATIONS_PREFIX_CASESENSITVE_WITH_MULTIGROUPID");
                }
            } else [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.factory.SQLConstantManagerFactory.getSQlString([CtLiteralImpl]"GET_APPLICATIONS_PREFIX_CASESENSITVE_WITHGROUPID");
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.factory.SQLConstantManagerFactory.getSQlString([CtLiteralImpl]"GET_APPLICATIONS_PREFIX_NONE_CASESENSITVE_WITHGROUPID");
            }
        } else [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.factory.SQLConstantManagerFactory.getSQlString([CtLiteralImpl]"GET_APPLICATIONS_PREFIX_CASESENSITVE");
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.factory.SQLConstantManagerFactory.getSQlString([CtLiteralImpl]"GET_APPLICATIONS_PREFIX_NONE_CASESENSITVE");
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtCommentImpl]// sortColumn, sortOrder variable values has sanitized in jaggery level (applications-list.jag)for security.
            [CtVariableWriteImpl]sqlQuery = [CtInvocationImpl][CtVariableReadImpl]sqlQuery.replace([CtLiteralImpl]"$1", [CtVariableReadImpl]sortColumn);
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtInvocationImpl][CtVariableReadImpl]sqlQuery.replace([CtLiteralImpl]"$2", [CtVariableReadImpl]sortOrder);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]groupingId != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtLiteralImpl]"null".equals([CtVariableReadImpl]groupingId))) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]groupingId.isEmpty())) [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] grpIdArray = [CtInvocationImpl][CtVariableReadImpl]groupingId.split([CtLiteralImpl]",");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int noOfParams = [CtFieldReadImpl][CtVariableReadImpl]grpIdArray.length;
                    [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl]fillQueryParams([CtVariableReadImpl]connection, [CtVariableReadImpl]sqlQuery, [CtVariableReadImpl]grpIdArray, [CtLiteralImpl]1);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]noOfParams, [CtVariableReadImpl]tenantDomain);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]noOfParams, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]noOfParams, [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]tenantDomain + [CtLiteralImpl]'/') + [CtVariableReadImpl]groupingId);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]noOfParams, [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"%" + [CtVariableReadImpl]search) + [CtLiteralImpl]"%");
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtUnaryOperatorImpl]++[CtVariableWriteImpl]noOfParams, [CtVariableReadImpl]start);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtUnaryOperatorImpl]++[CtVariableWriteImpl]noOfParams, [CtVariableReadImpl]offset);
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]groupingId);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"%" + [CtVariableReadImpl]search) + [CtLiteralImpl]"%");
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]4, [CtVariableReadImpl]start);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]5, [CtVariableReadImpl]offset);
                }
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"%" + [CtVariableReadImpl]search) + [CtLiteralImpl]"%");
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]3, [CtVariableReadImpl]start);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]4, [CtVariableReadImpl]offset);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application> applicationsList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application>();
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application;
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NAME"), [CtVariableReadImpl]subscriber);
                [CtLocalVariableImpl][CtTypeReferenceImpl]int applicationId = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"APPLICATION_ID");
                [CtInvocationImpl][CtVariableReadImpl]application.setId([CtVariableReadImpl]applicationId);
                [CtInvocationImpl][CtVariableReadImpl]application.setTier([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_TIER"));
                [CtInvocationImpl][CtVariableReadImpl]application.setDescription([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"DESCRIPTION"));
                [CtInvocationImpl][CtVariableReadImpl]application.setStatus([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_STATUS"));
                [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"GROUP_ID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setUUID([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"UUID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setIsBlackListed([CtInvocationImpl][CtVariableReadImpl]rs.getBoolean([CtLiteralImpl]"ENABLED"));
                [CtInvocationImpl][CtVariableReadImpl]application.setOwner([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CREATED_BY"));
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtInvocationImpl]setGroupIdInApplication([CtVariableReadImpl]application);
                }
                [CtLocalVariableImpl][CtCommentImpl]// setting subscription count
                [CtTypeReferenceImpl]int subscriptionCount = [CtInvocationImpl]getSubscriptionCountByApplicationId([CtVariableReadImpl]subscriber, [CtVariableReadImpl]applicationId, [CtVariableReadImpl]groupingId);
                [CtInvocationImpl][CtVariableReadImpl]application.setSubscriptionCount([CtVariableReadImpl]subscriptionCount);
                [CtInvocationImpl][CtVariableReadImpl]applicationsList.add([CtVariableReadImpl]application);
            } 
            [CtAssignmentImpl][CtVariableWriteImpl]applications = [CtInvocationImpl][CtVariableReadImpl]applicationsList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application[[CtInvocationImpl][CtVariableReadImpl]applicationsList.size()]);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error when reading the application information from" + [CtLiteralImpl]" the persistence store.", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]applications;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns all the applications associated with given subscriber and group id.
     *
     * @param subscriber
     * 		The subscriber.
     * @param groupingId
     * 		The groupId to which the applications must belong.
     * @return Application[] Array of applications.
     * @throws APIManagementException
     */
    public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application[] getApplications([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupingId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application[] applications = [CtInvocationImpl]getLightWeightApplications([CtVariableReadImpl]subscriber, [CtVariableReadImpl]groupingId);
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application : [CtVariableReadImpl]applications) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo> keyMap = [CtInvocationImpl]getOAuthApplications([CtInvocationImpl][CtVariableReadImpl]application.getId());
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo> entry : [CtInvocationImpl][CtVariableReadImpl]keyMap.entrySet()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]application.addOAuthApp([CtInvocationImpl][CtVariableReadImpl]entry.getKey(), [CtInvocationImpl][CtVariableReadImpl]entry.getValue());
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]applications;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns all the applications associated with given subscriber and group id, without their keys.
     *
     * @param subscriber
     * 		The subscriber.
     * @param groupingId
     * 		The groupId to which the applications must belong.
     * @return Application[] Array of applications.
     * @throws APIManagementException
     */
    public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application[] getLightWeightApplications([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupingId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application[] applications = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATIONS_PREFIX;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithGroupId;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithMultiGroupId;
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]whereClauseWithGroupId = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]" AND ( (APP.APPLICATION_ID IN (SELECT APPLICATION_ID  FROM " + [CtLiteralImpl]"AM_APPLICATION_GROUP_MAPPING WHERE GROUP_ID IN ($params) AND TENANT = ?)) ") + [CtLiteralImpl]"OR (LOWER(SUB.USER_ID) = LOWER(?))") + [CtLiteralImpl]"OR (APP.APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE GROUP_ID = ?)))";
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]whereClauseWithGroupId = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"   AND " + [CtLiteralImpl]"     (GROUP_ID= ? ") + [CtLiteralImpl]"      OR ") + [CtLiteralImpl]"     ((GROUP_ID='' OR GROUP_ID IS NULL) AND LOWER(SUB.USER_ID) = LOWER(?))) ";
            }
        } else [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]whereClauseWithGroupId = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]" AND ( (APP.APPLICATION_ID IN (SELECT APPLICATION_ID " + [CtLiteralImpl]"FROM AM_APPLICATION_GROUP_MAPPING WHERE GROUP_ID IN ($params) AND TENANT = ?))  ") + [CtLiteralImpl]"OR  ( SUB.USER_ID = ? )") + [CtLiteralImpl]"OR (APP.APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE GROUP_ID = ?))) ";
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]whereClauseWithGroupId = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"   AND " + [CtLiteralImpl]"     (GROUP_ID= ? ") + [CtLiteralImpl]"      OR ") + [CtLiteralImpl]"     ((GROUP_ID='' OR GROUP_ID IS NULL) AND SUB.USER_ID=?))";
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClause;
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]whereClause = [CtBinaryOperatorImpl][CtLiteralImpl]"   AND " + [CtLiteralImpl]" LOWER(SUB.USER_ID) = LOWER(?)";
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]whereClause = [CtBinaryOperatorImpl][CtLiteralImpl]"   AND " + [CtLiteralImpl]" SUB.USER_ID = ?";
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]groupingId != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtLiteralImpl]"null".equals([CtVariableReadImpl]groupingId))) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]groupingId.isEmpty())) [CtBlockImpl]{
            [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithGroupId;
        } else [CtBlockImpl]{
            [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClause;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String blockingFilerSql = [CtLiteralImpl]null;
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]connection.getMetaData().getDriverName().contains([CtLiteralImpl]"MS SQL") || [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]connection.getMetaData().getDriverName().contains([CtLiteralImpl]"Microsoft")) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtInvocationImpl][CtVariableReadImpl]sqlQuery.replaceAll([CtLiteralImpl]"NAME", [CtBinaryOperatorImpl][CtLiteralImpl]"cast(NAME as varchar(100)) collate " + [CtLiteralImpl]"SQL_Latin1_General_CP1_CI_AS as NAME");
                [CtAssignmentImpl][CtVariableWriteImpl]blockingFilerSql = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]" select distinct x.*,bl.ENABLED from ( " + [CtVariableReadImpl]sqlQuery) + [CtLiteralImpl]" )x left join ") + [CtLiteralImpl]"AM_BLOCK_CONDITIONS bl on  ( bl.TYPE = 'APPLICATION' AND bl.VALUE = (x.USER_ID + ':') + x") + [CtLiteralImpl]".name)";
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]blockingFilerSql = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]" select distinct x.*,bl.ENABLED from ( " + [CtVariableReadImpl]sqlQuery) + [CtLiteralImpl]" )x left join AM_BLOCK_CONDITIONS bl on  ( bl.TYPE = 'APPLICATION' AND bl.VALUE = ") + [CtLiteralImpl]"concat(concat(x.USER_ID,':'),x.name))";
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]groupingId != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtLiteralImpl]"null".equals([CtVariableReadImpl]groupingId))) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]groupingId.isEmpty())) [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String groupIDArray[] = [CtInvocationImpl][CtVariableReadImpl]groupingId.split([CtLiteralImpl]",");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int paramIndex = [CtFieldReadImpl][CtVariableReadImpl]groupIDArray.length;
                    [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl]fillQueryParams([CtVariableReadImpl]connection, [CtVariableReadImpl]blockingFilerSql, [CtVariableReadImpl]groupIDArray, [CtLiteralImpl]1);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]tenantDomain);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]tenantDomain + [CtLiteralImpl]'/') + [CtVariableReadImpl]groupingId);
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]blockingFilerSql);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]groupingId);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                }
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]blockingFilerSql);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
            }
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application> applicationsList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application>();
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> applicationAttributes;
            [CtLocalVariableImpl][CtTypeReferenceImpl]int applicationId = [CtLiteralImpl]0;
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]applicationId = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"APPLICATION_ID");
                [CtAssignmentImpl][CtVariableWriteImpl]application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NAME"), [CtVariableReadImpl]subscriber);
                [CtInvocationImpl][CtVariableReadImpl]application.setId([CtVariableReadImpl]applicationId);
                [CtInvocationImpl][CtVariableReadImpl]application.setTier([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_TIER"));
                [CtInvocationImpl][CtVariableReadImpl]application.setCallbackUrl([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CALLBACK_URL"));
                [CtInvocationImpl][CtVariableReadImpl]application.setDescription([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"DESCRIPTION"));
                [CtInvocationImpl][CtVariableReadImpl]application.setStatus([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_STATUS"));
                [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"GROUP_ID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setUUID([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"UUID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setIsBlackListed([CtInvocationImpl][CtVariableReadImpl]rs.getBoolean([CtLiteralImpl]"ENABLED"));
                [CtInvocationImpl][CtVariableReadImpl]application.setOwner([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CREATED_BY"));
                [CtInvocationImpl][CtVariableReadImpl]application.setTokenType([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"TOKEN_TYPE"));
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtInvocationImpl]setGroupIdInApplication([CtVariableReadImpl]application);
                }
                [CtInvocationImpl][CtVariableReadImpl]applicationsList.add([CtVariableReadImpl]application);
            } 
            [CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.sort([CtVariableReadImpl]applicationsList, [CtNewClassImpl]new [CtTypeReferenceImpl]java.util.Comparator<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application>()[CtClassImpl] {
                [CtMethodImpl]public [CtTypeReferenceImpl]int compare([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application o1, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application o2) [CtBlockImpl]{
                    [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]o1.getName().compareToIgnoreCase([CtInvocationImpl][CtVariableReadImpl]o2.getName());
                }
            });
            [CtAssignmentImpl][CtVariableWriteImpl]applications = [CtInvocationImpl][CtVariableReadImpl]applicationsList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application[[CtInvocationImpl][CtVariableReadImpl]applicationsList.size()]);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error when reading the application information from" + [CtLiteralImpl]" the persistence store.", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]applications;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns applications within a tenant domain with pagination
     *
     * @param tenantId
     * 		The tenantId.
     * @param start
     * 		The start index.
     * @param offset
     * 		The offset.
     * @param searchOwner
     * 		The search string.
     * @param searchApplication
     * 		The search string.
     * @param sortOrder
     * 		The sort order.
     * @param sortColumn
     * 		The sort column.
     * @return Application[] The array of applications.
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application> getApplicationsByTenantIdWithPagination([CtParameterImpl][CtTypeReferenceImpl]int tenantId, [CtParameterImpl][CtTypeReferenceImpl]int start, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String searchOwner, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String searchApplication, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortColumn, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application applications = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application> applicationList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.factory.SQLConstantManagerFactory.getSQlString([CtLiteralImpl]"GET_APPLICATIONS_BY_TENANT_ID");
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtInvocationImpl][CtVariableReadImpl]sqlQuery.replace([CtLiteralImpl]"$1", [CtVariableReadImpl]sortColumn);
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtInvocationImpl][CtVariableReadImpl]sqlQuery.replace([CtLiteralImpl]"$2", [CtVariableReadImpl]sortOrder);
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantId);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"%" + [CtVariableReadImpl]searchOwner) + [CtLiteralImpl]"%");
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"%" + [CtVariableReadImpl]searchApplication) + [CtLiteralImpl]"%");
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]4, [CtVariableReadImpl]start);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]5, [CtVariableReadImpl]offset);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application;
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String applicationName = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NAME");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriberName = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CREATED_BY");
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber([CtVariableReadImpl]subscriberName);
                [CtAssignmentImpl][CtVariableWriteImpl]application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtVariableReadImpl]applicationName, [CtVariableReadImpl]subscriber);
                [CtInvocationImpl][CtVariableReadImpl]application.setName([CtVariableReadImpl]applicationName);
                [CtInvocationImpl][CtVariableReadImpl]application.setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"APPLICATION_ID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setUUID([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"UUID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"GROUP_ID"));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setTenantId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"TENANT_ID"));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"SUBSCRIBER_ID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setOwner([CtVariableReadImpl]subscriberName);
                [CtInvocationImpl][CtVariableReadImpl]applicationList.add([CtVariableReadImpl]application);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while obtaining details of the Application for tenant id : " + [CtVariableReadImpl]tenantId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]applicationList;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]int getApplicationsCount([CtParameterImpl][CtTypeReferenceImpl]int tenantId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String searchOwner, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String searchApplication) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATIONS_COUNT;
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantId);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"%" + [CtVariableReadImpl]searchOwner) + [CtLiteralImpl]"%");
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"%" + [CtVariableReadImpl]searchApplication) + [CtLiteralImpl]"%");
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]int applicationCount = [CtLiteralImpl]0;
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]resultSet != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]applicationCount = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"count");
                } 
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]applicationCount > [CtLiteralImpl]0) [CtBlockImpl]{
                [CtReturnImpl]return [CtVariableReadImpl]applicationCount;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get application count of tenant id : " + [CtVariableReadImpl]tenantId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtLiteralImpl]0;
    }

    [CtMethodImpl]public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application[] getAllApplicationsOfTenantForMigration([CtParameterImpl][CtTypeReferenceImpl]java.lang.String appTenantDomain) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs;
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application[] applications = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SIMPLE_APPLICATIONS;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantFilter = [CtLiteralImpl]"AND SUB.TENANT_ID=?";
        [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]tenantFilter;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]int appTenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantIdFromTenantDomain([CtVariableReadImpl]appTenantDomain);
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]appTenantId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application> applicationsList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application>();
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application;
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtInvocationImpl][CtTypeAccessImpl]java.lang.Integer.parseInt([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_ID")));
                [CtInvocationImpl][CtVariableReadImpl]application.setName([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NAME"));
                [CtInvocationImpl][CtVariableReadImpl]application.setOwner([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CREATED_BY"));
                [CtInvocationImpl][CtVariableReadImpl]applicationsList.add([CtVariableReadImpl]application);
            } 
            [CtAssignmentImpl][CtVariableWriteImpl]applications = [CtInvocationImpl][CtVariableReadImpl]applicationsList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application[[CtInvocationImpl][CtVariableReadImpl]applicationsList.size()]);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error when reading the application information from the persistence store.", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]prepStmt != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.close();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.warn([CtBinaryOperatorImpl][CtLiteralImpl]"Database error. Could not close Statement. Continuing with others." + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]e);
                }
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]applications;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns all the consumerkeys of application which are subscribed for the given api
     *
     * @param identifier
     * 		APIIdentifier
     * @return Consumerkeys
     * @throws org.wso2.carbon.apimgt.api.APIManagementException
     * 		if failed to get Applications for given subscriber.
     */
    public [CtArrayTypeReferenceImpl]java.lang.String[] getConsumerKeys([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.String> consumerKeys = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<[CtTypeReferenceImpl]java.lang.String>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int apiId;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_CONSUMER_KEYS_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]apiId = [CtInvocationImpl]getAPIID([CtVariableReadImpl]identifier, [CtVariableReadImpl]connection);
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]consumerKeys.add([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CONSUMER_KEY"));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error when reading application subscription information", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]consumerKeys.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtInvocationImpl][CtVariableReadImpl]consumerKeys.size()]);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Deletes an Application along with subscriptions, keys and registration data
     *
     * @param application
     * 		Application object to be deleted from the database which has the application Id
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void deleteApplication([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement deleteMappingQuery = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmtGetConsumerKey = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement deleteRegistrationQuery = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement deleteSubscription = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement deleteDomainApp = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement deleteAppKey = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement deleteApp = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getSubscriptionsQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_ID_OF_APPLICATION_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getConsumerKeyQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_CONSUMER_KEY_OF_APPLICATION_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteKeyMappingQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_APPLICATION_FROM_SUBSCRIPTION_KEY_MAPPINGS_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteSubscriptionsQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_APPLICATION_FROM_SUBSCRIPTIONS_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteApplicationKeyQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_APPLICATION_FROM_APPLICATION_KEY_MAPPINGS_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteDomainAppQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_APPLICATION_FROM_DOMAIN_MAPPINGS_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteApplicationQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_APPLICATION_FROM_APPLICATIONS_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteRegistrationEntry = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_APPLICATION_FROM_APPLICATION_REGISTRATIONS_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean transactionCompleted = [CtLiteralImpl]true;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getSubscriptionsQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]application.getId());
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]transactionCompleted = [CtInvocationImpl]updateGroupIDMappings([CtVariableReadImpl]connection, [CtInvocationImpl][CtVariableReadImpl]application.getId(), [CtLiteralImpl]null, [CtLiteralImpl]null);
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.Integer> subscriptions = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.Integer>();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]subscriptions.add([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"SUBSCRIPTION_ID"));
            } 
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmtGetConsumerKey = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getConsumerKeyQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmtGetConsumerKey.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]application.getId());
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmtGetConsumerKey.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> consumerKeys = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
            [CtAssignmentImpl][CtVariableWriteImpl]deleteDomainApp = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteDomainAppQuery);
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String consumerKey = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]APIConstants.FIELD_CONSUMER_KEY);
                [CtLocalVariableImpl][CtCommentImpl]// This is true when OAuth app has been created by pasting consumer key/secret in the screen.
                [CtTypeReferenceImpl]java.lang.String mode = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CREATE_MODE");
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]consumerKey != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]deleteDomainApp.setString([CtLiteralImpl]1, [CtVariableReadImpl]consumerKey);
                    [CtInvocationImpl][CtVariableReadImpl]deleteDomainApp.addBatch();
                    [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.factory.KeyManagerHolder.getKeyManagerInstance().deleteMappedApplication([CtVariableReadImpl]consumerKey);
                    [CtIfImpl][CtCommentImpl]// OAuth app is deleted if only it has been created from API Store. For mapped clients we don't
                    [CtCommentImpl]// call delete.
                    if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]APIConstants.OAuthAppMode.MAPPED.equals([CtVariableReadImpl]mode)) [CtBlockImpl]{
                        [CtInvocationImpl][CtCommentImpl]// Adding clients to be deleted.
                        [CtVariableReadImpl]consumerKeys.add([CtVariableReadImpl]consumerKey);
                    }
                }
            } 
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String consumerKey : [CtVariableReadImpl]consumerKeys) [CtBlockImpl]{
                [CtIfImpl][CtCommentImpl]// delete on oAuthorization server.
                if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Deleting Oauth application with consumer key " + [CtVariableReadImpl]consumerKey) + [CtLiteralImpl]" from the Oauth server");
                }
                [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.factory.KeyManagerHolder.getKeyManagerInstance().deleteApplication([CtVariableReadImpl]consumerKey);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]deleteMappingQuery = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteKeyMappingQuery);
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Integer subscriptionId : [CtVariableReadImpl]subscriptions) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]deleteMappingQuery.setInt([CtLiteralImpl]1, [CtVariableReadImpl]subscriptionId);
                [CtInvocationImpl][CtVariableReadImpl]deleteMappingQuery.addBatch();
            }
            [CtInvocationImpl][CtVariableReadImpl]deleteMappingQuery.executeBatch();
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Subscription Key mapping details are deleted successfully for Application - " + [CtInvocationImpl][CtVariableReadImpl]application.getName());
            }
            [CtAssignmentImpl][CtVariableWriteImpl]deleteRegistrationQuery = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteRegistrationEntry);
            [CtInvocationImpl][CtVariableReadImpl]deleteRegistrationQuery.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]application.getId());
            [CtInvocationImpl][CtVariableReadImpl]deleteRegistrationQuery.execute();
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Application Registration details are deleted successfully for Application - " + [CtInvocationImpl][CtVariableReadImpl]application.getName());
            }
            [CtAssignmentImpl][CtVariableWriteImpl]deleteSubscription = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteSubscriptionsQuery);
            [CtInvocationImpl][CtVariableReadImpl]deleteSubscription.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]application.getId());
            [CtInvocationImpl][CtVariableReadImpl]deleteSubscription.execute();
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Subscription details are deleted successfully for Application - " + [CtInvocationImpl][CtVariableReadImpl]application.getName());
            }
            [CtInvocationImpl][CtVariableReadImpl]deleteDomainApp.executeBatch();
            [CtAssignmentImpl][CtVariableWriteImpl]deleteAppKey = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteApplicationKeyQuery);
            [CtInvocationImpl][CtVariableReadImpl]deleteAppKey.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]application.getId());
            [CtInvocationImpl][CtVariableReadImpl]deleteAppKey.execute();
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Application Key Mapping details are deleted successfully for Application - " + [CtInvocationImpl][CtVariableReadImpl]application.getName());
            }
            [CtAssignmentImpl][CtVariableWriteImpl]deleteApp = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteApplicationQuery);
            [CtInvocationImpl][CtVariableReadImpl]deleteApp.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]application.getId());
            [CtInvocationImpl][CtVariableReadImpl]deleteApp.execute();
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Application " + [CtInvocationImpl][CtVariableReadImpl]application.getName()) + [CtLiteralImpl]" is deleted successfully.");
            }
            [CtIfImpl]if ([CtVariableReadImpl]transactionCompleted) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]connection.commit();
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while removing application details from the database", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmtGetConsumerKey, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtLiteralImpl]null, [CtVariableReadImpl]rs);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]deleteApp, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]deleteAppKey, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]deleteMappingQuery, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]deleteRegistrationQuery, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]deleteSubscription, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]deleteDomainApp, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]deleteAppKey, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]deleteApp, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey[] getConsumerKeysWithMode([CtParameterImpl][CtTypeReferenceImpl]int appId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String mode) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey> consumerKeys = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getConsumerKeyQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_CONSUMER_KEY_WITH_MODE_SLQ;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getConsumerKeyQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]appId);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]mode);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String consumerKey = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CONSUMER_KEY");
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]consumerKey != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]consumerKey.isEmpty())) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey apiKey = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey();
                    [CtInvocationImpl][CtVariableReadImpl]apiKey.setConsumerKey([CtVariableReadImpl]consumerKey);
                    [CtInvocationImpl][CtVariableReadImpl]apiKey.setType([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"KEY_TYPE"));
                    [CtInvocationImpl][CtVariableReadImpl]consumerKeys.add([CtVariableReadImpl]apiKey);
                }
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtLiteralImpl]"Error occurred while getting consumer keys";
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg, [CtVariableReadImpl]e);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]consumerKeys.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey[[CtInvocationImpl][CtVariableReadImpl]consumerKeys.size()]);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns the consumer Key for a given Application Name, Subscriber Name, Key Type, Grouping Id combination.
     *
     * @param applicationName
     * 		Name of the Application.
     * @param subscriberId
     * 		Name of Subscriber.
     * @param keyType
     * 		PRODUCTION | SANDBOX.
     * @param groupingId
     * 		Grouping ID. When set to null query will be performed using the other three values.
     * @return Consumer Key matching the provided combination.
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.lang.String getConsumerKeyForApplicationKeyType([CtParameterImpl][CtTypeReferenceImpl]java.lang.String applicationName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String subscriberId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String keyType, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupingId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String consumerKey = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_CONSUMER_KEY_FOR_APPLICATION_KEY_TYPE_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereSubscriberUserID = [CtLiteralImpl]"SUB.USER_ID = ?";
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]whereSubscriberUserID = [CtLiteralImpl]"lower(SUB.USER_ID) = ?";
            [CtAssignmentImpl][CtVariableWriteImpl]subscriberId = [CtInvocationImpl][CtVariableReadImpl]subscriberId.toLowerCase();
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithGroupId = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]" AND " + [CtLiteralImpl]"(APP.GROUP_ID= ? OR ((APP.GROUP_ID='' OR APP.GROUP_ID IS NULL) AND ") + [CtVariableReadImpl]whereSubscriberUserID) + [CtLiteralImpl]"))";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithMultiGroupId = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]" AND  ( (APP.APPLICATION_ID IN (SELECT APPLICATION_ID  FROM " + [CtLiteralImpl]"AM_APPLICATION_GROUP_MAPPING WHERE GROUP_ID IN ($params) AND TENANT = ?))  OR  ") + [CtVariableReadImpl]whereSubscriberUserID) + [CtLiteralImpl]")";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClause = [CtBinaryOperatorImpl][CtLiteralImpl]" AND " + [CtVariableReadImpl]whereSubscriberUserID;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]groupingId != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtLiteralImpl]"null".equals([CtVariableReadImpl]groupingId))) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]groupingId.isEmpty())) [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtInvocationImpl]getSubscriber([CtVariableReadImpl]subscriberId);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String groupIDArray[] = [CtInvocationImpl][CtVariableReadImpl]groupingId.split([CtLiteralImpl]",");
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithMultiGroupId;
                    [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl]fillQueryParams([CtVariableReadImpl]connection, [CtVariableReadImpl]sqlQuery, [CtVariableReadImpl]groupIDArray, [CtLiteralImpl]3);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]applicationName);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]keyType);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int paramIndex = [CtBinaryOperatorImpl][CtFieldReadImpl][CtVariableReadImpl]groupIDArray.length + [CtLiteralImpl]2;
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]tenantDomain);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]subscriberId);
                } else [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithGroupId;
                    [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]applicationName);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]keyType);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtVariableReadImpl]groupingId);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]4, [CtVariableReadImpl]subscriberId);
                }
            } else [CtBlockImpl]{
                [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClause;
                [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]applicationName);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]keyType);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtVariableReadImpl]subscriberId);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]consumerKey = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CONSUMER_KEY");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error when reading the application information from" + [CtLiteralImpl]" the persistence store.", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]consumerKey;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns the consumer Key for a given Application Name, Subscriber Name, Key Type, Grouping Id combination.
     *
     * @param applicationId
     * 		Id of the Application.
     * @param subscriberId
     * 		Name of Subscriber.
     * @param keyType
     * 		PRODUCTION | SANDBOX.
     * @param groupingId
     * 		Grouping ID. When set to null query will be performed using the other three values.
     * @return Consumer Key matching the provided combination.
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.lang.String getConsumerKeyForApplicationKeyType([CtParameterImpl][CtTypeReferenceImpl]int applicationId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String subscriberId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String keyType, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupingId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String consumerKey = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_CONSUMER_KEY_FOR_APPLICATION_KEY_TYPE_BY_APP_ID_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereSubscriberUserID = [CtLiteralImpl]"SUB.USER_ID = ?";
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]whereSubscriberUserID = [CtLiteralImpl]"lower(SUB.USER_ID) = ?";
            [CtAssignmentImpl][CtVariableWriteImpl]subscriberId = [CtInvocationImpl][CtVariableReadImpl]subscriberId.toLowerCase();
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithGroupId = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]" AND " + [CtLiteralImpl]"(APP.GROUP_ID= ? OR ((APP.GROUP_ID='' OR APP.GROUP_ID IS NULL) AND ") + [CtVariableReadImpl]whereSubscriberUserID) + [CtLiteralImpl]"))";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithMultiGroupId = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]" AND  ( (APP.APPLICATION_ID IN (SELECT APPLICATION_ID  FROM " + [CtLiteralImpl]"AM_APPLICATION_GROUP_MAPPING WHERE GROUP_ID IN ($params) AND TENANT = ?))  OR  ") + [CtVariableReadImpl]whereSubscriberUserID) + [CtLiteralImpl]")";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClause = [CtBinaryOperatorImpl][CtLiteralImpl]" AND " + [CtVariableReadImpl]whereSubscriberUserID;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]groupingId != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtLiteralImpl]"null".equals([CtVariableReadImpl]groupingId))) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]groupingId.isEmpty())) [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtInvocationImpl]getSubscriber([CtVariableReadImpl]subscriberId);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String groupIDArray[] = [CtInvocationImpl][CtVariableReadImpl]groupingId.split([CtLiteralImpl]",");
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithMultiGroupId;
                    [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl]fillQueryParams([CtVariableReadImpl]connection, [CtVariableReadImpl]sqlQuery, [CtVariableReadImpl]groupIDArray, [CtLiteralImpl]3);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]keyType);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int paramIndex = [CtBinaryOperatorImpl][CtFieldReadImpl][CtVariableReadImpl]groupIDArray.length + [CtLiteralImpl]2;
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]tenantDomain);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]paramIndex, [CtVariableReadImpl]subscriberId);
                } else [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClauseWithGroupId;
                    [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]keyType);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtVariableReadImpl]groupingId);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]4, [CtVariableReadImpl]subscriberId);
                }
            } else [CtBlockImpl]{
                [CtOperatorAssignmentImpl][CtVariableWriteImpl]sqlQuery += [CtVariableReadImpl]whereClause;
                [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]keyType);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtVariableReadImpl]subscriberId);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]consumerKey = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CONSUMER_KEY");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error when reading the application information from the persistence store.", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]consumerKey;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method will return a java Map that contains application ID and token type.
     *
     * @param consumerKey
     * 		consumer key of the oAuth application.
     * @return Map.
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> getApplicationIdAndTokenTypeByConsumerKey([CtParameterImpl][CtTypeReferenceImpl]java.lang.String consumerKey) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> appIdAndConsumerKey = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>();
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"fetching application id and token type by consumer key " + [CtVariableReadImpl]consumerKey);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_ID_BY_CONSUMER_KEY_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]consumerKey);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]appIdAndConsumerKey.put([CtLiteralImpl]"application_id", [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_ID"));
                [CtInvocationImpl][CtVariableReadImpl]appIdAndConsumerKey.put([CtLiteralImpl]"token_type", [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"KEY_TYPE"));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error when reading application subscription information", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]appIdAndConsumerKey;
    }

    [CtMethodImpl][CtCommentImpl]/* Delete mapping record by given consumer key */
    public [CtTypeReferenceImpl]void deleteApplicationKeyMappingByConsumerKey([CtParameterImpl][CtTypeReferenceImpl]java.lang.String consumerKey) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteKeyMappingQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.DELETE_APPLICATION_KEY_MAPPING_BY_CONSUMER_KEY_SQL;
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"trying to delete key mapping for consumer id " + [CtVariableReadImpl]consumerKey);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteKeyMappingQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]consumerKey);
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while removing application mapping table", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method will delete a record from AM_APPLICATION_REGISTRATION
     *
     * @param applicationId
     * @param tokenType
     */
    public [CtTypeReferenceImpl]void deleteApplicationKeyMappingByApplicationIdAndType([CtParameterImpl][CtTypeReferenceImpl]java.lang.String applicationId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String tokenType) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteRegistrationEntry = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.DELETE_APPLICATION_KEY_MAPPING_BY_APPLICATION_ID_SQL;
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"trying to delete a record from AM_APPLICATION_KEY_MAPPING table by application ID " + [CtVariableReadImpl]applicationId) + [CtLiteralImpl]" and Token type") + [CtVariableReadImpl]tokenType);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteRegistrationEntry);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]java.lang.Integer.parseInt([CtVariableReadImpl]applicationId));
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]tokenType);
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while removing AM_APPLICATION_KEY_MAPPING table", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Delete a record from AM_APPLICATION_REGISTRATION table by application ID and token type.
     *
     * @param applicationId
     * 		APIM application ID.
     * @param tokenType
     * 		Token type (PRODUCTION || SANDBOX)
     * @throws APIManagementException
     * 		if failed to delete the record.
     */
    public [CtTypeReferenceImpl]void deleteApplicationRegistration([CtParameterImpl][CtTypeReferenceImpl]java.lang.String applicationId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String tokenType) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteRegistrationEntry = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_FROM_APPLICATION_REGISTRANTS_SQL;
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"trying to delete a record from AM_APPLICATION_REGISTRATION table by application ID " + [CtVariableReadImpl]applicationId) + [CtLiteralImpl]" and Token type") + [CtVariableReadImpl]tokenType);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteRegistrationEntry);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]java.lang.Integer.parseInt([CtVariableReadImpl]applicationId));
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]tokenType);
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while removing AM_APPLICATION_REGISTRATION table", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * returns a subscriber record for given username,tenant Id
     *
     * @param username
     * 		UserName
     * @param tenantId
     * 		Tenant Id
     * @param connection
     * @return Subscriber
     * @throws APIManagementException
     * 		if failed to get subscriber
     */
    private [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber getSubscriber([CtParameterImpl][CtTypeReferenceImpl]java.lang.String username, [CtParameterImpl][CtTypeReferenceImpl]int tenantId, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection connection) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery;
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIBER_CASE_INSENSITIVE_SQL;
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIBER_DETAILS_SQL;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]username);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]subscriber = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"USER_ID"));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setEmail([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"EMAIL_ADDRESS"));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"SUBSCRIBER_ID"));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setSubscribedDate([CtInvocationImpl][CtVariableReadImpl]rs.getDate([CtLiteralImpl]"DATE_SUBSCRIBED"));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setTenantId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"TENANT_ID"));
                [CtReturnImpl]return [CtVariableReadImpl]subscriber;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error when reading the application information from" + [CtLiteralImpl]" the persistence store.", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtLiteralImpl]null, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]subscriber;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void recordAPILifeCycleEvent([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStatus oldStatus, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStatus newStatus, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl]recordAPILifeCycleEvent([CtVariableReadImpl]identifier, [CtInvocationImpl][CtVariableReadImpl]oldStatus.toString(), [CtInvocationImpl][CtVariableReadImpl]newStatus.toString(), [CtVariableReadImpl]userId, [CtVariableReadImpl]tenantId, [CtVariableReadImpl]conn);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to record API state change", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtLiteralImpl]null, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void recordAPILifeCycleEvent([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String oldStatus, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String newStatus, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl]recordAPILifeCycleEvent([CtVariableReadImpl]identifier, [CtVariableReadImpl]oldStatus, [CtVariableReadImpl]newStatus, [CtVariableReadImpl]userId, [CtVariableReadImpl]tenantId, [CtVariableReadImpl]conn);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to record API state change", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtLiteralImpl]null, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void recordAPILifeCycleEvent([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String oldStatus, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String newStatus, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId, [CtParameterImpl][CtTypeReferenceImpl]int tenantId, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtCommentImpl]// Connection conn = null;
        [CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement selectQuerySt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int apiId = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]oldStatus == [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]newStatus.equals([CtTypeAccessImpl]APIConstants.CREATED))) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtLiteralImpl]"Invalid old and new state combination";
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
        } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]oldStatus != [CtLiteralImpl]null) && [CtInvocationImpl][CtVariableReadImpl]oldStatus.equals([CtVariableReadImpl]newStatus)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtLiteralImpl]"No measurable differences in API state";
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getAPIQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_ID_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_API_LIFECYCLE_EVENT_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]selectQuerySt = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]getAPIQuery);
            [CtInvocationImpl][CtVariableReadImpl]selectQuerySt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]selectQuerySt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]identifier.getApiName());
            [CtInvocationImpl][CtVariableReadImpl]selectQuerySt.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]identifier.getVersion());
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]selectQuerySt.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]apiId = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"API_ID");
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiId == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Unable to find the API: " + [CtVariableReadImpl]identifier) + [CtLiteralImpl]" in the database";
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]oldStatus != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]oldStatus);
            } else [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]ps.setNull([CtLiteralImpl]2, [CtFieldReadImpl][CtTypeAccessImpl]java.sql.Types.[CtFieldReferenceImpl]VARCHAR);
            }
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtVariableReadImpl]newStatus);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]4, [CtVariableReadImpl]userId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]5, [CtVariableReadImpl]tenantId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setTimestamp([CtLiteralImpl]6, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.sql.Timestamp([CtInvocationImpl][CtTypeAccessImpl]java.lang.System.currentTimeMillis()));
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            [CtInvocationImpl][CtCommentImpl]// finally commit transaction
            [CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback the API state change record", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to record API state change", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]selectQuerySt, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtLiteralImpl]null, [CtVariableReadImpl]resultSet);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void updateDefaultAPIPublishedVersion([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String oldStatus, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String newStatus) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]oldStatus.equals([CtVariableReadImpl]newStatus)) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtTypeAccessImpl]APIConstants.CREATED.equals([CtVariableReadImpl]newStatus) || [CtInvocationImpl][CtTypeAccessImpl]APIConstants.RETIRED.equals([CtVariableReadImpl]newStatus)) && [CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtInvocationImpl][CtTypeAccessImpl]APIConstants.PUBLISHED.equals([CtVariableReadImpl]oldStatus) || [CtInvocationImpl][CtTypeAccessImpl]APIConstants.DEPRECATED.equals([CtVariableReadImpl]oldStatus)) || [CtInvocationImpl][CtTypeAccessImpl]APIConstants.BLOCKED.equals([CtVariableReadImpl]oldStatus))) [CtBlockImpl]{
                    [CtInvocationImpl]setPublishedDefVersion([CtVariableReadImpl]identifier, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
                } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtTypeAccessImpl]APIConstants.PUBLISHED.equals([CtVariableReadImpl]newStatus) || [CtInvocationImpl][CtTypeAccessImpl]APIConstants.DEPRECATED.equals([CtVariableReadImpl]newStatus)) || [CtInvocationImpl][CtTypeAccessImpl]APIConstants.BLOCKED.equals([CtVariableReadImpl]newStatus)) [CtBlockImpl]{
                    [CtInvocationImpl]setPublishedDefVersion([CtVariableReadImpl]identifier, [CtVariableReadImpl]conn, [CtInvocationImpl][CtVariableReadImpl]identifier.getVersion());
                }
            }
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to update published default API state change", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtLiteralImpl]null, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.LifeCycleEvent> getLifeCycleEvents([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_LIFECYCLE_EVENT_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.LifeCycleEvent> events = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.LifeCycleEvent>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]apiId.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]apiId.getApiName());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]apiId.getVersion());
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.LifeCycleEvent event = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.LifeCycleEvent();
                [CtInvocationImpl][CtVariableReadImpl]event.setApi([CtVariableReadImpl]apiId);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String oldState = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"PREVIOUS_STATE");
                [CtInvocationImpl][CtCommentImpl]// event.setOldStatus(oldState != null ? APIStatus.valueOf(oldState) : null);
                [CtVariableReadImpl]event.setOldStatus([CtConditionalImpl][CtBinaryOperatorImpl][CtVariableReadImpl]oldState != [CtLiteralImpl]null ? [CtVariableReadImpl]oldState : [CtLiteralImpl]null);
                [CtInvocationImpl][CtCommentImpl]// event.setNewStatus(APIStatus.valueOf(rs.getString("NEW_STATE")));
                [CtVariableReadImpl]event.setNewStatus([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NEW_STATE"));
                [CtInvocationImpl][CtVariableReadImpl]event.setUserId([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"USER_ID"));
                [CtInvocationImpl][CtVariableReadImpl]event.setDate([CtInvocationImpl][CtVariableReadImpl]rs.getTimestamp([CtLiteralImpl]"EVENT_DATE"));
                [CtInvocationImpl][CtVariableReadImpl]events.add([CtVariableReadImpl]event);
            } 
            [CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.sort([CtVariableReadImpl]events, [CtNewClassImpl]new [CtTypeReferenceImpl]java.util.Comparator<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.LifeCycleEvent>()[CtClassImpl] {
                [CtMethodImpl]public [CtTypeReferenceImpl]int compare([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.LifeCycleEvent o1, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.LifeCycleEvent o2) [CtBlockImpl]{
                    [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]o1.getDate().compareTo([CtInvocationImpl][CtVariableReadImpl]o2.getDate());
                }
            });
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error when executing the SQL : " + [CtVariableReadImpl]sqlQuery, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]events;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void makeKeysForwardCompatible([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.ApiTypeWrapper apiTypeWrapper, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String oldVersion) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement addSubKeySt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement getAppSt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getSubscriptionDataQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_DATA_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String addSubKeyMapping = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_SUBSCRIPTION_KEY_MAPPING_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getApplicationDataQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_DATA_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiIdentifier = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]apiTypeWrapper.getApi().getId();
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtCommentImpl]// Retrieve all the existing subscription for the old version
            [CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getSubscriptionDataQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getApiName());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtVariableReadImpl]oldVersion);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.SubscriptionInfo> subscriptionData = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.SubscriptionInfo>();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.Integer> subscribedApplications = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<[CtTypeReferenceImpl]java.lang.Integer>();
            [CtWhileImpl]while ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]rs.next() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.ON_HOLD.equals([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"SUB_STATUS")))) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.SubscriptionInfo info = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.SubscriptionInfo();
                [CtAssignmentImpl][CtFieldWriteImpl][CtVariableReadImpl]info.subscriptionId = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"SUBSCRIPTION_ID");
                [CtAssignmentImpl][CtFieldWriteImpl][CtVariableReadImpl]info.tierId = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"TIER_ID");
                [CtAssignmentImpl][CtFieldWriteImpl][CtVariableReadImpl]info.applicationId = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"APPLICATION_ID");
                [CtAssignmentImpl][CtFieldWriteImpl][CtVariableReadImpl]info.accessToken = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"ACCESS_TOKEN");[CtCommentImpl]// no decryption needed.

                [CtAssignmentImpl][CtFieldWriteImpl][CtVariableReadImpl]info.tokenType = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"KEY_TYPE");
                [CtAssignmentImpl][CtFieldWriteImpl][CtVariableReadImpl]info.subscriptionStatus = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"SUB_STATUS");
                [CtInvocationImpl][CtVariableReadImpl]subscriptionData.add([CtVariableReadImpl]info);
            } 
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]java.lang.Integer> subscriptionIdMap = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]java.lang.Integer>();
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.SubscriptionInfo info : [CtVariableReadImpl]subscriptionData) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]subscriptionIdMap.containsKey([CtFieldReadImpl][CtVariableReadImpl]info.subscriptionId)) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriptionStatus;
                        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.BLOCKED.equalsIgnoreCase([CtFieldReadImpl][CtVariableReadImpl]info.subscriptionStatus)) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]subscriptionStatus = [CtFieldReadImpl]APIConstants.SubscriptionStatus.BLOCKED;
                        } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.UNBLOCKED.equalsIgnoreCase([CtFieldReadImpl][CtVariableReadImpl]info.subscriptionStatus)) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]subscriptionStatus = [CtFieldReadImpl]APIConstants.SubscriptionStatus.UNBLOCKED;
                        } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.PROD_ONLY_BLOCKED.equalsIgnoreCase([CtFieldReadImpl][CtVariableReadImpl]info.subscriptionStatus)) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]subscriptionStatus = [CtFieldReadImpl]APIConstants.SubscriptionStatus.PROD_ONLY_BLOCKED;
                        } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.REJECTED.equalsIgnoreCase([CtFieldReadImpl][CtVariableReadImpl]info.subscriptionStatus)) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]subscriptionStatus = [CtFieldReadImpl]APIConstants.SubscriptionStatus.REJECTED;
                        } else [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]subscriptionStatus = [CtFieldReadImpl]APIConstants.SubscriptionStatus.ON_HOLD;
                        }
                        [CtInvocationImpl][CtVariableReadImpl]apiTypeWrapper.setTier([CtFieldReadImpl][CtVariableReadImpl]info.tierId);
                        [CtLocalVariableImpl][CtTypeReferenceImpl]int subscriptionId = [CtInvocationImpl]addSubscription([CtVariableReadImpl]apiTypeWrapper, [CtFieldReadImpl][CtVariableReadImpl]info.applicationId, [CtVariableReadImpl]subscriptionStatus);
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]subscriptionId == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Unable to add a new subscription for the API: " + [CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getName()) + [CtLiteralImpl]":v") + [CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getVersion();
                            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
                        }
                        [CtInvocationImpl][CtVariableReadImpl]subscriptionIdMap.put([CtFieldReadImpl][CtVariableReadImpl]info.subscriptionId, [CtVariableReadImpl]subscriptionId);
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int subscriptionId = [CtInvocationImpl][CtVariableReadImpl]subscriptionIdMap.get([CtFieldReadImpl][CtVariableReadImpl]info.subscriptionId);
                    [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
                    [CtAssignmentImpl][CtVariableWriteImpl]addSubKeySt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]addSubKeyMapping);
                    [CtInvocationImpl][CtVariableReadImpl]addSubKeySt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]subscriptionId);
                    [CtInvocationImpl][CtVariableReadImpl]addSubKeySt.setString([CtLiteralImpl]2, [CtFieldReadImpl][CtVariableReadImpl]info.accessToken);
                    [CtInvocationImpl][CtVariableReadImpl]addSubKeySt.setString([CtLiteralImpl]3, [CtFieldReadImpl][CtVariableReadImpl]info.tokenType);
                    [CtInvocationImpl][CtVariableReadImpl]addSubKeySt.execute();
                    [CtInvocationImpl][CtVariableReadImpl]connection.commit();
                    [CtInvocationImpl][CtVariableReadImpl]subscribedApplications.add([CtFieldReadImpl][CtVariableReadImpl]info.applicationId);
                    [CtCommentImpl]// catching the exception because when copy the api without the option "require re-subscription"
                    [CtCommentImpl]// need to go forward rather throwing the exception
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.SubscriptionAlreadyExistingException e) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtBinaryOperatorImpl][CtLiteralImpl]"Error while adding subscription " + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]e);
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.SubscriptionBlockedException e) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.info([CtBinaryOperatorImpl][CtLiteralImpl]"Subscription is blocked: " + [CtInvocationImpl][CtVariableReadImpl]e.getMessage());
                }
            }
            [CtAssignmentImpl][CtVariableWriteImpl]getAppSt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getApplicationDataQuery);
            [CtInvocationImpl][CtVariableReadImpl]getAppSt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]getAppSt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getName());
            [CtInvocationImpl][CtVariableReadImpl]getAppSt.setString([CtLiteralImpl]3, [CtVariableReadImpl]oldVersion);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]getAppSt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]int applicationId = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"APPLICATION_ID");
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]subscribedApplications.contains([CtVariableReadImpl]applicationId)) [CtBlockImpl]{
                    [CtTryImpl]try [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriptionStatus;
                        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.BLOCKED.equalsIgnoreCase([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"SUB_STATUS"))) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]subscriptionStatus = [CtFieldReadImpl]APIConstants.SubscriptionStatus.BLOCKED;
                        } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.UNBLOCKED.equalsIgnoreCase([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"SUB_STATUS"))) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]subscriptionStatus = [CtFieldReadImpl]APIConstants.SubscriptionStatus.UNBLOCKED;
                        } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.PROD_ONLY_BLOCKED.equalsIgnoreCase([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"SUB_STATUS"))) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]subscriptionStatus = [CtFieldReadImpl]APIConstants.SubscriptionStatus.PROD_ONLY_BLOCKED;
                        } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.REJECTED.equalsIgnoreCase([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"SUB_STATUS"))) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]subscriptionStatus = [CtFieldReadImpl]APIConstants.SubscriptionStatus.REJECTED;
                        } else [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]subscriptionStatus = [CtFieldReadImpl]APIConstants.SubscriptionStatus.ON_HOLD;
                        }
                        [CtInvocationImpl][CtVariableReadImpl]apiTypeWrapper.setTier([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"TIER_ID"));
                        [CtInvocationImpl]addSubscription([CtVariableReadImpl]apiTypeWrapper, [CtVariableReadImpl]applicationId, [CtVariableReadImpl]subscriptionStatus);
                        [CtCommentImpl]// catching the exception because when copy the api without the option "require re-subscription"
                        [CtCommentImpl]// need to go forward rather throwing the exception
                    }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.SubscriptionAlreadyExistingException e) [CtBlockImpl]{
                        [CtInvocationImpl][CtCommentImpl]// Not handled as an error because same subscription can be there in many previous versions.
                        [CtCommentImpl]// Ex: if previous version was created by another older version and if the subscriptions are
                        [CtCommentImpl]// Forwarded, then the third one will get same subscription from previous two versions.
                        [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.info([CtBinaryOperatorImpl][CtLiteralImpl]"Subscription already exists: " + [CtInvocationImpl][CtVariableReadImpl]e.getMessage());
                    }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.SubscriptionBlockedException e) [CtBlockImpl]{
                        [CtInvocationImpl][CtCommentImpl]// Not handled as an error because we cannot update subscriptions for an API with blocked subscriptions
                        [CtCommentImpl]// If previous version was created by another older version and if the subscriptions are
                        [CtCommentImpl]// Forwarded, by catching the exception we will continue checking the other subscriptions
                        [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.info([CtBinaryOperatorImpl][CtLiteralImpl]"Subscription is blocked: " + [CtInvocationImpl][CtVariableReadImpl]e.getMessage());
                    }
                }
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error when executing the SQL queries", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]getAppSt, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]addSubKeySt, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void addAPI([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.API api, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_API_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtLiteralImpl]"api_id" });
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]api.getId().getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]api.getId().getApiName());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]api.getId().getVersion());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]api.getContext());
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String contextTemplate = [CtInvocationImpl][CtVariableReadImpl]api.getContextTemplate();
            [CtLocalVariableImpl][CtCommentImpl]// Validate if the API has an unsupported context before executing the query
            [CtTypeReferenceImpl]java.lang.String invalidContext = [CtBinaryOperatorImpl][CtLiteralImpl]"/" + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.VERSION_PLACEHOLDER;
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]invalidContext.equals([CtVariableReadImpl]contextTemplate)) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Cannot add API : " + [CtInvocationImpl][CtVariableReadImpl]api.getId()) + [CtLiteralImpl]" with unsupported context : ") + [CtVariableReadImpl]contextTemplate);
            }
            [CtIfImpl][CtCommentImpl]// If the context template ends with {version} this means that the version will be at the end of the context.
            if ([CtInvocationImpl][CtVariableReadImpl]contextTemplate.endsWith([CtBinaryOperatorImpl][CtLiteralImpl]"/" + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.VERSION_PLACEHOLDER)) [CtBlockImpl]{
                [CtAssignmentImpl][CtCommentImpl]// Remove the {version} part from the context template.
                [CtVariableWriteImpl]contextTemplate = [CtArrayReadImpl][CtInvocationImpl][CtVariableReadImpl]contextTemplate.split([CtInvocationImpl][CtTypeAccessImpl]java.util.regex.Pattern.quote([CtBinaryOperatorImpl][CtLiteralImpl]"/" + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.VERSION_PLACEHOLDER))[[CtLiteralImpl]0];
            }
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]5, [CtVariableReadImpl]contextTemplate);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]6, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]api.getId().getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setTimestamp([CtLiteralImpl]7, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.sql.Timestamp([CtInvocationImpl][CtTypeAccessImpl]java.lang.System.currentTimeMillis()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]8, [CtInvocationImpl][CtVariableReadImpl]api.getApiLevelPolicy());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.getGeneratedKeys();
            [CtLocalVariableImpl][CtTypeReferenceImpl]int apiId = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]apiId = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]1);
            }
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]api.getScopes() != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtSynchronizedImpl]synchronized([CtFieldReadImpl]scopeMutex) [CtBlockImpl]{
                    [CtInvocationImpl]addScopes([CtInvocationImpl][CtVariableReadImpl]api.getScopes(), [CtInvocationImpl][CtVariableReadImpl]api.getId(), [CtVariableReadImpl]apiId, [CtVariableReadImpl]tenantId);
                }
            }
            [CtInvocationImpl]addURLTemplates([CtVariableReadImpl]apiId, [CtVariableReadImpl]api, [CtVariableReadImpl]connection);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantUserName = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantAwareUsername([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]api.getId().getProviderName()));
            [CtInvocationImpl]recordAPILifeCycleEvent([CtInvocationImpl][CtVariableReadImpl]api.getId(), [CtLiteralImpl]null, [CtInvocationImpl][CtTypeAccessImpl]APIStatus.CREATED.toString(), [CtVariableReadImpl]tenantUserName, [CtVariableReadImpl]tenantId, [CtVariableReadImpl]connection);
            [CtIfImpl][CtCommentImpl]// If the api is selected as default version, it is added/replaced into AM_API_DEFAULT_VERSION table
            if ([CtInvocationImpl][CtVariableReadImpl]api.isDefaultVersion()) [CtBlockImpl]{
                [CtInvocationImpl]addUpdateAPIAsDefaultVersion([CtVariableReadImpl]api, [CtVariableReadImpl]connection);
            }
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error while adding the API: " + [CtInvocationImpl][CtVariableReadImpl]api.getId()) + [CtLiteralImpl]" to the database", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.lang.String getDefaultVersion([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String oldDefaultVersion = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_DEFAULT_VERSION_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]apiId.getApiName());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]apiId.getProviderName()));
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]oldDefaultVersion = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"DEFAULT_API_VERSION");
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while getting default version for " + [CtInvocationImpl][CtVariableReadImpl]apiId.getApiName(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]oldDefaultVersion;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Persists WorkflowDTO to Database
     *
     * @param workflow
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void addWorkflowEntry([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.WorkflowDTO workflow) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_WORKFLOW_ENTRY_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Timestamp cratedDateStamp = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.sql.Timestamp([CtInvocationImpl][CtVariableReadImpl]workflow.getCreatedTime());
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]workflow.getWorkflowReference());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]workflow.getWorkflowType());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]workflow.getStatus().toString());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setTimestamp([CtLiteralImpl]4, [CtVariableReadImpl]cratedDateStamp);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]5, [CtInvocationImpl][CtVariableReadImpl]workflow.getWorkflowDescription());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]6, [CtInvocationImpl][CtVariableReadImpl]workflow.getTenantId());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]7, [CtInvocationImpl][CtVariableReadImpl]workflow.getTenantDomain());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]8, [CtInvocationImpl][CtVariableReadImpl]workflow.getExternalWorkflowReference());
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]byte[] byteData1 = [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]workflow.getMetadata().toJSONString().getBytes([CtLiteralImpl]"UTF-8");
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]byte[] byteData2 = [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]workflow.getProperties().toJSONString().getBytes([CtLiteralImpl]"UTF-8");
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setBlob([CtLiteralImpl]9, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.io.ByteArrayInputStream([CtVariableReadImpl]byteData1));
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setBlob([CtLiteralImpl]10, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.io.ByteArrayInputStream([CtVariableReadImpl]byteData2));
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtTypeReferenceImpl]java.sql.SQLException | [CtTypeReferenceImpl]java.io.UnsupportedEncodingException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error while adding Workflow : " + [CtInvocationImpl][CtVariableReadImpl]workflow.getExternalWorkflowReference()) + [CtLiteralImpl]" to the ") + [CtLiteralImpl]"database", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void updateWorkflowStatus([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.WorkflowDTO workflowDTO) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_WORKFLOW_ENTRY_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Timestamp updatedTimeStamp = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.sql.Timestamp([CtInvocationImpl][CtVariableReadImpl]workflowDTO.getUpdatedTime());
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]workflowDTO.getStatus().toString());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]workflowDTO.getWorkflowDescription());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]workflowDTO.getExternalWorkflowReference());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while updating Workflow Status of workflow " + [CtInvocationImpl][CtVariableReadImpl]workflowDTO.getExternalWorkflowReference(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns a workflow object for a given external workflow reference.
     *
     * @param workflowReference
     * @return  * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.WorkflowDTO retrieveWorkflow([CtParameterImpl][CtTypeReferenceImpl]java.lang.String workflowReference) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.WorkflowDTO workflowDTO = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ALL_WORKFLOW_ENTRY_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]workflowReference);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]workflowDTO = [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.workflow.WorkflowExecutorFactory.getInstance().createWorkflowDTO([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_TYPE"));
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setStatus([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.workflow.WorkflowStatus.valueOf([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_STATUS")));
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setExternalWorkflowReference([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_EXTERNAL_REFERENCE"));
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setCreatedTime([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]rs.getTimestamp([CtLiteralImpl]"WF_CREATED_TIME").getTime());
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setWorkflowReference([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_REFERENCE"));
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setTenantDomain([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"TENANT_DOMAIN"));
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setTenantId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"TENANT_ID"));
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setWorkflowDescription([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_STATUS_DESC"));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while retrieving workflow details for " + [CtVariableReadImpl]workflowReference, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]workflowDTO;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns a workflow object for a given internal workflow reference and the workflow type.
     *
     * @param workflowReference
     * @param workflowType
     * @return  * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.WorkflowDTO retrieveWorkflowFromInternalReference([CtParameterImpl][CtTypeReferenceImpl]java.lang.String workflowReference, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String workflowType) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.WorkflowDTO workflowDTO = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ALL_WORKFLOW_ENTRY_FROM_INTERNAL_REF_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]workflowReference);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]workflowType);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]workflowDTO = [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.workflow.WorkflowExecutorFactory.getInstance().createWorkflowDTO([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_TYPE"));
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setStatus([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.workflow.WorkflowStatus.valueOf([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_STATUS")));
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setExternalWorkflowReference([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_EXTERNAL_REFERENCE"));
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setCreatedTime([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]rs.getTimestamp([CtLiteralImpl]"WF_CREATED_TIME").getTime());
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setWorkflowReference([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_REFERENCE"));
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setTenantDomain([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"TENANT_DOMAIN"));
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setTenantId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"TENANT_ID"));
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setWorkflowDescription([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_STATUS_DESC"));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while retrieving workflow details for " + [CtVariableReadImpl]workflowReference, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]workflowDTO;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void setPublishedDefVersion([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiId, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection connection, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String value) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String queryDefaultVersionUpdate = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_PUBLISHED_DEFAULT_VERSION_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmtDefVersionUpdate = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmtDefVersionUpdate = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]queryDefaultVersionUpdate);
            [CtInvocationImpl][CtVariableReadImpl]prepStmtDefVersionUpdate.setString([CtLiteralImpl]1, [CtVariableReadImpl]value);
            [CtInvocationImpl][CtVariableReadImpl]prepStmtDefVersionUpdate.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]apiId.getApiName());
            [CtInvocationImpl][CtVariableReadImpl]prepStmtDefVersionUpdate.setString([CtLiteralImpl]3, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]apiId.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmtDefVersionUpdate.execute();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error while deleting the API default version entry: " + [CtInvocationImpl][CtVariableReadImpl]apiId.getApiName()) + [CtLiteralImpl]" from the ") + [CtLiteralImpl]"database", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmtDefVersionUpdate, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Sets/removes default api entry such that api will not represent as default api further.
     * If the api's version is the same as the published version, then the whole entry will be removed.
     * Otherwise only the default version attribute is set to null.
     *
     * @param apiId
     * @param connection
     * @return  * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void removeAPIFromDefaultVersion([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiId, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection connection) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String queryDefaultVersionDelete = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_API_DEFAULT_VERSION_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmtDefVersionDelete = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmtDefVersionDelete = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]queryDefaultVersionDelete);
            [CtInvocationImpl][CtVariableReadImpl]prepStmtDefVersionDelete.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]apiId.getApiName());
            [CtInvocationImpl][CtVariableReadImpl]prepStmtDefVersionDelete.setString([CtLiteralImpl]2, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]apiId.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmtDefVersionDelete.execute();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error while deleting the API default version entry: " + [CtInvocationImpl][CtVariableReadImpl]apiId.getApiName()) + [CtLiteralImpl]" from the ") + [CtLiteralImpl]"database", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmtDefVersionDelete, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.lang.String getPublishedDefaultVersion([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String publishedDefaultVersion = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_PUBLISHED_DEFAULT_VERSION_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]apiId.getApiName());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]apiId.getProviderName()));
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]publishedDefaultVersion = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"PUBLISHED_DEFAULT_API_VERSION");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while getting default version for " + [CtInvocationImpl][CtVariableReadImpl]apiId.getApiName(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]publishedDefaultVersion;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void addUpdateAPIAsDefaultVersion([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.API api, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection connection) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String publishedDefaultVersion = [CtInvocationImpl]getPublishedDefaultVersion([CtInvocationImpl][CtVariableReadImpl]api.getId());
        [CtInvocationImpl]removeAPIFromDefaultVersion([CtInvocationImpl][CtVariableReadImpl]api.getId(), [CtVariableReadImpl]connection);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmtDefVersionAdd = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String queryDefaultVersionAdd = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_API_DEFAULT_VERSION_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmtDefVersionAdd = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]queryDefaultVersionAdd);
            [CtInvocationImpl][CtVariableReadImpl]prepStmtDefVersionAdd.setString([CtLiteralImpl]1, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]api.getId().getApiName());
            [CtInvocationImpl][CtVariableReadImpl]prepStmtDefVersionAdd.setString([CtLiteralImpl]2, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]api.getId().getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmtDefVersionAdd.setString([CtLiteralImpl]3, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]api.getId().getVersion());
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String apistatus = [CtInvocationImpl][CtVariableReadImpl]api.getStatus();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtTypeAccessImpl]APIConstants.PUBLISHED.equals([CtVariableReadImpl]apistatus) || [CtInvocationImpl][CtTypeAccessImpl]APIConstants.DEPRECATED.equals([CtVariableReadImpl]apistatus)) || [CtInvocationImpl][CtTypeAccessImpl]APIConstants.BLOCKED.equals([CtVariableReadImpl]apistatus)) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]prepStmtDefVersionAdd.setString([CtLiteralImpl]4, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]api.getId().getVersion());
            } else [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]prepStmtDefVersionAdd.setString([CtLiteralImpl]4, [CtVariableReadImpl]publishedDefaultVersion);
            }
            [CtInvocationImpl][CtVariableReadImpl]prepStmtDefVersionAdd.execute();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error while adding the API default version entry: " + [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]api.getId().getApiName()) + [CtLiteralImpl]" to ") + [CtLiteralImpl]"the database", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmtDefVersionAdd, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Adds URI templates define for an API
     *
     * @param apiId
     * @param api
     * @param connection
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void addURLTemplates([CtParameterImpl][CtTypeReferenceImpl]int apiId, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.API api, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection connection) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiId == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
            [CtReturnImpl][CtCommentImpl]// application addition has failed
            return;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement scopePrepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_URL_MAPPING_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String scopeQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_OAUTH2_RESOURCE_SCOPE_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtAssignmentImpl][CtVariableWriteImpl]scopePrepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]scopeQuery);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Iterator<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate> uriTemplateIterator = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]api.getUriTemplates().iterator();
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate uriTemplate;
            [CtForImpl]for (; [CtInvocationImpl][CtVariableReadImpl]uriTemplateIterator.hasNext();) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]uriTemplate = [CtInvocationImpl][CtVariableReadImpl]uriTemplateIterator.next();
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]uriTemplate.getHTTPVerb());
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]uriTemplate.getAuthType());
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]uriTemplate.getUriTemplate());
                [CtIfImpl][CtCommentImpl]// If API policy is available then set it for all the resources.
                if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtInvocationImpl][CtVariableReadImpl]api.getApiLevelPolicy())) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]5, [CtConditionalImpl][CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtInvocationImpl][CtVariableReadImpl]uriTemplate.getThrottlingTier()) ? [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.UNLIMITED_TIER : [CtInvocationImpl][CtVariableReadImpl]uriTemplate.getThrottlingTier());
                } else [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]5, [CtConditionalImpl][CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtInvocationImpl][CtVariableReadImpl]api.getApiLevelPolicy()) ? [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.UNLIMITED_TIER : [CtInvocationImpl][CtVariableReadImpl]api.getApiLevelPolicy());
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.io.InputStream is;
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getMediationScript() != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]is = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.io.ByteArrayInputStream([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getMediationScript().getBytes([CtInvocationImpl][CtTypeAccessImpl]java.nio.charset.Charset.defaultCharset()));
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]is = [CtLiteralImpl]null;
                }
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]connection.getMetaData().getDriverName().contains([CtLiteralImpl]"PostgreSQL") || [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]connection.getMetaData().getDatabaseProductName().contains([CtLiteralImpl]"DB2")) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getMediationScript() != [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]prepStmt.setBinaryStream([CtLiteralImpl]6, [CtVariableReadImpl]is, [CtFieldReadImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getMediationScript().getBytes([CtInvocationImpl][CtTypeAccessImpl]java.nio.charset.Charset.defaultCharset()).length);
                    } else [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]prepStmt.setBinaryStream([CtLiteralImpl]6, [CtVariableReadImpl]is, [CtLiteralImpl]0);
                    }
                } else [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setBinaryStream([CtLiteralImpl]6, [CtVariableReadImpl]is);
                }
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.addBatch();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScope() != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]scopePrepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getResourceKey([CtVariableReadImpl]api, [CtVariableReadImpl]uriTemplate));
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScope().getId() == [CtLiteralImpl]0) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String scopeKey = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScope().getKey();
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope scopeByKey = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.findScopeByKey([CtInvocationImpl][CtVariableReadImpl]api.getScopes(), [CtVariableReadImpl]scopeKey);
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]scopeByKey != [CtLiteralImpl]null) [CtBlockImpl]{
                            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]scopeByKey.getId() > [CtLiteralImpl]0) [CtBlockImpl]{
                                [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScopes().setId([CtInvocationImpl][CtVariableReadImpl]scopeByKey.getId());
                            }
                        }
                    }
                    [CtInvocationImpl][CtVariableReadImpl]scopePrepStmt.setInt([CtLiteralImpl]2, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScope().getId());
                    [CtInvocationImpl][CtVariableReadImpl]scopePrepStmt.setInt([CtLiteralImpl]3, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]api.getId().getProviderName())));
                    [CtInvocationImpl][CtVariableReadImpl]scopePrepStmt.addBatch();
                }
            }
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeBatch();
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.clearBatch();
            [CtInvocationImpl][CtVariableReadImpl]scopePrepStmt.executeBatch();
            [CtInvocationImpl][CtVariableReadImpl]scopePrepStmt.clearBatch();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while adding URL template(s) to the database for API : " + [CtInvocationImpl][CtVariableReadImpl]api.getId(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]scopePrepStmt, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Fetches an Application with OAuth Apps, by name.
     *
     * @param applicationName
     * 		Name of the Application
     * @param userId
     * 		Name of the User.
     * @param groupId
     * 		Group ID
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application getApplicationWithOAuthApps([CtParameterImpl][CtTypeReferenceImpl]java.lang.String applicationName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application = [CtInvocationImpl]getApplicationByName([CtVariableReadImpl]applicationName, [CtVariableReadImpl]userId, [CtVariableReadImpl]groupId);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]application != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo> keyMap = [CtInvocationImpl]getOAuthApplications([CtInvocationImpl][CtVariableReadImpl]application.getId());
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo> entry : [CtInvocationImpl][CtVariableReadImpl]keyMap.entrySet()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]application.addOAuthApp([CtInvocationImpl][CtVariableReadImpl]entry.getKey(), [CtInvocationImpl][CtVariableReadImpl]entry.getValue());
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]application;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Checks whether application is accessible to the specified user
     *
     * @param applicationID
     * 		ID of the Application
     * @param userId
     * 		Name of the User.
     * @param groupId
     * 		Group IDs
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]boolean isAppAllowed([CtParameterImpl][CtTypeReferenceImpl]int applicationID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtLiteralImpl]"SELECT APP.APPLICATION_ID FROM AM_SUBSCRIBER SUB, AM_APPLICATION APP";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClause = [CtBinaryOperatorImpl][CtLiteralImpl]"  WHERE SUB.USER_ID =? AND APP.APPLICATION_ID=? AND " + [CtLiteralImpl]"SUB.SUBSCRIBER_ID=APP.SUBSCRIBER_ID";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseCaseInSensitive = [CtBinaryOperatorImpl][CtLiteralImpl]"  WHERE LOWER(SUB.USER_ID) =LOWER(?) AND APP.APPLICATION_ID=? AND SUB" + [CtLiteralImpl]".SUBSCRIBER_ID=APP.SUBSCRIBER_ID";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithGroupId = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"  WHERE  (APP.GROUP_ID = ? OR ((APP.GROUP_ID='' OR APP.GROUP_ID IS NULL)" + [CtLiteralImpl]" AND SUB.USER_ID = ?)) AND ") + [CtLiteralImpl]"APP.APPLICATION_ID = ? AND SUB.SUBSCRIBER_ID = APP.SUBSCRIBER_ID";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithMultiGroupId = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"  WHERE  ((APP.APPLICATION_ID IN (SELECT APPLICATION_ID  FROM " + [CtLiteralImpl]"AM_APPLICATION_GROUP_MAPPING WHERE GROUP_ID IN ($params) AND TENANT = ?))  OR   SUB.USER_ID = ? ") + [CtLiteralImpl]"OR (APP.APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE GROUP_ID = ?))) ") + [CtLiteralImpl]"AND APP.APPLICATION_ID = ? AND SUB.SUBSCRIBER_ID = APP.SUBSCRIBER_ID";
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtVariableReadImpl]groupId)) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]APIConstants.NULL_GROUPID_LIST.equals([CtVariableReadImpl]groupId))) [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtInvocationImpl]getSubscriber([CtVariableReadImpl]userId);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]query += [CtVariableReadImpl]whereClauseWithMultiGroupId;
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] groupIds = [CtInvocationImpl][CtVariableReadImpl]groupId.split([CtLiteralImpl]",");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int parameterIndex = [CtFieldReadImpl][CtVariableReadImpl]groupIds.length;
                    [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl]fillQueryParams([CtVariableReadImpl]connection, [CtVariableReadImpl]query, [CtVariableReadImpl]groupIds, [CtLiteralImpl]1);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]parameterIndex, [CtVariableReadImpl]tenantDomain);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]parameterIndex, [CtVariableReadImpl]userId);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]parameterIndex, [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]tenantDomain + [CtLiteralImpl]'/') + [CtVariableReadImpl]groupId);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtUnaryOperatorImpl]++[CtVariableWriteImpl]parameterIndex, [CtVariableReadImpl]applicationID);
                } else [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]query += [CtVariableReadImpl]whereClauseWithGroupId;
                    [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]groupId);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]userId);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]3, [CtVariableReadImpl]applicationID);
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]query += [CtVariableReadImpl]whereClauseCaseInSensitive;
                } else [CtBlockImpl]{
                    [CtOperatorAssignmentImpl][CtVariableWriteImpl]query += [CtVariableReadImpl]whereClause;
                }
                [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]userId);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]2, [CtVariableReadImpl]applicationID);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtReturnImpl]return [CtLiteralImpl]true;
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error while checking whether the application : " + [CtVariableReadImpl]applicationID) + [CtLiteralImpl]" is accessible ") + [CtLiteralImpl]"to user ") + [CtVariableReadImpl]userId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtLiteralImpl]false;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Fetches an Application by name.
     *
     * @param applicationName
     * 		Name of the Application
     * @param userId
     * 		Name of the User.
     * @param groupId
     * 		Group ID
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application getApplicationByName([CtParameterImpl][CtTypeReferenceImpl]java.lang.String applicationName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtCommentImpl]// mysql> select APP.APPLICATION_ID, APP.NAME, APP.SUBSCRIBER_ID,APP.APPLICATION_TIER,APP.CALLBACK_URL,APP
        [CtCommentImpl]// .DESCRIPTION,
        [CtCommentImpl]// APP.APPLICATION_STATUS from AM_SUBSCRIBER as SUB,AM_APPLICATION as APP
        [CtCommentImpl]// where SUB.user_id='admin' AND APP.name='DefaultApplication' AND SUB.SUBSCRIBER_ID=APP.SUBSCRIBER_ID;
        [CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int applicationId = [CtLiteralImpl]0;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_BY_NAME_PREFIX;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClause = [CtLiteralImpl]"  WHERE SUB.USER_ID =? AND APP.NAME=? AND SUB.SUBSCRIBER_ID=APP.SUBSCRIBER_ID";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseCaseInSensitive = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"  WHERE LOWER(SUB.USER_ID) =LOWER(?) AND APP.NAME=? AND SUB" + [CtLiteralImpl]"") + [CtLiteralImpl]".SUBSCRIBER_ID=APP.SUBSCRIBER_ID";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithGroupId = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"  WHERE  (APP.GROUP_ID = ? OR ((APP.GROUP_ID='' OR APP.GROUP_ID IS NULL)" + [CtLiteralImpl]" AND SUB.USER_ID = ?)) AND ") + [CtLiteralImpl]"APP.NAME = ? AND SUB.SUBSCRIBER_ID = APP.SUBSCRIBER_ID";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithGroupIdCaseInSensitive = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"  WHERE  (APP.GROUP_ID = ? OR ((APP.GROUP_ID='' OR APP.GROUP_ID IS NULL)" + [CtLiteralImpl]" AND LOWER(SUB.USER_ID) = LOWER(?))) AND ") + [CtLiteralImpl]"APP.NAME = ? AND SUB.SUBSCRIBER_ID = APP.SUBSCRIBER_ID";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithMultiGroupId = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"  WHERE  ((APP.APPLICATION_ID IN (SELECT APPLICATION_ID  FROM " + [CtLiteralImpl]"AM_APPLICATION_GROUP_MAPPING WHERE GROUP_ID IN ($params) AND TENANT = ?))  OR   SUB.USER_ID = ? ") + [CtLiteralImpl]"OR (APP.APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE GROUP_ID = ?))) ") + [CtLiteralImpl]"AND APP.NAME = ? AND SUB.SUBSCRIBER_ID = APP.SUBSCRIBER_ID";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithMultiGroupIdCaseInSensitive = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"  WHERE  ((APP.APPLICATION_ID IN (SELECT APPLICATION_ID  FROM " + [CtLiteralImpl]"AM_APPLICATION_GROUP_MAPPING WHERE GROUP_ID IN ($params) AND TENANT = ?))  ") + [CtLiteralImpl]"OR   LOWER(SUB.USER_ID) = LOWER(?)  ") + [CtLiteralImpl]"OR (APP.APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE GROUP_ID = ?))) ") + [CtLiteralImpl]"AND APP.NAME = ? AND SUB.SUBSCRIBER_ID = APP.SUBSCRIBER_ID";
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]groupId != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtLiteralImpl]"null".equals([CtVariableReadImpl]groupId))) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]groupId.isEmpty())) [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtInvocationImpl]getSubscriber([CtVariableReadImpl]userId);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]query = [CtBinaryOperatorImpl][CtVariableReadImpl]query + [CtVariableReadImpl]whereClauseWithMultiGroupIdCaseInSensitive;
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]query = [CtBinaryOperatorImpl][CtVariableReadImpl]query + [CtVariableReadImpl]whereClauseWithMultiGroupId;
                    }
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] groupIds = [CtInvocationImpl][CtVariableReadImpl]groupId.split([CtLiteralImpl]",");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int parameterIndex = [CtFieldReadImpl][CtVariableReadImpl]groupIds.length;
                    [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl]fillQueryParams([CtVariableReadImpl]connection, [CtVariableReadImpl]query, [CtVariableReadImpl]groupIds, [CtLiteralImpl]1);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]parameterIndex, [CtVariableReadImpl]tenantDomain);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]parameterIndex, [CtVariableReadImpl]userId);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]parameterIndex, [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]tenantDomain + [CtLiteralImpl]'/') + [CtVariableReadImpl]groupId);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]parameterIndex, [CtVariableReadImpl]applicationName);
                } else [CtBlockImpl]{
                    [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]query = [CtBinaryOperatorImpl][CtVariableReadImpl]query + [CtVariableReadImpl]whereClauseWithGroupIdCaseInSensitive;
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]query = [CtBinaryOperatorImpl][CtVariableReadImpl]query + [CtVariableReadImpl]whereClauseWithGroupId;
                    }
                    [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]groupId);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]userId);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtVariableReadImpl]applicationName);
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]query = [CtBinaryOperatorImpl][CtVariableReadImpl]query + [CtVariableReadImpl]whereClauseCaseInSensitive;
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]query = [CtBinaryOperatorImpl][CtVariableReadImpl]query + [CtVariableReadImpl]whereClause;
                }
                [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]userId);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]applicationName);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriberId = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"SUBSCRIBER_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriberName = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"USER_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber([CtVariableReadImpl]subscriberName);
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setId([CtInvocationImpl][CtTypeAccessImpl]java.lang.Integer.parseInt([CtVariableReadImpl]subscriberId));
                [CtAssignmentImpl][CtVariableWriteImpl]application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtVariableReadImpl]applicationName, [CtVariableReadImpl]subscriber);
                [CtInvocationImpl][CtVariableReadImpl]application.setOwner([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CREATED_BY"));
                [CtInvocationImpl][CtVariableReadImpl]application.setDescription([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"DESCRIPTION"));
                [CtInvocationImpl][CtVariableReadImpl]application.setStatus([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_STATUS"));
                [CtInvocationImpl][CtVariableReadImpl]application.setCallbackUrl([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CALLBACK_URL"));
                [CtAssignmentImpl][CtVariableWriteImpl]applicationId = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"APPLICATION_ID");
                [CtInvocationImpl][CtVariableReadImpl]application.setId([CtVariableReadImpl]applicationId);
                [CtInvocationImpl][CtVariableReadImpl]application.setTier([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_TIER"));
                [CtInvocationImpl][CtVariableReadImpl]application.setUUID([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"UUID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"GROUP_ID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setOwner([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CREATED_BY"));
                [CtInvocationImpl][CtVariableReadImpl]application.setTokenType([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"TOKEN_TYPE"));
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtInvocationImpl]setGroupIdInApplication([CtVariableReadImpl]application);
                }
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]application != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> applicationAttributes = [CtInvocationImpl]getApplicationAttributes([CtVariableReadImpl]connection, [CtVariableReadImpl]applicationId);
                    [CtInvocationImpl][CtVariableReadImpl]application.setApplicationAttributes([CtVariableReadImpl]applicationAttributes);
                }
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while obtaining details of the Application : " + [CtVariableReadImpl]applicationName, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]application;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void setGroupIdInApplication([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String applicationGroupId = [CtInvocationImpl][CtVariableReadImpl]application.getGroupId();
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtVariableReadImpl]applicationGroupId)) [CtBlockImpl]{
            [CtInvocationImpl][CtCommentImpl]// No migrated App groupId
            [CtVariableReadImpl]application.setGroupId([CtInvocationImpl]getGroupId([CtInvocationImpl][CtVariableReadImpl]application.getId()));
        } else [CtBlockImpl]{
            [CtLocalVariableImpl][CtCommentImpl]// Migrated data exists where Group ID for this App has been stored in AM_APPLICATION table
            [CtCommentImpl]// in the format 'tenant/groupId', so extract groupId value and store it in the App object
            [CtArrayTypeReferenceImpl]java.lang.String[] split = [CtInvocationImpl][CtVariableReadImpl]applicationGroupId.split([CtLiteralImpl]"/");
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtFieldReadImpl][CtVariableReadImpl]split.length == [CtLiteralImpl]2) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtArrayReadImpl][CtVariableReadImpl]split[[CtLiteralImpl]1]);
            } else [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Migrated Group ID: " + [CtVariableReadImpl]applicationGroupId) + [CtLiteralImpl]"does not follow the expected format 'tenant/groupId'");
            }
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application getApplicationById([CtParameterImpl][CtTypeReferenceImpl]int applicationId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_BY_ID_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String applicationName = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NAME");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriberId = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"SUBSCRIBER_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriberName = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"USER_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber([CtVariableReadImpl]subscriberName);
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setId([CtInvocationImpl][CtTypeAccessImpl]java.lang.Integer.parseInt([CtVariableReadImpl]subscriberId));
                [CtAssignmentImpl][CtVariableWriteImpl]application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtVariableReadImpl]applicationName, [CtVariableReadImpl]subscriber);
                [CtInvocationImpl][CtVariableReadImpl]application.setOwner([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CREATED_BY"));
                [CtInvocationImpl][CtVariableReadImpl]application.setDescription([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"DESCRIPTION"));
                [CtInvocationImpl][CtVariableReadImpl]application.setStatus([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_STATUS"));
                [CtInvocationImpl][CtVariableReadImpl]application.setCallbackUrl([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CALLBACK_URL"));
                [CtInvocationImpl][CtVariableReadImpl]application.setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"APPLICATION_ID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"GROUP_ID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setUUID([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"UUID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setTier([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_TIER"));
                [CtInvocationImpl][CtVariableReadImpl]application.setTokenType([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"TOKEN_TYPE"));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"SUBSCRIBER_ID"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo> keyMap = [CtInvocationImpl]getOAuthApplications([CtInvocationImpl][CtVariableReadImpl]application.getId());
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo> entry : [CtInvocationImpl][CtVariableReadImpl]keyMap.entrySet()) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]application.addOAuthApp([CtInvocationImpl][CtVariableReadImpl]entry.getKey(), [CtInvocationImpl][CtVariableReadImpl]entry.getValue());
                }
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]application.getGroupId() == [CtLiteralImpl]null) || [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]application.getGroupId().isEmpty()) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl]getGroupId([CtVariableReadImpl]applicationId));
                    }
                }
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]application != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> applicationAttributes = [CtInvocationImpl]getApplicationAttributes([CtVariableReadImpl]connection, [CtVariableReadImpl]applicationId);
                [CtInvocationImpl][CtVariableReadImpl]application.setApplicationAttributes([CtVariableReadImpl]applicationAttributes);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while obtaining details of the Application : " + [CtVariableReadImpl]applicationId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]application;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application getLightweightApplicationById([CtParameterImpl][CtTypeReferenceImpl]int applicationId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_BY_ID_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String applicationName = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NAME");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriberId = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"SUBSCRIBER_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriberName = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"USER_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber([CtVariableReadImpl]subscriberName);
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setId([CtInvocationImpl][CtTypeAccessImpl]java.lang.Integer.parseInt([CtVariableReadImpl]subscriberId));
                [CtAssignmentImpl][CtVariableWriteImpl]application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtVariableReadImpl]applicationName, [CtVariableReadImpl]subscriber);
                [CtInvocationImpl][CtVariableReadImpl]application.setOwner([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CREATED_BY"));
                [CtInvocationImpl][CtVariableReadImpl]application.setDescription([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"DESCRIPTION"));
                [CtInvocationImpl][CtVariableReadImpl]application.setStatus([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_STATUS"));
                [CtInvocationImpl][CtVariableReadImpl]application.setCallbackUrl([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CALLBACK_URL"));
                [CtInvocationImpl][CtVariableReadImpl]application.setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"APPLICATION_ID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"GROUP_ID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setUUID([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"UUID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setTier([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_TIER"));
                [CtInvocationImpl][CtVariableReadImpl]application.setTokenType([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"TOKEN_TYPE"));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"SUBSCRIBER_ID"));
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]application.getGroupId() == [CtLiteralImpl]null) || [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]application.getGroupId().isEmpty()) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl]getGroupId([CtVariableReadImpl]applicationId));
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while obtaining details of the Application : " + [CtVariableReadImpl]applicationId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]application;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application getApplicationById([CtParameterImpl][CtTypeReferenceImpl]int applicationId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_BY_ID_SQL;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClause = [CtLiteralImpl]"  AND SUB.USER_ID =?";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseCaseInSensitive = [CtLiteralImpl]"  AND LOWER(SUB.USER_ID) =LOWER(?)";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithGroupId = [CtBinaryOperatorImpl][CtLiteralImpl]"  AND  (APP.GROUP_ID = ? OR ((APP.GROUP_ID='' OR APP.GROUP_ID IS NULL)" + [CtLiteralImpl]" AND SUB.USER_ID = ?))";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithGroupIdCaseInSensitive = [CtBinaryOperatorImpl][CtLiteralImpl]"  AND  (APP.GROUP_ID = ? OR ((APP.GROUP_ID='' OR APP.GROUP_ID IS NULL)" + [CtLiteralImpl]" AND LOWER(SUB.USER_ID) = LOWER(?)))";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithMultiGroupId = [CtBinaryOperatorImpl][CtLiteralImpl]"  AND  ((APP.APPLICATION_ID IN (SELECT APPLICATION_ID  FROM " + [CtLiteralImpl]"AM_APPLICATION_GROUP_MAPPING WHERE GROUP_ID IN ($params) AND TENANT = ?))  OR   SUB.USER_ID = ? )";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String whereClauseWithMultiGroupIdCaseInSensitive = [CtBinaryOperatorImpl][CtLiteralImpl]"  AND  ((APP.APPLICATION_ID IN (SELECT APPLICATION_ID  FROM " + [CtLiteralImpl]"AM_APPLICATION_GROUP_MAPPING WHERE GROUP_ID IN ($params) AND TENANT = ?))  OR   LOWER(SUB.USER_ID) = LOWER(?) )";
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]groupId != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtLiteralImpl]"null".equals([CtVariableReadImpl]groupId))) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]groupId.isEmpty())) [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtInvocationImpl]getSubscriber([CtVariableReadImpl]userId);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                    [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]query = [CtBinaryOperatorImpl][CtVariableReadImpl]query + [CtVariableReadImpl]whereClauseWithMultiGroupIdCaseInSensitive;
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]query = [CtBinaryOperatorImpl][CtVariableReadImpl]query + [CtVariableReadImpl]whereClauseWithMultiGroupId;
                    }
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] groupIds = [CtInvocationImpl][CtVariableReadImpl]groupId.split([CtLiteralImpl]",");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int parameterIndex = [CtBinaryOperatorImpl][CtFieldReadImpl][CtVariableReadImpl]groupIds.length + [CtLiteralImpl]1;[CtCommentImpl]// since index 1 is applicationId

                    [CtAssignmentImpl][CtCommentImpl]// query params will fil from 2
                    [CtVariableWriteImpl]prepStmt = [CtInvocationImpl]fillQueryParams([CtVariableReadImpl]connection, [CtVariableReadImpl]query, [CtVariableReadImpl]groupIds, [CtLiteralImpl]2);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]parameterIndex, [CtVariableReadImpl]tenantDomain);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtUnaryOperatorImpl]++[CtVariableWriteImpl]parameterIndex, [CtVariableReadImpl]userId);
                } else [CtBlockImpl]{
                    [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]query = [CtBinaryOperatorImpl][CtVariableReadImpl]query + [CtVariableReadImpl]whereClauseWithGroupIdCaseInSensitive;
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]query = [CtBinaryOperatorImpl][CtVariableReadImpl]query + [CtVariableReadImpl]whereClauseWithGroupId;
                    }
                    [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]groupId);
                    [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtVariableReadImpl]userId);
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]query = [CtBinaryOperatorImpl][CtVariableReadImpl]query + [CtVariableReadImpl]whereClauseCaseInSensitive;
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]query = [CtBinaryOperatorImpl][CtVariableReadImpl]query + [CtVariableReadImpl]whereClause;
                }
                [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]userId);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String applicationName = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NAME");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriberId = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"SUBSCRIBER_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriberName = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"USER_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber([CtVariableReadImpl]subscriberName);
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setId([CtInvocationImpl][CtTypeAccessImpl]java.lang.Integer.parseInt([CtVariableReadImpl]subscriberId));
                [CtAssignmentImpl][CtVariableWriteImpl]application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtVariableReadImpl]applicationName, [CtVariableReadImpl]subscriber);
                [CtInvocationImpl][CtVariableReadImpl]application.setOwner([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CREATED_BY"));
                [CtInvocationImpl][CtVariableReadImpl]application.setDescription([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"DESCRIPTION"));
                [CtInvocationImpl][CtVariableReadImpl]application.setStatus([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_STATUS"));
                [CtInvocationImpl][CtVariableReadImpl]application.setCallbackUrl([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CALLBACK_URL"));
                [CtInvocationImpl][CtVariableReadImpl]application.setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"APPLICATION_ID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"GROUP_ID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setUUID([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"UUID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setTier([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_TIER"));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"SUBSCRIBER_ID"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo> keyMap = [CtInvocationImpl]getOAuthApplications([CtInvocationImpl][CtVariableReadImpl]application.getId());
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo> entry : [CtInvocationImpl][CtVariableReadImpl]keyMap.entrySet()) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]application.addOAuthApp([CtInvocationImpl][CtVariableReadImpl]entry.getKey(), [CtInvocationImpl][CtVariableReadImpl]entry.getValue());
                }
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]application.getGroupId() == [CtLiteralImpl]null) || [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]application.getGroupId().isEmpty()) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl]getGroupId([CtVariableReadImpl]applicationId));
                    }
                }
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]application != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> applicationAttributes = [CtInvocationImpl]getApplicationAttributes([CtVariableReadImpl]connection, [CtVariableReadImpl]applicationId);
                [CtInvocationImpl][CtVariableReadImpl]application.setApplicationAttributes([CtVariableReadImpl]applicationAttributes);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while obtaining details of the Application : " + [CtVariableReadImpl]applicationId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]application;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieves the Application which is corresponding to the given UUID String
     *
     * @param uuid
     * 		UUID of Application
     * @return  * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application getApplicationByUUID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String uuid) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int applicationId = [CtLiteralImpl]0;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_BY_UUID_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]uuid);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String applicationName = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NAME");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriberId = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"SUBSCRIBER_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriberName = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"USER_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber([CtVariableReadImpl]subscriberName);
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setId([CtInvocationImpl][CtTypeAccessImpl]java.lang.Integer.parseInt([CtVariableReadImpl]subscriberId));
                [CtAssignmentImpl][CtVariableWriteImpl]application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtVariableReadImpl]applicationName, [CtVariableReadImpl]subscriber);
                [CtInvocationImpl][CtVariableReadImpl]application.setDescription([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"DESCRIPTION"));
                [CtInvocationImpl][CtVariableReadImpl]application.setStatus([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_STATUS"));
                [CtInvocationImpl][CtVariableReadImpl]application.setCallbackUrl([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CALLBACK_URL"));
                [CtAssignmentImpl][CtVariableWriteImpl]applicationId = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"APPLICATION_ID");
                [CtInvocationImpl][CtVariableReadImpl]application.setId([CtVariableReadImpl]applicationId);
                [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"GROUP_ID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setUUID([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"UUID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setTier([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_TIER"));
                [CtInvocationImpl][CtVariableReadImpl]application.setTokenType([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"TOKEN_TYPE"));
                [CtInvocationImpl][CtVariableReadImpl]application.setOwner([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CREATED_BY"));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"SUBSCRIBER_ID"));
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]application.getGroupId() == [CtLiteralImpl]null) || [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]application.getGroupId().isEmpty()) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl]getGroupId([CtInvocationImpl][CtVariableReadImpl]application.getId()));
                    }
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]int subscriptionCount = [CtInvocationImpl]getSubscriptionCountByApplicationId([CtVariableReadImpl]subscriber, [CtVariableReadImpl]applicationId, [CtInvocationImpl][CtVariableReadImpl]application.getGroupId());
                [CtInvocationImpl][CtVariableReadImpl]application.setSubscriptionCount([CtVariableReadImpl]subscriptionCount);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Timestamp createdTime = [CtInvocationImpl][CtVariableReadImpl]rs.getTimestamp([CtLiteralImpl]"CREATED_TIME");
                [CtInvocationImpl][CtVariableReadImpl]application.setCreatedTime([CtConditionalImpl][CtBinaryOperatorImpl][CtVariableReadImpl]createdTime == [CtLiteralImpl]null ? [CtLiteralImpl]null : [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.valueOf([CtInvocationImpl][CtVariableReadImpl]createdTime.getTime()));
                [CtTryImpl]try [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Timestamp updated_time = [CtInvocationImpl][CtVariableReadImpl]rs.getTimestamp([CtLiteralImpl]"UPDATED_TIME");
                    [CtInvocationImpl][CtVariableReadImpl]application.setLastUpdatedTime([CtConditionalImpl][CtBinaryOperatorImpl][CtVariableReadImpl]updated_time == [CtLiteralImpl]null ? [CtLiteralImpl]null : [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.valueOf([CtInvocationImpl][CtVariableReadImpl]updated_time.getTime()));
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
                    [CtInvocationImpl][CtCommentImpl]// fixing Timestamp issue with default value '0000-00-00 00:00:00'for existing applications created
                    [CtVariableReadImpl]application.setLastUpdatedTime([CtInvocationImpl][CtVariableReadImpl]application.getCreatedTime());
                }
            }
            [CtIfImpl][CtCommentImpl]// Get custom attributes of application
            if ([CtBinaryOperatorImpl][CtVariableReadImpl]application != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> applicationAttributes = [CtInvocationImpl]getApplicationAttributes([CtVariableReadImpl]connection, [CtVariableReadImpl]applicationId);
                [CtInvocationImpl][CtVariableReadImpl]application.setApplicationAttributes([CtVariableReadImpl]applicationAttributes);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while obtaining details of the Application : " + [CtVariableReadImpl]uuid, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]application;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * update URI templates define for an API
     *
     * @param api
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void updateURLTemplates([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.API api) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int apiId;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteOldMappingsQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_FROM_URI_TEMPLATES_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]apiId = [CtInvocationImpl]getAPIID([CtInvocationImpl][CtVariableReadImpl]api.getId(), [CtVariableReadImpl]connection);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiId == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtReturnImpl][CtCommentImpl]// application addition has failed
                return;
            }
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteOldMappingsQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtInvocationImpl]addURLTemplates([CtVariableReadImpl]apiId, [CtVariableReadImpl]api, [CtVariableReadImpl]connection);
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while deleting URL template(s) for API : " + [CtInvocationImpl][CtVariableReadImpl]api.getId(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * returns all URL templates define for all active(PUBLISHED) APIs.
     */
    public [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate> getAllURITemplates([CtParameterImpl][CtTypeReferenceImpl]java.lang.String apiContext, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String version) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.isAdvanceThrottlingEnabled()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl]getAllURITemplatesAdvancedThrottle([CtVariableReadImpl]apiContext, [CtVariableReadImpl]version);
        } else [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl]getAllURITemplatesOldThrottle([CtVariableReadImpl]apiContext, [CtVariableReadImpl]version);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate> getAPIProductURITemplates([CtParameterImpl][CtTypeReferenceImpl]java.lang.String apiContext, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String version) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtReturnImpl]return [CtInvocationImpl]getAPIProductURITemplatesAdvancedThrottle([CtVariableReadImpl]apiContext, [CtVariableReadImpl]version);
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate> getAllURITemplatesOldThrottle([CtParameterImpl][CtTypeReferenceImpl]java.lang.String apiContext, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String version) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate> uriTemplates = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate>();
        [CtLocalVariableImpl][CtCommentImpl]// TODO : FILTER RESULTS ONLY FOR ACTIVE APIs
        [CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ALL_URL_TEMPLATES_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]apiContext);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]version);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate uriTemplate;
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]uriTemplate = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate();
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String script = [CtLiteralImpl]null;
                [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setHTTPVerb([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"HTTP_METHOD"));
                [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setAuthType([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"AUTH_SCHEME"));
                [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setUriTemplate([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"URL_PATTERN"));
                [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setThrottlingTier([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"THROTTLING_TIER"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.io.InputStream mediationScriptBlob = [CtInvocationImpl][CtVariableReadImpl]rs.getBinaryStream([CtLiteralImpl]"MEDIATION_SCRIPT");
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]mediationScriptBlob != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]script = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getStringFromInputStream([CtVariableReadImpl]mediationScriptBlob);
                }
                [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setMediationScript([CtVariableReadImpl]script);
                [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getThrottlingConditions().add([CtLiteralImpl]"_default");
                [CtInvocationImpl][CtVariableReadImpl]uriTemplates.add([CtVariableReadImpl]uriTemplate);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while fetching all URL Templates", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]uriTemplates;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate> getAllURITemplatesAdvancedThrottle([CtParameterImpl][CtTypeReferenceImpl]java.lang.String apiContext, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String version) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate> uriTemplates = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String apiTenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomainFromRequestURL([CtVariableReadImpl]apiContext);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiTenantDomain != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantIdFromTenantDomain([CtVariableReadImpl]apiTenantDomain);
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]tenantId = [CtFieldReadImpl]org.wso2.carbon.utils.multitenancy.MultitenantConstants.SUPER_TENANT_ID;
        }
        [CtLocalVariableImpl][CtCommentImpl]// TODO : FILTER RESULTS ONLY FOR ACTIVE APIs
        [CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.GET_CONDITION_GROUPS_FOR_POLICIES_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]apiContext);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]version);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]3, [CtVariableReadImpl]tenantId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtAssignmentImpl][CtVariableWriteImpl]uriTemplates = [CtInvocationImpl]extractURITemplates([CtVariableReadImpl]rs);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while fetching all URL Templates", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]uriTemplates;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate> getAPIProductURITemplatesAdvancedThrottle([CtParameterImpl][CtTypeReferenceImpl]java.lang.String apiContext, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String version) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate> uriTemplates = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String apiTenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomainFromRequestURL([CtVariableReadImpl]apiContext);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiTenantDomain != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantIdFromTenantDomain([CtVariableReadImpl]apiTenantDomain);
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]tenantId = [CtFieldReadImpl]org.wso2.carbon.utils.multitenancy.MultitenantConstants.SUPER_TENANT_ID;
        }
        [CtLocalVariableImpl][CtCommentImpl]// TODO : FILTER RESULTS ONLY FOR ACTIVE APIs
        [CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.GET_CONDITION_GROUPS_FOR_POLICIES_IN_PRODUCTS_SQL;
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]apiContext);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]version);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]3, [CtVariableReadImpl]tenantId);
            [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]uriTemplates = [CtInvocationImpl]extractURITemplates([CtVariableReadImpl]rs);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while fetching all URL Templates", [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]uriTemplates;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate> extractURITemplates([CtParameterImpl][CtTypeReferenceImpl]java.sql.ResultSet rs) throws [CtTypeReferenceImpl]java.sql.SQLException, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionGroupDTO>> mapByHttpVerbURLPatternToId = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionGroupDTO>>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate> uriTemplates = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate>();
        [CtWhileImpl]while ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]rs != [CtLiteralImpl]null) && [CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String httpVerb = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"HTTP_METHOD");
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String authType = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"AUTH_SCHEME");
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String urlPattern = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"URL_PATTERN");
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String policyName = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"THROTTLING_TIER");
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String conditionGroupId = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CONDITION_GROUP_ID");
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String applicableLevel = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICABLE_LEVEL");
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String policyConditionGroupId = [CtBinaryOperatorImpl][CtLiteralImpl]"_condition_" + [CtVariableReadImpl]conditionGroupId;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String key = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]httpVerb + [CtLiteralImpl]":") + [CtVariableReadImpl]urlPattern;
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]mapByHttpVerbURLPatternToId.containsKey([CtVariableReadImpl]key)) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtVariableReadImpl]conditionGroupId)) [CtBlockImpl]{
                    [CtContinueImpl]continue;
                }
                [CtLocalVariableImpl][CtCommentImpl]// Converting ConditionGroup to a lightweight ConditionGroupDTO.
                [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionGroupDTO groupDTO = [CtInvocationImpl]createConditionGroupDTO([CtInvocationImpl][CtTypeAccessImpl]java.lang.Integer.parseInt([CtVariableReadImpl]conditionGroupId));
                [CtInvocationImpl][CtVariableReadImpl]groupDTO.setConditionGroupId([CtVariableReadImpl]policyConditionGroupId);
                [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]mapByHttpVerbURLPatternToId.get([CtVariableReadImpl]key).add([CtVariableReadImpl]groupDTO);
            } else [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String script = [CtLiteralImpl]null;
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate uriTemplate = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate();
                [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setThrottlingTier([CtVariableReadImpl]policyName);
                [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setAuthType([CtVariableReadImpl]authType);
                [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setHTTPVerb([CtVariableReadImpl]httpVerb);
                [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setUriTemplate([CtVariableReadImpl]urlPattern);
                [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setApplicableLevel([CtVariableReadImpl]applicableLevel);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.io.InputStream mediationScriptBlob = [CtInvocationImpl][CtVariableReadImpl]rs.getBinaryStream([CtLiteralImpl]"MEDIATION_SCRIPT");
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]mediationScriptBlob != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]script = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getStringFromInputStream([CtVariableReadImpl]mediationScriptBlob);
                }
                [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setMediationScript([CtVariableReadImpl]script);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionGroupDTO> conditionGroupIdSet = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionGroupDTO>();
                [CtInvocationImpl][CtVariableReadImpl]mapByHttpVerbURLPatternToId.put([CtVariableReadImpl]key, [CtVariableReadImpl]conditionGroupIdSet);
                [CtInvocationImpl][CtVariableReadImpl]uriTemplates.add([CtVariableReadImpl]uriTemplate);
                [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtVariableReadImpl]conditionGroupId)) [CtBlockImpl]{
                    [CtContinueImpl]continue;
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionGroupDTO groupDTO = [CtInvocationImpl]createConditionGroupDTO([CtInvocationImpl][CtTypeAccessImpl]java.lang.Integer.parseInt([CtVariableReadImpl]conditionGroupId));
                [CtInvocationImpl][CtVariableReadImpl]groupDTO.setConditionGroupId([CtVariableReadImpl]policyConditionGroupId);
                [CtInvocationImpl][CtVariableReadImpl]conditionGroupIdSet.add([CtVariableReadImpl]groupDTO);
            }
        } 
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate uriTemplate : [CtVariableReadImpl]uriTemplates) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String key = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]uriTemplate.getHTTPVerb() + [CtLiteralImpl]":") + [CtInvocationImpl][CtVariableReadImpl]uriTemplate.getUriTemplate();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]mapByHttpVerbURLPatternToId.containsKey([CtVariableReadImpl]key)) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]mapByHttpVerbURLPatternToId.get([CtVariableReadImpl]key).isEmpty()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionGroupDTO> conditionGroupDTOs = [CtInvocationImpl][CtVariableReadImpl]mapByHttpVerbURLPatternToId.get([CtVariableReadImpl]key);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionGroupDTO defaultGroup = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionGroupDTO();
                    [CtInvocationImpl][CtVariableReadImpl]defaultGroup.setConditionGroupId([CtTypeAccessImpl]APIConstants.THROTTLE_POLICY_DEFAULT);
                    [CtInvocationImpl][CtVariableReadImpl]conditionGroupDTOs.add([CtVariableReadImpl]defaultGroup);
                    [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getThrottlingConditions().add([CtTypeAccessImpl]APIConstants.THROTTLE_POLICY_DEFAULT);
                    [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setConditionGroups([CtInvocationImpl][CtVariableReadImpl]conditionGroupDTOs.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionGroupDTO[]{  }));
                }
            }
            [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getThrottlingConditions().isEmpty()) [CtBlockImpl]{
                [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getThrottlingConditions().add([CtTypeAccessImpl]APIConstants.THROTTLE_POLICY_DEFAULT);
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionGroupDTO defaultGroup = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionGroupDTO();
                [CtInvocationImpl][CtVariableReadImpl]defaultGroup.setConditionGroupId([CtTypeAccessImpl]APIConstants.THROTTLE_POLICY_DEFAULT);
                [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setConditionGroups([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionGroupDTO[]{ [CtVariableReadImpl]defaultGroup });
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]uriTemplates;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is used to get the API provider by giving API name, API version and tenant domain
     *
     * @param apiName
     * 		API name
     * @param apiVersion
     * 		API version
     * @param tenant
     * 		tenant domain
     * @return API provider
     * @throws APIManagementException
     * 		if failed to get the API provider by giving API name, API version, tenant domain
     */
    public [CtTypeReferenceImpl]java.lang.String getAPIProviderByNameAndVersion([CtParameterImpl][CtTypeReferenceImpl]java.lang.String apiName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String apiVersion, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String tenant) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtVariableReadImpl]apiName) || [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtVariableReadImpl]apiVersion)) || [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtVariableReadImpl]tenant)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtLiteralImpl]"API name, version, tenant cannot be null when fetching provider";
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String apiProvider = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getAPIProviderQuery = [CtLiteralImpl]null;
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection()) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equalsIgnoreCase([CtVariableReadImpl]tenant)) [CtBlockImpl]{
                [CtAssignmentImpl][CtCommentImpl]// in this case, the API should be fetched from super tenant
                [CtVariableWriteImpl]getAPIProviderQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_PROVIDER_WITH_NAME_VERSION_FOR_SUPER_TENANT;
                [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getAPIProviderQuery);
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtCommentImpl]// in this case, the API should be fetched from the respective tenant
                [CtVariableWriteImpl]getAPIProviderQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_PROVIDER_WITH_NAME_VERSION_FOR_GIVEN_TENANT;
                [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getAPIProviderQuery);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"%" + [CtVariableReadImpl]tenant) + [CtLiteralImpl]"%");
            }
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]apiName);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]apiVersion);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]apiProvider = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_PROVIDER");
            }
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtVariableReadImpl]apiProvider)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Unable to find provider for API: " + [CtVariableReadImpl]apiName) + [CtLiteralImpl]" in the database";
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.warn([CtVariableReadImpl]msg);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error while locating API: " + [CtVariableReadImpl]apiName) + [CtLiteralImpl]" from the database", [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]apiProvider;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Converts an {@code Pipeline} object into a {@code ConditionGroupDTO}.{@code ConditionGroupDTO} class tries to
     * contain the same information held by  {@code Pipeline}, but in a much lightweight fashion.
     *
     * @param conditionGroup
     * 		Id of the condition group ({@code Pipeline}) to be converted
     * @return An object of {@code ConditionGroupDTO} type.
     * @throws APIManagementException
     */
    private [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionGroupDTO createConditionGroupDTO([CtParameterImpl][CtTypeReferenceImpl]int conditionGroup) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Condition> conditions = [CtInvocationImpl]getConditions([CtVariableReadImpl]conditionGroup);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionDTO> conditionDTOs = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionDTO>([CtInvocationImpl][CtVariableReadImpl]conditions.size());
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Condition condition : [CtVariableReadImpl]conditions) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionDTO conditionDTO = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionDTO();
            [CtInvocationImpl][CtVariableReadImpl]conditionDTO.setConditionType([CtInvocationImpl][CtVariableReadImpl]condition.getType());
            [CtInvocationImpl][CtVariableReadImpl]conditionDTO.isInverted([CtInvocationImpl][CtVariableReadImpl]condition.isInvertCondition());
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.IP_RANGE_TYPE.equals([CtInvocationImpl][CtVariableReadImpl]condition.getType())) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.IPCondition ipRangeCondition = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.IPCondition) (condition));
                [CtInvocationImpl][CtVariableReadImpl]conditionDTO.setConditionName([CtInvocationImpl][CtVariableReadImpl]ipRangeCondition.getStartingIP());
                [CtInvocationImpl][CtVariableReadImpl]conditionDTO.setConditionValue([CtInvocationImpl][CtVariableReadImpl]ipRangeCondition.getEndingIP());
            } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.IP_SPECIFIC_TYPE.equals([CtInvocationImpl][CtVariableReadImpl]condition.getType())) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.IPCondition ipCondition = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.IPCondition) (condition));
                [CtInvocationImpl][CtVariableReadImpl]conditionDTO.setConditionName([CtTypeAccessImpl]PolicyConstants.IP_SPECIFIC_TYPE);
                [CtInvocationImpl][CtVariableReadImpl]conditionDTO.setConditionValue([CtInvocationImpl][CtVariableReadImpl]ipCondition.getSpecificIP());
            } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.HEADER_TYPE.equals([CtInvocationImpl][CtVariableReadImpl]condition.getType())) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.HeaderCondition headerCondition = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.HeaderCondition) (condition));
                [CtInvocationImpl][CtVariableReadImpl]conditionDTO.setConditionName([CtInvocationImpl][CtVariableReadImpl]headerCondition.getHeaderName());
                [CtInvocationImpl][CtVariableReadImpl]conditionDTO.setConditionValue([CtInvocationImpl][CtVariableReadImpl]headerCondition.getValue());
            } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.JWT_CLAIMS_TYPE.equals([CtInvocationImpl][CtVariableReadImpl]condition.getType())) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.JWTClaimsCondition jwtClaimsCondition = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.JWTClaimsCondition) (condition));
                [CtInvocationImpl][CtVariableReadImpl]conditionDTO.setConditionName([CtInvocationImpl][CtVariableReadImpl]jwtClaimsCondition.getClaimUrl());
                [CtInvocationImpl][CtVariableReadImpl]conditionDTO.setConditionValue([CtInvocationImpl][CtVariableReadImpl]jwtClaimsCondition.getAttribute());
            } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.QUERY_PARAMETER_TYPE.equals([CtInvocationImpl][CtVariableReadImpl]condition.getType())) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.QueryParameterCondition parameterCondition = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.QueryParameterCondition) (condition));
                [CtInvocationImpl][CtVariableReadImpl]conditionDTO.setConditionName([CtInvocationImpl][CtVariableReadImpl]parameterCondition.getParameter());
                [CtInvocationImpl][CtVariableReadImpl]conditionDTO.setConditionValue([CtInvocationImpl][CtVariableReadImpl]parameterCondition.getValue());
            }
            [CtInvocationImpl][CtVariableReadImpl]conditionDTOs.add([CtVariableReadImpl]conditionDTO);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionGroupDTO conditionGroupDTO = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionGroupDTO();
        [CtInvocationImpl][CtVariableReadImpl]conditionGroupDTO.setConditions([CtInvocationImpl][CtVariableReadImpl]conditionDTOs.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.dto.ConditionDTO[]{  }));
        [CtReturnImpl]return [CtVariableReadImpl]conditionGroupDTO;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void updateAPI([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.API api, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtInvocationImpl]updateAPI([CtVariableReadImpl]api, [CtVariableReadImpl]tenantId, [CtLiteralImpl]null);
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void updateAPI([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.API api, [CtParameterImpl][CtTypeReferenceImpl]int tenantId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String username) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String previousDefaultVersion = [CtInvocationImpl]getDefaultVersion([CtInvocationImpl][CtVariableReadImpl]api.getId());
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_API_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtCommentImpl]// Header change check not required here as we update API level throttling tier
            [CtCommentImpl]// from same call.
            [CtCommentImpl]// TODO review and run tier update as separate query if need.
            [CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]api.getContext());
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String contextTemplate = [CtInvocationImpl][CtVariableReadImpl]api.getContextTemplate();
            [CtIfImpl][CtCommentImpl]// If the context template ends with {version} this means that the version will be at the end of the
            [CtCommentImpl]// context.
            if ([CtInvocationImpl][CtVariableReadImpl]contextTemplate.endsWith([CtBinaryOperatorImpl][CtLiteralImpl]"/" + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.VERSION_PLACEHOLDER)) [CtBlockImpl]{
                [CtAssignmentImpl][CtCommentImpl]// Remove the {version} part from the context template.
                [CtVariableWriteImpl]contextTemplate = [CtArrayReadImpl][CtInvocationImpl][CtVariableReadImpl]contextTemplate.split([CtInvocationImpl][CtTypeAccessImpl]java.util.regex.Pattern.quote([CtBinaryOperatorImpl][CtLiteralImpl]"/" + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.VERSION_PLACEHOLDER))[[CtLiteralImpl]0];
            }
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]contextTemplate);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtVariableReadImpl]username);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setTimestamp([CtLiteralImpl]4, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.sql.Timestamp([CtInvocationImpl][CtTypeAccessImpl]java.lang.System.currentTimeMillis()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]5, [CtInvocationImpl][CtVariableReadImpl]api.getApiLevelPolicy());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]6, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]api.getId().getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]7, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]api.getId().getApiName());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]8, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]api.getId().getVersion());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtIfImpl][CtCommentImpl]// }
            if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]api.isDefaultVersion() ^ [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]api.getId().getVersion().equals([CtVariableReadImpl]previousDefaultVersion)) [CtBlockImpl]{
                [CtIfImpl][CtCommentImpl]// A change has
                [CtCommentImpl]// happen
                [CtCommentImpl]// If the api is selected as default version, it is added/replaced into AM_API_DEFAULT_VERSION table
                if ([CtInvocationImpl][CtVariableReadImpl]api.isDefaultVersion()) [CtBlockImpl]{
                    [CtInvocationImpl]addUpdateAPIAsDefaultVersion([CtVariableReadImpl]api, [CtVariableReadImpl]connection);
                } else [CtBlockImpl]{
                    [CtInvocationImpl][CtCommentImpl]// tick is removed
                    removeAPIFromDefaultVersion([CtInvocationImpl][CtVariableReadImpl]api.getId(), [CtVariableReadImpl]connection);
                }
            }
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
            [CtSynchronizedImpl]synchronized([CtFieldReadImpl]scopeMutex) [CtBlockImpl]{
                [CtInvocationImpl]updateScopes([CtVariableReadImpl]api, [CtVariableReadImpl]tenantId);
                [CtInvocationImpl]updateURLTemplates([CtVariableReadImpl]api);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error while updating the API: " + [CtInvocationImpl][CtVariableReadImpl]api.getId()) + [CtLiteralImpl]" in the database", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]int getAPIID([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier apiId, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection connection) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean created = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int id = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getAPIQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_ID_SQL;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiId instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]getAPIQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_PRODUCT_ID_SQL;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtCommentImpl]// If connection is not provided a new one will be created.
                [CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
                [CtAssignmentImpl][CtVariableWriteImpl]created = [CtLiteralImpl]true;
            }
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getAPIQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]apiId.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]apiId.getName());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]apiId.getVersion());
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]id = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"API_ID");
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]id == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Unable to find the API: " + [CtVariableReadImpl]apiId) + [CtLiteralImpl]" in the database";
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error while locating API: " + [CtVariableReadImpl]apiId) + [CtLiteralImpl]" from the database", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtIfImpl]if ([CtVariableReadImpl]created) [CtBlockImpl]{
                [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
            } else [CtBlockImpl]{
                [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtLiteralImpl]null, [CtVariableReadImpl]rs);
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]id;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get product Id from the product name and the provider.
     *
     * @param product
     * 		product identifier
     * @throws APIManagementException
     * 		exception
     */
    public [CtTypeReferenceImpl]void setAPIProductFromDB([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProduct product) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier apiProductIdentifier = [CtInvocationImpl][CtVariableReadImpl]product.getId();
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.GET_API_PRODUCT_SQL)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]apiProductIdentifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]apiProductIdentifier.getName());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]apiProductIdentifier.getVersion());
            [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery()) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]product.setProductId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"API_ID"));
                    [CtInvocationImpl][CtVariableReadImpl]product.setProductLevelPolicy([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_TIER"));
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Unable to find the API Product : " + [CtInvocationImpl][CtVariableReadImpl]apiProductIdentifier.getName()) + [CtLiteralImpl]"-") + [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]apiProductIdentifier.getProviderName())) + [CtLiteralImpl]"-") + [CtInvocationImpl][CtVariableReadImpl]apiProductIdentifier.getVersion()) + [CtLiteralImpl]" in the database";
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error while locating API Product: " + [CtInvocationImpl][CtVariableReadImpl]apiProductIdentifier.getName()) + [CtLiteralImpl]"-") + [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]apiProductIdentifier.getProviderName())) + [CtLiteralImpl]"-") + [CtInvocationImpl][CtVariableReadImpl]apiProductIdentifier.getVersion()) + [CtLiteralImpl]" from the database", [CtVariableReadImpl]e);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Delete a record from AM_APPLICATION_KEY_MAPPING table
     *
     * @param consumerKey
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void deleteApplicationMappingByConsumerKey([CtParameterImpl][CtTypeReferenceImpl]java.lang.String consumerKey) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteApplicationKeyQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_APPLICATION_MAPPINGS_BY_CONSUMER_KEY_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteApplicationKeyQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]consumerKey);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error while deleting mapping: consumer key " + [CtVariableReadImpl]consumerKey) + [CtLiteralImpl]" from the database", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void deleteAPI([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int id;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteLCEventQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_FROM_API_LIFECYCLE_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteAuditAPIMapping = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_SECURITY_AUDIT_MAP_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteCommentQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_FROM_API_COMMENT_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteRatingsQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_FROM_API_RATING_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteSubscriptionQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_FROM_API_SUBSCRIPTION_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteExternalAPIStoresQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_FROM_EXTERNAL_STORES_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteAPIQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_FROM_API_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteURLTemplateQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_FROM_API_URL_MAPPINGS_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]id = [CtInvocationImpl]getAPIID([CtVariableReadImpl]apiId, [CtVariableReadImpl]connection);
            [CtSynchronizedImpl]synchronized([CtFieldReadImpl]scopeMutex) [CtBlockImpl]{
                [CtInvocationImpl]removeAPIScope([CtVariableReadImpl]apiId);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteAuditAPIMapping);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]id);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.close();[CtCommentImpl]// If exception occurs at execute, this statement will close in finally else here

            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteSubscriptionQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]id);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.close();[CtCommentImpl]// If exception occurs at execute, this statement will close in finally else here

            [CtAssignmentImpl][CtCommentImpl]// Delete all comments associated with given API
            [CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteCommentQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]id);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.close();[CtCommentImpl]// If exception occurs at execute, this statement will close in finally else here

            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteRatingsQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]id);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.close();[CtCommentImpl]// If exception occurs at execute, this statement will close in finally else here

            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteLCEventQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]id);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.close();[CtCommentImpl]// If exception occurs at execute, this statement will close in finally else here

            [CtAssignmentImpl][CtCommentImpl]// Delete all external APIStore details associated with a given API
            [CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteExternalAPIStoresQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]id);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.close();[CtCommentImpl]// If exception occurs at execute, this statement will close in finally else here

            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteAPIQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]apiId.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]apiId.getApiName());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]apiId.getVersion());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.close();[CtCommentImpl]// If exception occurs at execute, this statement will close in finally else here

            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteURLTemplateQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]id);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String curDefaultVersion = [CtInvocationImpl]getDefaultVersion([CtVariableReadImpl]apiId);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String pubDefaultVersion = [CtInvocationImpl]getPublishedDefaultVersion([CtVariableReadImpl]apiId);
            [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]apiId.getVersion().equals([CtVariableReadImpl]curDefaultVersion)) [CtBlockImpl]{
                [CtInvocationImpl]removeAPIFromDefaultVersion([CtVariableReadImpl]apiId, [CtVariableReadImpl]connection);
            } else [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]apiId.getVersion().equals([CtVariableReadImpl]pubDefaultVersion)) [CtBlockImpl]{
                [CtInvocationImpl]setPublishedDefVersion([CtVariableReadImpl]apiId, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
            }
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error while removing the API: " + [CtVariableReadImpl]apiId) + [CtLiteralImpl]" from the database", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Change access token status in to revoked in database level.
     *
     * @param key
     * 		API Key to be revoked
     * @throws APIManagementException
     * 		on error in revoking access token
     */
    public [CtTypeReferenceImpl]void revokeAccessToken([CtParameterImpl][CtTypeReferenceImpl]java.lang.String key) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String accessTokenStoreTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.ACCESS_TOKEN_STORE_TABLE;
        [CtAssignmentImpl][CtVariableWriteImpl]accessTokenStoreTable = [CtInvocationImpl]getAccessTokenStoreTableFromAccessToken([CtVariableReadImpl]key, [CtVariableReadImpl]accessTokenStoreTable);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_ACCESS_TOKEN_PREFIX + [CtVariableReadImpl]accessTokenStoreTable) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REVOKE_ACCESS_TOKEN_SUFFIX;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.encryptToken([CtVariableReadImpl]key));
            [CtInvocationImpl][CtVariableReadImpl]ps.execute();
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error in revoking access token: " + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.core.util.CryptoException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error in revoking access token: " + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get all applications associated with given tier
     *
     * @param tier
     * 		String tier name
     * @return Application object array associated with tier
     * @throws APIManagementException
     * 		on error in getting applications array
     */
    public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application[] getApplicationsByTier([CtParameterImpl][CtTypeReferenceImpl]java.lang.String tier) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]tier == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]null;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application[] applications = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_BY_TIER_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]tier);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application> applicationsList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application>();
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application;
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NAME"), [CtInvocationImpl]getSubscriber([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"SUBSCRIBER_ID")));
                [CtInvocationImpl][CtVariableReadImpl]application.setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"APPLICATION_ID"));
                [CtInvocationImpl][CtVariableReadImpl]applicationsList.add([CtVariableReadImpl]application);
            } 
            [CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.sort([CtVariableReadImpl]applicationsList, [CtNewClassImpl]new [CtTypeReferenceImpl]java.util.Comparator<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application>()[CtClassImpl] {
                [CtMethodImpl]public [CtTypeReferenceImpl]int compare([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application o1, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application o2) [CtBlockImpl]{
                    [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]o1.getName().compareToIgnoreCase([CtInvocationImpl][CtVariableReadImpl]o2.getName());
                }
            });
            [CtAssignmentImpl][CtVariableWriteImpl]applications = [CtInvocationImpl][CtVariableReadImpl]applicationsList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application[[CtInvocationImpl][CtVariableReadImpl]applicationsList.size()]);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error when reading the application information from" + [CtLiteralImpl]" the persistence store.", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]applications;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void handleException([CtParameterImpl][CtTypeReferenceImpl]java.lang.String msg, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Throwable t) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg, [CtVariableReadImpl]t);
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg, [CtVariableReadImpl]t);
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> getURITemplatesPerAPIAsString([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int apiId;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> urlMappings = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.LinkedHashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]apiId = [CtInvocationImpl]getAPIID([CtVariableReadImpl]identifier, [CtVariableReadImpl]conn);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_URL_TEMPLATES_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String script = [CtLiteralImpl]null;
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String uriPattern = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"URL_PATTERN");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String httpMethod = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"HTTP_METHOD");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String authScheme = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"AUTH_SCHEME");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String throttlingTier = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"THROTTLING_TIER");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.io.InputStream mediationScriptBlob = [CtInvocationImpl][CtVariableReadImpl]resultSet.getBinaryStream([CtLiteralImpl]"MEDIATION_SCRIPT");
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]mediationScriptBlob != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]script = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getStringFromInputStream([CtVariableReadImpl]mediationScriptBlob);
                    [CtIfImpl][CtCommentImpl]// set null if the script is empty. Otherwise ArrayIndexOutOfBoundsException occurs when trying
                    [CtCommentImpl]// to split by ::
                    if ([CtInvocationImpl][CtVariableReadImpl]script.isEmpty()) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]script = [CtLiteralImpl]null;
                    }
                }
                [CtInvocationImpl][CtVariableReadImpl]urlMappings.put([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]uriPattern + [CtLiteralImpl]"::") + [CtVariableReadImpl]httpMethod) + [CtLiteralImpl]"::") + [CtVariableReadImpl]authScheme) + [CtLiteralImpl]"::") + [CtVariableReadImpl]throttlingTier) + [CtLiteralImpl]"::") + [CtVariableReadImpl]script, [CtLiteralImpl]null);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback the add subscription ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to add subscriber data ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]urlMappings;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate> getURITemplatesOfAPI([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate> uriTemplates = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtTypeAccessImpl]SQLConstants.GET_URL_TEMPLATES_OF_API_SQL)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]identifier.getName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]identifier.getVersion());
            [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery()) [CtBlockImpl]{
                [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String urlPattern = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"URL_PATTERN");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String verb = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"HTTP_METHOD");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate uriTemplate = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate();
                    [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setUriTemplate([CtVariableReadImpl]urlPattern);
                    [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setHTTPVerb([CtVariableReadImpl]verb);
                    [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setHttpVerbs([CtVariableReadImpl]verb);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String authType = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"AUTH_SCHEME");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String throttlingTier = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"THROTTLING_TIER");
                    [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setAuthType([CtVariableReadImpl]authType);
                    [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setAuthTypes([CtVariableReadImpl]authType);
                    [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setThrottlingTier([CtVariableReadImpl]throttlingTier);
                    [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setThrottlingTiers([CtVariableReadImpl]throttlingTier);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.io.InputStream mediationScriptBlob = [CtInvocationImpl][CtVariableReadImpl]rs.getBinaryStream([CtLiteralImpl]"MEDIATION_SCRIPT");
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]mediationScriptBlob != [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String script = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getStringFromInputStream([CtVariableReadImpl]mediationScriptBlob);
                        [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setMediationScript([CtVariableReadImpl]script);
                        [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setMediationScripts([CtVariableReadImpl]verb, [CtVariableReadImpl]script);
                    }
                    [CtInvocationImpl][CtVariableReadImpl]uriTemplates.put([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"URL_MAPPING_ID"), [CtVariableReadImpl]uriTemplate);
                } 
            }
            [CtInvocationImpl]setAssociatedAPIProducts([CtVariableReadImpl]identifier, [CtVariableReadImpl]uriTemplates);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get URI Templates of API" + [CtVariableReadImpl]identifier, [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<>([CtInvocationImpl][CtVariableReadImpl]uriTemplates.values());
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void setAssociatedAPIProducts([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate> uriTemplates) throws [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtTypeAccessImpl]SQLConstants.GET_API_PRODUCT_URI_TEMPLATE_ASSOCIATION_SQL)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]identifier.getName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]identifier.getVersion());
            [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery()) [CtBlockImpl]{
                [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String productName = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_NAME");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String productVersion = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_VERSION");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String productProvider = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_PROVIDER");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int uriTemplateId = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"URL_MAPPING_ID");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate uriTemplate = [CtInvocationImpl][CtVariableReadImpl]uriTemplates.get([CtVariableReadImpl]uriTemplateId);
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]uriTemplate != [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier productIdentifier = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier([CtVariableReadImpl]productProvider, [CtVariableReadImpl]productName, [CtVariableReadImpl]productVersion);
                        [CtInvocationImpl][CtVariableReadImpl]uriTemplate.addUsedByProduct([CtVariableReadImpl]productIdentifier);
                    }
                } 
            }
        }
    }

    [CtMethodImpl][CtCommentImpl]// This should be only used only when Token Partitioning is enabled.
    public [CtTypeReferenceImpl]java.lang.String getConsumerKeyForTokenWhenTokenPartitioningEnabled([CtParameterImpl][CtTypeReferenceImpl]java.lang.String accessToken) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.checkAccessTokenPartitioningEnabled() && [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.checkUserNameAssertionEnabled()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String accessTokenStoreTable = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getAccessTokenStoreTableFromAccessToken([CtVariableReadImpl]accessToken);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.StringBuilder authorizedDomains = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.StringBuilder();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getCKFromTokenSQL = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"SELECT CONSUMER_KEY " + [CtLiteralImpl]" FROM ") + [CtVariableReadImpl]accessTokenStoreTable) + [CtLiteralImpl]" WHERE ACCESS_TOKEN = ? ";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
                [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getCKFromTokenSQL);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.encryptToken([CtVariableReadImpl]accessToken));
                [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
                [CtLocalVariableImpl][CtTypeReferenceImpl]boolean first = [CtLiteralImpl]true;
                [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domain = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]1);
                    [CtIfImpl]if ([CtVariableReadImpl]first) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]authorizedDomains.append([CtVariableReadImpl]domain);
                        [CtAssignmentImpl][CtVariableWriteImpl]first = [CtLiteralImpl]false;
                    } else [CtBlockImpl]{
                        [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]authorizedDomains.append([CtLiteralImpl]',').append([CtVariableReadImpl]domain);
                    }
                } 
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtLiteralImpl]"Error in retrieving access allowing domain list from table.", [CtVariableReadImpl]e);
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.core.util.CryptoException e) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtLiteralImpl]"Error in retrieving access allowing domain list from table.", [CtVariableReadImpl]e);
            } finally [CtBlockImpl]{
                [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
            }
            [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]authorizedDomains.toString();
        }
        [CtReturnImpl]return [CtLiteralImpl]null;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.lang.String findConsumerKeyFromAccessToken([CtParameterImpl][CtTypeReferenceImpl]java.lang.String accessToken) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String accessTokenStoreTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.ACCESS_TOKEN_STORE_TABLE;
        [CtAssignmentImpl][CtVariableWriteImpl]accessTokenStoreTable = [CtInvocationImpl]getAccessTokenStoreTableFromAccessToken([CtVariableReadImpl]accessToken, [CtVariableReadImpl]accessTokenStoreTable);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement smt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String consumerKey = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getConsumerKeySql = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_CONSUMER_KEY_BY_ACCESS_TOKEN_PREFIX + [CtVariableReadImpl]accessTokenStoreTable) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_CONSUMER_KEY_BY_ACCESS_TOKEN_SUFFIX;
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]smt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getConsumerKeySql);
            [CtInvocationImpl][CtVariableReadImpl]smt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.encryptToken([CtVariableReadImpl]accessToken));
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]smt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]consumerKey = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]1);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while getting authorized domians.", [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.core.util.CryptoException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while getting authorized domians.", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]smt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]consumerKey;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Adds a comment for an API
     *
     * @param identifier
     * 		API Identifier
     * @param commentText
     * 		Commented Text
     * @param user
     * 		User who did the comment
     * @return Comment ID
     * @deprecated This method needs to be removed once the Jaggery web apps are removed.
     */
    public [CtTypeReferenceImpl]int addComment([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String commentText, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String user) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet insertSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement getPrepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement insertPrepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int commentId = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int apiId = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getApiQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_ID_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]getPrepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getApiQuery);
            [CtInvocationImpl][CtVariableReadImpl]getPrepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]getPrepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]identifier.getApiName());
            [CtInvocationImpl][CtVariableReadImpl]getPrepStmt.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]identifier.getVersion());
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]getPrepStmt.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]apiId = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"API_ID");
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiId == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Unable to get the API ID for: " + [CtVariableReadImpl]identifier;
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
            }
            [CtLocalVariableImpl][CtCommentImpl]/* This query to update the AM_API_COMMENTS table */
            [CtTypeReferenceImpl]java.lang.String addCommentQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_COMMENT_SQL;
            [CtLocalVariableImpl][CtCommentImpl]/* Adding data to the AM_API_COMMENTS table */
            [CtTypeReferenceImpl]java.lang.String dbProductName = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]connection.getMetaData().getDatabaseProductName();
            [CtAssignmentImpl][CtVariableWriteImpl]insertPrepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]addCommentQuery, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.DBUtils.getConvertedAutoGeneratedColumnName([CtVariableReadImpl]dbProductName, [CtLiteralImpl]"comment_id") });
            [CtInvocationImpl][CtVariableReadImpl]insertPrepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]commentText);
            [CtInvocationImpl][CtVariableReadImpl]insertPrepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]user);
            [CtInvocationImpl][CtVariableReadImpl]insertPrepStmt.setTimestamp([CtLiteralImpl]3, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.sql.Timestamp([CtInvocationImpl][CtTypeAccessImpl]java.lang.System.currentTimeMillis()), [CtInvocationImpl][CtTypeAccessImpl]java.util.Calendar.getInstance());
            [CtInvocationImpl][CtVariableReadImpl]insertPrepStmt.setInt([CtLiteralImpl]4, [CtVariableReadImpl]apiId);
            [CtInvocationImpl][CtVariableReadImpl]insertPrepStmt.executeUpdate();
            [CtAssignmentImpl][CtVariableWriteImpl]insertSet = [CtInvocationImpl][CtVariableReadImpl]insertPrepStmt.getGeneratedKeys();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]insertSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]commentId = [CtInvocationImpl][CtTypeAccessImpl]java.lang.Integer.parseInt([CtInvocationImpl][CtVariableReadImpl]insertSet.getString([CtLiteralImpl]1));
            } 
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback the add comment ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to add comment data, for  " + [CtInvocationImpl][CtVariableReadImpl]identifier.getApiName()) + [CtLiteralImpl]'-') + [CtInvocationImpl][CtVariableReadImpl]identifier.getVersion(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]getPrepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]insertPrepStmt, [CtLiteralImpl]null, [CtVariableReadImpl]insertSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]commentId;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Adds a comment for an API
     *
     * @param identifier
     * 		API identifier
     * @param comment
     * 		Commented Text
     * @param user
     * 		User who did the comment
     * @return Comment ID
     */
    public [CtTypeReferenceImpl]java.lang.String addComment([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier identifier, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Comment comment, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String user) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet insertSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement insertPrepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String commentId = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int id = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtCommentImpl]// Get API Id
            [CtVariableWriteImpl]id = [CtInvocationImpl]getAPIID([CtVariableReadImpl]identifier, [CtVariableReadImpl]connection);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]id == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Could not load API record for: " + [CtInvocationImpl][CtVariableReadImpl]identifier.getName();
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
            }
            [CtLocalVariableImpl][CtCommentImpl]/* This query is to update the AM_API_COMMENTS table */
            [CtTypeReferenceImpl]java.lang.String addCommentQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_COMMENT_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]commentId = [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]java.util.UUID.randomUUID().toString();
            [CtLocalVariableImpl][CtCommentImpl]/* Adding data to the AM_API_COMMENTS table */
            [CtTypeReferenceImpl]java.lang.String dbProductName = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]connection.getMetaData().getDatabaseProductName();
            [CtAssignmentImpl][CtVariableWriteImpl]insertPrepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]addCommentQuery);
            [CtInvocationImpl][CtVariableReadImpl]insertPrepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]commentId);
            [CtInvocationImpl][CtVariableReadImpl]insertPrepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]comment.getText());
            [CtInvocationImpl][CtVariableReadImpl]insertPrepStmt.setString([CtLiteralImpl]3, [CtVariableReadImpl]user);
            [CtInvocationImpl][CtVariableReadImpl]insertPrepStmt.setTimestamp([CtLiteralImpl]4, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.sql.Timestamp([CtInvocationImpl][CtTypeAccessImpl]java.lang.System.currentTimeMillis()), [CtInvocationImpl][CtTypeAccessImpl]java.util.Calendar.getInstance());
            [CtInvocationImpl][CtVariableReadImpl]insertPrepStmt.setInt([CtLiteralImpl]5, [CtVariableReadImpl]id);
            [CtInvocationImpl][CtVariableReadImpl]insertPrepStmt.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback the add comment ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to add comment data, for  " + [CtInvocationImpl][CtVariableReadImpl]identifier.getName()) + [CtLiteralImpl]"-") + [CtInvocationImpl][CtVariableReadImpl]identifier.getVersion(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]insertPrepStmt, [CtLiteralImpl]null, [CtVariableReadImpl]insertSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]commentId;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns all the Comments on an API
     *
     * @param identifier
     * 		API Identifier
     * @return Comment Array
     * @throws APIManagementException
     */
    public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Comment[] getComments([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Comment> commentList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Comment>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_COMMENTS_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]identifier.getApiName());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]identifier.getVersion());
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Comment comment = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Comment();
                [CtInvocationImpl][CtVariableReadImpl]comment.setId([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"COMMENT_ID"));
                [CtInvocationImpl][CtVariableReadImpl]comment.setText([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"COMMENT_TEXT"));
                [CtInvocationImpl][CtVariableReadImpl]comment.setUser([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"COMMENTED_USER"));
                [CtInvocationImpl][CtVariableReadImpl]comment.setCreatedTime([CtInvocationImpl][CtVariableReadImpl]resultSet.getTimestamp([CtLiteralImpl]"DATE_COMMENTED"));
                [CtInvocationImpl][CtVariableReadImpl]commentList.add([CtVariableReadImpl]comment);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to retrieve comments ", [CtVariableReadImpl]e1);
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to retrieve comments for  " + [CtInvocationImpl][CtVariableReadImpl]identifier.getApiName()) + [CtLiteralImpl]'-') + [CtInvocationImpl][CtVariableReadImpl]identifier.getVersion(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]commentList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Comment[[CtInvocationImpl][CtVariableReadImpl]commentList.size()]);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns a specific comment of an API
     *
     * @param commentId
     * 		Comment ID
     * @param identifier
     * 		API identifier
     * @return Comment Array
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Comment getComment([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier identifier, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String commentId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Comment comment = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Comment();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int id = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getCommentQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_COMMENT_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]id = [CtInvocationImpl]getAPIID([CtVariableReadImpl]identifier, [CtVariableReadImpl]connection);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]id == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Could not load API record for: " + [CtInvocationImpl][CtVariableReadImpl]identifier.getName();
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getCommentQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]identifier.getName());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]identifier.getVersion());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]4, [CtVariableReadImpl]commentId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]comment.setId([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"COMMENT_ID"));
                [CtInvocationImpl][CtVariableReadImpl]comment.setText([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"COMMENT_TEXT"));
                [CtInvocationImpl][CtVariableReadImpl]comment.setUser([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"COMMENTED_USER"));
                [CtInvocationImpl][CtVariableReadImpl]comment.setCreatedTime([CtInvocationImpl][CtVariableReadImpl]resultSet.getTimestamp([CtLiteralImpl]"DATE_COMMENTED"));
                [CtReturnImpl]return [CtVariableReadImpl]comment;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to retrieve comment ", [CtVariableReadImpl]e1);
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to retrieve comment for API " + [CtInvocationImpl][CtVariableReadImpl]identifier.getName()) + [CtLiteralImpl]"with comment ID ") + [CtVariableReadImpl]commentId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtLiteralImpl]null;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns all the Comments on an API
     *
     * @param apiTypeWrapper
     * 		API type wrapper
     * @return Comment Array
     * @throws APIManagementException
     */
    public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Comment[] getComments([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.ApiTypeWrapper apiTypeWrapper) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Comment> commentList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Comment>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isProduct = [CtInvocationImpl][CtVariableReadImpl]apiTypeWrapper.isAPIProduct();
        [CtLocalVariableImpl][CtTypeReferenceImpl]int id = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery;
        [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_COMMENTS_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier identifier;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isProduct) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]identifier = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]apiTypeWrapper.getApi().getId();
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]identifier = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]apiTypeWrapper.getApiProduct().getId();
            }
            [CtAssignmentImpl][CtVariableWriteImpl]id = [CtInvocationImpl]getAPIID([CtVariableReadImpl]identifier, [CtVariableReadImpl]connection);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]id == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Could not load API record for: " + [CtInvocationImpl][CtVariableReadImpl]identifier.getName();
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]identifier.getName());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]identifier.getVersion());
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Comment comment = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Comment();
                [CtInvocationImpl][CtVariableReadImpl]comment.setId([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"COMMENT_ID"));
                [CtInvocationImpl][CtVariableReadImpl]comment.setText([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"COMMENT_TEXT"));
                [CtInvocationImpl][CtVariableReadImpl]comment.setUser([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"COMMENTED_USER"));
                [CtInvocationImpl][CtVariableReadImpl]comment.setCreatedTime([CtInvocationImpl][CtVariableReadImpl]resultSet.getTimestamp([CtLiteralImpl]"DATE_COMMENTED"));
                [CtInvocationImpl][CtVariableReadImpl]commentList.add([CtVariableReadImpl]comment);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to retrieve comments ", [CtVariableReadImpl]e1);
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to retrieve comments for  " + [CtInvocationImpl][CtVariableReadImpl]apiTypeWrapper.getName(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]commentList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Comment[[CtInvocationImpl][CtVariableReadImpl]commentList.size()]);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Delete a comment
     *
     * @param identifier
     * 		API Identifier
     * @param commentId
     * 		Comment ID
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void deleteComment([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String commentId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteCommentQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.DELETE_COMMENT_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteCommentQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]commentId);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error while deleting comment " + [CtVariableReadImpl]commentId) + [CtLiteralImpl]" from the database", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]boolean isContextExist([CtParameterImpl][CtTypeReferenceImpl]java.lang.String context) [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sql = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_CONTEXT_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sql);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]context);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]1) != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtReturnImpl]return [CtLiteralImpl]true;
                }
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to retrieve the API Context ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtLiteralImpl]false;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.lang.String getAPIContext([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String context = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sql = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_CONTEXT_BY_API_NAME_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sql);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]identifier.getApiName());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]identifier.getVersion());
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]context = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]1);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to retrieve the API Context", [CtVariableReadImpl]e);
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to retrieve the API Context for " + [CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName()) + [CtLiteralImpl]'-') + [CtInvocationImpl][CtVariableReadImpl]identifier.getApiName()) + [CtLiteralImpl]'-') + [CtInvocationImpl][CtVariableReadImpl]identifier.getVersion(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]context;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> getAllAvailableContexts() [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> contexts = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sql = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ALL_CONTEXT_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sql);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]contexts.add([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"CONTEXT"));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to retrieve the API Context ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]contexts;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void populateAppRegistrationWorkflowDTO([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.ApplicationRegistrationWorkflowDTO workflowDTO) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String registrationEntry = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_REGISTRATION_ENTRY_BY_SUBSCRIBER_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]registrationEntry);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]workflowDTO.getExternalWorkflowReference());
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]subscriber = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"USER_ID"));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"SUBSCRIBER_ID"));
                [CtAssignmentImpl][CtVariableWriteImpl]application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NAME"), [CtVariableReadImpl]subscriber);
                [CtInvocationImpl][CtVariableReadImpl]application.setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"APPLICATION_ID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setApplicationWorkFlowStatus([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_STATUS"));
                [CtInvocationImpl][CtVariableReadImpl]application.setCallbackUrl([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CALLBACK_URL"));
                [CtInvocationImpl][CtVariableReadImpl]application.setDescription([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"DESCRIPTION"));
                [CtInvocationImpl][CtVariableReadImpl]application.setTier([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_TIER"));
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setApplication([CtVariableReadImpl]application);
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setKeyType([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"TOKEN_TYPE"));
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setUserName([CtInvocationImpl][CtVariableReadImpl]subscriber.getName());
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setDomainList([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"ALLOWED_DOMAINS"));
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setValidityTime([CtInvocationImpl][CtVariableReadImpl]rs.getLong([CtLiteralImpl]"VALIDITY_PERIOD"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.OAuthAppRequest request = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.ApplicationUtils.createOauthAppRequest([CtInvocationImpl][CtVariableReadImpl]application.getName(), [CtLiteralImpl]null, [CtInvocationImpl][CtVariableReadImpl]application.getCallbackUrl(), [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"TOKEN_SCOPE"), [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"INPUTS"), [CtInvocationImpl][CtVariableReadImpl]application.getTokenType());
                [CtInvocationImpl][CtVariableReadImpl]workflowDTO.setAppInfoDTO([CtVariableReadImpl]request);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while retrieving an " + [CtLiteralImpl]"Application Registration Entry for Workflow : ") + [CtInvocationImpl][CtVariableReadImpl]workflowDTO.getExternalWorkflowReference(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]int getApplicationIdForAppRegistration([CtParameterImpl][CtTypeReferenceImpl]java.lang.String workflowReference) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int appId = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String registrationEntry = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_REGISTRATION_ID_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]registrationEntry);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]workflowReference);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]appId = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"APP_ID");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while retrieving an " + [CtLiteralImpl]"Application Registration Entry for Workflow : ") + [CtVariableReadImpl]workflowReference, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]appId;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Fetches WorkflowReference when given Application Name and UserId.
     *
     * @param applicationName
     * @param userId
     * @return WorkflowReference
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.lang.String getWorkflowReference([CtParameterImpl][CtTypeReferenceImpl]java.lang.String applicationName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String workflowReference = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_WORKFLOW_ENTRY_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]applicationName);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]userId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]workflowReference = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_REF");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while getting workflow entry for " + [CtLiteralImpl]"Application : ") + [CtVariableReadImpl]applicationName) + [CtLiteralImpl]" created by ") + [CtVariableReadImpl]userId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]workflowReference;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Fetches WorkflowReference when given Application Name and UserId.
     *
     * @param applicationId
     * @param userId
     * @return WorkflowReference
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.lang.String getWorkflowReferenceByApplicationId([CtParameterImpl][CtTypeReferenceImpl]int applicationId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String workflowReference = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_WORKFLOW_ENTRY_BY_APP_ID_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]userId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]workflowReference = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_REF");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while getting workflow entry for " + [CtLiteralImpl]"Application : ") + [CtVariableReadImpl]applicationId) + [CtLiteralImpl]" created by ") + [CtVariableReadImpl]userId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]workflowReference;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retries the WorkflowExternalReference for a application.
     *
     * @param appID
     * 		ID of the application
     * @return External workflow reference for the application identified
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.lang.String getExternalWorkflowReferenceByApplicationID([CtParameterImpl][CtTypeReferenceImpl]int appID) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String workflowExtRef = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_EXTERNAL_WORKFLOW_REFERENCE_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtTypeAccessImpl]WorkflowConstants.WF_TYPE_AM_APPLICATION_CREATION);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.valueOf([CtVariableReadImpl]appID));
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl][CtCommentImpl]// returns only one row
            while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]workflowExtRef = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_EXTERNAL_REFERENCE");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while getting workflow entry for " + [CtLiteralImpl]"Application ID : ") + [CtVariableReadImpl]appID, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]workflowExtRef;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Remove workflow entry
     *
     * @param workflowReference
     * @param workflowType
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void removeWorkflowEntry([CtParameterImpl][CtTypeReferenceImpl]java.lang.String workflowReference, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String workflowType) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String queryWorkflowDelete = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_WORKFLOW_ENTRY_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]queryWorkflowDelete);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]workflowType);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]workflowReference);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error while deleting workflow entry " + [CtVariableReadImpl]workflowReference) + [CtLiteralImpl]" from the database", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retries the WorkflowExternalReference for a subscription.
     *
     * @param identifier
     * 		Identifier to find the subscribed api
     * @param appID
     * 		ID of the application which has the subscription
     * @return External workflow reference for the subscription identified
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.lang.String getExternalWorkflowReferenceForSubscription([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier identifier, [CtParameterImpl][CtTypeReferenceImpl]int appID) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String workflowExtRef = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int id = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int subscriptionID = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_EXTERNAL_WORKFLOW_REFERENCE_FOR_SUBSCRIPTION_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String postgreSQL = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_EXTERNAL_WORKFLOW_REFERENCE_FOR_SUBSCRIPTION_POSTGRE_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]identifier instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]id = [CtInvocationImpl]getAPIID([CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier) (identifier)), [CtVariableReadImpl]conn);
            } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]identifier instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]id = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier) (identifier)).getProductId();
            }
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]conn.getMetaData().getDriverName().contains([CtLiteralImpl]"PostgreSQL")) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtVariableReadImpl]postgreSQL;
            }
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]id);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]appID);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtTypeAccessImpl]WorkflowConstants.WF_TYPE_AM_SUBSCRIPTION_CREATION);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl][CtCommentImpl]// returns only one row
            while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]workflowExtRef = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_EXTERNAL_REFERENCE");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while getting workflow entry for " + [CtLiteralImpl]"Subscription : ") + [CtVariableReadImpl]subscriptionID, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]workflowExtRef;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retries the WorkflowExternalReference for a subscription.
     *
     * @param subscriptionId
     * 		ID of the subscription
     * @return External workflow reference for the subscription <code>subscriptionId</code>
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.lang.String getExternalWorkflowReferenceForSubscription([CtParameterImpl][CtTypeReferenceImpl]int subscriptionId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String workflowExtRef = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_EXTERNAL_WORKFLOW_FOR_SUBSCRIPTION_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtCommentImpl]// setting subscriptionId as string to prevent error when db finds string type IDs for
            [CtCommentImpl]// ApplicationRegistration workflows
            [CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.valueOf([CtVariableReadImpl]subscriptionId));
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtTypeAccessImpl]WorkflowConstants.WF_TYPE_AM_SUBSCRIPTION_CREATION);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl][CtCommentImpl]// returns only one row
            while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]workflowExtRef = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_EXTERNAL_REFERENCE");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while getting workflow entry for " + [CtLiteralImpl]"Subscription : ") + [CtVariableReadImpl]subscriptionId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]workflowExtRef;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retries the WorkflowExternalReference for an user signup by DOMAIN/username.
     *
     * @param usernameWithDomain
     * 		username of the signed up user inthe format of DOMAIN/username
     * @return External workflow reference for the signup workflow entry
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.lang.String getExternalWorkflowReferenceForUserSignup([CtParameterImpl][CtTypeReferenceImpl]java.lang.String usernameWithDomain) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String workflowExtRef = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_EXTERNAL_WORKFLOW_FOR_SIGNUP_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]usernameWithDomain);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtTypeAccessImpl]WorkflowConstants.WF_TYPE_AM_USER_SIGNUP);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl][CtCommentImpl]// returns only one row
            while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]workflowExtRef = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_EXTERNAL_REFERENCE");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while getting workflow entry for " + [CtLiteralImpl]"User signup : ") + [CtVariableReadImpl]usernameWithDomain, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]workflowExtRef;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieves IDs of pending subscriptions for a given application
     *
     * @param applicationId
     * 		application id of the application
     * @return Set containing subscription id list
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.Integer> getPendingSubscriptionsByApplicationId([CtParameterImpl][CtTypeReferenceImpl]int applicationId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.Integer> pendingSubscriptions = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<[CtTypeReferenceImpl]java.lang.Integer>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_PAGINATED_SUBSCRIPTIONS_BY_APPLICATION_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtTypeAccessImpl]APIConstants.SubscriptionStatus.ON_HOLD);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]pendingSubscriptions.add([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"SUBSCRIPTION_ID"));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while getting subscription entries for " + [CtLiteralImpl]"Application : ") + [CtVariableReadImpl]applicationId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]pendingSubscriptions;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieves the IDs of pending subscriptions of a given API
     *
     * @param apiId
     * 		API Identifier
     * @return set of subscriptions ids
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.Integer> getPendingSubscriptionsByAPIId([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.Integer> pendingSubscriptions = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<[CtTypeReferenceImpl]java.lang.Integer>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTIONS_BY_API_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]apiId.getApiName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]apiId.getVersion());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]apiId.getProviderName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]4, [CtTypeAccessImpl]APIConstants.SubscriptionStatus.ON_HOLD);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]pendingSubscriptions.add([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"SUBSCRIPTION_ID"));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error occurred while retrieving subscription entries for API : " + [CtVariableReadImpl]apiId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]pendingSubscriptions;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieves registration workflow reference for applicationId and key type
     *
     * @param applicationId
     * 		id of the application with registration
     * @param keyType
     * 		key type of the registration
     * @return workflow reference of the registration
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.lang.String getRegistrationWFReference([CtParameterImpl][CtTypeReferenceImpl]int applicationId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String keyType) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String reference = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_REGISTRATION_WORKFLOW_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]keyType);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl][CtCommentImpl]// returns only one row
            while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]reference = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_REF");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while getting registration entry for " + [CtLiteralImpl]"Application : ") + [CtVariableReadImpl]applicationId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]reference;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrives subscription status for APIIdentifier and applicationId
     *
     * @param identifier
     * 		identifier subscribed
     * @param applicationId
     * 		application with subscription
     * @return subscription status
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.lang.String getSubscriptionStatus([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Identifier identifier, [CtParameterImpl][CtTypeReferenceImpl]int applicationId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String status = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int id = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_STATUS_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]identifier instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]id = [CtInvocationImpl]getAPIID([CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier) (identifier)), [CtVariableReadImpl]conn);
            } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]identifier instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]id = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier) (identifier)).getProductId();
            }
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]id);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]applicationId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl][CtCommentImpl]// returns only one row
            while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]status = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"SUB_STATUS");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while getting subscription entry for " + [CtLiteralImpl]"Application : ") + [CtVariableReadImpl]applicationId) + [CtLiteralImpl]", API: ") + [CtVariableReadImpl]identifier, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]status;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieve subscription create state for APIIdentifier and applicationID
     *
     * @param identifier
     * 		- api identifier which is subscribed
     * @param applicationId
     * 		- application used to subscribed
     * @param connection
     * @return subscription create status
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.lang.String getSubscriptionCreaeteStatus([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier, [CtParameterImpl][CtTypeReferenceImpl]int applicationId, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection connection) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String status = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_CREATION_STATUS_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]int apiId = [CtInvocationImpl]getAPIID([CtVariableReadImpl]identifier, [CtVariableReadImpl]connection);
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]applicationId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl][CtCommentImpl]// returns only one row
            while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]status = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"SUBS_CREATE_STATE");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while getting subscription entry for " + [CtLiteralImpl]"Application : ") + [CtVariableReadImpl]applicationId) + [CtLiteralImpl]", API: ") + [CtVariableReadImpl]identifier, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtLiteralImpl]null, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]status;
    }

    [CtClassImpl]private class SubscriptionInfo {
        [CtFieldImpl]private [CtTypeReferenceImpl]int subscriptionId;

        [CtFieldImpl]private [CtTypeReferenceImpl]java.lang.String tierId;

        [CtFieldImpl]private [CtTypeReferenceImpl]int applicationId;

        [CtFieldImpl]private [CtTypeReferenceImpl]java.lang.String accessToken;

        [CtFieldImpl]private [CtTypeReferenceImpl]java.lang.String tokenType;

        [CtFieldImpl]private [CtTypeReferenceImpl]java.lang.String subscriptionStatus;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Identify whether the loggedin user used his ordinal username or email
     *
     * @param userId
     * @return  */
    private [CtTypeReferenceImpl]boolean isUserLoggedInEmail([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId) [CtBlockImpl]{
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]userId.contains([CtLiteralImpl]"@");
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Identify whether the loggedin user used his Primary Login name or Secondary login name
     *
     * @param userId
     * @return  */
    private [CtTypeReferenceImpl]boolean isSecondaryLogin([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId) [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>> loginConfiguration = [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder.getInstance().getAPIManagerConfigurationService().getAPIManagerConfiguration().getLoginConfiguration();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]loginConfiguration.get([CtTypeAccessImpl]APIConstants.EMAIL_LOGIN) != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> emailConf = [CtInvocationImpl][CtVariableReadImpl]loginConfiguration.get([CtTypeAccessImpl]APIConstants.EMAIL_LOGIN);
            [CtIfImpl]if ([CtInvocationImpl][CtLiteralImpl]"true".equalsIgnoreCase([CtInvocationImpl][CtVariableReadImpl]emailConf.get([CtTypeAccessImpl]APIConstants.PRIMARY_LOGIN))) [CtBlockImpl]{
                [CtReturnImpl]return [CtUnaryOperatorImpl]![CtInvocationImpl]isUserLoggedInEmail([CtVariableReadImpl]userId);
            }
            [CtIfImpl]if ([CtInvocationImpl][CtLiteralImpl]"false".equalsIgnoreCase([CtInvocationImpl][CtVariableReadImpl]emailConf.get([CtTypeAccessImpl]APIConstants.PRIMARY_LOGIN))) [CtBlockImpl]{
                [CtReturnImpl]return [CtInvocationImpl]isUserLoggedInEmail([CtVariableReadImpl]userId);
            }
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]loginConfiguration.get([CtTypeAccessImpl]APIConstants.USERID_LOGIN) != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> userIdConf = [CtInvocationImpl][CtVariableReadImpl]loginConfiguration.get([CtTypeAccessImpl]APIConstants.USERID_LOGIN);
            [CtIfImpl]if ([CtInvocationImpl][CtLiteralImpl]"true".equalsIgnoreCase([CtInvocationImpl][CtVariableReadImpl]userIdConf.get([CtTypeAccessImpl]APIConstants.PRIMARY_LOGIN))) [CtBlockImpl]{
                [CtReturnImpl]return [CtInvocationImpl]isUserLoggedInEmail([CtVariableReadImpl]userId);
            }
            [CtIfImpl]if ([CtInvocationImpl][CtLiteralImpl]"false".equalsIgnoreCase([CtInvocationImpl][CtVariableReadImpl]userIdConf.get([CtTypeAccessImpl]APIConstants.PRIMARY_LOGIN))) [CtBlockImpl]{
                [CtReturnImpl]return [CtUnaryOperatorImpl]![CtInvocationImpl]isUserLoggedInEmail([CtVariableReadImpl]userId);
            }
        }
        [CtReturnImpl]return [CtLiteralImpl]false;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get the primaryLogin name using secondary login name. Primary secondary
     * Configuration is provided in the identitiy.xml. In the userstore, it is
     * users responsibility TO MAINTAIN THE SECONDARY LOGIN NAME AS UNIQUE for
     * each and every users. If it is not unique, we will pick the very first
     * entry from the userlist.
     *
     * @param login
     * @return  * @throws APIManagementException
     */
    private [CtTypeReferenceImpl]java.lang.String getPrimaryLoginFromSecondary([CtParameterImpl][CtTypeReferenceImpl]java.lang.String login) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>> loginConfiguration = [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder.getInstance().getAPIManagerConfigurationService().getAPIManagerConfiguration().getLoginConfiguration();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String claimURI;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String username = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtInvocationImpl]isUserLoggedInEmail([CtVariableReadImpl]login)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> emailConf = [CtInvocationImpl][CtVariableReadImpl]loginConfiguration.get([CtTypeAccessImpl]APIConstants.EMAIL_LOGIN);
            [CtAssignmentImpl][CtVariableWriteImpl]claimURI = [CtInvocationImpl][CtVariableReadImpl]emailConf.get([CtTypeAccessImpl]APIConstants.CLAIM_URI);
        } else [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> userIdConf = [CtInvocationImpl][CtVariableReadImpl]loginConfiguration.get([CtTypeAccessImpl]APIConstants.USERID_LOGIN);
            [CtAssignmentImpl][CtVariableWriteImpl]claimURI = [CtInvocationImpl][CtVariableReadImpl]userIdConf.get([CtTypeAccessImpl]APIConstants.CLAIM_URI);
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.utils.RemoteUserManagerClient rmUserClient = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.utils.RemoteUserManagerClient([CtVariableReadImpl]login);
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] user = [CtInvocationImpl][CtVariableReadImpl]rmUserClient.getUserList([CtVariableReadImpl]claimURI, [CtVariableReadImpl]login);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtFieldReadImpl][CtVariableReadImpl]user.length > [CtLiteralImpl]0) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]username = [CtArrayReadImpl][CtVariableReadImpl]user[[CtLiteralImpl]0];
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.lang.Exception e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while retrieving the primaryLogin name using secondary loginName : " + [CtVariableReadImpl]login, [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]username;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * identify the login username is primary or secondary
     *
     * @param userID
     * @return  * @throws APIManagementException
     */
    private [CtTypeReferenceImpl]java.lang.String getLoginUserName([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String primaryLogin = [CtVariableReadImpl]userID;
        [CtIfImpl]if ([CtInvocationImpl]isSecondaryLogin([CtVariableReadImpl]userID)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]primaryLogin = [CtInvocationImpl]getPrimaryLoginFromSecondary([CtVariableReadImpl]userID);
        }
        [CtReturnImpl]return [CtVariableReadImpl]primaryLogin;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Store external APIStore details to which APIs successfully published
     *
     * @param apiId
     * 		APIIdentifier
     * @param apiStoreSet
     * 		APIStores set
     * @return added/failed
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]boolean addExternalAPIStoresDetails([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiId, [CtParameterImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStore> apiStoreSet) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean state = [CtLiteralImpl]false;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtCommentImpl]// This query to add external APIStores to database table
            [CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_EXTERNAL_API_STORE_SQL;
            [CtLocalVariableImpl][CtCommentImpl]// Get API Id
            [CtTypeReferenceImpl]int apiIdentifier;
            [CtAssignmentImpl][CtVariableWriteImpl]apiIdentifier = [CtInvocationImpl]getAPIID([CtVariableReadImpl]apiId, [CtVariableReadImpl]conn);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiIdentifier == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Could not load API record for: " + [CtInvocationImpl][CtVariableReadImpl]apiId.getApiName();
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object storeObject : [CtVariableReadImpl]apiStoreSet) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStore store = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStore) (storeObject));
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiIdentifier);
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]store.getName());
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]store.getDisplayName());
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]store.getEndpoint());
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]5, [CtInvocationImpl][CtVariableReadImpl]store.getType());
                [CtInvocationImpl][CtVariableReadImpl]ps.setTimestamp([CtLiteralImpl]6, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.sql.Timestamp([CtInvocationImpl][CtTypeAccessImpl]java.lang.System.currentTimeMillis()));
                [CtInvocationImpl][CtVariableReadImpl]ps.addBatch();
            }
            [CtInvocationImpl][CtVariableReadImpl]ps.executeBatch();
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
            [CtAssignmentImpl][CtVariableWriteImpl]state = [CtLiteralImpl]true;
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback storing external apistore details ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to store external apistore details", [CtVariableReadImpl]e);
            [CtAssignmentImpl][CtVariableWriteImpl]state = [CtLiteralImpl]false;
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException e) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to store external apistore details", [CtVariableReadImpl]e);
            [CtAssignmentImpl][CtVariableWriteImpl]state = [CtLiteralImpl]false;
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
        [CtReturnImpl]return [CtVariableReadImpl]state;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Delete the records of external APIStore details.
     *
     * @param apiId
     * 		APIIdentifier
     * @param apiStoreSet
     * 		APIStores set
     * @return added/failed
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]boolean deleteExternalAPIStoresDetails([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiId, [CtParameterImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStore> apiStoreSet) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean state = [CtLiteralImpl]false;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_EXTERNAL_API_STORE_SQL;
            [CtLocalVariableImpl][CtCommentImpl]// Get API Id
            [CtTypeReferenceImpl]int apiIdentifier;
            [CtAssignmentImpl][CtVariableWriteImpl]apiIdentifier = [CtInvocationImpl]getAPIID([CtVariableReadImpl]apiId, [CtVariableReadImpl]conn);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiIdentifier == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Could not load API record for: " + [CtInvocationImpl][CtVariableReadImpl]apiId.getApiName();
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object storeObject : [CtVariableReadImpl]apiStoreSet) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStore store = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStore) (storeObject));
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiIdentifier);
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]store.getName());
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]store.getType());
                [CtInvocationImpl][CtVariableReadImpl]ps.addBatch();
            }
            [CtInvocationImpl][CtVariableReadImpl]ps.executeBatch();
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
            [CtAssignmentImpl][CtVariableWriteImpl]state = [CtLiteralImpl]true;
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback deleting external apistore details ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to delete external apistore details", [CtVariableReadImpl]e);
            [CtAssignmentImpl][CtVariableWriteImpl]state = [CtLiteralImpl]false;
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException e) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to delete external apistore details", [CtVariableReadImpl]e);
            [CtAssignmentImpl][CtVariableWriteImpl]state = [CtLiteralImpl]false;
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
        [CtReturnImpl]return [CtVariableReadImpl]state;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void updateExternalAPIStoresDetails([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiId, [CtParameterImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStore> apiStoreSet) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtInvocationImpl]updateExternalAPIStoresDetails([CtVariableReadImpl]apiId, [CtVariableReadImpl]apiStoreSet, [CtVariableReadImpl]conn);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback updating external apistore details ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to update external apistore details", [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException e) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to updating external apistore details", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtLiteralImpl]null, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Updateexternal APIStores details to which APIs published
     *
     * @param apiIdentifier
     * 		API Identifier
     * @throws APIManagementException
     * 		if failed to add Application
     */
    public [CtTypeReferenceImpl]void updateExternalAPIStoresDetails([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiIdentifier, [CtParameterImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStore> apiStoreSet, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException, [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtCommentImpl]// This query to add external APIStores to database table
            [CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_EXTERNAL_API_STORE_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtLocalVariableImpl][CtCommentImpl]// Get API Id
            [CtTypeReferenceImpl]int apiId;
            [CtAssignmentImpl][CtVariableWriteImpl]apiId = [CtInvocationImpl]getAPIID([CtVariableReadImpl]apiIdentifier, [CtVariableReadImpl]conn);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiId == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Could not load API record for: " + [CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getApiName();
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
            }
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object storeObject : [CtVariableReadImpl]apiStoreSet) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStore store = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStore) (storeObject));
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]store.getEndpoint());
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]store.getType());
                [CtInvocationImpl][CtVariableReadImpl]ps.setTimestamp([CtLiteralImpl]3, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.sql.Timestamp([CtInvocationImpl][CtTypeAccessImpl]java.lang.System.currentTimeMillis()));
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]4, [CtVariableReadImpl]apiId);
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]5, [CtInvocationImpl][CtVariableReadImpl]store.getName());
                [CtInvocationImpl][CtVariableReadImpl]ps.addBatch();
            }
            [CtInvocationImpl][CtVariableReadImpl]ps.executeBatch();
            [CtInvocationImpl][CtVariableReadImpl]ps.clearBatch();
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Error while updating External APIStore details to the database for API : ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Return external APIStore details on successfully APIs published
     *
     * @param apiId
     * 		APIIdentifier
     * @return Set of APIStore
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStore> getExternalAPIStoresDetails([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStore> storesSet = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStore>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]storesSet = [CtInvocationImpl]getExternalAPIStoresDetails([CtVariableReadImpl]apiId, [CtVariableReadImpl]conn);
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback getting external apistore details ", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to get external apistore details", [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException e) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to get external apistore details", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtLiteralImpl]null, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
        [CtReturnImpl]return [CtVariableReadImpl]storesSet;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get external APIStores details which are stored in database
     *
     * @param apiIdentifier
     * 		API Identifier
     * @throws APIManagementException
     * 		if failed to get external APIStores
     */
    public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStore> getExternalAPIStoresDetails([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiIdentifier, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException, [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStore> storesSet = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStore>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtCommentImpl]// This query to add external APIStores to database table
            [CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_EXTERNAL_API_STORE_DETAILS_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtLocalVariableImpl][CtTypeReferenceImpl]int apiId;
            [CtAssignmentImpl][CtVariableWriteImpl]apiId = [CtInvocationImpl]getAPIID([CtVariableReadImpl]apiIdentifier, [CtVariableReadImpl]conn);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiId == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtLiteralImpl]"Could not load API record for: " + [CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getApiName();
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
            }
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStore store = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIStore();
                [CtInvocationImpl][CtVariableReadImpl]store.setName([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"STORE_ID"));
                [CtInvocationImpl][CtVariableReadImpl]store.setDisplayName([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"STORE_DISPLAY_NAME"));
                [CtInvocationImpl][CtVariableReadImpl]store.setEndpoint([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"STORE_ENDPOINT"));
                [CtInvocationImpl][CtVariableReadImpl]store.setType([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"STORE_TYPE"));
                [CtInvocationImpl][CtVariableReadImpl]store.setLastUpdated([CtInvocationImpl][CtVariableReadImpl]rs.getTimestamp([CtLiteralImpl]"LAST_UPDATED_TIME"));
                [CtInvocationImpl][CtVariableReadImpl]store.setPublished([CtLiteralImpl]true);
                [CtInvocationImpl][CtVariableReadImpl]storesSet.add([CtVariableReadImpl]store);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error while getting External APIStore details from the database for  the API : " + [CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getApiName()) + [CtLiteralImpl]'-') + [CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getVersion(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]storesSet;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void addScopes([CtParameterImpl][CtTypeReferenceImpl]java.util.Set<[CtWildcardReferenceImpl]?> objects, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiIdentifier, [CtParameterImpl][CtTypeReferenceImpl]int apiID, [CtParameterImpl][CtTypeReferenceImpl]int tenantID) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps2 = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps3 = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String scopeEntry = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_SCOPE_ENTRY_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String scopeRoleEntry = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_SCOPE_ROLE_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String scopeLink = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_SCOPE_LINK_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Boolean scopeSharingEnabled = [CtLiteralImpl]false;
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtInvocationImpl][CtTypeAccessImpl]java.lang.System.getProperty([CtTypeAccessImpl]APIConstants.ENABLE_API_SCOPES_SHARING))) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]scopeSharingEnabled = [CtInvocationImpl][CtTypeAccessImpl]java.lang.Boolean.parseBoolean([CtInvocationImpl][CtTypeAccessImpl]java.lang.System.getProperty([CtTypeAccessImpl]APIConstants.ENABLE_API_SCOPES_SHARING));
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String scopeId = [CtLiteralImpl]"SCOPE_ID";
            [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]conn.getMetaData().getDriverName().contains([CtLiteralImpl]"PostgreSQL")) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]scopeId = [CtLiteralImpl]"scope_id";
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]objects != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object : [CtVariableReadImpl]objects) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]scopeEntry, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]scopeId });
                    [CtAssignmentImpl][CtVariableWriteImpl]ps2 = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]scopeLink);
                    [CtAssignmentImpl][CtVariableWriteImpl]ps3 = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]scopeRoleEntry);
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]object instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate uriTemplate = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate) (object));
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScope() == [CtLiteralImpl]null) [CtBlockImpl]{
                            [CtContinueImpl]continue;
                        }
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtVariableReadImpl]scopeSharingEnabled) && [CtInvocationImpl]isScopeKeyAssigned([CtVariableReadImpl]apiIdentifier, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScope().getKey(), [CtVariableReadImpl]tenantID)) [CtBlockImpl]{
                            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Scope '" + [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScope().getKey()) + [CtLiteralImpl]"' ") + [CtLiteralImpl]"is already used by another API.");
                        }
                        [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScope().getKey());
                        [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScope().getName());
                        [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScope().getDescription());
                        [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]4, [CtVariableReadImpl]tenantID);
                        [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]5, [CtTypeAccessImpl]APIConstants.DEFAULT_SCOPE_TYPE);
                        [CtInvocationImpl][CtVariableReadImpl]ps.execute();
                        [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.getGeneratedKeys();
                        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                            [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScope().setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]1));
                        }
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roles = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScope().getRoles();
                        [CtLocalVariableImpl][CtCommentImpl]// Adding scope bindings
                        [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> roleList = [CtInvocationImpl][CtTypeAccessImpl]com.google.common.collect.Lists.newArrayList([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]com.google.common.base.Splitter.on([CtLiteralImpl]",").trimResults().split([CtVariableReadImpl]roles));
                        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String role : [CtVariableReadImpl]roleList) [CtBlockImpl]{
                            [CtInvocationImpl][CtVariableReadImpl]ps3.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScope().getId());
                            [CtInvocationImpl][CtVariableReadImpl]ps3.setString([CtLiteralImpl]2, [CtVariableReadImpl]role);
                            [CtInvocationImpl][CtVariableReadImpl]ps3.setString([CtLiteralImpl]3, [CtTypeAccessImpl]APIConstants.DEFAULT_BINDING_TYPE);
                            [CtInvocationImpl][CtVariableReadImpl]ps3.addBatch();
                        }
                        [CtInvocationImpl][CtVariableReadImpl]ps3.executeBatch();
                        [CtInvocationImpl][CtVariableReadImpl]ps2.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiID);
                        [CtInvocationImpl][CtVariableReadImpl]ps2.setInt([CtLiteralImpl]2, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScope().getId());
                        [CtInvocationImpl][CtVariableReadImpl]ps2.execute();
                        [CtInvocationImpl][CtVariableReadImpl]conn.commit();
                    } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]object instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope scope = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope) (object));
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtVariableReadImpl]scopeSharingEnabled) && [CtInvocationImpl]isScopeKeyAssigned([CtVariableReadImpl]apiIdentifier, [CtInvocationImpl][CtVariableReadImpl]scope.getKey(), [CtVariableReadImpl]tenantID)) [CtBlockImpl]{
                            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Scope '" + [CtInvocationImpl][CtVariableReadImpl]scope.getKey()) + [CtLiteralImpl]"' is already used ") + [CtLiteralImpl]"by another API.");
                        }
                        [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]scope.getKey());
                        [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]scope.getName());
                        [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]scope.getDescription());
                        [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]4, [CtVariableReadImpl]tenantID);
                        [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]5, [CtTypeAccessImpl]APIConstants.DEFAULT_SCOPE_TYPE);
                        [CtInvocationImpl][CtVariableReadImpl]ps.execute();
                        [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.getGeneratedKeys();
                        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                            [CtInvocationImpl][CtVariableReadImpl]scope.setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]1));
                        }
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roles = [CtInvocationImpl][CtVariableReadImpl]scope.getRoles();
                        [CtLocalVariableImpl][CtCommentImpl]// Adding scope bindings
                        [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> roleList;
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]roles != [CtLiteralImpl]null) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]roleList = [CtInvocationImpl][CtTypeAccessImpl]com.google.common.collect.Lists.newArrayList([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]com.google.common.base.Splitter.on([CtLiteralImpl]",").trimResults().split([CtVariableReadImpl]roles));
                        } else [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]roleList = [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtLiteralImpl]"");
                        }
                        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String role : [CtVariableReadImpl]roleList) [CtBlockImpl]{
                            [CtInvocationImpl][CtVariableReadImpl]ps3.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]scope.getId());
                            [CtInvocationImpl][CtVariableReadImpl]ps3.setString([CtLiteralImpl]2, [CtVariableReadImpl]role);
                            [CtInvocationImpl][CtVariableReadImpl]ps3.setString([CtLiteralImpl]3, [CtTypeAccessImpl]APIConstants.DEFAULT_BINDING_TYPE);
                            [CtInvocationImpl][CtVariableReadImpl]ps3.addBatch();
                        }
                        [CtInvocationImpl][CtVariableReadImpl]ps3.executeBatch();
                        [CtInvocationImpl][CtVariableReadImpl]ps2.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiID);
                        [CtInvocationImpl][CtVariableReadImpl]ps2.setInt([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]scope.getId());
                        [CtInvocationImpl][CtVariableReadImpl]ps2.execute();
                        [CtInvocationImpl][CtVariableReadImpl]conn.commit();
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                [CtInvocationImpl]handleException([CtLiteralImpl]"Error occurred while Rolling back changes done on Scopes Creation", [CtVariableReadImpl]e1);
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error occurred while creating scopes ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps2, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Check a given scope key already exist for a tenant
     *
     * @param scopeKey
     * 		Scope Key
     * @param tenantId
     * 		Tenant ID
     * @return true if scope already exists
     * @throws APIManagementException
     * 		if an error occurs while executing db query
     */
    private [CtTypeReferenceImpl]boolean isScopeExists([CtParameterImpl][CtTypeReferenceImpl]java.lang.String scopeKey, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SCOPES_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]scopeKey);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Scope key " + [CtVariableReadImpl]scopeKey) + [CtLiteralImpl]" for tenant ") + [CtVariableReadImpl]tenantId) + [CtLiteralImpl]" exists.");
                }
                [CtReturnImpl]return [CtLiteralImpl]true;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to check scope exists for scope " + [CtVariableReadImpl]scopeKey, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtLiteralImpl]false;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope> getAPIScopes([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope> scopeHashMap = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]int apiId;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]apiId = [CtInvocationImpl]getAPIID([CtVariableReadImpl]identifier, [CtVariableReadImpl]conn);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_SCOPES_SQL;
            [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]conn.getMetaData().getDriverName().contains([CtLiteralImpl]"Oracle")) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_SCOPES_ORACLE_SQL;
            }
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope scope;
                [CtLocalVariableImpl][CtTypeReferenceImpl]int scopeId = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]1);
                [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]scopeHashMap.containsKey([CtVariableReadImpl]scopeId)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtCommentImpl]// scope already exists append roles.
                    [CtVariableWriteImpl]scope = [CtInvocationImpl][CtVariableReadImpl]scopeHashMap.get([CtVariableReadImpl]scopeId);
                    [CtInvocationImpl][CtVariableReadImpl]scope.setRoles([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]scope.getRoles().concat([CtBinaryOperatorImpl][CtLiteralImpl]"," + [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]5)).trim());
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]scope = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope();
                    [CtInvocationImpl][CtVariableReadImpl]scope.setId([CtVariableReadImpl]scopeId);
                    [CtInvocationImpl][CtVariableReadImpl]scope.setKey([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]2));
                    [CtInvocationImpl][CtVariableReadImpl]scope.setName([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]3));
                    [CtInvocationImpl][CtVariableReadImpl]scope.setDescription([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]4));
                    [CtInvocationImpl][CtVariableReadImpl]scope.setRoles([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]5).trim());
                }
                [CtInvocationImpl][CtVariableReadImpl]scopeHashMap.put([CtVariableReadImpl]scopeId, [CtVariableReadImpl]scope);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to retrieve api scopes ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtInvocationImpl]populateScopeSet([CtVariableReadImpl]scopeHashMap);
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void addScopes([CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn, [CtParameterImpl][CtTypeReferenceImpl]java.util.Set<[CtWildcardReferenceImpl]?> objects, [CtParameterImpl][CtTypeReferenceImpl]int api_id, [CtParameterImpl][CtTypeReferenceImpl]int tenantID) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.Integer> scopeIds = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.Integer>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String scopeEntry = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_SCOPE_ENTRY_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String scopeId = [CtLiteralImpl]"SCOPE_ID";
            [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]conn.getMetaData().getDriverName().contains([CtLiteralImpl]"PostgreSQL")) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]scopeId = [CtLiteralImpl]"scope_id";
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]objects != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object : [CtVariableReadImpl]objects) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]scopeEntry, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]scopeId });
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]object instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate uriTemplate = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate) (object));
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScope() == [CtLiteralImpl]null) [CtBlockImpl]{
                            [CtContinueImpl]continue;
                        }
                        [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScope().getKey());
                        [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScope().getName());
                        [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScope().getDescription());
                        [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]4, [CtVariableReadImpl]tenantID);
                        [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]5, [CtTypeAccessImpl]APIConstants.DEFAULT_SCOPE_TYPE);
                        [CtInvocationImpl][CtVariableReadImpl]ps.execute();
                        [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.getGeneratedKeys();
                        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                            [CtLocalVariableImpl][CtTypeReferenceImpl]int scopeIdValue = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]1);
                            [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]uriTemplate.getScope().setId([CtVariableReadImpl]scopeIdValue);
                            [CtInvocationImpl][CtVariableReadImpl]scopeIds.add([CtVariableReadImpl]scopeIdValue);
                        }
                    } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]object instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope scope = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope) (object));
                        [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]scope.getKey());
                        [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]scope.getName());
                        [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]scope.getDescription());
                        [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]4, [CtVariableReadImpl]tenantID);
                        [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]5, [CtTypeAccessImpl]APIConstants.DEFAULT_SCOPE_TYPE);
                        [CtInvocationImpl][CtVariableReadImpl]ps.execute();
                        [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.getGeneratedKeys();
                        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                            [CtLocalVariableImpl][CtTypeReferenceImpl]int scopeIdValue = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]1);
                            [CtInvocationImpl][CtVariableReadImpl]scope.setId([CtVariableReadImpl]scopeIdValue);
                            [CtInvocationImpl][CtVariableReadImpl]scopeIds.add([CtVariableReadImpl]scopeIdValue);
                        }
                    }
                }
                [CtInvocationImpl]addScopeLinks([CtVariableReadImpl]conn, [CtVariableReadImpl]scopeIds, [CtVariableReadImpl]api_id);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error occurred while creating scopes ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtLiteralImpl]null, [CtVariableReadImpl]rs);
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void addScopeLinks([CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection connection, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.Integer> scopeIds, [CtParameterImpl][CtTypeReferenceImpl]int apiId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String scopeLink = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_SCOPE_LINK_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]scopeIds != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]scopeLink);
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Integer scopeId : [CtVariableReadImpl]scopeIds) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]scopeId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.addBatch();
                }
                [CtInvocationImpl][CtVariableReadImpl]ps.executeBatch();
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error occurred while creating scope links ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Generate Set<Scope> from HashMap
     *
     * @return Set of Scopes populated with roles.
     */
    private [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope> populateScopeSet([CtParameterImpl][CtTypeReferenceImpl]java.util.HashMap<[CtWildcardReferenceImpl]?, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope> scopeHashMap) [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope> scopes = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.LinkedHashSet<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope>();
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope scope : [CtInvocationImpl][CtVariableReadImpl]scopeHashMap.values()) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]scopes.add([CtVariableReadImpl]scope);
        }
        [CtReturnImpl]return [CtVariableReadImpl]scopes;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns all the scopes assigned for given apis
     *
     * @param apiIdsString
     * 		list of api ids separated by commas
     * @return Map<String, Set<Scope>> set of scopes for each apiId
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope>> getScopesForAPIS([CtParameterImpl][CtTypeReferenceImpl]java.lang.String apiIdsString) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope>> apiScopeSet = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope>>();
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SCOPES_FOR_API_LIST;
            [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]conn.getMetaData().getDriverName().contains([CtLiteralImpl]"Oracle")) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SCOPES_FOR_API_LIST_ORACLE;
            }
            [CtAssignmentImpl][CtCommentImpl]// apids are retrieved from the db so no need to protect for sql injection
            [CtVariableWriteImpl]sqlQuery = [CtInvocationImpl][CtVariableReadImpl]sqlQuery.replace([CtLiteralImpl]"$paramList", [CtVariableReadImpl]apiIdsString);
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String apiId = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]1);
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope scope = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope();
                [CtInvocationImpl][CtVariableReadImpl]scope.setId([CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]2));
                [CtInvocationImpl][CtVariableReadImpl]scope.setName([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]3));
                [CtInvocationImpl][CtVariableReadImpl]scope.setDescription([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]4));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope> scopeList = [CtInvocationImpl][CtVariableReadImpl]apiScopeSet.get([CtVariableReadImpl]apiId);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]scopeList == [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]scopeList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.LinkedHashSet<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope>();
                    [CtInvocationImpl][CtVariableReadImpl]scopeList.add([CtVariableReadImpl]scope);
                    [CtInvocationImpl][CtVariableReadImpl]apiScopeSet.put([CtVariableReadImpl]apiId, [CtVariableReadImpl]scopeList);
                } else [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]scopeList.add([CtVariableReadImpl]scope);
                    [CtInvocationImpl][CtVariableReadImpl]apiScopeSet.put([CtVariableReadImpl]apiId, [CtVariableReadImpl]scopeList);
                }
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to retrieve api scopes ", [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]apiScopeSet;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope> getScopesBySubscribedAPIs([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier> identifiers) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.Integer> apiIds = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.Integer>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope> scopeHashMap = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier : [CtVariableReadImpl]identifiers) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]apiIds.add([CtInvocationImpl]getAPIID([CtVariableReadImpl]identifier, [CtVariableReadImpl]conn));
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String commaSeparatedIds = [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.join([CtInvocationImpl][CtVariableReadImpl]apiIds.iterator(), [CtLiteralImpl]',');
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SCOPE_BY_SUBSCRIBED_API_PREFIX + [CtVariableReadImpl]commaSeparatedIds) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SCOPE_BY_SUBSCRIBED_ID_SUFFIX;
            [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]conn.getMetaData().getDriverName().contains([CtLiteralImpl]"Oracle")) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SCOPE_BY_SUBSCRIBED_ID_ORACLE_SQL + [CtVariableReadImpl]commaSeparatedIds) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SCOPE_BY_SUBSCRIBED_ID_SUFFIX;
            }
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope scope;
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String scopeKey = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]1);
                [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]scopeHashMap.containsKey([CtVariableReadImpl]scopeKey)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtCommentImpl]// scope already exists append roles.
                    [CtVariableWriteImpl]scope = [CtInvocationImpl][CtVariableReadImpl]scopeHashMap.get([CtVariableReadImpl]scopeKey);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roles = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]4);
                    [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isNotEmpty([CtVariableReadImpl]roles)) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]scope.setRoles([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]scope.getRoles().concat([CtBinaryOperatorImpl][CtLiteralImpl]"," + [CtInvocationImpl][CtVariableReadImpl]roles.trim()));
                    }
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]scope = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope();
                    [CtInvocationImpl][CtVariableReadImpl]scope.setKey([CtVariableReadImpl]scopeKey);
                    [CtInvocationImpl][CtVariableReadImpl]scope.setName([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]2));
                    [CtInvocationImpl][CtVariableReadImpl]scope.setDescription([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]3));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roles = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]4);
                    [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isNotEmpty([CtVariableReadImpl]roles)) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]scope.setRoles([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]4).trim());
                    }
                }
                [CtInvocationImpl][CtVariableReadImpl]scopeHashMap.put([CtVariableReadImpl]scopeKey, [CtVariableReadImpl]scope);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to retrieve api scopes ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtInvocationImpl]populateScopeSet([CtVariableReadImpl]scopeHashMap);
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope> getAPIScopesByScopeKey([CtParameterImpl][CtTypeReferenceImpl]java.lang.String scopeKey, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope> scopeHashMap = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SCOPES_BY_SCOPE_KEY_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]scopeKey);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope scope;
                [CtLocalVariableImpl][CtTypeReferenceImpl]int scopeId = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]1);
                [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]scopeHashMap.containsKey([CtVariableReadImpl]scopeId)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtCommentImpl]// scope already exists append roles.
                    [CtVariableWriteImpl]scope = [CtInvocationImpl][CtVariableReadImpl]scopeHashMap.get([CtVariableReadImpl]scopeId);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roles = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]5);
                    [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isNotEmpty([CtVariableReadImpl]roles)) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]scope.setRoles([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]scope.getRoles().concat([CtBinaryOperatorImpl][CtLiteralImpl]"," + [CtInvocationImpl][CtVariableReadImpl]roles.trim()));
                    }
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]scope = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope();
                    [CtInvocationImpl][CtVariableReadImpl]scope.setId([CtVariableReadImpl]scopeId);
                    [CtInvocationImpl][CtVariableReadImpl]scope.setKey([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]2));
                    [CtInvocationImpl][CtVariableReadImpl]scope.setName([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]3));
                    [CtInvocationImpl][CtVariableReadImpl]scope.setDescription([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]4));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roles = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]5);
                    [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isNotEmpty([CtVariableReadImpl]roles)) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]scope.setRoles([CtInvocationImpl][CtVariableReadImpl]roles.trim());
                    }
                }
                [CtInvocationImpl][CtVariableReadImpl]scopeHashMap.put([CtVariableReadImpl]scopeId, [CtVariableReadImpl]scope);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to retrieve api scopes ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtInvocationImpl]populateScopeSet([CtVariableReadImpl]scopeHashMap);
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope> getScopesByScopeKeys([CtParameterImpl][CtTypeReferenceImpl]java.lang.String scopeKeys, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> inputScopeList = [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl][CtVariableReadImpl]scopeKeys.split([CtLiteralImpl]" "));
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.StringBuilder placeHolderBuilder = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.StringBuilder();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope> scopeHashMap = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtForImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]int i = [CtLiteralImpl]0; [CtBinaryOperatorImpl][CtVariableReadImpl]i < [CtInvocationImpl][CtVariableReadImpl]inputScopeList.size(); [CtUnaryOperatorImpl][CtVariableWriteImpl]i++) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]placeHolderBuilder.append([CtLiteralImpl]"?, ");
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String placeHolderStr = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]placeHolderBuilder.deleteCharAt([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]placeHolderBuilder.length() - [CtLiteralImpl]2).toString();
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SCOPES_BY_SCOPE_KEYS_PREFIX + [CtVariableReadImpl]placeHolderStr) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SCOPES_BY_SCOPE_KEYS_SUFFIX;
            [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]conn.getMetaData().getDriverName().contains([CtLiteralImpl]"Oracle")) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SCOPES_BY_SCOPE_KEYS_PREFIX_ORACLE + [CtVariableReadImpl]placeHolderStr) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SCOPES_BY_SCOPE_KEYS_SUFFIX;
            }
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtForImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]int i = [CtLiteralImpl]0; [CtBinaryOperatorImpl][CtVariableReadImpl]i < [CtInvocationImpl][CtVariableReadImpl]inputScopeList.size(); [CtUnaryOperatorImpl][CtVariableWriteImpl]i++) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtBinaryOperatorImpl][CtVariableReadImpl]i + [CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]inputScopeList.get([CtVariableReadImpl]i));
            }
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]inputScopeList.size() + [CtLiteralImpl]1, [CtVariableReadImpl]tenantId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope scope;
                [CtLocalVariableImpl][CtTypeReferenceImpl]int scopeId = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]1);
                [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]scopeHashMap.containsKey([CtVariableReadImpl]scopeId)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtCommentImpl]// scope already exists append roles.
                    [CtVariableWriteImpl]scope = [CtInvocationImpl][CtVariableReadImpl]scopeHashMap.get([CtVariableReadImpl]scopeId);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roles = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]6);
                    [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isNotEmpty([CtVariableReadImpl]roles)) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]scope.setRoles([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]scope.getRoles().concat([CtBinaryOperatorImpl][CtLiteralImpl]"," + [CtInvocationImpl][CtVariableReadImpl]roles.trim()));
                    }
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]scope = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope();
                    [CtInvocationImpl][CtVariableReadImpl]scope.setId([CtVariableReadImpl]scopeId);
                    [CtInvocationImpl][CtVariableReadImpl]scope.setKey([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]2));
                    [CtInvocationImpl][CtVariableReadImpl]scope.setName([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]3));
                    [CtInvocationImpl][CtVariableReadImpl]scope.setDescription([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]4));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roles = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]6);
                    [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isNotEmpty([CtVariableReadImpl]roles)) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]scope.setRoles([CtInvocationImpl][CtVariableReadImpl]roles.trim());
                    }
                }
                [CtInvocationImpl][CtVariableReadImpl]scopeHashMap.put([CtVariableReadImpl]scopeId, [CtVariableReadImpl]scope);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to retrieve api scopes ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtInvocationImpl]populateScopeSet([CtVariableReadImpl]scopeHashMap);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * update URI templates define for an API
     *
     * @param api
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void updateScopes([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.API api, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int apiId = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteResourceScopes = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_RESOURCE_SCOPE_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteScopes = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_SCOPE_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]apiId = [CtInvocationImpl]getAPIID([CtInvocationImpl][CtVariableReadImpl]api.getId(), [CtVariableReadImpl]connection);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiId == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtReturnImpl][CtCommentImpl]// application addition has failed
                return;
            }
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteResourceScopes);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteScopes);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                [CtInvocationImpl]handleException([CtLiteralImpl]"Error occurred while Rolling back changes done on Scopes updating", [CtVariableReadImpl]e1);
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while updating Scopes for API : " + [CtInvocationImpl][CtVariableReadImpl]api.getId(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
        [CtInvocationImpl]addScopes([CtInvocationImpl][CtVariableReadImpl]api.getUriTemplates(), [CtInvocationImpl][CtVariableReadImpl]api.getId(), [CtVariableReadImpl]apiId, [CtVariableReadImpl]tenantId);
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> getResourceToScopeMapping([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> map = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]int apiId;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_RESOURCE_TO_SCOPE_MAPPING_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]apiId = [CtInvocationImpl]getAPIID([CtVariableReadImpl]identifier, [CtVariableReadImpl]conn);
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]map.put([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]1), [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]2));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to retrieve api scopes ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]map;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> getScopeRolesOfApplication([CtParameterImpl][CtTypeReferenceImpl]java.lang.String consumerKey) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet1 = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet2 = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement getSubscribedApisAndProducts = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement getIncludedApisInProduct = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.Integer> apiIdSet = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQueryForGetSubscribedApis = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIBED_APIS_FROM_CONSUMER_KEY;
            [CtAssignmentImpl][CtVariableWriteImpl]getSubscribedApisAndProducts = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQueryForGetSubscribedApis);
            [CtInvocationImpl][CtVariableReadImpl]getSubscribedApisAndProducts.setString([CtLiteralImpl]1, [CtVariableReadImpl]consumerKey);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet1 = [CtInvocationImpl][CtVariableReadImpl]getSubscribedApisAndProducts.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet1.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]int apiId = [CtInvocationImpl][CtVariableReadImpl]resultSet1.getInt([CtLiteralImpl]"API_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getIncludedApisInProductQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_INCLUDED_APIS_IN_PRODUCT_SQL;
                [CtAssignmentImpl][CtVariableWriteImpl]getIncludedApisInProduct = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]getIncludedApisInProductQuery);
                [CtInvocationImpl][CtVariableReadImpl]getIncludedApisInProduct.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
                [CtAssignmentImpl][CtVariableWriteImpl]resultSet2 = [CtInvocationImpl][CtVariableReadImpl]getIncludedApisInProduct.executeQuery();
                [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet2.next()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int includedApiId = [CtInvocationImpl][CtVariableReadImpl]resultSet2.getInt([CtLiteralImpl]"API_ID");
                    [CtInvocationImpl][CtVariableReadImpl]apiIdSet.add([CtVariableReadImpl]includedApiId);
                } 
                [CtInvocationImpl][CtVariableReadImpl]apiIdSet.add([CtVariableReadImpl]apiId);
            } 
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> scopes = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>();
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]apiIdSet.isEmpty()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String apiIdList = [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.join([CtVariableReadImpl]apiIdSet, [CtLiteralImpl]", ");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SCOPE_ROLES_OF_APPLICATION_SQL + [CtVariableReadImpl]apiIdList) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.CLOSING_BRACE;
                [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]conn.getMetaData().getDriverName().contains([CtLiteralImpl]"Oracle")) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SCOPE_ROLES_OF_APPLICATION_ORACLE_SQL + [CtVariableReadImpl]apiIdList) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.CLOSING_BRACE;
                }
                [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
                [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
                [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                    [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]scopes.containsKey([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]1))) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtCommentImpl]// Role for the scope exists. Append the new role.
                        [CtTypeReferenceImpl]java.lang.String roles = [CtInvocationImpl][CtVariableReadImpl]scopes.get([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]1));
                        [CtOperatorAssignmentImpl][CtVariableWriteImpl]roles += [CtBinaryOperatorImpl][CtLiteralImpl]"," + [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]2);
                        [CtInvocationImpl][CtVariableReadImpl]scopes.put([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]1), [CtVariableReadImpl]roles);
                    } else [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]scopes.put([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]1), [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]2));
                    }
                } 
            }
            [CtReturnImpl]return [CtVariableReadImpl]scopes;
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to retrieve scopes of application" + [CtVariableReadImpl]consumerKey, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]getSubscribedApisAndProducts, [CtLiteralImpl]null, [CtVariableReadImpl]resultSet1);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]getIncludedApisInProduct, [CtLiteralImpl]null, [CtVariableReadImpl]resultSet2);
        }
        [CtReturnImpl]return [CtLiteralImpl]null;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Remove scope entries from DB, when delete APIs
     *
     * @param apiIdentifier
     * 		The {@link APIIdentifier} of the API
     */
    private [CtTypeReferenceImpl]void removeAPIScope([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiIdentifier) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope> scopes = [CtInvocationImpl]getAPIScopes([CtVariableReadImpl]apiIdentifier);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement deleteOauth2ResourceScopePrepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement deleteOauth2ScopePrepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int scopeId;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int apiId = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteAPIScopeQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_FROM_API_SCOPES_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteOauth2ScopeQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_FROM_OAUTH_SCOPE_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteOauth2ResourceScopeQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_FROM_OAUTH_RESOURCE_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteAPIScopeQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]scopes.isEmpty()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]deleteOauth2ResourceScopePrepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteOauth2ResourceScopeQuery);
                [CtAssignmentImpl][CtVariableWriteImpl]deleteOauth2ScopePrepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteOauth2ScopeQuery);
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope scope : [CtVariableReadImpl]scopes) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]scopeId = [CtInvocationImpl][CtVariableReadImpl]scope.getId();
                    [CtInvocationImpl][CtVariableReadImpl]deleteOauth2ResourceScopePrepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]scopeId);
                    [CtInvocationImpl][CtVariableReadImpl]deleteOauth2ResourceScopePrepStmt.addBatch();
                    [CtInvocationImpl][CtVariableReadImpl]deleteOauth2ScopePrepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]scopeId);
                    [CtInvocationImpl][CtVariableReadImpl]deleteOauth2ScopePrepStmt.addBatch();
                }
                [CtInvocationImpl][CtVariableReadImpl]deleteOauth2ResourceScopePrepStmt.executeBatch();
                [CtInvocationImpl][CtVariableReadImpl]deleteOauth2ScopePrepStmt.executeBatch();
            }
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Error while removing the scopes for the API: " + [CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getApiName()) + [CtLiteralImpl]" from the database", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]deleteOauth2ResourceScopePrepStmt, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]deleteOauth2ScopePrepStmt, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Delete a user subscription based on API_ID, APP_ID, TIER_ID
     *
     * @param apiId
     * 		- subscriber API ID
     * @param appId
     * 		- application ID used to subscribe
     * @throws java.sql.SQLException
     * 		- Letting the caller to handle the roll back
     */
    private [CtTypeReferenceImpl]void deleteSubscriptionByApiIDAndAppID([CtParameterImpl][CtTypeReferenceImpl]int apiId, [CtParameterImpl][CtTypeReferenceImpl]int appId, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn) throws [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_SUBSCRIPTION_BY_APPLICATION_ID_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]deleteQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]appId);
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Check the given api name is already available in the api table under given tenant domain
     *
     * @param apiName
     * 		candidate api name
     * @param tenantDomain
     * 		tenant domain name
     * @return true if the name is already available
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]boolean isApiNameExist([CtParameterImpl][CtTypeReferenceImpl]java.lang.String apiName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String tenantDomain) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String contextParam = [CtLiteralImpl]"/t/";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_NAME_NOT_MATCHING_CONTEXT_SQL;
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals([CtVariableReadImpl]tenantDomain)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_NAME_MATCHING_CONTEXT_SQL;
            [CtOperatorAssignmentImpl][CtVariableWriteImpl]contextParam += [CtBinaryOperatorImpl][CtVariableReadImpl]tenantDomain + [CtLiteralImpl]'/';
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]apiName);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtBinaryOperatorImpl][CtVariableReadImpl]contextParam + [CtLiteralImpl]'%');
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]int apiCount = [CtLiteralImpl]0;
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]resultSet != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]apiCount = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"API_COUNT");
                } 
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiCount > [CtLiteralImpl]0) [CtBlockImpl]{
                [CtReturnImpl]return [CtLiteralImpl]true;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to check api Name availability : " + [CtVariableReadImpl]apiName, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtLiteralImpl]false;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Check whether another API with a different letter case of the given api name is already available in the api
     * table under the given tenant domain
     *
     * @param apiName
     * 		candidate api name
     * @param tenantDomain
     * 		tenant domain name
     * @return true if a different letter case name is already available
     * @throws APIManagementException
     * 		If failed to check different letter case api name availability
     */
    public [CtTypeReferenceImpl]boolean isApiNameWithDifferentCaseExist([CtParameterImpl][CtTypeReferenceImpl]java.lang.String apiName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String tenantDomain) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String contextParam = [CtLiteralImpl]"/t/";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_NAME_DIFF_CASE_NOT_MATCHING_CONTEXT_SQL;
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals([CtVariableReadImpl]tenantDomain)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_NAME_DIFF_CASE_MATCHING_CONTEXT_SQL;
            [CtOperatorAssignmentImpl][CtVariableWriteImpl]contextParam += [CtBinaryOperatorImpl][CtVariableReadImpl]tenantDomain + [CtLiteralImpl]'/';
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]apiName);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtBinaryOperatorImpl][CtVariableReadImpl]contextParam + [CtLiteralImpl]'%');
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtVariableReadImpl]apiName);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]int apiCount = [CtLiteralImpl]0;
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]resultSet != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]apiCount = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"API_COUNT");
                } 
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiCount > [CtLiteralImpl]0) [CtBlockImpl]{
                [CtReturnImpl]return [CtLiteralImpl]true;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to check different letter case api name availability : " + [CtVariableReadImpl]apiName, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtLiteralImpl]false;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.String> getActiveTokensOfConsumerKey([CtParameterImpl][CtTypeReferenceImpl]java.lang.String consumerKey) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.String> tokens = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ACTIVE_TOKEN_OF_CONSUMER_KEY_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]consumerKey);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtAssignmentImpl][CtVariableWriteImpl]tokens = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<[CtTypeReferenceImpl]java.lang.String>();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]tokens.add([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.decryptToken([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"ACCESS_TOKEN")));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get active access tokens for consumerKey " + [CtVariableReadImpl]consumerKey, [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.core.util.CryptoException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Token decryption failed of an active access token of consumerKey " + [CtVariableReadImpl]consumerKey, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]tokens;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Check the given scope key is already available under given tenant
     *
     * @param scopeKey
     * 		candidate scope key
     * @param tenantId
     * 		tenant id
     * @return true if the scope key is already available
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]boolean isScopeKeyExist([CtParameterImpl][CtTypeReferenceImpl]java.lang.String scopeKey, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SCOPE_KEY_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]scopeKey);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]int scopeCount = [CtLiteralImpl]0;
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]resultSet != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]scopeCount = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"SCOPE_COUNT");
                } 
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]scopeCount > [CtLiteralImpl]0) [CtBlockImpl]{
                [CtReturnImpl]return [CtLiteralImpl]true;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to check Scope Key availability : " + [CtVariableReadImpl]scopeKey, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtLiteralImpl]false;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Check whether the given scope key is already assigned to another API than given under given tenant
     *
     * @param identifier
     * 		API Identifier
     * @param scopeKey
     * 		candidate scope key
     * @param tenantId
     * 		tenant id
     * @return true if the scope key is already available
     * @throws APIManagementException
     * 		if failed to check the context availability
     */
    public [CtTypeReferenceImpl]boolean isScopeKeyAssigned([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier identifier, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String scopeKey, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt2 = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet2 = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String apiScopeQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_SCOPE_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getApiQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_ID_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]apiScopeQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]scopeKey);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]resultSet != [CtLiteralImpl]null) && [CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]int apiID = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"API_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String provider = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"API_PROVIDER");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String apiName = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"API_NAME");
                [CtAssignmentImpl][CtVariableWriteImpl]prepStmt2 = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getApiQuery);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt2.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName()));
                [CtInvocationImpl][CtVariableReadImpl]prepStmt2.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]identifier.getApiName());
                [CtInvocationImpl][CtVariableReadImpl]prepStmt2.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]identifier.getVersion());
                [CtAssignmentImpl][CtVariableWriteImpl]resultSet2 = [CtInvocationImpl][CtVariableReadImpl]prepStmt2.executeQuery();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]resultSet2 != [CtLiteralImpl]null) && [CtInvocationImpl][CtVariableReadImpl]resultSet2.next()) [CtBlockImpl]{
                    [CtIfImpl][CtCommentImpl]// If the API ID is different from the one being saved
                    if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiID != [CtInvocationImpl][CtVariableReadImpl]resultSet2.getInt([CtLiteralImpl]"API_ID")) [CtBlockImpl]{
                        [CtIfImpl][CtCommentImpl]// Check if the provider name and api name is same.
                        if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]provider.equals([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName())) && [CtInvocationImpl][CtVariableReadImpl]apiName.equals([CtInvocationImpl][CtVariableReadImpl]identifier.getApiName())) [CtBlockImpl]{
                            [CtReturnImpl][CtCommentImpl]// Return false since this means we're attaching the scope to another version of the API.
                            return [CtLiteralImpl]false;
                        }
                        [CtReturnImpl]return [CtLiteralImpl]true;
                    } else [CtBlockImpl]{
                        [CtReturnImpl]return [CtLiteralImpl]false;
                    }
                } else [CtBlockImpl]{
                    [CtReturnImpl][CtCommentImpl]// If the API which is being saved is not available in the DB, but if the scope is key already
                    [CtCommentImpl]// available in the DB, return true since this means the scope is already assigned to another API.
                    return [CtLiteralImpl]true;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to check Scope Key availability : " + [CtVariableReadImpl]scopeKey, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt2, [CtLiteralImpl]null, [CtVariableReadImpl]resultSet2);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtLiteralImpl]false;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]boolean isDuplicateContextTemplate([CtParameterImpl][CtTypeReferenceImpl]java.lang.String contextTemplate) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_CONTEXT_TEMPLATE_COUNT_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]contextTemplate);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]int count = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"CTX_COUNT");
                [CtReturnImpl]return [CtBinaryOperatorImpl][CtVariableReadImpl]count > [CtLiteralImpl]0;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to count contexts which match " + [CtVariableReadImpl]contextTemplate, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtLiteralImpl]false;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * retrieve list of API names which matches given context
     *
     * @param contextTemplate
     * 		context template
     * @return list of API names
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> getAPINamesMatchingContext([CtParameterImpl][CtTypeReferenceImpl]java.lang.String contextTemplate) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> nameList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_NAMES_MATCHES_CONTEXT;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]contextTemplate);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]nameList.add([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"API_NAME"));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get API names matches context " + [CtVariableReadImpl]contextTemplate, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]nameList;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param consumerKey
     * @return  */
    public [CtTypeReferenceImpl]boolean isMappingExistsforConsumerKey([CtParameterImpl][CtTypeReferenceImpl]java.lang.String consumerKey) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_MAPPING_FOR_CONSUMER_KEY_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]consumerKey);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl][CtCommentImpl]// We only expect one result.
            if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String applicationId = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"APPLICATION_ID");
                [CtReturnImpl]return [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]applicationId != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]applicationId.isEmpty());
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get Application ID by consumerKey ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtLiteralImpl]false;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param applicationId
     * @param keyType
     * @return  */
    public [CtTypeReferenceImpl]java.lang.String getConsumerkeyByApplicationIdAndKeyType([CtParameterImpl][CtTypeReferenceImpl]java.lang.String applicationId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String keyType) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String consumerKey = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_CONSUMER_KEY_BY_APPLICATION_AND_KEY_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]java.lang.Integer.parseInt([CtVariableReadImpl]applicationId));
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]keyType);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]consumerKey = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"CONSUMER_KEY");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to get consumer key by applicationId " + [CtVariableReadImpl]applicationId) + [CtLiteralImpl]"and keyType ") + [CtVariableReadImpl]keyType, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]consumerKey;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get external APIStores details which are stored in database
     *
     * @param apiIdentifier
     * 		API Identifier
     * @throws APIManagementException
     * 		if failed to get external APIStores
     */
    public [CtTypeReferenceImpl]java.lang.String getLastPublishedAPIVersionFromAPIStore([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiIdentifier, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String storeName) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String version = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_LAST_PUBLISHED_API_VERSION_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getProviderName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getApiName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtVariableReadImpl]storeName);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]version = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_VERSION");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error while getting External APIStore details from the database for  the API : " + [CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getApiName()) + [CtLiteralImpl]'-') + [CtInvocationImpl][CtVariableReadImpl]apiIdentifier.getVersion(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]version;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.lang.String getScopeString([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> scopes) [CtBlockImpl]{
        [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.join([CtVariableReadImpl]scopes, [CtLiteralImpl]" ");
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Find all active access tokens of a given user.
     *
     * @param username
     * 		- Username of the user
     * @return - The set of active access tokens of the user.
     */
    public [CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.String> getActiveAccessTokensOfUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String username) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.String> tokens = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String accessTokenStoreTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.ACCESS_TOKEN_STORE_TABLE;
        [CtAssignmentImpl][CtVariableWriteImpl]accessTokenStoreTable = [CtInvocationImpl]getAccessTokenStoreTableNameOfUserId([CtVariableReadImpl]username, [CtVariableReadImpl]accessTokenStoreTable);
        [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.identity.core.util.IdentityTenantUtil.getTenantIdOfUser([CtVariableReadImpl]username);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userStoreDomain = [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.identity.core.util.IdentityUtil.extractDomainFromName([CtVariableReadImpl]username).toUpperCase();
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtVariableReadImpl]userStoreDomain)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userStoreDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.identity.core.util.IdentityUtil.getPrimaryDomainName();
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtCommentImpl]// IdentityUtil doesn't have a function to remove the domain name from the username. Using the UserCoreUtil.
            [CtVariableWriteImpl]username = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]username);
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ACTIVE_TOKENS_OF_USER_PREFIX + [CtVariableReadImpl]accessTokenStoreTable) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ACTIVE_TOKENS_OF_USER_SUFFIX;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantAwareUsername([CtVariableReadImpl]username));
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]userStoreDomain.toLowerCase());
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtAssignmentImpl][CtVariableWriteImpl]tokens = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<[CtTypeReferenceImpl]java.lang.String>();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]tokens.add([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.decryptToken([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"ACCESS_TOKEN")));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get active access tokens of user " + [CtVariableReadImpl]username, [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.core.util.CryptoException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Token decryption failed of an active access token of user " + [CtVariableReadImpl]username, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]tokens;
    }

    [CtMethodImpl][CtCommentImpl]// public TokenGenerator getTokenGenerator() {
    [CtCommentImpl]// return tokenGenerator;
    [CtCommentImpl]// }
    private [CtTypeReferenceImpl]java.lang.String getAccessTokenStoreTableNameOfUserId([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String accessTokenStoreTable) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.checkAccessTokenPartitioningEnabled() && [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.checkUserNameAssertionEnabled()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getAccessTokenStoreTableFromUserId([CtVariableReadImpl]userId);
        }
        [CtReturnImpl]return [CtVariableReadImpl]accessTokenStoreTable;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.lang.String getAccessTokenStoreTableFromAccessToken([CtParameterImpl][CtTypeReferenceImpl]java.lang.String accessToken, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String accessTokenStoreTable) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.checkAccessTokenPartitioningEnabled() && [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.checkUserNameAssertionEnabled()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getAccessTokenStoreTableFromAccessToken([CtVariableReadImpl]accessToken);
        }
        [CtReturnImpl]return [CtVariableReadImpl]accessTokenStoreTable;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method will fetch all alerts type that is available in AM_ALERT_TYPES.
     *
     * @param stakeHolder
     * 		the name of the stakeholder. whether its "subscriber", "publisher" or
     * 		"admin-dashboard"
     * @return List of alert types
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]java.lang.String> getAllAlertTypesByStakeHolder([CtParameterImpl][CtTypeReferenceImpl]java.lang.String stakeHolder) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]java.lang.String> map = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.Integer, [CtTypeReferenceImpl]java.lang.String>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery;
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]stakeHolder.equals([CtLiteralImpl]"admin-dashboard")) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ALL_ALERT_TYPES_FOR_ADMIN;
                [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ALL_ALERT_TYPES;
                [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]stakeHolder);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]map.put([CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]1), [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]2));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to retrieve alert types ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]map;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param userName
     * 		user name with tenant domain ex: admin@carbon.super
     * @param stakeHolder
     * 		value "p" for publisher value "s" for subscriber value "a" for admin
     * @return map of saved values of alert types.
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.Integer> getSavedAlertTypesIdsByUserNameAndStakeHolder([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String stakeHolder) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.Integer> list = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.Integer>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery;
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SAVED_ALERT_TYPES_BY_USERNAME;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]userName);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]stakeHolder);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]list.add([CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]1));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to retrieve saved alert types by user name. ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]list;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method will retrieve saved emails list by user name and stakeholder.
     *
     * @param userName
     * 		user name.
     * @param stakeHolder
     * 		"publisher" , "subscriber" or "admin-dashboard"
     * @return  * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> retrieveSavedEmailList([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String stakeHolder) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> list = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery;
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SAVED_ALERT_EMAILS;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]userName);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]stakeHolder);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]list.add([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]1));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to retrieve saved alert types by user name. ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]list;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method will delete all email alert subscriptions details from tables
     *
     * @param userName
     * @param agent
     * 		whether its publisher or store or admin dash board.
     */
    public [CtTypeReferenceImpl]void unSubscribeAlerts([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String agent) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String alertTypesQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_ALERT_TYPES_VALUES;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteAlertTypesByUserNameAndStakeHolderQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.DELETE_ALERTTYPES_BY_USERNAME_AND_STAKE_HOLDER;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteAlertTypesByUserNameAndStakeHolderQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]userName);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]agent);
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getEmailListIdByUserNameAndStakeHolderQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_EMAILLISTID_BY_USERNAME_AND_STAKEHOLDER;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getEmailListIdByUserNameAndStakeHolderQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]userName);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]agent);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]int emailListId = [CtLiteralImpl]0;
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]emailListId = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]1);
            } 
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]emailListId != [CtLiteralImpl]0) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteEmailListDetailsByEmailListId = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.DELETE_EMAILLIST_BY_EMAIL_LIST_ID;
                [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteEmailListDetailsByEmailListId);
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]emailListId);
                [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            }
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to delete alert email data.", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param userName
     * 		User name.
     * @param emailList
     * 		Comma separated email list.
     * @param alertTypesIDList
     * 		Comma separated alert types list.
     * @param stakeHolder
     * 		if pram value = p we assume those changes from publisher if param value = s those data belongs to
     * 		subscriber.
     * @throws APIManagementException
     * @throws SQLException
     */
    public [CtTypeReferenceImpl]void addAlertTypesConfigInfo([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String emailList, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String alertTypesIDList, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String stakeHolder) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String alertTypesQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_ALERT_TYPES_VALUES;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteAlertTypesByUserNameAndStakeHolderQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.DELETE_ALERTTYPES_BY_USERNAME_AND_STAKE_HOLDER;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteAlertTypesByUserNameAndStakeHolderQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]userName);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]stakeHolder);
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtVariableReadImpl]alertTypesIDList)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> alertTypeIdList = [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl][CtVariableReadImpl]alertTypesIDList.split([CtLiteralImpl]","));
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String alertTypeId : [CtVariableReadImpl]alertTypeIdList) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement psAlertTypeId = [CtLiteralImpl]null;
                    [CtTryImpl]try [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]psAlertTypeId = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]alertTypesQuery);
                        [CtInvocationImpl][CtVariableReadImpl]psAlertTypeId.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]java.lang.Integer.parseInt([CtVariableReadImpl]alertTypeId));
                        [CtInvocationImpl][CtVariableReadImpl]psAlertTypeId.setString([CtLiteralImpl]2, [CtVariableReadImpl]userName);
                        [CtInvocationImpl][CtVariableReadImpl]psAlertTypeId.setString([CtLiteralImpl]3, [CtVariableReadImpl]stakeHolder);
                        [CtInvocationImpl][CtVariableReadImpl]psAlertTypeId.execute();
                    }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
                        [CtInvocationImpl]handleException([CtLiteralImpl]"Error while adding alert types", [CtVariableReadImpl]e);
                    } finally [CtBlockImpl]{
                        [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]psAlertTypeId, [CtLiteralImpl]null, [CtLiteralImpl]null);
                    }
                }
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String getEmailListIdByUserNameAndStakeHolderQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_EMAILLISTID_BY_USERNAME_AND_STAKEHOLDER;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]getEmailListIdByUserNameAndStakeHolderQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]userName);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]stakeHolder);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]int emailListId = [CtLiteralImpl]0;
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]emailListId = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]1);
            } 
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]emailListId != [CtLiteralImpl]0) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteEmailListDetailsByEmailListId = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.DELETE_EMAILLIST_BY_EMAIL_LIST_ID;
                [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteEmailListDetailsByEmailListId);
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]emailListId);
                [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtVariableReadImpl]emailList)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> extractedEmailList = [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl][CtVariableReadImpl]emailList.split([CtLiteralImpl]","));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String saveEmailListDetailsQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.SAVE_EMAIL_LIST_DETAILS_QUERY;
                    [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String email : [CtVariableReadImpl]extractedEmailList) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement extractedEmailListPs = [CtLiteralImpl]null;
                        [CtTryImpl]try [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]extractedEmailListPs = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]saveEmailListDetailsQuery);
                            [CtInvocationImpl][CtVariableReadImpl]extractedEmailListPs.setInt([CtLiteralImpl]1, [CtVariableReadImpl]emailListId);
                            [CtInvocationImpl][CtVariableReadImpl]extractedEmailListPs.setString([CtLiteralImpl]2, [CtVariableReadImpl]email);
                            [CtInvocationImpl][CtVariableReadImpl]extractedEmailListPs.execute();
                        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
                            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while save email list.", [CtVariableReadImpl]e);
                        } finally [CtBlockImpl]{
                            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]extractedEmailListPs, [CtLiteralImpl]null, [CtLiteralImpl]null);
                        }
                    }
                }
            } else [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String emailListSaveQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_ALERT_EMAIL_LIST;
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String dbProductName = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]connection.getMetaData().getDatabaseProductName();
                [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]emailListSaveQuery, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.DBUtils.getConvertedAutoGeneratedColumnName([CtVariableReadImpl]dbProductName, [CtLiteralImpl]"EMAIL_LIST_ID") });
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]userName);
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]stakeHolder);
                [CtInvocationImpl][CtVariableReadImpl]ps.execute();
                [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.getGeneratedKeys();
                [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int generatedEmailIdList = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]1);
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtVariableReadImpl]emailList)) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> extractedEmailList = [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl][CtVariableReadImpl]emailList.split([CtLiteralImpl]","));
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String saveEmailListDetailsQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.SAVE_EMAIL_LIST_DETAILS_QUERY;
                        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String email : [CtVariableReadImpl]extractedEmailList) [CtBlockImpl]{
                            [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement elseExtractedEmailListPS = [CtLiteralImpl]null;
                            [CtTryImpl]try [CtBlockImpl]{
                                [CtAssignmentImpl][CtVariableWriteImpl]elseExtractedEmailListPS = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]saveEmailListDetailsQuery);
                                [CtInvocationImpl][CtVariableReadImpl]elseExtractedEmailListPS.setInt([CtLiteralImpl]1, [CtVariableReadImpl]generatedEmailIdList);
                                [CtInvocationImpl][CtVariableReadImpl]elseExtractedEmailListPS.setString([CtLiteralImpl]2, [CtVariableReadImpl]email);
                                [CtInvocationImpl][CtVariableReadImpl]elseExtractedEmailListPS.execute();
                            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
                                [CtInvocationImpl]handleException([CtLiteralImpl]"Error while save email list.", [CtVariableReadImpl]e);
                            } finally [CtBlockImpl]{
                                [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]elseExtractedEmailListPS, [CtLiteralImpl]null, [CtLiteralImpl]null);
                            }
                        }
                    }
                }
            }
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to save alert preferences", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add a Application level throttling policy to database
     *
     * @param policy
     * 		policy object defining the throttle policy
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void addApplicationPolicy([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.ApplicationPolicy policy) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement policyStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean hasCustomAttrib = [CtLiteralImpl]false;
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]policy.getCustomAttributes() != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]hasCustomAttrib = [CtLiteralImpl]true;
            }
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String addQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.INSERT_APPLICATION_POLICY_SQL;
            [CtIfImpl]if ([CtVariableReadImpl]hasCustomAttrib) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]addQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.INSERT_APPLICATION_POLICY_WITH_CUSTOM_ATTRIB_SQL;
            }
            [CtAssignmentImpl][CtVariableWriteImpl]policyStatement = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]addQuery);
            [CtInvocationImpl]setCommonParametersForPolicy([CtVariableReadImpl]policyStatement, [CtVariableReadImpl]policy);
            [CtIfImpl]if ([CtVariableReadImpl]hasCustomAttrib) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]policyStatement.setBlob([CtLiteralImpl]12, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.io.ByteArrayInputStream([CtInvocationImpl][CtVariableReadImpl]policy.getCustomAttributes()));
            }
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl][CtCommentImpl]// Rollback failed. Exception will be thrown later for upper exception
                    [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to rollback the add Application Policy: " + [CtInvocationImpl][CtVariableReadImpl]policy.toString(), [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to add Application Policy: " + [CtVariableReadImpl]policy, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]policyStatement, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add a Subscription level throttling policy to database
     *
     * @param policy
     * 		policy object defining the throttle policy
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void addSubscriptionPolicy([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy policy) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement policyStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean hasCustomAttrib = [CtLiteralImpl]false;
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]policy.getCustomAttributes() != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]hasCustomAttrib = [CtLiteralImpl]true;
            }
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String addQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.INSERT_SUBSCRIPTION_POLICY_SQL;
            [CtIfImpl]if ([CtVariableReadImpl]hasCustomAttrib) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]addQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.INSERT_SUBSCRIPTION_POLICY_WITH_CUSTOM_ATTRIB_SQL;
            }
            [CtAssignmentImpl][CtVariableWriteImpl]policyStatement = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]addQuery);
            [CtInvocationImpl]setCommonParametersForPolicy([CtVariableReadImpl]policyStatement, [CtVariableReadImpl]policy);
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setInt([CtLiteralImpl]12, [CtInvocationImpl][CtVariableReadImpl]policy.getRateLimitCount());
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]13, [CtInvocationImpl][CtVariableReadImpl]policy.getRateLimitTimeUnit());
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setBoolean([CtLiteralImpl]14, [CtInvocationImpl][CtVariableReadImpl]policy.isStopOnQuotaReach());
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]15, [CtInvocationImpl][CtVariableReadImpl]policy.getBillingPlan());
            [CtIfImpl]if ([CtVariableReadImpl]hasCustomAttrib) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]policyStatement.setBytes([CtLiteralImpl]16, [CtInvocationImpl][CtVariableReadImpl]policy.getCustomAttributes());
                [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]17, [CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlan());
                [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]18, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.FIXED_PRICE));
                [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]19, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.BILLING_CYCLE));
                [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]20, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.PRICE_PER_REQUEST));
                [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]21, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.CURRENCY));
            } else [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]16, [CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlan());
                [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]17, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.FIXED_PRICE));
                [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]18, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.BILLING_CYCLE));
                [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]19, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.PRICE_PER_REQUEST));
                [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]20, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.CURRENCY));
            }
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl][CtCommentImpl]// Rollback failed. Exception will be thrown later for upper exception
                    [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to rollback the add Subscription Policy: " + [CtInvocationImpl][CtVariableReadImpl]policy.toString(), [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to add Subscription Policy: " + [CtVariableReadImpl]policy, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]policyStatement, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Wrapper method for {@link #addAPIPolicy(APIPolicy, Connection)} to add
     * API Policy without managing the database connection manually.
     *
     * @param policy
     * 		policy object to add
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.APIPolicy addAPIPolicy([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.APIPolicy policy) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtInvocationImpl]addAPIPolicy([CtVariableReadImpl]policy, [CtVariableReadImpl]connection);
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl][CtCommentImpl]// Rollback failed. Exception will be thrown later for upper exception
                    [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to rollback the add Api Policy: " + [CtInvocationImpl][CtVariableReadImpl]policy.toString(), [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to add Api Policy: " + [CtVariableReadImpl]policy, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtLiteralImpl]null, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
        [CtReturnImpl]return [CtVariableReadImpl]policy;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add a API level throttling policy to database.
     * <p>
     * If valid policy Id (not -1) is present in the <code>policy</code> object,
     * policy will be inserted with that policy Id.
     * Otherwise policy Id will be auto incremented.
     * </p>
     *
     * @param policy
     * 		policy object defining the throttle policy
     * @throws SQLException
     */
    private [CtTypeReferenceImpl]void addAPIPolicy([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.APIPolicy policy, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn) throws [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement policyStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String addQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.INSERT_API_POLICY_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int policyId;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String dbProductName = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]conn.getMetaData().getDatabaseProductName();
            [CtAssignmentImpl][CtVariableWriteImpl]policyStatement = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]addQuery, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.DBUtils.getConvertedAutoGeneratedColumnName([CtVariableReadImpl]dbProductName, [CtLiteralImpl]"POLICY_ID") });
            [CtInvocationImpl]setCommonParametersForPolicy([CtVariableReadImpl]policyStatement, [CtVariableReadImpl]policy);
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]12, [CtInvocationImpl][CtVariableReadImpl]policy.getUserLevel());
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.executeUpdate();
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]policyStatement.getGeneratedKeys();[CtCommentImpl]// Get the inserted POLICY_ID (auto incremented value)

            [CtIfImpl][CtCommentImpl]// Returns only single row
            if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtCommentImpl]/* H2 doesn't return generated keys when key is provided (not generated).
                Therefore policyId should be policy parameter's policyId when it is provided.
                 */
                [CtVariableWriteImpl]policyId = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]1);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Pipeline> pipelines = [CtInvocationImpl][CtVariableReadImpl]policy.getPipelines();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]pipelines != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Pipeline pipeline : [CtVariableReadImpl]pipelines) [CtBlockImpl]{
                        [CtInvocationImpl][CtCommentImpl]// add each pipeline data to AM_CONDITION_GROUP table
                        addPipeline([CtVariableReadImpl]pipeline, [CtVariableReadImpl]policyId, [CtVariableReadImpl]conn);
                    }
                }
            }
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]policyStatement, [CtLiteralImpl]null, [CtVariableReadImpl]resultSet);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Update a API level throttling policy to database.
     * <p>
     * policy will be inserted with that policy Id.
     * </p>
     *
     * @param policy
     * 		policy object defining the throttle policy
     * @throws SQLException
     */
    private [CtTypeReferenceImpl]void updateAPIPolicy([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.APIPolicy policy, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn) throws [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement policyStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String addQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.INSERT_API_POLICY_WITH_ID_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int policyId = [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyId();
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Statement st = [CtInvocationImpl][CtVariableReadImpl]conn.createStatement();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String driverName = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]conn.getMetaData().getDriverName();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]driverName.contains([CtLiteralImpl]"MS SQL") || [CtInvocationImpl][CtVariableReadImpl]driverName.contains([CtLiteralImpl]"Microsoft")) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]st.executeUpdate([CtLiteralImpl]"SET IDENTITY_INSERT AM_API_THROTTLE_POLICY ON");
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String dbProductName = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]conn.getMetaData().getDatabaseProductName();
            [CtAssignmentImpl][CtVariableWriteImpl]policyStatement = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]addQuery, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.DBUtils.getConvertedAutoGeneratedColumnName([CtVariableReadImpl]dbProductName, [CtLiteralImpl]"POLICY_ID") });
            [CtInvocationImpl]setCommonParametersForPolicy([CtVariableReadImpl]policyStatement, [CtVariableReadImpl]policy);
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]12, [CtInvocationImpl][CtVariableReadImpl]policy.getUserLevel());
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setBoolean([CtLiteralImpl]10, [CtLiteralImpl]true);
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setInt([CtLiteralImpl]13, [CtVariableReadImpl]policyId);
            [CtLocalVariableImpl][CtTypeReferenceImpl]int updatedRawCount = [CtInvocationImpl][CtVariableReadImpl]policyStatement.executeUpdate();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]driverName.contains([CtLiteralImpl]"MS SQL") || [CtInvocationImpl][CtVariableReadImpl]driverName.contains([CtLiteralImpl]"Microsoft")) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]st.executeUpdate([CtLiteralImpl]"SET IDENTITY_INSERT AM_API_THROTTLE_POLICY OFF");
            }
            [CtIfImpl][CtCommentImpl]// Returns only single row
            if ([CtBinaryOperatorImpl][CtVariableReadImpl]updatedRawCount > [CtLiteralImpl]0) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Pipeline> pipelines = [CtInvocationImpl][CtVariableReadImpl]policy.getPipelines();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]pipelines != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Pipeline pipeline : [CtVariableReadImpl]pipelines) [CtBlockImpl]{
                        [CtInvocationImpl][CtCommentImpl]// add each pipeline data to AM_CONDITION_GROUP table
                        addPipeline([CtVariableReadImpl]pipeline, [CtVariableReadImpl]policyId, [CtVariableReadImpl]conn);
                    }
                }
            }
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]policyStatement, [CtLiteralImpl]null, [CtVariableReadImpl]resultSet);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add throttling policy pipeline to database
     *
     * @param pipeline
     * 		condition pipeline
     * @param policyID
     * 		id of the policy to add pipeline
     * @param conn
     * 		database connection. This should be provided inorder to rollback transaction
     * @throws SQLException
     */
    private [CtTypeReferenceImpl]void addPipeline([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Pipeline pipeline, [CtParameterImpl][CtTypeReferenceImpl]int policyID, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn) throws [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement conditionStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlAddQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.INSERT_CONDITION_GROUP_SQL;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Condition> conditionList = [CtInvocationImpl][CtVariableReadImpl]pipeline.getConditions();
            [CtLocalVariableImpl][CtCommentImpl]// Add data to the AM_CONDITION table
            [CtTypeReferenceImpl]java.lang.String dbProductName = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]conn.getMetaData().getDatabaseProductName();
            [CtAssignmentImpl][CtVariableWriteImpl]conditionStatement = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlAddQuery, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.DBUtils.getConvertedAutoGeneratedColumnName([CtVariableReadImpl]dbProductName, [CtLiteralImpl]"CONDITION_GROUP_ID") });
            [CtInvocationImpl][CtVariableReadImpl]conditionStatement.setInt([CtLiteralImpl]1, [CtVariableReadImpl]policyID);
            [CtInvocationImpl][CtVariableReadImpl]conditionStatement.setString([CtLiteralImpl]2, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]pipeline.getQuotaPolicy().getType());
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.REQUEST_COUNT_TYPE.equals([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]pipeline.getQuotaPolicy().getType())) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]conditionStatement.setLong([CtLiteralImpl]3, [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.RequestCountLimit) ([CtInvocationImpl][CtVariableReadImpl]pipeline.getQuotaPolicy().getLimit())).getRequestCount());
                [CtInvocationImpl][CtVariableReadImpl]conditionStatement.setString([CtLiteralImpl]4, [CtLiteralImpl]null);
            } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.BANDWIDTH_TYPE.equals([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]pipeline.getQuotaPolicy().getType())) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.BandwidthLimit limit = [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.BandwidthLimit) ([CtInvocationImpl][CtVariableReadImpl]pipeline.getQuotaPolicy().getLimit()));
                [CtInvocationImpl][CtVariableReadImpl]conditionStatement.setLong([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]limit.getDataAmount());
                [CtInvocationImpl][CtVariableReadImpl]conditionStatement.setString([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]limit.getDataUnit());
            }
            [CtInvocationImpl][CtVariableReadImpl]conditionStatement.setLong([CtLiteralImpl]5, [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]pipeline.getQuotaPolicy().getLimit().getUnitTime());
            [CtInvocationImpl][CtVariableReadImpl]conditionStatement.setString([CtLiteralImpl]6, [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]pipeline.getQuotaPolicy().getLimit().getTimeUnit());
            [CtInvocationImpl][CtVariableReadImpl]conditionStatement.setString([CtLiteralImpl]7, [CtInvocationImpl][CtVariableReadImpl]pipeline.getDescription());
            [CtInvocationImpl][CtVariableReadImpl]conditionStatement.executeUpdate();
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]conditionStatement.getGeneratedKeys();
            [CtIfImpl][CtCommentImpl]// Add Throttling parameters which have multiple entries
            if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]rs != [CtLiteralImpl]null) && [CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]int pipelineId = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]1);[CtCommentImpl]// Get the inserted

                [CtInvocationImpl][CtCommentImpl]// CONDITION_GROUP_ID (auto
                [CtCommentImpl]// incremented value)
                [CtVariableReadImpl]pipeline.setId([CtVariableReadImpl]pipelineId);
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Condition condition : [CtVariableReadImpl]conditionList) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]condition == [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtContinueImpl]continue;
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String type = [CtInvocationImpl][CtVariableReadImpl]condition.getType();
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.IP_RANGE_TYPE.equals([CtVariableReadImpl]type) || [CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.IP_SPECIFIC_TYPE.equals([CtVariableReadImpl]type)) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.IPCondition ipCondition = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.IPCondition) (condition));
                        [CtInvocationImpl]addIPCondition([CtVariableReadImpl]ipCondition, [CtVariableReadImpl]pipelineId, [CtVariableReadImpl]conn);
                    }
                    [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.HEADER_TYPE.equals([CtVariableReadImpl]type)) [CtBlockImpl]{
                        [CtInvocationImpl]addHeaderCondition([CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.HeaderCondition) (condition)), [CtVariableReadImpl]pipelineId, [CtVariableReadImpl]conn);
                    } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.QUERY_PARAMETER_TYPE.equals([CtVariableReadImpl]type)) [CtBlockImpl]{
                        [CtInvocationImpl]addQueryParameterCondition([CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.QueryParameterCondition) (condition)), [CtVariableReadImpl]pipelineId, [CtVariableReadImpl]conn);
                    } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.JWT_CLAIMS_TYPE.equals([CtVariableReadImpl]type)) [CtBlockImpl]{
                        [CtInvocationImpl]addJWTClaimsCondition([CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.JWTClaimsCondition) (condition)), [CtVariableReadImpl]pipelineId, [CtVariableReadImpl]conn);
                    }
                }
            }
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]conditionStatement, [CtLiteralImpl]null, [CtVariableReadImpl]rs);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add HEADER throttling condition to AM_HEADER_FIELD_CONDITION table
     *
     * @param headerCondition
     * 		{@link HeaderCondition} with header fieled and value
     * @param pipelineId
     * 		id of the pipeline which this condition belongs to
     * @param conn
     * 		database connection. This should be provided inorder to rollback transaction
     * @throws SQLException
     */
    private [CtTypeReferenceImpl]void addHeaderCondition([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.HeaderCondition headerCondition, [CtParameterImpl][CtTypeReferenceImpl]int pipelineId, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn) throws [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement psHeaderCondition = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.INSERT_HEADER_FIELD_CONDITION_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]psHeaderCondition = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]psHeaderCondition.setInt([CtLiteralImpl]1, [CtVariableReadImpl]pipelineId);
            [CtInvocationImpl][CtVariableReadImpl]psHeaderCondition.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]headerCondition.getHeaderName());
            [CtInvocationImpl][CtVariableReadImpl]psHeaderCondition.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]headerCondition.getValue());
            [CtInvocationImpl][CtVariableReadImpl]psHeaderCondition.setBoolean([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]headerCondition.isInvertCondition());
            [CtInvocationImpl][CtVariableReadImpl]psHeaderCondition.executeUpdate();
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]psHeaderCondition, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add QUERY throttling condition to AM_QUERY_PARAMETER_CONDITION table
     *
     * @param queryParameterCondition
     * 		{@link QueryParameterCondition} with parameter name and value
     * @param pipelineId
     * 		id of the pipeline which this condition belongs to
     * @param conn
     * 		database connection. This should be provided inorder to rollback transaction
     * @throws SQLException
     */
    private [CtTypeReferenceImpl]void addQueryParameterCondition([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.QueryParameterCondition queryParameterCondition, [CtParameterImpl][CtTypeReferenceImpl]int pipelineId, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn) throws [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement psQueryParameterCondition = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.INSERT_QUERY_PARAMETER_CONDITION_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]psQueryParameterCondition = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]psQueryParameterCondition.setInt([CtLiteralImpl]1, [CtVariableReadImpl]pipelineId);
            [CtInvocationImpl][CtVariableReadImpl]psQueryParameterCondition.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]queryParameterCondition.getParameter());
            [CtInvocationImpl][CtVariableReadImpl]psQueryParameterCondition.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]queryParameterCondition.getValue());
            [CtInvocationImpl][CtVariableReadImpl]psQueryParameterCondition.setBoolean([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]queryParameterCondition.isInvertCondition());
            [CtInvocationImpl][CtVariableReadImpl]psQueryParameterCondition.executeUpdate();
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]psQueryParameterCondition, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void addIPCondition([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.IPCondition ipCondition, [CtParameterImpl][CtTypeReferenceImpl]int pipelineId, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn) throws [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statementIPCondition = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.INSERT_IP_CONDITION_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]statementIPCondition = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String startingIP = [CtInvocationImpl][CtVariableReadImpl]ipCondition.getStartingIP();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String endingIP = [CtInvocationImpl][CtVariableReadImpl]ipCondition.getEndingIP();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String specificIP = [CtInvocationImpl][CtVariableReadImpl]ipCondition.getSpecificIP();
            [CtInvocationImpl][CtVariableReadImpl]statementIPCondition.setString([CtLiteralImpl]1, [CtVariableReadImpl]startingIP);
            [CtInvocationImpl][CtVariableReadImpl]statementIPCondition.setString([CtLiteralImpl]2, [CtVariableReadImpl]endingIP);
            [CtInvocationImpl][CtVariableReadImpl]statementIPCondition.setString([CtLiteralImpl]3, [CtVariableReadImpl]specificIP);
            [CtInvocationImpl][CtVariableReadImpl]statementIPCondition.setBoolean([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]ipCondition.isInvertCondition());
            [CtInvocationImpl][CtVariableReadImpl]statementIPCondition.setInt([CtLiteralImpl]5, [CtVariableReadImpl]pipelineId);
            [CtInvocationImpl][CtVariableReadImpl]statementIPCondition.executeUpdate();
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]statementIPCondition, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add JWTCLAIMS throttling condition to AM_JWT_CLAIM_CONDITION table
     *
     * @param jwtClaimsCondition
     * 		{@link JWTClaimsCondition} with claim url and claim attribute
     * @param pipelineId
     * 		id of the pipeline which this condition belongs to
     * @param conn
     * 		database connection. This should be provided inorder to rollback transaction
     * @throws SQLException
     */
    private [CtTypeReferenceImpl]void addJWTClaimsCondition([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.JWTClaimsCondition jwtClaimsCondition, [CtParameterImpl][CtTypeReferenceImpl]int pipelineId, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn) throws [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement psJWTClaimsCondition = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.INSERT_JWT_CLAIM_CONDITION_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]psJWTClaimsCondition = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]psJWTClaimsCondition.setInt([CtLiteralImpl]1, [CtVariableReadImpl]pipelineId);
            [CtInvocationImpl][CtVariableReadImpl]psJWTClaimsCondition.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]jwtClaimsCondition.getClaimUrl());
            [CtInvocationImpl][CtVariableReadImpl]psJWTClaimsCondition.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]jwtClaimsCondition.getAttribute());
            [CtInvocationImpl][CtVariableReadImpl]psJWTClaimsCondition.setBoolean([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]jwtClaimsCondition.isInvertCondition());
            [CtInvocationImpl][CtVariableReadImpl]psJWTClaimsCondition.executeUpdate();
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]psJWTClaimsCondition, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add a Global level throttling policy to database
     *
     * @param policy
     * 		Global Policy
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void addGlobalPolicy([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.GlobalPolicy policy) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement policyStatement = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String addQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.INSERT_GLOBAL_POLICY_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]policyStatement = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]addQuery);
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName());
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setInt([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]policy.getTenantId());
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]policy.getKeyTemplate());
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]policy.getDescription());
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.io.InputStream siddhiQueryInputStream;
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]byte[] byteArray = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getSiddhiQuery().getBytes([CtInvocationImpl][CtTypeAccessImpl]java.nio.charset.Charset.defaultCharset());
            [CtLocalVariableImpl][CtTypeReferenceImpl]int lengthOfBytes = [CtFieldReadImpl][CtVariableReadImpl]byteArray.length;
            [CtAssignmentImpl][CtVariableWriteImpl]siddhiQueryInputStream = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.io.ByteArrayInputStream([CtVariableReadImpl]byteArray);
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setBinaryStream([CtLiteralImpl]5, [CtVariableReadImpl]siddhiQueryInputStream, [CtVariableReadImpl]lengthOfBytes);
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setBoolean([CtLiteralImpl]6, [CtLiteralImpl]false);
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]7, [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]java.util.UUID.randomUUID().toString());
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl][CtCommentImpl]// rollback failed. exception will be thrown later for upper exception
                    [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to rollback the add Global Policy: " + [CtInvocationImpl][CtVariableReadImpl]policy.toString(), [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to add Global Policy: " + [CtVariableReadImpl]policy, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]policyStatement, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieves global policy key templates for the given tenantID
     *
     * @param tenantID
     * 		tenant id
     * @return list of KeyTemplates
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> getGlobalPolicyKeyTemplates([CtParameterImpl][CtTypeReferenceImpl]int tenantID) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> keyTemplates = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_GLOBAL_POLICY_KEY_TEMPLATES;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantID);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]keyTemplates.add([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_KEY_TEMPLATE));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while executing SQL to get GLOBAL_POLICY_KEY_TEMPLATES", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]keyTemplates;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns true if the key template exist in DB
     *
     * @param policy
     * 		Global Policy
     * @return true if key template already exists
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]boolean isKeyTemplatesExist([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.GlobalPolicy policy) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_GLOBAL_POLICY_KEY_TEMPLATE;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]policy.getTenantId());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]policy.getKeyTemplate());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName());
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtReturnImpl]return [CtLiteralImpl]true;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while executing SQL to get GLOBAL_POLICY_KEY_TEMPLATE", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtLiteralImpl]false;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Removes a throttling policy from the database
     *
     * @param policyLevel
     * 		level of the policy to be deleted
     * @param policyName
     * 		name of the policy
     * @param tenantId
     * 		used to get the tenant id
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void removeThrottlePolicy([CtParameterImpl][CtTypeReferenceImpl]java.lang.String policyLevel, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String policyName, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement deleteStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_APP.equals([CtVariableReadImpl]policyLevel)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.DELETE_APPLICATION_POLICY_SQL;
        } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_SUB.equals([CtVariableReadImpl]policyLevel)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.DELETE_SUBSCRIPTION_POLICY_SQL;
        } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_API.equals([CtVariableReadImpl]policyLevel)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]query = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.DELETE_API_POLICY_SQL;
        } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_GLOBAL.equals([CtVariableReadImpl]policyLevel)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.DELETE_GLOBAL_POLICY_SQL;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]deleteStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]deleteStatement.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantId);
            [CtInvocationImpl][CtVariableReadImpl]deleteStatement.setString([CtLiteralImpl]2, [CtVariableReadImpl]policyName);
            [CtInvocationImpl][CtVariableReadImpl]deleteStatement.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to remove policy " + [CtVariableReadImpl]policyLevel) + [CtLiteralImpl]'-') + [CtVariableReadImpl]policyName) + [CtLiteralImpl]'-') + [CtVariableReadImpl]tenantId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]deleteStatement, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get API level policies. Result only contains basic details of the policy,
     * it doesn't contain pipeline information.
     *
     * @param tenantID
     * 		policies are selected using tenantID
     * @return APIPolicy ArrayList
     * @throws APIManagementException
     */
    public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.APIPolicy[] getAPIPolicies([CtParameterImpl][CtTypeReferenceImpl]int tenantID) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.APIPolicy> policies = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.APIPolicy>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.GET_API_POLICIES;
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.GET_API_POLICIES;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantID);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.APIPolicy apiPolicy = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.APIPolicy([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_NAME));
                [CtInvocationImpl]setCommonPolicyDetails([CtVariableReadImpl]apiPolicy, [CtVariableReadImpl]rs);
                [CtInvocationImpl][CtVariableReadImpl]apiPolicy.setUserLevel([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_APPLICABLE_LEVEL));
                [CtInvocationImpl][CtVariableReadImpl]policies.add([CtVariableReadImpl]apiPolicy);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while executing SQL", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]policies.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.APIPolicy[[CtInvocationImpl][CtVariableReadImpl]policies.size()]);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get application level polices
     *
     * @param tenantID
     * 		polices are selected only belong to specific tenantID
     * @return AppilicationPolicy array list
     */
    public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.ApplicationPolicy[] getApplicationPolicies([CtParameterImpl][CtTypeReferenceImpl]int tenantID) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.ApplicationPolicy> policies = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.ApplicationPolicy>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APP_POLICIES;
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APP_POLICIES;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantID);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.ApplicationPolicy appPolicy = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.ApplicationPolicy([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_NAME));
                [CtInvocationImpl]setCommonPolicyDetails([CtVariableReadImpl]appPolicy, [CtVariableReadImpl]rs);
                [CtInvocationImpl][CtVariableReadImpl]policies.add([CtVariableReadImpl]appPolicy);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while executing SQL", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]policies.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.ApplicationPolicy[[CtInvocationImpl][CtVariableReadImpl]policies.size()]);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get all subscription level policeis belongs to specific tenant
     *
     * @param tenantID
     * 		tenantID filters the polices belongs to specific tenant
     * @return subscriptionPolicy array list
     */
    public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy[] getSubscriptionPolicies([CtParameterImpl][CtTypeReferenceImpl]int tenantID) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy> policies = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_POLICIES;
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_POLICIES;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantID);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy subPolicy = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_NAME));
                [CtInvocationImpl]setCommonPolicyDetails([CtVariableReadImpl]subPolicy, [CtVariableReadImpl]rs);
                [CtInvocationImpl][CtVariableReadImpl]subPolicy.setRateLimitCount([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_RATE_LIMIT_COUNT));
                [CtInvocationImpl][CtVariableReadImpl]subPolicy.setRateLimitTimeUnit([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_RATE_LIMIT_TIME_UNIT));
                [CtInvocationImpl][CtVariableReadImpl]subPolicy.setStopOnQuotaReach([CtInvocationImpl][CtVariableReadImpl]rs.getBoolean([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_STOP_ON_QUOTA_REACH));
                [CtInvocationImpl][CtVariableReadImpl]subPolicy.setBillingPlan([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_BILLING_PLAN));
                [CtInvocationImpl][CtVariableReadImpl]subPolicy.setMonetizationPlan([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_MONETIZATION_PLAN));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> monetizationPlanProperties = [CtInvocationImpl][CtVariableReadImpl]subPolicy.getMonetizationPlanProperties();
                [CtInvocationImpl][CtVariableReadImpl]monetizationPlanProperties.put([CtTypeAccessImpl]APIConstants.Monetization.FIXED_PRICE, [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_FIXED_RATE));
                [CtInvocationImpl][CtVariableReadImpl]monetizationPlanProperties.put([CtTypeAccessImpl]APIConstants.Monetization.BILLING_CYCLE, [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_BILLING_CYCLE));
                [CtInvocationImpl][CtVariableReadImpl]monetizationPlanProperties.put([CtTypeAccessImpl]APIConstants.Monetization.PRICE_PER_REQUEST, [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_PRICE_PER_REQUEST));
                [CtInvocationImpl][CtVariableReadImpl]monetizationPlanProperties.put([CtTypeAccessImpl]APIConstants.Monetization.CURRENCY, [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_CURRENCY));
                [CtInvocationImpl][CtVariableReadImpl]subPolicy.setMonetizationPlanProperties([CtVariableReadImpl]monetizationPlanProperties);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.io.InputStream binary = [CtInvocationImpl][CtVariableReadImpl]rs.getBinaryStream([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_CUSTOM_ATTRIB);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]binary != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]byte[] customAttrib = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.toByteArray([CtVariableReadImpl]binary);
                    [CtInvocationImpl][CtVariableReadImpl]subPolicy.setCustomAttributes([CtVariableReadImpl]customAttrib);
                }
                [CtInvocationImpl][CtVariableReadImpl]policies.add([CtVariableReadImpl]subPolicy);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while executing SQL", [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.io.IOException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while converting input stream to byte array", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]policies.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy[[CtInvocationImpl][CtVariableReadImpl]policies.size()]);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get subscription level policies specified by tier names belonging to a specific tenant
     *
     * @param subscriptionTiers
     * 		subscription tiers
     * @param tenantID
     * 		tenantID filters the polices belongs to specific tenant
     * @return subscriptionPolicy array list
     */
    public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy[] getSubscriptionPolicies([CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] subscriptionTiers, [CtParameterImpl][CtTypeReferenceImpl]int tenantID) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy> policies = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> questionMarks = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>([CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.nCopies([CtFieldReadImpl][CtVariableReadImpl]subscriptionTiers.length, [CtLiteralImpl]"?"));
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String parameterString = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.join([CtLiteralImpl]",", [CtVariableReadImpl]questionMarks);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_POLICIES_BY_POLICY_NAMES_PREFIX + [CtVariableReadImpl]parameterString) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_POLICIES_BY_POLICY_NAMES_SUFFIX;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtLocalVariableImpl][CtTypeReferenceImpl]int i = [CtLiteralImpl]1;
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriptionTier : [CtVariableReadImpl]subscriptionTiers) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtVariableReadImpl]i, [CtVariableReadImpl]subscriptionTier);
                [CtUnaryOperatorImpl][CtVariableWriteImpl]i++;
            }
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtVariableReadImpl]i, [CtVariableReadImpl]tenantID);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy subPolicy = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_NAME));
                [CtInvocationImpl]setCommonPolicyDetails([CtVariableReadImpl]subPolicy, [CtVariableReadImpl]rs);
                [CtInvocationImpl][CtVariableReadImpl]subPolicy.setRateLimitCount([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_RATE_LIMIT_COUNT));
                [CtInvocationImpl][CtVariableReadImpl]subPolicy.setRateLimitTimeUnit([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_RATE_LIMIT_TIME_UNIT));
                [CtInvocationImpl][CtVariableReadImpl]subPolicy.setStopOnQuotaReach([CtInvocationImpl][CtVariableReadImpl]rs.getBoolean([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_STOP_ON_QUOTA_REACH));
                [CtInvocationImpl][CtVariableReadImpl]subPolicy.setBillingPlan([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_BILLING_PLAN));
                [CtInvocationImpl][CtVariableReadImpl]subPolicy.setMonetizationPlan([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_MONETIZATION_PLAN));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> monetizationPlanProperties = [CtInvocationImpl][CtVariableReadImpl]subPolicy.getMonetizationPlanProperties();
                [CtInvocationImpl][CtVariableReadImpl]monetizationPlanProperties.put([CtTypeAccessImpl]APIConstants.Monetization.FIXED_PRICE, [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_FIXED_RATE));
                [CtInvocationImpl][CtVariableReadImpl]monetizationPlanProperties.put([CtTypeAccessImpl]APIConstants.Monetization.BILLING_CYCLE, [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_BILLING_CYCLE));
                [CtInvocationImpl][CtVariableReadImpl]monetizationPlanProperties.put([CtTypeAccessImpl]APIConstants.Monetization.PRICE_PER_REQUEST, [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_PRICE_PER_REQUEST));
                [CtInvocationImpl][CtVariableReadImpl]monetizationPlanProperties.put([CtTypeAccessImpl]APIConstants.Monetization.CURRENCY, [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_CURRENCY));
                [CtInvocationImpl][CtVariableReadImpl]subPolicy.setMonetizationPlanProperties([CtVariableReadImpl]monetizationPlanProperties);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.io.InputStream binary = [CtInvocationImpl][CtVariableReadImpl]rs.getBinaryStream([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_CUSTOM_ATTRIB);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]binary != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]byte[] customAttrib = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.toByteArray([CtVariableReadImpl]binary);
                    [CtInvocationImpl][CtVariableReadImpl]subPolicy.setCustomAttributes([CtVariableReadImpl]customAttrib);
                }
                [CtInvocationImpl][CtVariableReadImpl]policies.add([CtVariableReadImpl]subPolicy);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while executing SQL", [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.io.IOException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while converting input stream to byte array", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]policies.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy[[CtInvocationImpl][CtVariableReadImpl]policies.size()]);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get all Global level policeis belongs to specific tenant
     *
     * @param tenantID
     * @return  * @throws APIManagementException
     */
    public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.GlobalPolicy[] getGlobalPolicies([CtParameterImpl][CtTypeReferenceImpl]int tenantID) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.GlobalPolicy> policies = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.GlobalPolicy>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_GLOBAL_POLICIES;
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_GLOBAL_POLICIES;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantID);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String siddhiQuery = [CtLiteralImpl]null;
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.GlobalPolicy globalPolicy = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.GlobalPolicy([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_NAME));
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setDescription([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_DESCRIPTION));
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setPolicyId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_POLICY_ID));
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setUUID([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_UUID));
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setTenantId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_TENANT_ID));
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setKeyTemplate([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_KEY_TEMPLATE));
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setDeployed([CtInvocationImpl][CtVariableReadImpl]rs.getBoolean([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_DEPLOYED));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.io.InputStream siddhiQueryBlob = [CtInvocationImpl][CtVariableReadImpl]rs.getBinaryStream([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_SIDDHI_QUERY);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]siddhiQueryBlob != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]siddhiQuery = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getStringFromInputStream([CtVariableReadImpl]siddhiQueryBlob);
                }
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setSiddhiQuery([CtVariableReadImpl]siddhiQuery);
                [CtInvocationImpl][CtVariableReadImpl]policies.add([CtVariableReadImpl]globalPolicy);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while executing SQL", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]policies.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.GlobalPolicy[[CtInvocationImpl][CtVariableReadImpl]policies.size()]);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get a particular Global level policy.
     *
     * @param policyName
     * 		name of the global polixy
     * @return {@link GlobalPolicy}
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.GlobalPolicy getGlobalPolicy([CtParameterImpl][CtTypeReferenceImpl]java.lang.String policyName) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_GLOBAL_POLICY;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.GlobalPolicy globalPolicy = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]policyName);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String siddhiQuery = [CtLiteralImpl]null;
                [CtAssignmentImpl][CtVariableWriteImpl]globalPolicy = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.GlobalPolicy([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_NAME));
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setDescription([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_DESCRIPTION));
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setPolicyId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_POLICY_ID));
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setUUID([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_UUID));
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setTenantId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_TENANT_ID));
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setKeyTemplate([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_KEY_TEMPLATE));
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setDeployed([CtInvocationImpl][CtVariableReadImpl]rs.getBoolean([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_DEPLOYED));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.io.InputStream siddhiQueryBlob = [CtInvocationImpl][CtVariableReadImpl]rs.getBinaryStream([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_SIDDHI_QUERY);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]siddhiQueryBlob != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]siddhiQuery = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getStringFromInputStream([CtVariableReadImpl]siddhiQueryBlob);
                }
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setSiddhiQuery([CtVariableReadImpl]siddhiQuery);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while executing SQL", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]globalPolicy;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get a particular Global level policy given UUID.
     *
     * @param uuid
     * 		name of the global polixy
     * @return {@link GlobalPolicy}
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.GlobalPolicy getGlobalPolicyByUUID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String uuid) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_GLOBAL_POLICY_BY_UUID;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.GlobalPolicy globalPolicy = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]uuid);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String siddhiQuery = [CtLiteralImpl]null;
                [CtAssignmentImpl][CtVariableWriteImpl]globalPolicy = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.GlobalPolicy([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_NAME));
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setDescription([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_DESCRIPTION));
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setPolicyId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_POLICY_ID));
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setUUID([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_UUID));
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setTenantId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_TENANT_ID));
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setKeyTemplate([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_KEY_TEMPLATE));
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setDeployed([CtInvocationImpl][CtVariableReadImpl]rs.getBoolean([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_DEPLOYED));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.io.InputStream siddhiQueryBlob = [CtInvocationImpl][CtVariableReadImpl]rs.getBinaryStream([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_SIDDHI_QUERY);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]siddhiQueryBlob != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]siddhiQuery = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getStringFromInputStream([CtVariableReadImpl]siddhiQueryBlob);
                }
                [CtInvocationImpl][CtVariableReadImpl]globalPolicy.setSiddhiQuery([CtVariableReadImpl]siddhiQuery);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while retrieving global policy by uuid " + [CtVariableReadImpl]uuid, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]globalPolicy;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieves {@link APIPolicy} with name <code>policyName</code> and tenant Id <code>tenantNId</code>
     * <p>This will retrieve complete details about the APIPolicy with all pipelins and conditions.</p>
     *
     * @param policyName
     * 		name of the policy to retrieve from the database
     * @param tenantId
     * 		tenantId of the policy
     * @return {@link APIPolicy}
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.APIPolicy getAPIPolicy([CtParameterImpl][CtTypeReferenceImpl]java.lang.String policyName, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.APIPolicy policy = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement selectStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.GET_API_POLICY_SQL;
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.GET_API_POLICY_SQL;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]selectStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]selectStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]policyName);
            [CtInvocationImpl][CtVariableReadImpl]selectStatement.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
            [CtAssignmentImpl][CtCommentImpl]// Should return only single result
            [CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]selectStatement.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]policy = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.APIPolicy([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_NAME));
                [CtInvocationImpl]setCommonPolicyDetails([CtVariableReadImpl]policy, [CtVariableReadImpl]resultSet);
                [CtInvocationImpl][CtVariableReadImpl]policy.setUserLevel([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_APPLICABLE_LEVEL));
                [CtInvocationImpl][CtVariableReadImpl]policy.setPipelines([CtInvocationImpl]getPipelines([CtInvocationImpl][CtVariableReadImpl]policy.getPolicyId()));
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to get api policy: " + [CtVariableReadImpl]policyName) + [CtLiteralImpl]'-') + [CtVariableReadImpl]tenantId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]selectStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]policy;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieves {@link APIPolicy} with name <code>uuid</code>
     * <p>This will retrieve complete details about the APIPolicy with all pipelines and conditions.</p>
     *
     * @param uuid
     * 		uuid of the policy to retrieve from the database
     * @return {@link APIPolicy}
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.APIPolicy getAPIPolicyByUUID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String uuid) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.APIPolicy policy = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement selectStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.GET_API_POLICY_BY_UUID_SQL;
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.GET_API_POLICY_BY_UUID_SQL;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]selectStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]selectStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]uuid);
            [CtAssignmentImpl][CtCommentImpl]// Should return only single result
            [CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]selectStatement.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]policy = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.APIPolicy([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_NAME));
                [CtInvocationImpl]setCommonPolicyDetails([CtVariableReadImpl]policy, [CtVariableReadImpl]resultSet);
                [CtInvocationImpl][CtVariableReadImpl]policy.setUserLevel([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_APPLICABLE_LEVEL));
                [CtInvocationImpl][CtVariableReadImpl]policy.setPipelines([CtInvocationImpl]getPipelines([CtInvocationImpl][CtVariableReadImpl]policy.getPolicyId()));
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get api policy: " + [CtVariableReadImpl]uuid, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]selectStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]policy;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieves {@link ApplicationPolicy} with name <code>policyName</code> and tenant Id <code>tenantNId</code>
     *
     * @param policyName
     * 		name of the policy to retrieve from the database
     * @param tenantId
     * 		tenantId of the policy
     * @return {@link ApplicationPolicy}
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.ApplicationPolicy getApplicationPolicy([CtParameterImpl][CtTypeReferenceImpl]java.lang.String policyName, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.ApplicationPolicy policy = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement selectStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_POLICY_SQL;
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_POLICY_SQL;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]selectStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]selectStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]policyName);
            [CtInvocationImpl][CtVariableReadImpl]selectStatement.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
            [CtAssignmentImpl][CtCommentImpl]// Should return only single row
            [CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]selectStatement.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]policy = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.ApplicationPolicy([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_NAME));
                [CtInvocationImpl]setCommonPolicyDetails([CtVariableReadImpl]policy, [CtVariableReadImpl]resultSet);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to get application policy: " + [CtVariableReadImpl]policyName) + [CtLiteralImpl]'-') + [CtVariableReadImpl]tenantId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]selectStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]policy;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieves {@link ApplicationPolicy} with name <code>uuid</code>
     *
     * @param uuid
     * 		uuid of the policy to retrieve from the database
     * @return {@link ApplicationPolicy}
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.ApplicationPolicy getApplicationPolicyByUUID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String uuid) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.ApplicationPolicy policy = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement selectStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_POLICY_BY_UUID_SQL;
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_POLICY_BY_UUID_SQL;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]selectStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]selectStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]uuid);
            [CtAssignmentImpl][CtCommentImpl]// Should return only single row
            [CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]selectStatement.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]policy = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.ApplicationPolicy([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_NAME));
                [CtInvocationImpl]setCommonPolicyDetails([CtVariableReadImpl]policy, [CtVariableReadImpl]resultSet);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get application policy: " + [CtVariableReadImpl]uuid, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]selectStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]policy;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieves {@link SubscriptionPolicy} with name <code>policyName</code> and tenant Id <code>tenantNId</code>
     *
     * @param policyName
     * 		name of the policy to retrieve from the database
     * @param tenantId
     * 		tenantId of the policy
     * @return {@link SubscriptionPolicy}
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy getSubscriptionPolicy([CtParameterImpl][CtTypeReferenceImpl]java.lang.String policyName, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy policy = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement selectStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_POLICY_SQL;
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_POLICY_SQL;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]selectStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]selectStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]policyName);
            [CtInvocationImpl][CtVariableReadImpl]selectStatement.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantId);
            [CtAssignmentImpl][CtCommentImpl]// Should return only single row
            [CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]selectStatement.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]policy = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_NAME));
                [CtInvocationImpl]setCommonPolicyDetails([CtVariableReadImpl]policy, [CtVariableReadImpl]resultSet);
                [CtInvocationImpl][CtVariableReadImpl]policy.setRateLimitCount([CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_RATE_LIMIT_COUNT));
                [CtInvocationImpl][CtVariableReadImpl]policy.setRateLimitTimeUnit([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_RATE_LIMIT_TIME_UNIT));
                [CtInvocationImpl][CtVariableReadImpl]policy.setStopOnQuotaReach([CtInvocationImpl][CtVariableReadImpl]resultSet.getBoolean([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_STOP_ON_QUOTA_REACH));
                [CtInvocationImpl][CtVariableReadImpl]policy.setBillingPlan([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_BILLING_PLAN));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.io.InputStream binary = [CtInvocationImpl][CtVariableReadImpl]resultSet.getBinaryStream([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_CUSTOM_ATTRIB);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]binary != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]byte[] customAttrib = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.toByteArray([CtVariableReadImpl]binary);
                    [CtInvocationImpl][CtVariableReadImpl]policy.setCustomAttributes([CtVariableReadImpl]customAttrib);
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to get subscription policy: " + [CtVariableReadImpl]policyName) + [CtLiteralImpl]'-') + [CtVariableReadImpl]tenantId, [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.io.IOException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while converting input stream to byte array", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]selectStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]policy;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieves {@link SubscriptionPolicy} with name <code>uuid</code>
     *
     * @param uuid
     * 		name of the policy to retrieve from the database
     * @return {@link SubscriptionPolicy}
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy getSubscriptionPolicyByUUID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String uuid) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy policy = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement selectStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_POLICY_BY_UUID_SQL;
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIPTION_POLICY_BY_UUID_SQL;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]selectStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]selectStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]uuid);
            [CtAssignmentImpl][CtCommentImpl]// Should return only single row
            [CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]selectStatement.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]policy = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_NAME));
                [CtInvocationImpl]setCommonPolicyDetails([CtVariableReadImpl]policy, [CtVariableReadImpl]resultSet);
                [CtInvocationImpl][CtVariableReadImpl]policy.setRateLimitCount([CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_RATE_LIMIT_COUNT));
                [CtInvocationImpl][CtVariableReadImpl]policy.setRateLimitTimeUnit([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_RATE_LIMIT_TIME_UNIT));
                [CtInvocationImpl][CtVariableReadImpl]policy.setStopOnQuotaReach([CtInvocationImpl][CtVariableReadImpl]resultSet.getBoolean([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_STOP_ON_QUOTA_REACH));
                [CtInvocationImpl][CtVariableReadImpl]policy.setBillingPlan([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_BILLING_PLAN));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.io.InputStream binary = [CtInvocationImpl][CtVariableReadImpl]resultSet.getBinaryStream([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_CUSTOM_ATTRIB);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]binary != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]byte[] customAttrib = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.toByteArray([CtVariableReadImpl]binary);
                    [CtInvocationImpl][CtVariableReadImpl]policy.setCustomAttributes([CtVariableReadImpl]customAttrib);
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get subscription policy: " + [CtVariableReadImpl]uuid, [CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.io.IOException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while converting input stream to byte array", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]selectStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]policy;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieves list of pipelines for the policy with policy Id: <code>policyId</code>
     *
     * @param policyId
     * 		policy id of the pipelines
     * @return list of pipelines
     * @throws APIManagementException
     */
    private [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Pipeline> getPipelines([CtParameterImpl][CtTypeReferenceImpl]int policyId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement pipelinesStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Pipeline> pipelines = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Pipeline>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]pipelinesStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.ThrottleSQLConstants.GET_PIPELINES_SQL);
            [CtLocalVariableImpl][CtTypeReferenceImpl]int unitTime = [CtLiteralImpl]0;
            [CtLocalVariableImpl][CtTypeReferenceImpl]int quota = [CtLiteralImpl]0;
            [CtLocalVariableImpl][CtTypeReferenceImpl]int pipelineId = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String timeUnit = [CtLiteralImpl]null;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String quotaUnit = [CtLiteralImpl]null;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String description;
            [CtInvocationImpl][CtVariableReadImpl]pipelinesStatement.setInt([CtLiteralImpl]1, [CtVariableReadImpl]policyId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]pipelinesStatement.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Pipeline pipeline = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Pipeline();
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Condition> conditions = [CtLiteralImpl]null;
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.QuotaPolicy quotaPolicy = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.QuotaPolicy();
                [CtInvocationImpl][CtVariableReadImpl]quotaPolicy.setType([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_QUOTA_POLICY_TYPE));
                [CtAssignmentImpl][CtVariableWriteImpl]timeUnit = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_TIME_UNIT);
                [CtAssignmentImpl][CtVariableWriteImpl]quotaUnit = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_QUOTA_UNIT);
                [CtAssignmentImpl][CtVariableWriteImpl]unitTime = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_UNIT_TIME);
                [CtAssignmentImpl][CtVariableWriteImpl]quota = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_QUOTA);
                [CtAssignmentImpl][CtVariableWriteImpl]pipelineId = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_CONDITION_ID);
                [CtAssignmentImpl][CtVariableWriteImpl]description = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_DESCRIPTION);
                [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.REQUEST_COUNT_TYPE.equals([CtInvocationImpl][CtVariableReadImpl]quotaPolicy.getType())) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.RequestCountLimit requestCountLimit = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.RequestCountLimit();
                    [CtInvocationImpl][CtVariableReadImpl]requestCountLimit.setUnitTime([CtVariableReadImpl]unitTime);
                    [CtInvocationImpl][CtVariableReadImpl]requestCountLimit.setTimeUnit([CtVariableReadImpl]timeUnit);
                    [CtInvocationImpl][CtVariableReadImpl]requestCountLimit.setRequestCount([CtVariableReadImpl]quota);
                    [CtInvocationImpl][CtVariableReadImpl]quotaPolicy.setLimit([CtVariableReadImpl]requestCountLimit);
                } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.BANDWIDTH_TYPE.equals([CtInvocationImpl][CtVariableReadImpl]quotaPolicy.getType())) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.BandwidthLimit bandwidthLimit = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.BandwidthLimit();
                    [CtInvocationImpl][CtVariableReadImpl]bandwidthLimit.setUnitTime([CtVariableReadImpl]unitTime);
                    [CtInvocationImpl][CtVariableReadImpl]bandwidthLimit.setTimeUnit([CtVariableReadImpl]timeUnit);
                    [CtInvocationImpl][CtVariableReadImpl]bandwidthLimit.setDataUnit([CtVariableReadImpl]quotaUnit);
                    [CtInvocationImpl][CtVariableReadImpl]bandwidthLimit.setDataAmount([CtVariableReadImpl]quota);
                    [CtInvocationImpl][CtVariableReadImpl]quotaPolicy.setLimit([CtVariableReadImpl]bandwidthLimit);
                }
                [CtAssignmentImpl][CtVariableWriteImpl]conditions = [CtInvocationImpl]getConditions([CtVariableReadImpl]pipelineId);
                [CtInvocationImpl][CtVariableReadImpl]pipeline.setConditions([CtVariableReadImpl]conditions);
                [CtInvocationImpl][CtVariableReadImpl]pipeline.setQuotaPolicy([CtVariableReadImpl]quotaPolicy);
                [CtInvocationImpl][CtVariableReadImpl]pipeline.setId([CtVariableReadImpl]pipelineId);
                [CtInvocationImpl][CtVariableReadImpl]pipeline.setDescription([CtVariableReadImpl]description);
                [CtInvocationImpl][CtVariableReadImpl]pipelines.add([CtVariableReadImpl]pipeline);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get pipelines for policyId: " + [CtVariableReadImpl]policyId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]pipelinesStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]pipelines;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieves list of Conditions for a pipeline specified by <code>pipelineId</code>
     *
     * @param pipelineId
     * 		pipeline Id with conditions to retrieve
     * @return list of Conditions for a pipeline
     * @throws APIManagementException
     */
    private [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Condition> getConditions([CtParameterImpl][CtTypeReferenceImpl]int pipelineId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement conditionsStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Condition> conditions = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Condition>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String startingIP = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String endingIP = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String specificIP = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean invert;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]conditionsStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.ThrottleSQLConstants.GET_IP_CONDITIONS_SQL);
            [CtInvocationImpl][CtVariableReadImpl]conditionsStatement.setInt([CtLiteralImpl]1, [CtVariableReadImpl]pipelineId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]conditionsStatement.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]startingIP = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_STARTING_IP);
                [CtAssignmentImpl][CtVariableWriteImpl]endingIP = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_ENDING_IP);
                [CtAssignmentImpl][CtVariableWriteImpl]specificIP = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_SPECIFIC_IP);
                [CtAssignmentImpl][CtVariableWriteImpl]invert = [CtInvocationImpl][CtVariableReadImpl]resultSet.getBoolean([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_WITHIN_IP_RANGE);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]specificIP != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtLiteralImpl]"".equals([CtVariableReadImpl]specificIP))) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.IPCondition ipCondition = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.IPCondition([CtFieldReadImpl]org.wso2.carbon.apimgt.api.model.policy.PolicyConstants.IP_SPECIFIC_TYPE);
                    [CtInvocationImpl][CtVariableReadImpl]ipCondition.setSpecificIP([CtVariableReadImpl]specificIP);
                    [CtInvocationImpl][CtVariableReadImpl]ipCondition.setInvertCondition([CtVariableReadImpl]invert);
                    [CtInvocationImpl][CtVariableReadImpl]conditions.add([CtVariableReadImpl]ipCondition);
                } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]startingIP != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtLiteralImpl]"".equals([CtVariableReadImpl]startingIP))) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtCommentImpl]/* Assumes availability of starting ip means ip range is enforced.
                    Therefore availability of ending ip is not checked.
                     */
                    [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.IPCondition ipRangeCondition = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.IPCondition([CtFieldReadImpl]org.wso2.carbon.apimgt.api.model.policy.PolicyConstants.IP_RANGE_TYPE);
                    [CtInvocationImpl][CtVariableReadImpl]ipRangeCondition.setStartingIP([CtVariableReadImpl]startingIP);
                    [CtInvocationImpl][CtVariableReadImpl]ipRangeCondition.setEndingIP([CtVariableReadImpl]endingIP);
                    [CtInvocationImpl][CtVariableReadImpl]ipRangeCondition.setInvertCondition([CtVariableReadImpl]invert);
                    [CtInvocationImpl][CtVariableReadImpl]conditions.add([CtVariableReadImpl]ipRangeCondition);
                }
            } 
            [CtInvocationImpl]setHeaderConditions([CtVariableReadImpl]pipelineId, [CtVariableReadImpl]conditions);
            [CtInvocationImpl]setQueryParameterConditions([CtVariableReadImpl]pipelineId, [CtVariableReadImpl]conditions);
            [CtInvocationImpl]setJWTClaimConditions([CtVariableReadImpl]pipelineId, [CtVariableReadImpl]conditions);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get conditions for pipelineId: " + [CtVariableReadImpl]pipelineId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]conditionsStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]conditions;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add Header conditions of pipeline with pipeline Id: <code>pipelineId</code> to a
     * provided {@link Condition} array
     *
     * @param pipelineId
     * 		Id of the pipeline
     * @param conditions
     * 		condition array to populate
     * @throws APIManagementException
     */
    private [CtTypeReferenceImpl]void setHeaderConditions([CtParameterImpl][CtTypeReferenceImpl]int pipelineId, [CtParameterImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Condition> conditions) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement conditionsStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]conditionsStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.ThrottleSQLConstants.GET_HEADER_CONDITIONS_SQL);
            [CtInvocationImpl][CtVariableReadImpl]conditionsStatement.setInt([CtLiteralImpl]1, [CtVariableReadImpl]pipelineId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]conditionsStatement.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.HeaderCondition headerCondition = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.HeaderCondition();
                [CtInvocationImpl][CtVariableReadImpl]headerCondition.setHeader([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_HEADER_FIELD_NAME));
                [CtInvocationImpl][CtVariableReadImpl]headerCondition.setValue([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_HEADER_FIELD_VALUE));
                [CtInvocationImpl][CtVariableReadImpl]headerCondition.setInvertCondition([CtInvocationImpl][CtVariableReadImpl]resultSet.getBoolean([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_IS_HEADER_FIELD_MAPPING));
                [CtInvocationImpl][CtVariableReadImpl]conditions.add([CtVariableReadImpl]headerCondition);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get header conditions for pipelineId: " + [CtVariableReadImpl]pipelineId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]conditionsStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add Query parameter conditions of pipeline with pipeline Id: <code>pipelineId</code> to a
     * provided {@link Condition} array
     *
     * @param pipelineId
     * 		Id of the pipeline
     * @param conditions
     * 		condition array to populate
     * @throws APIManagementException
     */
    private [CtTypeReferenceImpl]void setQueryParameterConditions([CtParameterImpl][CtTypeReferenceImpl]int pipelineId, [CtParameterImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Condition> conditions) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement conditionsStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]conditionsStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.ThrottleSQLConstants.GET_QUERY_PARAMETER_CONDITIONS_SQL);
            [CtInvocationImpl][CtVariableReadImpl]conditionsStatement.setInt([CtLiteralImpl]1, [CtVariableReadImpl]pipelineId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]conditionsStatement.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.QueryParameterCondition queryParameterCondition = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.QueryParameterCondition();
                [CtInvocationImpl][CtVariableReadImpl]queryParameterCondition.setParameter([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_PARAMETER_NAME));
                [CtInvocationImpl][CtVariableReadImpl]queryParameterCondition.setValue([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_PARAMETER_VALUE));
                [CtInvocationImpl][CtVariableReadImpl]queryParameterCondition.setInvertCondition([CtInvocationImpl][CtVariableReadImpl]resultSet.getBoolean([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_IS_PARAM_MAPPING));
                [CtInvocationImpl][CtVariableReadImpl]conditions.add([CtVariableReadImpl]queryParameterCondition);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get query parameter conditions for pipelineId: " + [CtVariableReadImpl]pipelineId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]conditionsStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add JWT claim conditions of pipeline with pipeline Id: <code>pipelineId</code> to a
     * provided {@link Condition} array
     *
     * @param pipelineId
     * 		Id of the pipeline
     * @param conditions
     * 		condition array to populate
     * @throws APIManagementException
     */
    private [CtTypeReferenceImpl]void setJWTClaimConditions([CtParameterImpl][CtTypeReferenceImpl]int pipelineId, [CtParameterImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Condition> conditions) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement conditionsStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]conditionsStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.ThrottleSQLConstants.GET_JWT_CLAIM_CONDITIONS_SQL);
            [CtInvocationImpl][CtVariableReadImpl]conditionsStatement.setInt([CtLiteralImpl]1, [CtVariableReadImpl]pipelineId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]conditionsStatement.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.JWTClaimsCondition jwtClaimsCondition = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.JWTClaimsCondition();
                [CtInvocationImpl][CtVariableReadImpl]jwtClaimsCondition.setClaimUrl([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_CLAIM_URI));
                [CtInvocationImpl][CtVariableReadImpl]jwtClaimsCondition.setAttribute([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_CLAIM_ATTRIBUTE));
                [CtInvocationImpl][CtVariableReadImpl]jwtClaimsCondition.setInvertCondition([CtInvocationImpl][CtVariableReadImpl]resultSet.getBoolean([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_IS_CLAIM_MAPPING));
                [CtInvocationImpl][CtVariableReadImpl]conditions.add([CtVariableReadImpl]jwtClaimsCondition);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get jwt claim conditions for pipelineId: " + [CtVariableReadImpl]pipelineId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]conditionsStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Updates API level policy.
     * <p>policy name and tenant id should be specified in <code>policy</code></p>
     * <p>
     * Exsisting policy will be deleted and new policy will be inserted to the database
     * with old POLICY_ID. Uses {@link #updateAPIPolicy(APIPolicy)}
     * to create new policy.
     * </p>
     *
     * @param policy
     * 		updated policy object
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.APIPolicy updateAPIPolicy([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.APIPolicy policy) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement selectStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement deleteStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int oldPolicyId = [CtLiteralImpl]0;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String oldPolicyUUID = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]policy != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName() != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]policy.getTenantId() != [CtUnaryOperatorImpl](-[CtLiteralImpl]1))) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]selectStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.ThrottleSQLConstants.GET_API_POLICY_ID_SQL);
                    [CtInvocationImpl][CtVariableReadImpl]selectStatement.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName());
                    [CtInvocationImpl][CtVariableReadImpl]selectStatement.setInt([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]policy.getTenantId());
                } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]policy.getUUID() != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]selectStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.ThrottleSQLConstants.GET_API_POLICY_ID_BY_UUID_SQL);
                    [CtInvocationImpl][CtVariableReadImpl]selectStatement.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]policy.getUUID());
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMsg = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Policy object doesn't contain mandatory parameters. At least UUID or Name,Tenant Id" + [CtLiteralImpl]" should be provided. Name: ") + [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName()) + [CtLiteralImpl]", Tenant Id: ") + [CtInvocationImpl][CtVariableReadImpl]policy.getTenantId()) + [CtLiteralImpl]", UUID: ") + [CtInvocationImpl][CtVariableReadImpl]policy.getUUID();
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]errorMsg);
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]errorMsg);
                }
            } else [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMsg = [CtLiteralImpl]"Provided Policy to add is null";
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]errorMsg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]errorMsg);
            }
            [CtAssignmentImpl][CtCommentImpl]// Should return only single row
            [CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]selectStatement.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]oldPolicyId = [CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_POLICY_ID);
                [CtAssignmentImpl][CtVariableWriteImpl]oldPolicyUUID = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_UUID);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]deleteStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.ThrottleSQLConstants.DELETE_API_POLICY_SQL);
            [CtInvocationImpl][CtVariableReadImpl]deleteStatement.setInt([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]policy.getTenantId());
            [CtInvocationImpl][CtVariableReadImpl]deleteStatement.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName());
            [CtInvocationImpl][CtVariableReadImpl]deleteStatement.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]policy.setPolicyId([CtVariableReadImpl]oldPolicyId);
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtVariableReadImpl]oldPolicyUUID)) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]policy.setUUID([CtVariableReadImpl]oldPolicyUUID);
            }
            [CtInvocationImpl]updateAPIPolicy([CtVariableReadImpl]policy, [CtVariableReadImpl]connection);
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl][CtCommentImpl]// Rollback failed. Exception will be thrown later for upper exception
                    [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to rollback the add Api Policy: " + [CtInvocationImpl][CtVariableReadImpl]policy.toString(), [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to update api policy: " + [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName()) + [CtLiteralImpl]'-') + [CtInvocationImpl][CtVariableReadImpl]policy.getTenantId(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]selectStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]deleteStatement, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
        [CtReturnImpl]return [CtVariableReadImpl]policy;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Updates Application level policy.
     * <p>policy name and tenant id should be specified in <code>policy</code></p>
     *
     * @param policy
     * 		updated policy object
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void updateApplicationPolicy([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.ApplicationPolicy policy) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement updateStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean hasCustomAttrib = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String updateQuery;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]policy.getTenantId() == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) || [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName())) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMsg = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Policy object doesn't contain mandatory parameters. Name: " + [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName()) + [CtLiteralImpl]", Tenant Id: ") + [CtInvocationImpl][CtVariableReadImpl]policy.getTenantId();
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]errorMsg);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]errorMsg);
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]policy.getCustomAttributes() != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]hasCustomAttrib = [CtLiteralImpl]true;
            }
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName())) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]policy.getTenantId() != [CtUnaryOperatorImpl](-[CtLiteralImpl]1))) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]updateQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_APPLICATION_POLICY_SQL;
                [CtIfImpl]if ([CtVariableReadImpl]hasCustomAttrib) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]updateQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_APPLICATION_POLICY_WITH_CUSTOM_ATTRIBUTES_SQL;
                }
            } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtInvocationImpl][CtVariableReadImpl]policy.getUUID())) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]updateQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_APPLICATION_POLICY_BY_UUID_SQL;
                [CtIfImpl]if ([CtVariableReadImpl]hasCustomAttrib) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]updateQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_APPLICATION_POLICY_WITH_CUSTOM_ATTRIBUTES_BY_UUID_SQL;
                }
            } else [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMsg = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Policy object doesn't contain mandatory parameters. At least UUID or Name,Tenant Id" + [CtLiteralImpl]" should be provided. Name: ") + [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName()) + [CtLiteralImpl]", Tenant Id: ") + [CtInvocationImpl][CtVariableReadImpl]policy.getTenantId()) + [CtLiteralImpl]", UUID: ") + [CtInvocationImpl][CtVariableReadImpl]policy.getUUID();
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]errorMsg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]errorMsg);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]updateStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]updateQuery);
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtInvocationImpl][CtVariableReadImpl]policy.getDisplayName())) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]policy.getDisplayName());
            } else [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName());
            }
            [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]policy.getDescription());
            [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]3, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getType());
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.REQUEST_COUNT_TYPE.equalsIgnoreCase([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getType())) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.RequestCountLimit limit = [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.RequestCountLimit) ([CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getLimit()));
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setLong([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]limit.getRequestCount());
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]5, [CtLiteralImpl]null);
            } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.BANDWIDTH_TYPE.equalsIgnoreCase([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getType())) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.BandwidthLimit limit = [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.BandwidthLimit) ([CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getLimit()));
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setLong([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]limit.getDataAmount());
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]5, [CtInvocationImpl][CtVariableReadImpl]limit.getDataUnit());
            }
            [CtInvocationImpl][CtVariableReadImpl]updateStatement.setLong([CtLiteralImpl]6, [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getLimit().getUnitTime());
            [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]7, [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getLimit().getTimeUnit());
            [CtIfImpl]if ([CtVariableReadImpl]hasCustomAttrib) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setBlob([CtLiteralImpl]8, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.io.ByteArrayInputStream([CtInvocationImpl][CtVariableReadImpl]policy.getCustomAttributes()));
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName())) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]policy.getTenantId() != [CtUnaryOperatorImpl](-[CtLiteralImpl]1))) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]9, [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName());
                    [CtInvocationImpl][CtVariableReadImpl]updateStatement.setInt([CtLiteralImpl]10, [CtInvocationImpl][CtVariableReadImpl]policy.getTenantId());
                } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtInvocationImpl][CtVariableReadImpl]policy.getUUID())) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]9, [CtInvocationImpl][CtVariableReadImpl]policy.getUUID());
                }
            } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName())) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]policy.getTenantId() != [CtUnaryOperatorImpl](-[CtLiteralImpl]1))) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]8, [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName());
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setInt([CtLiteralImpl]9, [CtInvocationImpl][CtVariableReadImpl]policy.getTenantId());
            } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtInvocationImpl][CtVariableReadImpl]policy.getUUID())) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]8, [CtInvocationImpl][CtVariableReadImpl]policy.getUUID());
            }
            [CtInvocationImpl][CtVariableReadImpl]updateStatement.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl][CtCommentImpl]// Rollback failed. Exception will be thrown later for upper exception
                    [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to rollback the update Application Policy: " + [CtInvocationImpl][CtVariableReadImpl]policy.toString(), [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to update application policy: " + [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName()) + [CtLiteralImpl]'-') + [CtInvocationImpl][CtVariableReadImpl]policy.getTenantId(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]updateStatement, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Updates Subscription level policy.
     * <p>policy name and tenant id should be specified in <code>policy</code></p>
     *
     * @param policy
     * 		updated policy object
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void updateSubscriptionPolicy([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy policy) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement updateStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean hasCustomAttrib = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String updateQuery;
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]policy.getCustomAttributes() != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]hasCustomAttrib = [CtLiteralImpl]true;
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName())) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]policy.getTenantId() != [CtUnaryOperatorImpl](-[CtLiteralImpl]1))) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]updateQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_SUBSCRIPTION_POLICY_SQL;
                [CtIfImpl]if ([CtVariableReadImpl]hasCustomAttrib) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]updateQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_SUBSCRIPTION_POLICY_WITH_CUSTOM_ATTRIBUTES_SQL;
                }
            } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtInvocationImpl][CtVariableReadImpl]policy.getUUID())) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]updateQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_SUBSCRIPTION_POLICY_BY_UUID_SQL;
                [CtIfImpl]if ([CtVariableReadImpl]hasCustomAttrib) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]updateQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_SUBSCRIPTION_POLICY_WITH_CUSTOM_ATTRIBUTES_BY_UUID_SQL;
                }
            } else [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMsg = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Policy object doesn't contain mandatory parameters. At least UUID or Name,Tenant Id" + [CtLiteralImpl]" should be provided. Name: ") + [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName()) + [CtLiteralImpl]", Tenant Id: ") + [CtInvocationImpl][CtVariableReadImpl]policy.getTenantId()) + [CtLiteralImpl]", UUID: ") + [CtInvocationImpl][CtVariableReadImpl]policy.getUUID();
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]errorMsg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]errorMsg);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]updateStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]updateQuery);
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtInvocationImpl][CtVariableReadImpl]policy.getDisplayName())) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]policy.getDisplayName());
            } else [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName());
            }
            [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]policy.getDescription());
            [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]3, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getType());
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.REQUEST_COUNT_TYPE.equalsIgnoreCase([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getType())) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.RequestCountLimit limit = [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.RequestCountLimit) ([CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getLimit()));
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setLong([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]limit.getRequestCount());
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]5, [CtLiteralImpl]null);
            } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.BANDWIDTH_TYPE.equalsIgnoreCase([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getType())) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.BandwidthLimit limit = [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.BandwidthLimit) ([CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getLimit()));
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setLong([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]limit.getDataAmount());
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]5, [CtInvocationImpl][CtVariableReadImpl]limit.getDataUnit());
            }
            [CtInvocationImpl][CtVariableReadImpl]updateStatement.setLong([CtLiteralImpl]6, [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getLimit().getUnitTime());
            [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]7, [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getLimit().getTimeUnit());
            [CtInvocationImpl][CtVariableReadImpl]updateStatement.setInt([CtLiteralImpl]8, [CtInvocationImpl][CtVariableReadImpl]policy.getRateLimitCount());
            [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]9, [CtInvocationImpl][CtVariableReadImpl]policy.getRateLimitTimeUnit());
            [CtInvocationImpl][CtVariableReadImpl]updateStatement.setBoolean([CtLiteralImpl]10, [CtInvocationImpl][CtVariableReadImpl]policy.isStopOnQuotaReach());
            [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]11, [CtInvocationImpl][CtVariableReadImpl]policy.getBillingPlan());
            [CtIfImpl]if ([CtVariableReadImpl]hasCustomAttrib) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]long lengthOfStream = [CtFieldReadImpl][CtInvocationImpl][CtVariableReadImpl]policy.getCustomAttributes().length;
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setBinaryStream([CtLiteralImpl]12, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.io.ByteArrayInputStream([CtInvocationImpl][CtVariableReadImpl]policy.getCustomAttributes()), [CtVariableReadImpl]lengthOfStream);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName())) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]policy.getTenantId() != [CtUnaryOperatorImpl](-[CtLiteralImpl]1))) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]13, [CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlan());
                    [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]14, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.FIXED_PRICE));
                    [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]15, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.BILLING_CYCLE));
                    [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]16, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.PRICE_PER_REQUEST));
                    [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]17, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.CURRENCY));
                    [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]18, [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName());
                    [CtInvocationImpl][CtVariableReadImpl]updateStatement.setInt([CtLiteralImpl]19, [CtInvocationImpl][CtVariableReadImpl]policy.getTenantId());
                } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtInvocationImpl][CtVariableReadImpl]policy.getUUID())) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]13, [CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlan());
                    [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]14, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.FIXED_PRICE));
                    [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]15, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.BILLING_CYCLE));
                    [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]16, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.PRICE_PER_REQUEST));
                    [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]17, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.CURRENCY));
                    [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]18, [CtInvocationImpl][CtVariableReadImpl]policy.getUUID());
                }
            } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName())) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]policy.getTenantId() != [CtUnaryOperatorImpl](-[CtLiteralImpl]1))) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]12, [CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlan());
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]13, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.FIXED_PRICE));
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]14, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.BILLING_CYCLE));
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]15, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.PRICE_PER_REQUEST));
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]16, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.CURRENCY));
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]17, [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName());
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setInt([CtLiteralImpl]18, [CtInvocationImpl][CtVariableReadImpl]policy.getTenantId());
            } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtInvocationImpl][CtVariableReadImpl]policy.getUUID())) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]12, [CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlan());
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]13, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.FIXED_PRICE));
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]14, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.BILLING_CYCLE));
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]15, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.PRICE_PER_REQUEST));
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]16, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getMonetizationPlanProperties().get([CtTypeAccessImpl]APIConstants.Monetization.CURRENCY));
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]17, [CtInvocationImpl][CtVariableReadImpl]policy.getUUID());
            }
            [CtInvocationImpl][CtVariableReadImpl]updateStatement.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl][CtCommentImpl]// Rollback failed. Exception will be thrown later for upper exception
                    [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to rollback the update Subscription Policy: " + [CtInvocationImpl][CtVariableReadImpl]policy.toString(), [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to update subscription policy: " + [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName()) + [CtLiteralImpl]'-') + [CtInvocationImpl][CtVariableReadImpl]policy.getTenantId(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]updateStatement, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Updates global throttle policy in database
     *
     * @param policy
     * 		updated policy obejct
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void updateGlobalPolicy([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.GlobalPolicy policy) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement updateStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.io.InputStream siddhiQueryInputStream;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]byte[] byteArray = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getSiddhiQuery().getBytes([CtInvocationImpl][CtTypeAccessImpl]java.nio.charset.Charset.defaultCharset());
            [CtLocalVariableImpl][CtTypeReferenceImpl]int lengthOfBytes = [CtFieldReadImpl][CtVariableReadImpl]byteArray.length;
            [CtAssignmentImpl][CtVariableWriteImpl]siddhiQueryInputStream = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.io.ByteArrayInputStream([CtVariableReadImpl]byteArray);
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName())) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]policy.getTenantId() != [CtUnaryOperatorImpl](-[CtLiteralImpl]1))) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]updateStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.UPDATE_GLOBAL_POLICY_SQL);
            } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtInvocationImpl][CtVariableReadImpl]policy.getUUID())) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]updateStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.UPDATE_GLOBAL_POLICY_BY_UUID_SQL);
            } else [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMsg = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Policy object doesn't contain mandatory parameters. At least UUID or Name,Tenant Id" + [CtLiteralImpl]" should be provided. Name: ") + [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName()) + [CtLiteralImpl]", Tenant Id: ") + [CtInvocationImpl][CtVariableReadImpl]policy.getTenantId()) + [CtLiteralImpl]", UUID: ") + [CtInvocationImpl][CtVariableReadImpl]policy.getUUID();
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]errorMsg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]errorMsg);
            }
            [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]policy.getDescription());
            [CtInvocationImpl][CtVariableReadImpl]updateStatement.setBinaryStream([CtLiteralImpl]2, [CtVariableReadImpl]siddhiQueryInputStream, [CtVariableReadImpl]lengthOfBytes);
            [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]policy.getKeyTemplate());
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName())) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]policy.getTenantId() != [CtUnaryOperatorImpl](-[CtLiteralImpl]1))) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName());
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setInt([CtLiteralImpl]5, [CtInvocationImpl][CtVariableReadImpl]policy.getTenantId());
            } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtInvocationImpl][CtVariableReadImpl]policy.getUUID())) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]updateStatement.setString([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]policy.getUUID());
            }
            [CtInvocationImpl][CtVariableReadImpl]updateStatement.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl][CtCommentImpl]// Rollback failed. Exception will be thrown later for upper exception
                    [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to rollback the update Global Policy: " + [CtInvocationImpl][CtVariableReadImpl]policy.toString(), [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to update global policy: " + [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName()) + [CtLiteralImpl]'-') + [CtInvocationImpl][CtVariableReadImpl]policy.getTenantId(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]updateStatement, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieves list of available policy names under <code>policyLevel</code>
     * and user <code>username</code>'s tenant
     *
     * @param policyLevel
     * 		policY level to filter policies
     * @param username
     * 		username will be used to get the tenant
     * @return array of policy names
     * @throws APIManagementException
     */
    public [CtArrayTypeReferenceImpl]java.lang.String[] getPolicyNames([CtParameterImpl][CtTypeReferenceImpl]java.lang.String policyLevel, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String username) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> names = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantID = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtVariableReadImpl]username);
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_API.equals([CtVariableReadImpl]policyLevel)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.GET_API_POLICY_NAMES;
            } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_APP.equals([CtVariableReadImpl]policyLevel)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APP_POLICY_NAMES;
            } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_SUB.equals([CtVariableReadImpl]policyLevel)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUB_POLICY_NAMES;
            } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_GLOBAL.equals([CtVariableReadImpl]policyLevel)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_GLOBAL_POLICY_NAMES;
            }
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantID);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]names.add([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_NAME));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while executing SQL", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]names.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtInvocationImpl][CtVariableReadImpl]names.size()]);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Sets deployment status vaule of a policy in database.
     *
     * @param policyLevel
     * 		policy level
     * @param policyName
     * 		name of the policy
     * @param tenantId
     * 		tenant id of the policy
     * @param isDeployed
     * 		deployment status. <code>true</code> if deployment successful, <code>false</code> if not
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void setPolicyDeploymentStatus([CtParameterImpl][CtTypeReferenceImpl]java.lang.String policyLevel, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String policyName, [CtParameterImpl][CtTypeReferenceImpl]int tenantId, [CtParameterImpl][CtTypeReferenceImpl]boolean isDeployed) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statusStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_APP.equals([CtVariableReadImpl]policyLevel)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_APPLICATION_POLICY_STATUS_SQL;
        } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_SUB.equals([CtVariableReadImpl]policyLevel)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_SUBSCRIPTION_POLICY_STATUS_SQL;
        } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_API.equals([CtVariableReadImpl]policyLevel)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]query = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.UPDATE_API_POLICY_STATUS_SQL;
        } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_GLOBAL.equals([CtVariableReadImpl]policyLevel)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_GLOBAL_POLICY_STATUS_SQL;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]statusStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]statusStatement.setBoolean([CtLiteralImpl]1, [CtVariableReadImpl]isDeployed);
            [CtInvocationImpl][CtVariableReadImpl]statusStatement.setString([CtLiteralImpl]2, [CtVariableReadImpl]policyName);
            [CtInvocationImpl][CtVariableReadImpl]statusStatement.setInt([CtLiteralImpl]3, [CtVariableReadImpl]tenantId);
            [CtInvocationImpl][CtVariableReadImpl]statusStatement.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl][CtCommentImpl]// Rollback failed. Exception will be thrown later for upper exception
                    [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to rollback setting isDeployed flag: " + [CtVariableReadImpl]policyName) + [CtLiteralImpl]'-') + [CtVariableReadImpl]tenantId, [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to set deployment status to the policy: " + [CtVariableReadImpl]policyName) + [CtLiteralImpl]'-') + [CtVariableReadImpl]tenantId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]statusStatement, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Populates common attribute data of the <code>policy</code> to <code>policyStatement</code>
     *
     * @param policyStatement
     * 		prepared statement initialized of policy operation
     * @param policy
     * 		<code>Policy</code> object with data
     * @throws SQLException
     */
    private [CtTypeReferenceImpl]void setCommonParametersForPolicy([CtParameterImpl][CtTypeReferenceImpl]java.sql.PreparedStatement policyStatement, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Policy policy) throws [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName());
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtInvocationImpl][CtVariableReadImpl]policy.getDisplayName())) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]policy.getDisplayName());
        } else [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]policy.getPolicyName());
        }
        [CtInvocationImpl][CtVariableReadImpl]policyStatement.setInt([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]policy.getTenantId());
        [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]policy.getDescription());
        [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]5, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getType());
        [CtIfImpl][CtCommentImpl]// TODO use requestCount in same format in all places
        if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.REQUEST_COUNT_TYPE.equalsIgnoreCase([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getType())) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.RequestCountLimit limit = [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.RequestCountLimit) ([CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getLimit()));
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setLong([CtLiteralImpl]6, [CtInvocationImpl][CtVariableReadImpl]limit.getRequestCount());
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]7, [CtLiteralImpl]null);
        } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.BANDWIDTH_TYPE.equalsIgnoreCase([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getType())) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.BandwidthLimit limit = [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.BandwidthLimit) ([CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getLimit()));
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setLong([CtLiteralImpl]6, [CtInvocationImpl][CtVariableReadImpl]limit.getDataAmount());
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]7, [CtInvocationImpl][CtVariableReadImpl]limit.getDataUnit());
        }
        [CtInvocationImpl][CtVariableReadImpl]policyStatement.setLong([CtLiteralImpl]8, [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getLimit().getUnitTime());
        [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]9, [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]policy.getDefaultQuotaPolicy().getLimit().getTimeUnit());
        [CtInvocationImpl][CtCommentImpl]// policyStatement.setBoolean(9, APIUtil.isContentAwarePolicy(policy));
        [CtVariableReadImpl]policyStatement.setBoolean([CtLiteralImpl]10, [CtInvocationImpl][CtVariableReadImpl]policy.isDeployed());
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isBlank([CtInvocationImpl][CtVariableReadImpl]policy.getUUID())) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]11, [CtInvocationImpl][CtVariableReadImpl]policy.getUUID());
        } else [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]policyStatement.setString([CtLiteralImpl]11, [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]java.util.UUID.randomUUID().toString());
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Populated common attributes of policy type objects to <code>policy</code>
     * from <code>resultSet</code>
     *
     * @param policy
     * 		initiallized {@link Policy} object to populate
     * @param resultSet
     * 		{@link ResultSet} with data to populate <code>policy</code>
     * @throws SQLException
     */
    private [CtTypeReferenceImpl]void setCommonPolicyDetails([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.Policy policy, [CtParameterImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet) throws [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.QuotaPolicy quotaPolicy = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.QuotaPolicy();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String prefix = [CtLiteralImpl]"";
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]policy instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.APIPolicy) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]prefix = [CtLiteralImpl]"DEFAULT_";
        }
        [CtInvocationImpl][CtVariableReadImpl]quotaPolicy.setType([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtBinaryOperatorImpl][CtVariableReadImpl]prefix + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.ThrottlePolicyConstants.COLUMN_QUOTA_POLICY_TYPE));
        [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtBinaryOperatorImpl][CtVariableReadImpl]prefix + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.ThrottlePolicyConstants.COLUMN_QUOTA_POLICY_TYPE).equalsIgnoreCase([CtTypeAccessImpl]PolicyConstants.REQUEST_COUNT_TYPE)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.RequestCountLimit reqLimit = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.RequestCountLimit();
            [CtInvocationImpl][CtVariableReadImpl]reqLimit.setUnitTime([CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtBinaryOperatorImpl][CtVariableReadImpl]prefix + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.ThrottlePolicyConstants.COLUMN_UNIT_TIME));
            [CtInvocationImpl][CtVariableReadImpl]reqLimit.setTimeUnit([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtBinaryOperatorImpl][CtVariableReadImpl]prefix + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.ThrottlePolicyConstants.COLUMN_TIME_UNIT));
            [CtInvocationImpl][CtVariableReadImpl]reqLimit.setRequestCount([CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtBinaryOperatorImpl][CtVariableReadImpl]prefix + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.ThrottlePolicyConstants.COLUMN_QUOTA));
            [CtInvocationImpl][CtVariableReadImpl]quotaPolicy.setLimit([CtVariableReadImpl]reqLimit);
        } else [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtBinaryOperatorImpl][CtVariableReadImpl]prefix + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.ThrottlePolicyConstants.COLUMN_QUOTA_POLICY_TYPE).equalsIgnoreCase([CtTypeAccessImpl]PolicyConstants.BANDWIDTH_TYPE)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.BandwidthLimit bandLimit = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.policy.BandwidthLimit();
            [CtInvocationImpl][CtVariableReadImpl]bandLimit.setUnitTime([CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtBinaryOperatorImpl][CtVariableReadImpl]prefix + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.ThrottlePolicyConstants.COLUMN_UNIT_TIME));
            [CtInvocationImpl][CtVariableReadImpl]bandLimit.setTimeUnit([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtBinaryOperatorImpl][CtVariableReadImpl]prefix + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.ThrottlePolicyConstants.COLUMN_TIME_UNIT));
            [CtInvocationImpl][CtVariableReadImpl]bandLimit.setDataAmount([CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtBinaryOperatorImpl][CtVariableReadImpl]prefix + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.ThrottlePolicyConstants.COLUMN_QUOTA));
            [CtInvocationImpl][CtVariableReadImpl]bandLimit.setDataUnit([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtBinaryOperatorImpl][CtVariableReadImpl]prefix + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.ThrottlePolicyConstants.COLUMN_QUOTA_UNIT));
            [CtInvocationImpl][CtVariableReadImpl]quotaPolicy.setLimit([CtVariableReadImpl]bandLimit);
        }
        [CtInvocationImpl][CtVariableReadImpl]policy.setUUID([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_UUID));
        [CtInvocationImpl][CtVariableReadImpl]policy.setDescription([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_DESCRIPTION));
        [CtInvocationImpl][CtVariableReadImpl]policy.setDisplayName([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_DISPLAY_NAME));
        [CtInvocationImpl][CtVariableReadImpl]policy.setPolicyId([CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_POLICY_ID));
        [CtInvocationImpl][CtVariableReadImpl]policy.setTenantId([CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_TENANT_ID));
        [CtInvocationImpl][CtVariableReadImpl]policy.setTenantDomain([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.identity.core.util.IdentityTenantUtil.getTenantDomain([CtInvocationImpl][CtVariableReadImpl]policy.getTenantId()));
        [CtInvocationImpl][CtVariableReadImpl]policy.setDefaultQuotaPolicy([CtVariableReadImpl]quotaPolicy);
        [CtInvocationImpl][CtVariableReadImpl]policy.setDeployed([CtInvocationImpl][CtVariableReadImpl]resultSet.getBoolean([CtTypeAccessImpl]ThrottlePolicyConstants.COLUMN_DEPLOYED));
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]boolean isPolicyExist([CtParameterImpl][CtTypeReferenceImpl]java.lang.String policyType, [CtParameterImpl][CtTypeReferenceImpl]int tenantId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String policyName) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement isExistStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isExist = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String policyTable = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_API.equalsIgnoreCase([CtVariableReadImpl]policyType)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]policyTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.api.model.policy.PolicyConstants.API_THROTTLE_POLICY_TABLE;
        } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_APP.equalsIgnoreCase([CtVariableReadImpl]policyType)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]policyTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.api.model.policy.PolicyConstants.POLICY_APPLICATION_TABLE;
        } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_GLOBAL.equalsIgnoreCase([CtVariableReadImpl]policyType)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]policyTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.api.model.policy.PolicyConstants.POLICY_GLOBAL_TABLE;
        } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_SUB.equalsIgnoreCase([CtVariableReadImpl]policyType)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]policyTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.api.model.policy.PolicyConstants.POLICY_SUBSCRIPTION_TABLE;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"SELECT " + [CtFieldReadImpl]org.wso2.carbon.apimgt.api.model.policy.PolicyConstants.POLICY_ID) + [CtLiteralImpl]" FROM ") + [CtVariableReadImpl]policyTable) + [CtLiteralImpl]" WHERE TENANT_ID =? AND NAME = ? ";
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]true);
            [CtAssignmentImpl][CtVariableWriteImpl]isExistStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]isExistStatement.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantId);
            [CtInvocationImpl][CtVariableReadImpl]isExistStatement.setString([CtLiteralImpl]2, [CtVariableReadImpl]policyName);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtInvocationImpl][CtVariableReadImpl]isExistStatement.executeQuery();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]result != [CtLiteralImpl]null) && [CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]isExist = [CtLiteralImpl]true;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to check is exist: " + [CtVariableReadImpl]policyName) + [CtLiteralImpl]'-') + [CtVariableReadImpl]tenantId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]isExistStatement, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
        [CtReturnImpl]return [CtVariableReadImpl]isExist;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]boolean isPolicyDeployed([CtParameterImpl][CtTypeReferenceImpl]java.lang.String policyType, [CtParameterImpl][CtTypeReferenceImpl]int tenantId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String policyName) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement isExistStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isDeployed = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String policyTable = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_API.equalsIgnoreCase([CtVariableReadImpl]policyType)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]policyTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.api.model.policy.PolicyConstants.API_THROTTLE_POLICY_TABLE;
        } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_APP.equalsIgnoreCase([CtVariableReadImpl]policyType)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]policyTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.api.model.policy.PolicyConstants.POLICY_APPLICATION_TABLE;
        } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_GLOBAL.equalsIgnoreCase([CtVariableReadImpl]policyType)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]policyTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.api.model.policy.PolicyConstants.POLICY_GLOBAL_TABLE;
        } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_SUB.equalsIgnoreCase([CtVariableReadImpl]policyType)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]policyTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.api.model.policy.PolicyConstants.POLICY_SUBSCRIPTION_TABLE;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"SELECT " + [CtFieldReadImpl]org.wso2.carbon.apimgt.api.model.policy.PolicyConstants.POLICY_IS_DEPLOYED) + [CtLiteralImpl]" FROM ") + [CtVariableReadImpl]policyTable) + [CtLiteralImpl]" WHERE TENANT_ID =? AND NAME = ? ";
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]true);
            [CtAssignmentImpl][CtVariableWriteImpl]isExistStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]isExistStatement.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantId);
            [CtInvocationImpl][CtVariableReadImpl]isExistStatement.setString([CtLiteralImpl]2, [CtVariableReadImpl]policyName);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet result = [CtInvocationImpl][CtVariableReadImpl]isExistStatement.executeQuery();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]result != [CtLiteralImpl]null) && [CtInvocationImpl][CtVariableReadImpl]result.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]isDeployed = [CtInvocationImpl][CtVariableReadImpl]result.getBoolean([CtTypeAccessImpl]PolicyConstants.POLICY_IS_DEPLOYED);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to check is exist: " + [CtVariableReadImpl]policyName) + [CtLiteralImpl]'-') + [CtVariableReadImpl]tenantId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]isExistStatement, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
        [CtReturnImpl]return [CtVariableReadImpl]isDeployed;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add a block condition
     *
     * @return uuid of the block condition if successfully added
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.BlockConditionsDTO addBlockConditions([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.BlockConditionsDTO blockConditionsDTO) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement insertPreparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean status = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean valid = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String uuid = [CtInvocationImpl][CtVariableReadImpl]blockConditionsDTO.getUUID();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String conditionType = [CtInvocationImpl][CtVariableReadImpl]blockConditionsDTO.getConditionType();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String conditionValue = [CtInvocationImpl][CtVariableReadImpl]blockConditionsDTO.getConditionValue();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain = [CtInvocationImpl][CtVariableReadImpl]blockConditionsDTO.getTenantDomain();
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.ADD_BLOCK_CONDITIONS_SQL;
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]APIConstants.BLOCKING_CONDITIONS_API.equals([CtVariableReadImpl]conditionType)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String extractedTenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomainFromRequestURL([CtVariableReadImpl]conditionValue);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]extractedTenantDomain == [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]extractedTenantDomain = [CtFieldReadImpl]org.wso2.carbon.utils.multitenancy.MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;
                }
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]tenantDomain.equals([CtVariableReadImpl]extractedTenantDomain) && [CtInvocationImpl]isValidContext([CtVariableReadImpl]conditionValue)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]valid = [CtLiteralImpl]true;
                } else [CtBlockImpl]{
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtBinaryOperatorImpl][CtLiteralImpl]"Couldn't Save Block Condition Due to Invalid API Context " + [CtVariableReadImpl]conditionValue);
                }
            } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]APIConstants.BLOCKING_CONDITIONS_APPLICATION.equals([CtVariableReadImpl]conditionType)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String appArray[] = [CtInvocationImpl][CtVariableReadImpl]conditionValue.split([CtLiteralImpl]":");
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtFieldReadImpl][CtVariableReadImpl]appArray.length > [CtLiteralImpl]1) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String appOwner = [CtArrayReadImpl][CtVariableReadImpl]appArray[[CtLiteralImpl]0];
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String appName = [CtArrayReadImpl][CtVariableReadImpl]appArray[[CtLiteralImpl]1];
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtVariableReadImpl]appOwner).equals([CtVariableReadImpl]tenantDomain) && [CtInvocationImpl]isValidApplication([CtVariableReadImpl]appOwner, [CtVariableReadImpl]appName)) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]valid = [CtLiteralImpl]true;
                    } else [CtBlockImpl]{
                        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Couldn't Save Block Condition Due to Invalid Application " + [CtLiteralImpl]"name ") + [CtVariableReadImpl]appName) + [CtLiteralImpl]" from Application ") + [CtLiteralImpl]"Owner ") + [CtVariableReadImpl]appOwner);
                    }
                }
            } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]APIConstants.BLOCKING_CONDITIONS_USER.equals([CtVariableReadImpl]conditionType)) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtVariableReadImpl]conditionValue).equals([CtVariableReadImpl]tenantDomain)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]valid = [CtLiteralImpl]true;
                } else [CtBlockImpl]{
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtBinaryOperatorImpl][CtLiteralImpl]"Invalid User in Tenant Domain " + [CtVariableReadImpl]tenantDomain);
                }
            } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]APIConstants.BLOCKING_CONDITIONS_IP.equals([CtVariableReadImpl]conditionType) || [CtInvocationImpl][CtTypeAccessImpl]APIConstants.BLOCK_CONDITION_IP_RANGE.equals([CtVariableReadImpl]conditionType)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]valid = [CtLiteralImpl]true;
            }
            [CtIfImpl]if ([CtVariableReadImpl]valid) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
                [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isBlockConditionExist([CtVariableReadImpl]conditionType, [CtVariableReadImpl]conditionValue, [CtVariableReadImpl]tenantDomain, [CtVariableReadImpl]connection)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String dbProductName = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]connection.getMetaData().getDatabaseProductName();
                    [CtAssignmentImpl][CtVariableWriteImpl]insertPreparedStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.DBUtils.getConvertedAutoGeneratedColumnName([CtVariableReadImpl]dbProductName, [CtLiteralImpl]"CONDITION_ID") });
                    [CtInvocationImpl][CtVariableReadImpl]insertPreparedStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]conditionType);
                    [CtInvocationImpl][CtVariableReadImpl]insertPreparedStatement.setString([CtLiteralImpl]2, [CtVariableReadImpl]conditionValue);
                    [CtInvocationImpl][CtVariableReadImpl]insertPreparedStatement.setString([CtLiteralImpl]3, [CtLiteralImpl]"TRUE");
                    [CtInvocationImpl][CtVariableReadImpl]insertPreparedStatement.setString([CtLiteralImpl]4, [CtVariableReadImpl]tenantDomain);
                    [CtInvocationImpl][CtVariableReadImpl]insertPreparedStatement.setString([CtLiteralImpl]5, [CtVariableReadImpl]uuid);
                    [CtInvocationImpl][CtVariableReadImpl]insertPreparedStatement.execute();
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet generatedKeys = [CtInvocationImpl][CtVariableReadImpl]insertPreparedStatement.getGeneratedKeys();
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]generatedKeys != [CtLiteralImpl]null) && [CtInvocationImpl][CtVariableReadImpl]generatedKeys.next()) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]blockConditionsDTO.setConditionId([CtInvocationImpl][CtVariableReadImpl]generatedKeys.getInt([CtLiteralImpl]1));
                    }
                    [CtInvocationImpl][CtVariableReadImpl]connection.commit();
                    [CtAssignmentImpl][CtVariableWriteImpl]status = [CtLiteralImpl]true;
                } else [CtBlockImpl]{
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.BlockConditionAlreadyExistsException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Condition with type: " + [CtVariableReadImpl]conditionType) + [CtLiteralImpl]", value: ") + [CtVariableReadImpl]conditionValue) + [CtLiteralImpl]" already exists");
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to rollback adding Block condition : " + [CtVariableReadImpl]conditionType) + [CtLiteralImpl]" and ") + [CtVariableReadImpl]conditionValue, [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to add Block condition : " + [CtVariableReadImpl]conditionType) + [CtLiteralImpl]" and ") + [CtVariableReadImpl]conditionValue, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]insertPreparedStatement, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
        [CtIfImpl]if ([CtVariableReadImpl]status) [CtBlockImpl]{
            [CtReturnImpl]return [CtVariableReadImpl]blockConditionsDTO;
        } else [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]null;
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get details of a block condition by Id
     *
     * @param conditionId
     * 		id of the condition
     * @return Block conditoin represented by the UUID
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.BlockConditionsDTO getBlockCondition([CtParameterImpl][CtTypeReferenceImpl]int conditionId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement selectPreparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.BlockConditionsDTO blockCondition = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.GET_BLOCK_CONDITION_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]true);
            [CtAssignmentImpl][CtVariableWriteImpl]selectPreparedStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]selectPreparedStatement.setInt([CtLiteralImpl]1, [CtVariableReadImpl]conditionId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]selectPreparedStatement.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]blockCondition = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.BlockConditionsDTO();
                [CtInvocationImpl][CtVariableReadImpl]blockCondition.setEnabled([CtInvocationImpl][CtVariableReadImpl]resultSet.getBoolean([CtLiteralImpl]"ENABLED"));
                [CtInvocationImpl][CtVariableReadImpl]blockCondition.setConditionType([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"TYPE"));
                [CtInvocationImpl][CtVariableReadImpl]blockCondition.setConditionValue([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"VALUE"));
                [CtInvocationImpl][CtVariableReadImpl]blockCondition.setConditionId([CtVariableReadImpl]conditionId);
                [CtInvocationImpl][CtVariableReadImpl]blockCondition.setTenantDomain([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"DOMAIN"));
                [CtInvocationImpl][CtVariableReadImpl]blockCondition.setUUID([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"UUID"));
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to rollback getting Block condition with id " + [CtVariableReadImpl]conditionId, [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get Block condition with id " + [CtVariableReadImpl]conditionId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]selectPreparedStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]blockCondition;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get details of a block condition by UUID
     *
     * @param uuid
     * 		uuid of the block condition
     * @return Block conditoin represented by the UUID
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.BlockConditionsDTO getBlockConditionByUUID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String uuid) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement selectPreparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.BlockConditionsDTO blockCondition = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.GET_BLOCK_CONDITION_BY_UUID_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]true);
            [CtAssignmentImpl][CtVariableWriteImpl]selectPreparedStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]selectPreparedStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]uuid);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]selectPreparedStatement.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]blockCondition = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.BlockConditionsDTO();
                [CtInvocationImpl][CtVariableReadImpl]blockCondition.setEnabled([CtInvocationImpl][CtVariableReadImpl]resultSet.getBoolean([CtLiteralImpl]"ENABLED"));
                [CtInvocationImpl][CtVariableReadImpl]blockCondition.setConditionType([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"TYPE"));
                [CtInvocationImpl][CtVariableReadImpl]blockCondition.setConditionValue([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"VALUE"));
                [CtInvocationImpl][CtVariableReadImpl]blockCondition.setConditionId([CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"CONDITION_ID"));
                [CtInvocationImpl][CtVariableReadImpl]blockCondition.setTenantDomain([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"DOMAIN"));
                [CtInvocationImpl][CtVariableReadImpl]blockCondition.setUUID([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"UUID"));
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to rollback getting Block condition by uuid " + [CtVariableReadImpl]uuid, [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get Block condition by uuid " + [CtVariableReadImpl]uuid, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]selectPreparedStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]blockCondition;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.BlockConditionsDTO> getBlockConditions([CtParameterImpl][CtTypeReferenceImpl]java.lang.String tenantDomain) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement selectPreparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.BlockConditionsDTO> blockConditionsDTOList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.BlockConditionsDTO>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.GET_BLOCK_CONDITIONS_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]true);
            [CtAssignmentImpl][CtVariableWriteImpl]selectPreparedStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]selectPreparedStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]tenantDomain);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]selectPreparedStatement.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.BlockConditionsDTO blockConditionsDTO = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.BlockConditionsDTO();
                [CtInvocationImpl][CtVariableReadImpl]blockConditionsDTO.setEnabled([CtInvocationImpl][CtVariableReadImpl]resultSet.getBoolean([CtLiteralImpl]"ENABLED"));
                [CtInvocationImpl][CtVariableReadImpl]blockConditionsDTO.setConditionType([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"TYPE"));
                [CtInvocationImpl][CtVariableReadImpl]blockConditionsDTO.setConditionValue([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"VALUE"));
                [CtInvocationImpl][CtVariableReadImpl]blockConditionsDTO.setConditionId([CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"CONDITION_ID"));
                [CtInvocationImpl][CtVariableReadImpl]blockConditionsDTO.setUUID([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"UUID"));
                [CtInvocationImpl][CtVariableReadImpl]blockConditionsDTO.setTenantDomain([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"DOMAIN"));
                [CtInvocationImpl][CtVariableReadImpl]blockConditionsDTOList.add([CtVariableReadImpl]blockConditionsDTO);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to rollback getting Block conditions ", [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get Block conditions", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]selectPreparedStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]blockConditionsDTOList;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Update the block condition state true (Enabled) /false (Disabled) given the UUID
     *
     * @param conditionId
     * 		id of the block condition
     * @param state
     * 		blocking state
     * @return true if the operation was success
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]boolean updateBlockConditionState([CtParameterImpl][CtTypeReferenceImpl]int conditionId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String state) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement updateBlockConditionPreparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean status = [CtLiteralImpl]false;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.UPDATE_BLOCK_CONDITION_STATE_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]updateBlockConditionPreparedStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]updateBlockConditionPreparedStatement.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]state.toUpperCase());
            [CtInvocationImpl][CtVariableReadImpl]updateBlockConditionPreparedStatement.setInt([CtLiteralImpl]2, [CtVariableReadImpl]conditionId);
            [CtInvocationImpl][CtVariableReadImpl]updateBlockConditionPreparedStatement.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
            [CtAssignmentImpl][CtVariableWriteImpl]status = [CtLiteralImpl]true;
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to rollback updating Block condition with condition id " + [CtVariableReadImpl]conditionId, [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to update Block condition with condition id " + [CtVariableReadImpl]conditionId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]updateBlockConditionPreparedStatement, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
        [CtReturnImpl]return [CtVariableReadImpl]status;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Update the block condition state true (Enabled) /false (Disabled) given the UUID
     *
     * @param uuid
     * 		UUID of the block condition
     * @param state
     * 		blocking state
     * @return true if the operation was success
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]boolean updateBlockConditionStateByUUID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String uuid, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String state) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement updateBlockConditionPreparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean status = [CtLiteralImpl]false;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.UPDATE_BLOCK_CONDITION_STATE_BY_UUID_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]updateBlockConditionPreparedStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]updateBlockConditionPreparedStatement.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]state.toUpperCase());
            [CtInvocationImpl][CtVariableReadImpl]updateBlockConditionPreparedStatement.setString([CtLiteralImpl]2, [CtVariableReadImpl]uuid);
            [CtInvocationImpl][CtVariableReadImpl]updateBlockConditionPreparedStatement.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
            [CtAssignmentImpl][CtVariableWriteImpl]status = [CtLiteralImpl]true;
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to rollback updating Block condition with condition UUID " + [CtVariableReadImpl]uuid, [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to update Block condition with condition UUID " + [CtVariableReadImpl]uuid, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]updateBlockConditionPreparedStatement, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
        [CtReturnImpl]return [CtVariableReadImpl]status;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Delete the block condition given the id
     *
     * @param conditionId
     * 		id of the condition
     * @return true if successfully deleted
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]boolean deleteBlockCondition([CtParameterImpl][CtTypeReferenceImpl]int conditionId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement deleteBlockConditionPreparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean status = [CtLiteralImpl]false;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.DELETE_BLOCK_CONDITION_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]deleteBlockConditionPreparedStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]deleteBlockConditionPreparedStatement.setInt([CtLiteralImpl]1, [CtVariableReadImpl]conditionId);
            [CtAssignmentImpl][CtVariableWriteImpl]status = [CtInvocationImpl][CtVariableReadImpl]deleteBlockConditionPreparedStatement.execute();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
            [CtAssignmentImpl][CtVariableWriteImpl]status = [CtLiteralImpl]true;
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to rollback deleting Block condition with condition id " + [CtVariableReadImpl]conditionId, [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to delete Block condition with condition id " + [CtVariableReadImpl]conditionId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]deleteBlockConditionPreparedStatement, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
        [CtReturnImpl]return [CtVariableReadImpl]status;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Delete the block condition given the id
     *
     * @param uuid
     * 		UUID of the block condition
     * @return true if successfully deleted
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]boolean deleteBlockConditionByUUID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String uuid) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement deleteBlockConditionPreparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean status = [CtLiteralImpl]false;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.DELETE_BLOCK_CONDITION_BY_UUID_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]deleteBlockConditionPreparedStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]deleteBlockConditionPreparedStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]uuid);
            [CtAssignmentImpl][CtVariableWriteImpl]status = [CtInvocationImpl][CtVariableReadImpl]deleteBlockConditionPreparedStatement.execute();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
            [CtAssignmentImpl][CtVariableWriteImpl]status = [CtLiteralImpl]true;
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to rollback deleting Block condition with condition UUID " + [CtVariableReadImpl]uuid, [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to delete Block condition with condition UUID " + [CtVariableReadImpl]uuid, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]deleteBlockConditionPreparedStatement, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
        [CtReturnImpl]return [CtVariableReadImpl]status;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]boolean isValidContext([CtParameterImpl][CtTypeReferenceImpl]java.lang.String context) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement validateContextPreparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean status = [CtLiteralImpl]false;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtLiteralImpl]"select count(*) COUNT from AM_API where CONTEXT=?";
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]validateContextPreparedStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]validateContextPreparedStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]context);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]validateContextPreparedStatement.executeQuery();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]resultSet.next() && [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]resultSet.getInt([CtLiteralImpl]"COUNT") > [CtLiteralImpl]0)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]status = [CtLiteralImpl]true;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to rollback checking Block condition with context " + [CtVariableReadImpl]context, [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to check Block condition with context " + [CtVariableReadImpl]context, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]validateContextPreparedStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]status;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]boolean isValidApplication([CtParameterImpl][CtTypeReferenceImpl]java.lang.String appOwner, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String appName) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement validateContextPreparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean status = [CtLiteralImpl]false;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtBinaryOperatorImpl][CtLiteralImpl]"SELECT * FROM AM_APPLICATION App,AM_SUBSCRIBER SUB  WHERE App.NAME=? AND App" + [CtLiteralImpl]".SUBSCRIBER_ID=SUB.SUBSCRIBER_ID AND SUB.USER_ID=?";
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]validateContextPreparedStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]validateContextPreparedStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]appName);
            [CtInvocationImpl][CtVariableReadImpl]validateContextPreparedStatement.setString([CtLiteralImpl]2, [CtVariableReadImpl]appOwner);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]validateContextPreparedStatement.executeQuery();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]status = [CtLiteralImpl]true;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to rollback checking Block condition with Application Name " + [CtVariableReadImpl]appName) + [CtLiteralImpl]" with ") + [CtLiteralImpl]"Application Owner") + [CtVariableReadImpl]appOwner, [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to check Block condition with Application Name " + [CtVariableReadImpl]appName) + [CtLiteralImpl]" with ") + [CtLiteralImpl]"Application Owner") + [CtVariableReadImpl]appOwner, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]validateContextPreparedStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]status;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.lang.String getAPILevelTier([CtParameterImpl][CtTypeReferenceImpl]int id) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement selectPreparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String apiLevelTier = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_DETAILS_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]true);
            [CtAssignmentImpl][CtVariableWriteImpl]selectPreparedStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtBinaryOperatorImpl][CtVariableReadImpl]query + [CtLiteralImpl]" WHERE API_ID = ?");
            [CtInvocationImpl][CtVariableReadImpl]selectPreparedStatement.setInt([CtLiteralImpl]1, [CtVariableReadImpl]id);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]selectPreparedStatement.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]apiLevelTier = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"API_TIER");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to rollback getting API Details", [CtVariableReadImpl]ex);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get API Details", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]selectPreparedStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]apiLevelTier;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]boolean isBlockConditionExist([CtParameterImpl][CtTypeReferenceImpl]java.lang.String conditionType, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String conditionValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String tenantDomain, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection connection) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement checkIsExistPreparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet checkIsResultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean status = [CtLiteralImpl]false;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String isExistQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.BLOCK_CONDITION_EXIST_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]checkIsExistPreparedStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]isExistQuery);
            [CtInvocationImpl][CtVariableReadImpl]checkIsExistPreparedStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]tenantDomain);
            [CtInvocationImpl][CtVariableReadImpl]checkIsExistPreparedStatement.setString([CtLiteralImpl]2, [CtVariableReadImpl]conditionType);
            [CtInvocationImpl][CtVariableReadImpl]checkIsExistPreparedStatement.setString([CtLiteralImpl]3, [CtVariableReadImpl]conditionValue);
            [CtAssignmentImpl][CtVariableWriteImpl]checkIsResultSet = [CtInvocationImpl][CtVariableReadImpl]checkIsExistPreparedStatement.executeQuery();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]checkIsResultSet.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]status = [CtLiteralImpl]true;
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtLiteralImpl]"Couldn't check the Block Condition Exist";
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg, [CtVariableReadImpl]e);
            [CtInvocationImpl]handleException([CtVariableReadImpl]msg, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]checkIsExistPreparedStatement, [CtLiteralImpl]null, [CtVariableReadImpl]checkIsResultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]status;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]boolean hasSubscription([CtParameterImpl][CtTypeReferenceImpl]java.lang.String tierId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String tenantDomainWithAt, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String policyLevel) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement checkIsExistPreparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet checkIsResultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean status = [CtLiteralImpl]false;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtCommentImpl]/* String apiProvider = tenantId; */
            [CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]true);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String isExistQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.TIER_HAS_SUBSCRIPTION;
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_API.equals([CtVariableReadImpl]policyLevel)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]isExistQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.TIER_ATTACHED_TO_RESOURCES_API;
            } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_APP.equals([CtVariableReadImpl]policyLevel)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]isExistQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.TIER_ATTACHED_TO_APPLICATION;
            } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_SUB.equals([CtVariableReadImpl]policyLevel)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]isExistQuery = [CtFieldReadImpl]SQLConstants.ThrottleSQLConstants.TIER_HAS_SUBSCRIPTION;
            }
            [CtAssignmentImpl][CtVariableWriteImpl]checkIsExistPreparedStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]isExistQuery);
            [CtInvocationImpl][CtVariableReadImpl]checkIsExistPreparedStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]tierId);
            [CtInvocationImpl][CtVariableReadImpl]checkIsExistPreparedStatement.setString([CtLiteralImpl]2, [CtBinaryOperatorImpl][CtLiteralImpl]"%" + [CtVariableReadImpl]tenantDomainWithAt);
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]PolicyConstants.POLICY_LEVEL_API.equals([CtVariableReadImpl]policyLevel)) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]checkIsExistPreparedStatement.setString([CtLiteralImpl]3, [CtVariableReadImpl]tierId);
                [CtInvocationImpl][CtVariableReadImpl]checkIsExistPreparedStatement.setString([CtLiteralImpl]4, [CtBinaryOperatorImpl][CtLiteralImpl]"%" + [CtVariableReadImpl]tenantDomainWithAt);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]checkIsResultSet = [CtInvocationImpl][CtVariableReadImpl]checkIsExistPreparedStatement.executeQuery();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]checkIsResultSet != [CtLiteralImpl]null) && [CtInvocationImpl][CtVariableReadImpl]checkIsResultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]int count = [CtInvocationImpl][CtVariableReadImpl]checkIsResultSet.getInt([CtLiteralImpl]1);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]count > [CtLiteralImpl]0) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]status = [CtLiteralImpl]true;
                }
            }
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]true);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtLiteralImpl]"Couldn't check Subscription Exist";
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg, [CtVariableReadImpl]e);
            [CtInvocationImpl]handleException([CtVariableReadImpl]msg, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]checkIsExistPreparedStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]checkIsResultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]status;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get a list of access tokens issued for given user under the given app of given owner. Returned object carries
     * consumer key and secret information related to the access token
     *
     * @param userName
     * 		end user name
     * @param appName
     * 		application name
     * @param appOwner
     * 		application owner user name
     * @return list of tokens
     * @throws SQLException
     * 		in case of a DB issue
     */
    public static [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.AccessTokenInfo> getAccessTokenListForUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String appName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String appOwner) throws [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.AccessTokenInfo> accessTokens = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.AccessTokenInfo>([CtLiteralImpl]5);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement consumerSecretIDPS = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.GET_ACCESS_TOKENS_BY_USER_SQL);
        [CtInvocationImpl][CtVariableReadImpl]consumerSecretIDPS.setString([CtLiteralImpl]1, [CtVariableReadImpl]userName);
        [CtInvocationImpl][CtVariableReadImpl]consumerSecretIDPS.setString([CtLiteralImpl]2, [CtVariableReadImpl]appName);
        [CtInvocationImpl][CtVariableReadImpl]consumerSecretIDPS.setString([CtLiteralImpl]3, [CtVariableReadImpl]appOwner);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet consumerSecretIDResult = [CtInvocationImpl][CtVariableReadImpl]consumerSecretIDPS.executeQuery();
        [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]consumerSecretIDResult.next()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String consumerKey = [CtInvocationImpl][CtVariableReadImpl]consumerSecretIDResult.getString([CtLiteralImpl]1);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String consumerSecret = [CtInvocationImpl][CtVariableReadImpl]consumerSecretIDResult.getString([CtLiteralImpl]2);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String accessToken = [CtInvocationImpl][CtVariableReadImpl]consumerSecretIDResult.getString([CtLiteralImpl]3);
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.AccessTokenInfo accessTokenInfo = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.AccessTokenInfo();
            [CtInvocationImpl][CtVariableReadImpl]accessTokenInfo.setConsumerKey([CtVariableReadImpl]consumerKey);
            [CtInvocationImpl][CtVariableReadImpl]accessTokenInfo.setConsumerSecret([CtVariableReadImpl]consumerSecret);
            [CtInvocationImpl][CtVariableReadImpl]accessTokenInfo.setAccessToken([CtVariableReadImpl]accessToken);
            [CtInvocationImpl][CtVariableReadImpl]accessTokens.add([CtVariableReadImpl]accessTokenInfo);
        } 
        [CtReturnImpl]return [CtVariableReadImpl]accessTokens;
    }

    [CtMethodImpl]public [CtArrayTypeReferenceImpl]java.lang.String[] getAPIDetailsByContext([CtParameterImpl][CtTypeReferenceImpl]java.lang.String context) [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String apiName = [CtLiteralImpl]"";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String apiProvider = [CtLiteralImpl]"";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sql = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_API_FOR_CONTEXT_TEMPLATE_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]true);
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sql);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]context);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]apiName = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_NAME");
                [CtAssignmentImpl][CtVariableWriteImpl]apiProvider = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_PROVIDER");
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtBinaryOperatorImpl][CtLiteralImpl]"Error occurred while fetching data: " + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtBinaryOperatorImpl][CtLiteralImpl]"Error occurred while fetching data: " + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]e);
            }
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]apiName, [CtVariableReadImpl]apiProvider };
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Check for the subscription of the user
     *
     * @param infoDTO
     * @param context
     * @param version
     * @param consumerKey
     * @return APIKeyValidationInfoDTO including data of api and application
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APIKeyValidationInfoDTO validateSubscriptionDetails([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APIKeyValidationInfoDTO infoDTO, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String context, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String version, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String consumerKey, [CtParameterImpl][CtTypeReferenceImpl]boolean defaultVersionInvoked) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String apiTenantDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomainFromRequestURL([CtVariableReadImpl]context);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]apiTenantDomain == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]apiTenantDomain = [CtFieldReadImpl]org.wso2.carbon.utils.multitenancy.MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]int apiOwnerTenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantIdFromTenantDomain([CtVariableReadImpl]apiTenantDomain);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sql;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isAdvancedThrottleEnabled = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.isAdvanceThrottlingEnabled();
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isAdvancedThrottleEnabled) [CtBlockImpl]{
            [CtIfImpl]if ([CtVariableReadImpl]defaultVersionInvoked) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sql = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.VALIDATE_SUBSCRIPTION_KEY_DEFAULT_SQL;
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sql = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.VALIDATE_SUBSCRIPTION_KEY_VERSION_SQL;
            }
        } else [CtIfImpl]if ([CtVariableReadImpl]defaultVersionInvoked) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sql = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADVANCED_VALIDATE_SUBSCRIPTION_KEY_DEFAULT_SQL;
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sql = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADVANCED_VALIDATE_SUBSCRIPTION_KEY_VERSION_SQL;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]true);
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sql);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]context);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]consumerKey);
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isAdvancedThrottleEnabled) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]defaultVersionInvoked) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtVariableReadImpl]version);
                }
            } else [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]3, [CtVariableReadImpl]apiOwnerTenantId);
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]defaultVersionInvoked) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]4, [CtVariableReadImpl]version);
                }
            }
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriptionStatus = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"SUB_STATUS");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String type = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"KEY_TYPE");
                [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.BLOCKED.equals([CtVariableReadImpl]subscriptionStatus)) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]infoDTO.setValidationStatus([CtTypeAccessImpl]APIConstants.KeyValidationStatus.API_BLOCKED);
                    [CtInvocationImpl][CtVariableReadImpl]infoDTO.setAuthorized([CtLiteralImpl]false);
                    [CtReturnImpl]return [CtVariableReadImpl]infoDTO;
                } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.ON_HOLD.equals([CtVariableReadImpl]subscriptionStatus) || [CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.REJECTED.equals([CtVariableReadImpl]subscriptionStatus)) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]infoDTO.setValidationStatus([CtTypeAccessImpl]APIConstants.KeyValidationStatus.SUBSCRIPTION_INACTIVE);
                    [CtInvocationImpl][CtVariableReadImpl]infoDTO.setAuthorized([CtLiteralImpl]false);
                    [CtReturnImpl]return [CtVariableReadImpl]infoDTO;
                } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]APIConstants.SubscriptionStatus.PROD_ONLY_BLOCKED.equals([CtVariableReadImpl]subscriptionStatus) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]APIConstants.API_KEY_TYPE_SANDBOX.equals([CtVariableReadImpl]type))) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]infoDTO.setValidationStatus([CtTypeAccessImpl]APIConstants.KeyValidationStatus.API_BLOCKED);
                    [CtInvocationImpl][CtVariableReadImpl]infoDTO.setType([CtVariableReadImpl]type);
                    [CtInvocationImpl][CtVariableReadImpl]infoDTO.setAuthorized([CtLiteralImpl]false);
                    [CtReturnImpl]return [CtVariableReadImpl]infoDTO;
                }
                [CtLocalVariableImpl]final [CtTypeReferenceImpl]java.lang.String API_PROVIDER = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_PROVIDER");
                [CtLocalVariableImpl]final [CtTypeReferenceImpl]java.lang.String SUB_TIER = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"TIER_ID");
                [CtLocalVariableImpl]final [CtTypeReferenceImpl]java.lang.String APP_TIER = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_TIER");
                [CtInvocationImpl][CtVariableReadImpl]infoDTO.setTier([CtVariableReadImpl]SUB_TIER);
                [CtInvocationImpl][CtVariableReadImpl]infoDTO.setSubscriber([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"USER_ID"));
                [CtInvocationImpl][CtVariableReadImpl]infoDTO.setApplicationId([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_ID"));
                [CtInvocationImpl][CtVariableReadImpl]infoDTO.setApiName([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_NAME"));
                [CtInvocationImpl][CtVariableReadImpl]infoDTO.setApiPublisher([CtVariableReadImpl]API_PROVIDER);
                [CtInvocationImpl][CtVariableReadImpl]infoDTO.setApplicationName([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NAME"));
                [CtInvocationImpl][CtVariableReadImpl]infoDTO.setApplicationTier([CtVariableReadImpl]APP_TIER);
                [CtInvocationImpl][CtVariableReadImpl]infoDTO.setType([CtVariableReadImpl]type);
                [CtIfImpl][CtCommentImpl]// Advanced Level Throttling Related Properties
                if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.isAdvanceThrottlingEnabled()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String apiTier = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_TIER");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriberUserId = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"USER_ID");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriberTenant = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantDomain([CtVariableReadImpl]subscriberUserId);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int apiId = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"API_ID");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int subscriberTenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtVariableReadImpl]subscriberUserId);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]int apiTenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtVariableReadImpl]API_PROVIDER);
                    [CtLocalVariableImpl][CtCommentImpl]// TODO isContentAware
                    [CtTypeReferenceImpl]boolean isContentAware = [CtInvocationImpl]isAnyPolicyContentAware([CtVariableReadImpl]conn, [CtVariableReadImpl]apiTier, [CtVariableReadImpl]APP_TIER, [CtVariableReadImpl]SUB_TIER, [CtVariableReadImpl]subscriberTenantId, [CtVariableReadImpl]apiTenantId, [CtVariableReadImpl]apiId);
                    [CtInvocationImpl][CtVariableReadImpl]infoDTO.setContentAware([CtVariableReadImpl]isContentAware);
                    [CtLocalVariableImpl][CtCommentImpl]// TODO this must implement as a part of throttling implementation.
                    [CtTypeReferenceImpl]int spikeArrest = [CtLiteralImpl]0;
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String apiLevelThrottlingKey = [CtLiteralImpl]"api_level_throttling_key";
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"RATE_LIMIT_COUNT") > [CtLiteralImpl]0) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]spikeArrest = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"RATE_LIMIT_COUNT");
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String spikeArrestUnit = [CtLiteralImpl]null;
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"RATE_LIMIT_TIME_UNIT") != [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]spikeArrestUnit = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"RATE_LIMIT_TIME_UNIT");
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]boolean stopOnQuotaReach = [CtInvocationImpl][CtVariableReadImpl]rs.getBoolean([CtLiteralImpl]"STOP_ON_QUOTA_REACH");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> list = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
                    [CtInvocationImpl][CtVariableReadImpl]list.add([CtVariableReadImpl]apiLevelThrottlingKey);
                    [CtInvocationImpl][CtVariableReadImpl]infoDTO.setSpikeArrestLimit([CtVariableReadImpl]spikeArrest);
                    [CtInvocationImpl][CtVariableReadImpl]infoDTO.setSpikeArrestUnit([CtVariableReadImpl]spikeArrestUnit);
                    [CtInvocationImpl][CtVariableReadImpl]infoDTO.setStopOnQuotaReach([CtVariableReadImpl]stopOnQuotaReach);
                    [CtInvocationImpl][CtVariableReadImpl]infoDTO.setSubscriberTenantDomain([CtVariableReadImpl]subscriberTenant);
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]apiTier != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]apiTier.trim().length() > [CtLiteralImpl]0)) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]infoDTO.setApiTier([CtVariableReadImpl]apiTier);
                    }
                    [CtInvocationImpl][CtCommentImpl]// We also need to set throttling data list associated with given API. This need to have policy id and
                    [CtCommentImpl]// condition id list for all throttling tiers associated with this API.
                    [CtVariableReadImpl]infoDTO.setThrottlingDataList([CtVariableReadImpl]list);
                }
                [CtInvocationImpl][CtVariableReadImpl]infoDTO.setAuthorized([CtLiteralImpl]true);
                [CtReturnImpl]return [CtVariableReadImpl]infoDTO;
            }
            [CtInvocationImpl][CtVariableReadImpl]infoDTO.setAuthorized([CtLiteralImpl]false);
            [CtInvocationImpl][CtVariableReadImpl]infoDTO.setValidationStatus([CtTypeAccessImpl]APIConstants.KeyValidationStatus.API_AUTH_RESOURCE_FORBIDDEN);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Exception occurred while validating Subscription.", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtBinaryOperatorImpl][CtLiteralImpl]"Error occurred while fetching data: " + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]e);
            }
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]infoDTO;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns a Prepared statement after setting all the dynamic parameters. Dynamic parameters will be added in
     * the place of $params in query string
     *
     * @param conn
     * 		connection which will be used to create a prepared statement
     * @param query
     * 		dynamic query string which will be modified.
     * @param params
     * 		list of parameters
     * @param startingParamIndex
     * 		index from which the parameter numbering will start.
     * @return  * @throws SQLException
     */
    public [CtTypeReferenceImpl]java.sql.PreparedStatement fillQueryParams([CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String query, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] params, [CtParameterImpl][CtTypeReferenceImpl]int startingParamIndex) throws [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String paramString = [CtLiteralImpl]"";
        [CtForImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]int i = [CtLiteralImpl]1; [CtBinaryOperatorImpl][CtVariableReadImpl]i <= [CtFieldReadImpl][CtVariableReadImpl]params.length; [CtUnaryOperatorImpl][CtVariableWriteImpl]i++) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]i == [CtFieldReadImpl][CtVariableReadImpl]params.length) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]paramString = [CtBinaryOperatorImpl][CtVariableReadImpl]paramString + [CtLiteralImpl]"?";
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]paramString = [CtBinaryOperatorImpl][CtVariableReadImpl]paramString + [CtLiteralImpl]"?,";
            }
        }
        [CtAssignmentImpl][CtVariableWriteImpl]query = [CtInvocationImpl][CtVariableReadImpl]query.replace([CtLiteralImpl]"$params", [CtVariableReadImpl]paramString);
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.info([CtBinaryOperatorImpl][CtLiteralImpl]"Prepared statement query :" + [CtVariableReadImpl]query);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement preparedStatement = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]query);
        [CtForImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]int i = [CtLiteralImpl]0; [CtBinaryOperatorImpl][CtVariableReadImpl]i < [CtFieldReadImpl][CtVariableReadImpl]params.length; [CtUnaryOperatorImpl][CtVariableWriteImpl]i++) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setString([CtVariableReadImpl]startingParamIndex, [CtArrayReadImpl][CtVariableReadImpl]params[[CtVariableReadImpl]i]);
            [CtUnaryOperatorImpl][CtVariableWriteImpl]startingParamIndex++;
        }
        [CtReturnImpl]return [CtVariableReadImpl]preparedStatement;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns True if AM_APPLICATION_GROUP_MAPPING table exist in AM DB
     *
     * @return  */
    public [CtTypeReferenceImpl]boolean isGrpIdMappingTableExist() [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sql = [CtLiteralImpl]"SELECT * FROM AM_APPLICATION_GROUP_MAPPING";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sql);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.info([CtBinaryOperatorImpl][CtLiteralImpl]"AM_APPLICATION_GROUP_MAPPING :- " + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]e);
            [CtReturnImpl]return [CtLiteralImpl]false;
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtLiteralImpl]true;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Adds a new record in AM_APPLICATION_GROUP_MAPPING for each group
     *
     * @param conn
     * @param applicationId
     * @param groupIdString
     * 		group id values separated by commas
     * @return  * @throws APIManagementException
     */
    private [CtTypeReferenceImpl]boolean updateGroupIDMappings([CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn, [CtParameterImpl][CtTypeReferenceImpl]int applicationId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupIdString, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String tenant) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean updateSuccessful = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement removeMigratedGroupIdsStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement deleteStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement insertStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_GROUP_ID_MAPPING_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String insertQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_GROUP_ID_MAPPING_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtCommentImpl]// Remove migrated Group ID information so that it can be replaced by updated Group ID's that are now
            [CtCommentImpl]// being saved. This is done to ensure that there is no conflicting migrated Group ID data remaining
            [CtVariableWriteImpl]removeMigratedGroupIdsStatement = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtTypeAccessImpl]SQLConstants.REMOVE_MIGRATED_GROUP_ID_SQL);
            [CtInvocationImpl][CtVariableReadImpl]removeMigratedGroupIdsStatement.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
            [CtInvocationImpl][CtVariableReadImpl]removeMigratedGroupIdsStatement.executeUpdate();
            [CtAssignmentImpl][CtVariableWriteImpl]deleteStatement = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]deleteQuery);
            [CtInvocationImpl][CtVariableReadImpl]deleteStatement.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
            [CtInvocationImpl][CtVariableReadImpl]deleteStatement.executeUpdate();
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtVariableReadImpl]groupIdString)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] groupIdArray = [CtInvocationImpl][CtVariableReadImpl]groupIdString.split([CtLiteralImpl]",");
                [CtAssignmentImpl][CtVariableWriteImpl]insertStatement = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]insertQuery);
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String group : [CtVariableReadImpl]groupIdArray) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]insertStatement.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
                    [CtInvocationImpl][CtVariableReadImpl]insertStatement.setString([CtLiteralImpl]2, [CtVariableReadImpl]group);
                    [CtInvocationImpl][CtVariableReadImpl]insertStatement.setString([CtLiteralImpl]3, [CtVariableReadImpl]tenant);
                    [CtInvocationImpl][CtVariableReadImpl]insertStatement.addBatch();
                }
                [CtInvocationImpl][CtVariableReadImpl]insertStatement.executeBatch();
            }
            [CtAssignmentImpl][CtVariableWriteImpl]updateSuccessful = [CtLiteralImpl]true;
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]updateSuccessful = [CtLiteralImpl]false;
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to update GroupId mappings ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]removeMigratedGroupIdsStatement, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]deleteStatement, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]insertStatement, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
        [CtReturnImpl]return [CtVariableReadImpl]updateSuccessful;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Fetches all the groups for a given application and creates a single string separated by comma
     *
     * @param applicationId
     * @return comma separated group Id String
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.lang.String getGroupId([CtParameterImpl][CtTypeReferenceImpl]int applicationId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String grpId = [CtLiteralImpl]"";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String> grpIdList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement preparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_GROUP_ID_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]preparedStatement = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]preparedStatement.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]grpIdList.add([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"GROUP_ID"));
            } 
            [CtForImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]int i = [CtLiteralImpl]0; [CtBinaryOperatorImpl][CtVariableReadImpl]i < [CtInvocationImpl][CtVariableReadImpl]grpIdList.size(); [CtUnaryOperatorImpl][CtVariableWriteImpl]i++) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]i == [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]grpIdList.size() - [CtLiteralImpl]1)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]grpId = [CtBinaryOperatorImpl][CtVariableReadImpl]grpId + [CtInvocationImpl][CtVariableReadImpl]grpIdList.get([CtVariableReadImpl]i);
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]grpId = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]grpId + [CtInvocationImpl][CtVariableReadImpl]grpIdList.get([CtVariableReadImpl]i)) + [CtLiteralImpl]",";
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to Retrieve GroupId for application " + [CtVariableReadImpl]applicationId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]preparedStatement, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]grpId;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get access token information associated with the given consumer key.
     *
     * @param consumerKey
     * 		The consumer key.
     * @return APIKey The access token information.
     * @throws SQLException
     * @throws CryptoException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey getAccessTokenInfoByConsumerKey([CtParameterImpl][CtTypeReferenceImpl]java.lang.String consumerKey) throws [CtTypeReferenceImpl]java.sql.SQLException, [CtTypeReferenceImpl]org.wso2.carbon.core.util.CryptoException, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String accessTokenStoreTable = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.ACCESS_TOKEN_STORE_TABLE;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String username = [CtInvocationImpl]getUserIdFromConsumerKey([CtVariableReadImpl]consumerKey);
        [CtAssignmentImpl][CtVariableWriteImpl]accessTokenStoreTable = [CtInvocationImpl]getAccessTokenStoreTableNameOfUserId([CtVariableReadImpl]username, [CtVariableReadImpl]accessTokenStoreTable);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement preparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String statement = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ACCESS_TOKEN_INFO_BY_CONSUMER_KEY_PREFIX + [CtVariableReadImpl]accessTokenStoreTable) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ACCESS_TOKEN_INFO_BY_CONSUMER_KEY_SUFFIX;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String oracleSQL = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ACCESS_TOKEN_INFO_BY_CONSUMER_KEY_ORACLE_PREFIX + [CtVariableReadImpl]accessTokenStoreTable) + [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ACCESS_TOKEN_INFO_BY_CONSUMER_KEY_ORACLE_SUFFIX;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String mySQL = [CtBinaryOperatorImpl][CtLiteralImpl]"SELECT" + [CtVariableReadImpl]statement;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String db2SQL = [CtBinaryOperatorImpl][CtLiteralImpl]"SELECT" + [CtVariableReadImpl]statement;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msSQL = [CtBinaryOperatorImpl][CtLiteralImpl]"SELECT " + [CtVariableReadImpl]statement;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String postgreSQL = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"SELECT * FROM (SELECT" + [CtVariableReadImpl]statement) + [CtLiteralImpl]") AS TOKEN";
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String accessToken;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sql;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]connection.getMetaData().getDriverName().contains([CtLiteralImpl]"MySQL") || [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]connection.getMetaData().getDriverName().contains([CtLiteralImpl]"H2")) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sql = [CtVariableReadImpl]mySQL;
            } else [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]connection.getMetaData().getDatabaseProductName().contains([CtLiteralImpl]"DB2")) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sql = [CtVariableReadImpl]db2SQL;
            } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]connection.getMetaData().getDriverName().contains([CtLiteralImpl]"MS SQL") || [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]connection.getMetaData().getDriverName().contains([CtLiteralImpl]"Microsoft")) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sql = [CtVariableReadImpl]msSQL;
            } else [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]connection.getMetaData().getDriverName().contains([CtLiteralImpl]"PostgreSQL")) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sql = [CtVariableReadImpl]postgreSQL;
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]sql = [CtVariableReadImpl]oracleSQL;
            }
            [CtAssignmentImpl][CtVariableWriteImpl]preparedStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sql);
            [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]consumerKey);
            [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setString([CtLiteralImpl]2, [CtTypeAccessImpl]APIConstants.ACCESS_TOKEN_USER_TYPE_APPLICATION);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]preparedStatement.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey apiKey = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIKey();
                [CtAssignmentImpl][CtVariableWriteImpl]accessToken = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.decryptToken([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"ACCESS_TOKEN"));
                [CtInvocationImpl][CtVariableReadImpl]apiKey.setConsumerKey([CtVariableReadImpl]consumerKey);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String consumerSecret = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"CONSUMER_SECRET");
                [CtInvocationImpl][CtVariableReadImpl]apiKey.setConsumerSecret([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.decryptToken([CtVariableReadImpl]consumerSecret));
                [CtInvocationImpl][CtVariableReadImpl]apiKey.setAccessToken([CtVariableReadImpl]accessToken);
                [CtInvocationImpl][CtVariableReadImpl]apiKey.setValidityPeriod([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]resultSet.getLong([CtLiteralImpl]"VALIDITY_PERIOD") / [CtLiteralImpl]1000);
                [CtInvocationImpl][CtVariableReadImpl]apiKey.setGrantTypes([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"GRANT_TYPES"));
                [CtInvocationImpl][CtVariableReadImpl]apiKey.setCallbackUrl([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"CALLBACK_URL"));
                [CtLocalVariableImpl][CtCommentImpl]// Load all the rows to in memory and build the scope string
                [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> scopes = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tokenString = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"ACCESS_TOKEN");
                [CtDoImpl]do [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String currentRowTokenString = [CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"ACCESS_TOKEN");
                    [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]tokenString.equals([CtVariableReadImpl]currentRowTokenString)) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]scopes.add([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtTypeAccessImpl]APIConstants.IDENTITY_OAUTH2_FIELD_TOKEN_SCOPE));
                    }
                } while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next() );
                [CtInvocationImpl][CtVariableReadImpl]apiKey.setTokenScope([CtInvocationImpl]getScopeString([CtVariableReadImpl]scopes));
                [CtReturnImpl]return [CtVariableReadImpl]apiKey;
            }
            [CtReturnImpl]return [CtLiteralImpl]null;
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]preparedStatement, [CtVariableReadImpl]connection, [CtVariableReadImpl]resultSet);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns the user id for the consumer key.
     *
     * @param consumerKey
     * 		The consumer key.
     * @return String The user id.
     */
    private [CtTypeReferenceImpl]java.lang.String getUserIdFromConsumerKey([CtParameterImpl][CtTypeReferenceImpl]java.lang.String consumerKey) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userId = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_USER_ID_FROM_CONSUMER_KEY_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]consumerKey);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userId = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"USER_ID");
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error when getting the user id for Consumer Key" + [CtVariableReadImpl]consumerKey, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]userId;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get Subscribed APIs for an App.
     *
     * @param applicationName
     * 		id of the application name
     * @return APISubscriptionInfoDTO[]
     * @throws APIManagementException
     * 		if failed to get Subscribed APIs
     */
    public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APISubscriptionInfoDTO[] getSubscribedAPIsForAnApp([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String applicationName) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APISubscriptionInfoDTO> apiSubscriptionInfoDTOS = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APISubscriptionInfoDTO>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtCommentImpl]// identify logged in user
        [CtTypeReferenceImpl]java.lang.String loginUserName = [CtInvocationImpl]getLoginUserName([CtVariableReadImpl]userId);
        [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantId([CtVariableReadImpl]loginUserName);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIBED_APIS_OF_USER_BY_APP_SQL;
        [CtIfImpl]if ([CtFieldReadImpl]forceCaseInsensitiveComparisons) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_SUBSCRIBED_APIS_OF_USER_BY_APP_CASE_INSENSITIVE_SQL;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]applicationName);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APISubscriptionInfoDTO infoDTO = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APISubscriptionInfoDTO();
                [CtInvocationImpl][CtVariableReadImpl]infoDTO.setProviderId([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomain([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_PROVIDER")));
                [CtInvocationImpl][CtVariableReadImpl]infoDTO.setApiName([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_NAME"));
                [CtInvocationImpl][CtVariableReadImpl]infoDTO.setContext([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_CONTEXT"));
                [CtInvocationImpl][CtVariableReadImpl]infoDTO.setVersion([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_VERSION"));
                [CtInvocationImpl][CtVariableReadImpl]infoDTO.setSubscriptionTier([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"SP_TIER_ID"));
                [CtInvocationImpl][CtVariableReadImpl]apiSubscriptionInfoDTOS.add([CtVariableReadImpl]infoDTO);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while executing SQL", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]apiSubscriptionInfoDTOS.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.impl.dto.APISubscriptionInfoDTO[[CtInvocationImpl][CtVariableReadImpl]apiSubscriptionInfoDTOS.size()]);
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application getApplicationByClientId([CtParameterImpl][CtTypeReferenceImpl]java.lang.String clientId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_BY_CLIENT_ID_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]clientId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String applicationId = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String applicationName = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NAME");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String applicationOwner = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CREATED_BY");
                [CtAssignmentImpl][CtVariableWriteImpl]application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtVariableReadImpl]applicationId);
                [CtInvocationImpl][CtVariableReadImpl]application.setName([CtVariableReadImpl]applicationName);
                [CtInvocationImpl][CtVariableReadImpl]application.setOwner([CtVariableReadImpl]applicationOwner);
                [CtInvocationImpl][CtVariableReadImpl]application.setDescription([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"DESCRIPTION"));
                [CtInvocationImpl][CtVariableReadImpl]application.setStatus([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_STATUS"));
                [CtInvocationImpl][CtVariableReadImpl]application.setCallbackUrl([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CALLBACK_URL"));
                [CtInvocationImpl][CtVariableReadImpl]application.setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"APPLICATION_ID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"GROUP_ID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setUUID([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"UUID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setTier([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_TIER"));
                [CtInvocationImpl][CtVariableReadImpl]application.setTokenType([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"TOKEN_TYPE"));
                [CtInvocationImpl][CtVariableReadImpl]application.setKeyType([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"KEY_TYPE"));
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]application.getGroupId() == [CtLiteralImpl]null) || [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]application.getGroupId().isEmpty()) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl]getGroupId([CtInvocationImpl][CtVariableReadImpl]application.getId()));
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while obtaining details of the Application foe client id " + [CtVariableReadImpl]clientId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]application;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns the Label List for the TenantId.
     *
     * @param tenantDomain
     * 		The tenant domain.
     * @return List of labels.
     */
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Label> getAllLabels([CtParameterImpl][CtTypeReferenceImpl]java.lang.String tenantDomain) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Label> labelList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.GET_LABEL_BY_TENANT)) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]1, [CtVariableReadImpl]tenantDomain);
                [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtInvocationImpl][CtVariableReadImpl]statement.executeQuery()) [CtBlockImpl]{
                    [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String labelId = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"LABEL_ID");
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String labelName = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NAME");
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String description = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"DESCRIPTION");
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Label label = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Label();
                        [CtInvocationImpl][CtVariableReadImpl]label.setLabelId([CtVariableReadImpl]labelId);
                        [CtInvocationImpl][CtVariableReadImpl]label.setName([CtVariableReadImpl]labelName);
                        [CtInvocationImpl][CtVariableReadImpl]label.setDescription([CtVariableReadImpl]description);
                        [CtInvocationImpl][CtVariableReadImpl]label.setAccessUrls([CtInvocationImpl]getAccessUrlList([CtVariableReadImpl]connection, [CtVariableReadImpl]labelId));
                        [CtInvocationImpl][CtVariableReadImpl]labelList.add([CtVariableReadImpl]label);
                    } 
                }
                [CtInvocationImpl][CtVariableReadImpl]connection.commit();
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get Labels of " + [CtVariableReadImpl]tenantDomain, [CtVariableReadImpl]e);
            } finally [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]true);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get Labels of " + [CtVariableReadImpl]tenantDomain, [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]labelList;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns the URL list for label id.
     *
     * @param labelId
     * 		label id.
     * @return List of string.
     */
    private [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> getAccessUrlList([CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection connection, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String labelId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> hostList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.GET_URL_BY_LABEL_ID)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]1, [CtVariableReadImpl]labelId);
            [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtInvocationImpl][CtVariableReadImpl]statement.executeQuery()) [CtBlockImpl]{
                [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String host = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"ACCESS_URL");
                    [CtInvocationImpl][CtVariableReadImpl]hostList.add([CtVariableReadImpl]host);
                } 
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to get label list: ", [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]hostList;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns the Label.
     *
     * @param tenantDomain
     * 		The tenant domain.
     * @param label
     * 		label object.
     * @return label.
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Label addLabel([CtParameterImpl][CtTypeReferenceImpl]java.lang.String tenantDomain, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Label label) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String uuid = [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]java.util.UUID.randomUUID().toString();
        [CtInvocationImpl][CtVariableReadImpl]label.setLabelId([CtVariableReadImpl]uuid);
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.ADD_LABEL_SQL)) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtFieldWriteImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.initialAutoCommit = [CtInvocationImpl][CtVariableReadImpl]connection.getAutoCommit();
                [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]1, [CtVariableReadImpl]uuid);
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]label.getName());
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]label.getDescription());
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]4, [CtVariableReadImpl]tenantDomain);
                [CtInvocationImpl][CtVariableReadImpl]statement.executeUpdate();
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]label.getAccessUrls().isEmpty()) [CtBlockImpl]{
                    [CtInvocationImpl]insertAccessUrlMappings([CtVariableReadImpl]connection, [CtVariableReadImpl]uuid, [CtInvocationImpl][CtVariableReadImpl]label.getAccessUrls());
                }
                [CtInvocationImpl][CtVariableReadImpl]connection.commit();
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to add label: " + [CtVariableReadImpl]uuid, [CtVariableReadImpl]e);
            } finally [CtBlockImpl]{
                [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.setAutoCommit([CtVariableReadImpl]connection, [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.initialAutoCommit);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to add label: " + [CtVariableReadImpl]uuid, [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]label;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Insert URL to the URL table
     *
     * @param uuid
     * 		label id.
     * @param urlList
     * 		The list of url.
     * @throws APIManagementException
     */
    private [CtTypeReferenceImpl]void insertAccessUrlMappings([CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection connection, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String uuid, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> urlList) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.ADD_LABEL_URL_MAPPING_SQL)) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String accessUrl : [CtVariableReadImpl]urlList) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]1, [CtVariableReadImpl]uuid);
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]2, [CtVariableReadImpl]accessUrl);
                [CtInvocationImpl][CtVariableReadImpl]statement.addBatch();
            }
            [CtInvocationImpl][CtVariableReadImpl]statement.executeBatch();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to add label url : " + [CtVariableReadImpl]uuid, [CtVariableReadImpl]e);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Delete  label.
     *
     * @param labelUUID
     * 		label id.
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void deleteLabel([CtParameterImpl][CtTypeReferenceImpl]java.lang.String labelUUID) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.DELETE_LABEL_SQL)) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtFieldWriteImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.initialAutoCommit = [CtInvocationImpl][CtVariableReadImpl]connection.getAutoCommit();
                [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]1, [CtVariableReadImpl]labelUUID);
                [CtInvocationImpl][CtVariableReadImpl]statement.executeUpdate();
                [CtInvocationImpl][CtVariableReadImpl]connection.commit();
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to delete label : " + [CtVariableReadImpl]labelUUID, [CtVariableReadImpl]e);
            } finally [CtBlockImpl]{
                [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.setAutoCommit([CtVariableReadImpl]connection, [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.initialAutoCommit);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to delete label : " + [CtVariableReadImpl]labelUUID, [CtVariableReadImpl]e);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Delete label URL
     *
     * @param labelUUID
     * 		label id.
     * @throws APIManagementException
     */
    private [CtTypeReferenceImpl]void deleteAccessUrlMappings([CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection connection, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String labelUUID) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.DELETE_LABEL_URL_MAPPING_SQL)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]1, [CtVariableReadImpl]labelUUID);
            [CtInvocationImpl][CtVariableReadImpl]statement.executeUpdate();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to delete label url : ", [CtVariableReadImpl]e);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Update the label.
     *
     * @param label
     * 		label object.
     * @return labels.
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Label updateLabel([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Label label) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> accessURLs = [CtInvocationImpl][CtVariableReadImpl]label.getAccessUrls();
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.UPDATE_LABEL_SQL)) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtFieldWriteImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.initialAutoCommit = [CtInvocationImpl][CtVariableReadImpl]connection.getAutoCommit();
                [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]label.getName());
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]label.getDescription());
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]label.getLabelId());
                [CtInvocationImpl]deleteAccessUrlMappings([CtVariableReadImpl]connection, [CtInvocationImpl][CtVariableReadImpl]label.getLabelId());
                [CtInvocationImpl]insertAccessUrlMappings([CtVariableReadImpl]connection, [CtInvocationImpl][CtVariableReadImpl]label.getLabelId(), [CtVariableReadImpl]accessURLs);
                [CtInvocationImpl][CtVariableReadImpl]statement.executeUpdate();
                [CtInvocationImpl][CtVariableReadImpl]connection.commit();
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to update label : ", [CtVariableReadImpl]e);
            } finally [CtBlockImpl]{
                [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.setAutoCommit([CtVariableReadImpl]connection, [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.initialAutoCommit);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to update label : ", [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]label;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void addApplicationAttributes([CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> attributes, [CtParameterImpl][CtTypeReferenceImpl]int applicationId, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]attributes != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtTypeAccessImpl]SQLConstants.ADD_APPLICATION_ATTRIBUTES_SQL);
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String key : [CtInvocationImpl][CtVariableReadImpl]attributes.keySet()) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]key);
                    [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]attributes.get([CtVariableReadImpl]key));
                    [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]4, [CtVariableReadImpl]tenantId);
                    [CtInvocationImpl][CtVariableReadImpl]ps.addBatch();
                }
                [CtLocalVariableImpl][CtArrayTypeReferenceImpl]int[] update = [CtInvocationImpl][CtVariableReadImpl]ps.executeBatch();
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error in adding attributes of application with id: " + [CtVariableReadImpl]applicationId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtLiteralImpl]null, [CtVariableReadImpl]rs);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get all attributes stored against an Application
     *
     * @param conn
     * 		Database connection
     * @param applicationId
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> getApplicationAttributes([CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection conn, [CtParameterImpl][CtTypeReferenceImpl]int applicationId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> applicationAttributes = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtTypeAccessImpl]SQLConstants.GET_APPLICATION_ATTRIBUTES_BY_APPLICATION_ID);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]applicationId);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]applicationAttributes.put([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NAME"), [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"VALUE"));
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error when reading attributes of application with id: " + [CtVariableReadImpl]applicationId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtLiteralImpl]null, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]applicationAttributes;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Delete certain attribute stored against an Application
     *
     * @param attributeKey
     * 		User defined key of attribute
     * @param applicationId
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void deleteApplicationAttributes([CtParameterImpl][CtTypeReferenceImpl]java.lang.String attributeKey, [CtParameterImpl][CtTypeReferenceImpl]int applicationId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.REMOVE_APPLICATION_ATTRIBUTES_BY_ATTRIBUTE_NAME_SQL);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]attributeKey);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]2, [CtVariableReadImpl]applicationId);
            [CtInvocationImpl][CtVariableReadImpl]ps.execute();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error in establishing SQL connection ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add new attributes against an Application in API Store
     *
     * @param applicationAttributes
     * 		Map of key, value pair of attributes
     * @param applicationId
     * 		Id of Application against which attributes are getting stored
     * @param tenantId
     * 		Id of tenant
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void addApplicationAttributes([CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> applicationAttributes, [CtParameterImpl][CtTypeReferenceImpl]int applicationId, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtInvocationImpl]addApplicationAttributes([CtVariableReadImpl]connection, [CtVariableReadImpl]applicationAttributes, [CtVariableReadImpl]applicationId, [CtVariableReadImpl]tenantId);
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException sqlException) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Failed to rollback add application attributes ", [CtVariableReadImpl]e);
                }
            }
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to add Application", [CtVariableReadImpl]sqlException);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtLiteralImpl]null, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Converts all null values for THROTTLING_TIER in AM_API_URL_MAPPING table, to Unlimited.
     * This will be executed only during startup of the server.
     *
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void convertNullThrottlingTiers() throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.FIX_NULL_THROTTLING_TIERS;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.execute();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error occurred while converting NULL throttling tiers to Unlimited in AM_API_URL_MAPPING table", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieves the Application which is corresponding to the given UUID String
     *
     * @param subscriberId
     * 		subscriberId of the Application
     * @param applicationName
     * 		name of the Application
     * @return  * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application getApplicationBySubscriberIdAndName([CtParameterImpl][CtTypeReferenceImpl]int subscriberId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String applicationName) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int applicationId = [CtLiteralImpl]0;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application application = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_APPLICATION_BY_SUBSCRIBERID_AND_NAME_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setInt([CtLiteralImpl]1, [CtVariableReadImpl]subscriberId);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]applicationName);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String subscriberName = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"USER_ID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber subscriber = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Subscriber([CtVariableReadImpl]subscriberName);
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setId([CtVariableReadImpl]subscriberId);
                [CtAssignmentImpl][CtVariableWriteImpl]application = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Application([CtVariableReadImpl]applicationName, [CtVariableReadImpl]subscriber);
                [CtInvocationImpl][CtVariableReadImpl]application.setDescription([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"DESCRIPTION"));
                [CtInvocationImpl][CtVariableReadImpl]application.setStatus([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_STATUS"));
                [CtInvocationImpl][CtVariableReadImpl]application.setCallbackUrl([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CALLBACK_URL"));
                [CtAssignmentImpl][CtVariableWriteImpl]applicationId = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"APPLICATION_ID");
                [CtInvocationImpl][CtVariableReadImpl]application.setId([CtVariableReadImpl]applicationId);
                [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"GROUP_ID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setUUID([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"UUID"));
                [CtInvocationImpl][CtVariableReadImpl]application.setTier([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"APPLICATION_TIER"));
                [CtInvocationImpl][CtVariableReadImpl]application.setTokenType([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"TOKEN_TYPE"));
                [CtInvocationImpl][CtVariableReadImpl]subscriber.setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"SUBSCRIBER_ID"));
                [CtIfImpl]if ([CtFieldReadImpl]multiGroupAppSharingEnabled) [CtBlockImpl]{
                    [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtInvocationImpl][CtVariableReadImpl]application.getGroupId())) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]application.setGroupId([CtInvocationImpl]getGroupId([CtInvocationImpl][CtVariableReadImpl]application.getId()));
                    }
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Timestamp createdTime = [CtInvocationImpl][CtVariableReadImpl]rs.getTimestamp([CtLiteralImpl]"CREATED_TIME");
                [CtInvocationImpl][CtVariableReadImpl]application.setCreatedTime([CtConditionalImpl][CtBinaryOperatorImpl][CtVariableReadImpl]createdTime == [CtLiteralImpl]null ? [CtLiteralImpl]null : [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.valueOf([CtInvocationImpl][CtVariableReadImpl]createdTime.getTime()));
                [CtTryImpl]try [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Timestamp updated_time = [CtInvocationImpl][CtVariableReadImpl]rs.getTimestamp([CtLiteralImpl]"UPDATED_TIME");
                    [CtInvocationImpl][CtVariableReadImpl]application.setLastUpdatedTime([CtConditionalImpl][CtBinaryOperatorImpl][CtVariableReadImpl]updated_time == [CtLiteralImpl]null ? [CtLiteralImpl]null : [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.valueOf([CtInvocationImpl][CtVariableReadImpl]updated_time.getTime()));
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]application.setLastUpdatedTime([CtInvocationImpl][CtVariableReadImpl]application.getCreatedTime());
                }
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]application != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> applicationAttributes = [CtInvocationImpl]getApplicationAttributes([CtVariableReadImpl]connection, [CtVariableReadImpl]applicationId);
                [CtInvocationImpl][CtVariableReadImpl]application.setApplicationAttributes([CtVariableReadImpl]applicationAttributes);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error while obtaining details of the Application : " + [CtVariableReadImpl]applicationName) + [CtLiteralImpl]" of ") + [CtVariableReadImpl]subscriberId, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]application;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieve URI Templates for the given API
     *
     * @param api
     * 		API
     * @return Map of URITemplate with key as Method:resourcepath
     * @throws APIManagementException
     * 		exception
     */
    public [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate> getURITemplatesForAPI([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.API api) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate> templatesMap = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_URL_TEMPLATES_FOR_API;
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]api.getId().getApiName());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]api.getId().getVersion());
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]api.getId().getProviderName()));
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate template = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate();
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String urlPattern = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"URL_PATTERN");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String httpMethod = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"HTTP_METHOD");
                [CtInvocationImpl][CtVariableReadImpl]template.setHTTPVerb([CtVariableReadImpl]httpMethod);
                [CtInvocationImpl][CtVariableReadImpl]template.setResourceURI([CtVariableReadImpl]urlPattern);
                [CtInvocationImpl][CtVariableReadImpl]template.setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"URL_MAPPING_ID"));
                [CtInvocationImpl][CtCommentImpl]// TODO populate others if needed
                [CtVariableReadImpl]templatesMap.put([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]httpMethod + [CtLiteralImpl]":") + [CtVariableReadImpl]urlPattern, [CtVariableReadImpl]template);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while obtaining details of the URI Template for api " + [CtInvocationImpl][CtVariableReadImpl]api.getId(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]templatesMap;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.ResourcePath> getResourcePathsOfAPI([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.ResourcePath> resourcePathList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.ResourcePath>();
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sql = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_URL_TEMPLATES_FOR_API;
            [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sql)) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]apiId.getApiName());
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]apiId.getVersion());
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]apiId.getProviderName()));
                [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery()) [CtBlockImpl]{
                    [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.ResourcePath resourcePath = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.ResourcePath();
                        [CtInvocationImpl][CtVariableReadImpl]resourcePath.setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"URL_MAPPING_ID"));
                        [CtInvocationImpl][CtVariableReadImpl]resourcePath.setResourcePath([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"HTTP_METHOD"));
                        [CtInvocationImpl][CtVariableReadImpl]resourcePath.setHttpVerb([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"URL_PATTERN"));
                        [CtInvocationImpl][CtVariableReadImpl]resourcePathList.add([CtVariableReadImpl]resourcePath);
                    } 
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while obtaining Resource Paths of api " + [CtVariableReadImpl]apiId, [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]resourcePathList;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void addAPIProduct([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProduct apiProduct, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String tenantDomain) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmtAddAPIProduct = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmtAddScopeEntry = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"addAPIProduct() : " + [CtInvocationImpl][CtVariableReadImpl]apiProduct.toString()) + [CtLiteralImpl]" for tenant ") + [CtVariableReadImpl]tenantDomain);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier identifier = [CtInvocationImpl][CtVariableReadImpl]apiProduct.getId();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int productId = [CtLiteralImpl]0;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int scopeId = [CtLiteralImpl]0;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String queryAddAPIProduct = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_API_PRODUCT;
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmtAddAPIProduct = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]queryAddAPIProduct, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtLiteralImpl]"api_id" });
            [CtInvocationImpl][CtVariableReadImpl]prepStmtAddAPIProduct.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmtAddAPIProduct.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]identifier.getName());
            [CtInvocationImpl][CtVariableReadImpl]prepStmtAddAPIProduct.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]identifier.getVersion());
            [CtInvocationImpl][CtVariableReadImpl]prepStmtAddAPIProduct.setString([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]apiProduct.getContext());
            [CtInvocationImpl][CtVariableReadImpl]prepStmtAddAPIProduct.setString([CtLiteralImpl]5, [CtInvocationImpl][CtVariableReadImpl]apiProduct.getProductLevelPolicy());
            [CtInvocationImpl][CtVariableReadImpl]prepStmtAddAPIProduct.setString([CtLiteralImpl]6, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmtAddAPIProduct.setTimestamp([CtLiteralImpl]7, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.sql.Timestamp([CtInvocationImpl][CtTypeAccessImpl]java.lang.System.currentTimeMillis()));
            [CtInvocationImpl][CtVariableReadImpl]prepStmtAddAPIProduct.setString([CtLiteralImpl]8, [CtTypeAccessImpl]APIConstants.API_PRODUCT);
            [CtInvocationImpl][CtVariableReadImpl]prepStmtAddAPIProduct.execute();
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmtAddAPIProduct.getGeneratedKeys();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]productId = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]1);
            }
            [CtIfImpl][CtCommentImpl]// breaks the flow if product is not added to the db correctly
            if ([CtBinaryOperatorImpl][CtVariableReadImpl]productId == [CtLiteralImpl]0) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while adding API product " + [CtInvocationImpl][CtVariableReadImpl]apiProduct.getUuid());
            }
            [CtInvocationImpl]addAPIProductResourceMappings([CtInvocationImpl][CtVariableReadImpl]apiProduct.getProductResources(), [CtVariableReadImpl]connection);
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error while adding API product " + [CtInvocationImpl][CtVariableReadImpl]identifier.getName()) + [CtLiteralImpl]" of provider ") + [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName()), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmtAddAPIProduct, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmtAddScopeEntry, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add api product url mappings to DB
     *    - url templeates to product mappings (resource bundling) - AM_API_PRODUCT_MAPPING
     *
     * @param productResources
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void addAPIProductResourceMappings([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductResource> productResources, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection connection) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtCommentImpl]// add product-api resource mappings
        [CtTypeReferenceImpl]java.sql.PreparedStatement prepStmtAddResourceMapping = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String addProductResourceMappingSql = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_PRODUCT_RESOURCE_MAPPING_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]connection == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            }
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmtAddResourceMapping = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]addProductResourceMappingSql);
            [CtForEachImpl][CtCommentImpl]// add the resources in each API in the API product.
            for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductResource apiProductResource : [CtVariableReadImpl]productResources) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier productIdentifier = [CtInvocationImpl][CtVariableReadImpl]apiProductResource.getProductIdentifier();
                [CtLocalVariableImpl][CtTypeReferenceImpl]int productId = [CtInvocationImpl]getAPIID([CtVariableReadImpl]productIdentifier, [CtVariableReadImpl]connection);
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate uriTemplate = [CtInvocationImpl][CtVariableReadImpl]apiProductResource.getUriTemplate();
                [CtInvocationImpl][CtVariableReadImpl]prepStmtAddResourceMapping.setInt([CtLiteralImpl]1, [CtVariableReadImpl]productId);
                [CtInvocationImpl][CtVariableReadImpl]prepStmtAddResourceMapping.setInt([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]uriTemplate.getId());
                [CtInvocationImpl][CtVariableReadImpl]prepStmtAddResourceMapping.addBatch();
            }
            [CtInvocationImpl][CtVariableReadImpl]prepStmtAddResourceMapping.executeBatch();
            [CtInvocationImpl][CtVariableReadImpl]prepStmtAddResourceMapping.clearBatch();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while adding API product Resources", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmtAddResourceMapping, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Update Product scope and resource mappings
     *
     * @param apiProduct
     * @param productId
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void updateAPIProductResourceMappings([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProduct apiProduct, [CtParameterImpl][CtTypeReferenceImpl]int productId, [CtParameterImpl][CtTypeReferenceImpl]java.sql.Connection connection) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmtRemoveResourceToProductMappings = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String removeResourceToProductMappingsSql = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.DELETE_FROM_AM_API_PRODUCT_MAPPING_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmtRemoveResourceToProductMappings = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]removeResourceToProductMappingsSql);
            [CtInvocationImpl][CtVariableReadImpl]prepStmtRemoveResourceToProductMappings.setInt([CtLiteralImpl]1, [CtVariableReadImpl]productId);
            [CtInvocationImpl][CtVariableReadImpl]prepStmtRemoveResourceToProductMappings.execute();
            [CtInvocationImpl]addAPIProductResourceMappings([CtInvocationImpl][CtVariableReadImpl]apiProduct.getProductResources(), [CtVariableReadImpl]connection);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while updating API-Product Resources.", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmtRemoveResourceToProductMappings, [CtLiteralImpl]null, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Delete API product and its related scopes
     *
     * @param productIdentifier
     * 		product ID
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void deleteAPIProduct([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier productIdentifier) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.DELETE_API_PRODUCT_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteRatingsQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.REMOVE_FROM_API_RATING_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtCommentImpl]// delete product ratings
            [CtTypeReferenceImpl]int id = [CtInvocationImpl]getAPIProductId([CtVariableReadImpl]productIdentifier);
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteRatingsQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]id);
            [CtInvocationImpl][CtVariableReadImpl]ps.execute();
            [CtInvocationImpl][CtVariableReadImpl]ps.close();[CtCommentImpl]// If exception occurs at execute, this statement will close in finally else here

            [CtAssignmentImpl][CtCommentImpl]// delete product
            [CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteQuery);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]productIdentifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]productIdentifier.getName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]productIdentifier.getVersion());
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]ps.close();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while deleting api product " + [CtVariableReadImpl]productIdentifier, [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductResource> getProductMappingsForAPI([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.API api) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductResource> productMappings = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiIdentifier = [CtInvocationImpl][CtVariableReadImpl]api.getId();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate> uriTemplatesOfAPI = [CtInvocationImpl]getURITemplatesOfAPI([CtVariableReadImpl]apiIdentifier);
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate uriTemplate : [CtVariableReadImpl]uriTemplatesOfAPI) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier> apiProductIdentifiers = [CtInvocationImpl][CtVariableReadImpl]uriTemplate.retrieveUsedByProducts();
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier apiProductIdentifier : [CtVariableReadImpl]apiProductIdentifiers) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductResource productMapping = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductResource();
                [CtInvocationImpl][CtVariableReadImpl]productMapping.setProductIdentifier([CtVariableReadImpl]apiProductIdentifier);
                [CtInvocationImpl][CtVariableReadImpl]productMapping.setUriTemplate([CtVariableReadImpl]uriTemplate);
                [CtInvocationImpl][CtVariableReadImpl]productMappings.add([CtVariableReadImpl]productMapping);
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]productMappings;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]int getAPIProductId([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier identifier) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String queryGetProductId = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_PRODUCT_ID;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement preparedStatement = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int productId = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]preparedStatement = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]queryGetProductId);
            [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]identifier.getName());
            [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setString([CtLiteralImpl]2, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]preparedStatement.setString([CtLiteralImpl]3, [CtTypeAccessImpl]APIConstants.API_PRODUCT_VERSION);[CtCommentImpl]// versioning is not supported atm

            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]preparedStatement.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]productId = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"API_ID");
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]productId == [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Unable to find the API Product : " + [CtVariableReadImpl]productId) + [CtLiteralImpl]" in the database";
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException([CtVariableReadImpl]msg);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error while retrieving api product id for product " + [CtInvocationImpl][CtVariableReadImpl]identifier.getName()) + [CtLiteralImpl]" by ") + [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName()), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]preparedStatement, [CtVariableReadImpl]conn, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]productId;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void updateAPIProduct([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProduct product, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String username) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"updateAPIProduct() : product- " + [CtInvocationImpl][CtVariableReadImpl]product.toString());
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.UPDATE_PRODUCT_SQL;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]product.getProductLevelPolicy());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]username);
            [CtInvocationImpl][CtVariableReadImpl]ps.setTimestamp([CtLiteralImpl]3, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.sql.Timestamp([CtInvocationImpl][CtTypeAccessImpl]java.lang.System.currentTimeMillis()));
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier identifier = [CtInvocationImpl][CtVariableReadImpl]product.getId();
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]4, [CtInvocationImpl][CtVariableReadImpl]identifier.getName());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]5, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.replaceEmailDomainBack([CtInvocationImpl][CtVariableReadImpl]identifier.getProviderName()));
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]6, [CtInvocationImpl][CtVariableReadImpl]identifier.getVersion());
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            [CtLocalVariableImpl][CtTypeReferenceImpl]int productId = [CtInvocationImpl]getAPIID([CtInvocationImpl][CtVariableReadImpl]product.getId(), [CtVariableReadImpl]conn);
            [CtInvocationImpl]updateAPIProductResourceMappings([CtVariableReadImpl]product, [CtVariableReadImpl]productId, [CtVariableReadImpl]conn);
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]conn != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]conn.rollback();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e1) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO.log.error([CtLiteralImpl]"Error while rolling back the failed operation", [CtVariableReadImpl]e1);
                }
            }
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error in updating API Product: " + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtLiteralImpl]null);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * get resource mapping of the api product
     *
     * @param productIdentifier
     * 		api product identifier
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductResource> getAPIProductResourceMappings([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductIdentifier productIdentifier) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]int productId = [CtInvocationImpl]getAPIProductId([CtVariableReadImpl]productIdentifier);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductResource> productResourceList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sql = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_RESOURCES_OF_PRODUCT;
            [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sql)) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]productId);
                [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery()) [CtBlockImpl]{
                    [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductResource resource = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIProductResource();
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiId = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_PROVIDER"), [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_NAME"), [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_VERSION"));
                        [CtInvocationImpl][CtVariableReadImpl]resource.setProductIdentifier([CtVariableReadImpl]productIdentifier);
                        [CtInvocationImpl][CtVariableReadImpl]resource.setApiIdentifier([CtVariableReadImpl]apiId);
                        [CtInvocationImpl][CtVariableReadImpl]resource.setApiName([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_NAME"));
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate uriTemplate = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.URITemplate();
                        [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setUriTemplate([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"URL_PATTERN"));
                        [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setResourceURI([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"URL_PATTERN"));
                        [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setHTTPVerb([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"HTTP_METHOD"));
                        [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"URL_MAPPING_ID"));
                        [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setAuthType([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"AUTH_SCHEME"));
                        [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setThrottlingTier([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"THROTTLING_TIER"));
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String resourceScopeKey = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getResourceKey([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"CONTEXT"), [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"API_VERSION"), [CtInvocationImpl][CtVariableReadImpl]uriTemplate.getUriTemplate(), [CtInvocationImpl][CtVariableReadImpl]uriTemplate.getHTTPVerb());
                        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement scopesStatement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.GET_SCOPES_BY_RESOURCE_PATHS)) [CtBlockImpl]{
                            [CtInvocationImpl][CtVariableReadImpl]scopesStatement.setString([CtLiteralImpl]1, [CtVariableReadImpl]resourceScopeKey);
                            [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet scopesResult = [CtInvocationImpl][CtVariableReadImpl]scopesStatement.executeQuery()) [CtBlockImpl]{
                                [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]scopesResult.next()) [CtBlockImpl]{
                                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope scope = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Scope();
                                    [CtInvocationImpl][CtVariableReadImpl]scope.setKey([CtInvocationImpl][CtVariableReadImpl]scopesResult.getString([CtLiteralImpl]"NAME"));
                                    [CtInvocationImpl][CtVariableReadImpl]scope.setDescription([CtInvocationImpl][CtVariableReadImpl]scopesResult.getString([CtLiteralImpl]"DESCRIPTION"));
                                    [CtInvocationImpl][CtVariableReadImpl]scope.setId([CtInvocationImpl][CtVariableReadImpl]scopesResult.getInt([CtLiteralImpl]"SCOPE_ID"));
                                    [CtInvocationImpl][CtVariableReadImpl]scope.setName([CtInvocationImpl][CtVariableReadImpl]scopesResult.getString([CtLiteralImpl]"DISPLAY_NAME"));
                                    [CtInvocationImpl][CtVariableReadImpl]scope.setRoles([CtInvocationImpl][CtVariableReadImpl]scopesResult.getString([CtLiteralImpl]"SCOPE_BINDING"));
                                    [CtInvocationImpl][CtVariableReadImpl]uriTemplate.setScope([CtVariableReadImpl]scope);
                                } 
                            }
                        }
                        [CtInvocationImpl][CtVariableReadImpl]resource.setUriTemplate([CtVariableReadImpl]uriTemplate);
                        [CtInvocationImpl][CtVariableReadImpl]productResourceList.add([CtVariableReadImpl]resource);
                    } 
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to get product resources of api product : " + [CtVariableReadImpl]productIdentifier, [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]productResourceList;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add new Audit API ID
     *
     * @param apiIdentifier
     * 		APIIdentifier object to retrieve API ID
     * @param uuid
     * 		Audit API ID
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void addAuditApiMapping([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiIdentifier, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String uuid) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.ADD_SECURITY_AUDIT_MAP_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int apiId = [CtInvocationImpl]getAPIID([CtVariableReadImpl]apiIdentifier, [CtVariableReadImpl]connection);
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection()) [CtBlockImpl]{
            [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]query)) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
                [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]uuid);
                [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while adding new audit api id: ", [CtVariableReadImpl]e);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get Audit API ID
     *
     * @param apiIdentifier
     * 		APIIdentifier object to retrieve API ID
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]java.lang.String getAuditApiId([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APIIdentifier apiIdentifier) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_AUDIT_UUID_SQL;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int apiId = [CtInvocationImpl]getAPIID([CtVariableReadImpl]apiIdentifier, [CtVariableReadImpl]connection);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String auditUuid = [CtLiteralImpl]null;
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection()) [CtBlockImpl]{
            [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]query)) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]1, [CtVariableReadImpl]apiId);
                [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery()) [CtBlockImpl]{
                    [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]auditUuid = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"AUDIT_UUID");
                    } 
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while getting audit api id: ", [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]auditUuid;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Configure email list
     * modify email list by adding or removing emails
     */
    public [CtTypeReferenceImpl]void addBotDataEmailConfiguration([CtParameterImpl][CtTypeReferenceImpl]java.lang.String email) throws [CtTypeReferenceImpl]java.sql.SQLException, [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
        [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String emailListSaveQuery = [CtFieldReadImpl]SQLConstants.BotDataConstants.ADD_NOTIFICATION;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]emailListSaveQuery);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.UUID uuid = [CtInvocationImpl][CtTypeAccessImpl]java.util.UUID.randomUUID();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String randomUUIDString = [CtInvocationImpl][CtVariableReadImpl]uuid.toString();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String category = [CtLiteralImpl]"Bot-Detection";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String notificationType = [CtLiteralImpl]"email";
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]randomUUIDString);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]category);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]3, [CtVariableReadImpl]notificationType);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]4, [CtVariableReadImpl]email);
            [CtInvocationImpl][CtVariableReadImpl]ps.execute();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while save email list.", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * retrieve email list which configured for BotDetectedData Api alert
     */
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.botDataAPI.BotDetectionData> retrieveSavedBotDataEmailList() throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet resultSet = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.botDataAPI.BotDetectionData> list = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery;
            [CtAssignmentImpl][CtVariableWriteImpl]conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]SQLConstants.BotDataConstants.GET_SAVED_ALERT_EMAILS;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtAssignmentImpl][CtVariableWriteImpl]resultSet = [CtInvocationImpl][CtVariableReadImpl]ps.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]resultSet.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.botDataAPI.BotDetectionData botDetectedData = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.botDataAPI.BotDetectionData();
                [CtInvocationImpl][CtVariableReadImpl]botDetectedData.setUuid([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"UUID"));
                [CtInvocationImpl][CtVariableReadImpl]botDetectedData.setEmail([CtInvocationImpl][CtVariableReadImpl]resultSet.getString([CtLiteralImpl]"SUBSCRIBER_ADDRESS"));
                [CtInvocationImpl][CtVariableReadImpl]list.add([CtVariableReadImpl]botDetectedData);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to retrieve saved email types by tenant Name. ", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]conn, [CtVariableReadImpl]resultSet);
        }
        [CtReturnImpl]return [CtVariableReadImpl]list;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Delete email list from the database by using the tenantDomain
     */
    public [CtTypeReferenceImpl]void deleteBotDataEmailList([CtParameterImpl][CtTypeReferenceImpl]java.lang.String uuid) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException, [CtTypeReferenceImpl]java.sql.SQLException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
        [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
        [CtTryImpl]try [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteEmail = [CtFieldReadImpl]SQLConstants.BotDataConstants.DELETE_EMAIL_BY_UUID;
            [CtAssignmentImpl][CtVariableWriteImpl]ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteEmail);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtVariableReadImpl]uuid);
            [CtInvocationImpl][CtVariableReadImpl]ps.execute();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]connection.rollback();
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to delete alert email data.", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]ps, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Persist revoked jwt signatures to database.
     *
     * @param jwtSignature
     * 		signature of jwt token.
     * @param tenantDomain
     * 		tenant domain of the jwt subject.
     * @param expiryTime
     * 		expiry time of the token.
     */
    public [CtTypeReferenceImpl]void addRevokedJWTSignature([CtParameterImpl][CtTypeReferenceImpl]java.lang.String jwtSignature, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String type, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Long expiryTime, [CtParameterImpl][CtTypeReferenceImpl]int tenantId) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang3.StringUtils.isEmpty([CtVariableReadImpl]type)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]type = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.APIConstants.DEFAULT;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String addJwtSignature = [CtFieldReadImpl]SQLConstants.RevokedJWTConstants.ADD_JWT_SIGNATURE;
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection conn = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtInvocationImpl][CtVariableReadImpl]conn.prepareStatement([CtVariableReadImpl]addJwtSignature)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]conn.setAutoCommit([CtLiteralImpl]false);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]1, [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]java.util.UUID.randomUUID().toString());
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]2, [CtVariableReadImpl]jwtSignature);
            [CtInvocationImpl][CtVariableReadImpl]ps.setLong([CtLiteralImpl]3, [CtVariableReadImpl]expiryTime);
            [CtInvocationImpl][CtVariableReadImpl]ps.setInt([CtLiteralImpl]4, [CtVariableReadImpl]tenantId);
            [CtInvocationImpl][CtVariableReadImpl]ps.setString([CtLiteralImpl]5, [CtVariableReadImpl]type);
            [CtInvocationImpl][CtVariableReadImpl]ps.execute();
            [CtInvocationImpl][CtVariableReadImpl]conn.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Error in adding revoked jwt signature to database : " + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]e);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Removes expired JWTs from revoke table.
     *
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void removeExpiredJWTs() throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteQuery = [CtFieldReadImpl]SQLConstants.RevokedJWTConstants.DELETE_REVOKED_JWT;
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement ps = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]deleteQuery)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtInvocationImpl][CtVariableReadImpl]ps.setLong([CtLiteralImpl]1, [CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]java.lang.System.currentTimeMillis() / [CtLiteralImpl]1000);
            [CtInvocationImpl][CtVariableReadImpl]ps.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error while deleting expired JWTs from revoke table.", [CtVariableReadImpl]e);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Adds an API category
     *
     * @param tenantID
     * 		Logged in user's tenant ID
     * @param category
     * 		Category
     * @return Category
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APICategory addCategory([CtParameterImpl][CtTypeReferenceImpl]int tenantID, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APICategory category) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String uuid = [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]java.util.UUID.randomUUID().toString();
        [CtInvocationImpl][CtVariableReadImpl]category.setId([CtVariableReadImpl]uuid);
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.ADD_CATEGORY_SQL)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]1, [CtVariableReadImpl]uuid);
            [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]category.getName());
            [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]category.getDescription());
            [CtInvocationImpl][CtVariableReadImpl]statement.setInt([CtLiteralImpl]4, [CtVariableReadImpl]tenantID);
            [CtInvocationImpl][CtVariableReadImpl]statement.executeUpdate();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to add Category: " + [CtVariableReadImpl]uuid, [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]category;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Update API Category
     *
     * @param apiCategory
     * 		API category object with updated details
     * @throws APIManagementException
     */
    public [CtTypeReferenceImpl]void updateCategory([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APICategory apiCategory) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.UPDATE_API_CATEGORY)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]1, [CtInvocationImpl][CtVariableReadImpl]apiCategory.getDescription());
            [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]2, [CtInvocationImpl][CtVariableReadImpl]apiCategory.getName());
            [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]3, [CtInvocationImpl][CtVariableReadImpl]apiCategory.getId());
            [CtInvocationImpl][CtVariableReadImpl]statement.execute();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to update API Category : " + [CtInvocationImpl][CtVariableReadImpl]apiCategory.getName()) + [CtLiteralImpl]" of tenant ") + [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantDomainFromTenantId([CtInvocationImpl][CtVariableReadImpl]apiCategory.getTenantID()), [CtVariableReadImpl]e);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get all available API categories of the tenant
     *
     * @param tenantID
     * @return API Categories List
     */
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APICategory> getAllCategories([CtParameterImpl][CtTypeReferenceImpl]int tenantID) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APICategory> categoriesList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.GET_CATEGORIES_BY_TENANT_ID_SQL)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]statement.setInt([CtLiteralImpl]1, [CtVariableReadImpl]tenantID);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtInvocationImpl][CtVariableReadImpl]statement.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String id = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"UUID");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String name = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NAME");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String description = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"DESCRIPTION");
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APICategory category = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APICategory();
                [CtInvocationImpl][CtVariableReadImpl]category.setId([CtVariableReadImpl]id);
                [CtInvocationImpl][CtVariableReadImpl]category.setName([CtVariableReadImpl]name);
                [CtInvocationImpl][CtVariableReadImpl]category.setDescription([CtVariableReadImpl]description);
                [CtInvocationImpl][CtVariableReadImpl]category.setTenantID([CtVariableReadImpl]tenantID);
                [CtInvocationImpl][CtVariableReadImpl]categoriesList.add([CtVariableReadImpl]category);
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to retrieve API categories for tenant " + [CtVariableReadImpl]tenantID, [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]categoriesList;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Checks whether the given category name is already available under given tenant domain with any UUID other than the given UUID
     *
     * @param categoryName
     * @param uuid
     * @param tenantID
     * @return  */
    public [CtTypeReferenceImpl]boolean isAPICategoryNameExists([CtParameterImpl][CtTypeReferenceImpl]java.lang.String categoryName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String uuid, [CtParameterImpl][CtTypeReferenceImpl]int tenantID) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sql = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.IS_API_CATEGORY_NAME_EXISTS;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]uuid != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sql = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.IS_API_CATEGORY_NAME_EXISTS_FOR_ANOTHER_UUID;
        }
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sql)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]1, [CtVariableReadImpl]categoryName);
            [CtInvocationImpl][CtVariableReadImpl]statement.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantID);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]uuid != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]3, [CtVariableReadImpl]uuid);
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtInvocationImpl][CtVariableReadImpl]statement.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]int count = [CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"API_CATEGORY_COUNT");
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]count > [CtLiteralImpl]0) [CtBlockImpl]{
                    [CtReturnImpl]return [CtLiteralImpl]true;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to check whether API category name : " + [CtVariableReadImpl]categoryName) + [CtLiteralImpl]" exists", [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtLiteralImpl]false;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APICategory getAPICategoryByID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String apiCategoryID) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APICategory apiCategory = [CtLiteralImpl]null;
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.GET_API_CATEGORY_BY_ID)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]1, [CtVariableReadImpl]apiCategoryID);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtInvocationImpl][CtVariableReadImpl]statement.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]apiCategory = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APICategory();
                [CtInvocationImpl][CtVariableReadImpl]apiCategory.setName([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NAME"));
                [CtInvocationImpl][CtVariableReadImpl]apiCategory.setDescription([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"DESCRIPTION"));
                [CtInvocationImpl][CtVariableReadImpl]apiCategory.setTenantID([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"TENANT_ID"));
                [CtInvocationImpl][CtVariableReadImpl]apiCategory.setId([CtVariableReadImpl]apiCategoryID);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to fetch API category : " + [CtVariableReadImpl]apiCategoryID, [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]apiCategory;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APICategory getAPICategoryByName([CtParameterImpl][CtTypeReferenceImpl]java.lang.String apiCategoryName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String tenantDomain) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APICategory apiCategory = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantID = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIUtil.getTenantIdFromTenantDomain([CtVariableReadImpl]tenantDomain);
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.GET_API_CATEGORY_BY_NAME)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]1, [CtVariableReadImpl]apiCategoryName);
            [CtInvocationImpl][CtVariableReadImpl]statement.setInt([CtLiteralImpl]2, [CtVariableReadImpl]tenantID);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtInvocationImpl][CtVariableReadImpl]statement.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]apiCategory = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.APICategory();
                [CtInvocationImpl][CtVariableReadImpl]apiCategory.setName([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"NAME"));
                [CtInvocationImpl][CtVariableReadImpl]apiCategory.setDescription([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"DESCRIPTION"));
                [CtInvocationImpl][CtVariableReadImpl]apiCategory.setTenantID([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"TENANT_ID"));
                [CtInvocationImpl][CtVariableReadImpl]apiCategory.setId([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"UUID"));
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Failed to fetch API category : " + [CtVariableReadImpl]apiCategoryName) + [CtLiteralImpl]" of tenant ") + [CtVariableReadImpl]tenantDomain, [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]apiCategory;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void deleteCategory([CtParameterImpl][CtTypeReferenceImpl]java.lang.String categoryID) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.DELETE_API_CATEGORY)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]1, [CtVariableReadImpl]categoryID);
            [CtInvocationImpl][CtVariableReadImpl]statement.executeUpdate();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to delete API category : " + [CtVariableReadImpl]categoryID, [CtVariableReadImpl]e);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.lang.String addUserID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.ADD_USER_ID)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]1, [CtVariableReadImpl]userID);
            [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]2, [CtVariableReadImpl]userName);
            [CtInvocationImpl][CtVariableReadImpl]statement.executeUpdate();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to add userID for " + [CtVariableReadImpl]userName, [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]userID;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.lang.String getUserID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtLiteralImpl]null;
        [CtTryWithResourceImpl]try ([CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();[CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement statement = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtTypeAccessImpl]SQLConstants.GET_USER_ID)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]statement.setString([CtLiteralImpl]1, [CtVariableReadImpl]userName);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtInvocationImpl][CtVariableReadImpl]statement.executeQuery();
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userID = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"USER_ID");
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userID == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userID = [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]java.util.UUID.randomUUID().toString();
                [CtInvocationImpl]addUserID([CtVariableReadImpl]userID, [CtVariableReadImpl]userName);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtBinaryOperatorImpl][CtLiteralImpl]"Failed to fetch user ID for " + [CtVariableReadImpl]userName, [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]userID;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void deleteWorkflowRequest([CtParameterImpl][CtTypeReferenceImpl]java.lang.String workflowExtRef) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String query = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtInvocationImpl][CtVariableReadImpl]connection.setAutoCommit([CtLiteralImpl]false);
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]query);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]workflowExtRef);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeUpdate();
            [CtInvocationImpl][CtVariableReadImpl]connection.commit();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Failed to delete the workflow request ", [CtVariableReadImpl]e);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Workflow getworkflowReferenceByEWR([CtParameterImpl][CtTypeReferenceImpl]java.lang.String externalWorkflowRef) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Workflow workflow = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Workflow();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]externalWorkflowRef);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]workflow.setWorkflowId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"WF_ID"));
                [CtInvocationImpl][CtVariableReadImpl]workflow.setWorkflowReference([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_REFERENCE"));
                [CtInvocationImpl][CtVariableReadImpl]workflow.setWorkflowType([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_TYPE"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String workflowstatus = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_STATUS");
                [CtInvocationImpl][CtVariableReadImpl]workflow.setStatus([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf([CtVariableReadImpl]workflowstatus));
                [CtInvocationImpl][CtVariableReadImpl]workflow.setCreatedTime([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]rs.getTimestamp([CtLiteralImpl]"WF_CREATED_TIME").toString());
                [CtInvocationImpl][CtVariableReadImpl]workflow.setUpdatedTime([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]rs.getTimestamp([CtLiteralImpl]"WF_UPDATED_TIME").toString());
                [CtInvocationImpl][CtVariableReadImpl]workflow.setWorkflowStatusDesc([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_STATUS_DESC"));
                [CtInvocationImpl][CtVariableReadImpl]workflow.setTenantId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"TENANT_ID"));
                [CtInvocationImpl][CtVariableReadImpl]workflow.setTenantDomain([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"TENANT_DOMAIN"));
                [CtInvocationImpl][CtVariableReadImpl]workflow.setExternalWorkflowReference([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_EXTERNAL_REFERENCE"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Blob blob = [CtInvocationImpl][CtVariableReadImpl]rs.getBlob([CtLiteralImpl]"WF_METADATA");
                [CtLocalVariableImpl][CtArrayTypeReferenceImpl]byte[] byteData;
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]blob != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]byteData = [CtInvocationImpl][CtVariableReadImpl]blob.getBytes([CtLiteralImpl]1L, [CtInvocationImpl](([CtTypeReferenceImpl]int) ([CtVariableReadImpl]blob.length())));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.io.InputStream targetStream = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.io.ByteArrayInputStream([CtVariableReadImpl]byteData);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String data = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getStringFromInputStream([CtVariableReadImpl]targetStream);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]com.google.gson.Gson g = [CtConstructorCallImpl]new [CtTypeReferenceImpl]com.google.gson.Gson();
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.json.simple.JSONObject json = [CtInvocationImpl][CtVariableReadImpl]g.fromJson([CtVariableReadImpl]data, [CtFieldReadImpl]org.json.simple.JSONObject.class);
                    [CtInvocationImpl][CtVariableReadImpl]workflow.setMetadata([CtVariableReadImpl]json);
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.json.simple.JSONObject json = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.json.simple.JSONObject();
                    [CtInvocationImpl][CtVariableReadImpl]workflow.setMetadata([CtVariableReadImpl]json);
                }
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error when retriving the workflow details", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]workflow;
    }

    [CtMethodImpl]public [CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Workflow[] getworkflows([CtParameterImpl][CtTypeReferenceImpl]java.lang.String workflowType, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String status, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String tenantDomain) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Workflow[] workflows = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]workflowType != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ALL_WORKFLOW_DETAILS;
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]workflowType != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]workflowType);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]status);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtVariableReadImpl]tenantDomain);
            } else [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]status);
                [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]tenantDomain);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Workflow> workflowsList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Workflow>();
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Workflow workflow;
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]workflow = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Workflow();
                [CtInvocationImpl][CtVariableReadImpl]workflow.setWorkflowId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"WF_ID"));
                [CtInvocationImpl][CtVariableReadImpl]workflow.setWorkflowReference([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_REFERENCE"));
                [CtInvocationImpl][CtVariableReadImpl]workflow.setWorkflowType([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_TYPE"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String workflowstatus = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_STATUS");
                [CtInvocationImpl][CtVariableReadImpl]workflow.setStatus([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf([CtVariableReadImpl]workflowstatus));
                [CtInvocationImpl][CtVariableReadImpl]workflow.setCreatedTime([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]rs.getTimestamp([CtLiteralImpl]"WF_CREATED_TIME").toString());
                [CtInvocationImpl][CtVariableReadImpl]workflow.setUpdatedTime([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]rs.getTimestamp([CtLiteralImpl]"WF_UPDATED_TIME").toString());
                [CtInvocationImpl][CtVariableReadImpl]workflow.setWorkflowStatusDesc([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_STATUS_DESC"));
                [CtInvocationImpl][CtVariableReadImpl]workflow.setTenantId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"TENANT_ID"));
                [CtInvocationImpl][CtVariableReadImpl]workflow.setTenantDomain([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"TENANT_DOMAIN"));
                [CtInvocationImpl][CtVariableReadImpl]workflow.setExternalWorkflowReference([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_EXTERNAL_REFERENCE"));
                [CtInvocationImpl][CtVariableReadImpl]workflow.setWorkflowDescription([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_STATUS_DESC"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Blob blob = [CtInvocationImpl][CtVariableReadImpl]rs.getBlob([CtLiteralImpl]"WF_METADATA");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Blob blob1 = [CtInvocationImpl][CtVariableReadImpl]rs.getBlob([CtLiteralImpl]"WF_PROPERTIES");
                [CtLocalVariableImpl][CtArrayTypeReferenceImpl]byte[] byteData;
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]blob != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]byteData = [CtInvocationImpl][CtVariableReadImpl]blob.getBytes([CtLiteralImpl]1L, [CtInvocationImpl](([CtTypeReferenceImpl]int) ([CtVariableReadImpl]blob.length())));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.io.InputStream targetStream = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.io.ByteArrayInputStream([CtVariableReadImpl]byteData);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String data = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getStringFromInputStream([CtVariableReadImpl]targetStream);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]com.google.gson.Gson g = [CtConstructorCallImpl]new [CtTypeReferenceImpl]com.google.gson.Gson();
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.json.simple.JSONObject json = [CtInvocationImpl][CtVariableReadImpl]g.fromJson([CtVariableReadImpl]data, [CtFieldReadImpl]org.json.simple.JSONObject.class);
                    [CtInvocationImpl][CtVariableReadImpl]workflow.setMetadata([CtVariableReadImpl]json);
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.json.simple.JSONObject json = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.json.simple.JSONObject();
                    [CtInvocationImpl][CtVariableReadImpl]workflow.setMetadata([CtVariableReadImpl]json);
                }
                [CtLocalVariableImpl][CtArrayTypeReferenceImpl]byte[] byteData1;
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]blob1 != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]byteData1 = [CtInvocationImpl][CtVariableReadImpl]blob1.getBytes([CtLiteralImpl]1L, [CtInvocationImpl](([CtTypeReferenceImpl]int) ([CtVariableReadImpl]blob.length())));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.io.InputStream targetStream1 = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.io.ByteArrayInputStream([CtVariableReadImpl]byteData1);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String data1 = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getStringFromInputStream([CtVariableReadImpl]targetStream1);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]com.google.gson.Gson g = [CtConstructorCallImpl]new [CtTypeReferenceImpl]com.google.gson.Gson();
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.json.simple.JSONObject json = [CtInvocationImpl][CtVariableReadImpl]g.fromJson([CtVariableReadImpl]data1, [CtFieldReadImpl]org.json.simple.JSONObject.class);
                    [CtInvocationImpl][CtVariableReadImpl]workflow.setProperties([CtVariableReadImpl]json);
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.json.simple.JSONObject json = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.json.simple.JSONObject();
                    [CtInvocationImpl][CtVariableReadImpl]workflow.setProperties([CtVariableReadImpl]json);
                }
                [CtInvocationImpl][CtVariableReadImpl]workflowsList.add([CtVariableReadImpl]workflow);
            } 
            [CtAssignmentImpl][CtVariableWriteImpl]workflows = [CtInvocationImpl][CtVariableReadImpl]workflowsList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Workflow[[CtInvocationImpl][CtVariableReadImpl]workflowsList.size()]);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error when retrieve all the workflow details", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]workflows;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Workflow getworkflowReferenceByExternalWorkflowReferenceID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String externelWorkflowRef, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String status, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String tenantDomain) throws [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.APIManagementException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Connection connection = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.PreparedStatement prepStmt = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.ResultSet rs = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Workflow workflow = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.apimgt.api.model.Workflow();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String sqlQuery = [CtFieldReadImpl]org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants.GET_ALL_WORKFLOW_DETAIL_REFER_BY_EXTERNALWORKFLOWREFERENCE;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]connection = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getConnection();
            [CtAssignmentImpl][CtVariableWriteImpl]prepStmt = [CtInvocationImpl][CtVariableReadImpl]connection.prepareStatement([CtVariableReadImpl]sqlQuery);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]1, [CtVariableReadImpl]externelWorkflowRef);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]2, [CtVariableReadImpl]status);
            [CtInvocationImpl][CtVariableReadImpl]prepStmt.setString([CtLiteralImpl]3, [CtVariableReadImpl]tenantDomain);
            [CtAssignmentImpl][CtVariableWriteImpl]rs = [CtInvocationImpl][CtVariableReadImpl]prepStmt.executeQuery();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]rs.next()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]workflow.setWorkflowId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"WF_ID"));
                [CtInvocationImpl][CtVariableReadImpl]workflow.setWorkflowReference([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_REFERENCE"));
                [CtInvocationImpl][CtVariableReadImpl]workflow.setWorkflowType([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_TYPE"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String workflowstatus = [CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_STATUS");
                [CtInvocationImpl][CtVariableReadImpl]workflow.setStatus([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf([CtVariableReadImpl]workflowstatus));
                [CtInvocationImpl][CtVariableReadImpl]workflow.setCreatedTime([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]rs.getTimestamp([CtLiteralImpl]"WF_CREATED_TIME").toString());
                [CtInvocationImpl][CtVariableReadImpl]workflow.setUpdatedTime([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]rs.getTimestamp([CtLiteralImpl]"WF_UPDATED_TIME").toString());
                [CtInvocationImpl][CtVariableReadImpl]workflow.setWorkflowDescription([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_STATUS_DESC"));
                [CtInvocationImpl][CtVariableReadImpl]workflow.setTenantId([CtInvocationImpl][CtVariableReadImpl]rs.getInt([CtLiteralImpl]"TENANT_ID"));
                [CtInvocationImpl][CtVariableReadImpl]workflow.setTenantDomain([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"TENANT_DOMAIN"));
                [CtInvocationImpl][CtVariableReadImpl]workflow.setExternalWorkflowReference([CtInvocationImpl][CtVariableReadImpl]rs.getString([CtLiteralImpl]"WF_EXTERNAL_REFERENCE"));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Blob blob = [CtInvocationImpl][CtVariableReadImpl]rs.getBlob([CtLiteralImpl]"WF_METADATA");
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.sql.Blob blob1 = [CtInvocationImpl][CtVariableReadImpl]rs.getBlob([CtLiteralImpl]"WF_PROPERTIES");
                [CtLocalVariableImpl][CtArrayTypeReferenceImpl]byte[] byteData;
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]blob != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]byteData = [CtInvocationImpl][CtVariableReadImpl]blob.getBytes([CtLiteralImpl]1L, [CtInvocationImpl](([CtTypeReferenceImpl]int) ([CtVariableReadImpl]blob.length())));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.io.InputStream targetStream = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.io.ByteArrayInputStream([CtVariableReadImpl]byteData);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String data = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getStringFromInputStream([CtVariableReadImpl]targetStream);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]com.google.gson.Gson g = [CtConstructorCallImpl]new [CtTypeReferenceImpl]com.google.gson.Gson();
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.json.simple.JSONObject json = [CtInvocationImpl][CtVariableReadImpl]g.fromJson([CtVariableReadImpl]data, [CtFieldReadImpl]org.json.simple.JSONObject.class);
                    [CtInvocationImpl][CtVariableReadImpl]workflow.setMetadata([CtVariableReadImpl]json);
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.json.simple.JSONObject json = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.json.simple.JSONObject();
                    [CtInvocationImpl][CtVariableReadImpl]workflow.setMetadata([CtVariableReadImpl]json);
                }
                [CtLocalVariableImpl][CtArrayTypeReferenceImpl]byte[] byteData1;
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]blob != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]byteData1 = [CtInvocationImpl][CtVariableReadImpl]blob1.getBytes([CtLiteralImpl]1L, [CtInvocationImpl](([CtTypeReferenceImpl]int) ([CtVariableReadImpl]blob.length())));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.io.InputStream targetStream1 = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.io.ByteArrayInputStream([CtVariableReadImpl]byteData1);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String data1 = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.getStringFromInputStream([CtVariableReadImpl]targetStream1);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]com.google.gson.Gson g = [CtConstructorCallImpl]new [CtTypeReferenceImpl]com.google.gson.Gson();
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.json.simple.JSONObject json1 = [CtInvocationImpl][CtVariableReadImpl]g.fromJson([CtVariableReadImpl]data1, [CtFieldReadImpl]org.json.simple.JSONObject.class);
                    [CtInvocationImpl][CtVariableReadImpl]workflow.setProperties([CtVariableReadImpl]json1);
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.json.simple.JSONObject json1 = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.json.simple.JSONObject();
                    [CtInvocationImpl][CtVariableReadImpl]workflow.setProperties([CtVariableReadImpl]json1);
                }
            } 
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.sql.SQLException e) [CtBlockImpl]{
            [CtInvocationImpl]handleException([CtLiteralImpl]"Error when retriving the workflow details", [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil.closeAllConnections([CtVariableReadImpl]prepStmt, [CtVariableReadImpl]connection, [CtVariableReadImpl]rs);
        }
        [CtReturnImpl]return [CtVariableReadImpl]workflow;
    }
}