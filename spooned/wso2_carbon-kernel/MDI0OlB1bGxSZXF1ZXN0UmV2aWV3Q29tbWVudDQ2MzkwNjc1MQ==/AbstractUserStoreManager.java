[CompilationUnitImpl][CtCommentImpl]/* Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

 WSO2 Inc. licenses this file to you under the Apache License,
 Version 2.0 (the "License"); you may not use this file except
 in compliance with the License.
 You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
 */
[CtPackageDeclarationImpl]package org.wso2.carbon.user.core.common;
[CtUnresolvedImport]import org.wso2.carbon.user.core.model.OperationalCondition;
[CtUnresolvedImport]import org.apache.commons.lang.StringUtils;
[CtImportImpl]import java.util.HashMap;
[CtUnresolvedImport]import org.wso2.carbon.user.core.hybrid.HybridRoleManager;
[CtUnresolvedImport]import org.wso2.carbon.user.core.Permission;
[CtImportImpl]import java.util.ArrayList;
[CtUnresolvedImport]import org.wso2.carbon.user.core.claim.ClaimMapping;
[CtUnresolvedImport]import org.wso2.carbon.user.core.claim.ClaimManager;
[CtUnresolvedImport]import org.wso2.carbon.user.core.service.RealmService;
[CtUnresolvedImport]import org.wso2.carbon.user.core.UserRealm;
[CtUnresolvedImport]import org.wso2.carbon.user.core.authorization.AuthorizationCache;
[CtUnresolvedImport]import org.wso2.carbon.user.core.listener.UserManagementErrorEventListener;
[CtUnresolvedImport]import org.wso2.carbon.user.core.model.ExpressionCondition;
[CtUnresolvedImport]import org.wso2.carbon.user.core.constants.UserCoreErrorConstants;
[CtUnresolvedImport]import static org.wso2.carbon.user.core.constants.UserCoreErrorConstants.ErrorMessages.ERROR_CODE_ROLE_ALREADY_EXISTS;
[CtImportImpl]import java.util.List;
[CtImportImpl]import java.util.UUID;
[CtImportImpl]import java.util.HashSet;
[CtImportImpl]import java.util.Collections;
[CtImportImpl]import java.util.stream.Collectors;
[CtUnresolvedImport]import static org.wso2.carbon.user.core.UserStoreConfigConstants.RESOLVE_USER_NAME_FROM_USER_ID_CACHE_NAME;
[CtUnresolvedImport]import org.wso2.carbon.user.core.claim.Claim;
[CtUnresolvedImport]import org.wso2.carbon.user.core.model.ExpressionOperation;
[CtUnresolvedImport]import static org.wso2.carbon.user.core.constants.UserCoreErrorConstants.ErrorMessages.ERROR_CODE_DUPLICATE_WHILE_ADDING_A_HYBRID_ROLE;
[CtUnresolvedImport]import org.wso2.carbon.user.core.listener.UserOperationEventListener;
[CtImportImpl]import java.security.PrivilegedActionException;
[CtUnresolvedImport]import org.wso2.carbon.user.core.listener.UniqueIDUserOperationEventListener;
[CtUnresolvedImport]import org.wso2.carbon.user.core.listener.UserStoreManagerListener;
[CtImportImpl]import java.lang.reflect.Method;
[CtUnresolvedImport]import org.wso2.carbon.user.core.model.UniqueIDUserClaimSearchEntry;
[CtUnresolvedImport]import org.wso2.carbon.user.core.model.OperationalOperation;
[CtUnresolvedImport]import org.wso2.carbon.user.core.UserCoreConstants;
[CtImportImpl]import javax.sql.DataSource;
[CtUnresolvedImport]import org.wso2.carbon.user.core.UserStoreManager;
[CtUnresolvedImport]import static org.wso2.carbon.user.core.constants.UserCoreErrorConstants.ErrorMessages.ERROR_CODE_DUPLICATE_WHILE_ADDING_ROLE;
[CtUnresolvedImport]import org.wso2.carbon.utils.multitenancy.MultitenantUtils;
[CtUnresolvedImport]import static org.wso2.carbon.user.core.constants.UserCoreErrorConstants.ErrorMessages.ERROR_CODE_DUPLICATE_WHILE_ADDING_A_SYSTEM_ROLE;
[CtUnresolvedImport]import org.wso2.carbon.user.core.constants.UserCoreClaimConstants;
[CtUnresolvedImport]import org.apache.commons.logging.LogFactory;
[CtUnresolvedImport]import org.wso2.carbon.CarbonConstants;
[CtImportImpl]import java.util.Map;
[CtImportImpl]import java.util.Arrays;
[CtUnresolvedImport]import org.wso2.carbon.user.core.PaginatedUserStoreManager;
[CtUnresolvedImport]import org.wso2.carbon.user.core.profile.ProfileConfigurationManager;
[CtImportImpl]import java.util.Set;
[CtUnresolvedImport]import static org.wso2.carbon.user.core.constants.UserCoreErrorConstants.ErrorMessages.ERROR_CODE_DUPLICATE_WHILE_ADDING_A_SYSTEM_USER;
[CtImportImpl]import java.util.regex.Matcher;
[CtUnresolvedImport]import org.wso2.carbon.user.core.model.Condition;
[CtUnresolvedImport]import org.wso2.carbon.user.core.UserStoreConfigConstants;
[CtUnresolvedImport]import org.wso2.carbon.user.core.internal.UserStoreMgtDSComponent;
[CtImportImpl]import java.nio.CharBuffer;
[CtUnresolvedImport]import org.wso2.carbon.utils.Secret;
[CtUnresolvedImport]import org.wso2.carbon.user.core.constants.UserCoreErrorConstants.ErrorMessages;
[CtUnresolvedImport]import org.apache.commons.collections.CollectionUtils;
[CtUnresolvedImport]import org.wso2.carbon.user.core.internal.UMListenerServiceComponent;
[CtUnresolvedImport]import org.wso2.carbon.user.core.util.UserCoreUtil;
[CtImportImpl]import java.util.Iterator;
[CtUnresolvedImport]import org.wso2.carbon.user.core.ldap.LDAPConstants;
[CtUnresolvedImport]import org.wso2.carbon.user.core.listener.SecretHandleableListener;
[CtUnresolvedImport]import org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager;
[CtUnresolvedImport]import org.wso2.carbon.user.core.NotImplementedException;
[CtImportImpl]import java.util.regex.Pattern;
[CtUnresolvedImport]import static org.wso2.carbon.user.core.UserStoreConfigConstants.RESOLVE_USER_ID_FROM_USER_NAME_CACHE_NAME;
[CtUnresolvedImport]import org.wso2.carbon.utils.UnsupportedSecretTypeException;
[CtUnresolvedImport]import org.wso2.carbon.user.api.RealmConfiguration;
[CtUnresolvedImport]import static org.wso2.carbon.user.core.constants.UserCoreErrorConstants.ErrorMessages.ERROR_CODE_DUPLICATE_WHILE_ADDING_A_USER;
[CtImportImpl]import java.lang.reflect.Constructor;
[CtImportImpl]import java.security.PrivilegedExceptionAction;
[CtImportImpl]import java.util.Date;
[CtUnresolvedImport]import org.wso2.carbon.user.core.UserStoreException;
[CtImportImpl]import java.security.AccessController;
[CtUnresolvedImport]import org.wso2.carbon.user.core.listener.UserStoreManagerConfigurationListener;
[CtUnresolvedImport]import org.wso2.carbon.user.core.model.UserClaimSearchEntry;
[CtUnresolvedImport]import org.wso2.carbon.user.core.system.SystemUserRoleManager;
[CtUnresolvedImport]import org.wso2.carbon.context.CarbonContext;
[CtUnresolvedImport]import org.wso2.carbon.user.core.listener.UniqueIDUserManagementErrorEventListener;
[CtUnresolvedImport]import org.wso2.carbon.user.core.model.UserMgtContext;
[CtUnresolvedImport]import org.wso2.carbon.user.core.dto.RoleDTO;
[CtUnresolvedImport]import org.apache.commons.logging.Log;
[CtUnresolvedImport]import org.wso2.carbon.user.core.config.UserStorePreferenceOrderSupplier;
[CtUnresolvedImport]import org.wso2.carbon.user.core.UniqueIDUserStoreManager;
[CtUnresolvedImport]import org.apache.commons.lang.ArrayUtils;
[CtClassImpl]public abstract class AbstractUserStoreManager implements [CtTypeReferenceImpl]org.wso2.carbon.user.core.PaginatedUserStoreManager , [CtTypeReferenceImpl]org.wso2.carbon.user.core.UniqueIDUserStoreManager {
    [CtFieldImpl]protected static final [CtTypeReferenceImpl]java.lang.String TRUE_VALUE = [CtLiteralImpl]"true";

    [CtFieldImpl]protected static final [CtTypeReferenceImpl]java.lang.String FALSE_VALUE = [CtLiteralImpl]"false";

    [CtFieldImpl]protected static final [CtTypeReferenceImpl]java.lang.String QUERY_FILTER_STRING_ANY = [CtLiteralImpl]"*";

    [CtFieldImpl]protected static final [CtTypeReferenceImpl]int QUERY_MAX_ITEM_LIMIT_ANY = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;

    [CtFieldImpl]private static final [CtTypeReferenceImpl]java.lang.String MAX_LIST_LENGTH = [CtLiteralImpl]"100";

    [CtFieldImpl]private static final [CtTypeReferenceImpl]int MAX_ITEM_LIMIT_UNLIMITED = [CtUnaryOperatorImpl]-[CtLiteralImpl]1;

    [CtFieldImpl]private static final [CtTypeReferenceImpl]java.lang.String MULIPLE_ATTRIBUTE_ENABLE = [CtLiteralImpl]"MultipleAttributeEnable";

    [CtFieldImpl]private static final [CtTypeReferenceImpl]java.lang.String DISAPLAY_NAME_CLAIM = [CtLiteralImpl]"http://wso2.org/claims/displayName";

    [CtFieldImpl]private static final [CtTypeReferenceImpl]java.lang.String SCIM_USERNAME_CLAIM_URI = [CtLiteralImpl]"urn:scim:schemas:core:1.0:userName";

    [CtFieldImpl]private static final [CtTypeReferenceImpl]java.lang.String SCIM2_USERNAME_CLAIM_URI = [CtLiteralImpl]"urn:ietf:params:scim:schemas:core:2.0:User:userName";

    [CtFieldImpl]protected static final [CtTypeReferenceImpl]java.lang.String USERNAME_CLAIM_URI = [CtLiteralImpl]"http://wso2.org/claims/username";

    [CtFieldImpl]private static final [CtTypeReferenceImpl]java.lang.String APPLICATION_DOMAIN = [CtLiteralImpl]"Application";

    [CtFieldImpl]private static final [CtTypeReferenceImpl]java.lang.String WORKFLOW_DOMAIN = [CtLiteralImpl]"Workflow";

    [CtFieldImpl]private static final [CtTypeReferenceImpl]java.lang.String INVALID_CLAIM_URL = [CtLiteralImpl]"InvalidClaimUrl";

    [CtFieldImpl]private static final [CtTypeReferenceImpl]java.lang.String INVALID_USER_NAME = [CtLiteralImpl]"InvalidUserName";

    [CtFieldImpl]private static final [CtTypeReferenceImpl]java.lang.String READ_ONLY_STORE = [CtLiteralImpl]"ReadOnlyUserStoreManager";

    [CtFieldImpl]private static final [CtTypeReferenceImpl]java.lang.String READ_ONLY_PRIMARY_STORE = [CtLiteralImpl]"ReadOnlyPrimaryUserStoreManager";

    [CtFieldImpl]private static final [CtTypeReferenceImpl]java.lang.String ADMIN_USER = [CtLiteralImpl]"AdminUser";

    [CtFieldImpl]private static final [CtTypeReferenceImpl]java.lang.String PROPERTY_PASSWORD_ERROR_MSG = [CtLiteralImpl]"PasswordJavaRegExViolationErrorMsg";

    [CtFieldImpl]private static final [CtTypeReferenceImpl]java.lang.String MULTI_ATTRIBUTE_SEPARATOR = [CtLiteralImpl]"MultiAttributeSeparator";

    [CtFieldImpl]private static [CtTypeReferenceImpl]org.apache.commons.logging.Log log = [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.logging.LogFactory.getLog([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.class);

    [CtFieldImpl]protected [CtTypeReferenceImpl]int tenantId;

    [CtFieldImpl]protected [CtTypeReferenceImpl]javax.sql.DataSource dataSource = [CtLiteralImpl]null;

    [CtFieldImpl]protected [CtTypeReferenceImpl]org.wso2.carbon.user.api.RealmConfiguration realmConfig = [CtLiteralImpl]null;

    [CtFieldImpl]protected [CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.ClaimManager claimManager = [CtLiteralImpl]null;

    [CtFieldImpl]protected [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserRealm userRealm = [CtLiteralImpl]null;

    [CtFieldImpl]protected [CtTypeReferenceImpl]org.wso2.carbon.user.core.hybrid.HybridRoleManager hybridRoleManager = [CtLiteralImpl]null;

    [CtFieldImpl][CtCommentImpl]// User roles cache
    protected [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserRolesCache userRolesCache = [CtLiteralImpl]null;

    [CtFieldImpl]protected [CtTypeReferenceImpl]org.wso2.carbon.user.core.system.SystemUserRoleManager systemUserRoleManager = [CtLiteralImpl]null;

    [CtFieldImpl]protected [CtTypeReferenceImpl]boolean readGroupsEnabled = [CtLiteralImpl]false;

    [CtFieldImpl]protected [CtTypeReferenceImpl]boolean writeGroupsEnabled = [CtLiteralImpl]false;

    [CtFieldImpl]private [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secondaryUserStoreManager;

    [CtFieldImpl]private [CtTypeReferenceImpl]boolean userRolesCacheEnabled = [CtLiteralImpl]true;

    [CtFieldImpl]private [CtTypeReferenceImpl]java.lang.String cacheIdentifier;

    [CtFieldImpl]private [CtTypeReferenceImpl]boolean replaceEscapeCharactersAtUserLogin = [CtLiteralImpl]true;

    [CtFieldImpl]private [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager> userStoreManagerHolder = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager>();

    [CtFieldImpl]private [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.Integer> maxUserListCount = [CtLiteralImpl]null;

    [CtFieldImpl]private [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.Integer> maxRoleListCount = [CtLiteralImpl]null;

    [CtFieldImpl]private [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserStoreManagerConfigurationListener> listener = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserStoreManagerConfigurationListener>();

    [CtFieldImpl]private static final [CtTypeReferenceImpl]java.lang.ThreadLocal<[CtTypeReferenceImpl]java.lang.Boolean> isSecureCall = [CtNewClassImpl]new [CtTypeReferenceImpl]java.lang.ThreadLocal<[CtTypeReferenceImpl]java.lang.Boolean>()[CtClassImpl] {
        [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
        protected [CtTypeReferenceImpl]java.lang.Boolean initialValue() [CtBlockImpl]{
            [CtReturnImpl]return [CtFieldReadImpl][CtTypeAccessImpl]java.lang.Boolean.[CtFieldReferenceImpl]FALSE;
        }
    };

    [CtFieldImpl]private [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserUniqueIDManger userUniqueIDManger = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserUniqueIDManger();

    [CtFieldImpl]private [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserUniqueIDDomainResolver userUniqueIDDomainResolver;

    [CtMethodImpl]private [CtTypeReferenceImpl]void setClaimManager([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.ClaimManager claimManager) throws [CtTypeReferenceImpl]java.lang.IllegalAccessException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]java.lang.Boolean.parseBoolean([CtInvocationImpl][CtFieldReadImpl]realmConfig.getRealmProperty([CtTypeAccessImpl]UserCoreClaimConstants.INITIALIZE_NEW_CLAIM_MANAGER))) [CtBlockImpl]{
            [CtAssignmentImpl][CtFieldWriteImpl][CtThisAccessImpl]this.claimManager = [CtVariableReadImpl]claimManager;
        } else [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.IllegalAccessException([CtLiteralImpl]"Set claim manager is not allowed");
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is used by the APIs' in the AbstractUserStoreManager
     * to make compatible with Java Security Manager.
     */
    private [CtTypeReferenceImpl]java.lang.Object callSecure([CtParameterImpl]final [CtTypeReferenceImpl]java.lang.String methodName, [CtParameterImpl]final [CtArrayTypeReferenceImpl]java.lang.Object[] objects, [CtParameterImpl]final [CtArrayTypeReferenceImpl]java.lang.Class[] argTypes) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl]final [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager instance = [CtThisAccessImpl]this;
        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.set([CtFieldReadImpl][CtTypeAccessImpl]java.lang.Boolean.[CtFieldReferenceImpl]TRUE);
        [CtLocalVariableImpl]final [CtTypeReferenceImpl]java.lang.reflect.Method method;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Class clazz = [CtInvocationImpl][CtTypeAccessImpl]java.lang.Class.forName([CtLiteralImpl]"org.wso2.carbon.user.core.common.AbstractUserStoreManager");
            [CtAssignmentImpl][CtVariableWriteImpl]method = [CtInvocationImpl][CtVariableReadImpl]clazz.getDeclaredMethod([CtVariableReadImpl]methodName, [CtVariableReadImpl]argTypes);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.lang.NoSuchMethodException e) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtBinaryOperatorImpl][CtLiteralImpl]"Error occurred when calling method " + [CtVariableReadImpl]methodName, [CtVariableReadImpl]e);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]e);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.lang.ClassNotFoundException e) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtBinaryOperatorImpl][CtLiteralImpl]"Error occurred when calling class " + [CtVariableReadImpl]methodName, [CtVariableReadImpl]e);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]e);
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.security.AccessController.doPrivileged([CtNewClassImpl]new [CtTypeReferenceImpl]java.security.PrivilegedExceptionAction<[CtTypeReferenceImpl]java.lang.Object>()[CtClassImpl] {
                [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
                public [CtTypeReferenceImpl]java.lang.Object run() throws [CtTypeReferenceImpl]java.lang.Exception [CtBlockImpl]{
                    [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]method.invoke([CtVariableReadImpl]instance, [CtVariableReadImpl]objects);
                }
            });
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.security.PrivilegedActionException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]e.getCause() != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]e.getCause().getCause() != [CtLiteralImpl]null)) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]e.getCause().getCause() instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException)) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException) ([CtInvocationImpl][CtVariableReadImpl]e.getCause().getCause())).getErrorCode() != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]e.getCause().getCause().getMessage(), [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException) ([CtInvocationImpl][CtVariableReadImpl]e.getCause().getCause())).getErrorCode(), [CtVariableReadImpl]e);
                }
                [CtThrowImpl][CtCommentImpl]// Actual UserStoreException get wrapped with two exceptions
                throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]e.getCause().getCause().getMessage(), [CtVariableReadImpl]e);
            } else [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg;
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]objects != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtVariableReadImpl]argTypes != [CtLiteralImpl]null)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]msg = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while accessing Java Security Manager Privilege Block when called by " + [CtLiteralImpl]"method ") + [CtVariableReadImpl]methodName) + [CtLiteralImpl]" with ") + [CtFieldReadImpl][CtVariableReadImpl]objects.length) + [CtLiteralImpl]" length of Objects and argTypes ") + [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.toString([CtVariableReadImpl]argTypes);
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]msg = [CtLiteralImpl]"Error occurred while accessing Java Security Manager Privilege Block";
                }
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]msg);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]msg, [CtVariableReadImpl]e);
            }
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.set([CtFieldReadImpl][CtTypeAccessImpl]java.lang.Boolean.[CtFieldReferenceImpl]FALSE);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is used by the support system to read properties
     */
    protected abstract [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> getUserPropertyValues([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] propertyNames, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is used to read properties of the given user.
     *
     * @param userID
     * 		user ID.
     * @param propertyNames
     * 		property names.
     * @param profileName
     * 		profile name.
     * @return user properties of the given user.
     * @throws UserStoreException
     * 		Thrown by the underlying UserStoreManager.
     */
    protected [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> getUserPropertyValuesWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] propertyNames, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"getUserPropertyValuesWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"getUserPropertyValuesWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param roleName
     * @return  */
    protected abstract [CtTypeReferenceImpl]boolean doCheckExistingRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * Creates the search base and other relevant parameters for the provided role name
     *
     * @param roleName
     * @return  */
    protected abstract [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.RoleContext createRoleContext([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param userName
     * @return  * @throws UserStoreException
     */
    protected abstract [CtTypeReferenceImpl]boolean doCheckExistingUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * Check whether the username exists in the systems which supports unique user ID feature.
     *
     * @param userName
     * 		user name.
     * @return Whether the user is existing in the user store.
     * @throws UserStoreException
     * 		Thrown by the underlying UserStoreManager.
     */
    protected [CtTypeReferenceImpl]boolean doCheckExistingUserNameWithIDImpl([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doCheckExistingUserNameWithIDImpl operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doCheckExistingUserNameWithIDImpl operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Check whether the userID exists in the system.
     *
     * @param userID
     * 		user ID.
     * @return Whether the user is existing in the user store.
     * @throws UserStoreException
     * 		Thrown by the underlying UserStoreManager.
     */
    protected [CtTypeReferenceImpl]boolean doCheckExistingUserWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doCheckExistingUserWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doCheckExistingUserWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieves a list of user names for given user's property in user profile
     *
     * @param property
     * 		user property in user profile
     * @param value
     * 		value of property
     * @param profileName
     * 		profile name, can be null. If null the default profile is considered.
     * @return An array of user names
     * @throws UserStoreException
     * 		if the operation failed
     */
    protected abstract [CtArrayTypeReferenceImpl]java.lang.String[] getUserListFromProperties([CtParameterImpl][CtTypeReferenceImpl]java.lang.String property, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String value, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieves a list of user IDs for given user's property in user profile.
     *
     * @param property
     * 		user property in user profile
     * @param value
     * 		value of property
     * @param profileName
     * 		profile name, can be null. If null the default profile is considered.
     * @return An array of user names
     * @throws UserStoreException
     * 		if the operation failed
     */
    protected [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> doGetUserListFromPropertiesWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String property, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String value, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doGetUserListFromPropertiesWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doGetUserListFromPropertiesWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Given the user name and a credential object, the implementation code must validate whether
     * the user is authenticated.
     *
     * @param userName
     * 		The user name
     * @param credential
     * 		The credential of a user
     * @return If the value is true the provided credential match with the user name. False is
    returned for invalid credential, invalid user name and mismatching credential with
    user name.
     * @throws UserStoreException
     * 		An unexpected exception has occurred
     */
    protected abstract [CtTypeReferenceImpl]boolean doAuthenticate([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * Given the preferred user name and a credential object, the implementation code must
     * validate whether the user is authenticated.
     *
     * @param preferredUserNameProperty
     * 		The preferred user name property.
     * @param preferredUserNameValue
     * 		The preferred user name value.
     * @param credential
     * 		The credential of a user.
     * @return @see AuthenticationResult.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    protected [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult doAuthenticateWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String preferredUserNameProperty, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String preferredUserNameValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doAuthenticateWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doAuthenticateWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Given the login identifiers and a credential object, the implementation code must
     * validate whether the user is authenticated.
     *
     * @param loginIdentifiers
     * 		The login identifiers.
     * @param credential
     * 		The credential of a user.
     * @return @see AuthenticationResult.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    protected [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult doAuthenticateWithID([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.LoginIdentifier> loginIdentifiers, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doAuthenticateWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doAuthenticateWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Given the user ID and a credential object, the implementation code must validate whether
     * the user is authenticated.
     *
     * @param userID
     * 		The user ID.
     * @param credential
     * 		The credential of a user.
     * @return @see AuthenticationResult.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    protected [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult doAuthenticateWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doAuthenticateWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doAuthenticateWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add a user to the user store.
     *
     * @param userName
     * 		User name of the user
     * @param credential
     * 		The credential/password of the user
     * @param roleList
     * 		The roles that user belongs
     * @param claims
     * 		Properties of the user
     * @param profileName
     * 		profile name, can be null. If null the default profile is considered.
     * @param requirePasswordChange
     * 		whether password required is need
     * @throws UserStoreException
     * 		An unexpected exception has occurred
     */
    protected abstract [CtTypeReferenceImpl]void doAddUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] roleList, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]boolean requirePasswordChange) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add a user to the user store.
     *
     * @param userName
     * 		User name of the user.
     * @param credential
     * 		The credential/password of the user.
     * @param roleList
     * 		The roles that user belongs.
     * @param claims
     * 		Properties of the user.
     * @param profileName
     * 		profile name, can be null. If null the default profile is considered.
     * @param requirePasswordChange
     * 		whether password required is need.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    protected [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User doAddUserWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] roleList, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]boolean requirePasswordChange) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doAddUserWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doAddUserWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Update the credential/password of the user
     *
     * @param userName
     * 		The user name
     * @param newCredential
     * 		The new credential/password
     * @param oldCredential
     * 		The old credential/password
     * @throws UserStoreException
     * 		An unexpected exception has occurred
     */
    protected abstract [CtTypeReferenceImpl]void doUpdateCredential([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object newCredential, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object oldCredential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * Update the credential/password of the user.
     *
     * @param userID
     * 		The user ID.
     * @param newCredential
     * 		The new credential/password.
     * @param oldCredential
     * 		The old credential/password.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    protected [CtTypeReferenceImpl]void doUpdateCredentialWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object newCredential, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object oldCredential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doUpdateCredentialWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doUpdateCredentialWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Update credential/password by the admin of another user
     *
     * @param userName
     * 		The user name
     * @param newCredential
     * 		The new credential
     * @throws UserStoreException
     * 		An unexpected exception has occurred
     */
    protected abstract [CtTypeReferenceImpl]void doUpdateCredentialByAdmin([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object newCredential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * Update credential/password by the admin of another user.
     *
     * @param userID
     * 		The user ID.
     * @param newCredential
     * 		The new credential.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    protected [CtTypeReferenceImpl]void doUpdateCredentialByAdminWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object newCredential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doUpdateCredentialByAdminWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doUpdateCredentialByAdminWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Delete the user with the given user name
     *
     * @param userName
     * 		The user name
     * @throws UserStoreException
     * 		An unexpected exception has occurred
     */
    protected abstract [CtTypeReferenceImpl]void doDeleteUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * Delete the user with the given user ID.
     *
     * @param userID
     * 		The user ID.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    protected [CtTypeReferenceImpl]void doDeleteUserWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doDeleteUserWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doDeleteUserWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Set a single user claim value.
     *
     * @param userName
     * 		The user name.
     * @param claimURI
     * 		The claim URI.
     * @param claimValue
     * 		The value.
     * @param profileName
     * 		The profile name, can be null. If null the default profile is considered.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    protected [CtTypeReferenceImpl]void doSetUserClaimValue([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimURI, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String attributeName = [CtInvocationImpl]getClaimAtrribute([CtVariableReadImpl]claimURI, [CtVariableReadImpl]userName, [CtLiteralImpl]null);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> userStoreAttributeValueMap = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
            [CtInvocationImpl][CtVariableReadImpl]userStoreAttributeValueMap.put([CtVariableReadImpl]attributeName, [CtVariableReadImpl]claimValue);
            [CtInvocationImpl]processAttributesBeforeUpdate([CtVariableReadImpl]userName, [CtVariableReadImpl]userStoreAttributeValueMap, [CtVariableReadImpl]profileName);
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> entry : [CtInvocationImpl][CtVariableReadImpl]userStoreAttributeValueMap.entrySet()) [CtBlockImpl]{
                [CtInvocationImpl]doSetUserAttribute([CtVariableReadImpl]userName, [CtInvocationImpl][CtVariableReadImpl]entry.getKey(), [CtInvocationImpl][CtVariableReadImpl]entry.getValue(), [CtVariableReadImpl]profileName);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while getting the claim attribute for claimURI: " + [CtVariableReadImpl]claimURI) + [CtLiteralImpl]" of the user: ") + [CtVariableReadImpl]userName, [CtVariableReadImpl]e);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Set the user attribute of the user.
     *
     * @param userName
     * 		User name.
     * @param attributeName
     * 		Attribute name.
     * @param value
     * 		Attribute value.
     * @param profileName
     * 		profile name.
     */
    protected [CtTypeReferenceImpl]void doSetUserAttribute([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String attributeName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String value, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doSetUserAttribute operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doSetUserAttribute operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Set the user attribute of the user.
     *
     * @param userID
     * 		User ID.
     * @param attributeName
     * 		Attribute name.
     * @param value
     * 		Attribute value.
     * @param profileName
     * 		Profile Name.
     * @throws UserStoreException
     * 		Thrown if the operation is not implemented in the underlying user store.
     */
    protected [CtTypeReferenceImpl]void doSetUserAttributeWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String attributeName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String value, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doSetUserAttributeWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doSetUserAttributeWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Set the user attributes of a user.
     *
     * @param userName
     * 		UserName of the user.
     * @param processedClaimAttributes
     * 		A processed map of user store attribute values.
     * @param profileName
     * 		The profile name, can be null. If null the default profile is considered.
     * @throws UserStoreException
     * 		Thrown if the operation is not implemented in the underlying user store.
     */
    protected [CtTypeReferenceImpl]void doSetUserAttributes([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> processedClaimAttributes, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doSetUserAttributes operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doSetUserAttributes operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Set the user attributes of a user.
     *
     * @param userName
     * 		UserName of the user.
     * @param claimAttributesToAdd
     * 		A processed map of userstore attribute values to add.
     * @param claimAttributesToDelete
     * 		A processed map of userstore attribute values to delte.
     * @param claimAttributesToReplace
     * 		A processed map of userstore attribute values to replace.
     * @param profileName
     * 		The profile name, can be null. If null the default profile is considered.
     * @throws UserStoreException
     * 		Thrown if the userstore operation fails.
     * @throws NotImplementedException
     * 		Thrown if the operation is not implemented in the underlying userstore.
     */
    protected [CtTypeReferenceImpl]void doSetUserAttributes([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> claimAttributesToAdd, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> claimAttributesToDelete, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> claimAttributesToReplace, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException, [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doSetUserAttributes operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doSetUserAttributes operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Set the user attributes of a user.
     *
     * @param processedClaimAttributes
     * 		A processed map of user store attribute values.
     * @param userID
     * 		UserID of the user.
     * @param profileName
     * 		The profile name, can be null. If null the default profile is considered.
     * @throws UserStoreException
     * 		Thrown if the operation is not implemented in the underlying user store.
     */
    protected [CtTypeReferenceImpl]void doSetUserAttributesWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> processedClaimAttributes, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doSetUserAttributesWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doSetUserAttributesWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Set the user attributes of a user.
     *
     * @param userID
     * 		UserID of the user.
     * @param claimAttributesToAdd
     * 		A processed map of userstore attribute values to add.
     * @param claimAttributesToDelete
     * 		A processed map of userstore attribute values to delete.
     * @param claimAttributesToReplace
     * 		A processed map of userstore attribute values to replace.
     * @param profileName
     * 		The profile name, can be null. If null the default profile is considered.
     * @throws UserStoreException
     * 		Thrown if the userstore operation fails.
     * @throws NotImplementedException
     * 		Thrown if the operation is not implemented in the underlying userstore.
     */
    protected [CtTypeReferenceImpl]void doSetUserAttributesWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> claimAttributesToAdd, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> claimAttributesToDelete, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> claimAttributesToReplace, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException, [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doSetUserAttributesWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doSetUserAttributesWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Set a single user claim value.
     *
     * @param userID
     * 		The user ID.
     * @param claimURI
     * 		The claim URI.
     * @param claimValue
     * 		The value.
     * @param profileName
     * 		The profile name, can be null. If null the default profile is considered.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    protected [CtTypeReferenceImpl]void doSetUserClaimValueWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimURI, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String attributeName = [CtInvocationImpl]getClaimAtrribute([CtVariableReadImpl]claimURI, [CtVariableReadImpl]userID, [CtLiteralImpl]null);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> userStoreAttributeValueMap = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
            [CtInvocationImpl][CtVariableReadImpl]userStoreAttributeValueMap.put([CtVariableReadImpl]attributeName, [CtVariableReadImpl]claimValue);
            [CtInvocationImpl]processAttributesBeforeUpdateWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]userStoreAttributeValueMap, [CtVariableReadImpl]profileName);
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> entry : [CtInvocationImpl][CtVariableReadImpl]userStoreAttributeValueMap.entrySet()) [CtBlockImpl]{
                [CtInvocationImpl]doSetUserAttributeWithID([CtVariableReadImpl]userID, [CtInvocationImpl][CtVariableReadImpl]entry.getKey(), [CtInvocationImpl][CtVariableReadImpl]entry.getValue(), [CtVariableReadImpl]profileName);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while getting the claim attribute for claimURI: " + [CtVariableReadImpl]claimURI) + [CtLiteralImpl]" of the user: ") + [CtVariableReadImpl]userID, [CtVariableReadImpl]e);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Set many user claim values.
     *
     * @param userName
     * 		The user name.
     * @param claims
     * 		Map of claim URIs against values.
     * @param profileName
     * 		The profile name, can be null. If null the default profile is considered.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    public [CtTypeReferenceImpl]void doSetUserClaimValues([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]profileName == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]profileName = [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.DEFAULT_PROFILE;
        }
        [CtLocalVariableImpl][CtCommentImpl]// Resolving claims to user store attributes.
        [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claimAttributeValueMapForPersist = [CtInvocationImpl]resolveUserStoreAttributeValueMap([CtVariableReadImpl]userName, [CtVariableReadImpl]claims);
        [CtInvocationImpl]processAttributesBeforeUpdate([CtVariableReadImpl]userName, [CtVariableReadImpl]claimAttributeValueMapForPersist, [CtVariableReadImpl]profileName);
        [CtInvocationImpl][CtCommentImpl]// Persist the attribute values map.
        doSetUserAttributes([CtVariableReadImpl]userName, [CtVariableReadImpl]claimAttributeValueMapForPersist, [CtVariableReadImpl]profileName);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Set many user claim values by treating multi-valued claims independently from simple claims.
     *
     * @param userName
     * 		User's username.
     * @param multiValuedClaimsToAdd
     * 		Map of multi-valued claim URIs against values to be added.
     * @param multiValuedClaimsToDelete
     * 		Map of multi-valued claim URIs against values to be deleted.
     * @param claimsExcludingMultiValuedClaims
     * 		Map of claim URIs excluding multi-valued claims against values
     * 		to be modified.
     * @param profileName
     * 		The profile name, can be null. If null the default profile is considered.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     * @throws NotImplementedException
     * 		Functionality is not implemented exception.
     */
    protected [CtTypeReferenceImpl]void doSetUserClaimValues([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> multiValuedClaimsToAdd, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> multiValuedClaimsToDelete, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> claimsExcludingMultiValuedClaims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException, [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]profileName == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]profileName = [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.DEFAULT_PROFILE;
        }
        [CtLocalVariableImpl][CtCommentImpl]// Resolving claims to user store attributes.
        [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> claimAttributeValueMapToAdd = [CtInvocationImpl]resolveUserStoreAttributeValueMaps([CtVariableReadImpl]userName, [CtVariableReadImpl]multiValuedClaimsToAdd);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> claimAttributeValueMapToDelete = [CtInvocationImpl]resolveUserStoreAttributeValueMaps([CtVariableReadImpl]userName, [CtVariableReadImpl]multiValuedClaimsToDelete);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> claimAttributeValueMapToModify = [CtInvocationImpl]resolveUserStoreAttributeValueMaps([CtVariableReadImpl]userName, [CtVariableReadImpl]claimsExcludingMultiValuedClaims);
        [CtInvocationImpl]processAttributesBeforeUpdate([CtVariableReadImpl]userName, [CtVariableReadImpl]claimAttributeValueMapToAdd, [CtVariableReadImpl]profileName);
        [CtInvocationImpl]processAttributesBeforeUpdate([CtVariableReadImpl]userName, [CtVariableReadImpl]claimAttributeValueMapToDelete, [CtVariableReadImpl]profileName);
        [CtInvocationImpl]processAttributesBeforeUpdate([CtVariableReadImpl]userName, [CtVariableReadImpl]claimAttributeValueMapToModify, [CtVariableReadImpl]profileName);
        [CtInvocationImpl][CtCommentImpl]// Persist the attribute values map.
        doSetUserAttributes([CtVariableReadImpl]userName, [CtVariableReadImpl]claimAttributeValueMapToAdd, [CtVariableReadImpl]claimAttributeValueMapToDelete, [CtVariableReadImpl]claimAttributeValueMapToModify, [CtVariableReadImpl]profileName);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Resolves claim URIs as user store properties.
     *
     * @param userIdentifier
     * 		Username of the user.
     * @param claims
     * 		A map of claim URIs to be resolved.
     * @return A map of user store property values.
     * @throws UserStoreException
     * 		Thrown if a particular claim URI could not be resolved.
     */
    private [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> resolveUserStoreAttributeValueMap([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userIdentifier, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> userStoreAttributeValueMap = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claimEntry : [CtInvocationImpl][CtVariableReadImpl]claims.entrySet()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String claimURI = [CtInvocationImpl][CtVariableReadImpl]claimEntry.getKey();
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String attributeName = [CtInvocationImpl]getClaimAtrribute([CtVariableReadImpl]claimURI, [CtVariableReadImpl]userIdentifier, [CtLiteralImpl]null);
                [CtInvocationImpl][CtVariableReadImpl]userStoreAttributeValueMap.put([CtVariableReadImpl]attributeName, [CtInvocationImpl][CtVariableReadImpl]claimEntry.getValue());
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtBinaryOperatorImpl][CtLiteralImpl]"Error occurred while getting claim attribute for user : " + [CtVariableReadImpl]userIdentifier;
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtVariableReadImpl]errorMessage, [CtVariableReadImpl]e);
            }
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]errorMessage, [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]userStoreAttributeValueMap;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> resolveUserStoreAttributeValueMaps([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userIdentifier, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> claims) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> userStoreAttributeValueMap = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> claimEntry : [CtInvocationImpl][CtVariableReadImpl]claims.entrySet()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String claimURI = [CtInvocationImpl][CtVariableReadImpl]claimEntry.getKey();
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String attributeName = [CtInvocationImpl]getClaimAtrribute([CtVariableReadImpl]claimURI, [CtVariableReadImpl]userIdentifier, [CtLiteralImpl]null);
                [CtInvocationImpl][CtVariableReadImpl]userStoreAttributeValueMap.put([CtVariableReadImpl]attributeName, [CtInvocationImpl][CtVariableReadImpl]claimEntry.getValue());
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtBinaryOperatorImpl][CtLiteralImpl]"Error occurred while getting claim attribute for user : " + [CtVariableReadImpl]userIdentifier;
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtVariableReadImpl]errorMessage, [CtVariableReadImpl]e);
            }
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]errorMessage, [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]userStoreAttributeValueMap;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Set many user claim values.
     *
     * @param userID
     * 		The user ID.
     * @param claims
     * 		Map of claim URIs against values.
     * @param profileName
     * 		The profile name, can be null. If null the default profile is considered.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    protected [CtTypeReferenceImpl]void doSetUserClaimValuesWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]profileName == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]profileName = [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.DEFAULT_PROFILE;
        }
        [CtLocalVariableImpl][CtCommentImpl]// Resolving claims to user store attributes.
        [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claimAttributeValueMapForPersist = [CtInvocationImpl]resolveUserStoreAttributeValueMap([CtVariableReadImpl]userID, [CtVariableReadImpl]claims);
        [CtInvocationImpl]processAttributesBeforeUpdateWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claimAttributeValueMapForPersist, [CtVariableReadImpl]profileName);
        [CtInvocationImpl][CtCommentImpl]// Persist the attribute values map.
        doSetUserAttributesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claimAttributeValueMapForPersist, [CtVariableReadImpl]profileName);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Set many user claim values.
     *
     * @param userID
     * 		The user ID.
     * @param multiValuedClaimsToAdd
     * 		Map of multi-valued claim URIs against values to add.
     * @param multiValuedClaimsToDelete
     * 		Map of multi-valued claim URIs against values to delete.
     * @param claimsExcludingMultiValuedClaims
     * 		Map of non-multi-valued claim URIs against values to replace.
     * @param profileName
     * 		The profile name, can be null. If null the default profile is considered.
     * @throws UserStoreException
     * 		Thrown if an unexpected exception has occurred in userstore operation.
     * @throws NotImplementedException
     * 		Thrown if the operation is not implemented in the underlying userstore.
     */
    protected [CtTypeReferenceImpl]void doSetUserClaimValuesWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> multiValuedClaimsToAdd, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> multiValuedClaimsToDelete, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> claimsExcludingMultiValuedClaims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException, [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]profileName == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]profileName = [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.DEFAULT_PROFILE;
        }
        [CtLocalVariableImpl][CtCommentImpl]// Resolving claims to user store attributes.
        [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> claimAttributeValueMapToAdd = [CtInvocationImpl]resolveUserStoreAttributeValueMaps([CtVariableReadImpl]userID, [CtVariableReadImpl]multiValuedClaimsToAdd);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> claimAttributeValueMapToDelete = [CtInvocationImpl]resolveUserStoreAttributeValueMaps([CtVariableReadImpl]userID, [CtVariableReadImpl]multiValuedClaimsToDelete);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> claimAttributeValueMapToModify = [CtInvocationImpl]resolveUserStoreAttributeValueMaps([CtVariableReadImpl]userID, [CtVariableReadImpl]claimsExcludingMultiValuedClaims);
        [CtInvocationImpl]processAttributesBeforeUpdateWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claimAttributeValueMapToAdd, [CtVariableReadImpl]profileName);
        [CtInvocationImpl]processAttributesBeforeUpdateWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claimAttributeValueMapToDelete, [CtVariableReadImpl]profileName);
        [CtInvocationImpl]processAttributesBeforeUpdateWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claimAttributeValueMapToModify, [CtVariableReadImpl]profileName);
        [CtInvocationImpl][CtCommentImpl]// Persist the attribute values map.
        doSetUserAttributesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claimAttributeValueMapToAdd, [CtVariableReadImpl]claimAttributeValueMapToDelete, [CtVariableReadImpl]claimAttributeValueMapToModify, [CtVariableReadImpl]profileName);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Delete a single user claim value
     *
     * @param userName
     * 		The user name
     * @param claimURI
     * 		Name of the claim
     * @param profileName
     * 		The profile name, can be null. If null the default profile is considered.
     * @throws UserStoreException
     * 		An unexpected exception has occurred
     */
    protected abstract [CtTypeReferenceImpl]void doDeleteUserClaimValue([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimURI, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * Delete a single user claim value.
     *
     * @param userID
     * 		The user ID.
     * @param claimURI
     * 		Name of the claim.
     * @param profileName
     * 		The profile name, can be null. If null the default profile is considered.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    protected [CtTypeReferenceImpl]void doDeleteUserClaimValueWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimURI, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doDeleteUserClaimValueWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doDeleteUserClaimValueWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Delete many user claim values.
     *
     * @param userName
     * 		The user name
     * @param claims
     * 		URIs of the claims to be deleted.
     * @param profileName
     * 		The profile name, can be null. If null the default profile is considered.
     * @throws UserStoreException
     * 		An unexpected exception has occurred
     */
    protected abstract [CtTypeReferenceImpl]void doDeleteUserClaimValues([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * Delete many user claim values.
     *
     * @param userID
     * 		The user ID.
     * @param claims
     * 		URIs of the claims to be deleted.
     * @param profileName
     * 		The profile name, can be null. If null the default profile is considered.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    protected [CtTypeReferenceImpl]void doDeleteUserClaimValuesWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doDeleteUserClaimValuesWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doDeleteUserClaimValuesWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Update user list of a particular role
     *
     * @param roleName
     * 		The role name
     * @param deletedUsers
     * 		Array of user names, that is going to be removed from the role
     * @param newUsers
     * 		Array of user names, that is going to be added to the role
     * @throws UserStoreException
     * 		An unexpected exception has occurred
     */
    protected abstract [CtTypeReferenceImpl]void doUpdateUserListOfRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] deletedUsers, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] newUsers) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * Update user list of a particular role.
     *
     * @param roleName
     * 		The role name.
     * @param deletedUsers
     * 		Array of user IDs, that is going to be removed from the role.
     * @param newUsers
     * 		Array of user IDs, that is going to be added to the role.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    protected [CtTypeReferenceImpl]void doUpdateUserListOfRoleWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] deletedUsers, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] newUsers) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doUpdateUserListOfRoleWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doUpdateUserListOfRoleWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Update role list of a particular user.
     *
     * @param userName
     * 		The user name
     * @param deletedRoles
     * 		Array of role names, that is going to be removed from the user
     * @param newRoles
     * 		Array of role names, that is going to be added to the user
     * @throws UserStoreException
     * 		An unexpected exception has occurred
     */
    protected abstract [CtTypeReferenceImpl]void doUpdateRoleListOfUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] deletedRoles, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] newRoles) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * Update role list of a particular user.
     *
     * @param userID
     * 		The user ID.
     * @param deletedRoles
     * 		Array of role names, that is going to be removed from the user.
     * @param newRoles
     * 		Array of role names, that is going to be added to the user.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    protected [CtTypeReferenceImpl]void doUpdateRoleListOfUserWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] deletedRoles, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] newRoles) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doUpdateRoleListOfUserWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doUpdateRoleListOfUserWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Only gets the internal roles of the user with internal domain name
     *
     * @param userName
     * 		Name of the user - who we need to find roles.
     * @return  * @throws UserStoreException
     */
    protected [CtArrayTypeReferenceImpl]java.lang.String[] doGetInternalRoleListOfUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]java.lang.Boolean.parseBoolean([CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.MULIPLE_ATTRIBUTE_ENABLE))) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userNameAttribute = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]LDAPConstants.USER_NAME_ATTRIBUTE);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]userNameAttribute != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userNameAttribute.trim().length() > [CtLiteralImpl]0)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> map = [CtInvocationImpl]getUserPropertyValues([CtVariableReadImpl]userName, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]userNameAttribute }, [CtLiteralImpl]null);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tempUserName = [CtInvocationImpl][CtVariableReadImpl]map.get([CtVariableReadImpl]userNameAttribute);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]tempUserName != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]userName = [CtVariableReadImpl]tempUserName;
                    [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Replaced user name : " + [CtVariableReadImpl]userName) + [CtLiteralImpl]" from user property value : ") + [CtVariableReadImpl]tempUserName);
                    }
                }
            }
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Retrieving internal roles for user name :  " + [CtVariableReadImpl]userName) + [CtLiteralImpl]" and search filter : ") + [CtVariableReadImpl]filter);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.getHybridRoleListOfUser([CtVariableReadImpl]userName, [CtVariableReadImpl]filter);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Only gets the internal roles of the user with internal domain name.
     *
     * @param userID
     * 		ID of the user.
     * @return internal roles list of the user.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    protected [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> doGetInternalRoleListOfUserWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String username = [CtInvocationImpl]doGetUserNameFromUserID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]username)) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtLiteralImpl]"No user found with UserID: " + [CtVariableReadImpl]userID);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.getHybridRoleListOfUser([CtVariableReadImpl]username, [CtVariableReadImpl]filter));
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> doGetInternalRoleListOfUsers([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userNames, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domainName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]java.lang.Boolean.parseBoolean([CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.MULIPLE_ATTRIBUTE_ENABLE))) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> updatedUserNameList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userName : [CtVariableReadImpl]userNames) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userNameAttribute = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]LDAPConstants.USER_NAME_ATTRIBUTE);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]userNameAttribute != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userNameAttribute.trim().length() > [CtLiteralImpl]0)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> map = [CtInvocationImpl]getUserPropertyValues([CtVariableReadImpl]userName, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]userNameAttribute }, [CtLiteralImpl]null);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tempUserName = [CtInvocationImpl][CtVariableReadImpl]map.get([CtVariableReadImpl]userNameAttribute);
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]tempUserName != [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]updatedUserNameList.add([CtVariableReadImpl]tempUserName);
                        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Replaced user name : " + [CtVariableReadImpl]userName) + [CtLiteralImpl]" from user property value : ") + [CtVariableReadImpl]tempUserName);
                        }
                    } else [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]updatedUserNameList.add([CtVariableReadImpl]userName);
                    }
                } else [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]updatedUserNameList.add([CtVariableReadImpl]userName);
                }
            }
            [CtAssignmentImpl][CtVariableWriteImpl]userNames = [CtVariableReadImpl]updatedUserNameList;
        }
        [CtReturnImpl]return [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.getHybridRoleListOfUsers([CtVariableReadImpl]userNames, [CtVariableReadImpl]domainName);
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> doGetInternalRoleListOfUsersWithID([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userIDs, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domainName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userNamesFromUserIDs = [CtInvocationImpl]getUserNamesFromUserIDs([CtVariableReadImpl]userIDs);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> hybridRoleList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> hybridRoleListOfUsers = [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.getHybridRoleListOfUsers([CtVariableReadImpl]userNamesFromUserIDs, [CtVariableReadImpl]domainName);
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> hybridRoleListOfUser : [CtInvocationImpl][CtVariableReadImpl]hybridRoleListOfUsers.entrySet()) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]hybridRoleList.put([CtInvocationImpl]getUserIDFromUserName([CtInvocationImpl][CtVariableReadImpl]hybridRoleListOfUser.getKey()), [CtInvocationImpl][CtVariableReadImpl]hybridRoleListOfUser.getValue());
        }
        [CtReturnImpl]return [CtVariableReadImpl]hybridRoleList;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Only gets the external roles of the user.
     *
     * @param userName
     * 		Name of the user - who we need to find roles.
     * @return  * @throws UserStoreException
     */
    protected abstract [CtArrayTypeReferenceImpl]java.lang.String[] doGetExternalRoleListOfUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * Only gets the external roles of the user.
     *
     * @param userID
     * 		user ID of the user.
     * @return external roles list of the user.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    protected [CtArrayTypeReferenceImpl]java.lang.String[] doGetExternalRoleListOfUserWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doGetExternalRoleListOfUserWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doGetExternalRoleListOfUserWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns the shared roles list of the user
     *
     * @param userName
     * @return  * @throws UserStoreException
     */
    protected abstract [CtArrayTypeReferenceImpl]java.lang.String[] doGetSharedRoleListOfUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String tenantDomain, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * Only gets the shared roles of the user.
     *
     * @param userID
     * 		user ID.
     * @return roles list.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    protected [CtArrayTypeReferenceImpl]java.lang.String[] doGetSharedRoleListOfUserWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String tenantDomain, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doGetSharedRoleListOfUserWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doGetSharedRoleListOfUserWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add role with a list of users and permissions provided.
     *
     * @param roleName
     * @param userList
     * @throws UserStoreException
     */
    protected abstract [CtTypeReferenceImpl]void doAddRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList, [CtParameterImpl][CtTypeReferenceImpl]boolean shared) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add role with a list of users and permissions provided.
     *
     * @param roleName
     * 		role name.
     * @param userList
     * 		userIDs list.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    protected [CtTypeReferenceImpl]void doAddRoleWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList, [CtParameterImpl][CtTypeReferenceImpl]boolean shared) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doAddRoleWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doAddRoleWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * delete the role.
     *
     * @param roleName
     * @throws UserStoreException
     */
    protected abstract [CtTypeReferenceImpl]void doDeleteRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * update the role name with the new name
     *
     * @param roleName
     * @param newRoleName
     * @throws UserStoreException
     */
    protected abstract [CtTypeReferenceImpl]void doUpdateRoleName([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String newRoleName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method would returns the role Name actually this must be implemented in interface. As it
     * is not good to change the API in point release. This has been added to Abstract class
     *
     * @param filter
     * @param maxItemLimit
     * @return  * @throws .UserStoreException
     */
    protected abstract [CtArrayTypeReferenceImpl]java.lang.String[] doGetRoleNames([CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int maxItemLimit) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param filter
     * @param maxItemLimit
     * @return  * @throws UserStoreException
     */
    protected abstract [CtArrayTypeReferenceImpl]java.lang.String[] doListUsers([CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int maxItemLimit) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get the user list as for the given filter and max item limit.
     *
     * @param filter
     * 		filter.
     * @param maxItemLimit
     * 		max items limit.
     * @return list of users.
     * @throws UserStoreException
     * 		Thrown by the underlying UserStoreManager.
     */
    protected [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> doListUsersWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int maxItemLimit) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doListUsersWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doListUsersWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtArrayTypeReferenceImpl]java.lang.String[] getProfileNamesWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"getProfileNamesWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"getProfileNamesWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Count users with claims.
     *
     * @param claimURI
     * 		Claim uri
     * @param valueFilter
     * 		Filter
     * @throws UserStoreException
     * 		UserStoreException
     */
    public [CtTypeReferenceImpl]long doCountUsersWithClaims([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimURI, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String valueFilter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Operation is not supported");
    }

    [CtMethodImpl][CtCommentImpl]/* This is to get the display names of users in hybrid role according to the underlying user store, to be shown in UI */
    protected abstract [CtArrayTypeReferenceImpl]java.lang.String[] doGetDisplayNamesForInternalRole([CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userNames) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * To validate username and credential that is given for authentication.
     *
     * @param userName
     * 		Name of the user.
     * @param credential
     * 		Credential of the user.
     * @return false if the validation fails.
     * @throws UserStoreException
     * 		UserStore Exception.
     */
    private [CtTypeReferenceImpl]boolean validateUserNameAndCredential([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isValid = [CtLiteralImpl]true;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]userName == [CtLiteralImpl]null) || [CtBinaryOperatorImpl]([CtVariableReadImpl]credential == [CtLiteralImpl]null)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getMessage(), [CtLiteralImpl]"Authentication failure. Either Username or Password is null");
            [CtInvocationImpl]handleOnAuthenticateFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getCode(), [CtVariableReadImpl]message, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential);
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]message);
            [CtAssignmentImpl][CtVariableWriteImpl]isValid = [CtLiteralImpl]false;
        }
        [CtReturnImpl]return [CtVariableReadImpl]isValid;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]boolean validateUserIDAndCredential([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isValid = [CtLiteralImpl]true;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]userID == [CtLiteralImpl]null) || [CtBinaryOperatorImpl]([CtVariableReadImpl]credential == [CtLiteralImpl]null)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getMessage(), [CtLiteralImpl]"Authentication failure. Either Username or Password is null");
            [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getCode(), [CtVariableReadImpl]message, [CtVariableReadImpl]userID, [CtVariableReadImpl]credential);
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]message);
            [CtAssignmentImpl][CtVariableWriteImpl]isValid = [CtLiteralImpl]false;
        }
        [CtReturnImpl]return [CtVariableReadImpl]isValid;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]boolean validateUserNameAndCredential([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimURI, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isValid = [CtLiteralImpl]true;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]claimURI == [CtLiteralImpl]null) || [CtBinaryOperatorImpl]([CtVariableReadImpl]claimValue == [CtLiteralImpl]null)) || [CtBinaryOperatorImpl]([CtVariableReadImpl]credential == [CtLiteralImpl]null)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getMessage(), [CtLiteralImpl]"Authentication failure. One of the credential element is null.");
            [CtInvocationImpl]handleOnAuthenticateFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getCode(), [CtVariableReadImpl]message, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]credential);
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]message);
            [CtAssignmentImpl][CtVariableWriteImpl]isValid = [CtLiteralImpl]false;
        }
        [CtReturnImpl]return [CtVariableReadImpl]isValid;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]boolean validateUserNameAndCredentials([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.LoginIdentifier> loginIdentifiers, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isValid = [CtLiteralImpl]true;
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.LoginIdentifier loginIdentifier : [CtVariableReadImpl]loginIdentifiers) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]credential == [CtLiteralImpl]null) || [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]loginIdentifier.getLoginKey() == [CtLiteralImpl]null)) || [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]loginIdentifier.getLoginValue() == [CtLiteralImpl]null)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getMessage(), [CtLiteralImpl]"Authentication failure. One of the credential element is null.");
                [CtInvocationImpl]handleOnAuthenticateFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getCode(), [CtVariableReadImpl]message, [CtInvocationImpl][CtVariableReadImpl]loginIdentifier.getLoginValue(), [CtVariableReadImpl]credential);
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]message);
                [CtAssignmentImpl][CtVariableWriteImpl]isValid = [CtLiteralImpl]false;
                [CtBreakImpl]break;
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]isValid;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtTypeReferenceImpl]boolean authenticate([CtParameterImpl]final [CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl]final [CtTypeReferenceImpl]java.lang.Object credential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.security.AccessController.doPrivileged([CtLambdaImpl](([CtTypeReferenceImpl]java.security.PrivilegedExceptionAction<[CtTypeReferenceImpl]java.lang.Boolean>) (() -> [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]validateUserNameAndCredential([CtVariableReadImpl]userName, [CtVariableReadImpl]credential)) [CtBlockImpl]{
                    [CtReturnImpl]return [CtLiteralImpl]false;
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]int index = [CtInvocationImpl][CtVariableReadImpl]userName.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
                [CtLocalVariableImpl][CtTypeReferenceImpl]boolean domainProvided = [CtBinaryOperatorImpl][CtVariableReadImpl]index > [CtLiteralImpl]0;
                [CtReturnImpl]return [CtInvocationImpl]authenticate([CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]domainProvided);
            })));
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.security.PrivilegedActionException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]e.getException() instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException)) [CtBlockImpl]{
                [CtInvocationImpl]handleOnAuthenticateFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential);
            }
            [CtThrowImpl]throw [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException) ([CtVariableReadImpl]e.getException()));
        }
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]boolean authenticate([CtParameterImpl]final [CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl]final [CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl]final [CtTypeReferenceImpl]boolean domainProvided) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.security.AccessController.doPrivileged([CtLambdaImpl](([CtTypeReferenceImpl]java.security.PrivilegedExceptionAction<[CtTypeReferenceImpl]java.lang.Boolean>) (() -> [CtInvocationImpl]authenticateInternalIteration([CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]domainProvided))));
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.security.PrivilegedActionException e) [CtBlockImpl]{
            [CtThrowImpl]throw [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException) ([CtVariableReadImpl]e.getException()));
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]boolean authenticateInternalIteration([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl][CtTypeReferenceImpl]boolean domainProvided) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userStorePreferenceOrder = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtIfImpl][CtCommentImpl]// Check whether user store chain needs to be generated or not.
        if ([CtInvocationImpl]isUserStoreChainNeeded([CtVariableReadImpl]userStorePreferenceOrder)) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"User store chain generation is needed hence generating the user store chain using the user" + [CtLiteralImpl]" store preference order: ") + [CtVariableReadImpl]userStorePreferenceOrder);
            }
            [CtReturnImpl]return [CtInvocationImpl]generateUserStoreChain([CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]domainProvided, [CtVariableReadImpl]userStorePreferenceOrder);
        } else [CtBlockImpl]{
            [CtReturnImpl][CtCommentImpl]// Authenticate the user.
            return [CtInvocationImpl]authenticateInternal([CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]domainProvided);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling the relevant method from error listeners when there is a failure while
     * authenticating.
     *
     * @param errorCode
     * 		Error Code.
     * @param errorMessage
     * 		Error Message.
     * @param userName
     * 		Name of the user.
     * @param credential
     * 		Relevant credential provided for authentication.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listener methods.
     */
    private [CtTypeReferenceImpl]void handleOnAuthenticateFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onAuthenticateFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling the relevant method from error listeners when there is a failure while
     * authenticating.
     *
     * @param errorCode
     * 		Error Code.
     * @param errorMessage
     * 		Error Message.
     * @param userID
     * 		Name of the user.
     * @param credential
     * 		Relevant credential provided for authentication.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listener methods.
     */
    private [CtTypeReferenceImpl]void handleOnAuthenticateFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onAuthenticateFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]credential, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling the relevant method from error listeners when there is a failure while
     * authenticating.
     *
     * @param errorCode
     * 		Error Code.
     * @param errorMessage
     * 		Error Message.
     * @param loginIdentifiers
     * 		Login identifiers.
     * @param credential
     * 		Relevant credential provided for authentication.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listener methods.
     */
    private [CtTypeReferenceImpl]void handleOnAuthenticateFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.LoginIdentifier> loginIdentifiers, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onAuthenticateFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]loginIdentifiers, [CtVariableReadImpl]credential, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling the relevant method from error listeners when there is a failure while
     * authenticating.
     *
     * @param errorCode
     * 		Error Code.
     * @param errorMessage
     * 		Error Message.
     * @param preferredUserNameClaim
     * 		Preferred username claim.
     * @param preferredUserNameValue
     * 		Preferred username value.
     * @param credential
     * 		Relevant credential provided for authentication.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listener methods.
     */
    private [CtTypeReferenceImpl]void handleOnAuthenticateFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String preferredUserNameClaim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String preferredUserNameValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onAuthenticateFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credential, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param userName
     * @param credential
     * @param domainProvided
     * @return  * @throws UserStoreException
     */
    private [CtTypeReferenceImpl]boolean authenticateInternal([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl][CtTypeReferenceImpl]boolean domainProvided) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager abstractUserStoreManager = [CtThisAccessImpl]this;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtThisAccessImpl]this instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]abstractUserStoreManager = [CtInvocationImpl][CtThisAccessImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager) (this)).getAbstractUserStoreManager();
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean authenticated = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl][CtVariableReadImpl]abstractUserStoreManager.getUserStore([CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive() && [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager() instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager)) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).authenticate([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]credential, [CtVariableReadImpl]domainProvided);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.Secret credentialObj;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]credentialObj = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.Secret.getSecret([CtVariableReadImpl]credential);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.UnsupportedSecretTypeException e) [CtBlockImpl]{
            [CtInvocationImpl]handleOnAuthenticateFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.toString(), [CtVariableReadImpl]e);
        }
        [CtTryImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        [CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserStoreManagerListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserStoreManagerListeners()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object credentialArgument;
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credentialObj;
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credential;
                }
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.authenticate([CtVariableReadImpl]userName, [CtVariableReadImpl]credentialArgument, [CtVariableReadImpl]abstractUserStoreManager)) [CtBlockImpl]{
                    [CtInvocationImpl]handleOnAuthenticateFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]credentialArgument);
                    [CtReturnImpl]return [CtLiteralImpl]false;
                }
            }
            [CtTryImpl]try [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object credentialArgument;
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credentialObj;
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credential;
                    }
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPreAuthenticate([CtVariableReadImpl]userName, [CtVariableReadImpl]credentialArgument, [CtVariableReadImpl]abstractUserStoreManager)) [CtBlockImpl]{
                        [CtInvocationImpl]handleOnAuthenticateFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]credentialArgument);
                        [CtReturnImpl]return [CtLiteralImpl]false;
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleOnAuthenticateFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
            [CtLocalVariableImpl][CtCommentImpl]// #################### </Listeners> #####################################################
            [CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtVariableReadImpl]abstractUserStoreManager.getTenantId();
            [CtTryImpl]try [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.service.RealmService realmService = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.getRealmService();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]realmService != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]boolean tenantActive = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]realmService.getTenantManager().isTenantActive([CtVariableReadImpl]tenantId);
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]tenantActive) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_TENANT_DEACTIVATED.getCode();
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_TENANT_DEACTIVATED.getMessage(), [CtVariableReadImpl]tenantId);
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.warn([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
                        [CtInvocationImpl]handleOnAuthenticateFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential);
                        [CtReturnImpl]return [CtLiteralImpl]false;
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                [CtInvocationImpl]handleOnAuthenticateFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while trying to check tenant status for Tenant : " + [CtVariableReadImpl]tenantId, [CtVariableReadImpl]e);
            }
            [CtTryImpl][CtCommentImpl]// We are here due to two reason. Either there is no secondary UserStoreManager or no
            [CtCommentImpl]// domain name provided with user name.
            try [CtBlockImpl]{
                [CtIfImpl][CtCommentImpl]// Let's authenticate with the primary UserStoreManager.
                if ([CtInvocationImpl][CtVariableReadImpl]abstractUserStoreManager.isUniqueUserIdEnabled()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userNameProperty = [CtInvocationImpl]getUsernameProperty();
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult authenticationResult = [CtInvocationImpl][CtVariableReadImpl]abstractUserStoreManager.doAuthenticateWithID([CtVariableReadImpl]userNameProperty, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtLiteralImpl]null);
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]authenticationResult.getAuthenticationStatus() == [CtFieldReadImpl]AuthenticationResult.AuthenticationStatus.SUCCESS) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]authenticated = [CtLiteralImpl]true;
                    }
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]authenticated = [CtInvocationImpl][CtVariableReadImpl]abstractUserStoreManager.doAuthenticate([CtVariableReadImpl]userName, [CtVariableReadImpl]credentialObj);
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.lang.Exception e) [CtBlockImpl]{
                [CtInvocationImpl]handleOnAuthenticateFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential);
                [CtIfImpl][CtCommentImpl]// We can ignore and proceed. Ignore the results from this user store.
                if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Error occurred while authenticating user: " + [CtVariableReadImpl]userName, [CtVariableReadImpl]e);
                } else [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]e);
                }
                [CtAssignmentImpl][CtVariableWriteImpl]authenticated = [CtLiteralImpl]false;
            }
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]credentialObj.clear();
        }
        [CtIfImpl]if ([CtVariableReadImpl]authenticated) [CtBlockImpl]{
            [CtInvocationImpl][CtCommentImpl]// Set domain in thread local variable for subsequent operations
            [CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.setDomainInThreadLocal([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.getDomainName([CtFieldReadImpl][CtVariableReadImpl]abstractUserStoreManager.realmConfig));
        }
        [CtIfImpl][CtCommentImpl]// If authentication fails in the previous step and if the user has not specified a
        [CtCommentImpl]// domain- then we need to execute chained UserStoreManagers recursively.
        if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtVariableReadImpl]authenticated) && [CtUnaryOperatorImpl](![CtVariableReadImpl]domainProvided)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager userStoreManager;
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtThisAccessImpl]this instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager iterativeUserStoreManager = [CtThisAccessImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager) (this));
                [CtAssignmentImpl][CtVariableWriteImpl]userStoreManager = [CtInvocationImpl][CtVariableReadImpl]iterativeUserStoreManager.nextUserStoreManager();
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userStoreManager = [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]abstractUserStoreManager.getSecondaryUserStoreManager()));
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userStoreManager != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]authenticated = [CtInvocationImpl][CtVariableReadImpl]userStoreManager.authenticate([CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]domainProvided);
            }
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]authenticated) [CtBlockImpl]{
            [CtInvocationImpl]handleOnAuthenticateFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getMessage(), [CtLiteralImpl]"Authentication failed"), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential);
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl][CtCommentImpl]// You cannot change authentication decision in post handler to TRUE
            for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPostAuthenticate([CtVariableReadImpl]userName, [CtVariableReadImpl]authenticated, [CtVariableReadImpl]abstractUserStoreManager)) [CtBlockImpl]{
                    [CtInvocationImpl]handleOnAuthenticateFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_AUTHENTICATION.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential);
                    [CtReturnImpl]return [CtLiteralImpl]false;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleOnAuthenticateFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_AUTHENTICATION.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]authenticated) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtLiteralImpl]"Authentication failure. Wrong username or password is provided.");
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]authenticated;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.lang.String getUsernameProperty() throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userNameProperty = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]LDAPConstants.USER_NAME_ATTRIBUTE);
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isBlank([CtVariableReadImpl]userNameProperty)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userNameProperty = [CtInvocationImpl][CtFieldReadImpl]claimManager.getAttributeName([CtInvocationImpl]getMyDomainName(), [CtTypeAccessImpl]UserCoreClaimConstants.USERNAME_CLAIM_URI);
        }
        [CtReturnImpl]return [CtVariableReadImpl]userNameProperty;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method calls the relevant methods when there is a failure while trying to get the claim value of a user.
     *
     * @param errorCode
     * 		Error code.
     * @param errorMessage
     * 		Error message.
     * @param userName
     * 		Name of the user.
     * @param claim
     * 		Relevant claim.
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listeners.
     */
    private [CtTypeReferenceImpl]void handleGetUserClaimValueFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onGetUserClaimValueFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]claim, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method calls the relevant methods when there is a failure while trying to get the claim value of a user.
     *
     * @param errorCode
     * 		Error code.
     * @param errorMessage
     * 		Error message.
     * @param userID
     * 		Name of the user.
     * @param claim
     * 		Relevant claim.
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listeners.
     */
    private [CtTypeReferenceImpl]void handleGetUserClaimValueFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onGetUserClaimValueFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]claim, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtTypeReferenceImpl]java.lang.String getUserClaimValue([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class[] argTypes = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getUserClaimValue", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userName, [CtVariableReadImpl]claim, [CtVariableReadImpl]profileName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.lang.String) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().getUserClaimValue([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]claim, [CtVariableReadImpl]profileName);
        }
        [CtLocalVariableImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        [CtCommentImpl]// If user does not exist, throw an
        [CtTypeReferenceImpl]boolean isUserExist;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userID = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName);
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExist = [CtBinaryOperatorImpl][CtVariableReadImpl]userID != [CtLiteralImpl]null;
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExist = [CtInvocationImpl]doCheckExistingUser([CtVariableReadImpl]userName);
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserExist) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userName, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
            [CtInvocationImpl]handleGetUserClaimValueFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]claim, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> finalValues;
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]finalValues = [CtInvocationImpl]doGetUserClaimValuesWithID([CtVariableReadImpl]userID, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]claim }, [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName(), [CtVariableReadImpl]profileName);
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]finalValues = [CtInvocationImpl]doGetUserClaimValues([CtVariableReadImpl]userName, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]claim }, [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName(), [CtVariableReadImpl]profileName);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserClaimValueFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_CLAIM_VALUE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]claim, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String value = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]finalValues != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]value = [CtInvocationImpl][CtVariableReadImpl]finalValues.get([CtVariableReadImpl]claim);
        }
        [CtLocalVariableImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> list = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]value != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]list.add([CtVariableReadImpl]value);
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostGetUserClaimValue([CtVariableReadImpl]userName, [CtVariableReadImpl]claim, [CtVariableReadImpl]list, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtInvocationImpl]handleGetUserClaimValueFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_USER_CLAIM_VALUE.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]claim, [CtVariableReadImpl]profileName);
                        [CtBreakImpl]break;
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserClaimValueFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_USER_CLAIM_VALUE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]claim, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtIfImpl][CtCommentImpl]// #################### </Listeners> #####################################################
        if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]list.isEmpty()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]list.get([CtLiteralImpl]0);
        }
        [CtReturnImpl]return [CtVariableReadImpl]value;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]boolean isUniqueUserIdEnabledInUserStore([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore) [CtBlockImpl]{
        [CtReturnImpl]return [CtInvocationImpl]isUniqueUserIdEnabled([CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling relevant listener methods when there is a failure while trying to get
     * user claim values.
     *
     * @param errorCode
     * 		Relevant error code.
     * @param errorMessage
     * 		Relevant error message.
     * @param userName
     * 		Name of the user.
     * @param claims
     * 		Claims requested.
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		Exception that will be thrown by the relevant listeners.
     */
    private [CtTypeReferenceImpl]void handleGetUserClaimValuesFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onGetUserClaimValuesFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling relevant listener methods when there is a failure while trying to get
     * user claim values.
     *
     * @param errorCode
     * 		Relevant error code.
     * @param errorMessage
     * 		Relevant error message.
     * @param userID
     * 		ID of the user.
     * @param claims
     * 		Claims requested.
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		Exception that will be thrown by the relevant listeners.
     */
    private [CtTypeReferenceImpl]void handleGetUserClaimValuesFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onGetUserClaimValuesFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtArrayTypeReferenceImpl]org.wso2.carbon.user.core.claim.Claim[] getUserClaimValues([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getUserClaimValues", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userName, [CtVariableReadImpl]profileName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtArrayTypeReferenceImpl]org.wso2.carbon.user.core.claim.Claim[]) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().getUserClaimValues([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]profileName);
        }
        [CtLocalVariableImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        [CtCommentImpl]// If user does not exist, throw exception
        [CtCommentImpl]// Property to check whether this user store supports new APIs with unique user id.
        [CtTypeReferenceImpl]boolean isUniqueUserIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userID = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUserExists;
        [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtBinaryOperatorImpl][CtVariableReadImpl]userID != [CtLiteralImpl]null;
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtInvocationImpl]doCheckExistingUser([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserExists) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userName, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
            [CtInvocationImpl]handleGetUserClaimValuesFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtLiteralImpl]null, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]profileName == [CtLiteralImpl]null) || [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]profileName.trim().length() == [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]profileName = [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.DEFAULT_PROFILE;
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] claims;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]claims = [CtInvocationImpl][CtFieldReadImpl]claimManager.getAllClaimUris();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserClaimValuesFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_CLAIM_URI.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_CLAIM_URI.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userName, [CtLiteralImpl]null, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]e);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> values = [CtInvocationImpl][CtThisAccessImpl]this.getUserClaimValues([CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.Claim> finalValues = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtInvocationImpl]addClaimValues([CtVariableReadImpl]values, [CtVariableReadImpl]finalValues);
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]finalValues.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.Claim[[CtLiteralImpl]0]);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> getUserClaimValues([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String[].class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getUserClaimValues", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().getUserClaimValues([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUserExists;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUniqueIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
        [CtIfImpl]if ([CtVariableReadImpl]isUniqueIdEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userID = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName);
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtBinaryOperatorImpl][CtVariableReadImpl]userID != [CtLiteralImpl]null;
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtInvocationImpl]doCheckExistingUser([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserExists) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userName, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
            [CtInvocationImpl]handleGetUserClaimValuesFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtLiteralImpl]null, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtIfImpl][CtCommentImpl]// check for null claim list
        if ([CtBinaryOperatorImpl][CtVariableReadImpl]claims == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]claims = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> finalValues;
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtVariableReadImpl]isUniqueIdEnabled) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]finalValues = [CtInvocationImpl]doGetUserClaimValuesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName(), [CtVariableReadImpl]profileName);
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]finalValues = [CtInvocationImpl]doGetUserClaimValues([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]claims, [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName(), [CtVariableReadImpl]profileName);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserClaimValuesFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostGetUserClaimValues([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtVariableReadImpl]finalValues, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtInvocationImpl]handleGetUserClaimValuesFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_IN_POST_GET_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_IN_POST_GET_CLAIM_VALUES.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                        [CtBreakImpl]break;
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserClaimValuesFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_IN_POST_GET_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_IN_POST_GET_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtReturnImpl][CtCommentImpl]// #################### </Listeners> #####################################################
        return [CtVariableReadImpl]finalValues;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling the relevant methods when there is a failure while trying to get the
     * user list.
     *
     * @param errorCode
     * 		Error Code.
     * @param errorMessage
     * 		Error Message.
     * @param claim
     * 		Claim URI.
     * @param claimValue
     * 		Claim Value.
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listner methods.
     */
    private [CtTypeReferenceImpl]void handleGetUserListFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onGetUserListFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling the relevant methods when there is a failure while trying to get the
     * user count.
     *
     * @param errorCode
     * 		Error Code.
     * @param errorMessage
     * 		Error Message.
     * @param claim
     * 		Claim URI.
     * @param claimValue
     * 		Claim Value.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listner methods.
     */
    protected [CtTypeReferenceImpl]void handleGetUserCountFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onGetUserCountFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling the relevant methods when there is a failure while trying to get the
     * user list.
     *
     * @param errorCode
     * 		Error Code.
     * @param errorMessage
     * 		Error Message.
     * @param claim
     * 		Claim URI.
     * @param claimValue
     * 		Claim Value.
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listener methods.
     */
    private [CtTypeReferenceImpl]void handleGetUserListFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onGetUserListFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling the relevant methods when there is a failure while trying to get the
     * user.
     *
     * @param errorCode
     * 		Error Code.
     * @param errorMessage
     * 		Error Message.
     * @param userID
     * 		User ID.
     * @param requestedClaims
     * 		Requested Claims.
     * @param profileName
     * 		Profile Name.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listener methods.
     */
    private [CtTypeReferenceImpl]void handleGetUserFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] requestedClaims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onGetUserFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]requestedClaims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling the relevant methods when there is a failure while trying to get the
     * user list.
     *
     * @param errorCode
     * 		Error Code.
     * @param errorMessage
     * 		Error Message.
     * @param claim
     * 		Claim URI.
     * @param claimValue
     * 		Claim Value.
     * @param limit
     * 		No of search records.
     * @param offset
     * 		Start index of the search.
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listner methods.
     */
    private [CtTypeReferenceImpl]void handleGetUserListFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener)) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onGetUserListFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling the relevant methods when there is a failure while trying to get the
     * user list.
     *
     * @param errorCode
     * 		Error Code.
     * @param errorMessage
     * 		Error Message.
     * @param claim
     * 		Claim URI.
     * @param claimValue
     * 		Claim Value.
     * @param limit
     * 		No of search records.
     * @param offset
     * 		Start index of the search.
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listner methods.
     */
    private [CtTypeReferenceImpl]void handleGetUserListFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener)) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onGetUserListFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void handleGetUserListFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMassage, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.Condition condition, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domain, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortBy, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener)) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onGetUserListFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMassage, [CtVariableReadImpl]condition, [CtVariableReadImpl]domain, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void handleGetUserListFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMassage, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.Condition condition, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domain, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortBy, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener)) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onGetUserListFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMassage, [CtVariableReadImpl]condition, [CtVariableReadImpl]domain, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling the relevant methods when there is a failure while trying to get the
     * paginated user list.
     *
     * @param errorCode
     * 		Error Code.
     * @param errorMessage
     * 		Error Message.
     * @param claim
     * 		Claim URI.
     * @param claimValue
     * 		Claim Value.
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listner methods.
     */
    private [CtTypeReferenceImpl]void handleGetPaginatedUserListFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener)) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onGetPaginatedUserListFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling the relevant methods when there is a failure while trying to get the
     * paginated user list.
     *
     * @param errorCode
     * 		Error Code.
     * @param errorMessage
     * 		Error Message.
     * @param claim
     * 		Claim URI.
     * @param claimValue
     * 		Claim Value.
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listner methods.
     */
    private [CtTypeReferenceImpl]void handleGetPaginatedUserListFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener)) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onGetPaginatedUserListFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling the relevant methods when there is a failure while trying to list the
     * paginated users.
     *
     * @param errorCode
     * 		Error Code.
     * @param errorMessage
     * 		Error Message.
     * @param filter
     * 		Username Filter.
     * @param limit
     * 		No of search results.
     * @param offset
     * 		Start index of the search.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listner methods.
     */
    private [CtTypeReferenceImpl]void handleListPaginatedUsersFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener)) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onListUsersFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling the relevant methods when there is a failure while trying to list the
     * paginated users.
     *
     * @param errorCode
     * 		Error Code.
     * @param errorMessage
     * 		Error Message.
     * @param filter
     * 		Username Filter.
     * @param limit
     * 		No of search results.
     * @param offset
     * 		Start index of the search.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listner methods.
     */
    private [CtTypeReferenceImpl]void handleListPaginatedUsersFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener)) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onListUsersFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * To call the postGetUserList of relevant listeners.
     *
     * @param claim
     * 		Claim requested.
     * @param claimValue
     * 		Claim values.
     * @param filteredUserList
     * 		List of filtered users.
     * @param isAuditLogOnly
     * 		To indicate whether to call only audit log listener.
     * @throws UserStoreException
     * 		User Store Exception.
     */
    private [CtTypeReferenceImpl]void handlePostGetUserList([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> filteredUserList, [CtParameterImpl][CtTypeReferenceImpl]boolean isAuditLogOnly) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isAuditLogOnly && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]listener.getClass().getName().endsWith([CtTypeAccessImpl]UserCoreErrorConstants.AUDIT_LOGGER_CLASS_NAME))) [CtBlockImpl]{
                        [CtContinueImpl]continue;
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostGetUserList([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]filteredUserList, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtBreakImpl]break;
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtLiteralImpl]null);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * To call the postGetUserListWithID of relevant listeners.
     *
     * @param claim
     * 		Claim requested.
     * @param claimValue
     * 		Claim values.
     * @param filteredUserList
     * 		List of filtered users.
     * @param isAuditLogOnly
     * 		To indicate whether to call only audit log listener.
     * @throws UserStoreException
     * 		User Store Exception.
     */
    private [CtTypeReferenceImpl]void handlePostGetUserListWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> filteredUserList, [CtParameterImpl][CtTypeReferenceImpl]boolean isAuditLogOnly) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isAuditLogOnly && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]listener.getClass().getName().endsWith([CtTypeAccessImpl]UserCoreErrorConstants.AUDIT_LOGGER_CLASS_NAME))) [CtBlockImpl]{
                        [CtContinueImpl]continue;
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostGetUserListWithID([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]filteredUserList, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtBreakImpl]break;
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserListFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtLiteralImpl]null);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * To call the postGetUserList of relevant listeners.
     *
     * @param claim
     * 		Claim requested.
     * @param claimValue
     * 		Claim values.
     * @param filteredUserList
     * 		List of filtered users.
     * @param limit
     * 		No of search results.
     * @param offset
     * 		Start index of the search.
     * @param isAuditLogOnly
     * 		To indicate whether to call only audit log listener.
     * @throws UserStoreException
     * 		User Store Exception.
     */
    private [CtTypeReferenceImpl]void handlePostGetUserList([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> filteredUserList, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]boolean isAuditLogOnly) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isAuditLogOnly && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]listener.getClass().getName().endsWith([CtTypeAccessImpl]UserCoreErrorConstants.AUDIT_LOGGER_CLASS_NAME))) [CtBlockImpl]{
                        [CtContinueImpl]continue;
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostGetUserList([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]filteredUserList, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtBreakImpl]break;
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtLiteralImpl]null);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * To call the postGetUserList of relevant listeners.
     *
     * @param claim
     * 		Claim requested.
     * @param claimValue
     * 		Claim values.
     * @param filteredUserList
     * 		List of filtered users.
     * @param limit
     * 		No of search results.
     * @param offset
     * 		Start index of the search.
     * @param isAuditLogOnly
     * 		To indicate whether to call only audit log listener.
     * @throws UserStoreException
     * 		User Store Exception.
     */
    private [CtTypeReferenceImpl]void handlePostGetUserListWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> filteredUserList, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]boolean isAuditLogOnly) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isAuditLogOnly && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]listener.getClass().getName().endsWith([CtTypeAccessImpl]UserCoreErrorConstants.AUDIT_LOGGER_CLASS_NAME))) [CtBlockImpl]{
                        [CtContinueImpl]continue;
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostGetUserListWithID([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]filteredUserList, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtBreakImpl]break;
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserListFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtLiteralImpl]null);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void handlePostGetUserList([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.Condition condition, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domain, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortBy, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortOrder, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] users, [CtParameterImpl][CtTypeReferenceImpl]boolean isAuditLogOnly) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isAuditLogOnly && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]listener.getClass().getName().endsWith([CtTypeAccessImpl]UserCoreErrorConstants.AUDIT_LOGGER_CLASS_NAME))) [CtBlockImpl]{
                        [CtContinueImpl]continue;
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostGetUserList([CtVariableReadImpl]condition, [CtVariableReadImpl]domain, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder, [CtVariableReadImpl]users, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtBreakImpl]break;
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_CONDITIONAL_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_CONDITIONAL_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]condition, [CtVariableReadImpl]domain, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void handlePostGetUserListWithID([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.Condition condition, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domain, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortBy, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortOrder, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> users, [CtParameterImpl][CtTypeReferenceImpl]boolean isAuditLogOnly) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isAuditLogOnly && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]listener.getClass().getName().endsWith([CtTypeAccessImpl]UserCoreErrorConstants.AUDIT_LOGGER_CLASS_NAME))) [CtBlockImpl]{
                        [CtContinueImpl]continue;
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostGetUserListWithID([CtVariableReadImpl]condition, [CtVariableReadImpl]domain, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder, [CtVariableReadImpl]users, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtBreakImpl]break;
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserListFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_CONDITIONAL_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_CONDITIONAL_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]condition, [CtVariableReadImpl]domain, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void handlePreGetUserList([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.Condition condition, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domain, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortBy, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPreGetUserList([CtVariableReadImpl]condition, [CtVariableReadImpl]domain, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET__CONDITIONAL_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET__CONDITIONAL_USER_LIST.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]condition, [CtVariableReadImpl]domain, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder);
                        [CtBreakImpl]break;
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET__CONDITIONAL_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET__CONDITIONAL_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]condition, [CtVariableReadImpl]domain, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void handlePreGetUserListWithID([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.Condition condition, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domain, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortBy, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPreGetUserListWithID([CtVariableReadImpl]condition, [CtVariableReadImpl]domain, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET__CONDITIONAL_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET__CONDITIONAL_USER_LIST.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]condition, [CtVariableReadImpl]domain, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder);
                        [CtBreakImpl]break;
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET__CONDITIONAL_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET__CONDITIONAL_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]condition, [CtVariableReadImpl]domain, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * To call the postGetPaginatedUserList of relevant listeners.
     *
     * @param claim
     * 		Claim requested.
     * @param claimValue
     * 		Claim values.
     * @param filteredUserList
     * 		List of filtered users.
     * @param isAuditLogOnly
     * 		To indicate whether to call only audit log listener.
     * @throws UserStoreException
     * 		User Store Exception.
     */
    private [CtTypeReferenceImpl]void handlePostGetPaginatedUserList([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> filteredUserList, [CtParameterImpl][CtTypeReferenceImpl]boolean isAuditLogOnly) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isAuditLogOnly && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]listener.getClass().getName().endsWith([CtTypeAccessImpl]UserCoreErrorConstants.AUDIT_LOGGER_CLASS_NAME))) [CtBlockImpl]{
                        [CtContinueImpl]continue;
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostGetPaginatedUserList([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]filteredUserList, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtBreakImpl]break;
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetPaginatedUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_PAGINATED_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_PAGINATED_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtLiteralImpl]null);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * To call the List paginated users of relevant listeners.
     *
     * @param filter
     * 		Username filter.
     * @param limit
     * 		No of search results.
     * @param offset
     * 		start index of the search.
     * @param filteredUserList
     * 		List of filtered users.
     * @param isAuditLogOnly
     * 		To indicate whether to call only audit log listener.
     * @throws UserStoreException
     * 		User Store Exception.
     */
    private [CtTypeReferenceImpl]void handlePostListPaginatedUsers([CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> filteredUserList, [CtParameterImpl][CtTypeReferenceImpl]boolean isAuditLogOnly) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isAuditLogOnly && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]listener.getClass().getName().endsWith([CtTypeAccessImpl]UserCoreErrorConstants.AUDIT_LOGGER_CLASS_NAME))) [CtBlockImpl]{
                        [CtContinueImpl]continue;
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostListUsers([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]filteredUserList, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtBreakImpl]break;
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleListPaginatedUsersFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_LIST_PAGINATED_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_LIST_PAGINATED_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * To call the List paginated users of relevant listeners.
     *
     * @param filter
     * 		Username filter.
     * @param limit
     * 		No of search results.
     * @param offset
     * 		start index of the search.
     * @param filteredUserList
     * 		List of filtered users.
     * @param isAuditLogOnly
     * 		To indicate whether to call only audit log listener.
     * @throws UserStoreException
     * 		User Store Exception.
     */
    private [CtTypeReferenceImpl]void handlePostListPaginatedUsersWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> filteredUserList, [CtParameterImpl][CtTypeReferenceImpl]boolean isAuditLogOnly) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isAuditLogOnly && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]listener.getClass().getName().endsWith([CtTypeAccessImpl]UserCoreErrorConstants.AUDIT_LOGGER_CLASS_NAME))) [CtBlockImpl]{
                        [CtContinueImpl]continue;
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostListUsersWithID([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]filteredUserList, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtBreakImpl]break;
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleListPaginatedUsersFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_LIST_PAGINATED_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_LIST_PAGINATED_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtArrayTypeReferenceImpl]java.lang.String[] getUserList([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getUserList", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtArrayTypeReferenceImpl]java.lang.String[]) (object));
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claim == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_URI.getCode();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_URI.getMessage(), [CtLiteralImpl]"");
            [CtInvocationImpl]handleGetUserListFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtLiteralImpl]null, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.IllegalArgumentException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_URI.toString());
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claimValue == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_VALUE.getMessage(), [CtVariableReadImpl]claim, [CtLiteralImpl]null, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.IllegalArgumentException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_VALUE.toString());
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Listing users who having value as " + [CtVariableReadImpl]claimValue) + [CtLiteralImpl]" for the claim ") + [CtVariableReadImpl]claim);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl]isUniqueUserIdEnabled()) && [CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.USERNAME_CLAIM_URI.equalsIgnoreCase([CtVariableReadImpl]claim) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.SCIM_USERNAME_CLAIM_URI.equalsIgnoreCase([CtVariableReadImpl]claim)) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.SCIM2_USERNAME_CLAIM_URI.equalsIgnoreCase([CtVariableReadImpl]claim))) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtLiteralImpl]"Switching to list users using username");
            }
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] filteredUsers = [CtInvocationImpl]listUsers([CtVariableReadImpl]claimValue, [CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.MAX_ITEM_LIMIT_UNLIMITED);
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Filtered users: " + [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.toString([CtVariableReadImpl]filteredUsers));
            }
            [CtReturnImpl]return [CtVariableReadImpl]filteredUsers;
        }
        [CtLocalVariableImpl][CtCommentImpl]// Extracting the domain from claimValue.
        [CtTypeReferenceImpl]java.lang.String extractedDomain = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int index;
        [CtAssignmentImpl][CtVariableWriteImpl]index = [CtInvocationImpl][CtVariableReadImpl]claimValue.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] names = [CtInvocationImpl][CtVariableReadImpl]claimValue.split([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
            [CtAssignmentImpl][CtVariableWriteImpl]extractedDomain = [CtInvocationImpl][CtArrayReadImpl][CtVariableReadImpl]names[[CtLiteralImpl]0].trim();
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userManager = [CtThisAccessImpl]this;
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]extractedDomain)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secondaryUserStoreManager = [CtInvocationImpl]getSecondaryUserStoreManager([CtVariableReadImpl]extractedDomain);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secondaryUserStoreManager != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userManager = [CtVariableReadImpl]secondaryUserStoreManager;
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Domain: " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" is passed with the claim and user store manager is loaded") + [CtLiteralImpl]" for the given domain name.");
                }
            }
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]userManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.SCIM_USERNAME_CLAIM_URI.equalsIgnoreCase([CtVariableReadImpl]claim) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.SCIM2_USERNAME_CLAIM_URI.equalsIgnoreCase([CtVariableReadImpl]claim))) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userManager.isExistingUser([CtVariableReadImpl]claimValue)) [CtBlockImpl]{
                [CtReturnImpl]return [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]claimValue };
            } else [CtBlockImpl]{
                [CtReturnImpl]return [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
            }
        }
        [CtAssignmentImpl][CtVariableWriteImpl]claimValue = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]claimValue);
        [CtLocalVariableImpl]final [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> filteredUserList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]extractedDomain)) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPreGetUserList([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]filteredUserList, [CtVariableReadImpl]userManager)) [CtBlockImpl]{
                            [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
                            [CtBreakImpl]break;
                        }
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Pre listener user list: " + [CtVariableReadImpl]filteredUserList) + [CtLiteralImpl]" for domain: ") + [CtVariableReadImpl]extractedDomain);
        }
        [CtLocalVariableImpl][CtCommentImpl]// Iterate through user stores and check for users for this claim.
        [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> usersFromUserStore;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userNamesFromUserStore;
        [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled([CtVariableReadImpl]userManager)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]usersFromUserStore = [CtInvocationImpl]doGetUserListWithID([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtVariableReadImpl]extractedDomain, [CtVariableReadImpl]userManager);
            [CtAssignmentImpl][CtVariableWriteImpl]userNamesFromUserStore = [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]usersFromUserStore.stream().map([CtExecutableReferenceExpressionImpl][CtFieldReadImpl]User::getDomainQualifiedUsername).collect([CtInvocationImpl][CtTypeAccessImpl]java.util.stream.Collectors.toList());
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userNamesFromUserStore = [CtInvocationImpl]doGetUserList([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtVariableReadImpl]extractedDomain, [CtVariableReadImpl]userManager);
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Users from user store: " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" : ") + [CtVariableReadImpl]userNamesFromUserStore);
            }
        }
        [CtInvocationImpl][CtVariableReadImpl]filteredUserList.addAll([CtVariableReadImpl]userNamesFromUserStore);
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]extractedDomain)) [CtBlockImpl]{
            [CtInvocationImpl]handlePostGetUserList([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]filteredUserList, [CtLiteralImpl]false);
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Post listener user list: " + [CtVariableReadImpl]filteredUserList) + [CtLiteralImpl]" for domain: ") + [CtVariableReadImpl]extractedDomain);
        }
        [CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.sort([CtVariableReadImpl]filteredUserList);
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]filteredUserList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]);
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]boolean isUniqueUserIdEnabled([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userManager) [CtBlockImpl]{
        [CtReturnImpl]return [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]userManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) && [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userManager)).isUniqueUserIdEnabled();
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> doGetUserList([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String extractedDomain, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userManager) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String property;
        [CtIfImpl][CtCommentImpl]// If domain is present, then we search within that domain only.
        if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]extractedDomain)) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userManager == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"No user store manager found for domain: " + [CtVariableReadImpl]extractedDomain);
                }
                [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.emptyList();
            }
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Domain found in claim value. Searching only in the " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" for possible ") + [CtLiteralImpl]"matches");
            }
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]property = [CtInvocationImpl][CtFieldReadImpl]claimManager.getAttributeName([CtVariableReadImpl]extractedDomain, [CtVariableReadImpl]claim);
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while retrieving attribute name for domain : " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" and claim ") + [CtVariableReadImpl]claim, [CtVariableReadImpl]e);
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]property == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Could not find matching property for\n" + [CtLiteralImpl]"claim :") + [CtVariableReadImpl]claim) + [CtLiteralImpl]"domain :") + [CtVariableReadImpl]extractedDomain);
                }
                [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.emptyList();
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                [CtTryImpl][CtCommentImpl]// Get the user list and return with domain appended.
                try [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager userStoreManager = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userManager));
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] userArray = [CtInvocationImpl][CtVariableReadImpl]userStoreManager.getUserListFromProperties([CtVariableReadImpl]property, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
                    [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"List of filtered users for: " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" : ") + [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]userArray));
                    }
                    [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToNames([CtVariableReadImpl]userArray, [CtVariableReadImpl]extractedDomain));
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
                    [CtThrowImpl]throw [CtVariableReadImpl]ex;
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"getUserListFromProperties is not supported by this user store: " + [CtInvocationImpl][CtVariableReadImpl]userManager.getClass());
                }
                [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.emptyList();
            }
        }
        [CtIfImpl][CtCommentImpl]// If domain is not given then search all the user stores.
        if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtLiteralImpl]"No domain name found in claim value. Searching through all user stores for possible matches");
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> usersFromAllStoresList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager> userStoreManagers = [CtInvocationImpl]getUserStoreMangers();
        [CtForEachImpl][CtCommentImpl]// Iterate through all of available user store managers.
        for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userStoreManager : [CtVariableReadImpl]userStoreManagers) [CtBlockImpl]{
            [CtIfImpl][CtCommentImpl]// If this is not an instance of Abstract User Store Manger we can ignore the flow since we can't get the
            [CtCommentImpl]// domain name.
            if ([CtUnaryOperatorImpl]![CtBinaryOperatorImpl]([CtVariableReadImpl]userStoreManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager)) [CtBlockImpl]{
                [CtContinueImpl]continue;
            }
            [CtLocalVariableImpl][CtCommentImpl]// For all the user stores append the domain name to the claim and pass it recursively (Including PRIMARY).
            [CtTypeReferenceImpl]java.lang.String domainName = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userStoreManager)).getMyDomainName();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String claimValueWithDomain;
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.equalsIgnoreCase([CtVariableReadImpl]domainName, [CtTypeAccessImpl]UserCoreConstants.PRIMARY_DEFAULT_DOMAIN_NAME)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]claimValueWithDomain = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]domainName + [CtFieldReadImpl]org.wso2.carbon.CarbonConstants.DOMAIN_SEPARATOR) + [CtVariableReadImpl]claimValue;
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]claimValueWithDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]claimValue, [CtVariableReadImpl]domainName);
            }
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Invoking the get user list for domain: " + [CtVariableReadImpl]domainName) + [CtLiteralImpl]" for claim: ") + [CtVariableReadImpl]claim) + [CtLiteralImpl]" value: ") + [CtVariableReadImpl]claimValueWithDomain);
            }
            [CtLocalVariableImpl][CtCommentImpl]// Recursively call the getUserList method appending the domain to claim value.
            [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userList = [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl]getUserList([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValueWithDomain, [CtVariableReadImpl]profileName));
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Secondary user list for domain: " + [CtVariableReadImpl]domainName) + [CtLiteralImpl]" : ") + [CtVariableReadImpl]userList);
            }
            [CtInvocationImpl][CtVariableReadImpl]usersFromAllStoresList.addAll([CtVariableReadImpl]userList);
        }
        [CtReturnImpl][CtCommentImpl]// Done with all user store processing. Return the user array if not empty.
        return [CtVariableReadImpl]usersFromAllStoresList;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> getUserListWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getUserListWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User>) (object));
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claim == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_URI.getCode();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_URI.getMessage(), [CtLiteralImpl]"");
            [CtInvocationImpl]handleGetUserListFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtLiteralImpl]null, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.IllegalArgumentException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_URI.toString());
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claimValue == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserListFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_VALUE.getMessage(), [CtVariableReadImpl]claim, [CtLiteralImpl]null, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.IllegalArgumentException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_VALUE.toString());
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Listing users who having value as " + [CtVariableReadImpl]claimValue) + [CtLiteralImpl]" for the claim ") + [CtVariableReadImpl]claim);
        }
        [CtLocalVariableImpl][CtCommentImpl]// Extracting the domain from claimValue.
        [CtTypeReferenceImpl]java.lang.String extractedDomain = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int index;
        [CtAssignmentImpl][CtVariableWriteImpl]index = [CtInvocationImpl][CtVariableReadImpl]claimValue.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] names = [CtInvocationImpl][CtVariableReadImpl]claimValue.split([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
            [CtAssignmentImpl][CtVariableWriteImpl]extractedDomain = [CtInvocationImpl][CtArrayReadImpl][CtVariableReadImpl]names[[CtLiteralImpl]0].trim();
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userManager = [CtThisAccessImpl]this;
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]extractedDomain)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secondaryUserStoreManager = [CtInvocationImpl]getSecondaryUserStoreManager([CtVariableReadImpl]extractedDomain);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secondaryUserStoreManager != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userManager = [CtVariableReadImpl]secondaryUserStoreManager;
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Domain: " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" is passed with the claim and user store manager is loaded") + [CtLiteralImpl]" for the given domain name.");
                }
            }
        }
        [CtAssignmentImpl][CtVariableWriteImpl]claimValue = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]claimValue);
        [CtLocalVariableImpl]final [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> filteredUserList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]extractedDomain)) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPreGetUserListWithID([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]filteredUserList, [CtVariableReadImpl]userManager)) [CtBlockImpl]{
                            [CtInvocationImpl]handleGetUserListFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
                            [CtBreakImpl]break;
                        }
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleGetUserListFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Pre listener user list: " + [CtVariableReadImpl]filteredUserList) + [CtLiteralImpl]" for domain: ") + [CtVariableReadImpl]extractedDomain);
        }
        [CtLocalVariableImpl][CtCommentImpl]// Iterate through user stores and check for users for this claim.
        [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> usersFromUserStore;
        [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled([CtVariableReadImpl]userManager)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]usersFromUserStore = [CtInvocationImpl]doGetUserListWithID([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtVariableReadImpl]extractedDomain, [CtVariableReadImpl]userManager);
        } else [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userNamesFromUserStore = [CtInvocationImpl]doGetUserList([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtVariableReadImpl]extractedDomain, [CtVariableReadImpl]userManager);
            [CtAssignmentImpl][CtVariableWriteImpl]usersFromUserStore = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.listUsers([CtVariableReadImpl]userNamesFromUserStore, [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userManager)));
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Users from user store: " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" : ") + [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]usersFromUserStore.stream().map([CtExecutableReferenceExpressionImpl][CtFieldReadImpl]User::getUsername).collect([CtInvocationImpl][CtTypeAccessImpl]java.util.stream.Collectors.toList()));
        }
        [CtInvocationImpl][CtVariableReadImpl]filteredUserList.addAll([CtVariableReadImpl]usersFromUserStore);
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]extractedDomain)) [CtBlockImpl]{
            [CtInvocationImpl]handlePostGetUserListWithID([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]filteredUserList, [CtLiteralImpl]false);
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Post listener user list: " + [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]filteredUserList.stream().map([CtExecutableReferenceExpressionImpl][CtFieldReadImpl]User::getUsername).collect([CtInvocationImpl][CtTypeAccessImpl]java.util.stream.Collectors.toList())) + [CtLiteralImpl]" for domain: ") + [CtVariableReadImpl]extractedDomain);
        }
        [CtReturnImpl]return [CtVariableReadImpl]filteredUserList;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> doGetUserListWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String extractedDomain, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userManager) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String property;
        [CtIfImpl][CtCommentImpl]// If domain is present, then we search within that domain only.
        if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]extractedDomain)) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userManager == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"No user store manager found for domain: " + [CtVariableReadImpl]extractedDomain);
                }
                [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.emptyList();
            }
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Domain found in claim value. Searching only in the " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" for possible ") + [CtLiteralImpl]"matches");
            }
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]property = [CtInvocationImpl][CtFieldReadImpl]claimManager.getAttributeName([CtVariableReadImpl]extractedDomain, [CtVariableReadImpl]claim);
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                [CtInvocationImpl]handleGetUserListFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while retrieving attribute name for domain : " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" and claim ") + [CtVariableReadImpl]claim, [CtVariableReadImpl]e);
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]property == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Could not find matching property for\n" + [CtLiteralImpl]"claim :") + [CtVariableReadImpl]claim) + [CtLiteralImpl]"domain :") + [CtVariableReadImpl]extractedDomain);
                }
                [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.emptyList();
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                [CtTryImpl][CtCommentImpl]// Get the user list and return with domain appended.
                try [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager userStoreManager = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userManager));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userIDs = [CtInvocationImpl][CtVariableReadImpl]userStoreManager.doGetUserListFromPropertiesWithID([CtVariableReadImpl]property, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
                    [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"List of filtered users for: " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" : ") + [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]userIDs));
                    }
                    [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]userStoreManager.getUsersFromIDs([CtVariableReadImpl]userIDs, [CtLiteralImpl]null, [CtVariableReadImpl]extractedDomain, [CtVariableReadImpl]profileName);
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleGetUserListFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
                    [CtThrowImpl]throw [CtVariableReadImpl]ex;
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doGetUserListFromPropertiesWithID is not supported by this user store: " + [CtInvocationImpl][CtVariableReadImpl]userManager.getClass());
                }
                [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.emptyList();
            }
        }
        [CtIfImpl][CtCommentImpl]// If domain is not given then search all the user stores.
        if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtLiteralImpl]"No domain name found in claim value. Searching through all user stores for possible matches");
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> usersFromAllStoresList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager> userStoreManagers = [CtInvocationImpl]getUserStoreMangers();
        [CtForEachImpl][CtCommentImpl]// Iterate through all of available user store managers.
        for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userStoreManager : [CtVariableReadImpl]userStoreManagers) [CtBlockImpl]{
            [CtIfImpl][CtCommentImpl]// If this is not an instance of Abstract User Store Manger we can ignore the flow since we can't get the
            [CtCommentImpl]// domain name.
            if ([CtUnaryOperatorImpl]![CtBinaryOperatorImpl]([CtVariableReadImpl]userStoreManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager)) [CtBlockImpl]{
                [CtContinueImpl]continue;
            }
            [CtLocalVariableImpl][CtCommentImpl]// For all the user stores append the domain name to the claim and pass it recursively (Including PRIMARY).
            [CtTypeReferenceImpl]java.lang.String domainName = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userStoreManager)).getMyDomainName();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String claimValueWithDomain;
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.equalsIgnoreCase([CtVariableReadImpl]domainName, [CtTypeAccessImpl]UserCoreConstants.PRIMARY_DEFAULT_DOMAIN_NAME)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]claimValueWithDomain = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]domainName + [CtFieldReadImpl]org.wso2.carbon.CarbonConstants.DOMAIN_SEPARATOR) + [CtVariableReadImpl]claimValue;
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]claimValueWithDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]claimValue, [CtVariableReadImpl]domainName);
            }
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Invoking the get user list for domain: " + [CtVariableReadImpl]domainName) + [CtLiteralImpl]" for claim: ") + [CtVariableReadImpl]claim) + [CtLiteralImpl]" value: ") + [CtVariableReadImpl]claimValueWithDomain);
            }
            [CtLocalVariableImpl][CtCommentImpl]// Recursively call the getUserList method appending the domain to claim value.
            [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> userList = [CtInvocationImpl]getUserListWithID([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValueWithDomain, [CtVariableReadImpl]profileName);
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Secondary user list for domain: " + [CtVariableReadImpl]domainName) + [CtLiteralImpl]" : ") + [CtVariableReadImpl]userList);
            }
            [CtInvocationImpl][CtVariableReadImpl]usersFromAllStoresList.addAll([CtVariableReadImpl]userList);
        }
        [CtReturnImpl][CtCommentImpl]// Done with all user store processing. Return the user array if not empty.
        return [CtVariableReadImpl]usersFromAllStoresList;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> doGetUserList([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String extractedDomain, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userManager) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String property;
        [CtIfImpl][CtCommentImpl]// If domain is present, then we search within that domain only.
        if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]extractedDomain)) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userManager == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"No user store manager found for domain: " + [CtVariableReadImpl]extractedDomain);
                }
                [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.emptyList();
            }
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Domain found in claim value. Searching only in the " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" for possible ") + [CtLiteralImpl]"matches");
            }
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]property = [CtInvocationImpl][CtFieldReadImpl]claimManager.getAttributeName([CtVariableReadImpl]extractedDomain, [CtVariableReadImpl]claim);
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while retrieving attribute name for domain : " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" and claim ") + [CtVariableReadImpl]claim, [CtVariableReadImpl]e);
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]property == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Could not find matching property for\n" + [CtLiteralImpl]"claim :") + [CtVariableReadImpl]claim) + [CtLiteralImpl]"domain :") + [CtVariableReadImpl]extractedDomain);
                }
                [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.emptyList();
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                [CtTryImpl][CtCommentImpl]// Get the user list and return with domain appended.
                try [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager userStoreManager = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userManager));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.PaginatedSearchResult result = [CtInvocationImpl][CtVariableReadImpl]userStoreManager.getUserListFromProperties([CtVariableReadImpl]property, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset);
                    [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"List of filtered paginated users for: " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" : ") + [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl][CtVariableReadImpl]result.getUsers()));
                    }
                    [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToNames([CtInvocationImpl][CtVariableReadImpl]result.getUsers(), [CtVariableReadImpl]extractedDomain));
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]profileName);
                    [CtThrowImpl]throw [CtVariableReadImpl]ex;
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"getUserListFromProperties is not supported by this user store: " + [CtInvocationImpl][CtVariableReadImpl]userManager.getClass());
                }
                [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.emptyList();
            }
        }
        [CtIfImpl][CtCommentImpl]// If domain is not given then search all the user stores.
        if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtLiteralImpl]"No domain name found in claim value. Searching through all user stores for possible matches");
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> usersFromAllStoresList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager> userStoreManagers = [CtInvocationImpl]getUserStoreMangers();
        [CtLocalVariableImpl][CtTypeReferenceImpl]int nonPaginatedUserCount = [CtLiteralImpl]0;
        [CtForEachImpl][CtCommentImpl]// Iterate through all of available user store managers.
        for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userStoreManager : [CtVariableReadImpl]userStoreManagers) [CtBlockImpl]{
            [CtIfImpl][CtCommentImpl]// If this is not an instance of Abstract User Store Manger we can ignore the flow since we can't get the
            [CtCommentImpl]// domain name.
            if ([CtUnaryOperatorImpl]![CtBinaryOperatorImpl]([CtVariableReadImpl]userStoreManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager)) [CtBlockImpl]{
                [CtContinueImpl]continue;
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]limit <= [CtLiteralImpl]0) [CtBlockImpl]{
                [CtReturnImpl]return [CtVariableReadImpl]usersFromAllStoresList;
            }
            [CtLocalVariableImpl][CtCommentImpl]// For all the user stores append the domain name to the claim and pass it recursively (Including PRIMARY).
            [CtTypeReferenceImpl]java.lang.String domainName = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userStoreManager)).getMyDomainName();
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]property = [CtInvocationImpl][CtFieldReadImpl]claimManager.getAttributeName([CtVariableReadImpl]domainName, [CtVariableReadImpl]claim);
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while retrieving attribute name for domain : " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" and claim ") + [CtVariableReadImpl]claim, [CtVariableReadImpl]e);
            }
            [CtLocalVariableImpl][CtCommentImpl]// Recursively call the getUserList method appending the domain to claim value.
            [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.PaginatedSearchResult userList = [CtInvocationImpl]getUserListFromProperties([CtVariableReadImpl]property, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset);
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Secondary user list for domain: " + [CtVariableReadImpl]domainName) + [CtLiteralImpl]" : ") + [CtVariableReadImpl]userList);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]limit = [CtBinaryOperatorImpl][CtVariableReadImpl]limit - [CtFieldReadImpl][CtInvocationImpl][CtVariableReadImpl]userList.getUsers().length;
            [CtAssignmentImpl][CtVariableWriteImpl]nonPaginatedUserCount = [CtInvocationImpl][CtVariableReadImpl]userList.getSkippedUserCount();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtFieldReadImpl][CtInvocationImpl][CtVariableReadImpl]userList.getUsers().length > [CtLiteralImpl]0) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]offset = [CtLiteralImpl]1;
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]offset = [CtBinaryOperatorImpl][CtVariableReadImpl]offset - [CtVariableReadImpl]nonPaginatedUserCount;
            }
            [CtInvocationImpl][CtVariableReadImpl]usersFromAllStoresList.addAll([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToNames([CtInvocationImpl][CtVariableReadImpl]userList.getUsers(), [CtVariableReadImpl]domainName)));
        }
        [CtReturnImpl][CtCommentImpl]// Done with all user store processing. Return the user array if not empty.
        return [CtVariableReadImpl]usersFromAllStoresList;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get the list of user store managers available including primary user store manger.
     *
     * @return List of user store managers available.
     */
    private [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager> getUserStoreMangers() [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager> userStoreManagers = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager currentUserStoreManager = [CtThisAccessImpl]this;
        [CtWhileImpl][CtCommentImpl]// Get the list of user store managers(Including PRIMARY). Later we have to iterate through them.
        while ([CtBinaryOperatorImpl][CtVariableReadImpl]currentUserStoreManager != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]userStoreManagers.add([CtVariableReadImpl]currentUserStoreManager);
            [CtAssignmentImpl][CtVariableWriteImpl]currentUserStoreManager = [CtInvocationImpl][CtVariableReadImpl]currentUserStoreManager.getSecondaryUserStoreManager();
        } 
        [CtReturnImpl]return [CtVariableReadImpl]userStoreManagers;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method calls the relevant listener methods when there is a failure while trying to update credentials.
     *
     * @param errorCode
     * 		Relevant error code.
     * @param errorMessage
     * 		Error message.
     * @param userID
     * 		ID of the user.
     * @param newCredential
     * 		New credential.
     * @param oldCredential
     * 		Old credential.
     */
    private [CtTypeReferenceImpl]void handleUpdateCredentialFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object newCredential, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object oldCredential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onUpdateCredentialFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method calls the relevant listener methods when there is a failure while trying to update credentials.
     *
     * @param errorCode
     * 		Relevant error code.
     * @param errorMessage
     * 		Error message.
     * @param userName
     * 		Name of the user.
     * @param newCredential
     * 		New credential.
     * @param oldCredential
     * 		Old credential.
     */
    private [CtTypeReferenceImpl]void handleUpdateCredentialFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object newCredential, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object oldCredential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onUpdateCredentialFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtTypeReferenceImpl]void updateCredential([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object newCredential, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object oldCredential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.Object.class, [CtFieldReadImpl]java.lang.Object.class };
            [CtInvocationImpl]callSecure([CtLiteralImpl]"updateCredential", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().updateCredential([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
            [CtReturnImpl]return;
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateCredentialFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.Secret newCredentialObj;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.Secret oldCredentialObj;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]newCredentialObj = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.Secret.getSecret([CtVariableReadImpl]newCredential);
            [CtAssignmentImpl][CtVariableWriteImpl]oldCredentialObj = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.Secret.getSecret([CtVariableReadImpl]oldCredential);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.UnsupportedSecretTypeException e) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateCredentialFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.toString());
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserStoreManagerListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserStoreManagerListeners()) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.updateCredential([CtVariableReadImpl]userName, [CtVariableReadImpl]newCredentialObj, [CtVariableReadImpl]oldCredentialObj, [CtThisAccessImpl]this)) [CtBlockImpl]{
                            [CtInvocationImpl]handleUpdateCredentialFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                            [CtReturnImpl]return;
                        }
                    } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.updateCredential([CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtInvocationImpl]handleUpdateCredentialFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                        [CtReturnImpl]return;
                    }
                }
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPreUpdateCredential([CtVariableReadImpl]userName, [CtVariableReadImpl]newCredentialObj, [CtVariableReadImpl]oldCredentialObj, [CtThisAccessImpl]this)) [CtBlockImpl]{
                            [CtInvocationImpl]handleUpdateCredentialFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                            [CtReturnImpl]return;
                        }
                    } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPreUpdateCredential([CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtInvocationImpl]handleUpdateCredentialFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                        [CtReturnImpl]return;
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateCredentialFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                [CtThrowImpl]throw [CtVariableReadImpl]e;
            }
            [CtLocalVariableImpl][CtCommentImpl]// #################### </Listeners> #####################################################
            [CtCommentImpl]// This user name here is domain-less.
            [CtCommentImpl]// We directly authenticate user against the selected UserStoreManager.
            [CtCommentImpl]// Property to check whether this user store supports new APIs with unique user id.
            [CtTypeReferenceImpl]boolean isUniqueUserIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtLiteralImpl]null;
            [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userID = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName);
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isAuth;
            [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String preferredUserNameProperty = [CtInvocationImpl]getUsernameProperty();
                [CtAssignmentImpl][CtVariableWriteImpl]isAuth = [CtBinaryOperatorImpl][CtInvocationImpl][CtInvocationImpl][CtThisAccessImpl]this.doAuthenticateWithID([CtVariableReadImpl]preferredUserNameProperty, [CtVariableReadImpl]userName, [CtVariableReadImpl]oldCredentialObj, [CtLiteralImpl]null).getAuthenticationStatus() == [CtFieldReadImpl]AuthenticationResult.AuthenticationStatus.SUCCESS;
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]isAuth = [CtInvocationImpl][CtThisAccessImpl]this.doAuthenticate([CtVariableReadImpl]userName, [CtVariableReadImpl]oldCredentialObj);
            }
            [CtIfImpl]if ([CtVariableReadImpl]isAuth) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]checkUserPasswordValid([CtVariableReadImpl]newCredential)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMsg = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.PROPERTY_PASSWORD_ERROR_MSG);
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]errorMsg != [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getMessage(), [CtVariableReadImpl]errorMsg);
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getCode();
                        [CtInvocationImpl]handleUpdateCredentialFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_PASSWORD.getMessage(), [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_JAVA_REG_EX));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_PASSWORD.getCode();
                    [CtInvocationImpl]handleUpdateCredentialFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
                }
                [CtTryImpl]try [CtBlockImpl]{
                    [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
                        [CtInvocationImpl][CtThisAccessImpl]this.doUpdateCredentialWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                    } else [CtBlockImpl]{
                        [CtInvocationImpl][CtThisAccessImpl]this.doUpdateCredential([CtVariableReadImpl]userName, [CtVariableReadImpl]newCredentialObj, [CtVariableReadImpl]oldCredentialObj);
                    }
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateCredentialFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_UPDATING_CREDENTIAL.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_UPDATING_CREDENTIAL.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                    [CtThrowImpl]throw [CtVariableReadImpl]ex;
                }
                [CtTryImpl][CtCommentImpl]// #################### <Listeners> ##################################################
                try [CtBlockImpl]{
                    [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPostUpdateCredential([CtVariableReadImpl]userName, [CtVariableReadImpl]newCredentialObj, [CtThisAccessImpl]this)) [CtBlockImpl]{
                                [CtInvocationImpl]handleUpdateCredentialFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL.getMessage(), [CtLiteralImpl]"Post update credential tasks failed"), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredentialObj, [CtVariableReadImpl]oldCredentialObj);
                                [CtReturnImpl]return;
                            }
                        } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPostUpdateCredential([CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential, [CtThisAccessImpl]this)) [CtBlockImpl]{
                            [CtInvocationImpl]handleUpdateCredentialFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL.getMessage(), [CtLiteralImpl]"Post update credential tasks failed"), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                            [CtReturnImpl]return;
                        }
                    }
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateCredentialFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                    [CtThrowImpl]throw [CtVariableReadImpl]ex;
                }
                [CtCommentImpl]// #################### </Listeners> ##################################################
            } else [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateCredentialFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_OLD_CREDENTIAL_DOES_NOT_MATCH.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_OLD_CREDENTIAL_DOES_NOT_MATCH.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_OLD_CREDENTIAL_DOES_NOT_MATCH.toString());
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]e);
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]newCredentialObj.clear();
            [CtInvocationImpl][CtVariableReadImpl]oldCredentialObj.clear();
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Handles the failure while there is a failure while update of credentials is done by the admin.
     *
     * @param errorCode
     * 		Relevant error code.
     * @param errorMessage
     * 		Error message.
     * @param userName
     * 		Name of the user.
     * @param newCredential
     * 		New credential.
     * @throws UserStoreException
     * 		Exception that could be thrown by the listeners.
     */
    private [CtTypeReferenceImpl]void handleUpdateCredentialByAdminFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object newCredential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onUpdateCredentialByAdminFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Handles the failure while there is a failure while update of credentials is done by the admin.
     *
     * @param errorCode
     * 		Relevant error code.
     * @param errorMessage
     * 		Error message.
     * @param userID
     * 		ID of the user.
     * @param newCredential
     * 		New credential.
     * @throws UserStoreException
     * 		Exception that could be thrown by the listeners.
     */
    private [CtTypeReferenceImpl]void handleUpdateCredentialByAdminFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object newCredential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onUpdateCredentialByAdminFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtTypeReferenceImpl]void updateCredentialByAdmin([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object newCredential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.Object.class };
            [CtInvocationImpl]callSecure([CtLiteralImpl]"updateCredentialByAdmin", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().updateCredentialByAdmin([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]newCredential);
            [CtReturnImpl]return;
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateCredentialByAdminFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.Secret newCredentialObj;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]newCredentialObj = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.Secret.getSecret([CtVariableReadImpl]newCredential);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.UnsupportedSecretTypeException e) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateCredentialByAdminFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getCode(), [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getMessage() + [CtLiteralImpl]" ") + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.toString(), [CtVariableReadImpl]e);
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtForEachImpl][CtCommentImpl]// #################### <Listeners> #####################################################
                for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserStoreManagerListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserStoreManagerListeners()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object credentialArgument;
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]newCredentialObj;
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]newCredential;
                    }
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.updateCredentialByAdmin([CtVariableReadImpl]userName, [CtVariableReadImpl]credentialArgument, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtInvocationImpl]handleUpdateCredentialByAdminFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]credentialArgument);
                        [CtReturnImpl]return;
                    }
                }
                [CtForEachImpl][CtCommentImpl]// using string buffers to allow the password to be changed by listener
                for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPreUpdateCredentialByAdmin([CtVariableReadImpl]userName, [CtVariableReadImpl]newCredentialObj, [CtThisAccessImpl]this)) [CtBlockImpl]{
                            [CtInvocationImpl]handleUpdateCredentialByAdminFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredentialObj);
                            [CtReturnImpl]return;
                        }
                    } else [CtBlockImpl]{
                        [CtLocalVariableImpl][CtCommentImpl]// using string buffers to allow the password to be changed by listener
                        [CtTypeReferenceImpl]java.lang.StringBuffer credBuff = [CtLiteralImpl]null;
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]newCredential == [CtLiteralImpl]null) [CtBlockImpl]{
                            [CtAssignmentImpl][CtCommentImpl]// a default password will be set
                            [CtVariableWriteImpl]credBuff = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.StringBuffer();
                        } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]newCredential instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]java.lang.String) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]credBuff = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.StringBuffer([CtVariableReadImpl](([CtTypeReferenceImpl]java.lang.String) (newCredential)));
                        }
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]credBuff != [CtLiteralImpl]null) [CtBlockImpl]{
                            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPreUpdateCredentialByAdmin([CtVariableReadImpl]userName, [CtVariableReadImpl]credBuff, [CtThisAccessImpl]this)) [CtBlockImpl]{
                                [CtInvocationImpl]handleUpdateCredentialByAdminFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]credBuff);
                                [CtReturnImpl]return;
                            }
                            [CtAssignmentImpl][CtCommentImpl]// reading the modified value
                            [CtVariableWriteImpl]newCredential = [CtInvocationImpl][CtVariableReadImpl]credBuff.toString();
                            [CtInvocationImpl][CtVariableReadImpl]newCredentialObj.clear();
                            [CtTryImpl]try [CtBlockImpl]{
                                [CtAssignmentImpl][CtVariableWriteImpl]newCredentialObj = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.Secret.getSecret([CtVariableReadImpl]newCredential);
                            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.UnsupportedSecretTypeException e) [CtBlockImpl]{
                                [CtInvocationImpl]handleUpdateCredentialByAdminFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getCode(), [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getMessage() + [CtLiteralImpl]" ") + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential);
                                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.toString(), [CtVariableReadImpl]e);
                            }
                        }
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateCredentialByAdminFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
            [CtIfImpl][CtCommentImpl]// #################### </Listeners> #####################################################
            if ([CtUnaryOperatorImpl]![CtInvocationImpl]checkUserPasswordValid([CtVariableReadImpl]newCredential)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMsg = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.PROPERTY_PASSWORD_ERROR_MSG);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]errorMsg != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getCode();
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getMessage(), [CtVariableReadImpl]errorMsg);
                    [CtInvocationImpl]handleUpdateCredentialByAdminFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential);
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_PASSWORD.getCode();
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_PASSWORD.getMessage(), [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_JAVA_REG_EX));
                [CtInvocationImpl]handleUpdateCredentialByAdminFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
            }
            [CtLocalVariableImpl][CtCommentImpl]// Property to check whether this user store supports new APIs with unique user id.
            [CtTypeReferenceImpl]boolean isUniqueUserIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtLiteralImpl]null;
            [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userID = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName);
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUserExists;
            [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtBinaryOperatorImpl][CtVariableReadImpl]userID != [CtLiteralImpl]null;
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtInvocationImpl]doCheckExistingUser([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
            }
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserExists) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userName, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
                [CtInvocationImpl]handleUpdateCredentialByAdminFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]"-") + [CtVariableReadImpl]errorMessage);
            }
            [CtTryImpl]try [CtBlockImpl]{
                [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
                    [CtInvocationImpl]doUpdateCredentialByAdminWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]newCredentialObj);
                } else [CtBlockImpl]{
                    [CtInvocationImpl]doUpdateCredentialByAdmin([CtVariableReadImpl]userName, [CtVariableReadImpl]newCredentialObj);
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateCredentialByAdminFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_UPDATING_CREDENTIAL_BY_ADMIN.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_UPDATING_CREDENTIAL_BY_ADMIN.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredentialObj);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
            [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
            try [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object credentialArgument;
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]newCredentialObj;
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]newCredential;
                    }
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPostUpdateCredentialByAdmin([CtVariableReadImpl]userName, [CtVariableReadImpl]credentialArgument, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtInvocationImpl]handleUpdateCredentialByAdminFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL_BY_ADMIN.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL_BY_ADMIN.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential);
                        [CtReturnImpl]return;
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateCredentialByAdminFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL_BY_ADMIN.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL_BY_ADMIN.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]newCredential);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]newCredentialObj.clear();
        }
        [CtCommentImpl]// #################### </Listeners> #####################################################
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get the attribute for the provided claim uri and identifier.
     *
     * @param claimURI
     * @param identifier
     * 		user name or role.
     * @param domainName
     * 		TODO
     * @return claim attribute value. NULL if attribute is not defined for the
    claim uri
     * @throws org.wso2.carbon.user.api.UserStoreException
     */
    protected [CtTypeReferenceImpl]java.lang.String getClaimAtrribute([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimURI, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String identifier, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domainName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtAssignmentImpl][CtVariableWriteImpl]domainName = [CtConditionalImpl]([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]domainName == [CtLiteralImpl]null) || [CtInvocationImpl][CtVariableReadImpl]domainName.isEmpty()) ? [CtConditionalImpl][CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]identifier.indexOf([CtTypeAccessImpl]UserCoreConstants.DOMAIN_SEPARATOR) > [CtUnaryOperatorImpl](-[CtLiteralImpl]1) ? [CtArrayReadImpl][CtInvocationImpl][CtVariableReadImpl]identifier.split([CtTypeAccessImpl]UserCoreConstants.DOMAIN_SEPARATOR)[[CtLiteralImpl]0] : [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserStoreConfigConstants.DOMAIN_NAME) : [CtVariableReadImpl]domainName;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String attributeName = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]domainName != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]attributeName = [CtInvocationImpl][CtFieldReadImpl]claimManager.getAttributeName([CtVariableReadImpl]domainName, [CtVariableReadImpl]claimURI);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]attributeName == [CtLiteralImpl]null) || [CtInvocationImpl][CtVariableReadImpl]attributeName.isEmpty()) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]attributeName = [CtInvocationImpl][CtFieldReadImpl]claimManager.getAttributeName([CtTypeAccessImpl]UserCoreConstants.PRIMARY_DEFAULT_DOMAIN_NAME, [CtVariableReadImpl]claimURI);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]attributeName == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.PROFILE_CONFIGURATION.equals([CtVariableReadImpl]claimURI)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]attributeName = [CtVariableReadImpl]claimURI;
            } else [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.DISAPLAY_NAME_CLAIM.equals([CtVariableReadImpl]claimURI)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]attributeName = [CtInvocationImpl][CtFieldReadImpl][CtThisAccessImpl]this.realmConfig.getUserStoreProperty([CtTypeAccessImpl]LDAPConstants.DISPLAY_NAME_ATTRIBUTE);
            } else [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Mapped attribute cannot be found for claim : " + [CtVariableReadImpl]claimURI) + [CtLiteralImpl]" in user ") + [CtLiteralImpl]"store : ") + [CtInvocationImpl]getMyDomainName());
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]attributeName;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method handles the follow up actions when there is a failure while deleting a user.
     *
     * @param errorCode
     * 		Relevant error code.
     * @param errorMessage
     * 		Relevant error message.
     * @param userName
     * 		Name of the user.
     * @throws UserStoreException
     * 		User Store Exception that could be thrown while doing follow-up actions.
     */
    private [CtTypeReferenceImpl]void handleDeleteUserFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onDeleteUserFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method handles the follow up actions when there is a failure while deleting a user.
     *
     * @param errorCode
     * 		Relevant error code.
     * @param errorMessage
     * 		Relevant error message.
     * @param userID
     * 		ID of the user.
     * @throws UserStoreException
     * 		User Store Exception that could be thrown while doing follow-up actions.
     */
    private [CtTypeReferenceImpl]void handleDeleteUserFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onDeleteUserFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtTypeReferenceImpl]void deleteUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class };
            [CtInvocationImpl]callSecure([CtLiteralImpl]"deleteUser", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String loggedInUser = [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.context.CarbonContext.getThreadLocalCarbonContext().getUsername();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]loggedInUser != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]loggedInUser = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]loggedInUser, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.getDomainFromThreadLocal());
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]loggedInUser.indexOf([CtTypeAccessImpl]UserCoreConstants.DOMAIN_SEPARATOR) < [CtLiteralImpl]0) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]loggedInUser = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.PRIMARY_DEFAULT_DOMAIN_NAME + [CtFieldReadImpl]org.wso2.carbon.CarbonConstants.DOMAIN_SEPARATOR) + [CtVariableReadImpl]loggedInUser;
            }
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deletingUser = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]userName, [CtInvocationImpl]getMyDomainName());
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]deletingUser.indexOf([CtTypeAccessImpl]UserCoreConstants.DOMAIN_SEPARATOR) < [CtLiteralImpl]0) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]deletingUser = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.PRIMARY_DEFAULT_DOMAIN_NAME + [CtFieldReadImpl]org.wso2.carbon.CarbonConstants.DOMAIN_SEPARATOR) + [CtVariableReadImpl]deletingUser;
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]loggedInUser != [CtLiteralImpl]null) && [CtInvocationImpl][CtVariableReadImpl]loggedInUser.equals([CtVariableReadImpl]deletingUser)) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"User " + [CtVariableReadImpl]loggedInUser) + [CtLiteralImpl]" tried to delete him/her self");
            [CtInvocationImpl]handleDeleteUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DELETE_LOGGED_IN_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DELETE_LOGGED_IN_USER.getMessage(), [CtVariableReadImpl]userName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DELETE_LOGGED_IN_USER.toString());
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().deleteUser([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
            [CtReturnImpl]return;
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isPrimaryAdminUser([CtVariableReadImpl]userName, [CtFieldReadImpl]realmConfig)) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DELETE_ADMIN_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DELETE_ADMIN_USER.getMessage(), [CtVariableReadImpl]userName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DELETE_ADMIN_USER.toString());
        }
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isRegistryAnnonymousUser([CtVariableReadImpl]userName)) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DELETE_ANONYMOUS_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DELETE_ANONYMOUS_USER.getMessage(), [CtVariableReadImpl]userName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DELETE_ANONYMOUS_USER.toString());
        }
        [CtIfImpl]if ([CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]userName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserStoreManagerListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserStoreManagerListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.deleteUser([CtVariableReadImpl]userName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleDeleteUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName);
                    [CtReturnImpl]return;
                }
            }
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPreDeleteUser([CtVariableReadImpl]userName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleDeleteUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userName);
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
        [CtLocalVariableImpl][CtCommentImpl]// #################### </Listeners> #####################################################
        [CtCommentImpl]// Property to check whether this user store supports new APIs with unique user id.
        [CtTypeReferenceImpl]boolean isUniqueUserIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUserExists;
        [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userID = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName);
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtBinaryOperatorImpl][CtVariableReadImpl]userID != [CtLiteralImpl]null;
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtInvocationImpl]doCheckExistingUser([CtVariableReadImpl]userName);
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserExists) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userName, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
            [CtInvocationImpl]handleDeleteUserFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtTryImpl][CtCommentImpl]// Remove users from internal role mapping
        try [CtBlockImpl]{
            [CtInvocationImpl]clearUserIDResolverCache([CtVariableReadImpl]userID, [CtVariableReadImpl]userName, [CtVariableReadImpl]userStore);
            [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.deleteUser([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]userName, [CtInvocationImpl]getMyDomainName()));
                [CtInvocationImpl]doDeleteUserWithID([CtVariableReadImpl]userID);
            } else [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.deleteUser([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]userName, [CtInvocationImpl]getMyDomainName()));
                [CtInvocationImpl]doDeleteUser([CtVariableReadImpl]userName);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_DELETING_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_DELETING_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userName);
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
        [CtInvocationImpl][CtCommentImpl]// Needs to clear roles cache upon deletion of a user
        clearUserRolesCache([CtVariableReadImpl]userName);
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPostDeleteUser([CtVariableReadImpl]userName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleDeleteUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtCommentImpl]// #################### </Listeners> #####################################################
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This is method is to call the relevant listeners when there is a failure while setting user claim value.
     *
     * @param errorCode
     * 		Error code.
     * @param errorMessage
     * 		Error message.
     * @param userName
     * 		Name of the user.
     * @param claimURI
     * 		Claim URI.
     * @param claimValue
     * 		Claim Value.
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		UserStore Exception that would be thrown within the listeners.
     */
    private [CtTypeReferenceImpl]void handleSetUserClaimValueFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimURI, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onSetUserClaimValueFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This is method is to call the relevant listeners when there is a failure while setting user claim value.
     *
     * @param errorCode
     * 		Error code.
     * @param errorMessage
     * 		Error message.
     * @param userID
     * 		ID of the user.
     * @param claimURI
     * 		Claim URI.
     * @param claimValue
     * 		Claim Value.
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		UserStore Exception that would be thrown within the listeners.
     */
    private [CtTypeReferenceImpl]void handleSetUserClaimValueFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimURI, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onSetUserClaimValueFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtTypeReferenceImpl]void setUserClaimValue([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimURI, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().setUserClaimValue([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        [CtCommentImpl]// Property to check whether this user store supports new APIs with unique user id.
        [CtTypeReferenceImpl]boolean isUniqueUserIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userID = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUserExists;
        [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtBinaryOperatorImpl][CtVariableReadImpl]userID != [CtLiteralImpl]null;
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtInvocationImpl]doCheckExistingUser([CtVariableReadImpl]userName);
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserExists) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userName, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
            [CtInvocationImpl]handleSetUserClaimValueFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPreSetUserClaimValue([CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleSetUserClaimValueFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUE.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValueFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
        [CtIfImpl][CtCommentImpl]// #################### </Listeners> #####################################################
        [CtCommentImpl]// Check userstore is readonly or not.
        if ([CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValueFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
                [CtInvocationImpl]doSetUserClaimValueWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
            } else [CtBlockImpl]{
                [CtInvocationImpl]doSetUserClaimValue([CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValueFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_SETTING_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_SETTING_USER_CLAIM_VALUE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPostSetUserClaimValue([CtVariableReadImpl]userName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleSetUserClaimValueFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUE.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValueFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
        [CtCommentImpl]// #################### </Listeners> #####################################################
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling relevant methods when there is a failure while setting user claim values.
     *
     * @param errorCode
     * 		Error code.
     * @param errorMessage
     * 		Error message.
     * @param userName
     * 		Name of the user.
     * @param claims
     * 		Relevant claims.
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listeners.
     */
    private [CtTypeReferenceImpl]void handleSetUserClaimValuesFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onSetUserClaimValuesFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling relevant methods when there is a failure while setting user claim values.
     *
     * @param errorCode
     * 		Error code.
     * @param errorMessage
     * 		Error message.
     * @param userName
     * 		Name of the user.
     * @param claims
     * 		Relevant claims.
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listeners.
     */
    private [CtTypeReferenceImpl]void handleSetUserClaimValuesFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onSetUserClaimValuesFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtTypeReferenceImpl]void setUserClaimValues([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().setUserClaimValues([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        [CtCommentImpl]// Property to check whether this user store supports new APIs with unique user id.
        [CtTypeReferenceImpl]boolean isUniqueUserIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userID = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUserExists;
        [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtBinaryOperatorImpl][CtVariableReadImpl]userID != [CtLiteralImpl]null;
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtInvocationImpl]doCheckExistingUser([CtVariableReadImpl]userName);
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserExists) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userName, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
            [CtInvocationImpl]handleSetUserClaimValuesFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claims == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]claims = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPreSetUserClaimValues([CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleSetUserClaimValuesFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValuesFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
        [CtIfImpl][CtCommentImpl]// #################### </Listeners> #####################################################
        [CtCommentImpl]// If user store is readonly this method should not get invoked with non empty claim set.
        if ([CtBinaryOperatorImpl][CtInvocationImpl]isReadOnly() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]claims.isEmpty())) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValuesFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
        }
        [CtTryImpl][CtCommentImpl]// set claim values if user store is not read only.
        try [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
                [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
                    [CtInvocationImpl]doSetUserClaimValuesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                } else [CtBlockImpl]{
                    [CtInvocationImpl]doSetUserClaimValues([CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValuesFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_SETTING_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_SETTING_USER_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPostSetUserClaimValues([CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleSetUserClaimValuesFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUES.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValuesFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
        [CtCommentImpl]// #################### </Listeners> #####################################################
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * To handle the listener events when there is a failure while trying to delete the user  claim value.
     *
     * @param errorCode
     * 		Relevant error code.
     * @param errorMessage
     * 		error message
     * @param userName
     * 		Name of the user.
     * @param claimURI
     * 		Claim URI
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		Exception that will thrown from listeners.
     */
    private [CtTypeReferenceImpl]void handleDeleteUserClaimValueFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimURI, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onDeleteUserClaimValueFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * To handle the listener events when there is a failure while trying to delete the user  claim value.
     *
     * @param errorCode
     * 		Relevant error code.
     * @param errorMessage
     * 		error message.
     * @param userID
     * 		ID of the user.
     * @param claimURI
     * 		Claim URI.
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		Exception that will thrown from listeners.
     */
    private [CtTypeReferenceImpl]void handleDeleteUserClaimValueFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimURI, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onDeleteUserClaimValueFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtTypeReferenceImpl]void deleteUserClaimValue([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimURI, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class };
            [CtInvocationImpl]callSecure([CtLiteralImpl]"deleteUserClaimValue", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().deleteUserClaimValue([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
            [CtReturnImpl]return;
        }
        [CtIfImpl]if ([CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserClaimValueFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
        }
        [CtLocalVariableImpl][CtCommentImpl]// Property to check whether this user store supports new APIs with unique user id.
        [CtTypeReferenceImpl]boolean isUniqueUserIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUserExists;
        [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userID = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName);
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtBinaryOperatorImpl][CtVariableReadImpl]userID != [CtLiteralImpl]null;
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtInvocationImpl]doCheckExistingUser([CtVariableReadImpl]userName);
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserExists) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userName, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
            [CtInvocationImpl]handleDeleteUserClaimValueFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPreDeleteUserClaimValue([CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleDeleteUserClaimValueFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER_CLAIM_VALUE.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
                    [CtReturnImpl]return;
                }
            }
            [CtCommentImpl]// #################### </Listeners> #####################################################
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserClaimValueFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER_CLAIM_VALUE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
                [CtInvocationImpl]doDeleteUserClaimValueWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
            } else [CtBlockImpl]{
                [CtInvocationImpl]doDeleteUserClaimValue([CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserClaimValueFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_DELETING_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_DELETING_USER_CLAIM_VALUE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPostDeleteUserClaimValue([CtVariableReadImpl]userName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleDeleteUserClaimValueFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER_CLAIM_VALUE.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserClaimValueFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER_CLAIM_VALUE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtCommentImpl]// #################### </Listeners> #####################################################
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method handles a failure when trying to delete user claim values.
     *
     * @param errorCode
     * 		Error code.
     * @param errorMessage
     * 		Error message
     * @param userName
     * 		Name of the user.
     * @param claims
     * 		Claims
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		User Store Exception that will be thrown from the relevant listeners.
     */
    private [CtTypeReferenceImpl]void handleDeleteUserClaimValuesFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onDeleteUserClaimValuesFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method handles a failure when trying to delete user claim values.
     *
     * @param errorCode
     * 		Error code.
     * @param errorMessage
     * 		Error message
     * @param userID
     * 		ID of the user.
     * @param claims
     * 		Claims.
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		User Store Exception that will be thrown from the relevant listeners.
     */
    private [CtTypeReferenceImpl]void handleDeleteUserClaimValuesFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onDeleteUserClaimValuesFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtTypeReferenceImpl]void deleteUserClaimValues([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String[].class, [CtFieldReadImpl]java.lang.String.class };
            [CtInvocationImpl]callSecure([CtLiteralImpl]"deleteUserClaimValues", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().deleteUserClaimValues([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtReturnImpl]return;
        }
        [CtIfImpl]if ([CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserClaimValuesFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
        }
        [CtLocalVariableImpl][CtCommentImpl]// Property to check whether this user store supports new APIs with unique user id.
        [CtTypeReferenceImpl]boolean isUniqueUserIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUserExists;
        [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userID = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName);
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtBinaryOperatorImpl][CtVariableReadImpl]userID != [CtLiteralImpl]null;
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtInvocationImpl]doCheckExistingUser([CtVariableReadImpl]userName);
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserExists) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userName, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
            [CtInvocationImpl]handleDeleteUserClaimValuesFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claims == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]claims = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPreDeleteUserClaimValues([CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleDeleteUserClaimValuesFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER_CLAIM_VALUES.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                    [CtReturnImpl]return;
                }
            }
            [CtCommentImpl]// #################### </Listeners> #####################################################
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserClaimValuesFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
                [CtInvocationImpl]doDeleteUserClaimValuesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            } else [CtBlockImpl]{
                [CtInvocationImpl]doDeleteUserClaimValues([CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserClaimValuesFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_DELETING_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_DELETING_USER_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPostDeleteUserClaimValues([CtVariableReadImpl]userName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleDeleteUserClaimValuesFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER_CLAIM_VALUES.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserClaimValuesFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtCommentImpl]// #################### </Listeners> #####################################################
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public [CtTypeReferenceImpl]void addUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] roleList, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtInvocationImpl][CtThisAccessImpl]this.addUser([CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtLiteralImpl]false);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtTypeReferenceImpl]void addUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] roleList, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]boolean requirePasswordChange) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl][CtCommentImpl]// We have to make sure this call is going through the Java Security Manager.
        if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class[] argTypes = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.Object.class, [CtFieldReadImpl]java.lang.String[].class, [CtFieldReadImpl]java.util.Map.class, [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]boolean.class };
            [CtInvocationImpl]callSecure([CtLiteralImpl]"addUser", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtVariableReadImpl]requirePasswordChange }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtLiteralImpl]null;
        [CtIfImpl][CtCommentImpl]// If we don't have a username, we cannot proceed.
        if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]userName)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String regEx = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_USER_NAME_JAVA_REG_EX);
            [CtIfImpl][CtCommentImpl]// Inorder to support both UsernameJavaRegEx and UserNameJavaRegEx.
            if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]regEx) || [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtInvocationImpl][CtVariableReadImpl]regEx.trim())) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]regEx = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_USER_NAME_JAVA_REG);
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_USER_NAME.getMessage(), [CtLiteralImpl]null, [CtVariableReadImpl]regEx);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_USER_NAME.getCode();
            [CtInvocationImpl]handleAddUserFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]message, [CtLiteralImpl]null, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]message);
        }
        [CtIfImpl][CtCommentImpl]// If the username claims presents, the value should be equal to the username attribute.
        if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]claims != [CtLiteralImpl]null) && [CtInvocationImpl][CtVariableReadImpl]claims.containsKey([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.USERNAME_CLAIM_URI)) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]claims.get([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.USERNAME_CLAIM_URI).equals([CtVariableReadImpl]userName))) [CtBlockImpl]{
            [CtThrowImpl][CtCommentImpl]// If not we cannot continue.
            throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Username and the username claim value should be same.");
        }
        [CtLocalVariableImpl][CtCommentImpl]// Get the user store that this user should be added from the domain name that is appended to the username.
        [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]userName);
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUniqueUserIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().addUser([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtVariableReadImpl]requirePasswordChange);
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtCommentImpl]// Convert the credential (Password) to a Secret.
        [CtTypeReferenceImpl]org.wso2.carbon.utils.Secret credentialObj;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]credentialObj = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.Secret.getSecret([CtVariableReadImpl]credential);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.UnsupportedSecretTypeException e) [CtBlockImpl]{
            [CtInvocationImpl]handleAddUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.toString(), [CtVariableReadImpl]e);
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isSystemStore()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.addSystemUser([CtVariableReadImpl]userName, [CtVariableReadImpl]credentialObj, [CtVariableReadImpl]roleList);
                [CtReturnImpl]return;
            }
            [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
            [CtCommentImpl]// First check whether this user store is a readonly one. If so we cannot continue.
            if ([CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
                [CtInvocationImpl]handleAddUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
            }
            [CtIfImpl][CtCommentImpl]// This happens only once during first startup - adding administrator user/role.
            if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]userName.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR) > [CtLiteralImpl]0) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userName = [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName();
                [CtAssignmentImpl][CtVariableWriteImpl]roleList = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]roleList);
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]roleList == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]roleList = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claims == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]claims = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
            }
            [CtTryImpl][CtCommentImpl]// #################### <Pre-Listeners> #####################################################
            try [CtBlockImpl]{
                [CtForEachImpl][CtCommentImpl]// First we are going to call all the registered User Store Manager Listeners.
                for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserStoreManagerListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserStoreManagerListeners()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object credentialArgument;
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credentialObj;
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credential;
                    }
                    [CtIfImpl][CtCommentImpl]// Call the listener, and if it returns false, then it is an error scenario.
                    if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.addUser([CtVariableReadImpl]userName, [CtVariableReadImpl]credentialArgument, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtInvocationImpl]handleAddUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                        [CtReturnImpl]return;
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleAddUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
            [CtForEachImpl][CtCommentImpl]// Then call all the registered User Operation Event Listeners.
            for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl][CtCommentImpl]// This is to call all new listeners. All listeners should support the Secret object as the credential
                [CtCommentImpl]// for security reasons.
                if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                    [CtTryImpl]try [CtBlockImpl]{
                        [CtIfImpl][CtCommentImpl]// Call pre add user listener.
                        if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPreAddUser([CtVariableReadImpl]userName, [CtVariableReadImpl]credentialObj, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                            [CtInvocationImpl]handleAddUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                            [CtReturnImpl]return;
                        }
                    }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage());
                        [CtInvocationImpl]handleAddUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getCode(), [CtVariableReadImpl]message, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                        [CtThrowImpl]throw [CtVariableReadImpl]ex;
                    }
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtCommentImpl]// This is to support the legacy listeners which does not know how to handle the Secret object as
                    [CtCommentImpl]// the credentials.
                    [CtCommentImpl]// String buffers are used to let the listeners to modify the password.
                    [CtTypeReferenceImpl]java.lang.StringBuffer credBuff = [CtLiteralImpl]null;
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]credential == [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtAssignmentImpl][CtCommentImpl]// No credentials passed. A default password will be set.
                        [CtVariableWriteImpl]credBuff = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.StringBuffer();
                    } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]credential instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]java.lang.String) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credBuff = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.StringBuffer([CtVariableReadImpl](([CtTypeReferenceImpl]java.lang.String) (credential)));
                    }
                    [CtIfImpl][CtCommentImpl]// If the credential is not null and not an instance of "String".
                    if ([CtBinaryOperatorImpl][CtVariableReadImpl]credBuff == [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtContinueImpl]continue;
                    }
                    [CtTryImpl]try [CtBlockImpl]{
                        [CtIfImpl][CtCommentImpl]// Call pre add user listener.
                        if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPreAddUser([CtVariableReadImpl]userName, [CtVariableReadImpl]credBuff, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                            [CtInvocationImpl]handleAddUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                            [CtReturnImpl]return;
                        }
                    }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
                        [CtInvocationImpl]handleAddUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                        [CtThrowImpl]throw [CtVariableReadImpl]e;
                    }
                    [CtAssignmentImpl][CtCommentImpl]// Reading the modified value and update the credential object (Secret) with the new values.
                    [CtVariableWriteImpl]credential = [CtInvocationImpl][CtVariableReadImpl]credBuff.toString();
                    [CtInvocationImpl][CtVariableReadImpl]credentialObj.clear();
                    [CtTryImpl]try [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialObj = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.Secret.getSecret([CtVariableReadImpl]credential);
                    }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.UnsupportedSecretTypeException e) [CtBlockImpl]{
                        [CtInvocationImpl]handleAddUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.toString(), [CtVariableReadImpl]e);
                    }
                }
            }
            [CtIfImpl][CtCommentImpl]// #################### </Pre-Listeners> #####################################################
            [CtCommentImpl]// Validate the username against provided regular expressions.
            if ([CtUnaryOperatorImpl]![CtInvocationImpl]checkUserNameValid([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName())) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String regEx = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_USER_NAME_JAVA_REG_EX);
                [CtIfImpl][CtCommentImpl]// Inorder to support both UsernameJavaRegEx and UserNameJavaRegEx.
                if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]regEx) || [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtInvocationImpl][CtVariableReadImpl]regEx.trim())) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]regEx = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_USER_NAME_JAVA_REG);
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_USER_NAME.getMessage(), [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]regEx);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_USER_NAME.getCode();
                [CtInvocationImpl]handleAddUserFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]message, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]message);
            }
            [CtIfImpl][CtCommentImpl]// Validate the password against provided regular expressions.
            if ([CtUnaryOperatorImpl]![CtInvocationImpl]checkUserPasswordValid([CtVariableReadImpl]credentialObj)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String regEx = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_JAVA_REG_EX);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_PASSWORD.getMessage(), [CtVariableReadImpl]regEx);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_PASSWORD.getCode();
                [CtInvocationImpl]handleAddUserFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]message, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]message);
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isExistingUser;
            [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]isExistingUser = [CtBinaryOperatorImpl][CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName) != [CtLiteralImpl]null;
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]isExistingUser = [CtInvocationImpl]doCheckExistingUser([CtVariableReadImpl]userName);
            }
            [CtIfImpl][CtCommentImpl]// Property to check whether this user store supports new APIs with unique user id.
            if ([CtVariableReadImpl]isExistingUser) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_USER_ALREADY_EXISTS.getMessage(), [CtVariableReadImpl]userName);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_USER_ALREADY_EXISTS.getCode();
                [CtInvocationImpl]handleAddUserFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]message, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]message);
            }
            [CtLocalVariableImpl][CtCommentImpl]// Categorize roles according to the internal and external roles.
            [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> internalRoles = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> externalRoles = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
            [CtInvocationImpl]filterRoles([CtVariableReadImpl]roleList, [CtVariableReadImpl]internalRoles, [CtVariableReadImpl]externalRoles);
            [CtForEachImpl][CtCommentImpl]// Check existence of internal roles.
            for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String internalRole : [CtVariableReadImpl]internalRoles) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.isExistingRole([CtVariableReadImpl]internalRole)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INTERNAL_ROLE_NOT_EXISTS.getMessage(), [CtVariableReadImpl]internalRole);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INTERNAL_ROLE_NOT_EXISTS.getCode();
                    [CtInvocationImpl]handleAddUserFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]message, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]message);
                }
            }
            [CtForEachImpl][CtCommentImpl]// Check existence of external roles.
            for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String externalRole : [CtVariableReadImpl]externalRoles) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]doCheckExistingRole([CtVariableReadImpl]externalRole)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_EXTERNAL_ROLE_NOT_EXISTS.getMessage(), [CtVariableReadImpl]externalRole);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_EXTERNAL_ROLE_NOT_EXISTS.getCode();
                    [CtInvocationImpl]handleAddUserFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]message, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]message);
                }
            }
            [CtForEachImpl][CtCommentImpl]// Check for the existence of the claims.
            for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> entry : [CtInvocationImpl][CtVariableReadImpl]claims.entrySet()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.ClaimMapping claimMapping;
                [CtTryImpl]try [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]claimMapping = [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.ClaimMapping) ([CtFieldReadImpl]claimManager.getClaimMapping([CtInvocationImpl][CtVariableReadImpl]entry.getKey())));
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNABLE_TO_FETCH_CLAIM_MAPPING.getMessage(), [CtLiteralImpl]"persisting user attributes.");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNABLE_TO_FETCH_CLAIM_MAPPING.getCode();
                    [CtInvocationImpl]handleAddUserFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]e);
                }
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claimMapping == [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_URI.getMessage(), [CtInvocationImpl][CtVariableReadImpl]entry.getKey());
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_URI.getCode();
                    [CtInvocationImpl]handleAddUserFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
                }
            }
            [CtTryImpl][CtCommentImpl]// Call the do add user method of the underlying user store to add the user.
            try [CtBlockImpl]{
                [CtIfImpl][CtCommentImpl]// If this is an user store that that supports the APIs with unique user ID, then we can call the new
                [CtCommentImpl]// APIs. However, we don't need the returned values as this API does not require those values.
                [CtCommentImpl]// Ex. Generated unique id.
                if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
                    [CtAssignmentImpl][CtCommentImpl]// Ignore the return value as we don't need it.
                    [CtVariableWriteImpl]user = [CtInvocationImpl]doAddUserWithID([CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtInvocationImpl][CtVariableReadImpl]externalRoles.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]), [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtVariableReadImpl]requirePasswordChange);
                } else [CtBlockImpl]{
                    [CtInvocationImpl][CtCommentImpl]// Call the old API since this user store does not support the unique user id related APIs.
                    doAddUser([CtVariableReadImpl]userName, [CtVariableReadImpl]credentialObj, [CtInvocationImpl][CtVariableReadImpl]externalRoles.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]), [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtVariableReadImpl]requirePasswordChange);
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleAddUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_ADDING_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_ADDING_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]internalRoles.size() > [CtLiteralImpl]0) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.updateHybridRoleListOfUser([CtVariableReadImpl]userName, [CtLiteralImpl]null, [CtInvocationImpl][CtVariableReadImpl]internalRoles.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]));
            }
            [CtTryImpl][CtCommentImpl]// #################### <Post-Listeners> #####################################################
            try [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object credentialArgument;
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credentialObj;
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credential;
                    }
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPostAddUser([CtVariableReadImpl]userName, [CtVariableReadImpl]credentialArgument, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtInvocationImpl]handleAddUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_ADD_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_ADD_USER.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                        [CtReturnImpl]return;
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleAddUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_ADD_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_ADD_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
            [CtCommentImpl]// #################### </Post-Listeners> #####################################################
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]credentialObj.clear();
        }
        [CtInvocationImpl][CtCommentImpl]// Clean the role cache since it contains old role information.
        clearUserRolesCache([CtVariableReadImpl]userName);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Checks whether this user store supports new user unique id feature.
     *
     * @return True if this user store supports unique user id feature.
     */
    public [CtTypeReferenceImpl]boolean isUniqueUserIdEnabled() [CtBlockImpl]{
        [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.lang.Boolean.parseBoolean([CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_USER_ID_ENABLED));
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * To handle the erroneous scenario in add user flow.
     *
     * @param errorCode
     * 		Relevant error code.
     * @param errorMessage
     * 		Relevant error message.
     * @param userName
     * 		Name of the user.
     * @param credential
     * 		Credential
     * @param roleList
     * 		List of roles.
     * @param claims
     * 		Claims
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		UserStore Exception that could be thrown during the execution.
     */
    private [CtTypeReferenceImpl]void handleAddUserFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] roleList, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onAddUserFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * To handle the erroneous scenario in add user flow.
     *
     * @param errorCode
     * 		Relevant error code.
     * @param errorMessage
     * 		Relevant error message.
     * @param userName
     * 		Name of the user.
     * @param credential
     * 		Credential
     * @param roleList
     * 		List of roles.
     * @param claims
     * 		Claims.
     * @param profileName
     * 		Name of the profile.
     * @throws UserStoreException
     * 		UserStore Exception that could be thrown during the execution.
     */
    private [CtTypeReferenceImpl]void handleAddUserFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] roleList, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onAddUserFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl]public final [CtTypeReferenceImpl]void updateUserListOfRole([CtParameterImpl]final [CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl]final [CtArrayTypeReferenceImpl]java.lang.String[] deletedUsers, [CtParameterImpl]final [CtArrayTypeReferenceImpl]java.lang.String[] newUsers) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]java.security.AccessController.doPrivileged([CtLambdaImpl](([CtTypeReferenceImpl]java.security.PrivilegedExceptionAction<[CtTypeReferenceImpl]java.lang.String>) (() -> [CtBlockImpl]{
                [CtInvocationImpl]updateUserListOfRoleInternal([CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUsers, [CtVariableReadImpl]newUsers);
                [CtReturnImpl]return [CtLiteralImpl]null;
            })));
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.security.PrivilegedActionException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]e.getException() instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException)) [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateUserListOfRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_UPDATING_ROLE_OF_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_UPDATING_ROLE_OF_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUsers, [CtVariableReadImpl]newUsers);
            }
            [CtThrowImpl]throw [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException) ([CtVariableReadImpl]e.getException()));
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method calls the relevant listeners that handle failure during update user list of a role.
     *
     * @param errorCode
     * 		Relevant error code.
     * @param errorMessage
     * 		Relevant error message.
     * @param roleName
     * 		Name of the role.
     * @param deletedUsers
     * 		Removed users from a particular role.
     * @param newUsers
     * 		Added users from a particular role.
     * @throws UserStoreException
     * 		Exception that will be thrown from the relevant listeners.
     */
    private [CtTypeReferenceImpl]void handleUpdateUserListOfRoleFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] deletedUsers, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] newUsers) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onUpdateUserListOfRoleFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUsers, [CtVariableReadImpl]newUsers, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method calls the relevant listeners that handle failure during update user list of a role.
     *
     * @param errorCode
     * 		Relevant error code.
     * @param errorMessage
     * 		Relevant error message.
     * @param roleName
     * 		Name of the role.
     * @param deletedUserIDs
     * 		Removed users from a particular role.
     * @param newUserIDs
     * 		Added users from a particular role.
     * @throws UserStoreException
     * 		Exception that will be thrown from the relevant listeners.
     */
    private [CtTypeReferenceImpl]void handleUpdateUserListOfRoleFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] deletedUserIDs, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] newUserIDs) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onUpdateUserListOfRoleFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUserIDs, [CtVariableReadImpl]newUserIDs, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    private final [CtTypeReferenceImpl]void updateUserListOfRoleInternal([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] deletedUsers, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] newUsers) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String primaryDomain = [CtInvocationImpl]getMyDomainName();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]primaryDomain != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtOperatorAssignmentImpl][CtVariableWriteImpl]primaryDomain += [CtFieldReadImpl]org.wso2.carbon.CarbonConstants.DOMAIN_SEPARATOR;
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]deletedUsers != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]deletedUsers.length > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.sort([CtVariableReadImpl]deletedUsers);
            [CtIfImpl][CtCommentImpl]// Updating the user list of a role belong to the primary domain.
            if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isPrimaryAdminRole([CtVariableReadImpl]roleName, [CtFieldReadImpl]realmConfig)) [CtBlockImpl]{
                [CtForImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]int i = [CtLiteralImpl]0; [CtBinaryOperatorImpl][CtVariableReadImpl]i < [CtFieldReadImpl][CtVariableReadImpl]deletedUsers.length; [CtUnaryOperatorImpl][CtVariableWriteImpl]i++) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtArrayReadImpl][CtVariableReadImpl]deletedUsers[[CtVariableReadImpl]i].equalsIgnoreCase([CtInvocationImpl][CtFieldReadImpl]realmConfig.getAdminUserName()) || [CtInvocationImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]primaryDomain + [CtArrayReadImpl][CtVariableReadImpl]deletedUsers[[CtVariableReadImpl]i]).equalsIgnoreCase([CtInvocationImpl][CtFieldReadImpl]realmConfig.getAdminUserName())) [CtBlockImpl]{
                        [CtInvocationImpl]handleUpdateUserListOfRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_REMOVE_ADMIN_ROLE_FROM_ADMIN.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_REMOVE_ADMIN_ROLE_FROM_ADMIN.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUsers, [CtVariableReadImpl]newUsers);
                        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_REMOVE_ADMIN_ROLE_FROM_ADMIN.toString());
                    }
                }
            }
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]roleName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isHybridRole()) [CtBlockImpl]{
            [CtIfImpl][CtCommentImpl]// Check whether someone is trying to update Everyone role.
            if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isEveryoneRole([CtVariableReadImpl]roleName, [CtFieldReadImpl]realmConfig)) [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateUserListOfRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUsers, [CtVariableReadImpl]newUsers);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.toString());
            }
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.INTERNAL_DOMAIN.equalsIgnoreCase([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName())) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.updateUserListOfHybridRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]deletedUsers, [CtVariableReadImpl]newUsers);
                [CtInvocationImpl]handleDoPostUpdateUserListOfRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUsers, [CtVariableReadImpl]newUsers, [CtLiteralImpl]true);
            } else [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.updateUserListOfHybridRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainAwareName(), [CtVariableReadImpl]deletedUsers, [CtVariableReadImpl]newUsers);
                [CtInvocationImpl]handleDoPostUpdateUserListOfRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUsers, [CtVariableReadImpl]newUsers, [CtLiteralImpl]true);
            }
            [CtInvocationImpl]clearUserRolesCacheByTenant([CtFieldReadImpl][CtThisAccessImpl]this.tenantId);
            [CtReturnImpl]return;
        }
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isSystemStore()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.updateUserListOfSystemRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]deletedUsers), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]newUsers));
            [CtInvocationImpl]handleDoPostUpdateUserListOfRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUsers, [CtVariableReadImpl]newUsers, [CtLiteralImpl]true);
            [CtReturnImpl]return;
        }
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().updateUserListOfRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]deletedUsers), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]newUsers));
            [CtReturnImpl]return;
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtBinaryOperatorImpl][CtVariableReadImpl]deletedUsers == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]deletedUsers = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]newUsers == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]newUsers = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPreUpdateUserListOfRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUsers, [CtVariableReadImpl]newUsers, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateUserListOfRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_UPDATE_USERS_OF_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_UPDATE_USERS_OF_ROLE.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUsers, [CtVariableReadImpl]newUsers);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateUserListOfRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_UPDATE_USERS_OF_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_UPDATE_USERS_OF_ROLE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUsers, [CtVariableReadImpl]newUsers);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtIfImpl][CtCommentImpl]// #################### </Listeners> #####################################################
        if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]deletedUsers.length > [CtLiteralImpl]0) || [CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]newUsers != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]newUsers.length > [CtLiteralImpl]0))) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl]isReadOnly()) && [CtFieldReadImpl]writeGroupsEnabled) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> newUserIds = [CtInvocationImpl]getUserIDsFromUserNames([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]newUsers));
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> deletedUserIds = [CtInvocationImpl]getUserIDsFromUserNames([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]deletedUsers));
                        [CtInvocationImpl]doUpdateUserListOfRoleWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtInvocationImpl][CtVariableReadImpl]deletedUserIds.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0])), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtInvocationImpl][CtVariableReadImpl]newUserIds.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0])));
                    } else [CtBlockImpl]{
                        [CtInvocationImpl]doUpdateUserListOfRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]deletedUsers), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]newUsers));
                    }
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateUserListOfRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_UPDATE_USERS_OF_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_UPDATE_USERS_OF_ROLE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUsers, [CtVariableReadImpl]newUsers);
                    [CtThrowImpl]throw [CtVariableReadImpl]ex;
                }
            } else [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateUserListOfRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUsers, [CtVariableReadImpl]newUsers);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
            }
        }
        [CtInvocationImpl][CtCommentImpl]// need to clear user roles cache upon roles update
        clearUserRolesCacheByTenant([CtFieldReadImpl][CtThisAccessImpl]this.tenantId);
        [CtInvocationImpl][CtCommentImpl]// Call relevant listeners after updating user list of role.
        handleDoPostUpdateUserListOfRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUsers, [CtVariableReadImpl]newUsers, [CtLiteralImpl]false);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling the listeners after updating user list of role.
     *
     * @param roleName
     * 		Name of the role.
     * @param deletedUsers
     * 		Removed users
     * @param newUsers
     * 		Added users.
     * @param isAuditLogOnly
     * 		Indicate whether to call only the audit log listener.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listeners.
     */
    private [CtTypeReferenceImpl]void handleDoPostUpdateUserListOfRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] deletedUsers, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] newUsers, [CtParameterImpl][CtTypeReferenceImpl]boolean isAuditLogOnly) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isAuditLogOnly && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]listener.getClass().getName().endsWith([CtTypeAccessImpl]UserCoreErrorConstants.AUDIT_LOGGER_CLASS_NAME))) [CtBlockImpl]{
                    [CtContinueImpl]continue;
                }
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPostUpdateUserListOfRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUsers, [CtVariableReadImpl]newUsers, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateUserListOfRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_UPDATE_USERS_OF_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_UPDATE_USERS_OF_ROLE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUsers, [CtVariableReadImpl]newUsers);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling the listeners after updating user list of role.
     *
     * @param roleName
     * 		Name of the role.
     * @param deletedUserIDs
     * 		Removed users.
     * @param newUserIDs
     * 		Added users.
     * @param isAuditLogOnly
     * 		Indicate whether to call only the audit log listener.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listeners.
     */
    private [CtTypeReferenceImpl]void handleDoPostUpdateUserListOfRoleWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] deletedUserIDs, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] newUserIDs, [CtParameterImpl][CtTypeReferenceImpl]boolean isAuditLogOnly) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isAuditLogOnly && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]listener.getClass().getName().endsWith([CtTypeAccessImpl]UserCoreErrorConstants.AUDIT_LOGGER_CLASS_NAME))) [CtBlockImpl]{
                    [CtContinueImpl]continue;
                }
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPostUpdateUserListOfRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUserIDs, [CtVariableReadImpl]newUserIDs, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateUserListOfRoleFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_UPDATE_USERS_OF_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_UPDATE_USERS_OF_ROLE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUserIDs, [CtVariableReadImpl]newUserIDs);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
    }

    [CtMethodImpl]public final [CtTypeReferenceImpl]void updateRoleListOfUser([CtParameterImpl]final [CtTypeReferenceImpl]java.lang.String username, [CtParameterImpl]final [CtArrayTypeReferenceImpl]java.lang.String[] deletedRoles, [CtParameterImpl]final [CtArrayTypeReferenceImpl]java.lang.String[] newRoles) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]java.security.AccessController.doPrivileged([CtLambdaImpl](([CtTypeReferenceImpl]java.security.PrivilegedExceptionAction<[CtTypeReferenceImpl]java.lang.String>) (() -> [CtBlockImpl]{
                [CtInvocationImpl]updateRoleListOfUserInternal([CtVariableReadImpl]username, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                [CtReturnImpl]return [CtLiteralImpl]null;
            })));
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.security.PrivilegedActionException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]e.getException() instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException)) [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateRoleListOfUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_UPDATE_USERS_OF_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_UPDATE_USERS_OF_ROLE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]username, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
            }
            [CtThrowImpl]throw [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException) ([CtVariableReadImpl]e.getException()));
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling the methods of listeners after a failure while trying to update role
     * list of users.
     *
     * @param errorCode
     * 		Error code.
     * @param errorMessage
     * 		Error message.
     * @param userName
     * 		User Name
     * @param deletedRoles
     * 		Removed roles
     * @param newRoles
     * 		Assigned roles
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listeners.
     */
    private [CtTypeReferenceImpl]void handleUpdateRoleListOfUserFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] deletedRoles, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] newRoles) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onUpdateRoleListOfUserFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling the methods of listeners after a failure while trying to update role
     * list of users.
     *
     * @param errorCode
     * 		Error code.
     * @param errorMessage
     * 		Error message.
     * @param userID
     * 		User ID.
     * @param deletedRoles
     * 		Removed roles.
     * @param newRoles
     * 		Assigned roles.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listeners.
     */
    private [CtTypeReferenceImpl]void handleUpdateRoleListOfUserFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] deletedRoles, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] newRoles) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserManagementErrorListener) (listener)).onUpdateRoleListOfUserFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    private final [CtTypeReferenceImpl]void updateRoleListOfUserInternal([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] deletedRoles, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] newRoles) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String primaryDomain = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]primaryDomain != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtOperatorAssignmentImpl][CtVariableWriteImpl]primaryDomain += [CtFieldReadImpl]org.wso2.carbon.CarbonConstants.DOMAIN_SEPARATOR;
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]deletedRoles != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]deletedRoles.length > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.sort([CtVariableReadImpl]deletedRoles);
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isPrimaryAdminUser([CtVariableReadImpl]userName, [CtFieldReadImpl]realmConfig)) [CtBlockImpl]{
                [CtForImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]int i = [CtLiteralImpl]0; [CtBinaryOperatorImpl][CtVariableReadImpl]i < [CtFieldReadImpl][CtVariableReadImpl]deletedRoles.length; [CtUnaryOperatorImpl][CtVariableWriteImpl]i++) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtArrayReadImpl][CtVariableReadImpl]deletedRoles[[CtVariableReadImpl]i].equalsIgnoreCase([CtInvocationImpl][CtFieldReadImpl]realmConfig.getAdminRoleName()) || [CtInvocationImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]primaryDomain + [CtArrayReadImpl][CtVariableReadImpl]deletedRoles[[CtVariableReadImpl]i]).equalsIgnoreCase([CtInvocationImpl][CtFieldReadImpl]realmConfig.getAdminRoleName())) [CtBlockImpl]{
                        [CtInvocationImpl]handleUpdateRoleListOfUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_REMOVE_ADMIN_ROLE_FROM_ADMIN.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_REMOVE_ADMIN_ROLE_FROM_ADMIN.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_REMOVE_ADMIN_ROLE_FROM_ADMIN.toString());
                    }
                }
            }
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().updateRoleListOfUser([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]deletedRoles), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]newRoles));
            [CtReturnImpl]return;
        }
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isSystemStore()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.updateSystemRoleListOfUser([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]deletedRoles), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]newRoles));
            [CtReturnImpl]return;
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtBinaryOperatorImpl][CtVariableReadImpl]deletedRoles == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]deletedRoles = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]newRoles == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]newRoles = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        }
        [CtIfImpl][CtCommentImpl]// This happens only once during first startup - adding administrator user/role.
        if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]userName.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR) > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userName = [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName();
            [CtAssignmentImpl][CtVariableWriteImpl]deletedRoles = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]deletedRoles);
            [CtAssignmentImpl][CtVariableWriteImpl]newRoles = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]newRoles);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> internalRoleDel = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> internalRoleNew = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> roleDel = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> roleNew = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]deletedRoles != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]deletedRoles.length > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteRole : [CtVariableReadImpl]deletedRoles) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isEveryoneRole([CtVariableReadImpl]deleteRole, [CtFieldReadImpl]realmConfig)) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateRoleListOfUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.toString());
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domain = [CtLiteralImpl]null;
                [CtLocalVariableImpl][CtTypeReferenceImpl]int index1 = [CtInvocationImpl][CtVariableReadImpl]deleteRole.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index1 > [CtLiteralImpl]0) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]domain = [CtInvocationImpl][CtVariableReadImpl]deleteRole.substring([CtLiteralImpl]0, [CtVariableReadImpl]index1);
                }
                [CtInvocationImpl]processDeletedRoles([CtVariableReadImpl]internalRoleDel, [CtVariableReadImpl]roleDel, [CtVariableReadImpl]deleteRole, [CtVariableReadImpl]domain);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]deletedRoles = [CtInvocationImpl][CtVariableReadImpl]roleDel.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtInvocationImpl][CtVariableReadImpl]roleDel.size()]);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]newRoles != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]newRoles.length > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String newRole : [CtVariableReadImpl]newRoles) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isEveryoneRole([CtVariableReadImpl]newRole, [CtFieldReadImpl]realmConfig)) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateRoleListOfUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.toString());
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domain = [CtLiteralImpl]null;
                [CtLocalVariableImpl][CtTypeReferenceImpl]int index2 = [CtInvocationImpl][CtVariableReadImpl]newRole.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index2 > [CtLiteralImpl]0) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]domain = [CtInvocationImpl][CtVariableReadImpl]newRole.substring([CtLiteralImpl]0, [CtVariableReadImpl]index2);
                }
                [CtInvocationImpl]processNewRoles([CtVariableReadImpl]internalRoleNew, [CtVariableReadImpl]roleNew, [CtVariableReadImpl]newRole, [CtVariableReadImpl]domain);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]newRoles = [CtInvocationImpl][CtVariableReadImpl]roleNew.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtInvocationImpl][CtVariableReadImpl]roleNew.size()]);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]internalRoleDel.size() > [CtLiteralImpl]0) || [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]internalRoleNew.size() > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.updateHybridRoleListOfUser([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtInvocationImpl][CtVariableReadImpl]internalRoleDel.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtInvocationImpl][CtVariableReadImpl]internalRoleDel.size()]), [CtInvocationImpl][CtVariableReadImpl]internalRoleNew.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtInvocationImpl][CtVariableReadImpl]internalRoleNew.size()]));
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPreUpdateRoleListOfUser([CtVariableReadImpl]userName, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateRoleListOfUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_ROLE_OF_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_ROLE_OF_USER.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateRoleListOfUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_ROLE_OF_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_ROLE_OF_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtIfImpl][CtCommentImpl]// #################### </Listeners> #####################################################
        if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]deletedRoles != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]deletedRoles.length > [CtLiteralImpl]0)) || [CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]newRoles != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]newRoles.length > [CtLiteralImpl]0))) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl]isReadOnly()) && [CtFieldReadImpl]writeGroupsEnabled) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtLocalVariableImpl][CtCommentImpl]// Property to check whether this user store supports new APIs with unique user id.
                    [CtTypeReferenceImpl]boolean isUniqueUserIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
                    [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName);
                        [CtInvocationImpl]doUpdateRoleListOfUserWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                    } else [CtBlockImpl]{
                        [CtInvocationImpl]doUpdateRoleListOfUser([CtVariableReadImpl]userName, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                    }
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateRoleListOfUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_UPDATING_ROLE_OF_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_UPDATING_ROLE_OF_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                    [CtThrowImpl]throw [CtVariableReadImpl]ex;
                }
            } else [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateRoleListOfUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
            }
        }
        [CtInvocationImpl]clearUserRolesCache([CtVariableReadImpl]userName);
        [CtTryImpl][CtCommentImpl]// Call the relevant listeners after updating the role list of user.
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPostUpdateRoleListOfUser([CtVariableReadImpl]userName, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateRoleListOfUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_ROLE_OF_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_ROLE_OF_USER.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateRoleListOfUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_ROLE_OF_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_ROLE_OF_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling the relevant methods when there is a failure while trying to update the
     * role name.
     *
     * @param errorCode
     * 		Error code.
     * @param errorMessage
     * 		Error message
     * @param roleName
     * 		Role Name
     * @param newRoleName
     * 		New Role Name
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant methods in listener.
     */
    private [CtTypeReferenceImpl]void handleUpdateRoleNameFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String newRoleName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onUpdateRoleNameFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling post update role name methods in listeners.
     *
     * @param roleName
     * 		Name of the role.
     * @param newRoleName
     * 		New role name
     * @param isAuditLogOnly
     * 		to indicate whether to call only the audit log listener.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listeners.
     */
    private [CtTypeReferenceImpl]void handlePostUpdateRoleName([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String newRoleName, [CtParameterImpl][CtTypeReferenceImpl]boolean isAuditLogOnly) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean internalRole = [CtInvocationImpl]isAnInternalRole([CtVariableReadImpl]roleName);
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isAuditLogOnly && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]listener.getClass().getName().endsWith([CtTypeAccessImpl]UserCoreErrorConstants.AUDIT_LOGGER_CLASS_NAME))) [CtBlockImpl]{
                    [CtContinueImpl]continue;
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]boolean success = [CtLiteralImpl]false;
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]internalRole && [CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPostUpdateInternalRoleName([CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName, [CtThisAccessImpl]this);
                } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]internalRole && [CtUnaryOperatorImpl](![CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener))) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtLiteralImpl]true;
                } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]internalRole) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtInvocationImpl][CtVariableReadImpl]listener.doPostUpdateRoleName([CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName, [CtThisAccessImpl]this);
                }
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]success) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateRoleNameFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_ROLE_NAME.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_ROLE_NAME.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateRoleNameFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_ROLE_NAME.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_ROLE_NAME.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling pre update role name methods in listeners.
     *
     * @param roleName
     * 		Name of the internal role.
     * @param newRoleName
     * 		New internal role name
     * @param isAuditLogOnly
     * 		to indicate whether to call only the audit log listener.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listeners.
     */
    private [CtTypeReferenceImpl]boolean handlePreUpdateRoleName([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String newRoleName, [CtParameterImpl][CtTypeReferenceImpl]boolean isAuditLogOnly) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean internalRole = [CtInvocationImpl]isAnInternalRole([CtVariableReadImpl]roleName);
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isAuditLogOnly && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]listener.getClass().getName().endsWith([CtTypeAccessImpl]UserCoreErrorConstants.AUDIT_LOGGER_CLASS_NAME))) [CtBlockImpl]{
                    [CtContinueImpl]continue;
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]boolean success = [CtLiteralImpl]false;
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]internalRole && [CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPreUpdateInternalRoleName([CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName, [CtThisAccessImpl]this);
                }
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]internalRole && [CtUnaryOperatorImpl](![CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener))) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtLiteralImpl]true;
                } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]internalRole) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtInvocationImpl][CtVariableReadImpl]listener.doPreUpdateRoleName([CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName, [CtThisAccessImpl]this);
                }
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]success) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateRoleNameFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_ROLE_NAME.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_ROLE_NAME.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName);
                    [CtReturnImpl]return [CtLiteralImpl]false;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateRoleNameFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_ROLE_NAME.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_ROLE_NAME.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtReturnImpl]return [CtLiteralImpl]true;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtTypeReferenceImpl]void updateRoleName([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String newRoleName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class };
            [CtInvocationImpl]callSecure([CtLiteralImpl]"updateRoleName", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return;
        }
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isPrimaryAdminRole([CtVariableReadImpl]newRoleName, [CtFieldReadImpl]realmConfig)) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateRoleNameFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_ADMIN_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_ADMIN_ROLE.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_ADMIN_ROLE.toString());
        }
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isEveryoneRole([CtVariableReadImpl]newRoleName, [CtFieldReadImpl]realmConfig)) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateRoleNameFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.toString());
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreOfRoles([CtVariableReadImpl]roleName);
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStoreNew = [CtInvocationImpl]getUserStore([CtVariableReadImpl]newRoleName);
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.canRoleBeRenamed([CtVariableReadImpl]userStore, [CtVariableReadImpl]userStoreNew, [CtFieldReadImpl]realmConfig)) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateRoleNameFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_RENAME_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_RENAME_ROLE.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_RENAME_ROLE.toString());
        }
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().updateRoleName([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtInvocationImpl][CtVariableReadImpl]userStoreNew.getDomainFreeName());
            [CtReturnImpl]return;
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtInvocationImpl][CtVariableReadImpl]userStore.isHybridRole()) [CtBlockImpl]{
            [CtIfImpl][CtCommentImpl]// Invoke pre listeners.
            if ([CtUnaryOperatorImpl]![CtInvocationImpl]handlePreUpdateRoleName([CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName, [CtLiteralImpl]false)) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.INTERNAL_DOMAIN.equalsIgnoreCase([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName())) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.updateHybridRoleName([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtInvocationImpl][CtVariableReadImpl]userStoreNew.getDomainFreeName());
            } else [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.updateHybridRoleName([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainAwareName(), [CtInvocationImpl][CtVariableReadImpl]userStoreNew.getDomainAwareName());
            }
            [CtInvocationImpl][CtCommentImpl]// This is a special case. We need to pass roles with domains.
            [CtInvocationImpl][CtFieldReadImpl]userRealm.getAuthorizationManager().resetPermissionOnUpdateRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainAwareName(), [CtInvocationImpl][CtVariableReadImpl]userStoreNew.getDomainAwareName());
            [CtInvocationImpl][CtCommentImpl]// To make sure to maintain the back-ward compatibility, only audit log listener will be called.
            handlePostUpdateRoleName([CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName, [CtLiteralImpl]false);
            [CtInvocationImpl][CtCommentImpl]// Need to update user role cache upon update of role names
            clearUserRolesCacheByTenant([CtFieldReadImpl][CtThisAccessImpl]this.tenantId);
            [CtReturnImpl]return;
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isRoleNameValid([CtVariableReadImpl]roleName)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String regEx = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_ROLE_NAME_JAVA_REG_EX);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_ROLE_NAME.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]regEx);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_ROLE_NAME.getCode();
            [CtInvocationImpl]handleUpdateRoleNameFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtIfImpl]if ([CtInvocationImpl]isExistingRole([CtVariableReadImpl]newRoleName)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ROLE_ALREADY_EXISTS.getMessage(), [CtVariableReadImpl]newRoleName);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ROLE_ALREADY_EXISTS.getCode();
            [CtInvocationImpl]handleUpdateRoleNameFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtIfImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        if ([CtUnaryOperatorImpl]![CtInvocationImpl]handlePreUpdateRoleName([CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName, [CtLiteralImpl]false)) [CtBlockImpl]{
            [CtReturnImpl]return;
        }
        [CtIfImpl][CtCommentImpl]// #################### </Listeners> #####################################################
        if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl]isReadOnly()) && [CtFieldReadImpl]writeGroupsEnabled) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtInvocationImpl]doUpdateRoleName([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtInvocationImpl][CtVariableReadImpl]userStoreNew.getDomainFreeName());
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateRoleNameFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_UPDATING_ROLE_NAME.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_UPDATING_ROLE_NAME.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName);
            }
        } else [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateRoleNameFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
        }
        [CtInvocationImpl][CtCommentImpl]// This is a special case. We need to pass domain aware name.
        [CtInvocationImpl][CtFieldReadImpl]userRealm.getAuthorizationManager().resetPermissionOnUpdateRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainAwareName(), [CtInvocationImpl][CtVariableReadImpl]userStoreNew.getDomainAwareName());
        [CtInvocationImpl][CtCommentImpl]// need to update user role cache upon update of role names
        clearUserRolesCacheByTenant([CtFieldReadImpl]tenantId);
        [CtInvocationImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        handlePostUpdateRoleName([CtVariableReadImpl]roleName, [CtVariableReadImpl]newRoleName, [CtLiteralImpl]false);
        [CtCommentImpl]// #################### </Listeners> #####################################################
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]boolean isExistingRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtTypeReferenceImpl]boolean shared) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtVariableReadImpl]shared) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl]isExistingShareRole([CtVariableReadImpl]roleName);
        } else [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl]isExistingRole([CtVariableReadImpl]roleName);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public [CtTypeReferenceImpl]boolean isExistingRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"isExistingRole", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]roleName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.lang.Boolean) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreOfRoles([CtVariableReadImpl]roleName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().isExistingRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtInvocationImpl][CtVariableReadImpl]userStore.isSystemStore()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.isExistingRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
        }
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isHybridRole()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean exist;
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.INTERNAL_DOMAIN.equalsIgnoreCase([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName())) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]exist = [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.isExistingRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainAwareName());
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]exist = [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.isExistingRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
            }
            [CtReturnImpl]return [CtVariableReadImpl]exist;
        }
        [CtAssignmentImpl][CtCommentImpl]// This happens only once during first startup - adding administrator user/role.
        [CtVariableWriteImpl]roleName = [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName();
        [CtIfImpl][CtCommentImpl]// you can not check existence of shared role using this method.
        if ([CtBinaryOperatorImpl][CtInvocationImpl]isSharedGroupEnabled() && [CtInvocationImpl][CtVariableReadImpl]roleName.contains([CtTypeAccessImpl]UserCoreConstants.TENANT_DOMAIN_COMBINER)) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]false;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isExisting = [CtInvocationImpl]doCheckExistingRole([CtVariableReadImpl]roleName);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtVariableReadImpl]isExisting) && [CtBinaryOperatorImpl]([CtInvocationImpl]isReadOnly() || [CtUnaryOperatorImpl](![CtFieldReadImpl]readGroupsEnabled))) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isExisting = [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.isExistingRole([CtVariableReadImpl]roleName);
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isExisting) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.isExistingRole([CtVariableReadImpl]roleName)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]isExisting = [CtLiteralImpl]true;
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]isExisting;
    }

    [CtMethodImpl][CtCommentImpl]// ////////////////////////////////// Shared role APIs start //////////////////////////////////////////
    [CtJavaDocImpl]/**
     * TODO move to API
     *
     * @param roleName
     * @return  * @throws UserStoreException
     */
    public [CtTypeReferenceImpl]boolean isExistingShareRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"isExistingShareRole", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]roleName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.lang.Boolean) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager manager = [CtInvocationImpl]getUserStoreWithSharedRoles();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]manager == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Share Groups are not supported by this realm");
        }
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (manager)).doCheckExistingRole([CtVariableReadImpl]roleName);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * TODO  move to API
     *
     * @param roleName
     * @param deletedUsers
     * @param newUsers
     * @throws UserStoreException
     */
    public [CtTypeReferenceImpl]void updateUsersOfSharedRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] deletedUsers, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] newUsers) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager manager = [CtInvocationImpl]getUserStoreWithSharedRoles();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]manager == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Share Groups are not supported by this realm");
        }
        [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled([CtVariableReadImpl]manager)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (manager)).doUpdateUserListOfRoleWithID([CtVariableReadImpl]roleName, [CtInvocationImpl][CtInvocationImpl]getUserIDsFromUserNames([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]deletedUsers)).toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]), [CtInvocationImpl][CtInvocationImpl]getUserIDsFromUserNames([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]newUsers)).toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]));
        } else [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (manager)).doUpdateUserListOfRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUsers, [CtVariableReadImpl]newUsers);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * TODO move to API
     *
     * @return  * @throws UserStoreException
     */
    public [CtArrayTypeReferenceImpl]java.lang.String[] getSharedRolesOfUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String tenantDomain, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]userName);
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager manager = [CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager();
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (manager)).isSharedGroupEnabled()) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Share Groups are not supported by user store");
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] sharedRoles;
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (manager)).isUniqueUserIdEnabled()) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sharedRoles = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (manager)).doGetSharedRoleListOfUserWithID([CtInvocationImpl]getUserIDFromUserName([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName()), [CtVariableReadImpl]tenantDomain, [CtVariableReadImpl]filter);
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sharedRoles = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (manager)).doGetSharedRoleListOfUser([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]tenantDomain, [CtVariableReadImpl]filter);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]sharedRoles);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * TODO move to API
     *
     * @return  * @throws UserStoreException
     */
    public [CtArrayTypeReferenceImpl]java.lang.String[] getUsersOfSharedRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager manager = [CtInvocationImpl]getUserStoreWithSharedRoles();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]manager == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Share Groups are not supported by this realm");
        }
        [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled([CtVariableReadImpl]manager)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> users = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (manager)).doGetUserListOfRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]filter);
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]users.stream().map([CtExecutableReferenceExpressionImpl][CtFieldReadImpl]User::getDomainQualifiedUsername).toArray([CtExecutableReferenceExpressionImpl][CtTypeAccessImpl][CtArrayTypeReferenceImpl]java.lang.String[]::new);
        } else [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] users = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (manager)).doGetUserListOfRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]filter);
            [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]users);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * TODO move to API
     *
     * @return  * @throws UserStoreException
     */
    public [CtArrayTypeReferenceImpl]java.lang.String[] getSharedRoleNames([CtParameterImpl][CtTypeReferenceImpl]java.lang.String tenantDomain, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int maxItemLimit) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager manager = [CtInvocationImpl]getUserStoreWithSharedRoles();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]manager == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Share Groups are not supported by this realm");
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] sharedRoles = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sharedRoles = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (manager)).doGetSharedRoleNames([CtVariableReadImpl]tenantDomain, [CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Error while retrieving shared roles", [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]sharedRoles);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * TODO move to API
     *
     * @return  * @throws UserStoreException
     */
    public [CtArrayTypeReferenceImpl]java.lang.String[] getSharedRoleNames([CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int maxItemLimit) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager manager = [CtInvocationImpl]getUserStoreWithSharedRoles();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]manager == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Share Groups are not supported by this realm");
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] sharedRoles = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]sharedRoles = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (manager)).doGetSharedRoleNames([CtLiteralImpl]null, [CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Error while retrieving shared roles", [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]sharedRoles);
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void addInternalRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList, [CtParameterImpl]org.wso2.carbon.user.core.common.api[] permission) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtInvocationImpl]doAddInternalRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permission);
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager getUserStoreWithSharedRoles() throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{  };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getUserStoreWithSharedRoles", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{  }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager sharedRoleManager = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtInvocationImpl]isSharedGroupEnabled()) [CtBlockImpl]{
            [CtReturnImpl]return [CtThisAccessImpl]this;
        }
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager> entry : [CtInvocationImpl][CtFieldReadImpl]userStoreManagerHolder.entrySet()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager manager = [CtInvocationImpl][CtVariableReadImpl]entry.getValue();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]manager != [CtLiteralImpl]null) && [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (manager)).isSharedGroupEnabled()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]sharedRoleManager != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtLiteralImpl]"There can not be more than one user store that support" + [CtLiteralImpl]"shared groups");
                }
                [CtAssignmentImpl][CtVariableWriteImpl]sharedRoleManager = [CtVariableReadImpl]manager;
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]sharedRoleManager;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * TODO move to API
     *
     * @param userName
     * @param roleName
     * @return  * @throws UserStoreException
     */
    public [CtTypeReferenceImpl]boolean isUserInRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"isUserInRole", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userName, [CtVariableReadImpl]roleName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.lang.Boolean) (object));
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]roleName == [CtLiteralImpl]null) || [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]roleName.trim().length() == [CtLiteralImpl]0)) || [CtBinaryOperatorImpl]([CtVariableReadImpl]userName == [CtLiteralImpl]null)) || [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userName.trim().length() == [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]false;
        }
        [CtIfImpl][CtCommentImpl]// anonymous user is always assigned to  anonymous role
        if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]CarbonConstants.REGISTRY_ANONNYMOUS_ROLE_NAME.equalsIgnoreCase([CtVariableReadImpl]roleName) && [CtInvocationImpl][CtTypeAccessImpl]CarbonConstants.REGISTRY_ANONNYMOUS_USERNAME.equalsIgnoreCase([CtVariableReadImpl]userName)) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]true;
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]CarbonConstants.REGISTRY_ANONNYMOUS_USERNAME.equalsIgnoreCase([CtVariableReadImpl]userName)) && [CtInvocationImpl][CtInvocationImpl][CtFieldReadImpl]realmConfig.getEveryOneRoleName().equalsIgnoreCase([CtVariableReadImpl]roleName)) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.isExistingSystemUser([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]userName)))) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]true;
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] roles = [CtLiteralImpl]null;
        [CtAssignmentImpl][CtVariableWriteImpl]roles = [CtInvocationImpl]getRoleListOfUserFromCache([CtFieldReadImpl]tenantId, [CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]roles != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]roles.length > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isContain([CtVariableReadImpl]roleName, [CtVariableReadImpl]roles)) [CtBlockImpl]{
                [CtReturnImpl]return [CtLiteralImpl]true;
            }
        }
        [CtLocalVariableImpl][CtCommentImpl]// TODO create new cache for this method
        [CtTypeReferenceImpl]java.lang.String modifiedUserName = [CtBinaryOperatorImpl][CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.IS_USER_IN_ROLE_CACHE_IDENTIFIER + [CtVariableReadImpl]userName;
        [CtAssignmentImpl][CtVariableWriteImpl]roles = [CtInvocationImpl]getRoleListOfUserFromCache([CtFieldReadImpl]tenantId, [CtVariableReadImpl]modifiedUserName);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]roles != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]roles.length > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isContain([CtVariableReadImpl]roleName, [CtVariableReadImpl]roles)) [CtBlockImpl]{
                [CtReturnImpl]return [CtLiteralImpl]true;
            }
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.INTERNAL_DOMAIN.equalsIgnoreCase([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.extractDomainFromName([CtVariableReadImpl]roleName)) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.APPLICATION_DOMAIN.equalsIgnoreCase([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.extractDomainFromName([CtVariableReadImpl]roleName))) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.WORKFLOW_DOMAIN.equalsIgnoreCase([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.extractDomainFromName([CtVariableReadImpl]roleName))) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] internalRoles = [CtInvocationImpl]doGetInternalRoleListOfUser([CtVariableReadImpl]userName, [CtVariableReadImpl]roleName);
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isContain([CtVariableReadImpl]roleName, [CtVariableReadImpl]internalRoles)) [CtBlockImpl]{
                [CtInvocationImpl]addToIsUserHasRole([CtVariableReadImpl]modifiedUserName, [CtVariableReadImpl]roleName, [CtVariableReadImpl]roles);
                [CtReturnImpl]return [CtLiteralImpl]true;
            }
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive() && [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager() instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager)) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).isUserInRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]roleName);
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtInvocationImpl][CtVariableReadImpl]userStore.isSystemStore()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.isUserInRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]roleName));
        }
        [CtIfImpl][CtCommentImpl]// admin user is always assigned to admin role if it is in primary user store
        if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtFieldReadImpl]realmConfig.isPrimary() && [CtInvocationImpl][CtVariableReadImpl]roleName.equalsIgnoreCase([CtInvocationImpl][CtFieldReadImpl]realmConfig.getAdminRoleName())) && [CtInvocationImpl][CtVariableReadImpl]userName.equalsIgnoreCase([CtInvocationImpl][CtFieldReadImpl]realmConfig.getAdminUserName())) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]true;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roleDomainName = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.extractDomainFromName([CtVariableReadImpl]roleName);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roleDomainNameForForest = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_GROUP_SEARCH_DOMAINS);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]roleDomainNameForForest != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]roleDomainNameForForest.trim().length() > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] values = [CtInvocationImpl][CtVariableReadImpl]roleDomainNameForForest.split([CtLiteralImpl]"#");
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String value : [CtVariableReadImpl]values) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]value != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]value.trim().equalsIgnoreCase([CtVariableReadImpl]roleDomainName))) [CtBlockImpl]{
                    [CtReturnImpl]return [CtLiteralImpl]false;
                }
            }
        } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName().equalsIgnoreCase([CtVariableReadImpl]roleDomainName)) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]false;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean success = [CtLiteralImpl]false;
        [CtIfImpl]if ([CtFieldReadImpl]readGroupsEnabled) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]success = [CtInvocationImpl]doCheckIsUserInRoleWithID([CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]roleName));
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]success = [CtInvocationImpl]doCheckIsUserInRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]roleName));
            }
        }
        [CtIfImpl][CtCommentImpl]// add to cache
        if ([CtVariableReadImpl]success) [CtBlockImpl]{
            [CtInvocationImpl]addToIsUserHasRole([CtVariableReadImpl]modifiedUserName, [CtVariableReadImpl]roleName, [CtVariableReadImpl]roles);
        }
        [CtReturnImpl]return [CtVariableReadImpl]success;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param userName
     * @param roleName
     * @return  * @throws UserStoreException
     */
    public abstract [CtTypeReferenceImpl]boolean doCheckIsUserInRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param userID
     * 		user ID.
     * @param roleName
     * 		role name.
     * @return true if user uis in the given role.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    public [CtTypeReferenceImpl]boolean doCheckIsUserInRoleWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doCheckIsUserInRoleWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doCheckIsUserInRoleWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Helper method
     *
     * @param userName
     * @param roleName
     * @param currentRoles
     */
    private [CtTypeReferenceImpl]void addToIsUserHasRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] currentRoles) [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> roles;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]currentRoles != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]roles = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]currentRoles));
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]roles = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        }
        [CtInvocationImpl][CtVariableReadImpl]roles.add([CtVariableReadImpl]roleName);
        [CtInvocationImpl]addToUserRolesCache([CtFieldReadImpl]tenantId, [CtVariableReadImpl]userName, [CtInvocationImpl][CtVariableReadImpl]roles.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]));
    }

    [CtMethodImpl][CtCommentImpl]// ////////////////////////////////// Shared role APIs finish //////////////////////////////////////////
    [CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public [CtTypeReferenceImpl]boolean isExistingUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class[] argTypes = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"isExistingUser", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.lang.Boolean) (object));
        }
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isRegistrySystemUser([CtVariableReadImpl]userName)) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]true;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().isExistingUser([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtInvocationImpl][CtVariableReadImpl]userStore.isSystemStore()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.isExistingSystemUser([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl]doCheckExistingUser([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
        } else [CtBlockImpl]{
            [CtReturnImpl]return [CtBinaryOperatorImpl][CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName) != [CtLiteralImpl]null;
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtArrayTypeReferenceImpl]java.lang.String[] listUsers([CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int maxItemLimit) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class[] argTypes = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]int.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"listUsers", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtArrayTypeReferenceImpl]java.lang.String[]) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]int index;
        [CtAssignmentImpl][CtVariableWriteImpl]index = [CtInvocationImpl][CtVariableReadImpl]filter.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList;
        [CtIfImpl][CtCommentImpl]// Check whether we have a secondary UserStoreManager setup.
        if ([CtBinaryOperatorImpl][CtVariableReadImpl]index > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtLocalVariableImpl][CtCommentImpl]// Using the short-circuit. User name comes with the domain name.
            [CtTypeReferenceImpl]java.lang.String domain = [CtInvocationImpl][CtVariableReadImpl]filter.substring([CtLiteralImpl]0, [CtVariableReadImpl]index);
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secManager = [CtInvocationImpl]getSecondaryUserStoreManager([CtVariableReadImpl]domain);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secManager != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtCommentImpl]// We have a secondary UserStoreManager registered for this domain.
                [CtVariableWriteImpl]filter = [CtInvocationImpl][CtVariableReadImpl]filter.substring([CtBinaryOperatorImpl][CtVariableReadImpl]index + [CtLiteralImpl]1);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secManager)).isUniqueUserIdEnabled()) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secManager)).doListUsers([CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit);
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secManager)).doListUsersWithID([CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit).stream().map([CtExecutableReferenceExpressionImpl][CtFieldReadImpl]User::getDomainQualifiedUsername).toArray([CtExecutableReferenceExpressionImpl][CtTypeAccessImpl][CtArrayTypeReferenceImpl]java.lang.String[]::new);
                    }
                    [CtInvocationImpl]handlePostGetUserList([CtLiteralImpl]null, [CtLiteralImpl]null, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]userList)), [CtLiteralImpl]true);
                    [CtReturnImpl]return [CtVariableReadImpl]userList;
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtVariableReadImpl]secManager.listUsers([CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit);
                    [CtInvocationImpl]handlePostGetUserList([CtLiteralImpl]null, [CtLiteralImpl]null, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]userList)), [CtLiteralImpl]true);
                    [CtReturnImpl]return [CtVariableReadImpl]userList;
                }
            }
        } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index == [CtLiteralImpl]0) [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl]doListUsers([CtInvocationImpl][CtVariableReadImpl]filter.substring([CtLiteralImpl]1), [CtVariableReadImpl]maxItemLimit);
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtInvocationImpl]doListUsersWithID([CtInvocationImpl][CtVariableReadImpl]filter.substring([CtLiteralImpl]1), [CtVariableReadImpl]maxItemLimit).stream().map([CtExecutableReferenceExpressionImpl][CtFieldReadImpl]User::getDomainQualifiedUsername).toArray([CtExecutableReferenceExpressionImpl][CtTypeAccessImpl][CtArrayTypeReferenceImpl]java.lang.String[]::new);
            }
            [CtInvocationImpl]handlePostGetUserList([CtLiteralImpl]null, [CtLiteralImpl]null, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]userList)), [CtLiteralImpl]true);
            [CtReturnImpl]return [CtVariableReadImpl]userList;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl]doListUsers([CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit);
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtInvocationImpl]doListUsersWithID([CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit).stream().map([CtExecutableReferenceExpressionImpl][CtFieldReadImpl]User::getDomainQualifiedUsername).toArray([CtExecutableReferenceExpressionImpl][CtTypeAccessImpl][CtArrayTypeReferenceImpl]java.lang.String[]::new);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtLiteralImpl]null, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String primaryDomain = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtThisAccessImpl]this.getSecondaryUserStoreManager() != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager> entry : [CtInvocationImpl][CtFieldReadImpl]userStoreManagerHolder.entrySet()) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]entry.getKey().equalsIgnoreCase([CtVariableReadImpl]primaryDomain)) [CtBlockImpl]{
                    [CtContinueImpl]continue;
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager storeManager = [CtInvocationImpl][CtVariableReadImpl]entry.getValue();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]storeManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                    [CtTryImpl]try [CtBlockImpl]{
                        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] secondUserList;
                        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (storeManager)).isUniqueUserIdEnabled()) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]secondUserList = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (storeManager)).doListUsers([CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit);
                        } else [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]secondUserList = [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (storeManager)).doListUsersWithID([CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit).stream().map([CtExecutableReferenceExpressionImpl][CtFieldReadImpl]User::getDomainQualifiedUsername).toArray([CtExecutableReferenceExpressionImpl][CtTypeAccessImpl][CtArrayTypeReferenceImpl]java.lang.String[]::new);
                        }
                        [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.combineArrays([CtVariableReadImpl]userList, [CtVariableReadImpl]secondUserList);
                    }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                        [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtLiteralImpl]null, [CtLiteralImpl]null, [CtLiteralImpl]null);
                        [CtInvocationImpl][CtCommentImpl]// We can ignore and proceed. Ignore the results from this user store.
                        [CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]ex);
                    }
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] secondUserList = [CtInvocationImpl][CtVariableReadImpl]storeManager.listUsers([CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit);
                    [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.combineArrays([CtVariableReadImpl]userList, [CtVariableReadImpl]secondUserList);
                }
            }
        }
        [CtInvocationImpl]handlePostGetUserList([CtLiteralImpl]null, [CtLiteralImpl]null, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]userList)), [CtLiteralImpl]true);
        [CtReturnImpl]return [CtVariableReadImpl]userList;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Count roles in user stores
     *
     * @param filter
     * 		The string to filter out roles
     * @return countRoles
     * @throws UserStoreException
     * 		UserStoreException
     */
    public [CtTypeReferenceImpl]long countRoles([CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class[] argTypes = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"countRoles", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]filter }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]long) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]int index;
        [CtAssignmentImpl][CtVariableWriteImpl]index = [CtInvocationImpl][CtVariableReadImpl]filter.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
        [CtIfImpl][CtCommentImpl]// Check whether we have a secondary UserStoreManager setup.
        if ([CtBinaryOperatorImpl][CtVariableReadImpl]index > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domain = [CtInvocationImpl][CtVariableReadImpl]filter.substring([CtLiteralImpl]0, [CtVariableReadImpl]index);
            [CtIfImpl]if ([CtInvocationImpl]isInternalRole([CtVariableReadImpl]domain)) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Internal domain is provided. Thus calling the hybrid role manager to get the " + [CtLiteralImpl]"internal role count.");
                }
                [CtReturnImpl]return [CtInvocationImpl][CtFieldReadImpl][CtThisAccessImpl]this.hybridRoleManager.countHybridRoles([CtVariableReadImpl]filter);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]filter = [CtInvocationImpl][CtVariableReadImpl]filter.substring([CtBinaryOperatorImpl][CtVariableReadImpl]index + [CtLiteralImpl]1);
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secondaryUserStoreManager = [CtInvocationImpl]getSecondaryUserStoreManager([CtVariableReadImpl]domain);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secondaryUserStoreManager != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtIfImpl][CtCommentImpl]// We have a secondary UserStoreManager registered for this domain.
                if ([CtBinaryOperatorImpl][CtVariableReadImpl]secondaryUserStoreManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                    [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secondaryUserStoreManager)).doCountRoles([CtVariableReadImpl]filter);
                } else [CtBlockImpl]{
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"User store not supported");
                }
            }
        } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index == [CtLiteralImpl]0) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl]doCountRoles([CtInvocationImpl][CtVariableReadImpl]filter.substring([CtLiteralImpl]1));
        }
        [CtReturnImpl]return [CtInvocationImpl]doCountRoles([CtVariableReadImpl]filter);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Count Claims in user stores
     *
     * @return claim count value
     * @throws UserStoreException
     */
    public final [CtTypeReferenceImpl]long countUsersWithClaims([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimURI, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String valueFilter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtReturnImpl]return [CtInvocationImpl]doCountUsersWithClaims([CtVariableReadImpl]claimURI, [CtVariableReadImpl]valueFilter);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This is to call the relevant post methods in listeners after successful retrieval of user list of a role.
     *
     * @param roleName
     * 		Name of the role.
     * @param userList
     * 		List of users.
     * @throws UserStoreException
     * 		User Store Exception.
     */
    private [CtTypeReferenceImpl]void handleDoPostGetUserListOfRoleWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> userList) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener userOperationEventListener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userOperationEventListener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (userOperationEventListener)).doPostGetUserListOfRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtReturnImpl]return;
                }
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This is to call the relevant post methods in listeners after successful retrieval of user list of a role.
     *
     * @param roleName
     * 		Name of the role.
     * @param userList
     * 		List of users.
     * @throws UserStoreException
     * 		User Store Exception.
     */
    private [CtTypeReferenceImpl]void handleDoPostGetUserListOfRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener userOperationEventListener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userOperationEventListener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (userOperationEventListener)).doPostGetUserListOfRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtReturnImpl]return;
                }
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtArrayTypeReferenceImpl]java.lang.String[] getUserListOfRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getUserListOfRole", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]roleName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtArrayTypeReferenceImpl]java.lang.String[]) (object));
        }
        [CtReturnImpl]return [CtInvocationImpl]getUserListOfRole([CtVariableReadImpl]roleName, [CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.QUERY_FILTER_STRING_ANY, [CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.QUERY_MAX_ITEM_LIMIT_ANY);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieves a list of user names belongs to the given role and matches the given string filter.
     *
     * @param roleName
     * 		Name of the role.
     * @param filter
     * 		The string to filter out names of users belong to the given role.
     * @param maxItemLimit
     * 		Maximum number of users returned.
     * @return User name list.
     * @throws UserStoreException
     */
    public final [CtArrayTypeReferenceImpl]java.lang.String[] getUserListOfRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int maxItemLimit) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]int.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getUserListOfRole", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]roleName, [CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtArrayTypeReferenceImpl]java.lang.String[]) (object));
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] userNames = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        [CtIfImpl][CtCommentImpl]// If role does not exit, just return
        if ([CtUnaryOperatorImpl]![CtInvocationImpl]isExistingRole([CtVariableReadImpl]roleName)) [CtBlockImpl]{
            [CtInvocationImpl]handleDoPostGetUserListOfRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userNames);
            [CtReturnImpl]return [CtVariableReadImpl]userNames;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreOfRoles([CtVariableReadImpl]roleName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager resolvedUserStoreManager = [CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]resolvedUserStoreManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (resolvedUserStoreManager)).getUserListOfRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit);
            } else [CtBlockImpl]{
                [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]resolvedUserStoreManager.getUserListOfRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
            }
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here
        [CtCommentImpl]// ################################
        if ([CtInvocationImpl][CtVariableReadImpl]userStore.isSystemStore()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList = [CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.getUserListOfSystemRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
            [CtInvocationImpl]handleDoPostGetUserListOfRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList);
            [CtReturnImpl]return [CtVariableReadImpl]userList;
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] userNamesInHybrid;
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isHybridRole()) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.INTERNAL_DOMAIN.equalsIgnoreCase([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName())) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userNamesInHybrid = [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.getUserListOfHybridRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userNamesInHybrid = [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.getUserListOfHybridRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainAwareName());
            }
            [CtLocalVariableImpl][CtCommentImpl]// remove domain
            [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> finalNameList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String displayNameAttribute = [CtInvocationImpl][CtFieldReadImpl][CtThisAccessImpl]this.realmConfig.getUserStoreProperty([CtTypeAccessImpl]LDAPConstants.DISPLAY_NAME_ATTRIBUTE);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]userNamesInHybrid != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]userNamesInHybrid.length > [CtLiteralImpl]0)) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]displayNameAttribute != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]displayNameAttribute.trim().length() > [CtLiteralImpl]0)) [CtBlockImpl]{
                    [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userName : [CtVariableReadImpl]userNamesInHybrid) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domainName = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.extractDomainFromName([CtVariableReadImpl]userName);
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]domainName == [CtLiteralImpl]null) || [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]domainName.trim().length() == [CtLiteralImpl]0)) [CtBlockImpl]{
                            [CtInvocationImpl][CtVariableReadImpl]finalNameList.add([CtVariableReadImpl]userName);
                        }
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userManager = [CtInvocationImpl][CtFieldReadImpl]userStoreManagerHolder.get([CtVariableReadImpl]domainName);
                        [CtAssignmentImpl][CtVariableWriteImpl]userName = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]userName);
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userManager != [CtLiteralImpl]null) [CtBlockImpl]{
                            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] displayNames = [CtLiteralImpl]null;
                            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                                [CtAssignmentImpl][CtCommentImpl]// get displayNames
                                [CtVariableWriteImpl]displayNames = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userManager)).doGetDisplayNamesForInternalRole([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]userName });
                            } else [CtBlockImpl]{
                                [CtAssignmentImpl][CtVariableWriteImpl]displayNames = [CtInvocationImpl][CtVariableReadImpl]userManager.getRoleNames();
                            }
                            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String displayName : [CtVariableReadImpl]displayNames) [CtBlockImpl]{
                                [CtLocalVariableImpl][CtCommentImpl]// if domain names are not added by above method, add it
                                [CtCommentImpl]// here
                                [CtTypeReferenceImpl]java.lang.String nameWithDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]displayName, [CtVariableReadImpl]domainName);
                                [CtInvocationImpl][CtVariableReadImpl]finalNameList.add([CtVariableReadImpl]nameWithDomain);
                            }
                        }
                    }
                } else [CtBlockImpl]{
                    [CtInvocationImpl]handleDoPostGetUserListOfRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userNamesInHybrid);
                    [CtReturnImpl]return [CtVariableReadImpl]userNamesInHybrid;
                }
            }
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList = [CtInvocationImpl][CtVariableReadImpl]finalNameList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]);
            [CtInvocationImpl]handleDoPostGetUserListOfRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList);
            [CtReturnImpl]return [CtVariableReadImpl]userList;
        }
        [CtIfImpl]if ([CtFieldReadImpl]readGroupsEnabled) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> users = [CtInvocationImpl]doGetUserListOfRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit);
                [CtAssignmentImpl][CtVariableWriteImpl]userNames = [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]users.stream().map([CtExecutableReferenceExpressionImpl][CtFieldReadImpl]User::getDomainQualifiedUsername).toArray([CtExecutableReferenceExpressionImpl][CtTypeAccessImpl][CtArrayTypeReferenceImpl]java.lang.String[]::new);
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userNames = [CtInvocationImpl]doGetUserListOfRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit);
            }
            [CtInvocationImpl]handleDoPostGetUserListOfRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userNames);
        }
        [CtReturnImpl]return [CtVariableReadImpl]userNames;
    }

    [CtMethodImpl]public [CtArrayTypeReferenceImpl]java.lang.String[] getRoleListOfUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getRoleListOfUser", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtArrayTypeReferenceImpl]java.lang.String[]) (object));
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] roleNames;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtLiteralImpl]null;
        [CtIfImpl][CtCommentImpl]// anonymous user is only assigned to  anonymous role
        if ([CtInvocationImpl][CtTypeAccessImpl]CarbonConstants.REGISTRY_ANONNYMOUS_USERNAME.equalsIgnoreCase([CtVariableReadImpl]userName)) [CtBlockImpl]{
            [CtReturnImpl]return [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtFieldReadImpl]org.wso2.carbon.CarbonConstants.REGISTRY_ANONNYMOUS_ROLE_NAME };
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().getRoleListOfUser([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
        }
        [CtAssignmentImpl][CtVariableWriteImpl]roleNames = [CtInvocationImpl]getRoleListOfUserFromCache([CtFieldReadImpl][CtThisAccessImpl]this.tenantId, [CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]roleNames != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]roleNames.length > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtReturnImpl]return [CtVariableReadImpl]roleNames;
        }
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isSystemStore()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.getSystemRoleListOfUser([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userID = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userID == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtReturnImpl][CtCommentImpl]// According to implementation, getRoleListOfUser method would return everyone role name for all users.
                return [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtInvocationImpl][CtFieldReadImpl]realmConfig.getEveryOneRoleName() };
            }
            [CtAssignmentImpl][CtVariableWriteImpl]roleNames = [CtInvocationImpl][CtInvocationImpl]doGetRoleListOfUserWithID([CtVariableReadImpl]userID, [CtLiteralImpl]"*").toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]);
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]roleNames = [CtInvocationImpl]doGetRoleListOfUser([CtVariableReadImpl]userName, [CtLiteralImpl]"*");
        }
        [CtReturnImpl]return [CtVariableReadImpl]roleNames;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Getter method for claim manager property specifically to be used in the implementations of
     * UserOperationEventListener implementations
     *
     * @return  */
    public [CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.ClaimManager getClaimManager() [CtBlockImpl]{
        [CtReturnImpl]return [CtFieldReadImpl]claimManager;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling relevant listener methods when there is a failure while trying to add
     * role.
     *
     * @param errorCode
     * 		Error code.
     * @param errorMessage
     * 		Error message.
     * @param roleName
     * 		Name of the role.
     * @param userList
     * 		List of users to be assigned to the role.
     * @param permissions
     * 		Permissions of the role role.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listeners.
     */
    private [CtTypeReferenceImpl]void handleAddRoleFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList, [CtParameterImpl]org.wso2.carbon.user.core.common.api[] permissions) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onAddRoleFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling relevant listener methods when there is a failure while trying to add
     * role.
     *
     * @param errorCode
     * 		Error code.
     * @param errorMessage
     * 		Error message.
     * @param roleName
     * 		Name of the role.
     * @param userIDList
     * 		List of users to be assigned to the role.
     * @param permissions
     * 		Permissions of the role role.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listeners.
     */
    private [CtTypeReferenceImpl]void handleAddRoleFailureWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userIDList, [CtParameterImpl]org.wso2.carbon.user.core.common.api[] permissions) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UniqueIDUserManagementErrorEventListener) (listener)).onAddRoleFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]roleName, [CtVariableReadImpl]userIDList, [CtVariableReadImpl]permissions, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling relevant postAddRole listener methods after successfully adding role.
     *
     * @param roleName
     * 		Name of the role.
     * @param userList
     * 		List of users.
     * @param permissions
     * 		Permissions that are assigned to the role.
     * @param isAuditLogOnly
     * 		To indicate whether to only call the relevant audit logger.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listeners.
     */
    private [CtTypeReferenceImpl]void handlePostAddRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList, [CtParameterImpl]org.wso2.carbon.user.core.common.api[] permissions, [CtParameterImpl][CtTypeReferenceImpl]boolean isAuditLogOnly) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean internalRole = [CtInvocationImpl]isAnInternalRole([CtVariableReadImpl]roleName);
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isAuditLogOnly && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]listener.getClass().getName().endsWith([CtTypeAccessImpl]UserCoreErrorConstants.AUDIT_LOGGER_CLASS_NAME))) [CtBlockImpl]{
                    [CtContinueImpl]continue;
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]boolean success = [CtLiteralImpl]false;
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]internalRole && [CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPostAddInternalRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions, [CtThisAccessImpl]this);
                } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]internalRole && [CtUnaryOperatorImpl](![CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener))) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtLiteralImpl]true;
                } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]internalRole) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtInvocationImpl][CtVariableReadImpl]listener.doPostAddRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions, [CtThisAccessImpl]this);
                }
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]success) [CtBlockImpl]{
                    [CtInvocationImpl]handleAddRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_ADD_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_ADD_ROLE.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleAddRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_ADD_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_ADD_ROLE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]boolean handlePreAddRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList, [CtParameterImpl]org.wso2.carbon.user.core.common.api[] permissions, [CtParameterImpl][CtTypeReferenceImpl]boolean isAuditLogOnly) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean internalRole = [CtInvocationImpl]isAnInternalRole([CtVariableReadImpl]roleName);
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isAuditLogOnly && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]listener.getClass().getName().endsWith([CtTypeAccessImpl]UserCoreErrorConstants.AUDIT_LOGGER_CLASS_NAME))) [CtBlockImpl]{
                    [CtContinueImpl]continue;
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]boolean success = [CtLiteralImpl]false;
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]internalRole && [CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPreAddInternalRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions, [CtThisAccessImpl]this);
                } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]internalRole && [CtUnaryOperatorImpl](![CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener))) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtLiteralImpl]true;
                } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]internalRole) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtInvocationImpl][CtVariableReadImpl]listener.doPreAddRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions, [CtThisAccessImpl]this);
                }
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]success) [CtBlockImpl]{
                    [CtInvocationImpl]handleAddRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_ROLE.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
                    [CtReturnImpl]return [CtLiteralImpl]false;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleAddRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_ROLE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtReturnImpl]return [CtLiteralImpl]true;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     */
    public [CtTypeReferenceImpl]void addRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList, [CtParameterImpl]org.wso2.carbon.user.core.common.api[] permissions, [CtParameterImpl][CtTypeReferenceImpl]boolean isSharedRole) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]roleName)) [CtBlockImpl]{
            [CtInvocationImpl]handleAddRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_ADD_EMPTY_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_ADD_EMPTY_ROLE.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_ADD_EMPTY_ROLE.toString());
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userList == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreOfRoles([CtVariableReadImpl]roleName);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isSharedRole && [CtUnaryOperatorImpl](![CtInvocationImpl]isSharedGroupEnabled())) [CtBlockImpl]{
            [CtInvocationImpl]handleAddRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_SHARED_ROLE_NOT_SUPPORTED.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_SHARED_ROLE_NOT_SUPPORTED.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_SHARED_ROLE_NOT_SUPPORTED.toString());
        }
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isHybridRole()) [CtBlockImpl]{
            [CtIfImpl][CtCommentImpl]// Invoke Pre listeners for hybrid roles.
            if ([CtUnaryOperatorImpl]![CtInvocationImpl]handlePreAddRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions, [CtLiteralImpl]false)) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
            [CtInvocationImpl]doAddInternalRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
            [CtInvocationImpl][CtCommentImpl]// Calling only the audit logger, to maintain the back-ward compatibility
            handlePostAddRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions, [CtLiteralImpl]false);
            [CtReturnImpl]return;
        }
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().addRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]userList), [CtVariableReadImpl]permissions, [CtVariableReadImpl]isSharedRole);
            [CtReturnImpl]return;
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtBinaryOperatorImpl][CtVariableReadImpl]permissions == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]permissions = [CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.api.Permission[[CtLiteralImpl]0];
        }
        [CtIfImpl][CtCommentImpl]// This happens only once during first startup - adding administrator user/role.
        if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]roleName.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR) > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]roleName = [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName();
            [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]userList);
        }
        [CtIfImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        if ([CtUnaryOperatorImpl]![CtInvocationImpl]handlePreAddRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions, [CtLiteralImpl]false)) [CtBlockImpl]{
            [CtReturnImpl]return;
        }
        [CtIfImpl][CtCommentImpl]// #################### </Listeners> #####################################################
        [CtCommentImpl]// Check for validations
        if ([CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
            [CtInvocationImpl]handleAddRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isRoleNameValid([CtVariableReadImpl]roleName)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String regEx = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_ROLE_NAME_JAVA_REG_EX);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_ROLE_NAME.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]regEx);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_ROLE_NAME.getCode();
            [CtInvocationImpl]handleAddRoleFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtIfImpl]if ([CtInvocationImpl]doCheckExistingRole([CtVariableReadImpl]roleName)) [CtBlockImpl]{
            [CtInvocationImpl]handleRoleAlreadyExistException([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roleWithDomain = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtFieldReadImpl]writeGroupsEnabled) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtIfImpl][CtCommentImpl]// add role in to actual user store
                if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                    [CtInvocationImpl]doAddRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]isSharedRole);
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userIDs = [CtInvocationImpl]getUserIDsFromUserNames([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]userList));
                    [CtInvocationImpl]doAddRoleWithID([CtVariableReadImpl]roleName, [CtInvocationImpl][CtVariableReadImpl]userIDs.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]), [CtVariableReadImpl]isSharedRole);
                }
                [CtAssignmentImpl][CtVariableWriteImpl]roleWithDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]roleName, [CtInvocationImpl]getMyDomainName());
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleAddRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_ADDING_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_ADDING_ROLE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
        } else [CtBlockImpl]{
            [CtInvocationImpl]handleAddRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_WRITE_GROUPS_NOT_ENABLED.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_WRITE_GROUPS_NOT_ENABLED.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_WRITE_GROUPS_NOT_ENABLED.toString());
        }
        [CtIfImpl][CtCommentImpl]// add permission in to the the permission store
        if ([CtBinaryOperatorImpl][CtVariableReadImpl]permissions != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.Permission permission : [CtVariableReadImpl]permissions) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String resourceId = [CtInvocationImpl][CtVariableReadImpl]permission.getResourceId();
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String action = [CtInvocationImpl][CtVariableReadImpl]permission.getAction();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]resourceId == [CtLiteralImpl]null) || [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]resourceId.trim().length() == [CtLiteralImpl]0)) [CtBlockImpl]{
                    [CtContinueImpl]continue;
                }
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]action == [CtLiteralImpl]null) || [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]action.trim().length() == [CtLiteralImpl]0)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtCommentImpl]// default action value // TODO
                    [CtVariableWriteImpl]action = [CtLiteralImpl]"read";
                }
                [CtInvocationImpl][CtCommentImpl]// This is a special case. We need to pass domain aware name.
                [CtInvocationImpl][CtFieldReadImpl]userRealm.getAuthorizationManager().authorizeRole([CtVariableReadImpl]roleWithDomain, [CtVariableReadImpl]resourceId, [CtVariableReadImpl]action);
            }
        }
        [CtIfImpl][CtCommentImpl]// if existing users are added to role, need to update user role cache
        if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]userList != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]userList.length > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtInvocationImpl]clearUserRolesCacheByTenant([CtFieldReadImpl]tenantId);
        }
        [CtInvocationImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        handlePostAddRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions, [CtLiteralImpl]false);
        [CtCommentImpl]// #################### </Listeners> #####################################################
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * TODO move to API
     *
     * @return  */
    public [CtTypeReferenceImpl]boolean isSharedGroupEnabled() [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String value = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.SHARED_GROUPS_ENABLED);
        [CtTryImpl]try [CtBlockImpl]{
            [CtReturnImpl]return [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtFieldReadImpl]realmConfig.isPrimary() && [CtUnaryOperatorImpl](![CtInvocationImpl]isReadOnly())) && [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.TRUE_VALUE.equalsIgnoreCase([CtVariableReadImpl]value);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtLiteralImpl]false;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Removes the shared roles relevant to the provided tenant domain
     *
     * @param sharedRoles
     * @param tenantDomain
     */
    protected [CtTypeReferenceImpl]void filterSharedRoles([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> sharedRoles, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String tenantDomain) [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]tenantDomain != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtForImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Iterator<[CtTypeReferenceImpl]java.lang.String> i = [CtInvocationImpl][CtVariableReadImpl]sharedRoles.iterator(); [CtInvocationImpl][CtVariableReadImpl]i.hasNext();) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String role = [CtInvocationImpl][CtVariableReadImpl]i.next();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]role.indexOf([CtVariableReadImpl]tenantDomain) > [CtUnaryOperatorImpl](-[CtLiteralImpl]1)) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]i.remove();
                }
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method calls the relevant methods when there is a failure while trying to delete the role.
     *
     * @param errorCode
     * 		Error code.
     * @param errorMessage
     * 		Error message.
     * @param roleName
     * 		Name of the roles.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listener methods.
     */
    private [CtTypeReferenceImpl]void handleDeleteRoleFailure([CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorCode, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String errorMessage, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserManagementErrorEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserManagementErrorEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]listener.isEnable() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]listener.onDeleteRoleFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]roleName, [CtThisAccessImpl]this))) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling post delete methods of relevant listeners.
     *
     * @param roleName
     * 		Name of the role
     * @param isAuditLogOnly
     * 		To indicate whether to call only the audit logger.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listener methods.
     */
    private [CtTypeReferenceImpl]void handleDoPostDeleteRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtTypeReferenceImpl]boolean isAuditLogOnly) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean internalRole = [CtInvocationImpl]isAnInternalRole([CtVariableReadImpl]roleName);
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isAuditLogOnly && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]listener.getClass().getName().endsWith([CtTypeAccessImpl]UserCoreErrorConstants.AUDIT_LOGGER_CLASS_NAME))) [CtBlockImpl]{
                    [CtContinueImpl]continue;
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]boolean success = [CtLiteralImpl]false;
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]internalRole && [CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPostDeleteInternalRole([CtVariableReadImpl]roleName, [CtThisAccessImpl]this);
                } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]internalRole && [CtUnaryOperatorImpl](![CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener))) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtLiteralImpl]true;
                } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]internalRole) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtInvocationImpl][CtVariableReadImpl]listener.doPostDeleteRole([CtVariableReadImpl]roleName, [CtThisAccessImpl]this);
                }
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]success) [CtBlockImpl]{
                    [CtInvocationImpl]handleDeleteRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_ROLE.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]roleName);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_ROLE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]roleName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling pre delete methods of relevant listeners.
     *
     * @param roleName
     * 		Name of the role
     * @param isAuditLogOnly
     * 		To indicate whether to call only the audit logger.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listener methods.
     */
    private [CtTypeReferenceImpl]boolean handleDoPreDeleteRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtTypeReferenceImpl]boolean isAuditLogOnly) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean internalRole = [CtInvocationImpl]isAnInternalRole([CtVariableReadImpl]roleName);
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isAuditLogOnly && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]listener.getClass().getName().endsWith([CtTypeAccessImpl]UserCoreErrorConstants.AUDIT_LOGGER_CLASS_NAME))) [CtBlockImpl]{
                    [CtContinueImpl]continue;
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]boolean success = [CtLiteralImpl]false;
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]internalRole && [CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPreDeleteInternalRole([CtVariableReadImpl]roleName, [CtThisAccessImpl]this);
                } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]internalRole && [CtUnaryOperatorImpl](![CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener))) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtLiteralImpl]true;
                } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]internalRole) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtInvocationImpl][CtVariableReadImpl]listener.doPreDeleteRole([CtVariableReadImpl]roleName, [CtThisAccessImpl]this);
                }
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]success) [CtBlockImpl]{
                    [CtInvocationImpl]handleDeleteRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_ROLE.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]roleName);
                    [CtReturnImpl]return [CtLiteralImpl]false;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_ROLE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]roleName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtReturnImpl]return [CtLiteralImpl]true;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Delete the role with the given role name
     *
     * @param roleName
     * 		The role name
     * @throws org.wso2.carbon.user.core.UserStoreException
     */
    public final [CtTypeReferenceImpl]void deleteRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class };
            [CtInvocationImpl]callSecure([CtLiteralImpl]"deleteRole", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]roleName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return;
        }
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isPrimaryAdminRole([CtVariableReadImpl]roleName, [CtFieldReadImpl]realmConfig)) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_DELETE_ADMIN_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_DELETE_ADMIN_ROLE.getMessage(), [CtVariableReadImpl]roleName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_DELETE_ADMIN_ROLE.toString());
        }
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isEveryoneRole([CtVariableReadImpl]roleName, [CtFieldReadImpl]realmConfig)) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_DELETE_EVERYONE_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_DELETE_EVERYONE_ROLE.getMessage(), [CtVariableReadImpl]roleName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_DELETE_EVERYONE_ROLE.toString());
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreOfRoles([CtVariableReadImpl]roleName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().deleteRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roleWithDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]roleName, [CtInvocationImpl]getMyDomainName());
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtInvocationImpl][CtVariableReadImpl]userStore.isHybridRole()) [CtBlockImpl]{
            [CtIfImpl][CtCommentImpl]// Invoke pre listeners.
            if ([CtUnaryOperatorImpl]![CtInvocationImpl]handleDoPreDeleteRole([CtVariableReadImpl]roleName, [CtLiteralImpl]false)) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
            [CtTryImpl]try [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.APPLICATION_DOMAIN.equalsIgnoreCase([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName()) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.WORKFLOW_DOMAIN.equalsIgnoreCase([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName())) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.deleteHybridRole([CtVariableReadImpl]roleName);
                } else [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.deleteHybridRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleDeleteRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_DELETE_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_DELETE_ROLE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]roleName);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
            [CtInvocationImpl]handleDoPostDeleteRole([CtVariableReadImpl]roleName, [CtLiteralImpl]false);
            [CtInvocationImpl]clearUserRolesCacheByTenant([CtFieldReadImpl]tenantId);
            [CtReturnImpl]return;
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]doCheckExistingRole([CtVariableReadImpl]roleName)) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_DELETE_NON_EXISTING_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_DELETE_NON_EXISTING_ROLE.getMessage(), [CtVariableReadImpl]roleName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_DELETE_NON_EXISTING_ROLE.toString());
        }
        [CtIfImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        if ([CtUnaryOperatorImpl]![CtInvocationImpl]handleDoPreDeleteRole([CtVariableReadImpl]roleName, [CtLiteralImpl]false)) [CtBlockImpl]{
            [CtReturnImpl]return;
        }
        [CtIfImpl][CtCommentImpl]// #################### </Listeners> #####################################################
        if ([CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]roleName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtFieldReadImpl]writeGroupsEnabled) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_WRITE_GROUPS_NOT_ENABLED.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_WRITE_GROUPS_NOT_ENABLED.getMessage(), [CtVariableReadImpl]roleName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_WRITE_GROUPS_NOT_ENABLED.toString());
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtInvocationImpl]doDeleteRole([CtVariableReadImpl]roleName);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteRoleFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_DELETE_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_DELETE_ROLE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]roleName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtInvocationImpl][CtCommentImpl]// clear role authorization
        [CtInvocationImpl][CtFieldReadImpl]userRealm.getAuthorizationManager().clearRoleAuthorization([CtVariableReadImpl]roleWithDomain);
        [CtInvocationImpl][CtCommentImpl]// clear cache
        clearUserRolesCacheByTenant([CtFieldReadImpl]tenantId);
        [CtInvocationImpl][CtCommentImpl]// Call relevant listeners after deleting the role.
        handleDoPostDeleteRole([CtVariableReadImpl]roleName, [CtLiteralImpl]false);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Method to get the password expiration time.
     *
     * @param userName
     * 		the user name.
     * @return the password expiration time.
     * @throws UserStoreException
     * 		throw if the operation failed.
     */
    [CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]java.util.Date getPasswordExpirationTime([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager().getPasswordExpirationTime([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
        }
        [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userIDFromUserName = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userIDFromUserName == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtLiteralImpl]"No UserId found for user:" + [CtVariableReadImpl]userName);
            }
            [CtReturnImpl]return [CtInvocationImpl]doGetPasswordExpirationTimeWithID([CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName));
        } else [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl]doGetPasswordExpirationTime([CtVariableReadImpl]userName);
        }
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]java.util.Date doGetPasswordExpirationTime([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doGetPasswordExpirationTime operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doGetPasswordExpirationTime operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]java.util.Date doGetPasswordExpirationTimeWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doGetPasswordExpirationTimeWithId operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doGetPasswordExpirationTimeWithId operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore getUserStore([CtParameterImpl]final [CtTypeReferenceImpl]java.lang.String user) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.security.AccessController.doPrivileged([CtLambdaImpl](([CtTypeReferenceImpl]java.security.PrivilegedExceptionAction<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore>) (() -> [CtInvocationImpl]getUserStoreInternal([CtVariableReadImpl]user))));
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.security.PrivilegedActionException e) [CtBlockImpl]{
            [CtThrowImpl]throw [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException) ([CtVariableReadImpl]e.getException()));
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore getUserStoreWithID([CtParameterImpl]final [CtTypeReferenceImpl]java.lang.String userID) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.security.AccessController.doPrivileged([CtLambdaImpl](([CtTypeReferenceImpl]java.security.PrivilegedExceptionAction<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore>) (() -> [CtInvocationImpl]getUserStoreInternalWithId([CtVariableReadImpl]userID))));
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.security.PrivilegedActionException e) [CtBlockImpl]{
            [CtThrowImpl]throw [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException) ([CtVariableReadImpl]e.getException()));
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore getUserStoreOfRoles([CtParameterImpl]final [CtTypeReferenceImpl]java.lang.String role) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtReturnImpl]return [CtInvocationImpl]getUserStore([CtVariableReadImpl]role);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @return  * @throws UserStoreException
     */
    private [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore getUserStoreInternal([CtParameterImpl][CtTypeReferenceImpl]java.lang.String user) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]int index;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]user == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]userStore.setUserStoreManager([CtThisAccessImpl]this);
            [CtInvocationImpl][CtVariableReadImpl]userStore.setRecurssive([CtLiteralImpl]false);
            [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainName([CtInvocationImpl]getMyDomainName());
            [CtReturnImpl]return [CtVariableReadImpl]userStore;
        }
        [CtAssignmentImpl][CtVariableWriteImpl]index = [CtInvocationImpl][CtVariableReadImpl]user.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domainFreeName = [CtLiteralImpl]null;
        [CtIfImpl][CtCommentImpl]// Check whether we have a secondary UserStoreManager setup.
        if ([CtBinaryOperatorImpl][CtVariableReadImpl]index > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtLocalVariableImpl][CtCommentImpl]// Using the short-circuit. User name comes with the domain name.
            [CtTypeReferenceImpl]java.lang.String domain = [CtInvocationImpl][CtVariableReadImpl]user.substring([CtLiteralImpl]0, [CtVariableReadImpl]index);
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secManager = [CtInvocationImpl]getSecondaryUserStoreManager([CtVariableReadImpl]domain);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secManager == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]secManager = [CtInvocationImpl]getSecondaryUserStore([CtVariableReadImpl]domain);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]domainFreeName = [CtInvocationImpl][CtVariableReadImpl]user.substring([CtBinaryOperatorImpl][CtVariableReadImpl]index + [CtLiteralImpl]1);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secManager != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]userStore.setUserStoreManager([CtVariableReadImpl]secManager);
                [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainAwareName([CtVariableReadImpl]user);
                [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainFreeName([CtVariableReadImpl]domainFreeName);
                [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainName([CtVariableReadImpl]domain);
                [CtInvocationImpl][CtVariableReadImpl]userStore.setRecurssive([CtLiteralImpl]true);
                [CtReturnImpl]return [CtVariableReadImpl]userStore;
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]domain.equalsIgnoreCase([CtInvocationImpl]getMyDomainName())) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.INTERNAL_DOMAIN.equalsIgnoreCase([CtVariableReadImpl]domain) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.APPLICATION_DOMAIN.equalsIgnoreCase([CtVariableReadImpl]domain)) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.WORKFLOW_DOMAIN.equalsIgnoreCase([CtVariableReadImpl]domain)) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]userStore.setHybridRole([CtLiteralImpl]true);
                    } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.SYSTEM_DOMAIN_NAME.equalsIgnoreCase([CtVariableReadImpl]domain)) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]userStore.setSystemStore([CtLiteralImpl]true);
                    } else [CtBlockImpl]{
                        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Invalid Domain Name");
                    }
                }
                [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainAwareName([CtVariableReadImpl]user);
                [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainFreeName([CtVariableReadImpl]domainFreeName);
                [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainName([CtVariableReadImpl]domain);
                [CtInvocationImpl][CtVariableReadImpl]userStore.setRecurssive([CtLiteralImpl]false);
                [CtInvocationImpl][CtVariableReadImpl]userStore.setUserStoreManager([CtThisAccessImpl]this);
                [CtReturnImpl]return [CtVariableReadImpl]userStore;
            }
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domain = [CtInvocationImpl]getMyDomainName();
        [CtInvocationImpl][CtVariableReadImpl]userStore.setUserStoreManager([CtThisAccessImpl]this);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainAwareName([CtVariableReadImpl]user);
            [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainFreeName([CtVariableReadImpl]domainFreeName);
        } else [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainAwareName([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]domain + [CtFieldReadImpl]org.wso2.carbon.CarbonConstants.DOMAIN_SEPARATOR) + [CtVariableReadImpl]user);
            [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainFreeName([CtVariableReadImpl]user);
        }
        [CtInvocationImpl][CtVariableReadImpl]userStore.setRecurssive([CtLiteralImpl]false);
        [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainName([CtVariableReadImpl]domain);
        [CtReturnImpl]return [CtVariableReadImpl]userStore;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore getUserStoreInternalWithId([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtCommentImpl]// If the user id is null, we set current user store manger as the selected one and return.
        [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userId == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]userStore.setUserStoreManager([CtThisAccessImpl]this);
            [CtInvocationImpl][CtVariableReadImpl]userStore.setRecurssive([CtLiteralImpl]false);
            [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainName([CtInvocationImpl]getMyDomainName());
            [CtReturnImpl]return [CtVariableReadImpl]userStore;
        }
        [CtLocalVariableImpl][CtCommentImpl]// First we have to check whether this user store is already resolved and we have it either in the cache or
        [CtCommentImpl]// in our local database. If so we can use that.
        [CtTypeReferenceImpl]java.lang.String domainName = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDDomainResolver.getDomainForUserId([CtVariableReadImpl]userId, [CtFieldReadImpl]tenantId);
        [CtIfImpl][CtCommentImpl]// If we don't have the domain name in our side, then we have to iterate through each user store and find
        [CtCommentImpl]// where is this user id from and mark it as the user store domain.
        if ([CtBinaryOperatorImpl][CtVariableReadImpl]domainName == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtForEachImpl][CtCommentImpl]// Iterate through each registered user stores.
            for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager> entry : [CtInvocationImpl][CtFieldReadImpl]userStoreManagerHolder.entrySet()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]entry.getValue() instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtCommentImpl]// If there is a user for the give user id, then that is the correct domain.
                    [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager abstractUserStoreManager = [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]entry.getValue()));
                    [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]abstractUserStoreManager.isUniqueUserIdEnabled()) [CtBlockImpl]{
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]abstractUserStoreManager.doGetUserNameFromUserIDWithID([CtVariableReadImpl]userId) != [CtLiteralImpl]null) [CtBlockImpl]{
                            [CtAssignmentImpl][CtCommentImpl]// If we found a domain name for the give user id, update the domain resolver with the name.
                            [CtVariableWriteImpl]domainName = [CtInvocationImpl][CtVariableReadImpl]entry.getKey();
                            [CtInvocationImpl][CtFieldReadImpl]userUniqueIDDomainResolver.setDomainForUserId([CtVariableReadImpl]userId, [CtVariableReadImpl]domainName, [CtFieldReadImpl]tenantId);
                            [CtBreakImpl]break;
                        }
                    } else [CtIfImpl][CtCommentImpl]// This is happening when the user store is not supporting uniqueID.
                    if ([CtBinaryOperatorImpl][CtFieldReadImpl][CtInvocationImpl][CtVariableReadImpl]abstractUserStoreManager.getUserList([CtTypeAccessImpl]UserCoreClaimConstants.USER_ID_CLAIM_URI, [CtVariableReadImpl]userId, [CtLiteralImpl]null).length > [CtLiteralImpl]0) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]domainName = [CtInvocationImpl][CtVariableReadImpl]entry.getKey();
                        [CtInvocationImpl][CtFieldReadImpl]userUniqueIDDomainResolver.setDomainForUserId([CtVariableReadImpl]userId, [CtVariableReadImpl]domainName, [CtFieldReadImpl]tenantId);
                        [CtBreakImpl]break;
                    }
                }
            }
        }
        [CtIfImpl][CtCommentImpl]// Okay we didn't find the domain from there either. So this should either the PRIMARY domain or an invalid
        [CtCommentImpl]// user id. So set the current user store manager domain as the domain name.
        if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]domainName == [CtLiteralImpl]null) || [CtInvocationImpl][CtVariableReadImpl]domainName.equals([CtInvocationImpl]getMyDomainName())) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domain = [CtInvocationImpl]getMyDomainName();
            [CtInvocationImpl][CtVariableReadImpl]userStore.setUserStoreManager([CtThisAccessImpl]this);
            [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainAwareUserId([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]userId, [CtVariableReadImpl]domainName));
            [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainFreeUserId([CtVariableReadImpl]userId);
            [CtInvocationImpl][CtVariableReadImpl]userStore.setRecurssive([CtLiteralImpl]false);
            [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainName([CtVariableReadImpl]domain);
            [CtReturnImpl]return [CtVariableReadImpl]userStore;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secManager = [CtInvocationImpl]getSecondaryUserStoreManager([CtVariableReadImpl]domainName);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secManager == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]secManager = [CtInvocationImpl]getSecondaryUserStore([CtVariableReadImpl]domainName);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secManager != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]userStore.setUserStoreManager([CtVariableReadImpl]secManager);
            [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainAwareUserId([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]userId, [CtVariableReadImpl]domainName));
            [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainFreeUserId([CtVariableReadImpl]userId);
            [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainName([CtVariableReadImpl]domainName);
            [CtInvocationImpl][CtVariableReadImpl]userStore.setRecurssive([CtLiteralImpl]true);
            [CtReturnImpl]return [CtVariableReadImpl]userStore;
        } else [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]domainName.equalsIgnoreCase([CtInvocationImpl]getMyDomainName())) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.INTERNAL_DOMAIN.equalsIgnoreCase([CtVariableReadImpl]domainName) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.APPLICATION_DOMAIN.equalsIgnoreCase([CtVariableReadImpl]domainName)) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.WORKFLOW_DOMAIN.equalsIgnoreCase([CtVariableReadImpl]domainName)) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]userStore.setHybridRole([CtLiteralImpl]true);
                } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.SYSTEM_DOMAIN_NAME.equalsIgnoreCase([CtVariableReadImpl]domainName)) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]userStore.setSystemStore([CtLiteralImpl]true);
                } else [CtBlockImpl]{
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Invalid Domain Name");
                }
            }
            [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainAwareUserId([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]userId, [CtVariableReadImpl]domainName));
            [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainFreeUserId([CtVariableReadImpl]userId);
            [CtInvocationImpl][CtVariableReadImpl]userStore.setDomainName([CtVariableReadImpl]domainName);
            [CtInvocationImpl][CtVariableReadImpl]userStore.setRecurssive([CtLiteralImpl]false);
            [CtInvocationImpl][CtVariableReadImpl]userStore.setUserStoreManager([CtThisAccessImpl]this);
            [CtReturnImpl]return [CtVariableReadImpl]userStore;
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager getSecondaryUserStoreManager() [CtBlockImpl]{
        [CtReturnImpl]return [CtFieldReadImpl]secondaryUserStoreManager;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     */
    public final [CtTypeReferenceImpl]void setSecondaryUserStoreManager([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secondaryUserStoreManager) [CtBlockImpl]{
        [CtAssignmentImpl][CtFieldWriteImpl][CtThisAccessImpl]this.secondaryUserStoreManager = [CtVariableReadImpl]secondaryUserStoreManager;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager getSecondaryUserStoreManager([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userDomain) [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userDomain == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]null;
        }
        [CtReturnImpl]return [CtInvocationImpl][CtFieldReadImpl]userStoreManagerHolder.get([CtInvocationImpl][CtVariableReadImpl]userDomain.toUpperCase());
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager getSecondaryUserStore([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userDomain) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreManager userStoreManager;
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.service.RealmService realmService = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UserStoreMgtDSComponent.getRealmService();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]realmService == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtReturnImpl]return [CtLiteralImpl]null;
            }
            [CtAssignmentImpl][CtVariableWriteImpl]userStoreManager = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]realmService.getTenantUserRealm([CtFieldReadImpl]tenantId).getUserStoreManager();
            [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userStoreManager)).getSecondaryUserStoreManager([CtVariableReadImpl]userDomain);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]e);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtTypeReferenceImpl]void addSecondaryUserStoreManager([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userDomain, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userStoreManager) [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userDomain != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]userStoreManagerHolder.put([CtInvocationImpl][CtVariableReadImpl]userDomain.toUpperCase(), [CtVariableReadImpl]userStoreManager);
        }
    }

    [CtMethodImpl]public final [CtTypeReferenceImpl]void clearAllSecondaryUserStores() [CtBlockImpl]{
        [CtInvocationImpl][CtFieldReadImpl]userStoreManagerHolder.clear();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl]getMyDomainName() != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]userStoreManagerHolder.put([CtInvocationImpl][CtInvocationImpl]getMyDomainName().toUpperCase(), [CtThisAccessImpl]this);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtArrayTypeReferenceImpl]java.lang.String[] getAllSecondaryRoles() throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{  };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getAllSecondaryRoles", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{  }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtArrayTypeReferenceImpl]java.lang.String[]) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secondary = [CtInvocationImpl][CtThisAccessImpl]this.getSecondaryUserStoreManager();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> roleList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
        [CtWhileImpl]while ([CtBinaryOperatorImpl][CtVariableReadImpl]secondary != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] roles = [CtInvocationImpl][CtVariableReadImpl]secondary.getRoleNames([CtLiteralImpl]true);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]roles != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]roles.length > [CtLiteralImpl]0)) [CtBlockImpl]{
                [CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.addAll([CtVariableReadImpl]roleList, [CtVariableReadImpl]roles);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]secondary = [CtInvocationImpl][CtVariableReadImpl]secondary.getSecondaryUserStoreManager();
        } 
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]roleList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtInvocationImpl][CtVariableReadImpl]roleList.size()]);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @return  */
    public [CtTypeReferenceImpl]boolean isSCIMEnabled() [CtBlockImpl]{
        [CtReturnImpl]return [CtLiteralImpl]true;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }                  doAddInternalRole
     */
    public final [CtArrayTypeReferenceImpl]java.lang.String[] getHybridRoles() throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtReturnImpl]return [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.getHybridRoles([CtLiteralImpl]"*");
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtArrayTypeReferenceImpl]java.lang.String[] getRoleNames() throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtReturnImpl]return [CtInvocationImpl]getRoleNames([CtLiteralImpl]false);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    public final [CtArrayTypeReferenceImpl]java.lang.String[] getRoleNames([CtParameterImpl][CtTypeReferenceImpl]boolean noHybridRoles) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtReturnImpl]return [CtInvocationImpl]getRoleNames([CtLiteralImpl]"*", [CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.MAX_ITEM_LIMIT_UNLIMITED, [CtVariableReadImpl]noHybridRoles, [CtLiteralImpl]true, [CtLiteralImpl]true);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add internal roles for the given users.
     *
     * @param roleName
     * @param userList
     * @param permissions
     * @throws UserStoreException
     */
    protected [CtTypeReferenceImpl]void doAddInternalRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList, [CtParameterImpl]org.wso2.carbon.user.core.common.api[] permissions) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        [CtTypeReferenceImpl]java.lang.String domainModeratedRoleName = [CtInvocationImpl]removeDomainIfNotApplicationRole([CtVariableReadImpl]roleName);
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.isExistingRole([CtVariableReadImpl]domainModeratedRoleName)) [CtBlockImpl]{
            [CtInvocationImpl]handleRoleAlreadyExistException([CtVariableReadImpl]domainModeratedRoleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
        }
        [CtInvocationImpl]createHybridRole([CtVariableReadImpl]domainModeratedRoleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]permissions != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.Permission permission : [CtVariableReadImpl]permissions) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String resourceId = [CtInvocationImpl][CtVariableReadImpl]permission.getResourceId();
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String action = [CtInvocationImpl][CtVariableReadImpl]permission.getAction();
                [CtInvocationImpl][CtCommentImpl]// This is a special case. We need to pass domain aware name.
                [CtInvocationImpl][CtFieldReadImpl]userRealm.getAuthorizationManager().authorizeRole([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addInternalDomainName([CtVariableReadImpl]roleName), [CtVariableReadImpl]resourceId, [CtVariableReadImpl]action);
            }
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]userList != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]userList.length > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtInvocationImpl]clearUserRolesCacheByTenant([CtFieldReadImpl][CtThisAccessImpl]this.tenantId);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method handles role already exists exception.
     *
     * @param roleName
     * 		Name of teh role.
     * @param userList
     * 		list of users.
     * @param permissions
     * 		Relevant permissions added for new role.
     * @throws UserStoreException
     * 		User Store Exception.
     */
    private [CtTypeReferenceImpl]void handleRoleAlreadyExistException([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList, [CtParameterImpl]org.wso2.carbon.user.core.common.api[] permissions) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ROLE_ALREADY_EXISTS.getCode();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ROLE_ALREADY_EXISTS.getMessage(), [CtVariableReadImpl]roleName);
        [CtInvocationImpl]handleAddRoleFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]errorCode, [CtLiteralImpl]null);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method handles role already exists exception.
     *
     * @param roleName
     * 		Name of teh role.
     * @param userIDList
     * 		list of users.
     * @param permissions
     * 		Relevant permissions added for new role.
     * @throws UserStoreException
     * 		User Store Exception.
     */
    private [CtTypeReferenceImpl]void handleRoleAlreadyExistExceptionWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userIDList, [CtParameterImpl]org.wso2.carbon.user.core.common.api[] permissions) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ROLE_ALREADY_EXISTS.getCode();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ROLE_ALREADY_EXISTS.getMessage(), [CtVariableReadImpl]roleName);
        [CtInvocationImpl]handleAddRoleFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]roleName, [CtVariableReadImpl]userIDList, [CtVariableReadImpl]permissions);
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Returns the set of shared roles which applicable for the logged in tenant
     *
     * @param tenantDomain
     * 		tenant domain of the shared roles. If this is null,
     * 		returns all shared roles of available tenant domains
     * @param filter
     * @param maxItemLimit
     * @return  */
    protected abstract [CtArrayTypeReferenceImpl]java.lang.String[] doGetSharedRoleNames([CtParameterImpl][CtTypeReferenceImpl]java.lang.String tenantDomain, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int maxItemLimit) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * TODO This method would returns the role Name actually this must be implemented in interface.
     * As it is not good to change the API in point release. This has been added to Abstract class
     *
     * @param filter
     * @param maxItemLimit
     * @param noInternalRoles
     * @return  * @throws UserStoreException
     */
    public final [CtArrayTypeReferenceImpl]java.lang.String[] getRoleNames([CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int maxItemLimit, [CtParameterImpl][CtTypeReferenceImpl]boolean noInternalRoles, [CtParameterImpl][CtTypeReferenceImpl]boolean noSystemRole, [CtParameterImpl][CtTypeReferenceImpl]boolean noSharedRoles) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]int.class, [CtFieldReadImpl]boolean.class, [CtFieldReadImpl]boolean.class, [CtFieldReadImpl]boolean.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getRoleNames", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit, [CtVariableReadImpl]noInternalRoles, [CtVariableReadImpl]noSystemRole, [CtVariableReadImpl]noSharedRoles }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtArrayTypeReferenceImpl]java.lang.String[]) (object));
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] roleList = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtVariableReadImpl]noInternalRoles) && [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]filter.toLowerCase().startsWith([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.APPLICATION_DOMAIN.toLowerCase())) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]roleList = [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.getHybridRoles([CtVariableReadImpl]filter);
        } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtUnaryOperatorImpl](![CtVariableReadImpl]noInternalRoles) && [CtUnaryOperatorImpl](![CtInvocationImpl]isAnInternalRole([CtVariableReadImpl]filter))) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]filter.contains([CtTypeAccessImpl]UserCoreConstants.DOMAIN_SEPARATOR))) [CtBlockImpl]{
            [CtIfImpl][CtCommentImpl]// When domain name is not present in the filter value.
            if ([CtBinaryOperatorImpl][CtVariableReadImpl]filter == [CtLiteralImpl]"*") [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]roleList = [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.getHybridRoles([CtVariableReadImpl]filter);
            } else [CtBlockImpl]{
                [CtLocalVariableImpl][CtCommentImpl]// Since Application domain roles are stored in db with the "Application/" prefix, when domain is not
                [CtCommentImpl]// present in the filter, need to append the "Application/" before sending for db query.
                [CtArrayTypeReferenceImpl]java.lang.String[] applicationDomainRoleArray = [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.getHybridRoles([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.APPLICATION_DOMAIN + [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.DOMAIN_SEPARATOR) + [CtVariableReadImpl]filter);
                [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] internalDomainRoleArray = [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.getHybridRoles([CtVariableReadImpl]filter);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> internalOnlyList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
                [CtForEachImpl][CtCommentImpl]// When filtering with sw, ew and co there is a possibility of returning results belonging to
                [CtCommentImpl]// Application domain.
                for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String filteredRole : [CtVariableReadImpl]internalDomainRoleArray) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]filteredRole != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]filteredRole.matches([CtLiteralImpl]"Application/(.*)"))) [CtBlockImpl]{
                        [CtInvocationImpl][CtCommentImpl]// Create Internal domain only list.
                        [CtVariableReadImpl]internalOnlyList.add([CtVariableReadImpl]filteredRole);
                    }
                }
                [CtAssignmentImpl][CtVariableWriteImpl]roleList = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.combineArrays([CtVariableReadImpl]applicationDomainRoleArray, [CtInvocationImpl][CtVariableReadImpl]internalOnlyList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtInvocationImpl][CtVariableReadImpl]internalOnlyList.size()]));
            }
        } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]noInternalRoles) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]roleList = [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.getHybridRoles([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]filter));
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]noSystemRole) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] systemRoles = [CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.getSystemRoles();
            [CtAssignmentImpl][CtVariableWriteImpl]roleList = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.combineArrays([CtVariableReadImpl]roleList, [CtVariableReadImpl]systemRoles);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]int index;
        [CtAssignmentImpl][CtVariableWriteImpl]index = [CtInvocationImpl][CtVariableReadImpl]filter.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
        [CtIfImpl][CtCommentImpl]// Check whether we have a secondary UserStoreManager setup.
        if ([CtBinaryOperatorImpl][CtVariableReadImpl]index > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtLocalVariableImpl][CtCommentImpl]// Using the short-circuit. User name comes with the domain name.
            [CtTypeReferenceImpl]java.lang.String domain = [CtInvocationImpl][CtVariableReadImpl]filter.substring([CtLiteralImpl]0, [CtVariableReadImpl]index);
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secManager = [CtInvocationImpl]getSecondaryUserStoreManager([CtVariableReadImpl]domain);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.INTERNAL_DOMAIN.equalsIgnoreCase([CtVariableReadImpl]domain) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.APPLICATION_DOMAIN.equalsIgnoreCase([CtVariableReadImpl]domain)) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.WORKFLOW_DOMAIN.equalsIgnoreCase([CtVariableReadImpl]domain)) [CtBlockImpl]{
                [CtReturnImpl]return [CtVariableReadImpl]roleList;
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secManager != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtCommentImpl]// We have a secondary UserStoreManager registered for this domain.
                [CtVariableWriteImpl]filter = [CtInvocationImpl][CtVariableReadImpl]filter.substring([CtBinaryOperatorImpl][CtVariableReadImpl]index + [CtLiteralImpl]1);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                    [CtIfImpl]if ([CtFieldReadImpl]readGroupsEnabled) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] externalRoles = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secManager)).doGetRoleNames([CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit);
                        [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.combineArrays([CtVariableReadImpl]roleList, [CtVariableReadImpl]externalRoles);
                    }
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] externalRoles = [CtInvocationImpl][CtVariableReadImpl]secManager.getRoleNames();
                    [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.combineArrays([CtVariableReadImpl]roleList, [CtVariableReadImpl]externalRoles);
                }
            } else [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Invalid Domain Name");
            }
        } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index == [CtLiteralImpl]0) [CtBlockImpl]{
            [CtIfImpl]if ([CtFieldReadImpl]readGroupsEnabled) [CtBlockImpl]{
                [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] externalRoles = [CtInvocationImpl]doGetRoleNames([CtInvocationImpl][CtVariableReadImpl]filter.substring([CtBinaryOperatorImpl][CtVariableReadImpl]index + [CtLiteralImpl]1), [CtVariableReadImpl]maxItemLimit);
                [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.combineArrays([CtVariableReadImpl]roleList, [CtVariableReadImpl]externalRoles);
            }
        }
        [CtIfImpl]if ([CtFieldReadImpl]readGroupsEnabled) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] externalRoles = [CtInvocationImpl]doGetRoleNames([CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit);
            [CtAssignmentImpl][CtVariableWriteImpl]roleList = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.combineArrays([CtVariableReadImpl]externalRoles, [CtVariableReadImpl]roleList);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String primaryDomain = [CtInvocationImpl]getMyDomainName();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtThisAccessImpl]this.getSecondaryUserStoreManager() != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager> entry : [CtInvocationImpl][CtFieldReadImpl]userStoreManagerHolder.entrySet()) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]entry.getKey().equalsIgnoreCase([CtVariableReadImpl]primaryDomain)) [CtBlockImpl]{
                    [CtContinueImpl]continue;
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager storeManager = [CtInvocationImpl][CtVariableReadImpl]entry.getValue();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]storeManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                    [CtTryImpl]try [CtBlockImpl]{
                        [CtIfImpl]if ([CtFieldReadImpl]readGroupsEnabled) [CtBlockImpl]{
                            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] secondRoleList = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (storeManager)).doGetRoleNames([CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit);
                            [CtAssignmentImpl][CtVariableWriteImpl]roleList = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.combineArrays([CtVariableReadImpl]roleList, [CtVariableReadImpl]secondRoleList);
                        }
                    }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
                        [CtInvocationImpl][CtCommentImpl]// We can ignore and proceed. Ignore the results from this user store.
                        [CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]e);
                    }
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]roleList = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.combineArrays([CtVariableReadImpl]roleList, [CtInvocationImpl][CtVariableReadImpl]storeManager.getRoleNames());
                }
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]roleList;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param userName
     * @param claims
     * @param domainName
     * @return  * @throws UserStoreException
     */
    private [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> doGetUserClaimValues([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domainName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtCommentImpl]// Here the user name should be domain-less.
        [CtTypeReferenceImpl]boolean requireRoles = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean requireIntRoles = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean requireExtRoles = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roleClaim = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]profileName == [CtLiteralImpl]null) || [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]profileName.trim().length() == [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]profileName = [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.DEFAULT_PROFILE;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.String> propertySet = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<[CtTypeReferenceImpl]java.lang.String>();
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String claim : [CtVariableReadImpl]claims) [CtBlockImpl]{
            [CtLocalVariableImpl][CtCommentImpl]// There can be cases some claim values being requested for claims
            [CtCommentImpl]// we don't have.
            [CtTypeReferenceImpl]java.lang.String property = [CtLiteralImpl]null;
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]property = [CtInvocationImpl]getClaimAtrribute([CtVariableReadImpl]claim, [CtVariableReadImpl]userName, [CtVariableReadImpl]domainName);
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]e);
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]property != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.ROLE_CLAIM.equalsIgnoreCase([CtVariableReadImpl]claim)) || [CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.INT_ROLE_CLAIM.equalsIgnoreCase([CtVariableReadImpl]claim))) || [CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.EXT_ROLE_CLAIM.equalsIgnoreCase([CtVariableReadImpl]claim)))) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]propertySet.add([CtVariableReadImpl]property);
            }
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.ROLE_CLAIM.equalsIgnoreCase([CtVariableReadImpl]claim)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]requireRoles = [CtLiteralImpl]true;
                [CtAssignmentImpl][CtVariableWriteImpl]roleClaim = [CtVariableReadImpl]claim;
            } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.INT_ROLE_CLAIM.equalsIgnoreCase([CtVariableReadImpl]claim)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]requireIntRoles = [CtLiteralImpl]true;
                [CtAssignmentImpl][CtVariableWriteImpl]roleClaim = [CtVariableReadImpl]claim;
            } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.EXT_ROLE_CLAIM.equalsIgnoreCase([CtVariableReadImpl]claim)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]requireExtRoles = [CtLiteralImpl]true;
                [CtAssignmentImpl][CtVariableWriteImpl]roleClaim = [CtVariableReadImpl]claim;
            }
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] properties = [CtInvocationImpl][CtVariableReadImpl]propertySet.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtInvocationImpl][CtVariableReadImpl]propertySet.size()]);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> userPropertyValues = [CtInvocationImpl][CtThisAccessImpl]this.getUserPropertyValues([CtVariableReadImpl]userName, [CtVariableReadImpl]properties, [CtVariableReadImpl]profileName);
        [CtInvocationImpl]processAttributesAfterRetrieval([CtVariableReadImpl]userName, [CtVariableReadImpl]userPropertyValues, [CtVariableReadImpl]profileName);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> getAgain = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> finalValues = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isOverrideUsernameClaimEnabled = [CtLiteralImpl]false;
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isOverrideUsernameClaimEnabled = [CtInvocationImpl][CtTypeAccessImpl]java.lang.Boolean.parseBoolean([CtInvocationImpl][CtFieldReadImpl]realmConfig.getIsOverrideUsernameClaimFromInternalUsername());
        }
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String claim : [CtVariableReadImpl]claims) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.ClaimMapping mapping;
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]mapping = [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.ClaimMapping) ([CtFieldReadImpl]claimManager.getClaimMapping([CtVariableReadImpl]claim)));
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]e);
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String property = [CtLiteralImpl]null;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String value = [CtLiteralImpl]null;
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]mapping != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]domainName != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> attrMap = [CtInvocationImpl][CtVariableReadImpl]mapping.getMappedAttributes();
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]attrMap != [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String attr = [CtLiteralImpl]null;
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtAssignmentImpl]([CtVariableWriteImpl]attr = [CtInvocationImpl][CtVariableReadImpl]attrMap.get([CtInvocationImpl][CtVariableReadImpl]domainName.toUpperCase())) != [CtLiteralImpl]null) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]property = [CtVariableReadImpl]attr;
                        } else [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]property = [CtInvocationImpl][CtVariableReadImpl]mapping.getMappedAttribute();
                        }
                    }
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]property = [CtInvocationImpl][CtVariableReadImpl]mapping.getMappedAttribute();
                }
                [CtAssignmentImpl][CtVariableWriteImpl]value = [CtInvocationImpl][CtVariableReadImpl]userPropertyValues.get([CtVariableReadImpl]property);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isOverrideUsernameClaimEnabled && [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.USERNAME_CLAIM_URI.equals([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]mapping.getClaim().getClaimUri())) [CtBlockImpl]{
                    [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"The username claim value is overridden by the username :" + [CtVariableReadImpl]userName);
                    }
                    [CtAssignmentImpl][CtVariableWriteImpl]value = [CtVariableReadImpl]userName;
                }
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]value != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]value.trim().length() > [CtLiteralImpl]0)) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]finalValues.put([CtVariableReadImpl]claim, [CtVariableReadImpl]value);
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]property == [CtLiteralImpl]null) && [CtInvocationImpl][CtVariableReadImpl]claim.equals([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.DISAPLAY_NAME_CLAIM)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]property = [CtInvocationImpl][CtFieldReadImpl][CtThisAccessImpl]this.realmConfig.getUserStoreProperty([CtTypeAccessImpl]LDAPConstants.DISPLAY_NAME_ATTRIBUTE);
                }
                [CtAssignmentImpl][CtVariableWriteImpl]value = [CtInvocationImpl][CtVariableReadImpl]userPropertyValues.get([CtVariableReadImpl]property);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]value != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]value.trim().length() > [CtLiteralImpl]0)) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]finalValues.put([CtVariableReadImpl]claim, [CtVariableReadImpl]value);
                }
            }
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]getAgain.size() > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtLocalVariableImpl][CtCommentImpl]// oh the beautiful recursion
            [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> mapClaimValues = [CtInvocationImpl][CtThisAccessImpl]this.getUserClaimValues([CtVariableReadImpl]userName, [CtInvocationImpl](([CtArrayTypeReferenceImpl]java.lang.String[]) ([CtVariableReadImpl]getAgain.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtInvocationImpl][CtVariableReadImpl]getAgain.size()]))), [CtVariableReadImpl]profileName);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Iterator<[CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>> ite3 = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]mapClaimValues.entrySet().iterator();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]ite3.hasNext()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> entry = [CtInvocationImpl][CtVariableReadImpl]ite3.next();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]entry.getValue() != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]finalValues.put([CtInvocationImpl][CtVariableReadImpl]entry.getKey(), [CtInvocationImpl][CtVariableReadImpl]entry.getValue());
                }
            } 
        }
        [CtLocalVariableImpl][CtCommentImpl]// We treat roles claim in special way.
        [CtArrayTypeReferenceImpl]java.lang.String[] roles = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtVariableReadImpl]requireRoles) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]roles = [CtInvocationImpl]getRoleListOfUser([CtVariableReadImpl]userName);
        } else [CtIfImpl]if ([CtVariableReadImpl]requireIntRoles) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]roles = [CtInvocationImpl]doGetInternalRoleListOfUser([CtVariableReadImpl]userName, [CtLiteralImpl]"*");
        } else [CtIfImpl]if ([CtVariableReadImpl]requireExtRoles) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> rolesList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] externalRoles = [CtInvocationImpl]doGetExternalRoleListOfUser([CtVariableReadImpl]userName, [CtLiteralImpl]"*");
            [CtInvocationImpl][CtVariableReadImpl]rolesList.addAll([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]externalRoles));
            [CtIfImpl][CtCommentImpl]// if only shared enable
            if ([CtInvocationImpl]isSharedGroupEnabled()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] sharedRoles = [CtInvocationImpl]doGetSharedRoleListOfUser([CtVariableReadImpl]userName, [CtLiteralImpl]null, [CtLiteralImpl]"*");
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]sharedRoles != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]rolesList.addAll([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]sharedRoles));
                }
            }
            [CtAssignmentImpl][CtVariableWriteImpl]roles = [CtInvocationImpl][CtVariableReadImpl]rolesList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtInvocationImpl][CtVariableReadImpl]rolesList.size()]);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]roles != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]roles.length > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userAttributeSeparator = [CtLiteralImpl]",";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String claimSeparator = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.MULTI_ATTRIBUTE_SEPARATOR);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]claimSeparator != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]claimSeparator.trim().isEmpty())) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userAttributeSeparator = [CtVariableReadImpl]claimSeparator;
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String delim = [CtLiteralImpl]"";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.StringBuffer roleBf = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.StringBuffer();
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String role : [CtVariableReadImpl]roles) [CtBlockImpl]{
                [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]roleBf.append([CtVariableReadImpl]delim).append([CtVariableReadImpl]role);
                [CtAssignmentImpl][CtVariableWriteImpl]delim = [CtVariableReadImpl]userAttributeSeparator;
            }
            [CtInvocationImpl][CtVariableReadImpl]finalValues.put([CtVariableReadImpl]roleClaim, [CtInvocationImpl][CtVariableReadImpl]roleBf.toString());
        }
        [CtReturnImpl]return [CtVariableReadImpl]finalValues;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Handles the processing of any special user store attribute values after retrieval.
     *
     * @param userName
     * 		Username of the user.
     * @param userAttributes
     * 		Un-processed map (user store attribute name -> attribute value) of user store.
     * @param profileName
     * 		Profile name of the user.
     */
    protected [CtTypeReferenceImpl]void processAttributesAfterRetrieval([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> userAttributes, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) [CtBlockImpl]{
        [CtCommentImpl]// Not implemented for AbstractUserStoreManager, may have implementations at subclasses.
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Handles the processing of any special user store attribute values before update.
     *
     * @param userName
     * 		Username of the user.
     * @param userAttributes
     * 		Un-processed map (user store attribute name -> attribute value) of user store.
     * @param profileName
     * 		Profile name of the user.
     */
    protected [CtTypeReferenceImpl]void processAttributesBeforeUpdate([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtWildcardReferenceImpl]? extends [CtTypeReferenceImpl]java.lang.Object> userAttributes, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) [CtBlockImpl]{
        [CtCommentImpl]// Not implemented for AbstractUserStoreManager, may have implementations at subclasses.
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Handles the processing of any special user store attribute values after retrieval.
     *
     * @param userID
     * 		User ID of the user.
     * @param userAttributes
     * 		Un-processed map (user store attribute name -> attribute value) of user store.
     * @param profileName
     * 		Profile name of the user.
     */
    protected [CtTypeReferenceImpl]void processAttributesAfterRetrievalWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> userAttributes, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) [CtBlockImpl]{
        [CtCommentImpl]// Not implemented for AbstractUserStoreManager, may have implementations at subclasses.
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Handles the processing of any special user store attribute values before update.
     *
     * @param userID
     * 		User ID of the user.
     * @param userAttributes
     * 		Un-processed map (user store attribute name -> attribute value) of user store.
     * @param profileName
     * 		Profile name of the user.
     */
    protected [CtTypeReferenceImpl]void processAttributesBeforeUpdateWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtWildcardReferenceImpl]? extends [CtTypeReferenceImpl]java.lang.Object> userAttributes, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) [CtBlockImpl]{
        [CtCommentImpl]// Not implemented for AbstractUserStoreManager, may have implementations at subclasses.
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @return  */
    protected [CtTypeReferenceImpl]java.lang.String getEveryOneRoleName() [CtBlockImpl]{
        [CtReturnImpl]return [CtInvocationImpl][CtFieldReadImpl]realmConfig.getEveryOneRoleName();
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @return  */
    protected [CtTypeReferenceImpl]java.lang.String getAdminRoleName() [CtBlockImpl]{
        [CtReturnImpl]return [CtInvocationImpl][CtFieldReadImpl]realmConfig.getAdminRoleName();
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param credential
     * @return  * @throws UserStoreException
     */
    protected [CtTypeReferenceImpl]boolean checkUserPasswordValid([CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.Object.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"checkUserPasswordValid", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]credential }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.lang.Boolean) (object));
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]credential == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]false;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.Secret credentialObj;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]credentialObj = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.Secret.getSecret([CtVariableReadImpl]credential);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.UnsupportedSecretTypeException e) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Unsupported credential type", [CtVariableReadImpl]e);
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtFieldReadImpl][CtInvocationImpl][CtVariableReadImpl]credentialObj.getChars().length < [CtLiteralImpl]1) [CtBlockImpl]{
                [CtReturnImpl]return [CtLiteralImpl]false;
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String regularExpression = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_JAVA_REG_EX);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]regularExpression != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl]isFormatCorrect([CtVariableReadImpl]regularExpression, [CtInvocationImpl][CtVariableReadImpl]credentialObj.getChars())) [CtBlockImpl]{
                    [CtReturnImpl]return [CtLiteralImpl]true;
                } else [CtBlockImpl]{
                    [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Submitted password does not match with the regex " + [CtVariableReadImpl]regularExpression);
                    }
                    [CtReturnImpl]return [CtLiteralImpl]false;
                }
            }
            [CtReturnImpl]return [CtLiteralImpl]true;
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]credentialObj.clear();
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Validate credential object.
     *
     * @param credential
     * 		credentials object to be validated
     * @return is valid credentials object
     * @throws UserStoreException
     */
    protected [CtTypeReferenceImpl]boolean isValidCredentials([CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.Object.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"isValidCredentials", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]credential }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.lang.Boolean) (object));
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]credential == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]false;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.Secret credentialObj;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]credentialObj = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.Secret.getSecret([CtVariableReadImpl]credential);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.UnsupportedSecretTypeException e) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Unsupported credential type", [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtBinaryOperatorImpl][CtFieldReadImpl][CtInvocationImpl][CtVariableReadImpl]credentialObj.getChars().length >= [CtLiteralImpl]1;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param userName
     * @return  * @throws UserStoreException
     */
    protected [CtTypeReferenceImpl]boolean checkUserNameValid([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl]isValidUserName([CtVariableReadImpl]userName)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String regularExpression = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_USER_NAME_JAVA_REG_EX);
            [CtIfImpl][CtCommentImpl]// Inorder to support both UsernameJavaRegEx and UserNameJavaRegEx.
            if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]regularExpression) || [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtInvocationImpl][CtVariableReadImpl]regularExpression.trim())) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]regularExpression = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_USER_NAME_JAVA_REG);
            }
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.multitenancy.MultitenantUtils.isEmailUserName()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]regularExpression = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_USER_NAME_WITH_EMAIL_JS_REG_EX);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]regularExpression) || [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtInvocationImpl][CtVariableReadImpl]regularExpression.trim())) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]regularExpression = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_USER_NAME_JAVA_REG_EX);
                }
                [CtIfImpl][CtCommentImpl]// Inorder to support both UsernameJavaRegEx and UserNameJavaRegEx.
                if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]regularExpression) || [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtInvocationImpl][CtVariableReadImpl]regularExpression.trim())) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]regularExpression = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_USER_NAME_JAVA_REG);
                }
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]regularExpression) || [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtInvocationImpl][CtVariableReadImpl]regularExpression.trim())) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]regularExpression = [CtFieldReadImpl]UserCoreConstants.RealmConfig.EMAIL_VALIDATION_REGEX;
                }
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]regularExpression != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]regularExpression = [CtInvocationImpl][CtVariableReadImpl]regularExpression.trim();
            }
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]regularExpression)) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl]isFormatCorrect([CtVariableReadImpl]regularExpression, [CtVariableReadImpl]userName)) [CtBlockImpl]{
                    [CtReturnImpl]return [CtLiteralImpl]true;
                } else [CtBlockImpl]{
                    [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Username " + [CtVariableReadImpl]userName) + [CtLiteralImpl]" does not match with the regex ") + [CtVariableReadImpl]regularExpression);
                    }
                    [CtReturnImpl]return [CtLiteralImpl]false;
                }
            }
            [CtReturnImpl]return [CtLiteralImpl]true;
        }
        [CtReturnImpl]return [CtLiteralImpl]false;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Validate username. It should be non-null, non-blank value which should not equal to REGISTRY_SYSTEM_USERNAME.
     *
     * @param userName
     * 		username to be validated
     * @return is username valid
     * @throws UserStoreException
     * 		when checking the call is secure or not
     */
    protected [CtTypeReferenceImpl]boolean isValidUserName([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"isValidUserName", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.lang.Boolean) (object));
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]userName == [CtLiteralImpl]null) || [CtInvocationImpl][CtTypeAccessImpl]CarbonConstants.REGISTRY_SYSTEM_USERNAME.equals([CtVariableReadImpl]userName)) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]false;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String leadingOrTrailingSpaceAllowedInUserName = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.LEADING_OR_TRAILING_SPACE_ALLOWED_IN_USERNAME);
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]leadingOrTrailingSpaceAllowedInUserName)) [CtBlockImpl]{
            [CtAssignmentImpl][CtCommentImpl]// Keeping old behavior for backward-compatibility.
            [CtVariableWriteImpl]userName = [CtInvocationImpl][CtVariableReadImpl]userName.trim();
        } else [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"'LeadingOrTrailingSpaceAllowedInUserName' property is set to : " + [CtVariableReadImpl]leadingOrTrailingSpaceAllowedInUserName) + [CtLiteralImpl]". Hence username trimming will be skipped during ") + [CtLiteralImpl]"validation for the username: ") + [CtVariableReadImpl]userName);
        }
        [CtReturnImpl]return [CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]userName.isEmpty();
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param roleName
     * @return  */
    protected [CtTypeReferenceImpl]boolean isRoleNameValid([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName) [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]roleName == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]false;
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]roleName.length() < [CtLiteralImpl]1) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]false;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String regularExpression = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_ROLE_NAME_JAVA_REG_EX);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]regularExpression != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isFormatCorrect([CtVariableReadImpl]regularExpression, [CtVariableReadImpl]roleName)) [CtBlockImpl]{
                [CtReturnImpl]return [CtLiteralImpl]false;
            }
        }
        [CtReturnImpl]return [CtLiteralImpl]true;
    }

    [CtMethodImpl]protected [CtArrayTypeReferenceImpl]java.lang.String[] getRoleListOfUserFromCache([CtParameterImpl][CtTypeReferenceImpl]int tenantID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName) [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtFieldReadImpl]userRolesCache != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String usernameWithDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]userName, [CtInvocationImpl]getMyDomainName());
            [CtReturnImpl]return [CtInvocationImpl][CtFieldReadImpl]userRolesCache.getRolesListOfUser([CtFieldReadImpl]cacheIdentifier, [CtVariableReadImpl]tenantID, [CtVariableReadImpl]usernameWithDomain);
        }
        [CtReturnImpl]return [CtLiteralImpl]null;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param tenantID
     */
    protected [CtTypeReferenceImpl]void clearUserRolesCacheByTenant([CtParameterImpl][CtTypeReferenceImpl]int tenantID) [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtFieldReadImpl]userRolesCache != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]userRolesCache.clearCacheByTenant([CtVariableReadImpl]tenantID);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.authorization.AuthorizationCache authorizationCache = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.authorization.AuthorizationCache.getInstance();
        [CtInvocationImpl][CtVariableReadImpl]authorizationCache.clearCacheByTenant([CtVariableReadImpl]tenantID);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param tenantID
     * @param userName
     * @param roleList
     */
    protected [CtTypeReferenceImpl]void addToUserRolesCache([CtParameterImpl][CtTypeReferenceImpl]int tenantID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] roleList) [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtFieldReadImpl]userRolesCache != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String usernameWithDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]userName, [CtInvocationImpl]getMyDomainName());
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] rolesWithDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToNames([CtVariableReadImpl]roleList, [CtInvocationImpl]getMyDomainName());
            [CtInvocationImpl][CtFieldReadImpl]userRolesCache.addToCache([CtFieldReadImpl]cacheIdentifier, [CtVariableReadImpl]tenantID, [CtVariableReadImpl]usernameWithDomain, [CtVariableReadImpl]rolesWithDomain);
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.authorization.AuthorizationCache authorizationCache = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.authorization.AuthorizationCache.getInstance();
            [CtInvocationImpl][CtVariableReadImpl]authorizationCache.clearCacheByTenant([CtVariableReadImpl]tenantID);
        }
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]void clearUserRolesCache([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userIdentifier) [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String usernameWithDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]userIdentifier, [CtInvocationImpl]getMyDomainName());
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtFieldReadImpl]userRolesCache != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]userRolesCache.clearCacheEntry([CtFieldReadImpl]cacheIdentifier, [CtFieldReadImpl]tenantId, [CtVariableReadImpl]usernameWithDomain);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.authorization.AuthorizationCache authorizationCache = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.authorization.AuthorizationCache.getInstance();
        [CtInvocationImpl][CtVariableReadImpl]authorizationCache.clearCacheByUser([CtFieldReadImpl]tenantId, [CtVariableReadImpl]usernameWithDomain);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * {@inheritDoc }
     */
    protected [CtTypeReferenceImpl]void initUserRolesCache() [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userRolesCacheEnabledString = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_ROLES_CACHE_ENABLED);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userCoreCacheIdentifier = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_USER_CORE_CACHE_IDENTIFIER);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]userCoreCacheIdentifier != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userCoreCacheIdentifier.trim().length() > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtAssignmentImpl][CtFieldWriteImpl]cacheIdentifier = [CtVariableReadImpl]userCoreCacheIdentifier;
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtFieldWriteImpl]cacheIdentifier = [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.DEFAULT_CACHE_IDENTIFIER;
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]userRolesCacheEnabledString != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]userRolesCacheEnabledString.equals([CtLiteralImpl]""))) [CtBlockImpl]{
            [CtAssignmentImpl][CtFieldWriteImpl]userRolesCacheEnabled = [CtInvocationImpl][CtTypeAccessImpl]java.lang.Boolean.parseBoolean([CtVariableReadImpl]userRolesCacheEnabledString);
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"User Roles Cache is configured to:" + [CtVariableReadImpl]userRolesCacheEnabledString);
            }
        } else [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.info([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"User Roles Cache is not configured. Default value: " + [CtFieldReadImpl]userRolesCacheEnabled) + [CtLiteralImpl]" is taken.");
        }
        [CtIfImpl]if ([CtFieldReadImpl]userRolesCacheEnabled) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]int timeOut = [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.USER_ROLE_CACHE_DEFAULT_TIME_OUT;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String timeOutString = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_USER_ROLE_CACHE_TIME_OUT);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]timeOutString != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]timeOut = [CtInvocationImpl][CtTypeAccessImpl]java.lang.Integer.parseInt([CtVariableReadImpl]timeOutString);
            }
            [CtAssignmentImpl][CtFieldWriteImpl]userRolesCache = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.common.UserRolesCache.getInstance();
            [CtInvocationImpl][CtFieldReadImpl]userRolesCache.setTimeOut([CtVariableReadImpl]timeOut);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param regularExpression
     * @param attribute
     * @return  */
    private [CtTypeReferenceImpl]boolean isFormatCorrect([CtParameterImpl][CtTypeReferenceImpl]java.lang.String regularExpression, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String attribute) [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.regex.Pattern p2 = [CtInvocationImpl][CtTypeAccessImpl]java.util.regex.Pattern.compile([CtVariableReadImpl]regularExpression);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.regex.Matcher m2 = [CtInvocationImpl][CtVariableReadImpl]p2.matcher([CtVariableReadImpl]attribute);
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]m2.matches();
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]boolean isFormatCorrect([CtParameterImpl][CtTypeReferenceImpl]java.lang.String regularExpression, [CtParameterImpl][CtArrayTypeReferenceImpl]char[] attribute) [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean matches;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.nio.CharBuffer charBuffer = [CtInvocationImpl][CtTypeAccessImpl]java.nio.CharBuffer.wrap([CtVariableReadImpl]attribute);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.regex.Pattern p2 = [CtInvocationImpl][CtTypeAccessImpl]java.util.regex.Pattern.compile([CtVariableReadImpl]regularExpression);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.regex.Matcher m2 = [CtInvocationImpl][CtVariableReadImpl]p2.matcher([CtVariableReadImpl]charBuffer);
        [CtAssignmentImpl][CtVariableWriteImpl]matches = [CtInvocationImpl][CtVariableReadImpl]m2.matches();
        [CtReturnImpl]return [CtVariableReadImpl]matches;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This is to replace escape characters in user name at user login if replace escape characters
     * enabled in user-mgt.xml. Some User Stores like ApacheDS stores user names by replacing escape
     * characters. In that case, we have to parse the username accordingly.
     *
     * @param userName
     */
    protected [CtTypeReferenceImpl]java.lang.String replaceEscapeCharacters([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName) [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Replacing escape characters in " + [CtVariableReadImpl]userName);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String replaceEscapeCharactersAtUserLoginString = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_REPLACE_ESCAPE_CHARACTERS_AT_USER_LOGIN);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]replaceEscapeCharactersAtUserLoginString != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtFieldWriteImpl]replaceEscapeCharactersAtUserLogin = [CtInvocationImpl][CtTypeAccessImpl]java.lang.Boolean.parseBoolean([CtVariableReadImpl]replaceEscapeCharactersAtUserLoginString);
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Replace escape characters at userlogin is configured to: " + [CtVariableReadImpl]replaceEscapeCharactersAtUserLoginString);
            }
            [CtIfImpl]if ([CtFieldReadImpl]replaceEscapeCharactersAtUserLogin) [CtBlockImpl]{
                [CtReturnImpl][CtCommentImpl]// Currently only '\' & '\\' are identified as escape characters
                [CtCommentImpl]// that needs to be
                [CtCommentImpl]// replaced.
                return [CtInvocationImpl][CtVariableReadImpl]userName.replaceAll([CtLiteralImpl]"\\\\", [CtLiteralImpl]"\\\\\\\\");
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]userName;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * TODO: Remove this method. We should not use DTOs
     *
     * @return  * @throws UserStoreException
     */
    public [CtArrayTypeReferenceImpl]org.wso2.carbon.user.core.dto.RoleDTO[] getAllSecondaryRoleDTOs() throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{  };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getAllSecondaryRoleDTOs", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{  }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtArrayTypeReferenceImpl]org.wso2.carbon.user.core.dto.RoleDTO[]) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secondary = [CtInvocationImpl][CtThisAccessImpl]this.getSecondaryUserStoreManager();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.dto.RoleDTO> roleList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]org.wso2.carbon.user.core.dto.RoleDTO>();
        [CtWhileImpl]while ([CtBinaryOperatorImpl][CtVariableReadImpl]secondary != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domain = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]secondary.getRealmConfiguration().getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME);
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] roles = [CtInvocationImpl][CtVariableReadImpl]secondary.getRoleNames([CtLiteralImpl]true);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]roles != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]roles.length > [CtLiteralImpl]0)) [CtBlockImpl]{
                [CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.addAll([CtVariableReadImpl]roleList, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.convertRoleNamesToRoleDTO([CtVariableReadImpl]roles, [CtVariableReadImpl]domain));
            }
            [CtAssignmentImpl][CtVariableWriteImpl]secondary = [CtInvocationImpl][CtVariableReadImpl]secondary.getSecondaryUserStoreManager();
        } 
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]roleList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.dto.RoleDTO[[CtInvocationImpl][CtVariableReadImpl]roleList.size()]);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param roleName
     * @param userList
     * @param permissions
     * @throws UserStoreException
     */
    public [CtTypeReferenceImpl]void addSystemRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList, [CtParameterImpl][CtArrayTypeReferenceImpl]org.wso2.carbon.user.core.Permission[] permissions) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isRoleNameValid([CtVariableReadImpl]roleName)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String regEx = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_ROLE_NAME_JAVA_REG_EX);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_ROLE_NAME.getCode();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_ROLE_NAME.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]regEx);
            [CtInvocationImpl]handleAddRoleFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtInvocationImpl]createSystemRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param roleName
     * @param filter
     * @return  * @throws UserStoreException
     */
    protected abstract [CtArrayTypeReferenceImpl]java.lang.String[] doGetUserListOfRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException;

    [CtMethodImpl][CtJavaDocImpl]/**
     * Return the list of users belong to the given role for the given filter and max item limit.
     *
     * @param roleName
     * 		Name of the role.
     * @param filter
     * 		String filter value.
     * @param maxItemLimit
     * 		Maximum number of users in the returned array. A negative value return all users and zero
     * 		returns zero users.
     * @return An array of users.
     * @throws UserStoreException
     */
    protected [CtArrayTypeReferenceImpl]java.lang.String[] doGetUserListOfRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int maxItemLimit) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Using the default implementation of retrieving users in the role: " + [CtVariableReadImpl]roleName) + [CtLiteralImpl]" only with ") + [CtLiteralImpl]"the filter: ") + [CtVariableReadImpl]filter) + [CtLiteralImpl]". The provided value: ") + [CtVariableReadImpl]maxItemLimit) + [CtLiteralImpl]" for the maximum limit ") + [CtLiteralImpl]"of returning users is ignored");
        }
        [CtReturnImpl]return [CtInvocationImpl]doGetUserListOfRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]filter);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Return the list of users belong to the given role for the given filter.
     *
     * @param roleName
     * 		role name.
     * @param filter
     * 		filter.
     * @return user list of the given role.
     * @throws UserStoreException
     * 		Thrown by the underlying UserStoreManager.
     */
    protected [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> doGetUserListOfRoleWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doGetUserListOfRoleWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doGetUserListOfRoleWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Return the list of users belong to the given role for the given filter.
     *
     * @param roleName
     * 		role name.
     * @param filter
     * 		filter.
     * @param maxItemLimit
     * 		Maximum number of users in the returned array. A negative value return all users and zero
     * 		returns zero users.
     * @return user list of the given role.
     * @throws UserStoreException
     * 		Thrown by the underlying UserStoreManager.
     */
    protected [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> doGetUserListOfRoleWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int maxItemLimit) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Using the default implementation of retrieving users in the role: " + [CtVariableReadImpl]roleName) + [CtLiteralImpl]" only with ") + [CtLiteralImpl]"the filter: ") + [CtVariableReadImpl]filter) + [CtLiteralImpl]". The provided value: ") + [CtVariableReadImpl]maxItemLimit) + [CtLiteralImpl]" for the maximum limit ") + [CtLiteralImpl]"of returning users is ignored");
        }
        [CtReturnImpl]return [CtInvocationImpl]doGetUserListOfRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]filter);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This will return the roles list of given user ID.
     *
     * @param userID
     * 		user ID.
     * @param filter
     * 		filter.
     * @return user list of the given role.
     * @throws UserStoreException
     * 		Thrown by the underlying UserStoreManager.
     */
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> doGetRoleListOfUserWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"doGetRoleListOfUserWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userID, [CtVariableReadImpl]filter }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String username = [CtInvocationImpl]getUserNameFromUserID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]username != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] roleListOfUserFromCache = [CtInvocationImpl]getRoleListOfUserFromCache([CtFieldReadImpl][CtThisAccessImpl]this.tenantId, [CtVariableReadImpl]username);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]roleListOfUserFromCache != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> roleList = [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]roleListOfUserFromCache);
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]roleList.isEmpty()) [CtBlockImpl]{
                    [CtReturnImpl]return [CtVariableReadImpl]roleList;
                }
            }
        }
        [CtReturnImpl]return [CtInvocationImpl]getUserRolesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]filter);
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> getUserRolesWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> internalRoles = [CtInvocationImpl]doGetInternalRoleListOfUserWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]filter);
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] modifiedExternalRoleList = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtFieldReadImpl]readGroupsEnabled && [CtInvocationImpl]doCheckExistingUserWithID([CtVariableReadImpl]userID)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> roles = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] externalRoles = [CtInvocationImpl]doGetExternalRoleListOfUserWithID([CtVariableReadImpl]userID, [CtLiteralImpl]"*");
            [CtInvocationImpl][CtVariableReadImpl]roles.addAll([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]externalRoles));
            [CtIfImpl]if ([CtInvocationImpl]isSharedGroupEnabled()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] sharedRoles = [CtInvocationImpl]doGetSharedRoleListOfUserWithID([CtVariableReadImpl]userID, [CtLiteralImpl]null, [CtLiteralImpl]"*");
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]sharedRoles != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]roles.addAll([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]sharedRoles));
                }
            }
            [CtAssignmentImpl][CtVariableWriteImpl]modifiedExternalRoleList = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToNames([CtInvocationImpl][CtVariableReadImpl]roles.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]), [CtInvocationImpl]getMyDomainName());
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] roleList = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.combine([CtVariableReadImpl]modifiedExternalRoleList, [CtVariableReadImpl]internalRoles);
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener userOperationEventListener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userOperationEventListener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (userOperationEventListener)).doPostGetRoleListOfUserWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]filter, [CtVariableReadImpl]roleList, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtBreakImpl]break;
                }
            }
        }
        [CtLocalVariableImpl][CtCommentImpl]// Add to user role cache uisng username.
        [CtTypeReferenceImpl]java.lang.String username = [CtInvocationImpl]getUserNameFromUserID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]username != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl]addToUserRolesCache([CtFieldReadImpl][CtThisAccessImpl]this.tenantId, [CtVariableReadImpl]username, [CtVariableReadImpl]roleList);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]roleList);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This will return the roles list of given user name.
     *
     * @param userName
     * 		user name.
     * @param filter
     * 		filter.
     * @return user list of the given role.
     * @throws UserStoreException
     * 		Thrown by the underlying UserStoreManager.
     */
    public final [CtArrayTypeReferenceImpl]java.lang.String[] doGetRoleListOfUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"doGetRoleListOfUser", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userName, [CtVariableReadImpl]filter }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtArrayTypeReferenceImpl]java.lang.String[]) (object));
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] roleList = [CtInvocationImpl]getRoleListOfUserFromCache([CtFieldReadImpl][CtThisAccessImpl]this.tenantId, [CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]roleList != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]roleList.length > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtReturnImpl]return [CtVariableReadImpl]roleList;
        }
        [CtReturnImpl]return [CtInvocationImpl]getUserRoles([CtVariableReadImpl]userName, [CtVariableReadImpl]filter);
    }

    [CtMethodImpl]private [CtArrayTypeReferenceImpl]java.lang.String[] getUserRoles([CtParameterImpl][CtTypeReferenceImpl]java.lang.String username, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] internalRoles = [CtInvocationImpl]doGetInternalRoleListOfUser([CtVariableReadImpl]username, [CtVariableReadImpl]filter);
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] modifiedExternalRoleList = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtFieldReadImpl]readGroupsEnabled && [CtInvocationImpl]doCheckExistingUser([CtVariableReadImpl]username)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> roles = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] externalRoles = [CtInvocationImpl]doGetExternalRoleListOfUser([CtVariableReadImpl]username, [CtLiteralImpl]"*");
            [CtInvocationImpl][CtVariableReadImpl]roles.addAll([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]externalRoles));
            [CtIfImpl]if ([CtInvocationImpl]isSharedGroupEnabled()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] sharedRoles = [CtInvocationImpl]doGetSharedRoleListOfUser([CtVariableReadImpl]username, [CtLiteralImpl]null, [CtLiteralImpl]"*");
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]sharedRoles != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]roles.addAll([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]sharedRoles));
                }
            }
            [CtAssignmentImpl][CtVariableWriteImpl]modifiedExternalRoleList = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToNames([CtInvocationImpl][CtVariableReadImpl]roles.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtInvocationImpl][CtVariableReadImpl]roles.size()]), [CtInvocationImpl]getMyDomainName());
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] roleList = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.combine([CtVariableReadImpl]internalRoles, [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]modifiedExternalRoleList));
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener userOperationEventListener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userOperationEventListener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (userOperationEventListener)).doPostGetRoleListOfUser([CtVariableReadImpl]username, [CtVariableReadImpl]filter, [CtVariableReadImpl]roleList, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtBreakImpl]break;
                }
            }
        }
        [CtInvocationImpl]addToUserRolesCache([CtFieldReadImpl][CtThisAccessImpl]this.tenantId, [CtVariableReadImpl]username, [CtVariableReadImpl]roleList);
        [CtReturnImpl]return [CtVariableReadImpl]roleList;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Retrieve the list of users directly from the database,
     * without using the cache.
     *
     * @param username
     * 		username of the user
     * @param filter
     * 		filter to be used when searching for roles
     * @return the list of roles which the specified users belongs to
     * @throws UserStoreException
     */
    public final [CtArrayTypeReferenceImpl]java.lang.String[] getRoleListOfUserFromDatabase([CtParameterImpl][CtTypeReferenceImpl]java.lang.String username, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getRoleListOfUserFromDatabase", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]username, [CtVariableReadImpl]filter }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtArrayTypeReferenceImpl]java.lang.String[]) (object));
        }
        [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtInvocationImpl]getUserStore([CtVariableReadImpl]username))) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]username);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userID == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtReturnImpl][CtCommentImpl]// According to implementation, getRoleListOfUser method would return everyone role name for all users.
                return [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtInvocationImpl][CtFieldReadImpl]realmConfig.getEveryOneRoleName() };
            }
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl]getUserRolesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]filter).toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]);
        } else [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl]getUserRoles([CtVariableReadImpl]username, [CtVariableReadImpl]filter);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param filter
     * @return  * @throws UserStoreException
     */
    public final [CtArrayTypeReferenceImpl]java.lang.String[] getHybridRoles([CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtReturnImpl]return [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.getHybridRoles([CtVariableReadImpl]filter);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param claimList
     * @return  * @throws UserStoreException
     */
    protected [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> getMappingAttributeList([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> claimList) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String> attributeList = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Iterator<[CtTypeReferenceImpl]java.lang.String> claimIter = [CtLiteralImpl]null;
        [CtAssignmentImpl][CtVariableWriteImpl]attributeList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claimList == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtReturnImpl]return [CtVariableReadImpl]attributeList;
        }
        [CtAssignmentImpl][CtVariableWriteImpl]claimIter = [CtInvocationImpl][CtVariableReadImpl]claimList.iterator();
        [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]claimIter.hasNext()) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]attributeList.add([CtInvocationImpl][CtFieldReadImpl]claimManager.getAttributeName([CtInvocationImpl]getMyDomainName(), [CtInvocationImpl][CtVariableReadImpl]claimIter.next()));
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]e);
            }
        } 
        [CtReturnImpl]return [CtVariableReadImpl]attributeList;
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]void doInitialSetup() throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtAssignmentImpl][CtFieldWriteImpl]systemUserRoleManager = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.system.SystemUserRoleManager([CtFieldReadImpl]dataSource, [CtFieldReadImpl]tenantId);
        [CtAssignmentImpl][CtFieldWriteImpl]hybridRoleManager = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.hybrid.HybridRoleManager([CtFieldReadImpl]dataSource, [CtFieldReadImpl]tenantId, [CtFieldReadImpl]realmConfig, [CtFieldReadImpl]userRealm);
        [CtAssignmentImpl][CtFieldWriteImpl]userUniqueIDDomainResolver = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserUniqueIDDomainResolver([CtFieldReadImpl]dataSource);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @return whether this is the initial startup
     * @throws UserStoreException
     */
    protected [CtTypeReferenceImpl]void doInitialUserAdding() throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String systemUser = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtTypeAccessImpl]CarbonConstants.REGISTRY_ANONNYMOUS_USERNAME);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String systemRole = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtTypeAccessImpl]CarbonConstants.REGISTRY_ANONNYMOUS_ROLE_NAME);
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.isExistingSystemUser([CtVariableReadImpl]systemUser)) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.addSystemUser([CtVariableReadImpl]systemUser, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.getPolicyFriendlyRandomPassword([CtVariableReadImpl]systemUser), [CtLiteralImpl]null);
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.common.ERROR_CODE_DUPLICATE_WHILE_ADDING_A_SYSTEM_USER.getCode().equals([CtInvocationImpl][CtVariableReadImpl]e.getErrorCode())) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.warn([CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtBinaryOperatorImpl][CtLiteralImpl]"System User :%s has already added. Hence, continue without adding the " + [CtLiteralImpl]"user.", [CtVariableReadImpl]systemUser));
                } else [CtBlockImpl]{
                    [CtThrowImpl]throw [CtVariableReadImpl]e;
                }
            }
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.isExistingRole([CtVariableReadImpl]systemRole)) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.addSystemRole([CtVariableReadImpl]systemRole, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]systemUser });
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.common.ERROR_CODE_DUPLICATE_WHILE_ADDING_A_SYSTEM_ROLE.getCode().equals([CtInvocationImpl][CtVariableReadImpl]e.getErrorCode())) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.warn([CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtBinaryOperatorImpl][CtLiteralImpl]"System Role :%s is already added. Hence, continue without adding the " + [CtLiteralImpl]"role.", [CtVariableReadImpl]systemRole), [CtVariableReadImpl]e);
                } else [CtBlockImpl]{
                    [CtThrowImpl]throw [CtVariableReadImpl]e;
                }
            }
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.isExistingRole([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtInvocationImpl][CtFieldReadImpl]realmConfig.getEveryOneRoleName()))) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.addHybridRole([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtInvocationImpl][CtFieldReadImpl]realmConfig.getEveryOneRoleName()), [CtLiteralImpl]null);
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.common.ERROR_CODE_DUPLICATE_WHILE_ADDING_A_HYBRID_ROLE.getCode().equals([CtInvocationImpl][CtVariableReadImpl]e.getErrorCode())) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.warn([CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtBinaryOperatorImpl][CtLiteralImpl]"Hybrid Role :%s is already added. Hence, continue without adding the " + [CtLiteralImpl]"role.", [CtVariableReadImpl]systemRole));
                } else [CtBlockImpl]{
                    [CtThrowImpl]throw [CtVariableReadImpl]e;
                }
            }
        }
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]boolean isInitSetupDone() throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isInitialSetUp = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String systemUser = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtTypeAccessImpl]CarbonConstants.REGISTRY_ANONNYMOUS_USERNAME);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String systemRole = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtTypeAccessImpl]CarbonConstants.REGISTRY_ANONNYMOUS_ROLE_NAME);
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.isExistingSystemUser([CtVariableReadImpl]systemUser)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isInitialSetUp = [CtLiteralImpl]true;
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.isExistingRole([CtVariableReadImpl]systemRole)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isInitialSetUp = [CtLiteralImpl]true;
        }
        [CtReturnImpl]return [CtVariableReadImpl]isInitialSetUp;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @throws UserStoreException
     */
    protected [CtTypeReferenceImpl]void addInitialAdminData([CtParameterImpl][CtTypeReferenceImpl]boolean addAdmin, [CtParameterImpl][CtTypeReferenceImpl]boolean initialSetup) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtFieldReadImpl]realmConfig.getAdminRoleName() == [CtLiteralImpl]null) || [CtBinaryOperatorImpl]([CtInvocationImpl][CtFieldReadImpl]realmConfig.getAdminUserName() == [CtLiteralImpl]null)) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtLiteralImpl]"Admin user name or role name is not valid. Please provide valid values.");
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Admin user name or role name is not valid. Please provide valid values.");
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String adminUserName = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtInvocationImpl][CtFieldReadImpl]realmConfig.getAdminUserName());
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String adminRoleName = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtInvocationImpl][CtFieldReadImpl]realmConfig.getAdminRoleName());
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean userExist = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean roleExist = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isInternalRole = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String adminUserID = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtLiteralImpl]null;
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]java.lang.Boolean.parseBoolean([CtInvocationImpl][CtInvocationImpl][CtThisAccessImpl]this.getRealmConfiguration().getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.READ_GROUPS_ENABLED))) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]roleExist = [CtInvocationImpl]doCheckExistingRole([CtVariableReadImpl]adminRoleName);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.lang.Exception e) [CtBlockImpl]{
            [CtCommentImpl]// ignore
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]roleExist) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]roleExist = [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.isExistingRole([CtVariableReadImpl]adminRoleName);
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.lang.Exception e) [CtBlockImpl]{
                [CtCommentImpl]// ignore
            }
            [CtIfImpl]if ([CtVariableReadImpl]roleExist) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]isInternalRole = [CtLiteralImpl]true;
            }
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userExist = [CtInvocationImpl]doCheckExistingUserNameWithIDImpl([CtVariableReadImpl]adminUserName);
                [CtIfImpl]if ([CtVariableReadImpl]userExist) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userIDFromUserName = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]adminUserName);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userIDAttribute = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]LDAPConstants.USER_ID_ATTRIBUTE);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtInvocationImpl]getUniqueUserID();
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]userIDFromUserName) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtThisAccessImpl]this.isReadOnly())) [CtBlockImpl]{
                        [CtInvocationImpl]doSetUserAttribute([CtVariableReadImpl]adminUserName, [CtVariableReadImpl]userIDAttribute, [CtVariableReadImpl]userID, [CtLiteralImpl]null);
                    }
                }
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userExist = [CtInvocationImpl]doCheckExistingUser([CtVariableReadImpl]adminUserName);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.lang.Exception e) [CtBlockImpl]{
            [CtCommentImpl]// ignore
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]userExist) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Admin user can not be created in primary user store. " + [CtLiteralImpl]"User store is read only. ") + [CtLiteralImpl]"Please pick a user name which is exist in the primary user store as Admin user";
                [CtIfImpl]if ([CtVariableReadImpl]initialSetup) [CtBlockImpl]{
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]message);
                } else [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]message);
                }
            } else [CtIfImpl]if ([CtVariableReadImpl]addAdmin) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
                        [CtAssignmentImpl][CtCommentImpl]// Ignore the return value as we don't need it.
                        [CtVariableWriteImpl]user = [CtInvocationImpl]doAddUserWithID([CtVariableReadImpl]adminUserName, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getAdminPassword(), [CtLiteralImpl]null, [CtLiteralImpl]null, [CtLiteralImpl]null, [CtLiteralImpl]false);
                    } else [CtBlockImpl]{
                        [CtInvocationImpl][CtCommentImpl]// Call the old API since this user store does not support the unique user id related APIs.
                        [CtThisAccessImpl]this.doAddUser([CtVariableReadImpl]adminUserName, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getAdminPassword(), [CtLiteralImpl]null, [CtLiteralImpl]null, [CtLiteralImpl]null, [CtLiteralImpl]false);
                    }
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.lang.Exception e) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtBinaryOperatorImpl][CtLiteralImpl]"Admin user has not been created. " + [CtLiteralImpl]"Error occurs while creating Admin user in primary user store.";
                    [CtIfImpl]if ([CtVariableReadImpl]initialSetup) [CtBlockImpl]{
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]e instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException) && [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.common.ERROR_CODE_DUPLICATE_WHILE_ADDING_A_USER.getCode().equals([CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException) (e)).getErrorCode())) [CtBlockImpl]{
                            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.warn([CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtBinaryOperatorImpl][CtLiteralImpl]"Admin User :%s is already added. Hence, continue without adding" + [CtLiteralImpl]" the user.", [CtVariableReadImpl]adminUserName));
                        } else [CtBlockImpl]{
                            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]message, [CtVariableReadImpl]e);
                        }
                    } else [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]message, [CtVariableReadImpl]e);
                    }
                }
            } else [CtIfImpl]if ([CtVariableReadImpl]initialSetup) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Admin user can not be created in primary user store. " + [CtLiteralImpl]"Add-Admin has been set to false. ") + [CtLiteralImpl]"Please pick a User name which is exist in the primary user store as Admin user";
                [CtIfImpl]if ([CtVariableReadImpl]initialSetup) [CtBlockImpl]{
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]message);
                } else [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]message);
                }
            }
        }
        [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]user != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]user.getUserID() != [CtLiteralImpl]null)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]adminUserID = [CtInvocationImpl][CtVariableReadImpl]user.getUserID();
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]adminUserID = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]adminUserName);
            }
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]roleExist) [CtBlockImpl]{
            [CtIfImpl]if ([CtVariableReadImpl]addAdmin) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl]isReadOnly()) && [CtFieldReadImpl]writeGroupsEnabled) [CtBlockImpl]{
                    [CtTryImpl]try [CtBlockImpl]{
                        [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
                            [CtInvocationImpl][CtThisAccessImpl]this.doAddRoleWithID([CtVariableReadImpl]adminRoleName, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]adminUserID }, [CtLiteralImpl]false);
                        } else [CtBlockImpl]{
                            [CtInvocationImpl][CtThisAccessImpl]this.doAddRole([CtVariableReadImpl]adminRoleName, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]adminUserName }, [CtLiteralImpl]false);
                        }
                    }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtBinaryOperatorImpl][CtLiteralImpl]"Admin role has not been created. " + [CtLiteralImpl]"Error occurs while creating Admin role in primary user store.";
                        [CtIfImpl]if ([CtVariableReadImpl]initialSetup) [CtBlockImpl]{
                            [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.common.ERROR_CODE_DUPLICATE_WHILE_ADDING_ROLE.getCode().equals([CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException) (e)).getErrorCode())) [CtBlockImpl]{
                                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.warn([CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtBinaryOperatorImpl][CtLiteralImpl]"Admin Role :%s is already added. Hence, continue without " + [CtLiteralImpl]"adding the role.", [CtVariableReadImpl]adminRoleName));
                            } else [CtBlockImpl]{
                                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]message, [CtVariableReadImpl]e);
                            }
                        } else [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]message, [CtVariableReadImpl]e);
                        }
                    }
                } else [CtBlockImpl]{
                    [CtTryImpl][CtCommentImpl]// creates internal role
                    try [CtBlockImpl]{
                        [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
                            [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.addHybridRole([CtVariableReadImpl]adminRoleName, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]adminUserName });
                        } else [CtBlockImpl]{
                            [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.addHybridRole([CtVariableReadImpl]adminRoleName, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]adminUserName });
                        }
                        [CtAssignmentImpl][CtVariableWriteImpl]isInternalRole = [CtLiteralImpl]true;
                    }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.lang.Exception e) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtBinaryOperatorImpl][CtLiteralImpl]"Admin role has not been created. " + [CtLiteralImpl]"Error occurs while creating Admin role in primary user store.";
                        [CtIfImpl]if ([CtVariableReadImpl]initialSetup) [CtBlockImpl]{
                            [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.common.ERROR_CODE_DUPLICATE_WHILE_ADDING_A_HYBRID_ROLE.getCode().equals([CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException) (e)).getErrorCode())) [CtBlockImpl]{
                                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.warn([CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtBinaryOperatorImpl][CtLiteralImpl]"Hybrid Admin Role :%s is already added. Hence, continue " + [CtLiteralImpl]"without adding the hybrid role.", [CtVariableReadImpl]adminRoleName));
                            } else [CtBlockImpl]{
                                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]message, [CtVariableReadImpl]e);
                            }
                        } else [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]message, [CtVariableReadImpl]e);
                        }
                    }
                }
            } else [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Admin role can not be created in primary user store. " + [CtLiteralImpl]"Add-Admin has been set to false. ") + [CtLiteralImpl]"Please pick a Role name which is exist in the primary user store as Admin Role";
                [CtIfImpl]if ([CtVariableReadImpl]initialSetup) [CtBlockImpl]{
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]message);
                } else [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]message);
                }
            }
        }
        [CtIfImpl]if ([CtVariableReadImpl]isInternalRole) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
                [CtInvocationImpl]updateHybridRoleListOfUserInternal([CtVariableReadImpl]initialSetup, [CtVariableReadImpl]adminRoleName, [CtVariableReadImpl]adminUserID);
            } else [CtBlockImpl]{
                [CtInvocationImpl]updateHybridRoleListOfUserInternal([CtVariableReadImpl]initialSetup, [CtVariableReadImpl]adminRoleName, [CtVariableReadImpl]adminUserName);
            }
            [CtInvocationImpl][CtFieldReadImpl]realmConfig.setAdminRoleName([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addInternalDomainName([CtVariableReadImpl]adminRoleName));
        } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl]isReadOnly()) && [CtFieldReadImpl]writeGroupsEnabled) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean doCheckIsUserInRole;
            [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]doCheckIsUserInRole = [CtInvocationImpl][CtThisAccessImpl]this.doCheckIsUserInRoleWithID([CtVariableReadImpl]adminUserID, [CtVariableReadImpl]adminRoleName);
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]doCheckIsUserInRole = [CtInvocationImpl][CtThisAccessImpl]this.doCheckIsUserInRole([CtVariableReadImpl]adminUserName, [CtVariableReadImpl]adminRoleName);
            }
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]doCheckIsUserInRole) [CtBlockImpl]{
                [CtIfImpl]if ([CtVariableReadImpl]addAdmin) [CtBlockImpl]{
                    [CtTryImpl]try [CtBlockImpl]{
                        [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
                            [CtInvocationImpl][CtThisAccessImpl]this.doUpdateRoleListOfUserWithID([CtVariableReadImpl]adminUserID, [CtLiteralImpl]null, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]adminRoleName });
                        } else [CtBlockImpl]{
                            [CtInvocationImpl][CtThisAccessImpl]this.doUpdateRoleListOfUser([CtVariableReadImpl]adminUserName, [CtLiteralImpl]null, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]adminRoleName });
                        }
                    }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.lang.Exception e) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtBinaryOperatorImpl][CtLiteralImpl]"Admin user has not been assigned to Admin role. " + [CtLiteralImpl]"Error while assignment is done";
                        [CtIfImpl]if ([CtVariableReadImpl]initialSetup) [CtBlockImpl]{
                            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]message, [CtVariableReadImpl]e);
                        } else [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]message, [CtVariableReadImpl]e);
                        }
                    }
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtBinaryOperatorImpl][CtLiteralImpl]"Admin user can not be assigned to Admin role " + [CtLiteralImpl]"Add-Admin has been set to false. Please do the assign it in user store level";
                    [CtIfImpl]if ([CtVariableReadImpl]initialSetup) [CtBlockImpl]{
                        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]message);
                    } else [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]message);
                    }
                }
            }
        }
        [CtInvocationImpl]doInitialUserAdding();
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void updateHybridRoleListOfUserInternal([CtParameterImpl][CtTypeReferenceImpl]boolean initialSetup, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String adminRoleName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String adminUserID) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.isUserInRole([CtVariableReadImpl]adminUserID, [CtVariableReadImpl]adminRoleName)) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.updateHybridRoleListOfUser([CtVariableReadImpl]adminUserID, [CtLiteralImpl]null, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]adminRoleName });
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.lang.Exception e) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtBinaryOperatorImpl][CtLiteralImpl]"Admin user has not been assigned to Admin role. " + [CtLiteralImpl]"Error while assignment is done";
                [CtIfImpl]if ([CtVariableReadImpl]initialSetup) [CtBlockImpl]{
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]message, [CtVariableReadImpl]e);
                } else [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]message, [CtVariableReadImpl]e);
                }
            }
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @param type
     * @return  * @throws UserStoreException
     */
    public [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.Integer> getMaxListCount([CtParameterImpl][CtTypeReferenceImpl]java.lang.String type) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]type.equals([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_MAX_USER_LIST)) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]type.equals([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_MAX_ROLE_LIST))) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Invalid count parameter");
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]type.equals([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_MAX_USER_LIST) && [CtBinaryOperatorImpl]([CtFieldReadImpl]maxUserListCount != [CtLiteralImpl]null)) [CtBlockImpl]{
            [CtReturnImpl]return [CtFieldReadImpl]maxUserListCount;
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]type.equals([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_MAX_ROLE_LIST) && [CtBinaryOperatorImpl]([CtFieldReadImpl]maxRoleListCount != [CtLiteralImpl]null)) [CtBlockImpl]{
            [CtReturnImpl]return [CtFieldReadImpl]maxRoleListCount;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.Integer> maxListCount = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.Integer>();
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager> entry : [CtInvocationImpl][CtFieldReadImpl]userStoreManagerHolder.entrySet()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager storeManager = [CtInvocationImpl][CtVariableReadImpl]entry.getValue();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String maxConfig = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]storeManager.getRealmConfiguration().getUserStoreProperty([CtVariableReadImpl]type);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]maxConfig == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtCommentImpl]// set a default value
                [CtVariableWriteImpl]maxConfig = [CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.MAX_LIST_LENGTH;
            }
            [CtInvocationImpl][CtVariableReadImpl]maxListCount.put([CtInvocationImpl][CtVariableReadImpl]entry.getKey(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.Integer.parseInt([CtVariableReadImpl]maxConfig));
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME) == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String maxConfig = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtVariableReadImpl]type);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]maxConfig == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtCommentImpl]// set a default value
                [CtVariableWriteImpl]maxConfig = [CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.MAX_LIST_LENGTH;
            }
            [CtInvocationImpl][CtVariableReadImpl]maxListCount.put([CtLiteralImpl]null, [CtInvocationImpl][CtTypeAccessImpl]java.lang.Integer.parseInt([CtVariableReadImpl]maxConfig));
        }
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]type.equals([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_MAX_USER_LIST)) [CtBlockImpl]{
            [CtAssignmentImpl][CtFieldWriteImpl][CtThisAccessImpl]this.maxUserListCount = [CtVariableReadImpl]maxListCount;
            [CtReturnImpl]return [CtFieldReadImpl][CtThisAccessImpl]this.maxUserListCount;
        } else [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]type.equals([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_MAX_ROLE_LIST)) [CtBlockImpl]{
            [CtAssignmentImpl][CtFieldWriteImpl][CtThisAccessImpl]this.maxRoleListCount = [CtVariableReadImpl]maxListCount;
            [CtReturnImpl]return [CtFieldReadImpl][CtThisAccessImpl]this.maxRoleListCount;
        } else [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Invalid count parameter");
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     *
     * @return  */
    protected [CtTypeReferenceImpl]java.lang.String getMyDomainName() [CtBlockImpl]{
        [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.getDomainName([CtFieldReadImpl]realmConfig);
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]void persistDomain() throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.getDomainName([CtFieldReadImpl][CtThisAccessImpl]this.realmConfig);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]domain != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.persistDomain([CtVariableReadImpl]domain, [CtFieldReadImpl][CtThisAccessImpl]this.tenantId, [CtFieldReadImpl][CtThisAccessImpl]this.dataSource);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void deletePersistedDomain([CtParameterImpl][CtTypeReferenceImpl]java.lang.String domain) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]domain != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Deleting persisted domain " + [CtVariableReadImpl]domain);
            }
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.deletePersistedDomain([CtVariableReadImpl]domain, [CtFieldReadImpl][CtThisAccessImpl]this.tenantId, [CtFieldReadImpl][CtThisAccessImpl]this.dataSource);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void updatePersistedDomain([CtParameterImpl][CtTypeReferenceImpl]java.lang.String oldDomain, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String newDomain) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]oldDomain != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtVariableReadImpl]newDomain != [CtLiteralImpl]null)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtCommentImpl]// Checks for the newDomain exists already
            [CtCommentImpl]// Traverse through realm configuration chain since USM chain doesn't contains the disabled USMs
            [CtTypeReferenceImpl]org.wso2.carbon.user.api.RealmConfiguration realmConfigTmp = [CtInvocationImpl][CtThisAccessImpl]this.getRealmConfiguration();
            [CtWhileImpl]while ([CtBinaryOperatorImpl][CtVariableReadImpl]realmConfigTmp != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domainName = [CtInvocationImpl][CtVariableReadImpl]realmConfigTmp.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME);
                [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]newDomain.equalsIgnoreCase([CtVariableReadImpl]domainName)) [CtBlockImpl]{
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Cannot update persisted domain name " + [CtVariableReadImpl]oldDomain) + [CtLiteralImpl]" into ") + [CtVariableReadImpl]newDomain) + [CtLiteralImpl]". New domain name already in use");
                }
                [CtAssignmentImpl][CtVariableWriteImpl]realmConfigTmp = [CtInvocationImpl][CtVariableReadImpl]realmConfigTmp.getSecondaryRealmConfig();
            } 
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Renaming persisted domain " + [CtVariableReadImpl]oldDomain) + [CtLiteralImpl]" to ") + [CtVariableReadImpl]newDomain);
            }
            [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.updatePersistedDomain([CtVariableReadImpl]oldDomain, [CtVariableReadImpl]newDomain, [CtFieldReadImpl][CtThisAccessImpl]this.tenantId, [CtFieldReadImpl][CtThisAccessImpl]this.dataSource);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Checks whether the role is a shared role or not
     *
     * @param roleName
     * @param roleNameBase
     * @return  */
    public [CtTypeReferenceImpl]boolean isSharedRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleNameBase) [CtBlockImpl]{
        [CtReturnImpl][CtCommentImpl]// Only checks the shared groups are enabled
        return [CtInvocationImpl]isSharedGroupEnabled();
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Checks whether the provided role name belongs to the logged in tenant.
     * This check is done using the domain name which is appended at the end of
     * the role name
     *
     * @param roleName
     * @return  */
    protected [CtTypeReferenceImpl]boolean isOwnRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName) [CtBlockImpl]{
        [CtReturnImpl]return [CtLiteralImpl]true;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]void addRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList, [CtParameterImpl]org.wso2.carbon.user.core.common.api[] permissions) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtInvocationImpl]addRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions, [CtLiteralImpl]false);
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]boolean isOthersSharedRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName) [CtBlockImpl]{
        [CtReturnImpl]return [CtLiteralImpl]false;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void notifyListeners([CtParameterImpl][CtTypeReferenceImpl]java.lang.String domainName) [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserStoreManagerConfigurationListener aListener : [CtFieldReadImpl]listener) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]aListener.propertyChange([CtVariableReadImpl]domainName);
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]void addChangeListener([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserStoreManagerConfigurationListener newListener) [CtBlockImpl]{
        [CtInvocationImpl][CtFieldReadImpl]listener.add([CtVariableReadImpl]newListener);
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.SuppressWarnings([CtNewArrayImpl]{ [CtLiteralImpl]"rawtypes", [CtLiteralImpl]"unchecked" })
    private [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager createSecondaryUserStoreManager([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.RealmConfiguration realmConfig, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserRealm realm) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]org.wso2.carbon.user.api.RealmConfiguration.class, [CtFieldReadImpl]org.wso2.carbon.user.core.UserRealm.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"createSecondaryUserStoreManager", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]realmConfig, [CtVariableReadImpl]realm }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager) (object));
        }
        [CtInvocationImpl][CtCommentImpl]// setting global realm configurations such as everyone role, admin role and admin user
        [CtVariableReadImpl]realmConfig.setEveryOneRoleName([CtInvocationImpl][CtFieldReadImpl][CtThisAccessImpl]this.realmConfig.getEveryOneRoleName());
        [CtInvocationImpl][CtVariableReadImpl]realmConfig.setAdminUserName([CtInvocationImpl][CtFieldReadImpl][CtThisAccessImpl]this.realmConfig.getAdminUserName());
        [CtInvocationImpl][CtVariableReadImpl]realmConfig.setAdminRoleName([CtInvocationImpl][CtFieldReadImpl][CtThisAccessImpl]this.realmConfig.getAdminRoleName());
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String className = [CtInvocationImpl][CtVariableReadImpl]realmConfig.getUserStoreClass();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]className == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errmsg = [CtLiteralImpl]"Unable to add user store. UserStoreManager class name is null.";
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]errmsg);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]errmsg);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.Object> properties = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.Object>();
        [CtInvocationImpl][CtVariableReadImpl]properties.put([CtTypeAccessImpl]UserCoreConstants.DATA_SOURCE, [CtFieldReadImpl][CtThisAccessImpl]this.dataSource);
        [CtInvocationImpl][CtVariableReadImpl]properties.put([CtTypeAccessImpl]UserCoreConstants.FIRST_STARTUP_CHECK, [CtLiteralImpl]false);
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class[] initClassOpt1 = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]org.wso2.carbon.user.api.RealmConfiguration.class, [CtFieldReadImpl]java.util.Map.class, [CtFieldReadImpl]org.wso2.carbon.user.core.claim.ClaimManager.class, [CtFieldReadImpl]org.wso2.carbon.user.core.profile.ProfileConfigurationManager.class, [CtFieldReadImpl]org.wso2.carbon.user.core.UserRealm.class, [CtFieldReadImpl]java.lang.Integer.class };
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Object[] initObjOpt1 = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]realmConfig, [CtVariableReadImpl]properties, [CtInvocationImpl][CtVariableReadImpl]realm.getClaimManager(), [CtLiteralImpl]null, [CtVariableReadImpl]realm, [CtFieldReadImpl]tenantId };
        [CtLocalVariableImpl][CtCommentImpl]// These two methods won't be used
        [CtArrayTypeReferenceImpl]java.lang.Class[] initClassOpt2 = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]org.wso2.carbon.user.api.RealmConfiguration.class, [CtFieldReadImpl]java.util.Map.class, [CtFieldReadImpl]org.wso2.carbon.user.core.claim.ClaimManager.class, [CtFieldReadImpl]org.wso2.carbon.user.core.profile.ProfileConfigurationManager.class, [CtFieldReadImpl]org.wso2.carbon.user.core.UserRealm.class };
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Object[] initObjOpt2 = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]realmConfig, [CtVariableReadImpl]properties, [CtInvocationImpl][CtVariableReadImpl]realm.getClaimManager(), [CtLiteralImpl]null, [CtVariableReadImpl]realm };
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class[] initClassOpt3 = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]org.wso2.carbon.user.api.RealmConfiguration.class, [CtFieldReadImpl]java.util.Map.class };
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Object[] initObjOpt3 = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]realmConfig, [CtVariableReadImpl]properties };
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Class clazz = [CtInvocationImpl][CtTypeAccessImpl]java.lang.Class.forName([CtVariableReadImpl]className);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.reflect.Constructor constructor = [CtLiteralImpl]null;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object newObject = [CtLiteralImpl]null;
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtLiteralImpl]"Start initializing class with the first option");
            }
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]constructor = [CtInvocationImpl][CtVariableReadImpl]clazz.getConstructor([CtVariableReadImpl]initClassOpt1);
                [CtAssignmentImpl][CtVariableWriteImpl]newObject = [CtInvocationImpl][CtVariableReadImpl]constructor.newInstance([CtVariableReadImpl]initObjOpt1);
                [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager) (newObject));
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.lang.NoSuchMethodException e) [CtBlockImpl]{
                [CtIfImpl][CtCommentImpl]// if not found try again.
                if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Cannont initialize " + [CtVariableReadImpl]className) + [CtLiteralImpl]" using the option 1");
                }
            }
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtLiteralImpl]"End initializing class with the first option");
            }
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]constructor = [CtInvocationImpl][CtVariableReadImpl]clazz.getConstructor([CtVariableReadImpl]initClassOpt2);
                [CtAssignmentImpl][CtVariableWriteImpl]newObject = [CtInvocationImpl][CtVariableReadImpl]constructor.newInstance([CtVariableReadImpl]initObjOpt2);
                [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager) (newObject));
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.lang.NoSuchMethodException e) [CtBlockImpl]{
                [CtIfImpl][CtCommentImpl]// if not found try again.
                if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Cannot initialize " + [CtVariableReadImpl]className) + [CtLiteralImpl]" using the option 2");
                }
            }
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtLiteralImpl]"End initializing class with the second option");
            }
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]constructor = [CtInvocationImpl][CtVariableReadImpl]clazz.getConstructor([CtVariableReadImpl]initClassOpt3);
                [CtAssignmentImpl][CtVariableWriteImpl]newObject = [CtInvocationImpl][CtVariableReadImpl]constructor.newInstance([CtVariableReadImpl]initObjOpt3);
                [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager) (newObject));
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.lang.NoSuchMethodException e) [CtBlockImpl]{
                [CtLocalVariableImpl][CtCommentImpl]// cannot initialize in any of the methods. Throw exception.
                [CtTypeReferenceImpl]java.lang.String message = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Cannot initialize " + [CtVariableReadImpl]className) + [CtLiteralImpl]". Error ") + [CtInvocationImpl][CtVariableReadImpl]e.getMessage();
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]message);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]message);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.lang.Throwable e) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtBinaryOperatorImpl][CtLiteralImpl]"Cannot create " + [CtVariableReadImpl]className, [CtVariableReadImpl]e);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]e.getMessage() + [CtLiteralImpl]"Type ") + [CtInvocationImpl][CtVariableReadImpl]e.getClass(), [CtVariableReadImpl]e);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Adding new User Store Manager to USM chain
     *
     * @param userStoreRealmConfig
     * @param realm
     * @throws UserStoreException
     */
    public [CtTypeReferenceImpl]void addSecondaryUserStoreManager([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.RealmConfiguration userStoreRealmConfig, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserRealm realm) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]org.wso2.carbon.user.api.RealmConfiguration.class, [CtFieldReadImpl]org.wso2.carbon.user.core.UserRealm.class };
            [CtInvocationImpl]callSecure([CtLiteralImpl]"addSecondaryUserStoreManager", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userStoreRealmConfig, [CtVariableReadImpl]realm }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isDisabled = [CtInvocationImpl][CtTypeAccessImpl]java.lang.Boolean.parseBoolean([CtInvocationImpl][CtVariableReadImpl]userStoreRealmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.USER_STORE_DISABLED));
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domainName = [CtInvocationImpl][CtVariableReadImpl]userStoreRealmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME);
        [CtIfImpl]if ([CtVariableReadImpl]isDisabled) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.warn([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Secondary user store disabled with domain " + [CtVariableReadImpl]domainName) + [CtLiteralImpl]".");
        } else [CtBlockImpl]{
            [CtLocalVariableImpl][CtCommentImpl]// Creating new UserStoreManager
            [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager manager = [CtInvocationImpl]createSecondaryUserStoreManager([CtVariableReadImpl]userStoreRealmConfig, [CtVariableReadImpl]realm);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]domainName != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtThisAccessImpl]this.getSecondaryUserStoreManager([CtVariableReadImpl]domainName) != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errmsg = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Could not initialize new user store manager : " + [CtVariableReadImpl]domainName) + [CtLiteralImpl]" Duplicate domain names not allowed.";
                    [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtVariableReadImpl]errmsg);
                    }
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]errmsg);
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtCommentImpl]// Fulfilled requirements for adding UserStore,
                    [CtCommentImpl]// Now adding UserStoreManager to end of the UserStoreManager chain
                    [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager tmpUserStoreManager = [CtThisAccessImpl]this;
                    [CtWhileImpl]while ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]tmpUserStoreManager.getSecondaryUserStoreManager() != [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]tmpUserStoreManager = [CtInvocationImpl][CtVariableReadImpl]tmpUserStoreManager.getSecondaryUserStoreManager();
                    } 
                    [CtInvocationImpl][CtVariableReadImpl]tmpUserStoreManager.setSecondaryUserStoreManager([CtVariableReadImpl]manager);
                    [CtInvocationImpl][CtCommentImpl]// update domainName-USM map to retrieve USM directly by its domain name
                    [CtThisAccessImpl]this.addSecondaryUserStoreManager([CtInvocationImpl][CtVariableReadImpl]domainName.toUpperCase(), [CtInvocationImpl][CtVariableReadImpl]tmpUserStoreManager.getSecondaryUserStoreManager());
                    [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"UserStoreManager : " + [CtVariableReadImpl]domainName) + [CtLiteralImpl]"added to the list");
                    }
                }
            } else [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.warn([CtBinaryOperatorImpl][CtLiteralImpl]"Could not initialize new user store manager.  " + [CtLiteralImpl]"Domain name is not defined");
            }
        }
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> getRoleListOfUsers([CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userNames) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String[].class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getRoleListOfUsers", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userNames }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>>) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> allRoleNames = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> domainFreeUsers = [CtInvocationImpl]getDomainFreeUsers([CtVariableReadImpl]userNames);
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> entry : [CtInvocationImpl][CtVariableReadImpl]domainFreeUsers.entrySet()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secondaryUserStoreManager = [CtInvocationImpl]getSecondaryUserStoreManager([CtInvocationImpl][CtVariableReadImpl]entry.getKey());
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secondaryUserStoreManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secondaryUserStoreManager)).isUniqueUserIdEnabled()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> userRoles = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secondaryUserStoreManager)).doGetRoleListOfUsersWithID([CtInvocationImpl]getUserIDsFromUserNames([CtInvocationImpl][CtVariableReadImpl]entry.getValue()), [CtInvocationImpl][CtVariableReadImpl]entry.getKey());
                    [CtInvocationImpl][CtVariableReadImpl]userRoles.forEach([CtLambdaImpl]([CtParameterImpl]java.lang.String key,[CtParameterImpl]java.util.List<java.lang.String> value) -> [CtBlockImpl]{
                        [CtTryImpl]try [CtBlockImpl]{
                            [CtInvocationImpl][CtVariableReadImpl]allRoleNames.put([CtInvocationImpl]getUserNameFromUserID([CtVariableReadImpl]key), [CtVariableReadImpl]value);
                        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ignored) [CtBlockImpl]{
                            [CtCommentImpl]// Ignore
                        }
                    });
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> roleNames = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secondaryUserStoreManager)).doGetRoleListOfUsers([CtInvocationImpl][CtVariableReadImpl]entry.getValue(), [CtInvocationImpl][CtVariableReadImpl]entry.getKey());
                    [CtInvocationImpl][CtVariableReadImpl]allRoleNames.putAll([CtVariableReadImpl]roleNames);
                }
            }
        }
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostGetRoleListOfUsers([CtVariableReadImpl]userNames, [CtVariableReadImpl]allRoleNames)) [CtBlockImpl]{
                    [CtBreakImpl]break;
                }
            }
        }
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostGetRoleListOfUsers([CtVariableReadImpl]userNames, [CtVariableReadImpl]allRoleNames, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtBreakImpl]break;
                }
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]allRoleNames;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> doGetRoleListOfUsers([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userNames, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domainName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.util.List.class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"doGetRoleListOfUsers", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userNames, [CtVariableReadImpl]domainName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>>) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> internalRoles = [CtInvocationImpl]doGetInternalRoleListOfUsers([CtVariableReadImpl]userNames, [CtVariableReadImpl]domainName);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> externalRoles = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtIfImpl]if ([CtFieldReadImpl]readGroupsEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]externalRoles = [CtInvocationImpl]doGetExternalRoleListOfUsers([CtVariableReadImpl]userNames);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> combinedRoles = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]internalRoles.isEmpty()) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]externalRoles.isEmpty())) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userName : [CtVariableReadImpl]userNames) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> roles = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]internalRoles.get([CtVariableReadImpl]userName) != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]roles.addAll([CtInvocationImpl][CtVariableReadImpl]internalRoles.get([CtVariableReadImpl]userName));
                }
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]externalRoles.get([CtVariableReadImpl]userName) != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> domainQualifiedRoleNames = [CtInvocationImpl]getNamesWithDomain([CtInvocationImpl][CtVariableReadImpl]externalRoles.get([CtVariableReadImpl]userName), [CtVariableReadImpl]domainName);
                    [CtInvocationImpl][CtVariableReadImpl]roles.addAll([CtVariableReadImpl]domainQualifiedRoleNames);
                }
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]roles.isEmpty()) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]combinedRoles.put([CtVariableReadImpl]userName, [CtVariableReadImpl]roles);
                }
            }
        } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]internalRoles.isEmpty()) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]combinedRoles = [CtVariableReadImpl]internalRoles;
        } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]externalRoles.isEmpty()) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]combinedRoles = [CtVariableReadImpl]externalRoles;
        }
        [CtReturnImpl]return [CtVariableReadImpl]combinedRoles;
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> doGetExternalRoleListOfUsers([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userNames) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> externalRoleListOfUsers = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userName : [CtVariableReadImpl]userNames) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] externalRoles = [CtInvocationImpl]doGetExternalRoleListOfUser([CtVariableReadImpl]userName, [CtLiteralImpl]null);
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.ArrayUtils.isEmpty([CtVariableReadImpl]externalRoles)) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]externalRoleListOfUsers.put([CtVariableReadImpl]userName, [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]externalRoles));
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]externalRoleListOfUsers;
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> doGetExternalRoleListOfUsersWithID([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userIDs) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> externalRoleListOfUsers = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID : [CtVariableReadImpl]userIDs) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] externalRoles = [CtInvocationImpl]doGetExternalRoleListOfUserWithID([CtVariableReadImpl]userID, [CtLiteralImpl]null);
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.ArrayUtils.isEmpty([CtVariableReadImpl]externalRoles)) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]externalRoleListOfUsers.put([CtVariableReadImpl]userID, [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]externalRoles));
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]externalRoleListOfUsers;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtArrayTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry[] getUsersClaimValues([CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userNames, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String[].class, [CtFieldReadImpl]java.lang.String[].class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getUsersClaimValues", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userNames, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtArrayTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry[]) (object));
        }
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]profileName)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]profileName = [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.DEFAULT_PROFILE;
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claims == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]claims = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry[] allUsers = [CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry[[CtLiteralImpl]0];
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> domainFreeUsers = [CtInvocationImpl]getDomainFreeUsers([CtVariableReadImpl]userNames);
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> entry : [CtInvocationImpl][CtVariableReadImpl]domainFreeUsers.entrySet()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secondaryUserStoreManager = [CtInvocationImpl]getSecondaryUserStoreManager([CtInvocationImpl][CtVariableReadImpl]entry.getKey());
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secondaryUserStoreManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> usersWithDomain = [CtInvocationImpl]getNamesWithDomain([CtInvocationImpl][CtVariableReadImpl]entry.getValue(), [CtInvocationImpl][CtVariableReadImpl]entry.getKey());
                [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secondaryUserStoreManager)).isUniqueUserIdEnabled()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UniqueIDUserClaimSearchEntry> uniqueIDUserClaimSearchEntries = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secondaryUserStoreManager)).doGetUsersClaimValuesWithID([CtInvocationImpl]getUserIDsFromUserNames([CtVariableReadImpl]usersWithDomain), [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]claims), [CtInvocationImpl][CtVariableReadImpl]entry.getKey(), [CtVariableReadImpl]profileName);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry> userClaimSearchEntries = [CtInvocationImpl]getUserClaimSearchEntries([CtVariableReadImpl]uniqueIDUserClaimSearchEntries);
                    [CtAssignmentImpl][CtVariableWriteImpl]allUsers = [CtInvocationImpl](([CtArrayTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry[]) ([CtTypeAccessImpl]org.apache.commons.lang.ArrayUtils.addAll([CtInvocationImpl][CtVariableReadImpl]userClaimSearchEntries.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry[[CtLiteralImpl]0]), [CtVariableReadImpl]allUsers)));
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry[] users = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secondaryUserStoreManager)).doGetUsersClaimValues([CtInvocationImpl][CtVariableReadImpl]entry.getValue(), [CtVariableReadImpl]claims, [CtInvocationImpl][CtVariableReadImpl]entry.getKey(), [CtVariableReadImpl]profileName);
                    [CtAssignmentImpl][CtVariableWriteImpl]allUsers = [CtInvocationImpl](([CtArrayTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry[]) ([CtTypeAccessImpl]org.apache.commons.lang.ArrayUtils.addAll([CtVariableReadImpl]users, [CtVariableReadImpl]allUsers)));
                }
            }
        }
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostGetUsersClaimValues([CtVariableReadImpl]userNames, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtVariableReadImpl]allUsers)) [CtBlockImpl]{
                    [CtBreakImpl]break;
                }
            }
        }
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostGetUsersClaimValues([CtVariableReadImpl]userNames, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtVariableReadImpl]allUsers, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtBreakImpl]break;
                }
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]allUsers;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry> getUserClaimSearchEntries([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UniqueIDUserClaimSearchEntry> uniqueIDUserClaimSearchEntries) [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry> userClaimSearchEntries = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UniqueIDUserClaimSearchEntry uniqueIDUserClaimSearchEntry : [CtVariableReadImpl]uniqueIDUserClaimSearchEntries) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]userClaimSearchEntries.add([CtInvocationImpl][CtVariableReadImpl]uniqueIDUserClaimSearchEntry.getUserClaimSearchEntry());
        }
        [CtReturnImpl]return [CtVariableReadImpl]userClaimSearchEntries;
    }

    [CtMethodImpl]public [CtArrayTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry[] doGetUsersClaimValues([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> users, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domainName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.String> propertySet = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claimToAttributeMap = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry> userClaimSearchEntryList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String claim : [CtVariableReadImpl]claims) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String property;
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]property = [CtInvocationImpl]getClaimAtrribute([CtVariableReadImpl]claim, [CtLiteralImpl]null, [CtVariableReadImpl]domainName);
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]e);
            }
            [CtInvocationImpl][CtVariableReadImpl]propertySet.add([CtVariableReadImpl]property);
            [CtInvocationImpl][CtVariableReadImpl]claimToAttributeMap.put([CtVariableReadImpl]claim, [CtVariableReadImpl]property);
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] properties = [CtInvocationImpl][CtVariableReadImpl]propertySet.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>> userProperties = [CtInvocationImpl][CtThisAccessImpl]this.getUsersPropertyValues([CtVariableReadImpl]users, [CtVariableReadImpl]properties, [CtVariableReadImpl]profileName);
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>> entry : [CtInvocationImpl][CtVariableReadImpl]userProperties.entrySet()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry userClaimSearchEntry = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry();
            [CtInvocationImpl][CtVariableReadImpl]userClaimSearchEntry.setUserName([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtInvocationImpl][CtVariableReadImpl]entry.getKey(), [CtVariableReadImpl]domainName));
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> userClaims = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String claim : [CtVariableReadImpl]claims) [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> userAttribute : [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]entry.getValue().entrySet()) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]claimToAttributeMap.get([CtVariableReadImpl]claim) != [CtLiteralImpl]null) && [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]claimToAttributeMap.get([CtVariableReadImpl]claim).equals([CtInvocationImpl][CtVariableReadImpl]userAttribute.getKey())) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]userClaims.put([CtVariableReadImpl]claim, [CtInvocationImpl][CtVariableReadImpl]userAttribute.getValue());
                    }
                }
            }
            [CtInvocationImpl][CtVariableReadImpl]userClaimSearchEntry.setClaims([CtVariableReadImpl]userClaims);
            [CtInvocationImpl][CtVariableReadImpl]userClaimSearchEntryList.add([CtVariableReadImpl]userClaimSearchEntry);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]userClaimSearchEntryList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry[[CtLiteralImpl]0]);
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> getDomainFreeUsers([CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userNames) [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> domainAwareUsers = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.ArrayUtils.isNotEmpty([CtVariableReadImpl]userNames)) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String username : [CtVariableReadImpl]userNames) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domainName = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.extractDomainFromName([CtVariableReadImpl]username);
                [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]domainName)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]domainName = [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.PRIMARY_DEFAULT_DOMAIN_NAME;
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> users = [CtInvocationImpl][CtVariableReadImpl]domainAwareUsers.get([CtVariableReadImpl]domainName);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]users == [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]users = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
                    [CtInvocationImpl][CtVariableReadImpl]domainAwareUsers.put([CtInvocationImpl][CtVariableReadImpl]domainName.toUpperCase(), [CtVariableReadImpl]users);
                }
                [CtInvocationImpl][CtVariableReadImpl]users.add([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]username));
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]domainAwareUsers;
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>> getUsersPropertyValues([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> users, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] propertyNames, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>> usersPropertyValuesMap = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userName : [CtVariableReadImpl]users) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> propertyValuesMap = [CtInvocationImpl]getUserPropertyValues([CtVariableReadImpl]userName, [CtVariableReadImpl]propertyNames, [CtVariableReadImpl]profileName);
            [CtInvocationImpl]processAttributesAfterRetrieval([CtVariableReadImpl]userName, [CtVariableReadImpl]propertyValuesMap, [CtVariableReadImpl]profileName);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]propertyValuesMap != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]propertyValuesMap.isEmpty())) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]usersPropertyValuesMap.put([CtVariableReadImpl]userName, [CtVariableReadImpl]propertyValuesMap);
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]usersPropertyValuesMap;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Remove given User Store Manager from USM chain
     *
     * @param userStoreDomainName
     * @throws UserStoreException
     */
    public [CtTypeReferenceImpl]void removeSecondaryUserStoreManager([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userStoreDomainName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class };
            [CtInvocationImpl]callSecure([CtLiteralImpl]"removeSecondaryUserStoreManager", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userStoreDomainName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return;
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userStoreDomainName == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Cannot remove user store. User store domain name is null");
        }
        [CtIfImpl]if ([CtInvocationImpl][CtLiteralImpl]"".equals([CtVariableReadImpl]userStoreDomainName)) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Cannot remove user store. User store domain name is empty");
        }
        [CtAssignmentImpl][CtCommentImpl]// if(!this.userStoreManagerHolder.containsKey(userStoreDomainName.toUpperCase())) {
        [CtCommentImpl]// throw new UserStoreException("Cannot remove user store. User store domain name does not exists");
        [CtCommentImpl]// }
        [CtVariableWriteImpl]userStoreDomainName = [CtInvocationImpl][CtVariableReadImpl]userStoreDomainName.toUpperCase();
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUSMContainsInMap = [CtLiteralImpl]false;
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl][CtThisAccessImpl]this.userStoreManagerHolder.containsKey([CtInvocationImpl][CtVariableReadImpl]userStoreDomainName.toUpperCase())) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUSMContainsInMap = [CtLiteralImpl]true;
            [CtInvocationImpl][CtFieldReadImpl][CtThisAccessImpl]this.userStoreManagerHolder.remove([CtInvocationImpl][CtVariableReadImpl]userStoreDomainName.toUpperCase());
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"UserStore: " + [CtVariableReadImpl]userStoreDomainName) + [CtLiteralImpl]" removed from map");
            }
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUSMConatainsInChain = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager prevUserStoreManager = [CtThisAccessImpl]this;
        [CtWhileImpl]while ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]prevUserStoreManager.getSecondaryUserStoreManager() != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secondaryUSM = [CtInvocationImpl][CtVariableReadImpl]prevUserStoreManager.getSecondaryUserStoreManager();
            [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]secondaryUSM.getRealmConfiguration().getUserStoreProperty([CtTypeAccessImpl]UserStoreConfigConstants.DOMAIN_NAME).equalsIgnoreCase([CtVariableReadImpl]userStoreDomainName)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]isUSMConatainsInChain = [CtLiteralImpl]true;
                [CtInvocationImpl][CtCommentImpl]// Omit deleting user store manager from the chain
                [CtVariableReadImpl]prevUserStoreManager.setSecondaryUserStoreManager([CtInvocationImpl][CtVariableReadImpl]secondaryUSM.getSecondaryUserStoreManager());
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.info([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"User store: " + [CtVariableReadImpl]userStoreDomainName) + [CtLiteralImpl]" of tenant:") + [CtFieldReadImpl]tenantId) + [CtLiteralImpl]" is removed from user store chain.");
                [CtReturnImpl]return;
            }
            [CtAssignmentImpl][CtVariableWriteImpl]prevUserStoreManager = [CtVariableReadImpl]secondaryUSM;
        } 
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtVariableReadImpl]isUSMContainsInMap) && [CtVariableReadImpl]isUSMConatainsInChain) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Removed user store manager : " + [CtVariableReadImpl]userStoreDomainName) + [CtLiteralImpl]" didnt exists in userStoreManagerHolder map");
        } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isUSMContainsInMap && [CtUnaryOperatorImpl](![CtVariableReadImpl]isUSMConatainsInChain)) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"Removed user store manager : " + [CtVariableReadImpl]userStoreDomainName) + [CtLiteralImpl]" didnt exists in user store manager chain");
        }
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]org.wso2.carbon.user.core.hybrid.HybridRoleManager getInternalRoleManager() [CtBlockImpl]{
        [CtReturnImpl]return [CtFieldReadImpl]hybridRoleManager;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtArrayTypeReferenceImpl]java.lang.String[] getUserList([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]int.class, [CtFieldReadImpl]int.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getUserList", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtArrayTypeReferenceImpl]java.lang.String[]) (object));
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claim == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_URI.getCode();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_URI.getMessage(), [CtLiteralImpl]"");
            [CtInvocationImpl]handleGetUserListFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtLiteralImpl]null, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.IllegalArgumentException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_URI.toString());
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claimValue == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_VALUE.getMessage(), [CtVariableReadImpl]claim, [CtLiteralImpl]null, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.IllegalArgumentException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_VALUE.toString());
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Listing and paginate users who having value as " + [CtVariableReadImpl]claimValue) + [CtLiteralImpl]" for the claim ") + [CtVariableReadImpl]claim);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.USERNAME_CLAIM_URI.equalsIgnoreCase([CtVariableReadImpl]claim) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.SCIM_USERNAME_CLAIM_URI.equalsIgnoreCase([CtVariableReadImpl]claim)) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.SCIM2_USERNAME_CLAIM_URI.equalsIgnoreCase([CtVariableReadImpl]claim)) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtLiteralImpl]"Switching to paginate users using username");
            }
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] filteredUsers = [CtInvocationImpl]listUsers([CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset);
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Filtered users: " + [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.toString([CtVariableReadImpl]filteredUsers));
            }
            [CtReturnImpl]return [CtVariableReadImpl]filteredUsers;
        }
        [CtLocalVariableImpl][CtCommentImpl]// Extracting the domain from claimValue.
        [CtTypeReferenceImpl]java.lang.String extractedDomain = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int index;
        [CtAssignmentImpl][CtVariableWriteImpl]index = [CtInvocationImpl][CtVariableReadImpl]claimValue.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String names[] = [CtInvocationImpl][CtVariableReadImpl]claimValue.split([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
            [CtAssignmentImpl][CtVariableWriteImpl]extractedDomain = [CtInvocationImpl][CtArrayReadImpl][CtVariableReadImpl]names[[CtLiteralImpl]0].trim();
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userManager = [CtThisAccessImpl]this;
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]extractedDomain)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secondaryUserStoreManager = [CtInvocationImpl]getSecondaryUserStoreManager([CtVariableReadImpl]extractedDomain);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secondaryUserStoreManager != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userManager = [CtVariableReadImpl]secondaryUserStoreManager;
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Domain: " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" is passed with the claim and user store manager is loaded") + [CtLiteralImpl]" for the given domain name.");
                }
            }
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]userManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.SCIM_USERNAME_CLAIM_URI.equalsIgnoreCase([CtVariableReadImpl]claim) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.SCIM2_USERNAME_CLAIM_URI.equalsIgnoreCase([CtVariableReadImpl]claim))) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userManager.isExistingUser([CtVariableReadImpl]claimValue)) [CtBlockImpl]{
                [CtReturnImpl]return [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]claimValue };
            } else [CtBlockImpl]{
                [CtReturnImpl]return [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
            }
        }
        [CtAssignmentImpl][CtVariableWriteImpl]claimValue = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]claimValue);
        [CtLocalVariableImpl]final [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> filteredUserList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]extractedDomain)) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPreGetUserList([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]filteredUserList, [CtVariableReadImpl]userManager)) [CtBlockImpl]{
                            [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]profileName);
                            [CtBreakImpl]break;
                        }
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Pre listener user list: " + [CtVariableReadImpl]filteredUserList) + [CtLiteralImpl]" for domain: ") + [CtVariableReadImpl]extractedDomain);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userNamesFromUserStore;
        [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled([CtVariableReadImpl]userManager)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> usersFromUserStore = [CtInvocationImpl]doGetUserListWithID([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]extractedDomain, [CtVariableReadImpl]userManager);
            [CtAssignmentImpl][CtVariableWriteImpl]userNamesFromUserStore = [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]usersFromUserStore.stream().map([CtExecutableReferenceExpressionImpl][CtFieldReadImpl]User::getDomainQualifiedUsername).collect([CtInvocationImpl][CtTypeAccessImpl]java.util.stream.Collectors.toList());
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userNamesFromUserStore = [CtInvocationImpl]doGetUserList([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]extractedDomain, [CtVariableReadImpl]userManager);
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Users from user store: " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" : ") + [CtVariableReadImpl]userNamesFromUserStore);
            }
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Users from user store: " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" : ") + [CtVariableReadImpl]userNamesFromUserStore);
        }
        [CtInvocationImpl][CtVariableReadImpl]filteredUserList.addAll([CtVariableReadImpl]userNamesFromUserStore);
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]extractedDomain)) [CtBlockImpl]{
            [CtInvocationImpl]handlePostGetUserList([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]filteredUserList, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtLiteralImpl]false);
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Post listener user list pagination: " + [CtVariableReadImpl]filteredUserList) + [CtLiteralImpl]" for domain: ") + [CtVariableReadImpl]extractedDomain);
        }
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]filteredUserList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get the user count with claim value as a filter.
     *
     * @param claimUri
     * 		claim uri
     * @param filter
     * 		filter or filter value with domain name (PRIMARY/* or *)
     * @return usersCountInUserStore
     * @throws UserStoreException
     * 		UserStoreException
     */
    public [CtTypeReferenceImpl]long getUserCountWithClaims([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimUri, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getUserCountWithClaims", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]claimUri, [CtVariableReadImpl]filter }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]long) (object));
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claimUri == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NULL_CLAIM_URI.getCode();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NULL_CLAIM_URI.getMessage());
            [CtInvocationImpl]handleGetUserCountFailure([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtLiteralImpl]null, [CtVariableReadImpl]filter);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.IllegalArgumentException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NULL_CLAIM_URI.toString());
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]filter == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserCountFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DOMAIN_VALUE_WITH_FILTER_EMPTY.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DOMAIN_VALUE_WITH_FILTER_EMPTY.getMessage(), [CtVariableReadImpl]claimUri, [CtLiteralImpl]null);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.IllegalArgumentException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DOMAIN_VALUE_WITH_FILTER_EMPTY.toString());
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Count users who having filter and domain " + [CtVariableReadImpl]filter) + [CtLiteralImpl]" for the claim ") + [CtVariableReadImpl]claimUri);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String extractedDomain = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int index;
        [CtAssignmentImpl][CtVariableWriteImpl]index = [CtInvocationImpl][CtVariableReadImpl]filter.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String names[] = [CtInvocationImpl][CtVariableReadImpl]filter.split([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
            [CtAssignmentImpl][CtVariableWriteImpl]extractedDomain = [CtInvocationImpl][CtArrayReadImpl][CtVariableReadImpl]names[[CtLiteralImpl]0].trim();
        }
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]extractedDomain)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]extractedDomain = [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.PRIMARY_DEFAULT_DOMAIN_NAME;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userManager = [CtInvocationImpl]getSecondaryUserStoreManager([CtVariableReadImpl]extractedDomain);
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Domain: " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" is passed with the claim and user store manager is loaded") + [CtLiteralImpl]" for the given domain name.");
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String filterValue = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]filter);
        [CtReturnImpl]return [CtInvocationImpl]getCountUsers([CtVariableReadImpl]claimUri, [CtVariableReadImpl]filterValue, [CtVariableReadImpl]userManager);
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtArrayTypeReferenceImpl]java.lang.String[] getUserList([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.Condition condition, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domain, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortBy, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtInvocationImpl]validateCondition([CtVariableReadImpl]condition);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]sortBy) && [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]sortOrder)) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Sorting is not supported.");
        }
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]domain)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]domain = [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.PRIMARY_DEFAULT_DOMAIN_NAME;
        }
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]profileName)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]profileName = [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.DEFAULT_PROFILE;
        }
        [CtInvocationImpl]handlePreGetUserList([CtVariableReadImpl]condition, [CtVariableReadImpl]domain, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder);
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Pre listener get conditional  user list for domain: " + [CtVariableReadImpl]domain);
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] filteredUsers = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secManager = [CtInvocationImpl]getSecondaryUserStoreManager([CtVariableReadImpl]domain);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secManager != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secManager)).isUniqueUserIdEnabled()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UniqueIDPaginatedSearchResult users = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secManager)).doGetUserListWithID([CtVariableReadImpl]condition, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder);
                    [CtAssignmentImpl][CtVariableWriteImpl]filteredUsers = [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]users.getUsers().stream().map([CtExecutableReferenceExpressionImpl][CtFieldReadImpl]User::getUsername).toArray([CtExecutableReferenceExpressionImpl][CtTypeAccessImpl][CtArrayTypeReferenceImpl]java.lang.String[]::new);
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.PaginatedSearchResult users = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secManager)).doGetUserList([CtVariableReadImpl]condition, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder);
                    [CtAssignmentImpl][CtVariableWriteImpl]filteredUsers = [CtInvocationImpl][CtVariableReadImpl]users.getUsers();
                }
            }
        }
        [CtInvocationImpl]handlePostGetUserList([CtVariableReadImpl]condition, [CtVariableReadImpl]domain, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder, [CtVariableReadImpl]filteredUsers, [CtLiteralImpl]false);
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"post listener get conditional  user list for domain: " + [CtVariableReadImpl]domain);
        }
        [CtReturnImpl]return [CtVariableReadImpl]filteredUsers;
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.PaginatedSearchResult doGetUserList([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.Condition condition, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortBy, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtReturnImpl]return [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.PaginatedSearchResult();
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UniqueIDPaginatedSearchResult doGetUserListWithID([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.Condition condition, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortBy, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doGetUserListWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doGetUserListWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtArrayTypeReferenceImpl]java.lang.String[] listUsers([CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]int.class, [CtFieldReadImpl]int.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"listUsers", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtArrayTypeReferenceImpl]java.lang.String[]) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]int index = [CtInvocationImpl][CtVariableReadImpl]filter.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.PaginatedSearchResult userList;
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] users = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]offset <= [CtLiteralImpl]0) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]offset = [CtLiteralImpl]1;
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domain = [CtInvocationImpl][CtVariableReadImpl]filter.substring([CtLiteralImpl]0, [CtVariableReadImpl]index);
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secManager = [CtInvocationImpl]getSecondaryUserStoreManager([CtVariableReadImpl]domain);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secManager != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtCommentImpl]// Secondary UserStoreManager registered for this domain.
                [CtVariableWriteImpl]filter = [CtInvocationImpl][CtVariableReadImpl]filter.substring([CtBinaryOperatorImpl][CtVariableReadImpl]index + [CtLiteralImpl]1);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secManager)).isUniqueUserIdEnabled()) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secManager)).doListUsers([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset);
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secManager)).doListUsersWithID([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset).getPaginatedSearchResult();
                    }
                    [CtInvocationImpl]handlePostListPaginatedUsers([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl][CtVariableReadImpl]userList.getUsers())), [CtLiteralImpl]true);
                    [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]userList.getUsers();
                }
            }
        } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index == [CtLiteralImpl]0) [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl]doListUsers([CtInvocationImpl][CtVariableReadImpl]filter.substring([CtLiteralImpl]1), [CtVariableReadImpl]limit, [CtVariableReadImpl]offset);
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtInvocationImpl]doListUsersWithID([CtInvocationImpl][CtVariableReadImpl]filter.substring([CtLiteralImpl]1), [CtVariableReadImpl]limit, [CtVariableReadImpl]offset).getPaginatedSearchResult();
            }
            [CtInvocationImpl]handlePostListPaginatedUsers([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl][CtVariableReadImpl]userList.getUsers())), [CtLiteralImpl]true);
            [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]userList.getUsers();
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl]doListUsers([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset);
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtInvocationImpl]doListUsersWithID([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset).getPaginatedSearchResult();
            }
            [CtAssignmentImpl][CtVariableWriteImpl]users = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.combineArrays([CtVariableReadImpl]users, [CtInvocationImpl][CtVariableReadImpl]userList.getUsers());
            [CtAssignmentImpl][CtVariableWriteImpl]limit = [CtBinaryOperatorImpl][CtVariableReadImpl]limit - [CtFieldReadImpl][CtVariableReadImpl]users.length;
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetPaginatedUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_LISTING_PAGINATED_USERS.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_LISTING_PAGINATED_USERS.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtLiteralImpl]null, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String primaryDomain = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME);
        [CtLocalVariableImpl][CtTypeReferenceImpl]int nonPaginatedUserCount = [CtInvocationImpl][CtVariableReadImpl]userList.getSkippedUserCount();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtThisAccessImpl]this.getSecondaryUserStoreManager() != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager> entry : [CtInvocationImpl][CtFieldReadImpl]userStoreManagerHolder.entrySet()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]limit <= [CtLiteralImpl]0) [CtBlockImpl]{
                    [CtReturnImpl]return [CtVariableReadImpl]users;
                }
                [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]entry.getKey().equalsIgnoreCase([CtVariableReadImpl]primaryDomain)) [CtBlockImpl]{
                    [CtContinueImpl]continue;
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager storeManager = [CtInvocationImpl][CtVariableReadImpl]entry.getValue();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]storeManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                    [CtTryImpl]try [CtBlockImpl]{
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtFieldReadImpl][CtInvocationImpl][CtVariableReadImpl]userList.getUsers().length > [CtLiteralImpl]0) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]offset = [CtLiteralImpl]1;
                        } else [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]offset = [CtBinaryOperatorImpl][CtVariableReadImpl]offset - [CtVariableReadImpl]nonPaginatedUserCount;
                        }
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.PaginatedSearchResult secondUserList;
                        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (storeManager)).isUniqueUserIdEnabled()) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]secondUserList = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (storeManager)).doListUsers([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset);
                        } else [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]secondUserList = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (storeManager)).doListUsersWithID([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset).getPaginatedSearchResult();
                        }
                        [CtAssignmentImpl][CtVariableWriteImpl]nonPaginatedUserCount = [CtInvocationImpl][CtVariableReadImpl]secondUserList.getSkippedUserCount();
                        [CtAssignmentImpl][CtVariableWriteImpl]users = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.combineArrays([CtVariableReadImpl]users, [CtInvocationImpl][CtVariableReadImpl]secondUserList.getUsers());
                        [CtAssignmentImpl][CtVariableWriteImpl]limit = [CtBinaryOperatorImpl][CtVariableReadImpl]limit - [CtFieldReadImpl][CtVariableReadImpl]users.length;
                    }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                        [CtInvocationImpl]handleGetPaginatedUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_LISTING_PAGINATED_USERS.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_LISTING_PAGINATED_USERS.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtLiteralImpl]null, [CtLiteralImpl]null, [CtLiteralImpl]null);
                        [CtInvocationImpl][CtCommentImpl]// We can ignore and proceed. Ignore the results from this user store.
                        [CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]ex);
                    }
                }
            }
        }
        [CtInvocationImpl]handlePostListPaginatedUsers([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]users)), [CtLiteralImpl]true);
        [CtReturnImpl]return [CtVariableReadImpl]users;
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.PaginatedSearchResult doListUsers([CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtReturnImpl]return [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.PaginatedSearchResult();
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UniqueIDPaginatedSearchResult doListUsersWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doListUsersWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doListUsersWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get the count of Roles having a matching user name for the filter.
     *
     * @param filter
     * 		the filter for the user name. Use '*' to have all.
     * @throws UserStoreException
     * 		UserStoreException
     */
    protected [CtTypeReferenceImpl]long doCountRoles([CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Operation is not supported");
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.PaginatedSearchResult getUserListFromProperties([CtParameterImpl][CtTypeReferenceImpl]java.lang.String property, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String value, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtReturnImpl]return [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.PaginatedSearchResult();
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UniqueIDPaginatedSearchResult doGetUserListFromPropertiesWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String property, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String value, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doGetUserListFromPropertiesWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doGetUserListFromPropertiesWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void validateCondition([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.Condition condition) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]condition instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.ExpressionCondition) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl]isNotSupportedExpressionOperation([CtVariableReadImpl]condition)) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtLiteralImpl]"Unsupported expression operation: " + [CtInvocationImpl][CtVariableReadImpl]condition.getOperation());
            }
        } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]condition instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.OperationalCondition) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.Condition leftCondition = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.model.OperationalCondition) (condition)).getLeftCondition();
            [CtInvocationImpl]validateCondition([CtVariableReadImpl]leftCondition);
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.Condition rightCondition = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.model.OperationalCondition) (condition)).getRightCondition();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String operation = [CtInvocationImpl][CtVariableReadImpl]condition.getOperation();
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]OperationalOperation.AND.toString().equals([CtVariableReadImpl]operation)) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtLiteralImpl]"Unsupported Conditional operation: " + [CtInvocationImpl][CtVariableReadImpl]condition.getOperation());
            }
            [CtInvocationImpl]validateCondition([CtVariableReadImpl]rightCondition);
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]boolean isNotSupportedExpressionOperation([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.Condition condition) [CtBlockImpl]{
        [CtReturnImpl]return [CtUnaryOperatorImpl]![CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]ExpressionOperation.EQ.toString().equals([CtInvocationImpl][CtVariableReadImpl]condition.getOperation()) || [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]ExpressionOperation.CO.toString().equals([CtInvocationImpl][CtVariableReadImpl]condition.getOperation())) || [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]ExpressionOperation.SW.toString().equals([CtInvocationImpl][CtVariableReadImpl]condition.getOperation())) || [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]ExpressionOperation.EW.toString().equals([CtInvocationImpl][CtVariableReadImpl]condition.getOperation()));
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]boolean isAnInternalRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName) [CtBlockImpl]{
        [CtReturnImpl]return [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]roleName.toLowerCase().startsWith([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.APPLICATION_DOMAIN.toLowerCase()) || [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]roleName.toLowerCase().startsWith([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.INTERNAL_DOMAIN.toLowerCase())) || [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]roleName.toLowerCase().startsWith([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.WORKFLOW_DOMAIN.toLowerCase());
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> getUserStorePreferenceOrder() throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UserMgtContext userMgtContext = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.getUserMgtContextFromThreadLocal();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userMgtContext != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtLocalVariableImpl][CtCommentImpl]// Retrieve the relevant supplier to generate the user store preference order.
            [CtTypeReferenceImpl]org.wso2.carbon.user.core.config.UserStorePreferenceOrderSupplier<[CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> userStorePreferenceSupplier = [CtInvocationImpl][CtVariableReadImpl]userMgtContext.getUserStorePreferenceOrderSupplier();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userStorePreferenceSupplier != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtLocalVariableImpl][CtCommentImpl]// Generate the user store preference order.
                [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userStorePreferenceOrder = [CtInvocationImpl][CtVariableReadImpl]userStorePreferenceSupplier.get();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userStorePreferenceOrder != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtReturnImpl]return [CtVariableReadImpl]userStorePreferenceOrder;
                }
            }
        }
        [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.emptyList();
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]boolean hasUserStorePreferenceChainGenerated() throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtReturnImpl]return [CtBinaryOperatorImpl][CtThisAccessImpl]this instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]boolean isUserStoreChainNeeded([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userStorePreferenceOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtThisAccessImpl]this instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]false;
        }
        [CtInvocationImpl][CtVariableReadImpl]userStorePreferenceOrder.addAll([CtInvocationImpl]getUserStorePreferenceOrder());
        [CtReturnImpl]return [CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.collections.CollectionUtils.isNotEmpty([CtVariableReadImpl]userStorePreferenceOrder) && [CtUnaryOperatorImpl](![CtInvocationImpl]hasUserStorePreferenceChainGenerated());
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]boolean generateUserStoreChain([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl][CtTypeReferenceImpl]boolean domainProvided, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userStorePreferenceOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager initialUserStoreManager = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager prevUserStoreManager = [CtLiteralImpl]null;
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domainName : [CtVariableReadImpl]userStorePreferenceOrder) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userStoreManager = [CtInvocationImpl][CtThisAccessImpl]this.getSecondaryUserStoreManager([CtVariableReadImpl]domainName);
            [CtIfImpl][CtCommentImpl]// If the user store manager is instance of AbstractUserStoreManager then generate a user store chain using
            [CtCommentImpl]// IterativeUserStoreManager.
            if ([CtBinaryOperatorImpl][CtVariableReadImpl]userStoreManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]initialUserStoreManager == [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]prevUserStoreManager = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager([CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userStoreManager)));
                    [CtAssignmentImpl][CtVariableWriteImpl]initialUserStoreManager = [CtVariableReadImpl]prevUserStoreManager;
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager currentUserStoreManager = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager([CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userStoreManager)));
                    [CtInvocationImpl][CtVariableReadImpl]prevUserStoreManager.setNextUserStoreManager([CtVariableReadImpl]currentUserStoreManager);
                    [CtAssignmentImpl][CtVariableWriteImpl]prevUserStoreManager = [CtVariableReadImpl]currentUserStoreManager;
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"UserStoreManager is not an instance of AbstractUserStoreManager hence authenticate the" + [CtLiteralImpl]" user through all the available user store list.");
                }
                [CtReturnImpl]return [CtInvocationImpl]authenticateInternal([CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]domainProvided);
            }
        }
        [CtReturnImpl][CtCommentImpl]// Authenticate using the initial user store from the user store preference list.
        return [CtInvocationImpl][CtVariableReadImpl]initialUserStoreManager.authenticate([CtVariableReadImpl]userName, [CtVariableReadImpl]credential);
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]long getCountUsers([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimUri, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filterValue, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userManager) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userManager)).countUsersWithClaims([CtVariableReadImpl]claimUri, [CtVariableReadImpl]filterValue);
        } else [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String msg = [CtLiteralImpl]"Get user count is not supported by this user store: ";
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtVariableReadImpl]msg + [CtInvocationImpl][CtVariableReadImpl]userManager.getClass());
            }
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtVariableReadImpl]msg + [CtInvocationImpl][CtVariableReadImpl]userManager.getClass());
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]boolean isInternalRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String domain) [CtBlockImpl]{
        [CtReturnImpl]return [CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]domain.equals([CtLiteralImpl]"Internal") || [CtInvocationImpl][CtVariableReadImpl]domain.equals([CtLiteralImpl]"Application");
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.lang.String removeDomainIfNotApplicationRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName) [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String formattedRoleName;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]roleName.contains([CtTypeAccessImpl]UserCoreConstants.DOMAIN_SEPARATOR) && [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]roleName.toLowerCase().startsWith([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.APPLICATION_DOMAIN.toLowerCase())) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]formattedRoleName = [CtVariableReadImpl]roleName;
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]formattedRoleName = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]roleName);
        }
        [CtReturnImpl]return [CtVariableReadImpl]formattedRoleName;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void createHybridRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList, [CtParameterImpl]org.wso2.carbon.user.core.common.api[] permissions) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl][CtCommentImpl]// It is possible that the adding role could already exists at the table. But if concurrent requests were made,
        [CtCommentImpl]// it is possible that the adding role does not exists at this moment, but it still could exists at the
        [CtCommentImpl]// moment when DB query is called.
        try [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.addHybridRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtIfImpl][CtCommentImpl]// In case of a unique constraint violation.
            if ([CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.common.ERROR_CODE_ROLE_ALREADY_EXISTS.getCode().equals([CtInvocationImpl][CtVariableReadImpl]e.getErrorCode())) [CtBlockImpl]{
                [CtInvocationImpl]handleRoleAlreadyExistException([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
            }
            [CtThrowImpl][CtCommentImpl]// Otherwise, the error is propagated.
            throw [CtVariableReadImpl]e;
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void createSystemRole([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList, [CtParameterImpl][CtArrayTypeReferenceImpl]org.wso2.carbon.user.core.Permission[] permissions) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.isExistingRole([CtVariableReadImpl]roleName)) [CtBlockImpl]{
            [CtInvocationImpl]handleRoleAlreadyExistException([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
        }
        [CtTryImpl][CtCommentImpl]// It is possible that the adding role could already exists at the table. But if concurrent requests were made,
        [CtCommentImpl]// it is possible that the adding role does not exists at this moment, but it still could exists at the
        [CtCommentImpl]// moment when DB query is called.
        try [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.addSystemRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.common.ERROR_CODE_DUPLICATE_WHILE_ADDING_A_SYSTEM_ROLE.getCode().contains([CtInvocationImpl][CtVariableReadImpl]e.getErrorCode())) [CtBlockImpl]{
                [CtInvocationImpl][CtCommentImpl]// A unique constraint violation due to already existing role.
                handleRoleAlreadyExistException([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
            }
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult authenticateWithID([CtParameterImpl]final [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.LoginIdentifier> loginIdentifiers, [CtParameterImpl]final [CtTypeReferenceImpl]java.lang.String domain, [CtParameterImpl]final [CtTypeReferenceImpl]java.lang.Object credential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.security.AccessController.doPrivileged([CtLambdaImpl](([CtTypeReferenceImpl]java.security.PrivilegedExceptionAction<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult>) (() -> [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]validateUserNameAndCredentials([CtVariableReadImpl]loginIdentifiers, [CtVariableReadImpl]credential)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult authenticationResult = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult([CtFieldReadImpl]AuthenticationResult.AuthenticationStatus.FAIL);
                    [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setFailureReason([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.FailureReason([CtLiteralImpl]"Invalid Credentials"));
                    [CtReturnImpl]return [CtVariableReadImpl]authenticationResult;
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userStorePreferenceOrder = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
                [CtIfImpl][CtCommentImpl]// Check whether user store chain needs to be generated or not.
                if ([CtInvocationImpl]isUserStoreChainNeeded([CtVariableReadImpl]userStorePreferenceOrder)) [CtBlockImpl]{
                    [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"User store chain generation is needed hence generating the user store chain using " + [CtLiteralImpl]"the user") + [CtLiteralImpl]" store preference order: ") + [CtVariableReadImpl]userStorePreferenceOrder);
                    }
                    [CtReturnImpl]return [CtInvocationImpl]generateUserStoreChainWithID([CtVariableReadImpl]loginIdentifiers, [CtVariableReadImpl]domain, [CtVariableReadImpl]credential, [CtVariableReadImpl]userStorePreferenceOrder);
                } else [CtBlockImpl]{
                    [CtReturnImpl][CtCommentImpl]// Authenticate the user.
                    return [CtInvocationImpl]authenticateInternalWithID([CtVariableReadImpl]loginIdentifiers, [CtVariableReadImpl]domain, [CtVariableReadImpl]credential);
                }
            })));
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.security.PrivilegedActionException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]e.getException() instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException)) [CtBlockImpl]{
                [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]loginIdentifiers, [CtVariableReadImpl]credential);
            }
            [CtThrowImpl]throw [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException) ([CtVariableReadImpl]e.getException()));
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult generateUserStoreChainWithID([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.LoginIdentifier> loginIdentifiers, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domain, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userStorePreferenceOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager initialUserStoreManager = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager prevUserStoreManager = [CtLiteralImpl]null;
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domainName : [CtVariableReadImpl]userStorePreferenceOrder) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userStoreManager = [CtInvocationImpl][CtThisAccessImpl]this.getSecondaryUserStoreManager([CtVariableReadImpl]domainName);
            [CtIfImpl][CtCommentImpl]// If the user store manager is instance of AbstractUserStoreManager then generate a user store chain using
            [CtCommentImpl]// IterativeUserStoreManager.
            if ([CtBinaryOperatorImpl][CtVariableReadImpl]userStoreManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]initialUserStoreManager == [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]prevUserStoreManager = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager([CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userStoreManager)));
                    [CtAssignmentImpl][CtVariableWriteImpl]initialUserStoreManager = [CtVariableReadImpl]prevUserStoreManager;
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager currentUserStoreManager = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager([CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userStoreManager)));
                    [CtInvocationImpl][CtVariableReadImpl]prevUserStoreManager.setNextUserStoreManager([CtVariableReadImpl]currentUserStoreManager);
                    [CtAssignmentImpl][CtVariableWriteImpl]prevUserStoreManager = [CtVariableReadImpl]currentUserStoreManager;
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"UserStoreManager is not an instance of AbstractUserStoreManager hence authenticate the" + [CtLiteralImpl]" user through all the available user store list.");
                }
                [CtReturnImpl]return [CtInvocationImpl]authenticateInternalWithID([CtVariableReadImpl]loginIdentifiers, [CtVariableReadImpl]domain, [CtVariableReadImpl]credential);
            }
        }
        [CtReturnImpl][CtCommentImpl]// Authenticate using the initial user store from the user store preference list.
        return [CtInvocationImpl][CtVariableReadImpl]initialUserStoreManager.authenticateWithID([CtVariableReadImpl]loginIdentifiers, [CtVariableReadImpl]domain, [CtVariableReadImpl]credential);
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult authenticateInternalWithID([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.LoginIdentifier> loginIdentifiers, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domain, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager abstractUserStoreManager = [CtThisAccessImpl]this;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtThisAccessImpl]this instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]abstractUserStoreManager = [CtInvocationImpl][CtThisAccessImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager) (this)).getAbstractUserStoreManager();
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean authenticated = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult authenticationResult = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult([CtFieldReadImpl]AuthenticationResult.AuthenticationStatus.FAIL);
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.Secret credentialObj;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]credentialObj = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.Secret.getSecret([CtVariableReadImpl]credential);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.UnsupportedSecretTypeException e) [CtBlockImpl]{
            [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getMessage(), [CtVariableReadImpl]loginIdentifiers, [CtVariableReadImpl]credential);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.toString(), [CtVariableReadImpl]e);
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object credentialArgument;
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credentialObj;
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credential;
                    }
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPreAuthenticateWithID([CtVariableReadImpl]loginIdentifiers, [CtVariableReadImpl]credentialArgument, [CtVariableReadImpl]abstractUserStoreManager)) [CtBlockImpl]{
                        [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]loginIdentifiers, [CtVariableReadImpl]credentialArgument);
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticationStatus([CtTypeAccessImpl]AuthenticationResult.AuthenticationStatus.FAIL);
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setFailureReason([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.FailureReason([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getMessage()));
                        [CtReturnImpl]return [CtVariableReadImpl]authenticationResult;
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]loginIdentifiers, [CtVariableReadImpl]credential);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtVariableReadImpl]abstractUserStoreManager.getTenantId();
            [CtTryImpl]try [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.LoginIdentifier loginIdentifier : [CtVariableReadImpl]loginIdentifiers) [CtBlockImpl]{
                    [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]loginIdentifier.getLoginIdentifierType().equals([CtTypeAccessImpl]LoginIdentifier.LoginIdentifierType.CLAIM_URI)) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String mappedAttribute = [CtInvocationImpl][CtFieldReadImpl]claimManager.getAttributeName([CtInvocationImpl]getMyDomainName(), [CtInvocationImpl][CtVariableReadImpl]loginIdentifier.getLoginKey());
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]mappedAttribute != [CtLiteralImpl]null) [CtBlockImpl]{
                            [CtInvocationImpl][CtVariableReadImpl]loginIdentifier.setLoginIdentifierType([CtTypeAccessImpl]LoginIdentifier.LoginIdentifierType.ATTRIBUTE);
                            [CtInvocationImpl][CtVariableReadImpl]loginIdentifier.setLoginKey([CtVariableReadImpl]mappedAttribute);
                        }
                    }
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.service.RealmService realmService = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.getRealmService();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]realmService != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]boolean tenantActive = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]realmService.getTenantManager().isTenantActive([CtVariableReadImpl]tenantId);
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]tenantActive) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_TENANT_DEACTIVATED.getCode();
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_TENANT_DEACTIVATED.getMessage(), [CtVariableReadImpl]tenantId);
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.warn([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
                        [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]loginIdentifiers, [CtVariableReadImpl]credential);
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticationStatus([CtTypeAccessImpl]AuthenticationResult.AuthenticationStatus.FAIL);
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setFailureReason([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.FailureReason([CtBinaryOperatorImpl][CtLiteralImpl]"Inactive Tenant: " + [CtVariableReadImpl]tenantId));
                        [CtReturnImpl]return [CtVariableReadImpl]authenticationResult;
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]loginIdentifiers, [CtVariableReadImpl]credential);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while trying to check tenant status for Tenant : " + [CtVariableReadImpl]tenantId, [CtVariableReadImpl]e);
            }
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]domain)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secUserStoreManager = [CtInvocationImpl][CtVariableReadImpl]abstractUserStoreManager.getSecondaryUserStoreManager([CtVariableReadImpl]domain);
                [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled([CtVariableReadImpl]secUserStoreManager)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]authenticationResult = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secUserStoreManager)).doAuthenticateWithID([CtVariableReadImpl]loginIdentifiers, [CtVariableReadImpl]credential);
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userName = [CtInvocationImpl]getUsernameByClaims([CtVariableReadImpl]loginIdentifiers);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUniqueId([CtVariableReadImpl]userName, [CtThisAccessImpl]this);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]boolean status = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secUserStoreManager)).doAuthenticate([CtVariableReadImpl]userName, [CtVariableReadImpl]credential);
                    [CtIfImpl]if ([CtVariableReadImpl]status) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl]getUser([CtVariableReadImpl]userID, [CtVariableReadImpl]userName);
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticationStatus([CtTypeAccessImpl]AuthenticationResult.AuthenticationStatus.SUCCESS);
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticatedUser([CtVariableReadImpl]user);
                    } else [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticationStatus([CtTypeAccessImpl]AuthenticationResult.AuthenticationStatus.FAIL);
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setFailureReason([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.FailureReason([CtLiteralImpl]"Authentication failed."));
                    }
                }
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]authenticationResult.getAuthenticationStatus() == [CtFieldReadImpl]AuthenticationResult.AuthenticationStatus.SUCCESS) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]authenticated = [CtLiteralImpl]true;
                }
                [CtIfImpl]if ([CtVariableReadImpl]authenticated) [CtBlockImpl]{
                    [CtInvocationImpl][CtCommentImpl]// Set domain in thread local variable for subsequent operations
                    [CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.setDomainInThreadLocal([CtVariableReadImpl]domain);
                }
            } else [CtBlockImpl]{
                [CtIfImpl][CtCommentImpl]// Domain is not provided. Try to authenticate with the current user store manager.
                if ([CtInvocationImpl][CtVariableReadImpl]abstractUserStoreManager.isUniqueUserIdEnabled()) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]authenticationResult = [CtInvocationImpl][CtVariableReadImpl]abstractUserStoreManager.doAuthenticateWithID([CtVariableReadImpl]loginIdentifiers, [CtVariableReadImpl]credential);
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userName = [CtInvocationImpl]getUsernameByClaims([CtVariableReadImpl]loginIdentifiers);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUniqueId([CtVariableReadImpl]userName, [CtVariableReadImpl]abstractUserStoreManager);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]boolean status = [CtInvocationImpl][CtVariableReadImpl]abstractUserStoreManager.doAuthenticate([CtVariableReadImpl]userName, [CtVariableReadImpl]credential);
                    [CtIfImpl]if ([CtVariableReadImpl]status) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl]getUser([CtVariableReadImpl]userID, [CtVariableReadImpl]userName);
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticationStatus([CtTypeAccessImpl]AuthenticationResult.AuthenticationStatus.SUCCESS);
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticatedUser([CtVariableReadImpl]user);
                    } else [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticationStatus([CtTypeAccessImpl]AuthenticationResult.AuthenticationStatus.FAIL);
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setFailureReason([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.FailureReason([CtLiteralImpl]"Authentication failed."));
                    }
                }
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]authenticationResult.getAuthenticationStatus() == [CtFieldReadImpl]AuthenticationResult.AuthenticationStatus.SUCCESS) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]authenticated = [CtLiteralImpl]true;
                }
                [CtIfImpl]if ([CtVariableReadImpl]authenticated) [CtBlockImpl]{
                    [CtInvocationImpl][CtCommentImpl]// Set domain in thread local variable for subsequent operations
                    [CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.setDomainInThreadLocal([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.getDomainName([CtFieldReadImpl][CtVariableReadImpl]abstractUserStoreManager.realmConfig));
                }
            }
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]credentialObj.clear();
        }
        [CtIfImpl][CtCommentImpl]// If authentication fails in the previous step and if the user has not specified a
        [CtCommentImpl]// domain- then we need to execute chained UserStoreManagers recursively.
        if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtVariableReadImpl]authenticated) && [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]domain)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager userStoreManager;
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtThisAccessImpl]this instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager iterativeUserStoreManager = [CtThisAccessImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager) (this));
                [CtAssignmentImpl][CtVariableWriteImpl]userStoreManager = [CtInvocationImpl][CtVariableReadImpl]iterativeUserStoreManager.nextUserStoreManager();
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userStoreManager = [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]abstractUserStoreManager.getSecondaryUserStoreManager()));
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userStoreManager != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]authenticationResult = [CtInvocationImpl][CtVariableReadImpl]userStoreManager.authenticateWithID([CtVariableReadImpl]loginIdentifiers, [CtLiteralImpl]null, [CtVariableReadImpl]credential);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]authenticationResult.getAuthenticationStatus() == [CtFieldReadImpl]AuthenticationResult.AuthenticationStatus.SUCCESS) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]authenticated = [CtLiteralImpl]true;
                }
            }
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]authenticated) [CtBlockImpl]{
            [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getMessage(), [CtLiteralImpl]"Authentication failed"), [CtVariableReadImpl]loginIdentifiers, [CtVariableReadImpl]credential);
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl][CtCommentImpl]// You cannot change authentication decision in post handler to TRUE
            for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPostAuthenticateWithID([CtVariableReadImpl]loginIdentifiers, [CtVariableReadImpl]authenticationResult, [CtVariableReadImpl]abstractUserStoreManager)) [CtBlockImpl]{
                    [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_AUTHENTICATION.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]loginIdentifiers, [CtVariableReadImpl]credential);
                    [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticationStatus([CtTypeAccessImpl]AuthenticationResult.AuthenticationStatus.FAIL);
                    [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setFailureReason([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.FailureReason([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_AUTHENTICATION.getMessage()));
                    [CtReturnImpl]return [CtVariableReadImpl]authenticationResult;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_AUTHENTICATION.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]loginIdentifiers, [CtVariableReadImpl]credential);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]authenticated) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtLiteralImpl]"Authentication failure. Wrong userID or password is provided.");
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]authenticationResult;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.lang.String getUsernameByClaims([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.LoginIdentifier> loginIdentifiers) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]loginIdentifiers.isEmpty()) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]null;
        }
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.LoginIdentifier loginIdentifier : [CtVariableReadImpl]loginIdentifiers) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]loginIdentifier.getLoginIdentifierType().equals([CtTypeAccessImpl]LoginIdentifier.LoginIdentifierType.CLAIM_URI)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String mappedAttribute;
                [CtTryImpl]try [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]mappedAttribute = [CtInvocationImpl][CtFieldReadImpl]claimManager.getAttributeName([CtInvocationImpl]getMyDomainName(), [CtInvocationImpl][CtVariableReadImpl]loginIdentifier.getLoginKey());
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]e);
                }
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]mappedAttribute != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]loginIdentifier.setLoginIdentifierType([CtTypeAccessImpl]LoginIdentifier.LoginIdentifierType.ATTRIBUTE);
                    [CtInvocationImpl][CtVariableReadImpl]loginIdentifier.setLoginKey([CtVariableReadImpl]mappedAttribute);
                }
            }
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userName = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] resultedUserList = [CtLiteralImpl]null;
        [CtForEachImpl][CtCommentImpl]// Need to populate the claim email as the first element in the
        [CtCommentImpl]// passed array.
        for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.LoginIdentifier loginIdentifier : [CtVariableReadImpl]loginIdentifiers) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String attribute = [CtInvocationImpl][CtVariableReadImpl]loginIdentifier.getLoginKey();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String attributeValue = [CtInvocationImpl][CtVariableReadImpl]loginIdentifier.getLoginValue();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]attribute != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtVariableReadImpl]attributeValue != [CtLiteralImpl]null)) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Searching users for " + [CtVariableReadImpl]attribute) + [CtLiteralImpl]" with the value :") + [CtVariableReadImpl]attributeValue);
                }
                [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] matchedUserList = [CtInvocationImpl]getUserListFromProperties([CtVariableReadImpl]attribute, [CtVariableReadImpl]attributeValue, [CtLiteralImpl]null);
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.ArrayUtils.isEmpty([CtVariableReadImpl]matchedUserList)) [CtBlockImpl]{
                    [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Matched userList : " + [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.toString([CtVariableReadImpl]matchedUserList));
                    }
                    [CtIfImpl][CtCommentImpl]// If more than one user find the first matching user list. Hence need to define unique claims
                    if ([CtBinaryOperatorImpl][CtVariableReadImpl]resultedUserList != [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> users = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
                        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String user : [CtVariableReadImpl]resultedUserList) [CtBlockImpl]{
                            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String matchedUser : [CtVariableReadImpl]matchedUserList) [CtBlockImpl]{
                                [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]user.equals([CtVariableReadImpl]matchedUser)) [CtBlockImpl]{
                                    [CtInvocationImpl][CtVariableReadImpl]users.add([CtVariableReadImpl]matchedUser);
                                }
                            }
                        }
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]users.size() > [CtLiteralImpl]0) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]resultedUserList = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtInvocationImpl][CtVariableReadImpl]users.size()];
                            [CtInvocationImpl][CtVariableReadImpl]users.toArray([CtVariableReadImpl]resultedUserList);
                            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Current matching temporary userlist :" + [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.toString([CtVariableReadImpl]resultedUserList));
                            }
                        } else [CtBlockImpl]{
                            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"There are no users for " + [CtVariableReadImpl]attribute) + [CtLiteralImpl]" with the value : ") + [CtVariableReadImpl]attributeValue) + [CtLiteralImpl]" in the previously filtered user list");
                            }
                            [CtReturnImpl]return [CtLiteralImpl]null;
                        }
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]resultedUserList = [CtVariableReadImpl]matchedUserList;
                        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Current matching temporary userlist :" + [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.toString([CtVariableReadImpl]resultedUserList));
                        }
                    }
                } else [CtBlockImpl]{
                    [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"There are no matching users for " + [CtVariableReadImpl]attribute) + [CtLiteralImpl]" with the value : ") + [CtVariableReadImpl]attributeValue);
                    }
                    [CtReturnImpl]return [CtLiteralImpl]null;
                }
            }
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtFieldReadImpl][CtVariableReadImpl]resultedUserList.length == [CtLiteralImpl]1) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userName = [CtArrayReadImpl][CtVariableReadImpl]resultedUserList[[CtLiteralImpl]0];
        } else [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"There are more than one user in the result set : " + [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.toString([CtVariableReadImpl]resultedUserList));
        }
        [CtReturnImpl]return [CtVariableReadImpl]userName;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult authenticateWithID([CtParameterImpl]final [CtTypeReferenceImpl]java.lang.String preferredUserNameClaim, [CtParameterImpl]final [CtTypeReferenceImpl]java.lang.String preferredUserNameValue, [CtParameterImpl]final [CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl]final [CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.security.AccessController.doPrivileged([CtLambdaImpl](([CtTypeReferenceImpl]java.security.PrivilegedExceptionAction<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult>) (() -> [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]validateUserNameAndCredential([CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credential)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult authenticationResult = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult([CtFieldReadImpl]AuthenticationResult.AuthenticationStatus.FAIL);
                    [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setFailureReason([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.FailureReason([CtLiteralImpl]"Invalid Credentials"));
                    [CtReturnImpl]return [CtVariableReadImpl]authenticationResult;
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]int index = [CtInvocationImpl][CtVariableReadImpl]preferredUserNameValue.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
                [CtLocalVariableImpl][CtTypeReferenceImpl]boolean domainProvided = [CtBinaryOperatorImpl][CtVariableReadImpl]index > [CtLiteralImpl]0;
                [CtReturnImpl]return [CtInvocationImpl]authenticateWithID([CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credential, [CtVariableReadImpl]profileName, [CtVariableReadImpl]domainProvided);
            })));
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.security.PrivilegedActionException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]e.getException() instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException)) [CtBlockImpl]{
                [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credential);
            }
            [CtThrowImpl]throw [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException) ([CtVariableReadImpl]e.getException()));
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Given the preferred user name and a credential object, the method will validate whether the user can be
     * authenticated.
     *
     * @param preferredUserNameClaim
     * 		The preferred user name claim.
     * @param preferredUserNameValue
     * 		The preferred user name value.
     * @param credential
     * 		The credential of a user.
     * @param profileName
     * 		profile name.
     * @param domainProvided
     * 		Whether the domain is provided.
     * @return authenticated user.
     * @throws UserStoreException
     * 		Thrown by the underlying UserStoreManager.
     */
    protected [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult authenticateWithID([CtParameterImpl]final [CtTypeReferenceImpl]java.lang.String preferredUserNameClaim, [CtParameterImpl]final [CtTypeReferenceImpl]java.lang.String preferredUserNameValue, [CtParameterImpl]final [CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl]final [CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl]final [CtTypeReferenceImpl]boolean domainProvided) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.security.AccessController.doPrivileged([CtLambdaImpl](([CtTypeReferenceImpl]java.security.PrivilegedExceptionAction<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult>) (() -> [CtInvocationImpl]authenticateInternalIterationWithID([CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credential, [CtVariableReadImpl]profileName, [CtVariableReadImpl]domainProvided))));
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.security.PrivilegedActionException e) [CtBlockImpl]{
            [CtThrowImpl]throw [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException) ([CtVariableReadImpl]e.getException()));
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult authenticateInternalIterationWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String preferredUserNameClaim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String preferredUserNameValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]boolean domainProvided) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userStorePreferenceOrder = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtIfImpl][CtCommentImpl]// Check whether user store chain needs to be generated or not.
        if ([CtInvocationImpl]isUserStoreChainNeeded([CtVariableReadImpl]userStorePreferenceOrder)) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"User store chain generation is needed hence generating the user store chain using the user" + [CtLiteralImpl]" store preference order: ") + [CtVariableReadImpl]userStorePreferenceOrder);
            }
            [CtReturnImpl]return [CtInvocationImpl]generateUserStoreChainWithID([CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credential, [CtVariableReadImpl]profileName, [CtVariableReadImpl]domainProvided, [CtVariableReadImpl]userStorePreferenceOrder);
        } else [CtBlockImpl]{
            [CtReturnImpl][CtCommentImpl]// Authenticate the user.
            return [CtInvocationImpl]authenticateInternalWithID([CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credential, [CtVariableReadImpl]profileName, [CtVariableReadImpl]domainProvided);
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult generateUserStoreChainWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String preferredUserNameClaim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String preferredUserNameValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]boolean domainProvided, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userStorePreferenceOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager initialUserStoreManager = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager prevUserStoreManager = [CtLiteralImpl]null;
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domainName : [CtVariableReadImpl]userStorePreferenceOrder) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userStoreManager = [CtInvocationImpl][CtThisAccessImpl]this.getSecondaryUserStoreManager([CtVariableReadImpl]domainName);
            [CtIfImpl][CtCommentImpl]// If the user store manager is instance of AbstractUserStoreManager then generate a user store chain using
            [CtCommentImpl]// IterativeUserStoreManager.
            if ([CtBinaryOperatorImpl][CtVariableReadImpl]userStoreManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]initialUserStoreManager == [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]prevUserStoreManager = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager([CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userStoreManager)));
                    [CtAssignmentImpl][CtVariableWriteImpl]initialUserStoreManager = [CtVariableReadImpl]prevUserStoreManager;
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager currentUserStoreManager = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager([CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userStoreManager)));
                    [CtInvocationImpl][CtVariableReadImpl]prevUserStoreManager.setNextUserStoreManager([CtVariableReadImpl]currentUserStoreManager);
                    [CtAssignmentImpl][CtVariableWriteImpl]prevUserStoreManager = [CtVariableReadImpl]currentUserStoreManager;
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"UserStoreManager is not an instance of AbstractUserStoreManager hence authenticate the" + [CtLiteralImpl]" user through all the available user store list.");
                }
                [CtReturnImpl]return [CtInvocationImpl]authenticateInternalWithID([CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credential, [CtVariableReadImpl]profileName, [CtVariableReadImpl]domainProvided);
            }
        }
        [CtReturnImpl][CtCommentImpl]// Authenticate using the initial user store from the user store preference list.
        return [CtInvocationImpl][CtVariableReadImpl]initialUserStoreManager.authenticateWithID([CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credential, [CtVariableReadImpl]profileName);
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult authenticateInternalWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String preferredUserNameClaim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String preferredUserNameValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]boolean domainProvided) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager abstractUserStoreManager = [CtThisAccessImpl]this;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtThisAccessImpl]this instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]abstractUserStoreManager = [CtInvocationImpl][CtThisAccessImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager) (this)).getAbstractUserStoreManager();
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean authenticated = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult authenticationResult = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult([CtFieldReadImpl]AuthenticationResult.AuthenticationStatus.FAIL);
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]preferredUserNameValue);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive() && [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager() instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager)) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).authenticateWithID([CtVariableReadImpl]preferredUserNameClaim, [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]credential, [CtVariableReadImpl]profileName);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.Secret credentialObj;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]credentialObj = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.Secret.getSecret([CtVariableReadImpl]credential);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.UnsupportedSecretTypeException e) [CtBlockImpl]{
            [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getMessage(), [CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credential);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.toString(), [CtVariableReadImpl]e);
        }
        [CtTryImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        [CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserStoreManagerListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserStoreManagerListeners()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object credentialArgument;
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credentialObj;
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credential;
                }
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManagerListener) (listener)).authenticateWithID([CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credentialArgument, [CtVariableReadImpl]abstractUserStoreManager)) [CtBlockImpl]{
                    [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getMessage(), [CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credentialArgument);
                    [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticationStatus([CtTypeAccessImpl]AuthenticationResult.AuthenticationStatus.FAIL);
                    [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setFailureReason([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.FailureReason([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getMessage()));
                    [CtReturnImpl]return [CtVariableReadImpl]authenticationResult;
                }
            }
            [CtTryImpl]try [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object credentialArgument;
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credentialObj;
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credential;
                    }
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPreAuthenticateWithID([CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credentialArgument, [CtVariableReadImpl]abstractUserStoreManager)) [CtBlockImpl]{
                        [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credentialArgument);
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticationStatus([CtTypeAccessImpl]AuthenticationResult.AuthenticationStatus.FAIL);
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setFailureReason([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.FailureReason([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getMessage()));
                        [CtReturnImpl]return [CtVariableReadImpl]authenticationResult;
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credential);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
            [CtLocalVariableImpl][CtCommentImpl]// #################### </Listeners> #####################################################
            [CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtVariableReadImpl]abstractUserStoreManager.getTenantId();
            [CtTryImpl]try [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.service.RealmService realmService = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.getRealmService();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]realmService != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]boolean tenantActive = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]realmService.getTenantManager().isTenantActive([CtVariableReadImpl]tenantId);
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]tenantActive) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_TENANT_DEACTIVATED.getCode();
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_TENANT_DEACTIVATED.getMessage(), [CtVariableReadImpl]tenantId);
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.warn([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
                        [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credential);
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticationStatus([CtTypeAccessImpl]AuthenticationResult.AuthenticationStatus.FAIL);
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setFailureReason([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.FailureReason([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_TENANT_DEACTIVATED.getMessage()));
                        [CtReturnImpl]return [CtVariableReadImpl]authenticationResult;
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credential);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while trying to check tenant status for Tenant : " + [CtVariableReadImpl]tenantId, [CtVariableReadImpl]e);
            }
            [CtTryImpl][CtCommentImpl]// We are here due to two reason. Either there is no secondary UserStoreManager or no
            [CtCommentImpl]// domain name provided with user name.
            try [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String preferredUserNameProperty = [CtInvocationImpl][CtFieldReadImpl]claimManager.getAttributeName([CtInvocationImpl]getMyDomainName(), [CtVariableReadImpl]preferredUserNameClaim);
                [CtIfImpl][CtCommentImpl]// Let's authenticate with the primary UserStoreManager.
                if ([CtInvocationImpl][CtVariableReadImpl]abstractUserStoreManager.isUniqueUserIdEnabled()) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]authenticationResult = [CtInvocationImpl][CtVariableReadImpl]abstractUserStoreManager.doAuthenticateWithID([CtVariableReadImpl]preferredUserNameProperty, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credentialObj, [CtVariableReadImpl]profileName);
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> users = [CtInvocationImpl]doGetUserList([CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]profileName, [CtInvocationImpl][CtVariableReadImpl]abstractUserStoreManager.getMyDomainName(), [CtVariableReadImpl]abstractUserStoreManager);
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]users.size() != [CtLiteralImpl]1) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Users count matching to claim: " + [CtVariableReadImpl]preferredUserNameClaim) + [CtLiteralImpl]" and value: ") + [CtVariableReadImpl]preferredUserNameValue) + [CtLiteralImpl]" is: ") + [CtInvocationImpl][CtVariableReadImpl]users.size();
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticationStatus([CtTypeAccessImpl]AuthenticationResult.AuthenticationStatus.FAIL);
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setFailureReason([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.FailureReason([CtVariableReadImpl]message));
                        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtVariableReadImpl]message);
                        }
                    } else [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean status = [CtInvocationImpl][CtVariableReadImpl]abstractUserStoreManager.doAuthenticate([CtInvocationImpl][CtVariableReadImpl]users.get([CtLiteralImpl]0), [CtVariableReadImpl]credentialObj);
                        [CtAssignmentImpl][CtVariableWriteImpl]authenticationResult = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult([CtConditionalImpl][CtVariableReadImpl]status ? [CtFieldReadImpl]AuthenticationResult.AuthenticationStatus.SUCCESS : [CtFieldReadImpl]AuthenticationResult.AuthenticationStatus.FAIL);
                        [CtIfImpl]if ([CtVariableReadImpl]status) [CtBlockImpl]{
                            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUniqueId([CtInvocationImpl][CtVariableReadImpl]users.get([CtLiteralImpl]0), [CtThisAccessImpl]this);
                            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
                            [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticatedUser([CtVariableReadImpl]user);
                        } else [CtBlockImpl]{
                            [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setFailureReason([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.FailureReason([CtLiteralImpl]"Invalid credentials."));
                        }
                    }
                }
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]authenticationResult.getAuthenticationStatus() == [CtFieldReadImpl]AuthenticationResult.AuthenticationStatus.SUCCESS) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]authenticated = [CtLiteralImpl]true;
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.lang.Exception e) [CtBlockImpl]{
                [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credential);
                [CtIfImpl][CtCommentImpl]// We can ignore and proceed. Ignore the results from this user store.
                if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Error occurred while authenticating user: " + [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]e);
                } else [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]e);
                }
                [CtAssignmentImpl][CtVariableWriteImpl]authenticated = [CtLiteralImpl]false;
            }
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]credentialObj.clear();
        }
        [CtIfImpl]if ([CtVariableReadImpl]authenticated) [CtBlockImpl]{
            [CtInvocationImpl][CtCommentImpl]// Set domain in thread local variable for subsequent operations
            [CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.setDomainInThreadLocal([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.getDomainName([CtFieldReadImpl][CtVariableReadImpl]abstractUserStoreManager.realmConfig));
        }
        [CtIfImpl][CtCommentImpl]// If authentication fails in the previous step and if the user has not specified a
        [CtCommentImpl]// domain- then we need to execute chained UserStoreManagers recursively.
        if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtVariableReadImpl]authenticated) && [CtUnaryOperatorImpl](![CtVariableReadImpl]domainProvided)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager userStoreManager;
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtThisAccessImpl]this instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager iterativeUserStoreManager = [CtThisAccessImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager) (this));
                [CtAssignmentImpl][CtVariableWriteImpl]userStoreManager = [CtInvocationImpl][CtVariableReadImpl]iterativeUserStoreManager.nextUserStoreManager();
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userStoreManager = [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]abstractUserStoreManager.getSecondaryUserStoreManager()));
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userStoreManager != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]authenticationResult = [CtInvocationImpl][CtVariableReadImpl]userStoreManager.authenticateWithID([CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credential, [CtVariableReadImpl]profileName, [CtVariableReadImpl]domainProvided);
            }
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]authenticated) [CtBlockImpl]{
            [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getMessage(), [CtLiteralImpl]"Authentication failed"), [CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credential);
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl][CtCommentImpl]// You cannot change authentication decision in post handler to TRUE
            for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPostAuthenticateWithID([CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]authenticationResult, [CtVariableReadImpl]abstractUserStoreManager)) [CtBlockImpl]{
                    [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_AUTHENTICATION.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credential);
                    [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticationStatus([CtTypeAccessImpl]AuthenticationResult.AuthenticationStatus.FAIL);
                    [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setFailureReason([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.FailureReason([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_AUTHENTICATION.getMessage()));
                    [CtReturnImpl]return [CtVariableReadImpl]authenticationResult;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_AUTHENTICATION.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]preferredUserNameClaim, [CtVariableReadImpl]preferredUserNameValue, [CtVariableReadImpl]credential);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]authenticated) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtLiteralImpl]"Authentication failure. Wrong username or password is provided.");
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]authenticationResult;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult authenticateWithID([CtParameterImpl]final [CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl]final [CtTypeReferenceImpl]java.lang.Object credential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.security.AccessController.doPrivileged([CtLambdaImpl](([CtTypeReferenceImpl]java.security.PrivilegedExceptionAction<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult>) (() -> [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]validateUserIDAndCredential([CtVariableReadImpl]userID, [CtVariableReadImpl]credential)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult authenticationResult = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult([CtFieldReadImpl]AuthenticationResult.AuthenticationStatus.FAIL);
                    [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setFailureReason([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.FailureReason([CtLiteralImpl]"Invalid Credentials"));
                    [CtReturnImpl]return [CtVariableReadImpl]authenticationResult;
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userStorePreferenceOrder = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
                [CtIfImpl][CtCommentImpl]// Check whether user store chain needs to be generated or not.
                if ([CtInvocationImpl]isUserStoreChainNeeded([CtVariableReadImpl]userStorePreferenceOrder)) [CtBlockImpl]{
                    [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"User store chain generation is needed hence generating the user store chain using " + [CtLiteralImpl]"the user") + [CtLiteralImpl]" store preference order: ") + [CtVariableReadImpl]userStorePreferenceOrder);
                    }
                    [CtReturnImpl]return [CtInvocationImpl]generateUserStoreChainWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]credential, [CtVariableReadImpl]userStorePreferenceOrder);
                } else [CtBlockImpl]{
                    [CtReturnImpl][CtCommentImpl]// Authenticate the user.
                    return [CtInvocationImpl]authenticateInternalWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]credential);
                }
            })));
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.security.PrivilegedActionException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]e.getException() instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException)) [CtBlockImpl]{
                [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]credential);
            }
            [CtThrowImpl]throw [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException) ([CtVariableReadImpl]e.getException()));
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult generateUserStoreChainWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userStorePreferenceOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager initialUserStoreManager = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager prevUserStoreManager = [CtLiteralImpl]null;
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domainName : [CtVariableReadImpl]userStorePreferenceOrder) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userStoreManager = [CtInvocationImpl][CtThisAccessImpl]this.getSecondaryUserStoreManager([CtVariableReadImpl]domainName);
            [CtIfImpl][CtCommentImpl]// If the user store manager is instance of AbstractUserStoreManager then generate a user store chain using
            [CtCommentImpl]// IterativeUserStoreManager.
            if ([CtBinaryOperatorImpl][CtVariableReadImpl]userStoreManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]initialUserStoreManager == [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]prevUserStoreManager = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager([CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userStoreManager)));
                    [CtAssignmentImpl][CtVariableWriteImpl]initialUserStoreManager = [CtVariableReadImpl]prevUserStoreManager;
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager currentUserStoreManager = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager([CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userStoreManager)));
                    [CtInvocationImpl][CtVariableReadImpl]prevUserStoreManager.setNextUserStoreManager([CtVariableReadImpl]currentUserStoreManager);
                    [CtAssignmentImpl][CtVariableWriteImpl]prevUserStoreManager = [CtVariableReadImpl]currentUserStoreManager;
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"UserStoreManager is not an instance of AbstractUserStoreManager hence authenticate the" + [CtLiteralImpl]" user through all the available user store list.");
                }
                [CtReturnImpl]return [CtInvocationImpl]authenticateInternalWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]credential);
            }
        }
        [CtReturnImpl][CtCommentImpl]// Authenticate using the initial user store from the user store preference list.
        return [CtInvocationImpl][CtVariableReadImpl]initialUserStoreManager.authenticateWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]credential);
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult authenticateInternalWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStoreWithID = [CtInvocationImpl]getUserStoreWithID([CtVariableReadImpl]userID);
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager abstractUserStoreManager = [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStoreWithID.getUserStoreManager()));
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]userStoreWithID.getUserStoreManager() instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]abstractUserStoreManager = [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.IterativeUserStoreManager) ([CtVariableReadImpl]userStoreWithID.getUserStoreManager())).getAbstractUserStoreManager();
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean authenticated = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult authenticationResult = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult([CtFieldReadImpl]AuthenticationResult.AuthenticationStatus.FAIL);
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.Secret credentialObj;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]credentialObj = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.Secret.getSecret([CtVariableReadImpl]credential);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.UnsupportedSecretTypeException e) [CtBlockImpl]{
            [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getMessage(), [CtVariableReadImpl]userID, [CtVariableReadImpl]credential);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.toString(), [CtVariableReadImpl]e);
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object credentialArgument;
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credentialObj;
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credential;
                    }
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPreAuthenticateWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]credentialArgument, [CtVariableReadImpl]abstractUserStoreManager)) [CtBlockImpl]{
                        [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]credentialArgument);
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticationStatus([CtTypeAccessImpl]AuthenticationResult.AuthenticationStatus.FAIL);
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setFailureReason([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.FailureReason([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getMessage()));
                        [CtReturnImpl]return [CtVariableReadImpl]authenticationResult;
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]credential);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]int tenantId = [CtInvocationImpl][CtVariableReadImpl]abstractUserStoreManager.getTenantId();
            [CtTryImpl]try [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.service.RealmService realmService = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.getRealmService();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]realmService != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]boolean tenantActive = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]realmService.getTenantManager().isTenantActive([CtVariableReadImpl]tenantId);
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]tenantActive) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_TENANT_DEACTIVATED.getCode();
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_TENANT_DEACTIVATED.getMessage(), [CtVariableReadImpl]tenantId);
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.warn([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
                        [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]credential);
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticationStatus([CtTypeAccessImpl]AuthenticationResult.AuthenticationStatus.FAIL);
                        [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setFailureReason([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.FailureReason([CtBinaryOperatorImpl][CtLiteralImpl]"Inactive Tenant: " + [CtVariableReadImpl]tenantId));
                        [CtReturnImpl]return [CtVariableReadImpl]authenticationResult;
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_AUTHENTICATION.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]credential);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtLiteralImpl]"Error while trying to check tenant status for Tenant : " + [CtVariableReadImpl]tenantId, [CtVariableReadImpl]e);
            }
            [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled([CtVariableReadImpl]abstractUserStoreManager)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]authenticationResult = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (abstractUserStoreManager)).doAuthenticateWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]credential);
            } else [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (abstractUserStoreManager)));
                [CtLocalVariableImpl][CtTypeReferenceImpl]boolean status = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (abstractUserStoreManager)).doAuthenticate([CtInvocationImpl][CtVariableReadImpl]user.getUsername(), [CtVariableReadImpl]credential);
                [CtIfImpl]if ([CtVariableReadImpl]status) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticationStatus([CtTypeAccessImpl]AuthenticationResult.AuthenticationStatus.SUCCESS);
                    [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticatedUser([CtVariableReadImpl]user);
                } else [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticationStatus([CtTypeAccessImpl]AuthenticationResult.AuthenticationStatus.FAIL);
                    [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setFailureReason([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.FailureReason([CtBinaryOperatorImpl][CtLiteralImpl]"Authentication failed for userID: " + [CtVariableReadImpl]userID));
                }
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]authenticationResult.getAuthenticationStatus() == [CtFieldReadImpl]AuthenticationResult.AuthenticationStatus.SUCCESS) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]authenticated = [CtLiteralImpl]true;
            }
            [CtIfImpl]if ([CtVariableReadImpl]authenticated) [CtBlockImpl]{
                [CtInvocationImpl][CtCommentImpl]// Set domain in thread local variable for subsequent operations
                [CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.setDomainInThreadLocal([CtInvocationImpl][CtVariableReadImpl]userStoreWithID.getDomainName());
            }
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]credentialObj.clear();
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]authenticated) [CtBlockImpl]{
            [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_AUTHENTICATION.getMessage(), [CtLiteralImpl]"Authentication failed"), [CtVariableReadImpl]userID, [CtVariableReadImpl]credential);
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl][CtCommentImpl]// You cannot change authentication decision in post handler to TRUE
            for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPostAuthenticateWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]authenticationResult, [CtVariableReadImpl]abstractUserStoreManager)) [CtBlockImpl]{
                    [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_AUTHENTICATION.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]credential);
                    [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setAuthenticationStatus([CtTypeAccessImpl]AuthenticationResult.AuthenticationStatus.FAIL);
                    [CtInvocationImpl][CtVariableReadImpl]authenticationResult.setFailureReason([CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.FailureReason([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_AUTHENTICATION.getMessage()));
                    [CtReturnImpl]return [CtVariableReadImpl]authenticationResult;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleOnAuthenticateFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_AUTHENTICATION.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_POST_AUTHENTICATION.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]credential);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]authenticated) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtLiteralImpl]"Authentication failure. Wrong userID or password is provided.");
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]authenticationResult;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> listUsersWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int maxItemLimit) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]int.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"listUsersWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User>) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]int index;
        [CtAssignmentImpl][CtVariableWriteImpl]index = [CtInvocationImpl][CtVariableReadImpl]filter.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> userList;
        [CtIfImpl][CtCommentImpl]// Check whether we have a secondary UserStoreManager setup.
        if ([CtBinaryOperatorImpl][CtVariableReadImpl]index > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtLocalVariableImpl][CtCommentImpl]// Using the short-circuit. User name comes with the domain name.
            [CtTypeReferenceImpl]java.lang.String domain = [CtInvocationImpl][CtVariableReadImpl]filter.substring([CtLiteralImpl]0, [CtVariableReadImpl]index);
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secManager = [CtInvocationImpl]getSecondaryUserStoreManager([CtVariableReadImpl]domain);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secManager != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtCommentImpl]// We have a secondary UserStoreManager registered for this domain.
                [CtVariableWriteImpl]filter = [CtInvocationImpl][CtVariableReadImpl]filter.substring([CtBinaryOperatorImpl][CtVariableReadImpl]index + [CtLiteralImpl]1);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                    [CtIfImpl][CtCommentImpl]// If unique id feature is not enabled, we have to call the legacy methods.
                    if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabled([CtVariableReadImpl]secManager)) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.listUsers([CtInvocationImpl]doListUsers([CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit), [CtThisAccessImpl]this);
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secManager)).doListUsersWithID([CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit);
                    }
                    [CtInvocationImpl]handlePostGetUserListWithID([CtLiteralImpl]null, [CtLiteralImpl]null, [CtVariableReadImpl]userList, [CtLiteralImpl]true);
                    [CtReturnImpl]return [CtVariableReadImpl]userList;
                }
            }
        } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index == [CtLiteralImpl]0) [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.listUsers([CtInvocationImpl]doListUsers([CtInvocationImpl][CtVariableReadImpl]filter.substring([CtLiteralImpl]1), [CtVariableReadImpl]maxItemLimit), [CtThisAccessImpl]this);
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl]listUsersWithID([CtInvocationImpl][CtVariableReadImpl]filter.substring([CtLiteralImpl]1), [CtVariableReadImpl]maxItemLimit);
            }
            [CtInvocationImpl]handlePostGetUserListWithID([CtLiteralImpl]null, [CtLiteralImpl]null, [CtVariableReadImpl]userList, [CtLiteralImpl]true);
            [CtReturnImpl]return [CtVariableReadImpl]userList;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.listUsers([CtInvocationImpl]doListUsers([CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit), [CtThisAccessImpl]this);
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl]doListUsersWithID([CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserListFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtLiteralImpl]null, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String primaryDomain = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtThisAccessImpl]this.getSecondaryUserStoreManager() != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager> entry : [CtInvocationImpl][CtFieldReadImpl]userStoreManagerHolder.entrySet()) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]entry.getKey().equalsIgnoreCase([CtVariableReadImpl]primaryDomain)) [CtBlockImpl]{
                    [CtContinueImpl]continue;
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager storeManager = [CtInvocationImpl][CtVariableReadImpl]entry.getValue();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]storeManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                    [CtTryImpl]try [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> secondUserList;
                        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabled([CtVariableReadImpl]storeManager)) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]secondUserList = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.listUsers([CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (storeManager)).doListUsers([CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit), [CtThisAccessImpl]this);
                        } else [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]secondUserList = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (storeManager)).doListUsersWithID([CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit);
                        }
                        [CtInvocationImpl][CtVariableReadImpl]userList.addAll([CtVariableReadImpl]secondUserList);
                    }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                        [CtInvocationImpl]handleGetUserListFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtLiteralImpl]null, [CtLiteralImpl]null, [CtLiteralImpl]null);
                        [CtInvocationImpl][CtCommentImpl]// We can ignore and proceed. Ignore the results from this user store.
                        [CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]ex);
                    }
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> secondUserList = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UniqueIDUserStoreManager) (storeManager)).listUsersWithID([CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit);
                    [CtInvocationImpl][CtVariableReadImpl]userList.addAll([CtVariableReadImpl]secondUserList);
                }
            }
        }
        [CtInvocationImpl]handlePostGetUserListWithID([CtLiteralImpl]null, [CtLiteralImpl]null, [CtVariableReadImpl]userList, [CtLiteralImpl]true);
        [CtReturnImpl]return [CtVariableReadImpl]userList;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User updateUserName([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String newUserName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"updateUserName operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"updateUserName operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User getUserWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] requestedClaims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class[] argTypes = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String[].class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getUserWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userID, [CtVariableReadImpl]requestedClaims, [CtVariableReadImpl]profileName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreWithID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).getUserWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId(), [CtVariableReadImpl]requestedClaims, [CtVariableReadImpl]profileName);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUniqueIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUserExists;
        [CtIfImpl]if ([CtVariableReadImpl]isUniqueIdEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtInvocationImpl]doCheckExistingUserWithID([CtVariableReadImpl]userID);
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtBinaryOperatorImpl][CtVariableReadImpl]user != [CtLiteralImpl]null;
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserExists) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userID, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
            [CtInvocationImpl]handleGetUserFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]requestedClaims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]errorCode);
        }
        [CtIfImpl][CtCommentImpl]// check for null claim list
        if ([CtBinaryOperatorImpl][CtVariableReadImpl]requestedClaims == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]requestedClaims = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl][CtCommentImpl]// If unique id feature is not enabled, we have to call the legacy methods.
            if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]user == [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
                }
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]user = [CtInvocationImpl]getUserFromID([CtVariableReadImpl]userID, [CtVariableReadImpl]requestedClaims, [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName(), [CtVariableReadImpl]profileName);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]requestedClaims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostGetUserWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]requestedClaims, [CtVariableReadImpl]profileName, [CtVariableReadImpl]user, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtInvocationImpl]handleGetUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_IN_POST_GET_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_IN_POST_GET_CLAIM_VALUES.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]requestedClaims, [CtVariableReadImpl]profileName);
                        [CtBreakImpl]break;
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_IN_POST_GET_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_IN_POST_GET_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]requestedClaims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtReturnImpl][CtCommentImpl]// #################### </Listeners> #####################################################
        return [CtVariableReadImpl]user;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]boolean isExistingUserWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"isExistingUserWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userID }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.lang.Boolean) (object));
        }
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isRegistrySystemUser([CtVariableReadImpl]userID)) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]true;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreWithID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).isExistingUserWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId());
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtInvocationImpl][CtVariableReadImpl]userStore.isSystemStore()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.isExistingSystemUser([CtVariableReadImpl]userID);
        }
        [CtIfImpl][CtCommentImpl]// If unique id feature is not enabled, we have to call the legacy methods.
        if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]user == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtReturnImpl]return [CtLiteralImpl]false;
            }
            [CtReturnImpl]return [CtInvocationImpl]doCheckExistingUser([CtInvocationImpl][CtVariableReadImpl]user.getUsername());
        } else [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl]doCheckExistingUserWithID([CtVariableReadImpl]userID);
        }
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> getRoleListOfUserWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getRoleListOfUserWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userID }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> roleNames;
        [CtIfImpl][CtCommentImpl]// anonymous user is only assigned to  anonymous role
        if ([CtInvocationImpl][CtTypeAccessImpl]CarbonConstants.REGISTRY_ANONNYMOUS_USERNAME.equalsIgnoreCase([CtVariableReadImpl]userID)) [CtBlockImpl]{
            [CtReturnImpl]return [CtNewClassImpl]new [CtTypeReferenceImpl]java.util.ArrayList<[CtTypeReferenceImpl]java.lang.String>()[CtClassImpl] {
                [CtAnonymousExecutableImpl][CtBlockImpl]{
                    [CtInvocationImpl]add([CtTypeAccessImpl]CarbonConstants.REGISTRY_ANONNYMOUS_ROLE_NAME);
                }
            };
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreWithID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).getRoleListOfUserWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId());
        }
        [CtLocalVariableImpl][CtCommentImpl]// Check whether roles exist in cache
        [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]user != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] roleListOfUserFromCache = [CtInvocationImpl]getRoleListOfUserFromCache([CtFieldReadImpl][CtThisAccessImpl]this.tenantId, [CtInvocationImpl][CtVariableReadImpl]user.getUsername());
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]roleListOfUserFromCache != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]roleNames = [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]roleListOfUserFromCache);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]roleNames.size() > [CtLiteralImpl]0) [CtBlockImpl]{
                    [CtReturnImpl]return [CtVariableReadImpl]roleNames;
                }
            }
        }
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isSystemStore()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.getSystemRoleListOfUser([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId()));
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        [CtCommentImpl]// If unique id feature is not enabled, we have to call the legacy methods.
        if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]user == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl][CtFieldReadImpl]realmConfig.getEveryOneRoleName());
            }
            [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl]doGetRoleListOfUser([CtInvocationImpl][CtVariableReadImpl]user.getUsername(), [CtLiteralImpl]"*"));
        } else [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl]doGetRoleListOfUserWithID([CtVariableReadImpl]userID, [CtLiteralImpl]"*");
        }
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> getUserListOfRoleWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getUserListOfRoleWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]roleName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User>) (object));
        }
        [CtReturnImpl]return [CtInvocationImpl]getUserListOfRoleWithID([CtVariableReadImpl]roleName, [CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.QUERY_FILTER_STRING_ANY, [CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.QUERY_MAX_ITEM_LIMIT_ANY);
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> getUserListOfRoleWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int maxItemLimit) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]int.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getUserListOfRoleWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]roleName, [CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User>) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> users = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtIfImpl][CtCommentImpl]// If role does not exit, just return
        if ([CtUnaryOperatorImpl]![CtInvocationImpl]isExistingRole([CtVariableReadImpl]roleName)) [CtBlockImpl]{
            [CtInvocationImpl]handleDoPostGetUserListOfRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]users);
            [CtReturnImpl]return [CtVariableReadImpl]users;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreOfRoles([CtVariableReadImpl]roleName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager resolvedUserStoreManager = [CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]resolvedUserStoreManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (resolvedUserStoreManager)).getUserListOfRoleWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit);
            } else [CtBlockImpl]{
                [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UniqueIDUserStoreManager) (resolvedUserStoreManager)).getUserListOfRoleWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
            }
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here
        [CtCommentImpl]// ################################
        if ([CtInvocationImpl][CtVariableReadImpl]userStore.isSystemStore()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] userArray = [CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.getUserListOfSystemRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> userList = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.getUserList([CtVariableReadImpl]userArray);
            [CtInvocationImpl]handleDoPostGetUserListOfRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList);
            [CtReturnImpl]return [CtVariableReadImpl]userList;
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] userNamesInHybrid;
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isHybridRole()) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.INTERNAL_DOMAIN.equalsIgnoreCase([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName())) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userNamesInHybrid = [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.getUserListOfHybridRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userNamesInHybrid = [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.getUserListOfHybridRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainAwareName());
            }
            [CtLocalVariableImpl][CtCommentImpl]// remove domain
            [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> finalNameList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String displayNameAttribute = [CtInvocationImpl][CtFieldReadImpl][CtThisAccessImpl]this.realmConfig.getUserStoreProperty([CtTypeAccessImpl]LDAPConstants.DISPLAY_NAME_ATTRIBUTE);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]userNamesInHybrid != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]userNamesInHybrid.length > [CtLiteralImpl]0)) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]displayNameAttribute != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]displayNameAttribute.trim().length() > [CtLiteralImpl]0)) [CtBlockImpl]{
                    [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userName : [CtVariableReadImpl]userNamesInHybrid) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domainName = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.extractDomainFromName([CtVariableReadImpl]userName);
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]domainName == [CtLiteralImpl]null) || [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]domainName.trim().length() == [CtLiteralImpl]0)) [CtBlockImpl]{
                            [CtInvocationImpl][CtVariableReadImpl]finalNameList.add([CtVariableReadImpl]userName);
                        }
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userManager = [CtInvocationImpl][CtFieldReadImpl]userStoreManagerHolder.get([CtVariableReadImpl]domainName);
                        [CtAssignmentImpl][CtVariableWriteImpl]userName = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]userName);
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userManager != [CtLiteralImpl]null) [CtBlockImpl]{
                            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] displayNames;
                            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                                [CtAssignmentImpl][CtCommentImpl]// get displayNames
                                [CtVariableWriteImpl]displayNames = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userManager)).doGetDisplayNamesForInternalRole([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]userName });
                            } else [CtBlockImpl]{
                                [CtAssignmentImpl][CtVariableWriteImpl]displayNames = [CtInvocationImpl][CtVariableReadImpl]userManager.getRoleNames();
                            }
                            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String displayName : [CtVariableReadImpl]displayNames) [CtBlockImpl]{
                                [CtLocalVariableImpl][CtCommentImpl]// if domain names are not added by above method, add it
                                [CtCommentImpl]// here
                                [CtTypeReferenceImpl]java.lang.String nameWithDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]displayName, [CtVariableReadImpl]domainName);
                                [CtInvocationImpl][CtVariableReadImpl]finalNameList.add([CtVariableReadImpl]nameWithDomain);
                            }
                        }
                    }
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> usersInHybrid = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.listUsers([CtVariableReadImpl]userNamesInHybrid, [CtThisAccessImpl]this);
                    [CtInvocationImpl]handleDoPostGetUserListOfRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]usersInHybrid);
                    [CtReturnImpl]return [CtVariableReadImpl]usersInHybrid;
                }
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> usersList = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.listUsers([CtVariableReadImpl]finalNameList, [CtThisAccessImpl]this);
            [CtInvocationImpl]handleDoPostGetUserListOfRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]usersList);
            [CtReturnImpl]return [CtVariableReadImpl]usersList;
        }
        [CtIfImpl]if ([CtFieldReadImpl]readGroupsEnabled) [CtBlockImpl]{
            [CtIfImpl][CtCommentImpl]// If unique id feature is not enabled, we have to call the legacy methods.
            if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]users = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.listUsers([CtInvocationImpl]doGetUserListOfRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit), [CtThisAccessImpl]this);
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]users = [CtInvocationImpl]doGetUserListOfRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]filter, [CtVariableReadImpl]maxItemLimit);
            }
            [CtInvocationImpl]handleDoPostGetUserListOfRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]users);
        }
        [CtReturnImpl]return [CtVariableReadImpl]users;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]java.lang.String getUserClaimValueWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getUserClaimValueWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userID, [CtVariableReadImpl]claim, [CtVariableReadImpl]profileName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.lang.String) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreWithID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).getUserClaimValueWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId(), [CtVariableReadImpl]claim, [CtVariableReadImpl]profileName);
        }
        [CtLocalVariableImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        [CtTypeReferenceImpl]boolean isUniqueIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUserExists;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtVariableReadImpl]isUniqueIdEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtInvocationImpl]doCheckExistingUserWithID([CtVariableReadImpl]userID);
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtBinaryOperatorImpl][CtVariableReadImpl]user != [CtLiteralImpl]null;
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserExists) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userID, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
            [CtInvocationImpl]handleGetUserClaimValueFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]claim, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> finalValues;
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl][CtCommentImpl]// If unique id feature is not enabled, we have to call the legacy methods.
            if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUniqueIdEnabled) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]finalValues = [CtInvocationImpl]doGetUserClaimValues([CtInvocationImpl][CtVariableReadImpl]user.getUsername(), [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]claim }, [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName(), [CtVariableReadImpl]profileName);
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]finalValues = [CtInvocationImpl]doGetUserClaimValuesWithID([CtVariableReadImpl]userID, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtVariableReadImpl]claim }, [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName(), [CtVariableReadImpl]profileName);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserClaimValueFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_CLAIM_VALUE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]claim, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String value = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]finalValues != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]value = [CtInvocationImpl][CtVariableReadImpl]finalValues.get([CtVariableReadImpl]claim);
        }
        [CtLocalVariableImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> list = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]value != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]list.add([CtVariableReadImpl]value);
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostGetUserClaimValueWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claim, [CtVariableReadImpl]list, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtInvocationImpl]handleGetUserClaimValueFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_USER_CLAIM_VALUE.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]claim, [CtVariableReadImpl]profileName);
                        [CtBreakImpl]break;
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserClaimValueFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_GET_USER_CLAIM_VALUE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]claim, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtIfImpl][CtCommentImpl]// #################### </Listeners> #####################################################
        if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]list.isEmpty()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]list.get([CtLiteralImpl]0);
        }
        [CtReturnImpl]return [CtVariableReadImpl]value;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> getUserClaimValuesWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String[].class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getUserClaimValuesWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreWithID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).getUserClaimValuesWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId(), [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
        }
        [CtLocalVariableImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        [CtTypeReferenceImpl]boolean isUniqueIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUserExists;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtVariableReadImpl]isUniqueIdEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtInvocationImpl]doCheckExistingUserWithID([CtVariableReadImpl]userID);
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtBinaryOperatorImpl][CtVariableReadImpl]user != [CtLiteralImpl]null;
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserExists) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userID, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
            [CtInvocationImpl]handleGetUserClaimValuesFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtIfImpl][CtCommentImpl]// check for null claim list
        if ([CtBinaryOperatorImpl][CtVariableReadImpl]claims == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]claims = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> finalValues;
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl][CtCommentImpl]// If unique id feature is not enabled, we have to call the legacy methods.
            if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUniqueIdEnabled) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]finalValues = [CtInvocationImpl]doGetUserClaimValues([CtInvocationImpl][CtVariableReadImpl]user.getUsername(), [CtVariableReadImpl]claims, [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName(), [CtVariableReadImpl]profileName);
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]finalValues = [CtInvocationImpl]doGetUserClaimValuesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName(), [CtVariableReadImpl]profileName);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostGetUserClaimValuesWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId(), [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtVariableReadImpl]finalValues, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtInvocationImpl]handleGetUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_IN_POST_GET_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_IN_POST_GET_CLAIM_VALUES.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                        [CtBreakImpl]break;
                    }
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_IN_POST_GET_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_IN_POST_GET_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtReturnImpl][CtCommentImpl]// #################### </Listeners> #####################################################
        return [CtVariableReadImpl]finalValues;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.Claim> getUserClaimValuesWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getUserClaimValuesWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userID, [CtVariableReadImpl]profileName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.Claim>) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreWithID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).getUserClaimValuesWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId(), [CtVariableReadImpl]profileName);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUniqueIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUserExists;
        [CtIfImpl]if ([CtVariableReadImpl]isUniqueIdEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtInvocationImpl]doCheckExistingUserWithID([CtVariableReadImpl]userID);
        } else [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userNameFromUserID = [CtInvocationImpl]doGetUserNameFromUserID([CtVariableReadImpl]userID);
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtBinaryOperatorImpl][CtVariableReadImpl]userNameFromUserID != [CtLiteralImpl]null;
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserExists) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userID, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
            [CtInvocationImpl]handleGetUserClaimValuesFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtLiteralImpl]null, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtIfImpl][CtCommentImpl]// If unique id feature is not enabled, we have to call the legacy methods.
        if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUniqueIdEnabled) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
            [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl]getUserClaimValues([CtInvocationImpl][CtVariableReadImpl]user.getDomainQualifiedUsername(), [CtVariableReadImpl]profileName));
        }
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]profileName)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]profileName = [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.DEFAULT_PROFILE;
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] claims;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]claims = [CtInvocationImpl][CtFieldReadImpl]claimManager.getAllClaimUris();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_CLAIM_URI.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_CLAIM_URI.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userID, [CtLiteralImpl]null, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]e);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> values = [CtInvocationImpl]doGetUserClaimValuesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName(), [CtVariableReadImpl]profileName);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.Claim> finalValues = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtInvocationImpl]addClaimValues([CtVariableReadImpl]values, [CtVariableReadImpl]finalValues);
        [CtReturnImpl]return [CtVariableReadImpl]finalValues;
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> doGetUserClaimValuesWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domainName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String[].class, [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"doGetUserClaimValuesWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]domainName, [CtVariableReadImpl]profileName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>) (object));
        }
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.ArrayUtils.isEmpty([CtVariableReadImpl]claims)) [CtBlockImpl]{
            [CtReturnImpl]return [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        }
        [CtLocalVariableImpl][CtCommentImpl]// Here the user name should be domain-less.
        [CtTypeReferenceImpl]boolean requireRoles = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean requireIntRoles = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean requireExtRoles = [CtLiteralImpl]false;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roleClaim = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]profileName)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]profileName = [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.DEFAULT_PROFILE;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.String> propertySet = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<>();
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String claim : [CtVariableReadImpl]claims) [CtBlockImpl]{
            [CtLocalVariableImpl][CtCommentImpl]// There can be cases some claim values being requested for claims
            [CtCommentImpl]// we don't have.
            [CtTypeReferenceImpl]java.lang.String property;
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]property = [CtInvocationImpl]getClaimAtrribute([CtVariableReadImpl]claim, [CtVariableReadImpl]userID, [CtVariableReadImpl]domainName);
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]e);
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]property != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.ROLE_CLAIM.equalsIgnoreCase([CtVariableReadImpl]claim)) || [CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.INT_ROLE_CLAIM.equalsIgnoreCase([CtVariableReadImpl]claim))) || [CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.EXT_ROLE_CLAIM.equalsIgnoreCase([CtVariableReadImpl]claim)))) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]propertySet.add([CtVariableReadImpl]property);
            }
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.ROLE_CLAIM.equalsIgnoreCase([CtVariableReadImpl]claim)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]requireRoles = [CtLiteralImpl]true;
                [CtAssignmentImpl][CtVariableWriteImpl]roleClaim = [CtVariableReadImpl]claim;
            } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.INT_ROLE_CLAIM.equalsIgnoreCase([CtVariableReadImpl]claim)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]requireIntRoles = [CtLiteralImpl]true;
                [CtAssignmentImpl][CtVariableWriteImpl]roleClaim = [CtVariableReadImpl]claim;
            } else [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.EXT_ROLE_CLAIM.equalsIgnoreCase([CtVariableReadImpl]claim)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]requireExtRoles = [CtLiteralImpl]true;
                [CtAssignmentImpl][CtVariableWriteImpl]roleClaim = [CtVariableReadImpl]claim;
            }
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] properties = [CtInvocationImpl][CtVariableReadImpl]propertySet.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> userPropertyValues = [CtInvocationImpl][CtThisAccessImpl]this.getUserPropertyValuesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]properties, [CtVariableReadImpl]profileName);
        [CtInvocationImpl]processAttributesAfterRetrievalWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]userPropertyValues, [CtVariableReadImpl]profileName);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> getAgain = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> finalValues = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String claim : [CtVariableReadImpl]claims) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.ClaimMapping mapping;
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]mapping = [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.ClaimMapping) ([CtFieldReadImpl]claimManager.getClaimMapping([CtVariableReadImpl]claim)));
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]e);
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String property = [CtLiteralImpl]null;
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String value;
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]mapping != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]domainName != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> attrMap = [CtInvocationImpl][CtVariableReadImpl]mapping.getMappedAttributes();
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]attrMap != [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String attr;
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtAssignmentImpl]([CtVariableWriteImpl]attr = [CtInvocationImpl][CtVariableReadImpl]attrMap.get([CtInvocationImpl][CtVariableReadImpl]domainName.toUpperCase())) != [CtLiteralImpl]null) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]property = [CtVariableReadImpl]attr;
                        } else [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]property = [CtInvocationImpl][CtVariableReadImpl]mapping.getMappedAttribute();
                        }
                    }
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]property = [CtInvocationImpl][CtVariableReadImpl]mapping.getMappedAttribute();
                }
                [CtAssignmentImpl][CtVariableWriteImpl]value = [CtInvocationImpl][CtVariableReadImpl]userPropertyValues.get([CtVariableReadImpl]property);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]value != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]value.trim().length() > [CtLiteralImpl]0)) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]finalValues.put([CtVariableReadImpl]claim, [CtVariableReadImpl]value);
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]property == [CtLiteralImpl]null) && [CtInvocationImpl][CtVariableReadImpl]claim.equals([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.DISAPLAY_NAME_CLAIM)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]property = [CtInvocationImpl][CtFieldReadImpl][CtThisAccessImpl]this.realmConfig.getUserStoreProperty([CtTypeAccessImpl]LDAPConstants.DISPLAY_NAME_ATTRIBUTE);
                }
                [CtAssignmentImpl][CtVariableWriteImpl]value = [CtInvocationImpl][CtVariableReadImpl]userPropertyValues.get([CtVariableReadImpl]property);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]value != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]value.trim().length() > [CtLiteralImpl]0)) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]finalValues.put([CtVariableReadImpl]claim, [CtVariableReadImpl]value);
                }
            }
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]getAgain.size() > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtLocalVariableImpl][CtCommentImpl]// oh the beautiful recursion
            [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> mapClaimValues = [CtInvocationImpl][CtThisAccessImpl]this.getUserClaimValuesWithID([CtVariableReadImpl]userID, [CtInvocationImpl][CtVariableReadImpl]getAgain.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]), [CtVariableReadImpl]profileName);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Iterator<[CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>> ite3 = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]mapClaimValues.entrySet().iterator();
            [CtWhileImpl]while ([CtInvocationImpl][CtVariableReadImpl]ite3.hasNext()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> entry = [CtInvocationImpl][CtVariableReadImpl]ite3.next();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]entry.getValue() != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]finalValues.put([CtInvocationImpl][CtVariableReadImpl]entry.getKey(), [CtInvocationImpl][CtVariableReadImpl]entry.getValue());
                }
            } 
        }
        [CtLocalVariableImpl][CtCommentImpl]// We treat roles claim in special way.
        [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> roles = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtVariableReadImpl]requireRoles) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]roles = [CtInvocationImpl]getRoleListOfUserWithID([CtVariableReadImpl]userID);
        } else [CtIfImpl]if ([CtVariableReadImpl]requireIntRoles) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]roles = [CtInvocationImpl]doGetInternalRoleListOfUserWithID([CtVariableReadImpl]userID, [CtLiteralImpl]"*");
        } else [CtIfImpl]if ([CtVariableReadImpl]requireExtRoles) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> rolesList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] externalRoles = [CtInvocationImpl]doGetExternalRoleListOfUserWithID([CtVariableReadImpl]userID, [CtLiteralImpl]"*");
            [CtInvocationImpl][CtVariableReadImpl]rolesList.addAll([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]externalRoles));
            [CtIfImpl][CtCommentImpl]// if only shared enable
            if ([CtInvocationImpl]isSharedGroupEnabled()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] sharedRoles = [CtInvocationImpl]doGetSharedRoleListOfUserWithID([CtVariableReadImpl]userID, [CtLiteralImpl]null, [CtLiteralImpl]"*");
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]sharedRoles != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]rolesList.addAll([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]sharedRoles));
                }
            }
            [CtAssignmentImpl][CtVariableWriteImpl]roles = [CtVariableReadImpl]rolesList;
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]roles != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]roles.size() > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userAttributeSeparator = [CtLiteralImpl]",";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String claimSeparator = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.MULTI_ATTRIBUTE_SEPARATOR);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]claimSeparator != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]claimSeparator.trim().isEmpty())) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userAttributeSeparator = [CtVariableReadImpl]claimSeparator;
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String delim = [CtLiteralImpl]"";
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.StringBuffer roleBf = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.StringBuffer();
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String role : [CtVariableReadImpl]roles) [CtBlockImpl]{
                [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]roleBf.append([CtVariableReadImpl]delim).append([CtVariableReadImpl]role);
                [CtAssignmentImpl][CtVariableWriteImpl]delim = [CtVariableReadImpl]userAttributeSeparator;
            }
            [CtInvocationImpl][CtVariableReadImpl]finalValues.put([CtVariableReadImpl]roleClaim, [CtInvocationImpl][CtVariableReadImpl]roleBf.toString());
        }
        [CtReturnImpl]return [CtVariableReadImpl]finalValues;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User getUserFromID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] requestedClaims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domainName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl]getUser([CtVariableReadImpl]userID, [CtLiteralImpl]null);
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.ArrayUtils.isNotEmpty([CtVariableReadImpl]requestedClaims)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claimValues = [CtInvocationImpl]doGetUserClaimValuesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]requestedClaims, [CtVariableReadImpl]domainName, [CtVariableReadImpl]profileName);
            [CtInvocationImpl][CtVariableReadImpl]user.setAttributes([CtVariableReadImpl]claimValues);
        }
        [CtReturnImpl]return [CtVariableReadImpl]user;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void addClaimValues([CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> values, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.Claim> finalValues) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> entry : [CtInvocationImpl][CtVariableReadImpl]values.entrySet()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.Claim claim = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.Claim();
            [CtInvocationImpl][CtVariableReadImpl]claim.setValue([CtInvocationImpl][CtVariableReadImpl]entry.getValue());
            [CtInvocationImpl][CtVariableReadImpl]claim.setClaimUri([CtInvocationImpl][CtVariableReadImpl]entry.getKey());
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String displayTag;
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]displayTag = [CtInvocationImpl][CtInvocationImpl][CtFieldReadImpl]claimManager.getClaim([CtInvocationImpl][CtVariableReadImpl]entry.getKey()).getDisplayTag();
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]e);
            }
            [CtInvocationImpl][CtVariableReadImpl]claim.setDisplayTag([CtVariableReadImpl]displayTag);
            [CtInvocationImpl][CtVariableReadImpl]finalValues.add([CtVariableReadImpl]claim);
        }
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]void updateCredentialWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object newCredential, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object oldCredential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class[] argTypes = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.Object.class, [CtFieldReadImpl]java.lang.Object.class };
            [CtInvocationImpl]callSecure([CtLiteralImpl]"updateCredentialWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreWithID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).updateCredentialWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId(), [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
            [CtReturnImpl]return;
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateCredentialFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.Secret newCredentialObj;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.Secret oldCredentialObj;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]newCredentialObj = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.Secret.getSecret([CtVariableReadImpl]newCredential);
            [CtAssignmentImpl][CtVariableWriteImpl]oldCredentialObj = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.Secret.getSecret([CtVariableReadImpl]oldCredential);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.UnsupportedSecretTypeException e) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateCredentialFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getMessage(), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.toString());
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserStoreManagerListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserStoreManagerListeners()) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.updateCredential([CtVariableReadImpl]userID, [CtVariableReadImpl]newCredentialObj, [CtVariableReadImpl]oldCredentialObj, [CtThisAccessImpl]this)) [CtBlockImpl]{
                            [CtInvocationImpl]handleUpdateCredentialFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                            [CtReturnImpl]return;
                        }
                    } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.updateCredential([CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtInvocationImpl]handleUpdateCredentialFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                        [CtReturnImpl]return;
                    }
                }
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPreUpdateCredential([CtVariableReadImpl]userID, [CtVariableReadImpl]newCredentialObj, [CtVariableReadImpl]oldCredentialObj, [CtThisAccessImpl]this)) [CtBlockImpl]{
                            [CtInvocationImpl]handleUpdateCredentialFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                            [CtReturnImpl]return;
                        }
                    } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPreUpdateCredential([CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtInvocationImpl]handleUpdateCredentialFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                        [CtReturnImpl]return;
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateCredentialFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                [CtThrowImpl]throw [CtVariableReadImpl]e;
            }
            [CtLocalVariableImpl][CtCommentImpl]// #################### </Listeners> #####################################################
            [CtCommentImpl]// This user name here is domain-less.
            [CtCommentImpl]// We directly authenticate user against the selected UserStoreManager.
            [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult authenticationResult;
            [CtTryImpl]try [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]boolean auth = [CtInvocationImpl][CtThisAccessImpl]this.doAuthenticate([CtInvocationImpl][CtVariableReadImpl]user.getUsername(), [CtVariableReadImpl]oldCredentialObj);
                    [CtAssignmentImpl][CtVariableWriteImpl]authenticationResult = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AuthenticationResult([CtConditionalImpl][CtVariableReadImpl]auth ? [CtFieldReadImpl]AuthenticationResult.AuthenticationStatus.SUCCESS : [CtFieldReadImpl]AuthenticationResult.AuthenticationStatus.FAIL);
                } else [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]authenticationResult = [CtInvocationImpl][CtThisAccessImpl]this.doAuthenticateWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]oldCredentialObj);
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]e);
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]authenticationResult.getAuthenticationStatus() == [CtFieldReadImpl]AuthenticationResult.AuthenticationStatus.SUCCESS) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]checkUserPasswordValid([CtVariableReadImpl]newCredential)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMsg = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.PROPERTY_PASSWORD_ERROR_MSG);
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]errorMsg != [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getMessage(), [CtVariableReadImpl]errorMsg);
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL.getCode();
                        [CtInvocationImpl]handleUpdateCredentialFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
                    }
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_PASSWORD.getMessage(), [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_JAVA_REG_EX));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_PASSWORD.getCode();
                    [CtInvocationImpl]handleUpdateCredentialFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
                }
                [CtTryImpl]try [CtBlockImpl]{
                    [CtIfImpl][CtCommentImpl]// If unique id feature is not enabled, we have to call the legacy methods.
                    if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
                        [CtIfImpl][CtCommentImpl]// If we don't have a record for this user, let's try to call directly using the user id.
                        if ([CtBinaryOperatorImpl][CtVariableReadImpl]user == [CtLiteralImpl]null) [CtBlockImpl]{
                            [CtInvocationImpl]updateCredential([CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                        } else [CtBlockImpl]{
                            [CtInvocationImpl]updateCredential([CtInvocationImpl][CtVariableReadImpl]user.getUsername(), [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                        }
                    } else [CtBlockImpl]{
                        [CtInvocationImpl][CtThisAccessImpl]this.doUpdateCredentialWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]newCredentialObj, [CtVariableReadImpl]oldCredentialObj);
                    }
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateCredentialFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_UPDATING_CREDENTIAL.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_UPDATING_CREDENTIAL.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                    [CtThrowImpl]throw [CtVariableReadImpl]ex;
                }
                [CtTryImpl][CtCommentImpl]// #################### <Listeners> ##################################################
                try [CtBlockImpl]{
                    [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPostUpdateCredential([CtVariableReadImpl]userID, [CtVariableReadImpl]newCredentialObj, [CtThisAccessImpl]this)) [CtBlockImpl]{
                                [CtInvocationImpl]handleUpdateCredentialFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL.getMessage(), [CtLiteralImpl]"Post update credential tasks failed"), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredentialObj, [CtVariableReadImpl]oldCredentialObj);
                                [CtReturnImpl]return;
                            }
                        } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]listener.doPostUpdateCredential([CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtThisAccessImpl]this)) [CtBlockImpl]{
                            [CtInvocationImpl]handleUpdateCredentialFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL.getMessage(), [CtLiteralImpl]"Post update credential tasks failed"), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                            [CtReturnImpl]return;
                        }
                    }
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateCredentialFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                    [CtThrowImpl]throw [CtVariableReadImpl]ex;
                }
                [CtCommentImpl]// #################### </Listeners> ##################################################
            } else [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateCredentialFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_OLD_CREDENTIAL_DOES_NOT_MATCH.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_OLD_CREDENTIAL_DOES_NOT_MATCH.getMessage(), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential, [CtVariableReadImpl]oldCredential);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_OLD_CREDENTIAL_DOES_NOT_MATCH.toString());
            }
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]newCredentialObj.clear();
            [CtInvocationImpl][CtVariableReadImpl]oldCredentialObj.clear();
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get the user.
     *
     * @param userID
     * 		user ID.
     * @param userName
     * 		user name.
     * @return User.
     * @throws UserStoreException
     * 		User Store Exception.
     */
    public [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User getUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]userID == [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtVariableReadImpl]userName == [CtLiteralImpl]null)) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Both userID and UserName cannot be null.");
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domain = [CtInvocationImpl]getMyDomainName();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userID == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userID = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userName == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userName = [CtInvocationImpl]getUserNameFromUserID([CtVariableReadImpl]userID);
        }
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userName.contains([CtTypeAccessImpl]UserCoreConstants.DOMAIN_SEPARATOR)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]domain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.extractDomainFromName([CtVariableReadImpl]userName);
            [CtAssignmentImpl][CtVariableWriteImpl]userName = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]userName);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User([CtVariableReadImpl]userID, [CtVariableReadImpl]userName, [CtVariableReadImpl]userName);
        [CtInvocationImpl][CtVariableReadImpl]user.setTenantDomain([CtInvocationImpl]getTenantDomain([CtFieldReadImpl]tenantId));
        [CtInvocationImpl][CtVariableReadImpl]user.setUserStoreDomain([CtVariableReadImpl]domain);
        [CtReturnImpl]return [CtVariableReadImpl]user;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get the tenant domain.
     *
     * @return tenant domain.
     * @throws UserStoreException
     * 		User Store Exception.
     */
    protected [CtTypeReferenceImpl]java.lang.String getTenantDomain([CtParameterImpl][CtTypeReferenceImpl]int tenantID) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String tenantDomain;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.service.RealmService realmService = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.getRealmService();
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]realmService != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]tenantDomain = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]realmService.getTenantManager().getDomain([CtVariableReadImpl]tenantID);
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]tenantDomain = [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.context.CarbonContext.getThreadLocalCarbonContext().getTenantDomain();
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Error occured while getting the tenant domain.", [CtVariableReadImpl]e);
        }
        [CtReturnImpl]return [CtVariableReadImpl]tenantDomain;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * provides the unique user ID of the user.
     *
     * @return unique user ID.
     */
    protected [CtTypeReferenceImpl]java.lang.String getUniqueUserID() [CtBlockImpl]{
        [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]java.util.UUID.randomUUID().toString();
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Check whether the userID attribute is generated/maintained by the user store itself.
     *
     * @param userName
     * 		User's userName.
     * @param userAttributes
     * 		A map user attribute values.
     * @return True if generated, else false.
     */
    protected [CtTypeReferenceImpl]boolean isUserIdGeneratedByUserStore([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> userAttributes) [CtBlockImpl]{
        [CtReturnImpl]return [CtLiteralImpl]false;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * provides the unique user ID of the given user.
     *
     * @param userName
     * 		username of the user.
     * @return user ID of the user.
     * @throws UserStoreException
     * 		Thrown by the underlying UserStoreManager.
     */
    public [CtTypeReferenceImpl]java.lang.String getUserIDFromUserName([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).getUserIDFromUserName([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName());
        }
        [CtAssignmentImpl][CtVariableWriteImpl]userName = [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtInvocationImpl]getFromUserIDCache([CtVariableReadImpl]userName, [CtVariableReadImpl]userStore);
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]userID)) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userID = [CtInvocationImpl]doGetUserIDFromUserNameWithID([CtVariableReadImpl]userName);
                [CtInvocationImpl]addToUserIDCache([CtVariableReadImpl]userID, [CtVariableReadImpl]userName, [CtVariableReadImpl]userStore);
                [CtInvocationImpl]addToUserNameCache([CtVariableReadImpl]userID, [CtVariableReadImpl]userName, [CtVariableReadImpl]userStore);
                [CtReturnImpl]return [CtVariableReadImpl]userID;
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims = [CtInvocationImpl]doGetUserClaimValues([CtVariableReadImpl]userName, [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[]{ [CtFieldReadImpl]org.wso2.carbon.user.core.constants.UserCoreClaimConstants.USER_ID_CLAIM_URI }, [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName(), [CtLiteralImpl]null);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]claims != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]claims.size() == [CtLiteralImpl]1)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userID = [CtInvocationImpl][CtVariableReadImpl]claims.get([CtTypeAccessImpl]UserCoreClaimConstants.USER_ID_CLAIM_URI);
                [CtInvocationImpl]addToUserIDCache([CtVariableReadImpl]userID, [CtVariableReadImpl]userName, [CtVariableReadImpl]userStore);
                [CtInvocationImpl]addToUserNameCache([CtVariableReadImpl]userID, [CtVariableReadImpl]userName, [CtVariableReadImpl]userStore);
                [CtReturnImpl]return [CtVariableReadImpl]userID;
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]userID;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * provides the unique user ID of the given user.
     *
     * @param userName
     * 		username of the user.
     * @return user ID of the user.
     * @throws UserStoreException
     * 		Thrown by the underlying UserStoreManager.
     */
    protected [CtTypeReferenceImpl]java.lang.String doGetUserIDFromUserNameWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doGetUserIDFromUserName operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doGetUserIDFromUserName operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get the user name of the given user ID in the user store.
     *
     * @param userID
     * 		userID of the user.
     * @return user name.
     * @throws UserStoreException
     * 		Thrown by the underlying UserStoreManager.
     */
    protected [CtTypeReferenceImpl]java.lang.String doGetUserNameFromUserID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl]doGetUserNameFromUserIDWithID([CtVariableReadImpl]userID);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
        [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]user.getUsername();
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get the user name of the given user.
     *
     * @param userID
     * 		userID of the user.
     * @return user name.
     * @throws UserStoreException
     * 		Thrown by the underlying UserStoreManager.
     */
    public [CtTypeReferenceImpl]java.lang.String getUserNameFromUserID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreWithID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).getUserNameFromUserID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId());
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userName = [CtInvocationImpl]getFromUserNameCache([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]userName)) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userName = [CtInvocationImpl]doGetUserNameFromUserIDWithID([CtVariableReadImpl]userID);
                [CtInvocationImpl]addToUserNameCache([CtVariableReadImpl]userID, [CtVariableReadImpl]userName, [CtVariableReadImpl]userStore);
                [CtInvocationImpl]addToUserIDCache([CtVariableReadImpl]userID, [CtVariableReadImpl]userName, [CtVariableReadImpl]userStore);
                [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]userName, [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName());
            }
            [CtAssignmentImpl][CtVariableWriteImpl]userName = [CtInvocationImpl][CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this).getDomainQualifiedUsername();
            [CtInvocationImpl]addToUserNameCache([CtVariableReadImpl]userID, [CtVariableReadImpl]userName, [CtVariableReadImpl]userStore);
            [CtInvocationImpl]addToUserIDCache([CtVariableReadImpl]userID, [CtVariableReadImpl]userName, [CtVariableReadImpl]userStore);
            [CtReturnImpl]return [CtVariableReadImpl]userName;
        }
        [CtReturnImpl]return [CtVariableReadImpl]userName;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.lang.String getFromUserNameCache([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID) [CtBlockImpl]{
        [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.common.UserIdResolverCache.getInstance().getValueFromCache([CtVariableReadImpl]userID, [CtTypeAccessImpl]org.wso2.carbon.user.core.UserStoreConfigConstants.RESOLVE_USER_NAME_FROM_USER_ID_CACHE_NAME, [CtFieldReadImpl]tenantId);
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.lang.String getFromUserIDCache([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore) [CtBlockImpl]{
        [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.common.UserIdResolverCache.getInstance().getValueFromCache([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]userName, [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName()), [CtTypeAccessImpl]org.wso2.carbon.user.core.UserStoreConfigConstants.RESOLVE_USER_ID_FROM_USER_NAME_CACHE_NAME, [CtFieldReadImpl]tenantId);
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void addToUserIDCache([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore) [CtBlockImpl]{
        [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.common.UserIdResolverCache.getInstance().addToCache([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]userName, [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName()), [CtVariableReadImpl]userID, [CtTypeAccessImpl]org.wso2.carbon.user.core.UserStoreConfigConstants.RESOLVE_USER_ID_FROM_USER_NAME_CACHE_NAME, [CtFieldReadImpl]tenantId);
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void addToUserNameCache([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore) [CtBlockImpl]{
        [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.common.UserIdResolverCache.getInstance().addToCache([CtVariableReadImpl]userID, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]userName, [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName()), [CtTypeAccessImpl]org.wso2.carbon.user.core.UserStoreConfigConstants.RESOLVE_USER_NAME_FROM_USER_ID_CACHE_NAME, [CtFieldReadImpl]tenantId);
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void clearUserIDResolverCache([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore) [CtBlockImpl]{
        [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.common.UserIdResolverCache.getInstance().clearCacheEntry([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]userName, [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName()), [CtTypeAccessImpl]org.wso2.carbon.user.core.UserStoreConfigConstants.RESOLVE_USER_ID_FROM_USER_NAME_CACHE_NAME, [CtFieldReadImpl]tenantId);
        [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.common.UserIdResolverCache.getInstance().clearCacheEntry([CtVariableReadImpl]userID, [CtTypeAccessImpl]org.wso2.carbon.user.core.UserStoreConfigConstants.RESOLVE_USER_NAME_FROM_USER_ID_CACHE_NAME, [CtFieldReadImpl]tenantId);
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * provides the userName of the given user.
     *
     * @param userID
     * 		userID of the user.
     * @return userName of the user.
     * @throws UserStoreException
     * 		Thrown by the underlying UserStoreManager.
     */
    protected [CtTypeReferenceImpl]java.lang.String doGetUserNameFromUserIDWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"doGetUserNameFromUserIDWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"doGetUserNameFromUserIDWithID operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * provides the unique user IDs of the given users.
     *
     * @param userIDs
     * 		userIDs of the users.
     * @return list of user IDs.
     * @throws UserStoreException
     * 		Thrown by the underlying UserStoreManager.
     */
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> getUserNamesFromUserIDs([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userIDs) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userNames = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID : [CtVariableReadImpl]userIDs) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]userNames.add([CtInvocationImpl]getUserNameFromUserID([CtVariableReadImpl]userID));
        }
        [CtReturnImpl]return [CtVariableReadImpl]userNames;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * provides the unique user IDs of the given users.
     *
     * @param userNames
     * 		user names of the users.
     * @return list of user IDs.
     * @throws UserStoreException
     * 		Thrown by the underlying UserStoreManager.
     */
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> getUserIDsFromUserNames([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userNames) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userIDs = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userName : [CtVariableReadImpl]userNames) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userId = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userId == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"User " + [CtVariableReadImpl]userName) + [CtLiteralImpl]" does not exit in the system.");
            }
            [CtInvocationImpl][CtVariableReadImpl]userIDs.add([CtVariableReadImpl]userId);
        }
        [CtReturnImpl]return [CtVariableReadImpl]userIDs;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Provide the users list for a given usernames list.
     *
     * @param userNamesList
     * 		user names list.
     * @return list of users.
     * @throws UserStoreException
     * 		Thrown by the underlying UserStoreManager.
     */
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> getUsersFromUserNames([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userNamesList) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> usersList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userName : [CtVariableReadImpl]userNamesList) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName);
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User([CtVariableReadImpl]userID, [CtVariableReadImpl]userName, [CtVariableReadImpl]userName);
            [CtInvocationImpl][CtVariableReadImpl]usersList.add([CtVariableReadImpl]user);
        }
        [CtReturnImpl]return [CtVariableReadImpl]usersList;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * provides the unique user ID of the given user.
     *
     * @param claimURI
     * 		Claim naURIme.
     * @param claimValue
     * 		Claim value.
     * @param profileName
     * 		Profile name.
     * @return user ID.
     * @throws UserStoreException
     * 		UserStoreException Thrown by the underlying UserStoreManager.
     */
    public [CtTypeReferenceImpl]java.lang.String getUserIDFromProperties([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimURI, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domain = [CtInvocationImpl][CtThisAccessImpl]this.getMyDomainName();
        [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> users = [CtInvocationImpl]doGetUserListWithID([CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtVariableReadImpl]domain, [CtThisAccessImpl]this);
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]users.isEmpty()) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"No userID found for the claim: " + [CtVariableReadImpl]claimURI) + [CtLiteralImpl]", value: ") + [CtVariableReadImpl]claimValue) + [CtLiteralImpl]", in domain:") + [CtLiteralImpl]" ") + [CtInvocationImpl]getMyDomainName());
                }
                [CtReturnImpl]return [CtLiteralImpl]null;
            } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]users.size() > [CtLiteralImpl]1) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Invalid scenario. Multiple users cannot be found for the given value: " + [CtVariableReadImpl]claimValue) + [CtLiteralImpl]"of ") + [CtLiteralImpl]"the ") + [CtLiteralImpl]"claim: ") + [CtVariableReadImpl]claimURI);
            }
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]users.get([CtLiteralImpl]0).getUserID();
        } else [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userNames = [CtInvocationImpl]doGetUserList([CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtVariableReadImpl]domain, [CtThisAccessImpl]this);
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userNames.isEmpty()) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"No userID found for the claim: " + [CtVariableReadImpl]claimURI) + [CtLiteralImpl]", value: ") + [CtVariableReadImpl]claimValue) + [CtLiteralImpl]", in domain:") + [CtLiteralImpl]" ") + [CtInvocationImpl]getMyDomainName());
                }
                [CtReturnImpl]return [CtLiteralImpl]null;
            } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]userNames.size() > [CtLiteralImpl]1) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Invalid scenario. Multiple users cannot be found for the given value: " + [CtVariableReadImpl]claimValue) + [CtLiteralImpl]"of ") + [CtLiteralImpl]"the ") + [CtLiteralImpl]"claim: ") + [CtVariableReadImpl]claimURI);
            }
            [CtReturnImpl]return [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUniqueId([CtInvocationImpl][CtVariableReadImpl]userNames.get([CtLiteralImpl]0), [CtThisAccessImpl]this);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get Users list from userIDs.
     *
     * @param userIDs
     * 		user IDs.
     * @param claims
     * 		Requested claims.
     * @param domainName
     * 		Domain name.
     * @param profileName
     * 		Profile name.
     * @return User list.
     * @throws UserStoreException
     * 		UserStoreException.
     */
    protected [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> getUsersFromIDs([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userIDs, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domainName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> users = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID : [CtVariableReadImpl]userIDs) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]users.add([CtInvocationImpl]getUserFromID([CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]domainName, [CtVariableReadImpl]profileName));
        }
        [CtReturnImpl]return [CtVariableReadImpl]users;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Get the mapped user store attribute name for the user name.
     *
     * @return mapped attribute for the user name.
     * @throws UserStoreException
     */
    protected [CtTypeReferenceImpl]java.lang.String getUserNameMappedAttribute() throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtFieldReadImpl]claimManager.getAttributeName([CtInvocationImpl]getMyDomainName(), [CtTypeAccessImpl]UserCoreClaimConstants.USERNAME_CLAIM_URI);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]e);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add username as a user claim.
     *
     * @param userName
     * 		username.
     * @param claims
     * 		claims map.
     */
    protected [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> addUserNameAttribute([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims) [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claims == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]claims = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        }
        [CtInvocationImpl][CtVariableReadImpl]claims.put([CtTypeAccessImpl]UserCoreClaimConstants.USERNAME_CLAIM_URI, [CtVariableReadImpl]userName);
        [CtReturnImpl]return [CtVariableReadImpl]claims;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add username as a user claim.
     *
     * @param userID
     * 		user ID.
     * @param claims
     * 		claims map.
     */
    protected [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> addUserIDAttribute([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims) [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claims == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]claims = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        }
        [CtInvocationImpl][CtVariableReadImpl]claims.put([CtTypeAccessImpl]UserCoreClaimConstants.USER_ID_CLAIM_URI, [CtVariableReadImpl]userID);
        [CtReturnImpl]return [CtVariableReadImpl]claims;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]void deleteUserWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class[] argTypes = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class };
            [CtInvocationImpl]callSecure([CtLiteralImpl]"deleteUserWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userID }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String loggedInUser = [CtInvocationImpl][CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.context.CarbonContext.getThreadLocalCarbonContext().getUsername();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]loggedInUser != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]loggedInUser = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]loggedInUser, [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.getDomainFromThreadLocal());
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]loggedInUser.indexOf([CtTypeAccessImpl]UserCoreConstants.DOMAIN_SEPARATOR) < [CtLiteralImpl]0) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]loggedInUser = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.PRIMARY_DEFAULT_DOMAIN_NAME + [CtFieldReadImpl]org.wso2.carbon.CarbonConstants.DOMAIN_SEPARATOR) + [CtVariableReadImpl]loggedInUser;
            }
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deletingUser = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]userID, [CtInvocationImpl]getMyDomainName());
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]deletingUser.indexOf([CtTypeAccessImpl]UserCoreConstants.DOMAIN_SEPARATOR) < [CtLiteralImpl]0) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]deletingUser = [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.PRIMARY_DEFAULT_DOMAIN_NAME + [CtFieldReadImpl]org.wso2.carbon.CarbonConstants.DOMAIN_SEPARATOR) + [CtVariableReadImpl]deletingUser;
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]loggedInUser != [CtLiteralImpl]null) && [CtInvocationImpl][CtVariableReadImpl]loggedInUser.equals([CtVariableReadImpl]deletingUser)) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtLiteralImpl]"User " + [CtVariableReadImpl]loggedInUser) + [CtLiteralImpl]" tried to delete him/her self");
            [CtInvocationImpl]handleDeleteUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DELETE_LOGGED_IN_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DELETE_LOGGED_IN_USER.getMessage(), [CtVariableReadImpl]userID);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DELETE_LOGGED_IN_USER.toString());
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreWithID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).deleteUserWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId());
            [CtReturnImpl]return;
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isPrimaryAdminUser([CtVariableReadImpl]userID, [CtFieldReadImpl]realmConfig)) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DELETE_ADMIN_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DELETE_ADMIN_USER.getMessage(), [CtVariableReadImpl]userID);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DELETE_ADMIN_USER.toString());
        }
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isRegistryAnnonymousUser([CtVariableReadImpl]userID)) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DELETE_ANONYMOUS_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DELETE_ANONYMOUS_USER.getMessage(), [CtVariableReadImpl]userID);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_DELETE_ANONYMOUS_USER.toString());
        }
        [CtIfImpl]if ([CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]userID);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserStoreManagerListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserStoreManagerListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManagerListener) (listener)).deleteUserWithID([CtVariableReadImpl]userID, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleDeleteUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID);
                    [CtReturnImpl]return;
                }
            }
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPreDeleteUserWithID([CtVariableReadImpl]userID, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleDeleteUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userID);
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
        [CtLocalVariableImpl][CtCommentImpl]// #################### </Listeners> #####################################################
        [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUserEixisting;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userName;
        [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userName = [CtInvocationImpl]doGetUserNameFromUserID([CtVariableReadImpl]userID);
            [CtAssignmentImpl][CtVariableWriteImpl]isUserEixisting = [CtBinaryOperatorImpl][CtVariableReadImpl]userName != [CtLiteralImpl]null;
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
            [CtAssignmentImpl][CtVariableWriteImpl]isUserEixisting = [CtBinaryOperatorImpl][CtVariableReadImpl]user != [CtLiteralImpl]null;
            [CtAssignmentImpl][CtVariableWriteImpl]userName = [CtInvocationImpl][CtVariableReadImpl]user.getUsername();
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserEixisting) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userID, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
            [CtInvocationImpl]handleDeleteUserFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtInvocationImpl]clearUserIDResolverCache([CtVariableReadImpl]userID, [CtVariableReadImpl]userName, [CtVariableReadImpl]userStore);
            [CtIfImpl][CtCommentImpl]// If unique id feature is not enabled, we have to call the legacy methods.
            if ([CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.deleteUser([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]userName, [CtInvocationImpl]getMyDomainName()));
                [CtInvocationImpl]doDeleteUserWithID([CtVariableReadImpl]userID);
            } else [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.deleteUser([CtInvocationImpl][CtVariableReadImpl]user.getDomainQualifiedUsername());
                [CtInvocationImpl]doDeleteUser([CtVariableReadImpl]userName);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_DELETING_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_DELETING_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userID);
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
        [CtInvocationImpl][CtCommentImpl]// Needs to clear roles cache upon deletion of a user
        clearUserRolesCache([CtVariableReadImpl]userName);
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPostDeleteUserWithID([CtVariableReadImpl]userID, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleDeleteUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtCommentImpl]// #################### </Listeners> #####################################################
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]void setUserClaimValueWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimURI, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreWithID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).setUserClaimValueWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId(), [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        [CtTypeReferenceImpl]boolean isUniqueIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUserExists;
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtLiteralImpl]null;
        [CtIfImpl]if ([CtVariableReadImpl]isUniqueIdEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtInvocationImpl]doCheckExistingUserWithID([CtVariableReadImpl]userID);
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtBinaryOperatorImpl][CtVariableReadImpl]user != [CtLiteralImpl]null;
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserExists) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userID, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
            [CtInvocationImpl]handleSetUserClaimValueFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPreSetUserClaimValueWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleSetUserClaimValueFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUE.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValueFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
        [CtIfImpl][CtCommentImpl]// #################### </Listeners> #####################################################
        [CtCommentImpl]// Check userstore is readonly or not
        if ([CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValueFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl][CtCommentImpl]// If unique id feature is not enabled, we have to call the legacy methods.
            if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                [CtInvocationImpl]doSetUserClaimValue([CtInvocationImpl][CtVariableReadImpl]user.getUsername(), [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
            } else [CtBlockImpl]{
                [CtInvocationImpl]doSetUserClaimValueWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValueFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_SETTING_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_SETTING_USER_CLAIM_VALUE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPostSetUserClaimValueWithID([CtVariableReadImpl]userID, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleSetUserClaimValueFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUE.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValueFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
        [CtCommentImpl]// #################### </Listeners> #####################################################
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]void setUserClaimValuesWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreWithID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).setUserClaimValuesWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId(), [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        [CtTypeReferenceImpl]boolean isUniqueIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUserExists;
        [CtIfImpl]if ([CtVariableReadImpl]isUniqueIdEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtInvocationImpl]doCheckExistingUserWithID([CtVariableReadImpl]userID);
        } else [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userNameFromUserID = [CtInvocationImpl]doGetUserNameFromUserID([CtVariableReadImpl]userID);
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtBinaryOperatorImpl][CtVariableReadImpl]userNameFromUserID != [CtLiteralImpl]null;
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserExists) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userID, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
            [CtInvocationImpl]handleSetUserClaimValuesFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claims == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]claims = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPreSetUserClaimValuesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleSetUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
        [CtIfImpl][CtCommentImpl]// #################### </Listeners> #####################################################
        [CtCommentImpl]// If user store is readonly this method should not get invoked with non empty claim set.
        if ([CtBinaryOperatorImpl][CtInvocationImpl]isReadOnly() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]claims.isEmpty())) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
        }
        [CtTryImpl][CtCommentImpl]// set claim values if user store is not read only.
        try [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
                [CtIfImpl][CtCommentImpl]// If unique id feature is not enabled, we have to call the legacy methods.
                if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
                    [CtInvocationImpl]doSetUserClaimValues([CtInvocationImpl][CtVariableReadImpl]user.getUsername(), [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                } else [CtBlockImpl]{
                    [CtInvocationImpl]doSetUserClaimValuesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_SETTING_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_SETTING_USER_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPostSetUserClaimValuesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleSetUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUES.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
        [CtCommentImpl]// #################### </Listeners> #####################################################
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]void setUserClaimValuesWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> oldClaimMap, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> multiValuedClaimsToAdd, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> multiValuedClaimsToDelete, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> claimsExcludingMultiValuedClaims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreWithID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).setUserClaimValuesWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId(), [CtVariableReadImpl]oldClaimMap, [CtVariableReadImpl]multiValuedClaimsToAdd, [CtVariableReadImpl]multiValuedClaimsToDelete, [CtVariableReadImpl]claimsExcludingMultiValuedClaims, [CtVariableReadImpl]profileName);
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims = [CtInvocationImpl]getModifiedClaims([CtVariableReadImpl]oldClaimMap, [CtVariableReadImpl]multiValuedClaimsToAdd, [CtVariableReadImpl]multiValuedClaimsToDelete, [CtVariableReadImpl]claimsExcludingMultiValuedClaims);
        [CtLocalVariableImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        [CtTypeReferenceImpl]boolean isUniqueIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUserExists;
        [CtIfImpl]if ([CtVariableReadImpl]isUniqueIdEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtInvocationImpl]doCheckExistingUserWithID([CtVariableReadImpl]userID);
        } else [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userNameFromUserID = [CtInvocationImpl]doGetUserNameFromUserID([CtVariableReadImpl]userID);
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtBinaryOperatorImpl][CtVariableReadImpl]userNameFromUserID != [CtLiteralImpl]null;
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserExists) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userID, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
            [CtInvocationImpl]handleSetUserClaimValuesFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtInvocationImpl][CtCommentImpl]// #################### <Pre Listeners> #####################################################
        invokeDoPreSetUserClaimsWithIDListeners([CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
        [CtIfImpl][CtCommentImpl]// #################### </Pre Listeners> #####################################################
        [CtCommentImpl]// If user store is readonly this method should not get invoked with non empty claim set.
        if ([CtBinaryOperatorImpl][CtInvocationImpl]isReadOnly() && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]claims.isEmpty())) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
        }
        [CtLocalVariableImpl][CtCommentImpl]// Any additional simple claim modified due to pre listeners are taken into claimsExcludingMultiValuedClaims map.
        [CtTypeReferenceImpl]java.lang.String separator = [CtLiteralImpl]",";
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.MULTI_ATTRIBUTE_SEPARATOR))) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]separator = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.MULTI_ATTRIBUTE_SEPARATOR);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claimsExcludingMultiValuedClaims != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claim : [CtInvocationImpl][CtVariableReadImpl]claims.entrySet()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]claimsExcludingMultiValuedClaims.put([CtInvocationImpl][CtVariableReadImpl]claim.getKey(), [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]claim.getValue().split([CtVariableReadImpl]separator)));
            }
        }
        [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]claimsExcludingMultiValuedClaims.keySet().removeAll([CtInvocationImpl][CtVariableReadImpl]multiValuedClaimsToAdd.keySet());
        [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]claimsExcludingMultiValuedClaims.keySet().removeAll([CtInvocationImpl][CtVariableReadImpl]multiValuedClaimsToDelete.keySet());
        [CtTryImpl][CtCommentImpl]// Set claim values if user store is not read only.
        try [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
                [CtIfImpl][CtCommentImpl]// If unique id feature is not enabled, we have to call the legacy methods.
                if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
                    [CtInvocationImpl]doSetUserClaimValues([CtInvocationImpl][CtVariableReadImpl]user.getUsername(), [CtVariableReadImpl]multiValuedClaimsToAdd, [CtVariableReadImpl]multiValuedClaimsToDelete, [CtVariableReadImpl]claimsExcludingMultiValuedClaims, [CtVariableReadImpl]profileName);
                } else [CtBlockImpl]{
                    [CtInvocationImpl]doSetUserClaimValuesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]multiValuedClaimsToAdd, [CtVariableReadImpl]multiValuedClaimsToDelete, [CtVariableReadImpl]claimsExcludingMultiValuedClaims, [CtVariableReadImpl]profileName);
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
                [CtInvocationImpl]doSetUserClaimValues([CtInvocationImpl][CtVariableReadImpl]user.getUsername(), [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            } else [CtBlockImpl]{
                [CtInvocationImpl]doSetUserClaimValuesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_SETTING_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_SETTING_USER_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
        [CtInvocationImpl][CtCommentImpl]// #################### <Post Listeners> #####################################################
        invokeDoPostSetUserClaimsWithIDListeners([CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
        [CtCommentImpl]// #################### </Post Listeners> #####################################################
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]void updateCredentialByAdminWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object newCredential) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.Object.class };
            [CtInvocationImpl]callSecure([CtLiteralImpl]"updateCredentialByAdminWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreWithID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).updateCredentialByAdminWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId(), [CtVariableReadImpl]newCredential);
            [CtReturnImpl]return;
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateCredentialByAdminFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.Secret newCredentialObj;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]newCredentialObj = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.Secret.getSecret([CtVariableReadImpl]newCredential);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.UnsupportedSecretTypeException e) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateCredentialByAdminFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getCode(), [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getMessage() + [CtLiteralImpl]" ") + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.toString(), [CtVariableReadImpl]e);
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtForEachImpl][CtCommentImpl]// #################### <Listeners> #####################################################
                for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserStoreManagerListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserStoreManagerListeners()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object credentialArgument;
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]newCredentialObj;
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]newCredential;
                    }
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManagerListener) (listener)).updateCredentialByAdminWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]credentialArgument, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtInvocationImpl]handleUpdateCredentialByAdminFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]credentialArgument);
                        [CtReturnImpl]return;
                    }
                }
                [CtForEachImpl][CtCommentImpl]// using string buffers to allow the password to be changed by listener
                for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPreUpdateCredentialByAdminWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]newCredentialObj, [CtThisAccessImpl]this)) [CtBlockImpl]{
                            [CtInvocationImpl]handleUpdateCredentialByAdminFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredentialObj);
                            [CtReturnImpl]return;
                        }
                    } else [CtBlockImpl]{
                        [CtLocalVariableImpl][CtCommentImpl]// using string buffers to allow the password to be changed by listener
                        [CtTypeReferenceImpl]java.lang.StringBuffer credBuff = [CtLiteralImpl]null;
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]newCredential == [CtLiteralImpl]null) [CtBlockImpl]{
                            [CtAssignmentImpl][CtCommentImpl]// a default password will be set
                            [CtVariableWriteImpl]credBuff = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.StringBuffer();
                        } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]newCredential instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]java.lang.String) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]credBuff = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.StringBuffer([CtVariableReadImpl](([CtTypeReferenceImpl]java.lang.String) (newCredential)));
                        }
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]credBuff != [CtLiteralImpl]null) [CtBlockImpl]{
                            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPreUpdateCredentialByAdminWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]credBuff, [CtThisAccessImpl]this)) [CtBlockImpl]{
                                [CtInvocationImpl]handleUpdateCredentialByAdminFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]credBuff);
                                [CtReturnImpl]return;
                            }
                            [CtAssignmentImpl][CtCommentImpl]// reading the modified value
                            [CtVariableWriteImpl]newCredential = [CtInvocationImpl][CtVariableReadImpl]credBuff.toString();
                            [CtInvocationImpl][CtVariableReadImpl]newCredentialObj.clear();
                            [CtTryImpl]try [CtBlockImpl]{
                                [CtAssignmentImpl][CtVariableWriteImpl]newCredentialObj = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.Secret.getSecret([CtVariableReadImpl]newCredential);
                            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.UnsupportedSecretTypeException e) [CtBlockImpl]{
                                [CtInvocationImpl]handleUpdateCredentialByAdminFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getCode(), [CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getMessage() + [CtLiteralImpl]" ") + [CtInvocationImpl][CtVariableReadImpl]e.getMessage(), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential);
                                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.toString(), [CtVariableReadImpl]e);
                            }
                        }
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateCredentialByAdminFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
            [CtIfImpl][CtCommentImpl]// #################### </Listeners> #####################################################
            if ([CtUnaryOperatorImpl]![CtInvocationImpl]checkUserPasswordValid([CtVariableReadImpl]newCredential)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMsg = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.PROPERTY_PASSWORD_ERROR_MSG);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]errorMsg != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getCode();
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_CREDENTIAL_BY_ADMIN.getMessage(), [CtVariableReadImpl]errorMsg);
                    [CtInvocationImpl]handleUpdateCredentialByAdminFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential);
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_PASSWORD.getCode();
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_PASSWORD.getMessage(), [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_JAVA_REG_EX));
                [CtInvocationImpl]handleUpdateCredentialByAdminFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUniqueIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUserExists;
            [CtIfImpl]if ([CtVariableReadImpl]isUniqueIdEnabled) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtInvocationImpl]doCheckExistingUserWithID([CtVariableReadImpl]userID);
            } else [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userNameFromUserID = [CtInvocationImpl]doGetUserNameFromUserID([CtVariableReadImpl]userID);
                [CtAssignmentImpl][CtVariableWriteImpl]isUserExists = [CtBinaryOperatorImpl][CtVariableReadImpl]userNameFromUserID != [CtLiteralImpl]null;
            }
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserExists) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userID, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
                [CtInvocationImpl]handleUpdateCredentialByAdminFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]"-") + [CtVariableReadImpl]errorMessage);
            }
            [CtTryImpl]try [CtBlockImpl]{
                [CtIfImpl][CtCommentImpl]// If unique id feature is not enabled, we have to call the legacy methods.
                if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
                    [CtInvocationImpl]doUpdateCredentialByAdmin([CtInvocationImpl][CtVariableReadImpl]user.getUsername(), [CtVariableReadImpl]newCredential);
                } else [CtBlockImpl]{
                    [CtInvocationImpl]doUpdateCredentialByAdminWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]newCredentialObj);
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateCredentialByAdminFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_UPDATING_CREDENTIAL_BY_ADMIN.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_UPDATING_CREDENTIAL_BY_ADMIN.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredentialObj);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
            [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
            try [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object credentialArgument;
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]newCredentialObj;
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]newCredential;
                    }
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPostUpdateCredentialByAdminWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]credentialArgument, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtInvocationImpl]handleUpdateCredentialByAdminFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL_BY_ADMIN.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL_BY_ADMIN.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential);
                        [CtReturnImpl]return;
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateCredentialByAdminFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL_BY_ADMIN.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_CREDENTIAL_BY_ADMIN.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]newCredential);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]newCredentialObj.clear();
        }
        [CtCommentImpl]// #################### </Listeners> #####################################################
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]void deleteUserClaimValueWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimURI, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class };
            [CtInvocationImpl]callSecure([CtLiteralImpl]"deleteUserClaimValueWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreWithID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).deleteUserClaimValueWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId(), [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
            [CtReturnImpl]return;
        }
        [CtIfImpl]if ([CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserClaimValueFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUserEixisting;
        [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserEixisting = [CtInvocationImpl]doCheckExistingUserWithID([CtVariableReadImpl]userID);
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
            [CtAssignmentImpl][CtVariableWriteImpl]isUserEixisting = [CtBinaryOperatorImpl][CtVariableReadImpl]user != [CtLiteralImpl]null;
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserEixisting) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userID, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
            [CtInvocationImpl]handleDeleteUserClaimValueFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPreDeleteUserClaimValueWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleDeleteUserClaimValueFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER_CLAIM_VALUE.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
                    [CtReturnImpl]return;
                }
            }
            [CtCommentImpl]// #################### </Listeners> #####################################################
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserClaimValueFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER_CLAIM_VALUE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl][CtCommentImpl]// If unique id feature is not enabled, we have to call the legacy methods.
            if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                [CtInvocationImpl]doDeleteUserClaimValue([CtInvocationImpl][CtVariableReadImpl]user.getUsername(), [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
            } else [CtBlockImpl]{
                [CtInvocationImpl]doDeleteUserClaimValueWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserClaimValueFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_DELETING_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_DELETING_USER_CLAIM_VALUE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPostDeleteUserClaimValueWithID([CtVariableReadImpl]userID, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleDeleteUserClaimValueFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER_CLAIM_VALUE.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserClaimValueFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER_CLAIM_VALUE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]claimURI, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtCommentImpl]// #################### </Listeners> #####################################################
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]void deleteUserClaimValuesWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String[].class, [CtFieldReadImpl]java.lang.String.class };
            [CtInvocationImpl]callSecure([CtLiteralImpl]"deleteUserClaimValuesWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreWithID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).deleteUserClaimValuesWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId(), [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtReturnImpl]return;
        }
        [CtIfImpl]if ([CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isUserExisting;
        [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExisting = [CtInvocationImpl]doCheckExistingUserWithID([CtVariableReadImpl]userID);
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
            [CtAssignmentImpl][CtVariableWriteImpl]isUserExisting = [CtBinaryOperatorImpl][CtVariableReadImpl]user != [CtLiteralImpl]null;
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]isUserExisting) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), [CtVariableReadImpl]userID, [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();
            [CtInvocationImpl]handleDeleteUserClaimValuesFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claims == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]claims = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPreDeleteUserClaimValuesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleDeleteUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER_CLAIM_VALUES.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                    [CtReturnImpl]return;
                }
            }
            [CtCommentImpl]// #################### </Listeners> #####################################################
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_DELETE_USER_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl][CtCommentImpl]// If unique id feature is not enabled, we have to call the legacy methods.
            if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                [CtInvocationImpl]doDeleteUserClaimValues([CtInvocationImpl][CtVariableReadImpl]user.getUsername(), [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            } else [CtBlockImpl]{
                [CtInvocationImpl]doDeleteUserClaimValuesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_DELETING_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_DELETING_USER_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPostDeleteUserClaimValuesWithID([CtVariableReadImpl]userID, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleDeleteUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER_CLAIM_VALUES.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleDeleteUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_DELETE_USER_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtCommentImpl]// #################### </Listeners> #####################################################
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]java.util.Date getPasswordExpirationTimeWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreWithID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).getPasswordExpirationTimeWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId());
        }
        [CtReturnImpl]return [CtLiteralImpl]null;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]void updateRoleListOfUserWithID([CtParameterImpl]final [CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl]final [CtArrayTypeReferenceImpl]java.lang.String[] deletedRoles, [CtParameterImpl]final [CtArrayTypeReferenceImpl]java.lang.String[] newRoles) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]java.security.AccessController.doPrivileged([CtLambdaImpl](([CtTypeReferenceImpl]java.security.PrivilegedExceptionAction<[CtTypeReferenceImpl]java.lang.String>) (() -> [CtBlockImpl]{
                [CtIfImpl][CtCommentImpl]// If unique id feature is not enabled, we have to call the legacy methods.
                if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]user == [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"User cannot be found.");
                    }
                    [CtInvocationImpl]updateRoleListOfUserInternal([CtInvocationImpl][CtVariableReadImpl]user.getDomainQualifiedUsername(), [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                    [CtReturnImpl]return [CtLiteralImpl]null;
                } else [CtBlockImpl]{
                    [CtInvocationImpl]updateRoleListOfUserInternalWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                    [CtReturnImpl]return [CtLiteralImpl]null;
                }
            })));
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.security.PrivilegedActionException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]e.getException() instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException)) [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateRoleListOfUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_UPDATE_USERS_OF_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_UPDATE_USERS_OF_ROLE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
            }
            [CtThrowImpl]throw [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException) ([CtVariableReadImpl]e.getException()));
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Update role list of user.
     */
    private final [CtTypeReferenceImpl]void updateRoleListOfUserInternalWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] deletedRoles, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] newRoles) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String primaryDomain = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]primaryDomain != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtOperatorAssignmentImpl][CtVariableWriteImpl]primaryDomain += [CtFieldReadImpl]org.wso2.carbon.CarbonConstants.DOMAIN_SEPARATOR;
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]deletedRoles != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]deletedRoles.length > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.sort([CtVariableReadImpl]deletedRoles);
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isPrimaryAdminUser([CtVariableReadImpl]userID, [CtFieldReadImpl]realmConfig)) [CtBlockImpl]{
                [CtForImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]int i = [CtLiteralImpl]0; [CtBinaryOperatorImpl][CtVariableReadImpl]i < [CtFieldReadImpl][CtVariableReadImpl]deletedRoles.length; [CtUnaryOperatorImpl][CtVariableWriteImpl]i++) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtArrayReadImpl][CtVariableReadImpl]deletedRoles[[CtVariableReadImpl]i].equalsIgnoreCase([CtInvocationImpl][CtFieldReadImpl]realmConfig.getAdminRoleName()) || [CtInvocationImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]primaryDomain + [CtArrayReadImpl][CtVariableReadImpl]deletedRoles[[CtVariableReadImpl]i]).equalsIgnoreCase([CtInvocationImpl][CtFieldReadImpl]realmConfig.getAdminRoleName())) [CtBlockImpl]{
                        [CtInvocationImpl]handleUpdateRoleListOfUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_REMOVE_ADMIN_ROLE_FROM_ADMIN.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_REMOVE_ADMIN_ROLE_FROM_ADMIN.getMessage(), [CtVariableReadImpl]userID, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_REMOVE_ADMIN_ROLE_FROM_ADMIN.toString());
                    }
                }
            }
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreWithID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).updateRoleListOfUserWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId(), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]deletedRoles), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]newRoles));
            [CtReturnImpl]return;
        }
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isSystemStore()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.updateSystemRoleListOfUser([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainAwareUserId(), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]deletedRoles), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]newRoles));
            [CtReturnImpl]return;
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtBinaryOperatorImpl][CtVariableReadImpl]deletedRoles == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]deletedRoles = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]newRoles == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]newRoles = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        }
        [CtIfImpl][CtCommentImpl]// This happens only once during first startup - adding administrator user/role.
        if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]userID.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR) > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userID = [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName();
            [CtAssignmentImpl][CtVariableWriteImpl]deletedRoles = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]deletedRoles);
            [CtAssignmentImpl][CtVariableWriteImpl]newRoles = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]newRoles);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> internalRoleDel = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> internalRoleNew = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> roleDel = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> roleNew = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]deletedRoles != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]deletedRoles.length > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String deleteRole : [CtVariableReadImpl]deletedRoles) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isEveryoneRole([CtVariableReadImpl]deleteRole, [CtFieldReadImpl]realmConfig)) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateRoleListOfUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.getMessage(), [CtVariableReadImpl]userID, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.toString());
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domain = [CtLiteralImpl]null;
                [CtLocalVariableImpl][CtTypeReferenceImpl]int index1 = [CtInvocationImpl][CtVariableReadImpl]deleteRole.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index1 > [CtLiteralImpl]0) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]domain = [CtInvocationImpl][CtVariableReadImpl]deleteRole.substring([CtLiteralImpl]0, [CtVariableReadImpl]index1);
                }
                [CtInvocationImpl]processDeletedRoles([CtVariableReadImpl]internalRoleDel, [CtVariableReadImpl]roleDel, [CtVariableReadImpl]deleteRole, [CtVariableReadImpl]domain);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]deletedRoles = [CtInvocationImpl][CtVariableReadImpl]roleDel.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]newRoles != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]newRoles.length > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String newRole : [CtVariableReadImpl]newRoles) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isEveryoneRole([CtVariableReadImpl]newRole, [CtFieldReadImpl]realmConfig)) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateRoleListOfUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.getMessage(), [CtVariableReadImpl]userID, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.toString());
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domain = [CtLiteralImpl]null;
                [CtLocalVariableImpl][CtTypeReferenceImpl]int index2 = [CtInvocationImpl][CtVariableReadImpl]newRole.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index2 > [CtLiteralImpl]0) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]domain = [CtInvocationImpl][CtVariableReadImpl]newRole.substring([CtLiteralImpl]0, [CtVariableReadImpl]index2);
                }
                [CtInvocationImpl]processNewRoles([CtVariableReadImpl]internalRoleNew, [CtVariableReadImpl]roleNew, [CtVariableReadImpl]newRole, [CtVariableReadImpl]domain);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]newRoles = [CtInvocationImpl][CtVariableReadImpl]roleNew.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]internalRoleDel.size() > [CtLiteralImpl]0) || [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]internalRoleNew.size() > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.updateHybridRoleListOfUser([CtInvocationImpl]doGetUserNameFromUserID([CtVariableReadImpl]userID), [CtInvocationImpl][CtVariableReadImpl]internalRoleDel.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]), [CtInvocationImpl][CtVariableReadImpl]internalRoleNew.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]));
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPreUpdateRoleListOfUserWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateRoleListOfUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_ROLE_OF_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_ROLE_OF_USER.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateRoleListOfUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_ROLE_OF_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_UPDATE_ROLE_OF_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtIfImpl][CtCommentImpl]// #################### </Listeners> #####################################################
        if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]deletedRoles != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]deletedRoles.length > [CtLiteralImpl]0)) || [CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]newRoles != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]newRoles.length > [CtLiteralImpl]0))) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl]isReadOnly()) && [CtFieldReadImpl]writeGroupsEnabled) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                        [CtInvocationImpl]doUpdateRoleListOfUserWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                    } else [CtBlockImpl]{
                        [CtInvocationImpl]doUpdateRoleListOfUser([CtInvocationImpl]doGetUserNameFromUserID([CtVariableReadImpl]userID), [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                    }
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateRoleListOfUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_UPDATING_ROLE_OF_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_UPDATING_ROLE_OF_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                    [CtThrowImpl]throw [CtVariableReadImpl]ex;
                }
            } else [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateRoleListOfUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]userID, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
            }
        }
        [CtLocalVariableImpl][CtCommentImpl]// Clear user role cache from username.
        [CtTypeReferenceImpl]java.lang.String username = [CtInvocationImpl]doGetUserNameFromUserID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]username != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl]clearUserRolesCache([CtVariableReadImpl]username);
        }
        [CtTryImpl][CtCommentImpl]// Call the relevant listeners after updating the role list of user.
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPostUpdateRoleListOfUserWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateRoleListOfUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_ROLE_OF_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_ROLE_OF_USER.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateRoleListOfUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_ROLE_OF_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_UPDATE_ROLE_OF_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]deletedRoles, [CtVariableReadImpl]newRoles);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void processNewRoles([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> internalRoleNew, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> roleNew, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String newRole, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domain) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.INTERNAL_DOMAIN.equalsIgnoreCase([CtVariableReadImpl]domain)) [CtBlockImpl]{
            [CtInvocationImpl][CtCommentImpl]// If this is an internal role.
            [CtVariableReadImpl]internalRoleNew.add([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]newRole));
        } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.APPLICATION_DOMAIN.equalsIgnoreCase([CtVariableReadImpl]domain) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.WORKFLOW_DOMAIN.equalsIgnoreCase([CtVariableReadImpl]domain)) [CtBlockImpl]{
            [CtInvocationImpl][CtCommentImpl]// If this is an application role or workflow role.
            [CtVariableReadImpl]internalRoleNew.add([CtVariableReadImpl]newRole);
        } else [CtIfImpl]if ([CtInvocationImpl][CtThisAccessImpl]this.isReadOnly()) [CtBlockImpl]{
            [CtInvocationImpl][CtCommentImpl]// If this is a readonly user store, we add even normal roles as internal roles.
            [CtVariableReadImpl]internalRoleNew.add([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]newRole));
        } else [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]roleNew.add([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]newRole));
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void processDeletedRoles([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> internalRoleDel, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> roleDel, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String deleteRole, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domain) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.APPLICATION_DOMAIN.equalsIgnoreCase([CtVariableReadImpl]domain) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.WORKFLOW_DOMAIN.equalsIgnoreCase([CtVariableReadImpl]domain)) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]internalRoleDel.add([CtVariableReadImpl]deleteRole);
        } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.INTERNAL_DOMAIN.equalsIgnoreCase([CtVariableReadImpl]domain) || [CtInvocationImpl][CtThisAccessImpl]this.isReadOnly()) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]internalRoleDel.add([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]deleteRole));
        } else [CtBlockImpl]{
            [CtInvocationImpl][CtCommentImpl]// This is domain free role name.
            [CtVariableReadImpl]roleDel.add([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]deleteRole));
        }
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]void updateUserListOfRoleWithID([CtParameterImpl]final [CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] deletedUserIDs, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] newUserIDs) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]java.security.AccessController.doPrivileged([CtLambdaImpl](([CtTypeReferenceImpl]java.security.PrivilegedExceptionAction<[CtTypeReferenceImpl]java.lang.String>) (() -> [CtBlockImpl]{
                [CtLocalVariableImpl][CtCommentImpl]// If unique id feature is not enabled, we have to call the legacy methods.
                [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]roleName);
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> deletedUsers = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> newUsers = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]deletedUserIDs != [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]deletedUsers = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUsers([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]deletedUserIDs), [CtThisAccessImpl]this);
                    }
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]newUserIDs != [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]newUsers = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUsers([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]newUserIDs), [CtThisAccessImpl]this);
                    }
                    [CtInvocationImpl][CtCommentImpl]// If we don't have a record for this user, let's try to call directly using the user id.
                    updateUserListOfRoleInternal([CtVariableReadImpl]roleName, [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]deletedUsers.stream().map([CtExecutableReferenceExpressionImpl][CtFieldReadImpl]User::getDomainQualifiedUsername).toArray([CtExecutableReferenceExpressionImpl][CtTypeAccessImpl][CtArrayTypeReferenceImpl]java.lang.String[]::new), [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]newUsers.stream().map([CtExecutableReferenceExpressionImpl][CtFieldReadImpl]User::getDomainQualifiedUsername).toArray([CtExecutableReferenceExpressionImpl][CtTypeAccessImpl][CtArrayTypeReferenceImpl]java.lang.String[]::new));
                    [CtReturnImpl]return [CtLiteralImpl]null;
                }
                [CtInvocationImpl]updateUserListOfRoleInternalWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUserIDs, [CtVariableReadImpl]newUserIDs);
                [CtReturnImpl]return [CtLiteralImpl]null;
            })));
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]java.security.PrivilegedActionException e) [CtBlockImpl]{
            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]e.getException() instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException)) [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateRoleListOfUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_UPDATING_ROLE_OF_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_UPDATING_ROLE_OF_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUserIDs, [CtVariableReadImpl]newUserIDs);
            }
            [CtThrowImpl]throw [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException) ([CtVariableReadImpl]e.getException()));
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * update user list of role.
     */
    private final [CtTypeReferenceImpl]void updateUserListOfRoleInternalWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] deletedUserIDs, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] newUserIDs) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] deletedUsernames = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.ArrayUtils.isNotEmpty([CtVariableReadImpl]deletedUserIDs)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> deletedUsernameList = [CtInvocationImpl]getUserNamesFromUserIDs([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]deletedUserIDs));
            [CtAssignmentImpl][CtVariableWriteImpl]deletedUsernames = [CtInvocationImpl][CtVariableReadImpl]deletedUsernameList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]);
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] newUsernames = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.ArrayUtils.isNotEmpty([CtVariableReadImpl]newUserIDs)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> newUsernameList = [CtInvocationImpl]getUserNamesFromUserIDs([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]newUserIDs));
            [CtAssignmentImpl][CtVariableWriteImpl]newUsernames = [CtInvocationImpl][CtVariableReadImpl]newUsernameList.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String primaryDomain = [CtInvocationImpl]getMyDomainName();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]primaryDomain != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtOperatorAssignmentImpl][CtVariableWriteImpl]primaryDomain += [CtFieldReadImpl]org.wso2.carbon.CarbonConstants.DOMAIN_SEPARATOR;
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtFieldReadImpl][CtVariableReadImpl]deletedUsernames.length > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.sort([CtVariableReadImpl]deletedUsernames);
            [CtIfImpl][CtCommentImpl]// Updating the user list of a role belong to the primary domain.
            if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isPrimaryAdminRole([CtVariableReadImpl]roleName, [CtFieldReadImpl]realmConfig)) [CtBlockImpl]{
                [CtForImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]int i = [CtLiteralImpl]0; [CtBinaryOperatorImpl][CtVariableReadImpl]i < [CtFieldReadImpl][CtVariableReadImpl]deletedUsernames.length; [CtUnaryOperatorImpl][CtVariableWriteImpl]i++) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtArrayReadImpl][CtVariableReadImpl]deletedUsernames[[CtVariableReadImpl]i].equalsIgnoreCase([CtInvocationImpl][CtFieldReadImpl]realmConfig.getAdminUserName()) || [CtInvocationImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]primaryDomain + [CtArrayReadImpl][CtVariableReadImpl]deletedUsernames[[CtVariableReadImpl]i]).equalsIgnoreCase([CtInvocationImpl][CtFieldReadImpl]realmConfig.getAdminUserName())) [CtBlockImpl]{
                        [CtInvocationImpl]handleUpdateRoleListOfUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_REMOVE_ADMIN_ROLE_FROM_ADMIN.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_REMOVE_ADMIN_ROLE_FROM_ADMIN.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUserIDs, [CtVariableReadImpl]newUserIDs);
                        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_REMOVE_ADMIN_ROLE_FROM_ADMIN.toString());
                    }
                }
            }
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreOfRoles([CtVariableReadImpl]roleName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isHybridRole()) [CtBlockImpl]{
            [CtIfImpl][CtCommentImpl]// Check whether someone is trying to update Everyone role.
            if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isEveryoneRole([CtVariableReadImpl]roleName, [CtFieldReadImpl]realmConfig)) [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateRoleListOfUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUserIDs, [CtVariableReadImpl]newUserIDs);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_UPDATE_EVERYONE_ROLE.toString());
            }
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.INTERNAL_DOMAIN.equalsIgnoreCase([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName())) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.updateUserListOfHybridRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]deletedUsernames, [CtVariableReadImpl]newUsernames);
                [CtInvocationImpl]handleDoPostUpdateUserListOfRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUserIDs, [CtVariableReadImpl]newUserIDs, [CtLiteralImpl]true);
            } else [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.updateUserListOfHybridRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainAwareName(), [CtVariableReadImpl]deletedUsernames, [CtVariableReadImpl]newUsernames);
                [CtInvocationImpl]handleDoPostUpdateUserListOfRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUserIDs, [CtVariableReadImpl]newUserIDs, [CtLiteralImpl]true);
            }
            [CtInvocationImpl]clearUserRolesCacheByTenant([CtFieldReadImpl][CtThisAccessImpl]this.tenantId);
            [CtReturnImpl]return;
        }
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isSystemStore()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.updateUserListOfSystemRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]deletedUsernames), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]newUsernames));
            [CtInvocationImpl]handleDoPostUpdateUserListOfRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUserIDs, [CtVariableReadImpl]newUserIDs, [CtLiteralImpl]true);
            [CtReturnImpl]return;
        }
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).updateUserListOfRoleWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]deletedUserIDs), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]newUserIDs));
            [CtReturnImpl]return;
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtBinaryOperatorImpl][CtVariableReadImpl]deletedUserIDs == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]deletedUserIDs = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]newUserIDs == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]newUserIDs = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        }
        [CtTryImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPreUpdateUserListOfRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUserIDs, [CtVariableReadImpl]newUserIDs, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateRoleListOfUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_UPDATE_USERS_OF_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_UPDATE_USERS_OF_ROLE.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUserIDs, [CtVariableReadImpl]newUserIDs);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleUpdateRoleListOfUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_UPDATE_USERS_OF_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_PRE_UPDATE_USERS_OF_ROLE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUserIDs, [CtVariableReadImpl]newUserIDs);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtIfImpl][CtCommentImpl]// #################### </Listeners> #####################################################
        if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]deletedUserIDs.length > [CtLiteralImpl]0) || [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]newUserIDs.length > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl]isReadOnly()) && [CtFieldReadImpl]writeGroupsEnabled) [CtBlockImpl]{
                [CtTryImpl]try [CtBlockImpl]{
                    [CtInvocationImpl]doUpdateUserListOfRoleWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]deletedUserIDs), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]newUserIDs));
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleUpdateRoleListOfUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_UPDATE_USERS_OF_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_UPDATE_USERS_OF_ROLE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUserIDs, [CtVariableReadImpl]newUserIDs);
                    [CtThrowImpl]throw [CtVariableReadImpl]ex;
                }
            } else [CtBlockImpl]{
                [CtInvocationImpl]handleUpdateRoleListOfUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUserIDs, [CtVariableReadImpl]newUserIDs);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
            }
        }
        [CtInvocationImpl][CtCommentImpl]// need to clear user roles cache upon roles update
        clearUserRolesCacheByTenant([CtFieldReadImpl][CtThisAccessImpl]this.tenantId);
        [CtInvocationImpl][CtCommentImpl]// Call relevant listeners after updating user list of role.
        handleDoPostUpdateUserListOfRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]deletedUserIDs, [CtVariableReadImpl]newUserIDs, [CtLiteralImpl]false);
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public final [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User addUserWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] roleList, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl][CtCommentImpl]// We have to make sure this call is going through the Java Security Manager.
        if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class[] argTypes = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.Object.class, [CtFieldReadImpl]java.lang.String[].class, [CtFieldReadImpl]java.util.Map.class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"addUserWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User) (object));
        }
        [CtIfImpl][CtCommentImpl]// If we don't have a username, we cannot proceed.
        if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]userName)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_USERNAME_CANNOT_BE_EMPTY.getMessage();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_USERNAME_CANNOT_BE_EMPTY.getCode();
            [CtInvocationImpl]handleAddUserFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]message, [CtLiteralImpl]null, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]message);
        }
        [CtIfImpl][CtCommentImpl]// If the username claims presents, the value should be equal to the username attribute.
        if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]claims != [CtLiteralImpl]null) && [CtInvocationImpl][CtVariableReadImpl]claims.containsKey([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.USERNAME_CLAIM_URI)) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]claims.get([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.USERNAME_CLAIM_URI).equals([CtVariableReadImpl]userName))) [CtBlockImpl]{
            [CtThrowImpl][CtCommentImpl]// If not we cannot continue.
            throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Username and the username claim value should be same.");
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]userName);
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).addUserWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
        }
        [CtLocalVariableImpl][CtCommentImpl]// Convert the credential (Password) to a Secret.
        [CtTypeReferenceImpl]org.wso2.carbon.utils.Secret credentialObj;
        [CtTryImpl]try [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]credentialObj = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.Secret.getSecret([CtVariableReadImpl]credential);
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.UnsupportedSecretTypeException e) [CtBlockImpl]{
            [CtInvocationImpl]handleAddUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.toString(), [CtVariableReadImpl]e);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user;
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isSystemStore()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.addSystemUser([CtVariableReadImpl]userName, [CtVariableReadImpl]credentialObj, [CtVariableReadImpl]roleList);
                [CtReturnImpl]return [CtLiteralImpl]null;
            }
            [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
            if ([CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
                [CtInvocationImpl]handleAddUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
            }
            [CtIfImpl][CtCommentImpl]// This happens only once during first startup - adding administrator user/role.
            if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]userName.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR) > [CtLiteralImpl]0) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userName = [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName();
                [CtAssignmentImpl][CtVariableWriteImpl]roleList = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]roleList);
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]roleList == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]roleList = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claims == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]claims = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
            }
            [CtTryImpl][CtCommentImpl]// #################### <Pre-Listeners> #####################################################
            try [CtBlockImpl]{
                [CtForEachImpl][CtCommentImpl]// First call user store manager listeners.
                for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserStoreManagerListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserStoreManagerListeners()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object credentialArgument;
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credentialObj;
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credential;
                    }
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManagerListener) (listener)).addUserWithID([CtVariableReadImpl]userName, [CtVariableReadImpl]credentialArgument, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtInvocationImpl]handleAddUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                        [CtReturnImpl]return [CtLiteralImpl]null;
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleAddUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
            [CtForEachImpl][CtCommentImpl]// Then call the user operation listeners.
            for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl][CtCommentImpl]// This is to call all new listeners. All listeners should support the Secret object as the credential
                [CtCommentImpl]// for security reasons.
                if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                    [CtTryImpl]try [CtBlockImpl]{
                        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPreAddUserWithID([CtVariableReadImpl]userName, [CtVariableReadImpl]credentialObj, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                            [CtInvocationImpl]handleAddUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                            [CtReturnImpl]return [CtLiteralImpl]null;
                        }
                    }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage());
                        [CtInvocationImpl]handleAddUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getCode(), [CtVariableReadImpl]message, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                        [CtThrowImpl]throw [CtVariableReadImpl]ex;
                    }
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtCommentImpl]// This is to support the legacy listeners which does not know how to handle the Secret object as
                    [CtCommentImpl]// the credentials.
                    [CtCommentImpl]// String buffers are used to let listeners to modify passwords
                    [CtTypeReferenceImpl]java.lang.StringBuffer credBuff = [CtLiteralImpl]null;
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]credential == [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtAssignmentImpl][CtCommentImpl]// A default password will be set if the credential is null.
                        [CtVariableWriteImpl]credBuff = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.StringBuffer();
                    } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]credential instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]java.lang.String) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credBuff = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.StringBuffer([CtVariableReadImpl](([CtTypeReferenceImpl]java.lang.String) (credential)));
                    }
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]credBuff != [CtLiteralImpl]null) [CtBlockImpl]{
                        [CtTryImpl]try [CtBlockImpl]{
                            [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPreAddUserWithID([CtVariableReadImpl]userName, [CtVariableReadImpl]credBuff, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                                [CtInvocationImpl]handleAddUserFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                                [CtReturnImpl]return [CtLiteralImpl]null;
                            }
                        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
                            [CtInvocationImpl]handleAddUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                            [CtThrowImpl]throw [CtVariableReadImpl]e;
                        }
                        [CtAssignmentImpl][CtCommentImpl]// Reading the modified value.
                        [CtVariableWriteImpl]credential = [CtInvocationImpl][CtVariableReadImpl]credBuff.toString();
                        [CtInvocationImpl][CtVariableReadImpl]credentialObj.clear();
                        [CtTryImpl]try [CtBlockImpl]{
                            [CtAssignmentImpl][CtCommentImpl]// Create the Secret from the modified credential.
                            [CtVariableWriteImpl]credentialObj = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.utils.Secret.getSecret([CtVariableReadImpl]credential);
                        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.utils.UnsupportedSecretTypeException e) [CtBlockImpl]{
                            [CtInvocationImpl]handleAddUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.getMessage(), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNSUPPORTED_CREDENTIAL_TYPE.toString(), [CtVariableReadImpl]e);
                        }
                    }
                }
            }
            [CtIfImpl][CtCommentImpl]// #################### </Pre-Listeners> #####################################################
            [CtCommentImpl]// Validate the username against provided regular expressions.
            if ([CtUnaryOperatorImpl]![CtInvocationImpl]checkUserNameValid([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName())) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String regEx = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_USER_NAME_JAVA_REG_EX);
                [CtIfImpl][CtCommentImpl]// Inorder to support both UsernameJavaRegEx and UserNameJavaRegEx.
                if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]regEx) || [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtInvocationImpl][CtVariableReadImpl]regEx.trim())) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]regEx = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_USER_NAME_JAVA_REG);
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_USER_NAME.getMessage(), [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]regEx);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_USER_NAME.getCode();
                [CtInvocationImpl]handleAddUserFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]message, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]message);
            }
            [CtIfImpl][CtCommentImpl]// Validate the password against provided regular expressions.
            if ([CtUnaryOperatorImpl]![CtInvocationImpl]checkUserPasswordValid([CtVariableReadImpl]credentialObj)) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String regEx = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_JAVA_REG_EX);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_PASSWORD.getMessage(), [CtVariableReadImpl]regEx);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_PASSWORD.getCode();
                [CtInvocationImpl]handleAddUserFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]message, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]message);
            }
            [CtLocalVariableImpl][CtCommentImpl]// Property to check whether this user store supports new APIs with unique user id.
            [CtTypeReferenceImpl]boolean isUniqueUserIdEnabled = [CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore);
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean isExistingUser;
            [CtIfImpl]if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]isExistingUser = [CtBinaryOperatorImpl][CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName) != [CtLiteralImpl]null;
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]isExistingUser = [CtInvocationImpl]doCheckExistingUser([CtVariableReadImpl]userName);
            }
            [CtIfImpl][CtCommentImpl]// Check if the user already exists in the user store.
            if ([CtVariableReadImpl]isExistingUser) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_USER_ALREADY_EXISTS.getMessage(), [CtVariableReadImpl]userName);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_USER_ALREADY_EXISTS.getCode();
                [CtInvocationImpl]handleAddUserFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]message, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]message);
            }
            [CtLocalVariableImpl][CtCommentImpl]// Filter roles into internal roles and external roles.
            [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> internalRoles = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> externalRoles = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
            [CtInvocationImpl]filterRoles([CtVariableReadImpl]roleList, [CtVariableReadImpl]internalRoles, [CtVariableReadImpl]externalRoles);
            [CtForEachImpl][CtCommentImpl]// Check existence of roles and claims before adding user.
            for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String internalRole : [CtVariableReadImpl]internalRoles) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.isExistingRole([CtVariableReadImpl]internalRole)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INTERNAL_ROLE_NOT_EXISTS.getMessage(), [CtVariableReadImpl]internalRole);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INTERNAL_ROLE_NOT_EXISTS.getCode();
                    [CtInvocationImpl]handleAddUserFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]message, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]message);
                }
            }
            [CtForEachImpl][CtCommentImpl]// Check whether external roles are existing in the user store.
            for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String externalRole : [CtVariableReadImpl]externalRoles) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]doCheckExistingRole([CtVariableReadImpl]externalRole)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String message = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_EXTERNAL_ROLE_NOT_EXISTS.getMessage(), [CtVariableReadImpl]externalRole);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_EXTERNAL_ROLE_NOT_EXISTS.getCode();
                    [CtInvocationImpl]handleAddUserFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]message, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]message);
                }
            }
            [CtForEachImpl][CtCommentImpl]// Check whether the claims are existing.
            for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> entry : [CtInvocationImpl][CtVariableReadImpl]claims.entrySet()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.ClaimMapping claimMapping;
                [CtTryImpl]try [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]claimMapping = [CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.ClaimMapping) ([CtFieldReadImpl]claimManager.getClaimMapping([CtInvocationImpl][CtVariableReadImpl]entry.getKey())));
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNABLE_TO_FETCH_CLAIM_MAPPING.getMessage(), [CtLiteralImpl]"persisting user attributes.");
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_UNABLE_TO_FETCH_CLAIM_MAPPING.getCode();
                    [CtInvocationImpl]handleAddUserFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]e);
                }
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claimMapping == [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_URI.getMessage(), [CtInvocationImpl][CtVariableReadImpl]entry.getKey());
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_URI.getCode();
                    [CtInvocationImpl]handleAddUserFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                    [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
                }
            }
            [CtTryImpl][CtCommentImpl]// Call the do add user method of the underlying user store to add the user.
            try [CtBlockImpl]{
                [CtIfImpl][CtCommentImpl]// If unique user id property is enabled, then we can call the new methods in the user store.
                if ([CtVariableReadImpl]isUniqueUserIdEnabled) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]user = [CtInvocationImpl]doAddUserWithID([CtVariableReadImpl]userName, [CtVariableReadImpl]credentialObj, [CtInvocationImpl][CtVariableReadImpl]externalRoles.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]), [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtLiteralImpl]false);
                } else [CtBlockImpl]{
                    [CtInvocationImpl][CtCommentImpl]// If the underlying user store does not support the unique ID generation, then we have to generate
                    [CtCommentImpl]// the ID and keep the mapping in our side.
                    doAddUser([CtVariableReadImpl]userName, [CtVariableReadImpl]credentialObj, [CtInvocationImpl][CtVariableReadImpl]externalRoles.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]), [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtLiteralImpl]false);
                    [CtAssignmentImpl][CtVariableWriteImpl]user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.addUser([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtVariableReadImpl]profileName, [CtThisAccessImpl]this);
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleAddUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_ADDING_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_ADDING_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]internalRoles.size() > [CtLiteralImpl]0) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.updateHybridRoleListOfUser([CtVariableReadImpl]userName, [CtLiteralImpl]null, [CtInvocationImpl][CtVariableReadImpl]internalRoles.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]));
            }
            [CtTryImpl][CtCommentImpl]// #################### <Post-Listeners> #####################################################
            try [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object credentialArgument;
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.SecretHandleableListener) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credentialObj;
                    } else [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]credentialArgument = [CtVariableReadImpl]credential;
                    }
                    [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPostAddUserWithID([CtVariableReadImpl]user, [CtVariableReadImpl]credentialArgument, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                        [CtInvocationImpl]handleAddUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_ADD_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_ADD_USER.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                        [CtReturnImpl]return [CtLiteralImpl]null;
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleAddUserFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_ADD_USER.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_ADD_USER.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]userName, [CtVariableReadImpl]credential, [CtVariableReadImpl]roleList, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
            [CtCommentImpl]// #################### </Post-Listeners> #####################################################
        } finally [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]credentialObj.clear();
        }
        [CtInvocationImpl][CtCommentImpl]// Clean the role cache since it contains old role information.
        clearUserRolesCache([CtVariableReadImpl]userName);
        [CtReturnImpl]return [CtVariableReadImpl]user;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]void addRoleWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userIDList, [CtParameterImpl][CtArrayTypeReferenceImpl]org.wso2.carbon.user.core.Permission[] permissions, [CtParameterImpl][CtTypeReferenceImpl]boolean isSharedRole) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]roleName)) [CtBlockImpl]{
            [CtInvocationImpl]handleAddRoleFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_ADD_EMPTY_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_ADD_EMPTY_ROLE.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]userIDList, [CtVariableReadImpl]permissions);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_CANNOT_ADD_EMPTY_ROLE.toString());
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userIDList == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userIDList = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStore([CtVariableReadImpl]roleName);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isSharedRole && [CtUnaryOperatorImpl](![CtInvocationImpl]isSharedGroupEnabled())) [CtBlockImpl]{
            [CtInvocationImpl]handleAddRoleFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_SHARED_ROLE_NOT_SUPPORTED.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_SHARED_ROLE_NOT_SUPPORTED.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]userIDList, [CtVariableReadImpl]permissions);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_SHARED_ROLE_NOT_SUPPORTED.toString());
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUsers([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]userIDList), [CtThisAccessImpl]this).stream().map([CtExecutableReferenceExpressionImpl][CtFieldReadImpl]User::getDomainQualifiedUsername).toArray([CtExecutableReferenceExpressionImpl][CtTypeAccessImpl][CtArrayTypeReferenceImpl]java.lang.String[]::new);
        }
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isHybridRole()) [CtBlockImpl]{
            [CtIfImpl][CtCommentImpl]// Invoke Pre listeners for hybrid roles.
            if ([CtUnaryOperatorImpl]![CtInvocationImpl]handlePreAddRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]userIDList, [CtVariableReadImpl]permissions, [CtLiteralImpl]false)) [CtBlockImpl]{
                [CtReturnImpl]return;
            }
            [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                [CtInvocationImpl]doAddInternalRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]userIDList, [CtVariableReadImpl]permissions);
            } else [CtBlockImpl]{
                [CtInvocationImpl]doAddInternalRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
            }
            [CtInvocationImpl][CtCommentImpl]// Calling only the audit logger, to maintain the back-ward compatibility
            handlePostAddRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]userIDList, [CtVariableReadImpl]permissions, [CtLiteralImpl]false);
            [CtReturnImpl]return;
        }
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive()) [CtBlockImpl]{
            [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.UniqueIDUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).addRoleWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName(), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]userIDList), [CtVariableReadImpl]permissions, [CtVariableReadImpl]isSharedRole);
            [CtReturnImpl]return;
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        if ([CtBinaryOperatorImpl][CtVariableReadImpl]userIDList == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userIDList = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0];
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]permissions == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]permissions = [CtNewArrayImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.Permission[[CtLiteralImpl]0];
        }
        [CtIfImpl][CtCommentImpl]// This happens only once during first startup - adding administrator user/role.
        if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]roleName.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR) > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]roleName = [CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeName();
            [CtAssignmentImpl][CtVariableWriteImpl]userIDList = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromNames([CtVariableReadImpl]userIDList);
        }
        [CtIfImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        if ([CtUnaryOperatorImpl]![CtInvocationImpl]handlePreAddRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]userIDList, [CtVariableReadImpl]permissions, [CtLiteralImpl]false)) [CtBlockImpl]{
            [CtReturnImpl]return;
        }
        [CtIfImpl][CtCommentImpl]// #################### </Listeners> #####################################################
        [CtCommentImpl]// Check for validations
        if ([CtInvocationImpl]isReadOnly()) [CtBlockImpl]{
            [CtInvocationImpl]handleAddRoleFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]userIDList, [CtVariableReadImpl]permissions);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());
        }
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl]isRoleNameValid([CtVariableReadImpl]roleName)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String regEx = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_ROLE_NAME_JAVA_REG_EX);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_ROLE_NAME.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]regEx);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_ROLE_NAME.getCode();
            [CtInvocationImpl]handleAddRoleFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtVariableReadImpl]roleName, [CtVariableReadImpl]userIDList, [CtVariableReadImpl]permissions);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]errorCode + [CtLiteralImpl]" - ") + [CtVariableReadImpl]errorMessage);
        }
        [CtIfImpl]if ([CtInvocationImpl]doCheckExistingRole([CtVariableReadImpl]roleName)) [CtBlockImpl]{
            [CtInvocationImpl]handleRoleAlreadyExistExceptionWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]userIDList, [CtVariableReadImpl]permissions);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roleWithDomain;
        [CtIfImpl]if ([CtFieldReadImpl]writeGroupsEnabled) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtIfImpl][CtCommentImpl]// add role in to actual user store
                if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> users = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUsers([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]userIDList), [CtThisAccessImpl]this);
                    [CtInvocationImpl]doAddRole([CtVariableReadImpl]roleName, [CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]users.stream().map([CtExecutableReferenceExpressionImpl][CtFieldReadImpl]User::getUsername).toArray([CtExecutableReferenceExpressionImpl][CtTypeAccessImpl][CtArrayTypeReferenceImpl]java.lang.String[]::new), [CtVariableReadImpl]isSharedRole);
                } else [CtBlockImpl]{
                    [CtInvocationImpl]doAddRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]userIDList, [CtVariableReadImpl]isSharedRole);
                }
                [CtAssignmentImpl][CtVariableWriteImpl]roleWithDomain = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]roleName, [CtInvocationImpl]getMyDomainName());
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleAddRoleFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_ADDING_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_ADDING_ROLE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]roleName, [CtVariableReadImpl]userIDList, [CtVariableReadImpl]permissions);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
        } else [CtBlockImpl]{
            [CtInvocationImpl]handleAddRoleFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_WRITE_GROUPS_NOT_ENABLED.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_WRITE_GROUPS_NOT_ENABLED.getMessage(), [CtVariableReadImpl]roleName, [CtVariableReadImpl]userIDList, [CtVariableReadImpl]permissions);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_WRITE_GROUPS_NOT_ENABLED.toString());
        }
        [CtForEachImpl][CtCommentImpl]// add permission in to the the permission store
        for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.Permission permission : [CtVariableReadImpl]permissions) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String resourceId = [CtInvocationImpl][CtVariableReadImpl]permission.getResourceId();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String action = [CtInvocationImpl][CtVariableReadImpl]permission.getAction();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]resourceId == [CtLiteralImpl]null) || [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]resourceId.trim().length() == [CtLiteralImpl]0)) [CtBlockImpl]{
                [CtContinueImpl]continue;
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]action == [CtLiteralImpl]null) || [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]action.trim().length() == [CtLiteralImpl]0)) [CtBlockImpl]{
                [CtAssignmentImpl][CtCommentImpl]// default action value
                [CtVariableWriteImpl]action = [CtLiteralImpl]"read";
            }
            [CtInvocationImpl][CtCommentImpl]// This is a special case. We need to pass domain aware name.
            [CtInvocationImpl][CtFieldReadImpl]userRealm.getAuthorizationManager().authorizeRole([CtVariableReadImpl]roleWithDomain, [CtVariableReadImpl]resourceId, [CtVariableReadImpl]action);
        }
        [CtIfImpl][CtCommentImpl]// if existing users are added to role, need to update user role cache
        if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]userIDList != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]userIDList.length > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtInvocationImpl]clearUserRolesCacheByTenant([CtFieldReadImpl]tenantId);
        }
        [CtInvocationImpl][CtCommentImpl]// #################### <Listeners> #####################################################
        handlePostAddRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]userIDList, [CtVariableReadImpl]permissions, [CtLiteralImpl]false);
        [CtCommentImpl]// #################### </Listeners> #####################################################
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * This method is responsible for calling relevant postAddRole listener methods after successfully adding role.
     *
     * @param roleName
     * 		Name of the role.
     * @param userList
     * 		List of users.
     * @param permissions
     * 		Permissions that are assigned to the role.
     * @param isAuditLogOnly
     * 		To indicate whether to only call the relevant audit logger.
     * @throws UserStoreException
     * 		Exception that will be thrown by relevant listeners.
     */
    private [CtTypeReferenceImpl]void handlePostAddRoleWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList, [CtParameterImpl][CtArrayTypeReferenceImpl]org.wso2.carbon.user.core.Permission[] permissions, [CtParameterImpl][CtTypeReferenceImpl]boolean isAuditLogOnly) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean internalRole = [CtInvocationImpl]isAnInternalRole([CtVariableReadImpl]roleName);
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isAuditLogOnly && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]listener.getClass().getName().endsWith([CtTypeAccessImpl]UserCoreErrorConstants.AUDIT_LOGGER_CLASS_NAME))) [CtBlockImpl]{
                    [CtContinueImpl]continue;
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]boolean success = [CtLiteralImpl]false;
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]internalRole && [CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPostAddInternalRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions, [CtThisAccessImpl]this);
                } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]internalRole && [CtUnaryOperatorImpl](![CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener))) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtLiteralImpl]true;
                } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]internalRole) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UniqueIDUserOperationEventListener) (listener)).doPostAddRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions, [CtThisAccessImpl]this);
                }
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]success) [CtBlockImpl]{
                    [CtInvocationImpl]handleAddRoleFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_ADD_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_ADD_ROLE.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleAddRoleFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_ADD_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_ADD_ROLE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Handle pre add role tasks.
     */
    private [CtTypeReferenceImpl]boolean handlePreAddRoleWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userList, [CtParameterImpl][CtArrayTypeReferenceImpl]org.wso2.carbon.user.core.Permission[] permissions, [CtParameterImpl][CtTypeReferenceImpl]boolean isAuditLogOnly) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]boolean internalRole = [CtInvocationImpl]isAnInternalRole([CtVariableReadImpl]roleName);
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]isAuditLogOnly && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]listener.getClass().getName().endsWith([CtTypeAccessImpl]UserCoreErrorConstants.AUDIT_LOGGER_CLASS_NAME))) [CtBlockImpl]{
                    [CtContinueImpl]continue;
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]boolean success = [CtLiteralImpl]false;
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]internalRole && [CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPreAddInternalRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions, [CtThisAccessImpl]this);
                } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]internalRole && [CtUnaryOperatorImpl](![CtBinaryOperatorImpl]([CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener))) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtLiteralImpl]true;
                } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]internalRole) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]success = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UniqueIDUserOperationEventListener) (listener)).doPreAddRoleWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions, [CtThisAccessImpl]this);
                }
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtVariableReadImpl]success) [CtBlockImpl]{
                    [CtInvocationImpl]handleAddRoleFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_ROLE.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
                    [CtReturnImpl]return [CtLiteralImpl]false;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleAddRoleFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_ROLE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_ADD_ROLE.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]roleName, [CtVariableReadImpl]userList, [CtVariableReadImpl]permissions);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtReturnImpl]return [CtLiteralImpl]true;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Add the internal roles for the users.
     *
     * @param roleName
     * 		role name.
     * @param userIDList
     * 		user List.
     * @param permissions
     * 		permissions.
     * @throws UserStoreException
     * 		An unexpected exception has occurred.
     */
    protected [CtTypeReferenceImpl]void doAddInternalRoleWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] userIDList, [CtParameterImpl]org.wso2.carbon.user.core.common.api[] permissions) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        [CtArrayTypeReferenceImpl]java.lang.String[] users = [CtInvocationImpl][CtInvocationImpl]getUserNamesFromUserIDs([CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtVariableReadImpl]userIDList)).toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]roleName.contains([CtTypeAccessImpl]UserCoreConstants.DOMAIN_SEPARATOR) && [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]roleName.toLowerCase().startsWith([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.APPLICATION_DOMAIN.toLowerCase())) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.isExistingRole([CtVariableReadImpl]roleName)) [CtBlockImpl]{
                [CtInvocationImpl]handleRoleAlreadyExistExceptionWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]userIDList, [CtVariableReadImpl]permissions);
            }
            [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.addHybridRole([CtVariableReadImpl]roleName, [CtVariableReadImpl]users);
        } else [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.isExistingRole([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]roleName))) [CtBlockImpl]{
                [CtInvocationImpl]handleRoleAlreadyExistExceptionWithID([CtVariableReadImpl]roleName, [CtVariableReadImpl]userIDList, [CtVariableReadImpl]permissions);
            }
            [CtInvocationImpl][CtFieldReadImpl]hybridRoleManager.addHybridRole([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]roleName), [CtVariableReadImpl]users);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]permissions != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.Permission permission : [CtVariableReadImpl]permissions) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String resourceId = [CtInvocationImpl][CtVariableReadImpl]permission.getResourceId();
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String action = [CtInvocationImpl][CtVariableReadImpl]permission.getAction();
                [CtInvocationImpl][CtCommentImpl]// This is a special case. We need to pass domain aware name.
                [CtInvocationImpl][CtFieldReadImpl]userRealm.getAuthorizationManager().authorizeRole([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addInternalDomainName([CtVariableReadImpl]roleName), [CtVariableReadImpl]resourceId, [CtVariableReadImpl]action);
            }
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]userIDList != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]userIDList.length > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtInvocationImpl]clearUserRolesCacheByTenant([CtFieldReadImpl][CtThisAccessImpl]this.tenantId);
        }
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Categorize roles to the internal and external.
     */
    private [CtTypeReferenceImpl]void filterRoles([CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] roleList, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> internalRoles, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> externalRoles) [CtBlockImpl]{
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]roleList == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtReturnImpl]return;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]int index;
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String role : [CtVariableReadImpl]roleList) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]role.trim().length() == [CtLiteralImpl]0) [CtBlockImpl]{
                [CtContinueImpl]continue;
            }
            [CtAssignmentImpl][CtVariableWriteImpl]index = [CtInvocationImpl][CtVariableReadImpl]role.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index > [CtLiteralImpl]0) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domain = [CtInvocationImpl][CtVariableReadImpl]role.substring([CtLiteralImpl]0, [CtVariableReadImpl]index);
                [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.INTERNAL_DOMAIN.equalsIgnoreCase([CtVariableReadImpl]domain)) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]internalRoles.add([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]role));
                    [CtContinueImpl]continue;
                } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.APPLICATION_DOMAIN.equalsIgnoreCase([CtVariableReadImpl]domain) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.WORKFLOW_DOMAIN.equalsIgnoreCase([CtVariableReadImpl]domain)) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]internalRoles.add([CtVariableReadImpl]role);
                    [CtContinueImpl]continue;
                }
            }
            [CtInvocationImpl][CtVariableReadImpl]externalRoles.add([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]role));
        }
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]boolean isUserInRoleWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String roleName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class[] argTypes = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"isUserInRoleWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userID, [CtVariableReadImpl]roleName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.lang.Boolean) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UserStore userStore = [CtInvocationImpl]getUserStoreWithID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]userStore.isRecurssive() && [CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]userStore.getUserStoreManager() instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager)) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtInvocationImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) ([CtVariableReadImpl]userStore.getUserStoreManager())).isUserInRoleWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId(), [CtVariableReadImpl]roleName);
        }
        [CtIfImpl][CtCommentImpl]// #################### Domain Name Free Zone Starts Here ################################
        [CtCommentImpl]// If unique id feature is not enabled, we have to call the legacy methods.
        if ([CtUnaryOperatorImpl]![CtInvocationImpl]isUniqueUserIdEnabledInUserStore([CtVariableReadImpl]userStore)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUser([CtVariableReadImpl]userID, [CtThisAccessImpl]this);
            [CtIfImpl][CtCommentImpl]// If we don't have a record for this user, let's try to call directly using the user id.
            if ([CtBinaryOperatorImpl][CtVariableReadImpl]user == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtReturnImpl]return [CtLiteralImpl]false;
            }
            [CtReturnImpl]return [CtInvocationImpl]isUserInRole([CtInvocationImpl][CtVariableReadImpl]user.getDomainQualifiedUsername(), [CtVariableReadImpl]roleName);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtVariableReadImpl]roleName == [CtLiteralImpl]null) || [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]roleName.trim().length() == [CtLiteralImpl]0)) || [CtBinaryOperatorImpl]([CtVariableReadImpl]userID == [CtLiteralImpl]null)) || [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userID.trim().length() == [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]false;
        }
        [CtIfImpl][CtCommentImpl]// anonymous user is always assigned to  anonymous role
        if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]CarbonConstants.REGISTRY_ANONNYMOUS_ROLE_NAME.equalsIgnoreCase([CtVariableReadImpl]roleName) && [CtInvocationImpl][CtTypeAccessImpl]CarbonConstants.REGISTRY_ANONNYMOUS_USERNAME.equalsIgnoreCase([CtVariableReadImpl]userID)) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]true;
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtUnaryOperatorImpl](![CtInvocationImpl][CtTypeAccessImpl]CarbonConstants.REGISTRY_ANONNYMOUS_USERNAME.equalsIgnoreCase([CtVariableReadImpl]userID)) && [CtInvocationImpl][CtInvocationImpl][CtFieldReadImpl]realmConfig.getEveryOneRoleName().equalsIgnoreCase([CtVariableReadImpl]roleName)) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.isExistingSystemUser([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]userID)))) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]true;
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] roles;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String username = [CtInvocationImpl]getUserNameFromUserID([CtVariableReadImpl]userID);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]username == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]roles = [CtInvocationImpl]getRoleListOfUserFromCache([CtFieldReadImpl]tenantId, [CtVariableReadImpl]userID);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]roles != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]roles.length > [CtLiteralImpl]0)) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isContain([CtVariableReadImpl]roleName, [CtVariableReadImpl]roles)) [CtBlockImpl]{
                    [CtReturnImpl]return [CtLiteralImpl]true;
                }
            }
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String modifiedUserName = [CtBinaryOperatorImpl][CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.IS_USER_IN_ROLE_CACHE_IDENTIFIER + [CtVariableReadImpl]username;
        [CtAssignmentImpl][CtVariableWriteImpl]roles = [CtInvocationImpl]getRoleListOfUserFromCache([CtFieldReadImpl]tenantId, [CtVariableReadImpl]modifiedUserName);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]roles != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtFieldReadImpl][CtVariableReadImpl]roles.length > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.isContain([CtVariableReadImpl]roleName, [CtVariableReadImpl]roles)) [CtBlockImpl]{
                [CtReturnImpl]return [CtLiteralImpl]true;
            }
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtTypeAccessImpl]UserCoreConstants.INTERNAL_DOMAIN.equalsIgnoreCase([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.extractDomainFromName([CtVariableReadImpl]roleName)) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.APPLICATION_DOMAIN.equalsIgnoreCase([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.extractDomainFromName([CtVariableReadImpl]roleName))) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.WORKFLOW_DOMAIN.equalsIgnoreCase([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.extractDomainFromName([CtVariableReadImpl]roleName))) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> internalRoles = [CtInvocationImpl]doGetInternalRoleListOfUserWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]roleName);
            [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]internalRoles.contains([CtVariableReadImpl]roleName)) [CtBlockImpl]{
                [CtInvocationImpl]addToIsUserHasRole([CtVariableReadImpl]modifiedUserName, [CtVariableReadImpl]roleName, [CtVariableReadImpl]roles);
                [CtReturnImpl]return [CtLiteralImpl]true;
            }
        }
        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]userStore.isSystemStore()) [CtBlockImpl]{
            [CtReturnImpl]return [CtInvocationImpl][CtFieldReadImpl]systemUserRoleManager.isUserInRole([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId(), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]roleName));
        }
        [CtIfImpl][CtCommentImpl]// admin user is always assigned to admin role if it is in primary user store
        if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtFieldReadImpl]realmConfig.isPrimary() && [CtInvocationImpl][CtVariableReadImpl]roleName.equalsIgnoreCase([CtInvocationImpl][CtFieldReadImpl]realmConfig.getAdminRoleName())) && [CtInvocationImpl][CtVariableReadImpl]userID.equalsIgnoreCase([CtInvocationImpl][CtFieldReadImpl]realmConfig.getAdminUserName())) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]true;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roleDomainName = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.extractDomainFromName([CtVariableReadImpl]roleName);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String roleDomainNameForForest = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_GROUP_SEARCH_DOMAINS);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]roleDomainNameForForest != [CtLiteralImpl]null) && [CtBinaryOperatorImpl]([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]roleDomainNameForForest.trim().length() > [CtLiteralImpl]0)) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] values = [CtInvocationImpl][CtVariableReadImpl]roleDomainNameForForest.split([CtLiteralImpl]"#");
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String value : [CtVariableReadImpl]values) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]value != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]value.trim().equalsIgnoreCase([CtVariableReadImpl]roleDomainName))) [CtBlockImpl]{
                    [CtReturnImpl]return [CtLiteralImpl]false;
                }
            }
        } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStore.getDomainName().equalsIgnoreCase([CtVariableReadImpl]roleDomainName)) [CtBlockImpl]{
            [CtReturnImpl]return [CtLiteralImpl]false;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]boolean success = [CtLiteralImpl]false;
        [CtIfImpl]if ([CtFieldReadImpl]readGroupsEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]success = [CtInvocationImpl]doCheckIsUserInRoleWithID([CtInvocationImpl][CtVariableReadImpl]userStore.getDomainFreeUserId(), [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]roleName));
        }
        [CtIfImpl][CtCommentImpl]// add to cache
        if ([CtVariableReadImpl]success) [CtBlockImpl]{
            [CtInvocationImpl]addToIsUserHasRole([CtVariableReadImpl]modifiedUserName, [CtVariableReadImpl]roleName, [CtVariableReadImpl]roles);
        }
        [CtReturnImpl]return [CtVariableReadImpl]success;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> listUsersWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String filter, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class[] argTypes = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]int.class, [CtFieldReadImpl]int.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"listUsersWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User>) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]int index = [CtInvocationImpl][CtVariableReadImpl]filter.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UniqueIDPaginatedSearchResult userList;
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> users;
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]offset <= [CtLiteralImpl]0) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]offset = [CtLiteralImpl]1;
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domain = [CtInvocationImpl][CtVariableReadImpl]filter.substring([CtLiteralImpl]0, [CtVariableReadImpl]index);
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secManager = [CtInvocationImpl]getSecondaryUserStoreManager([CtVariableReadImpl]domain);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secManager != [CtLiteralImpl]null) [CtBlockImpl]{
                [CtAssignmentImpl][CtCommentImpl]// Secondary UserStoreManager registered for this domain.
                [CtVariableWriteImpl]filter = [CtInvocationImpl][CtVariableReadImpl]filter.substring([CtBinaryOperatorImpl][CtVariableReadImpl]index + [CtLiteralImpl]1);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                    [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secManager)).isUniqueUserIdEnabled()) [CtBlockImpl]{
                        [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secManager)).doListUsersWithID([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset);
                        [CtInvocationImpl]handlePostListPaginatedUsersWithID([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtInvocationImpl][CtVariableReadImpl]userList.getUsers(), [CtLiteralImpl]true);
                    } else [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.PaginatedSearchResult paginatedSearchResult = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secManager)).doListUsers([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset);
                        [CtInvocationImpl]handlePostListPaginatedUsers([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl][CtVariableReadImpl]paginatedSearchResult.getUsers()), [CtLiteralImpl]true);
                        [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.listUsers([CtVariableReadImpl]paginatedSearchResult, [CtThisAccessImpl]this);
                    }
                    [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]userList.getUsers();
                }
            }
        } else [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index == [CtLiteralImpl]0) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl]doListUsersWithID([CtInvocationImpl][CtVariableReadImpl]filter.substring([CtLiteralImpl]1), [CtVariableReadImpl]limit, [CtVariableReadImpl]offset);
                [CtInvocationImpl]handlePostListPaginatedUsersWithID([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtInvocationImpl][CtVariableReadImpl]userList.getUsers(), [CtLiteralImpl]true);
            } else [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.PaginatedSearchResult paginatedSearchResult = [CtInvocationImpl]doListUsers([CtInvocationImpl][CtVariableReadImpl]filter.substring([CtLiteralImpl]1), [CtVariableReadImpl]limit, [CtVariableReadImpl]offset);
                [CtInvocationImpl]handlePostListPaginatedUsers([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl][CtVariableReadImpl]paginatedSearchResult.getUsers()), [CtLiteralImpl]true);
                [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.listUsers([CtVariableReadImpl]paginatedSearchResult, [CtThisAccessImpl]this);
            }
            [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]userList.getUsers();
        }
        [CtTryImpl]try [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl]doListUsersWithID([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset);
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]userList = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.listUsers([CtInvocationImpl]doListUsers([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset), [CtThisAccessImpl]this);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]users = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>([CtInvocationImpl][CtVariableReadImpl]userList.getUsers());
            [CtAssignmentImpl][CtVariableWriteImpl]limit = [CtBinaryOperatorImpl][CtVariableReadImpl]limit - [CtInvocationImpl][CtVariableReadImpl]users.size();
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
            [CtInvocationImpl]handleGetPaginatedUserListFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_LISTING_PAGINATED_USERS.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_LISTING_PAGINATED_USERS.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtLiteralImpl]null, [CtLiteralImpl]null, [CtLiteralImpl]null);
            [CtThrowImpl]throw [CtVariableReadImpl]ex;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String primaryDomain = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME);
        [CtLocalVariableImpl][CtTypeReferenceImpl]int nonPaginatedUserCount = [CtInvocationImpl][CtVariableReadImpl]userList.getSkippedUserCount();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtThisAccessImpl]this.getSecondaryUserStoreManager() != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager> entry : [CtInvocationImpl][CtFieldReadImpl]userStoreManagerHolder.entrySet()) [CtBlockImpl]{
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]limit <= [CtLiteralImpl]0) [CtBlockImpl]{
                    [CtReturnImpl]return [CtVariableReadImpl]users;
                }
                [CtIfImpl]if ([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]entry.getKey().equalsIgnoreCase([CtVariableReadImpl]primaryDomain)) [CtBlockImpl]{
                    [CtContinueImpl]continue;
                }
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager storeManager = [CtInvocationImpl][CtVariableReadImpl]entry.getValue();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]storeManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                    [CtTryImpl]try [CtBlockImpl]{
                        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userList.getUsers().size() > [CtLiteralImpl]0) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]offset = [CtLiteralImpl]1;
                        } else [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]offset = [CtBinaryOperatorImpl][CtVariableReadImpl]offset - [CtVariableReadImpl]nonPaginatedUserCount;
                        }
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UniqueIDPaginatedSearchResult secondUserList;
                        [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (storeManager)).isUniqueUserIdEnabled()) [CtBlockImpl]{
                            [CtAssignmentImpl][CtVariableWriteImpl]secondUserList = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (storeManager)).doListUsersWithID([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset);
                            [CtAssignmentImpl][CtVariableWriteImpl]nonPaginatedUserCount = [CtInvocationImpl][CtVariableReadImpl]secondUserList.getSkippedUserCount();
                        } else [CtBlockImpl]{
                            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.PaginatedSearchResult paginatedSearchResult = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (storeManager)).doListUsers([CtInvocationImpl][CtVariableReadImpl]filter.substring([CtLiteralImpl]1), [CtVariableReadImpl]limit, [CtVariableReadImpl]offset);
                            [CtAssignmentImpl][CtVariableWriteImpl]secondUserList = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.listUsers([CtVariableReadImpl]paginatedSearchResult, [CtThisAccessImpl]this);
                        }
                        [CtInvocationImpl][CtVariableReadImpl]users.addAll([CtInvocationImpl][CtVariableReadImpl]secondUserList.getUsers());
                        [CtAssignmentImpl][CtVariableWriteImpl]limit = [CtBinaryOperatorImpl][CtVariableReadImpl]limit - [CtInvocationImpl][CtVariableReadImpl]users.size();
                    }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                        [CtInvocationImpl]handleGetPaginatedUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_LISTING_PAGINATED_USERS.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_LISTING_PAGINATED_USERS.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtLiteralImpl]null, [CtLiteralImpl]null, [CtLiteralImpl]null);
                        [CtInvocationImpl][CtCommentImpl]// We can ignore and proceed. Ignore the results from this user store.
                        [CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.error([CtVariableReadImpl]ex);
                    }
                }
            }
        }
        [CtInvocationImpl]handlePostListPaginatedUsersWithID([CtVariableReadImpl]filter, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]users, [CtLiteralImpl]true);
        [CtReturnImpl]return [CtVariableReadImpl]users;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> getUserListWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class argTypes[] = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]java.lang.String.class, [CtFieldReadImpl]int.class, [CtFieldReadImpl]int.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getUserListWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User>) (object));
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claim == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorCode = [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_URI.getCode();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String errorMessage = [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_URI.getMessage(), [CtLiteralImpl]"");
            [CtInvocationImpl]handleGetUserListFailureWithID([CtVariableReadImpl]errorCode, [CtVariableReadImpl]errorMessage, [CtLiteralImpl]null, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.IllegalArgumentException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_URI.toString());
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claimValue == [CtLiteralImpl]null) [CtBlockImpl]{
            [CtInvocationImpl]handleGetUserListFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_VALUE.getCode(), [CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_VALUE.getMessage(), [CtVariableReadImpl]claim, [CtLiteralImpl]null, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.lang.IllegalArgumentException([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_INVALID_CLAIM_VALUE.toString());
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Listing and paginate users who having value as " + [CtVariableReadImpl]claimValue) + [CtLiteralImpl]" for the claim ") + [CtVariableReadImpl]claim);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.USERNAME_CLAIM_URI.equalsIgnoreCase([CtVariableReadImpl]claim) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.SCIM_USERNAME_CLAIM_URI.equalsIgnoreCase([CtVariableReadImpl]claim)) || [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.SCIM2_USERNAME_CLAIM_URI.equalsIgnoreCase([CtVariableReadImpl]claim)) [CtBlockImpl]{
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtLiteralImpl]"Switching to paginate users using username");
            }
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> filteredUsers;
            [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]filteredUsers = [CtInvocationImpl]listUsersWithID([CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset);
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]filteredUsers = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.listUsers([CtInvocationImpl]listUsers([CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset), [CtThisAccessImpl]this);
            }
            [CtReturnImpl]return [CtVariableReadImpl]filteredUsers;
        }
        [CtLocalVariableImpl][CtCommentImpl]// Extracting the domain from claimValue.
        [CtTypeReferenceImpl]java.lang.String extractedDomain = [CtLiteralImpl]null;
        [CtLocalVariableImpl][CtTypeReferenceImpl]int index;
        [CtAssignmentImpl][CtVariableWriteImpl]index = [CtInvocationImpl][CtVariableReadImpl]claimValue.indexOf([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]index > [CtLiteralImpl]0) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String names[] = [CtInvocationImpl][CtVariableReadImpl]claimValue.split([CtTypeAccessImpl]CarbonConstants.DOMAIN_SEPARATOR);
            [CtAssignmentImpl][CtVariableWriteImpl]extractedDomain = [CtInvocationImpl][CtArrayReadImpl][CtVariableReadImpl]names[[CtLiteralImpl]0].trim();
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userManager = [CtThisAccessImpl]this;
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]extractedDomain)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]userManager = [CtInvocationImpl]getSecondaryUserStoreManager([CtVariableReadImpl]extractedDomain);
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Domain: " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" is passed with the claim and user store manager is loaded") + [CtLiteralImpl]" for the given domain name.");
            }
        }
        [CtAssignmentImpl][CtVariableWriteImpl]claimValue = [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]claimValue);
        [CtLocalVariableImpl]final [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> filteredUserList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]extractedDomain)) [CtBlockImpl]{
            [CtTryImpl]try [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPreGetUserListWithID([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]filteredUserList, [CtVariableReadImpl]userManager)) [CtBlockImpl]{
                            [CtInvocationImpl]handleGetUserListFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]profileName);
                            [CtBreakImpl]break;
                        }
                    }
                }
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                [CtInvocationImpl]handleGetUserListFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtVariableReadImpl]ex;
            }
        }
        [CtLocalVariableImpl][CtCommentImpl]// Iterate through user stores and check for users for this claim.
        [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> usersFromUserStore;
        [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled()) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]usersFromUserStore = [CtInvocationImpl]doGetUserListWithID([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]extractedDomain, [CtVariableReadImpl]userManager);
        } else [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]usersFromUserStore = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.listUsers([CtInvocationImpl]doGetUserList([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]extractedDomain, [CtVariableReadImpl]userManager), [CtThisAccessImpl]this);
        }
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Users from user store: " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" : ") + [CtVariableReadImpl]usersFromUserStore);
        }
        [CtInvocationImpl][CtVariableReadImpl]filteredUserList.addAll([CtVariableReadImpl]usersFromUserStore);
        [CtInvocationImpl]handlePostGetUserListWithID([CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]filteredUserList, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtLiteralImpl]false);
        [CtReturnImpl]return [CtVariableReadImpl]filteredUserList;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> getUserListWithID([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.Condition condition, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domain, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortBy, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtInvocationImpl]validateCondition([CtVariableReadImpl]condition);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]sortBy) && [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]sortOrder)) [CtBlockImpl]{
            [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtLiteralImpl]"Sorting is not supported.");
        }
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]domain)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]domain = [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.PRIMARY_DEFAULT_DOMAIN_NAME;
        }
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]profileName)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]profileName = [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.DEFAULT_PROFILE;
        }
        [CtInvocationImpl]handlePreGetUserListWithID([CtVariableReadImpl]condition, [CtVariableReadImpl]domain, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder);
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"Pre listener get conditional  user list for domain: " + [CtVariableReadImpl]domain);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> filteredUsers = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secManager = [CtInvocationImpl]getSecondaryUserStoreManager([CtVariableReadImpl]domain);
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secManager != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled([CtVariableReadImpl]secManager)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UniqueIDPaginatedSearchResult users = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secManager)).doGetUserListWithID([CtVariableReadImpl]condition, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder);
                    [CtAssignmentImpl][CtVariableWriteImpl]filteredUsers = [CtInvocationImpl][CtVariableReadImpl]users.getUsers();
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.PaginatedSearchResult users = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secManager)).doGetUserList([CtVariableReadImpl]condition, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder);
                    [CtAssignmentImpl][CtVariableWriteImpl]filteredUsers = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.listUsers([CtInvocationImpl][CtVariableReadImpl]users.getUsers(), [CtThisAccessImpl]this);
                }
            }
        }
        [CtInvocationImpl]handlePostGetUserListWithID([CtVariableReadImpl]condition, [CtVariableReadImpl]domain, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]sortBy, [CtVariableReadImpl]sortOrder, [CtVariableReadImpl]filteredUsers, [CtLiteralImpl]false);
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"post listener get conditional  user list for domain: " + [CtVariableReadImpl]domain);
        }
        [CtReturnImpl]return [CtVariableReadImpl]filteredUsers;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> doGetUserListWithID([CtParameterImpl][CtTypeReferenceImpl]java.lang.String claim, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String claimValue, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String extractedDomain, [CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userManager) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String property;
        [CtIfImpl][CtCommentImpl]// If domain is present, then we search within that domain only.
        if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtVariableReadImpl]extractedDomain)) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userManager == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"No user store manager found for domain: " + [CtVariableReadImpl]extractedDomain);
                }
                [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.emptyList();
            }
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Domain found in claim value. Searching only in the " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" for possible ") + [CtLiteralImpl]"matches");
            }
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]property = [CtInvocationImpl][CtFieldReadImpl]claimManager.getAttributeName([CtVariableReadImpl]extractedDomain, [CtVariableReadImpl]claim);
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while retrieving attribute name for domain : " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" and claim ") + [CtVariableReadImpl]claim, [CtVariableReadImpl]e);
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]property == [CtLiteralImpl]null) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Could not find matching property for\n" + [CtLiteralImpl]"claim :") + [CtVariableReadImpl]claim) + [CtLiteralImpl]"domain :") + [CtVariableReadImpl]extractedDomain);
                }
                [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.emptyList();
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]userManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                [CtTryImpl][CtCommentImpl]// Get the user list and return with domain appended.
                try [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager userStoreManager = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userManager));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UniqueIDPaginatedSearchResult result = [CtInvocationImpl][CtVariableReadImpl]userStoreManager.doGetUserListFromPropertiesWithID([CtVariableReadImpl]property, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset);
                    [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                        [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"List of filtered paginated users for: " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" : ") + [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl][CtVariableReadImpl]result.getUsers()));
                    }
                    [CtReturnImpl]return [CtInvocationImpl][CtVariableReadImpl]result.getUsers();
                }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException ex) [CtBlockImpl]{
                    [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_WHILE_GETTING_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]ex.getMessage()), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]profileName);
                    [CtThrowImpl]throw [CtVariableReadImpl]ex;
                }
            } else [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                    [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"getUserListFromProperties is not supported by this user store: " + [CtInvocationImpl][CtVariableReadImpl]userManager.getClass());
                }
                [CtReturnImpl]return [CtInvocationImpl][CtTypeAccessImpl]java.util.Collections.emptyList();
            }
        }
        [CtIfImpl][CtCommentImpl]// If domain is not given then search all the user stores.
        if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtLiteralImpl]"No domain name found in claim value. Searching through all user stores for possible matches");
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> usersFromAllStoresList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager> userStoreManagers = [CtInvocationImpl]getUserStoreMangers();
        [CtLocalVariableImpl][CtTypeReferenceImpl]int nonPaginatedUserCount = [CtLiteralImpl]0;
        [CtForEachImpl][CtCommentImpl]// Iterate through all of available user store managers.
        for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userStoreManager : [CtVariableReadImpl]userStoreManagers) [CtBlockImpl]{
            [CtIfImpl][CtCommentImpl]// If this is not an instance of Abstract User Store Manger we can ignore the flow since we can't get the
            [CtCommentImpl]// domain name.
            if ([CtUnaryOperatorImpl]![CtBinaryOperatorImpl]([CtVariableReadImpl]userStoreManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager)) [CtBlockImpl]{
                [CtContinueImpl]continue;
            }
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]limit <= [CtLiteralImpl]0) [CtBlockImpl]{
                [CtReturnImpl]return [CtVariableReadImpl]usersFromAllStoresList;
            }
            [CtLocalVariableImpl][CtCommentImpl]// For all the user stores append the domain name to the claim and pass it recursively (Including PRIMARY).
            [CtTypeReferenceImpl]java.lang.String domainName = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (userStoreManager)).getMyDomainName();
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]property = [CtInvocationImpl][CtFieldReadImpl]claimManager.getAttributeName([CtVariableReadImpl]domainName, [CtVariableReadImpl]claim);
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                [CtInvocationImpl]handleGetUserListFailure([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_GET_USER_LIST.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]claim, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset, [CtVariableReadImpl]profileName);
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Error occurred while retrieving attribute name for domain : " + [CtVariableReadImpl]extractedDomain) + [CtLiteralImpl]" and claim ") + [CtVariableReadImpl]claim, [CtVariableReadImpl]e);
            }
            [CtLocalVariableImpl][CtCommentImpl]// Recursively call the getUserList method appending the domain to claim value.
            [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.UniqueIDPaginatedSearchResult userList = [CtInvocationImpl]doGetUserListFromPropertiesWithID([CtVariableReadImpl]property, [CtVariableReadImpl]claimValue, [CtVariableReadImpl]profileName, [CtVariableReadImpl]limit, [CtVariableReadImpl]offset);
            [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
                [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtBinaryOperatorImpl]([CtLiteralImpl]"Secondary user list for domain: " + [CtVariableReadImpl]domainName) + [CtLiteralImpl]" : ") + [CtVariableReadImpl]userList);
            }
            [CtAssignmentImpl][CtVariableWriteImpl]limit = [CtBinaryOperatorImpl][CtVariableReadImpl]limit - [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userList.getUsers().size();
            [CtAssignmentImpl][CtVariableWriteImpl]nonPaginatedUserCount = [CtInvocationImpl][CtVariableReadImpl]userList.getSkippedUserCount();
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userList.getUsers().size() > [CtLiteralImpl]0) [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]offset = [CtLiteralImpl]1;
            } else [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]offset = [CtBinaryOperatorImpl][CtVariableReadImpl]offset - [CtVariableReadImpl]nonPaginatedUserCount;
            }
            [CtInvocationImpl][CtVariableReadImpl]usersFromAllStoresList.addAll([CtInvocationImpl][CtVariableReadImpl]userList.getUsers());
        }
        [CtReturnImpl][CtCommentImpl]// Done with all user store processing. Return the user array if not empty.
        return [CtVariableReadImpl]usersFromAllStoresList;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UniqueIDUserClaimSearchEntry> getUsersClaimValuesWithID([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userIDs, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class[] argTypes = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.util.List.class, [CtFieldReadImpl]java.util.List.class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getUsersClaimValuesWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userIDs, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UniqueIDUserClaimSearchEntry>) (object));
        }
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]profileName)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]profileName = [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.DEFAULT_PROFILE;
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UniqueIDUserClaimSearchEntry> allUsers = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> domainFreeUsers = [CtInvocationImpl]getDomainFreeUsersWithID([CtVariableReadImpl]userIDs);
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> entry : [CtInvocationImpl][CtVariableReadImpl]domainFreeUsers.entrySet()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secondaryUserStoreManager = [CtInvocationImpl]getSecondaryUserStoreManager([CtInvocationImpl][CtVariableReadImpl]entry.getKey());
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secondaryUserStoreManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl]isUniqueUserIdEnabled([CtVariableReadImpl]secondaryUserStoreManager)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UniqueIDUserClaimSearchEntry> users = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secondaryUserStoreManager)).doGetUsersClaimValuesWithID([CtInvocationImpl][CtVariableReadImpl]entry.getValue(), [CtVariableReadImpl]claims, [CtInvocationImpl][CtVariableReadImpl]entry.getKey(), [CtVariableReadImpl]profileName);
                    [CtInvocationImpl][CtVariableReadImpl]allUsers.addAll([CtVariableReadImpl]users);
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtArrayTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry[] users = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secondaryUserStoreManager)).doGetUsersClaimValues([CtInvocationImpl]getUserNamesFromUserIDs([CtInvocationImpl][CtVariableReadImpl]entry.getValue()), [CtInvocationImpl][CtVariableReadImpl]claims.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]), [CtInvocationImpl][CtVariableReadImpl]entry.getKey(), [CtVariableReadImpl]profileName);
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UniqueIDUserClaimSearchEntry> uniqueIDUserClaimSearchEntries = [CtInvocationImpl]getUniqueIDUserClaimSearchEntries([CtVariableReadImpl]users);
                    [CtInvocationImpl][CtVariableReadImpl]allUsers.addAll([CtVariableReadImpl]uniqueIDUserClaimSearchEntries);
                }
            }
        }
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostGetUsersClaimValuesWithID([CtVariableReadImpl]userIDs, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtVariableReadImpl]allUsers, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtBreakImpl]break;
                }
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]allUsers;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UniqueIDUserClaimSearchEntry> getUniqueIDUserClaimSearchEntries([CtParameterImpl][CtArrayTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry[] users) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UniqueIDUserClaimSearchEntry> uniqueIDUserClaimSearchEntries = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry userClaimSearchEntry : [CtVariableReadImpl]users) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UniqueIDUserClaimSearchEntry uniqueIDUserClaimSearchEntry = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UniqueIDUserClaimSearchEntry();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userName = [CtInvocationImpl][CtVariableReadImpl]userClaimSearchEntry.getUserName();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtInvocationImpl]getUserIDFromUserName([CtVariableReadImpl]userName);
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl]getUser([CtVariableReadImpl]userID, [CtVariableReadImpl]userName);
            [CtInvocationImpl][CtVariableReadImpl]uniqueIDUserClaimSearchEntry.setUser([CtVariableReadImpl]user);
            [CtInvocationImpl][CtVariableReadImpl]uniqueIDUserClaimSearchEntry.setClaims([CtInvocationImpl][CtVariableReadImpl]userClaimSearchEntry.getClaims());
            [CtInvocationImpl][CtVariableReadImpl]uniqueIDUserClaimSearchEntry.setUserClaimSearchEntry([CtVariableReadImpl]userClaimSearchEntry);
            [CtInvocationImpl][CtVariableReadImpl]uniqueIDUserClaimSearchEntries.add([CtVariableReadImpl]uniqueIDUserClaimSearchEntry);
        }
        [CtReturnImpl]return [CtVariableReadImpl]uniqueIDUserClaimSearchEntries;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UniqueIDUserClaimSearchEntry> doGetUsersClaimValuesWithID([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userIDs, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domainName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Set<[CtTypeReferenceImpl]java.lang.String> propertySet = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashSet<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claimToAttributeMap = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UniqueIDUserClaimSearchEntry> userClaimSearchEntryList = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String claim : [CtVariableReadImpl]claims) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String property;
            [CtTryImpl]try [CtBlockImpl]{
                [CtAssignmentImpl][CtVariableWriteImpl]property = [CtInvocationImpl]getClaimAtrribute([CtVariableReadImpl]claim, [CtLiteralImpl]null, [CtVariableReadImpl]domainName);
            }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.api.UserStoreException e) [CtBlockImpl]{
                [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException([CtVariableReadImpl]e);
            }
            [CtInvocationImpl][CtVariableReadImpl]propertySet.add([CtVariableReadImpl]property);
            [CtInvocationImpl][CtVariableReadImpl]claimToAttributeMap.put([CtVariableReadImpl]claim, [CtVariableReadImpl]property);
        }
        [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.String[] properties = [CtInvocationImpl][CtVariableReadImpl]propertySet.toArray([CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.String[[CtLiteralImpl]0]);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>> userProperties = [CtInvocationImpl][CtThisAccessImpl]this.getUsersPropertyValuesWithID([CtVariableReadImpl]userIDs, [CtVariableReadImpl]properties, [CtVariableReadImpl]profileName);
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>> entry : [CtInvocationImpl][CtVariableReadImpl]userProperties.entrySet()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UniqueIDUserClaimSearchEntry uniqueIDUserClaimSearchEntry = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UniqueIDUserClaimSearchEntry();
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry userClaimSearchEntry = [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.model.UserClaimSearchEntry();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID = [CtInvocationImpl][CtVariableReadImpl]entry.getKey();
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userName = [CtInvocationImpl]doGetUserNameFromUserID([CtVariableReadImpl]userID);
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl]getUser([CtVariableReadImpl]userID, [CtVariableReadImpl]userName);
            [CtInvocationImpl][CtVariableReadImpl]uniqueIDUserClaimSearchEntry.setUser([CtVariableReadImpl]user);
            [CtInvocationImpl][CtVariableReadImpl]userClaimSearchEntry.setUserName([CtVariableReadImpl]userName);
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> userClaims = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String claim : [CtVariableReadImpl]claims) [CtBlockImpl]{
                [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> userAttribute : [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]entry.getValue().entrySet()) [CtBlockImpl]{
                    [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtInvocationImpl][CtVariableReadImpl]claimToAttributeMap.get([CtVariableReadImpl]claim) != [CtLiteralImpl]null) && [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]claimToAttributeMap.get([CtVariableReadImpl]claim).equals([CtInvocationImpl][CtVariableReadImpl]userAttribute.getKey())) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]userClaims.put([CtVariableReadImpl]claim, [CtInvocationImpl][CtVariableReadImpl]userAttribute.getValue());
                    }
                }
            }
            [CtInvocationImpl][CtVariableReadImpl]uniqueIDUserClaimSearchEntry.setClaims([CtVariableReadImpl]userClaims);
            [CtInvocationImpl][CtVariableReadImpl]userClaimSearchEntry.setClaims([CtVariableReadImpl]userClaims);
            [CtInvocationImpl][CtVariableReadImpl]uniqueIDUserClaimSearchEntry.setUserClaimSearchEntry([CtVariableReadImpl]userClaimSearchEntry);
            [CtInvocationImpl][CtVariableReadImpl]userClaimSearchEntryList.add([CtVariableReadImpl]uniqueIDUserClaimSearchEntry);
        }
        [CtReturnImpl]return [CtVariableReadImpl]userClaimSearchEntryList;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> getDomainFreeUsersWithID([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userIDs) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> domainAwareUsers = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]userIDs.isEmpty()) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID : [CtVariableReadImpl]userIDs) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user = [CtInvocationImpl]getUser([CtVariableReadImpl]userID, [CtLiteralImpl]null);
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domainName = [CtInvocationImpl][CtVariableReadImpl]user.getUserStoreDomain();
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> users = [CtInvocationImpl][CtVariableReadImpl]domainAwareUsers.get([CtVariableReadImpl]domainName);
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]users == [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]users = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
                    [CtInvocationImpl][CtVariableReadImpl]domainAwareUsers.put([CtInvocationImpl][CtVariableReadImpl]domainName.toUpperCase(), [CtVariableReadImpl]users);
                }
                [CtInvocationImpl][CtVariableReadImpl]users.add([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.removeDomainFromName([CtVariableReadImpl]userID));
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]domainAwareUsers;
    }

    [CtMethodImpl]protected [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>> getUsersPropertyValuesWithID([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userIDs, [CtParameterImpl][CtArrayTypeReferenceImpl]java.lang.String[] propertyNames, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String>> usersPropertyValuesMap = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID : [CtVariableReadImpl]userIDs) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> propertyValuesMap = [CtInvocationImpl]getUserPropertyValuesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]propertyNames, [CtVariableReadImpl]profileName);
            [CtInvocationImpl]processAttributesAfterRetrievalWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]propertyValuesMap, [CtVariableReadImpl]profileName);
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtBinaryOperatorImpl]([CtVariableReadImpl]propertyValuesMap != [CtLiteralImpl]null) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]propertyValuesMap.isEmpty())) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]usersPropertyValuesMap.put([CtVariableReadImpl]userID, [CtVariableReadImpl]propertyValuesMap);
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]usersPropertyValuesMap;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> getRoleListOfUsersWithID([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userIDs) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class[] argTypes = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.util.List.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"getRoleListOfUsersWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userIDs }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>>) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> allRoleNames = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> domainFreeUsers = [CtInvocationImpl]getDomainFreeUsersWithID([CtVariableReadImpl]userIDs);
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl][CtTypeReferenceImpl]java.util.Map.Entry<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> entry : [CtInvocationImpl][CtVariableReadImpl]domainFreeUsers.entrySet()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager secondaryUserStoreManager = [CtInvocationImpl]getSecondaryUserStoreManager([CtInvocationImpl][CtVariableReadImpl]entry.getKey());
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]secondaryUserStoreManager instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) [CtBlockImpl]{
                [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secondaryUserStoreManager)).isUniqueUserIdEnabled()) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> roleNames = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secondaryUserStoreManager)).doGetRoleListOfUsersWithID([CtInvocationImpl][CtVariableReadImpl]entry.getValue(), [CtInvocationImpl][CtVariableReadImpl]entry.getKey());
                    [CtInvocationImpl][CtVariableReadImpl]allRoleNames.putAll([CtVariableReadImpl]roleNames);
                } else [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> users = [CtInvocationImpl][CtFieldReadImpl]userUniqueIDManger.getUsers([CtInvocationImpl][CtVariableReadImpl]entry.getValue(), [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secondaryUserStoreManager)));
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> userRoles = [CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager) (secondaryUserStoreManager)).doGetRoleListOfUsers([CtInvocationImpl][CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]users.stream().map([CtExecutableReferenceExpressionImpl][CtFieldReadImpl]User::getUsername).collect([CtInvocationImpl][CtTypeAccessImpl]java.util.stream.Collectors.toList()), [CtInvocationImpl][CtVariableReadImpl]entry.getKey());
                    [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User user : [CtVariableReadImpl]users) [CtBlockImpl]{
                        [CtInvocationImpl][CtVariableReadImpl]allRoleNames.put([CtInvocationImpl][CtVariableReadImpl]user.getUserID(), [CtInvocationImpl][CtVariableReadImpl]userRoles.get([CtInvocationImpl][CtVariableReadImpl]user.getUsername()));
                    }
                }
            }
        }
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
            [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]listener instanceof [CtTypeAccessImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener newListener = [CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener));
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]newListener.doPostGetRoleListOfUsersWithID([CtVariableReadImpl]userIDs, [CtVariableReadImpl]allRoleNames, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtBreakImpl]break;
                }
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]allRoleNames;
    }

    [CtMethodImpl]public [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> doGetRoleListOfUsersWithID([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userIDs, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domainName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.isSecureCall.get()) [CtBlockImpl]{
            [CtLocalVariableImpl][CtArrayTypeReferenceImpl]java.lang.Class[] argTypes = [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Class[]{ [CtFieldReadImpl]java.util.List.class, [CtFieldReadImpl]java.lang.String.class };
            [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.Object object = [CtInvocationImpl]callSecure([CtLiteralImpl]"doGetRoleListOfUsersWithID", [CtNewArrayImpl]new [CtTypeReferenceImpl]java.lang.Object[]{ [CtVariableReadImpl]userIDs, [CtVariableReadImpl]domainName }, [CtVariableReadImpl]argTypes);
            [CtReturnImpl]return [CtVariableReadImpl](([CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>>) (object));
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> internalRoles = [CtInvocationImpl]doGetInternalRoleListOfUsersWithID([CtVariableReadImpl]userIDs, [CtVariableReadImpl]domainName);
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> externalRoles = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtIfImpl]if ([CtFieldReadImpl]readGroupsEnabled) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]externalRoles = [CtInvocationImpl]doGetExternalRoleListOfUsersWithID([CtVariableReadImpl]userIDs);
        }
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> combinedRoles = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]internalRoles.isEmpty()) && [CtUnaryOperatorImpl](![CtInvocationImpl][CtVariableReadImpl]externalRoles.isEmpty())) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String userID : [CtVariableReadImpl]userIDs) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> roles = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]internalRoles.get([CtVariableReadImpl]userID) != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]roles.addAll([CtInvocationImpl][CtVariableReadImpl]internalRoles.get([CtVariableReadImpl]userID));
                }
                [CtIfImpl]if ([CtBinaryOperatorImpl][CtInvocationImpl][CtVariableReadImpl]externalRoles.get([CtVariableReadImpl]userID) != [CtLiteralImpl]null) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> domainQualifiedRoleNames = [CtInvocationImpl]getNamesWithDomain([CtInvocationImpl][CtVariableReadImpl]externalRoles.get([CtVariableReadImpl]userID), [CtVariableReadImpl]domainName);
                    [CtInvocationImpl][CtVariableReadImpl]roles.addAll([CtVariableReadImpl]domainQualifiedRoleNames);
                }
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]roles.isEmpty()) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]combinedRoles.put([CtVariableReadImpl]userID, [CtVariableReadImpl]roles);
                }
            }
        } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]internalRoles.isEmpty()) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]combinedRoles = [CtVariableReadImpl]internalRoles;
        } else [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl]externalRoles.isEmpty()) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]combinedRoles = [CtVariableReadImpl]externalRoles;
        }
        [CtReturnImpl]return [CtVariableReadImpl]combinedRoles;
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.Group> listGroups([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.Condition condition, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortBy, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"listGroups operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"listGroups operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.Group> listGroups([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.Condition condition, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"listGroups operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"listGroups operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.Group> listGroups([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.model.Condition condition) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"listGroups operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"listGroups operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.Group addGroup([CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupName, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> usersIDs, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.Claim> claims) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"addGroup operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"addGroup operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.Group> getGroupListOfUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortBy, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"getGroupListOfUser operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"getGroupListOfUser operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> getUserListOfGroup([CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupID, [CtParameterImpl][CtTypeReferenceImpl]int limit, [CtParameterImpl][CtTypeReferenceImpl]int offset, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortBy, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"getUserListOfGroup operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"getUserListOfGroup operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]void updateUserListOfGroup([CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupID, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> deletedUserIds, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> newUserIds) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"updateUserListOfGroup operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"updateUserListOfGroup operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]void updateGroupListOfUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> deletedGroupIds, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> newGroupIds) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"updateGroupListOfUser operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"updateGroupListOfUser operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]boolean isUserInGroup([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupID) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"isUserInGroup operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"isUserInGroup operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.Group>> getGroupListOfUsers([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> userIDs) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"getGroupListOfUsers operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"getGroupListOfUsers operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]boolean isGroupExist([CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupID) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"isGroupExist operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"isGroupExist operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]void deleteGroup([CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupID) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"deleteGroup operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"deleteGroup operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.Group renameGroup([CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String newGroupName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"renameGroup operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"renameGroup operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User addUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userName, [CtParameterImpl][CtTypeReferenceImpl]java.lang.Object credential, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.Claim> claims, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> groupsIds, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"addUser operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"addUser operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.Group getGroup([CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupID, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> requiredAttributes) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"getGroup operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"getGroup operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]org.wso2.carbon.user.core.common.Group updateGroup([CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupID, [CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.claim.Claim> claims) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"updateGroup operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"updateGroup operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.User> getUserListOfGroup([CtParameterImpl][CtTypeReferenceImpl]java.lang.String groupID, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortBy, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"getUserListOfGroup operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"getUserListOfGroup operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl][CtAnnotationImpl]@java.lang.Override
    public [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]org.wso2.carbon.user.core.common.Group> getGroupListOfUser([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userId, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortBy, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String sortOrder) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtIfImpl]if ([CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.isDebugEnabled()) [CtBlockImpl]{
            [CtInvocationImpl][CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.log.debug([CtBinaryOperatorImpl][CtLiteralImpl]"getGroupListOfUser operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
        }
        [CtThrowImpl]throw [CtConstructorCallImpl]new [CtTypeReferenceImpl]org.wso2.carbon.user.core.NotImplementedException([CtBinaryOperatorImpl][CtLiteralImpl]"getGroupListOfUser operation is not implemented in: " + [CtInvocationImpl][CtThisAccessImpl]this.getClass());
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> getNamesWithDomain([CtParameterImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> identifiers, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String domain) [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> usersWithDomain = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
        [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String identifier : [CtVariableReadImpl]identifiers) [CtBlockImpl]{
            [CtInvocationImpl][CtVariableReadImpl]usersWithDomain.add([CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.util.UserCoreUtil.addDomainToName([CtVariableReadImpl]identifier, [CtVariableReadImpl]domain));
        }
        [CtReturnImpl]return [CtVariableReadImpl]usersWithDomain;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]java.lang.String getUserStoreDomainName([CtParameterImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreManager userStoreManager) [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String domainNameProperty = [CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]userStoreManager.getRealmConfiguration().getUserStoreProperty([CtTypeAccessImpl]UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME);
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isEmpty([CtVariableReadImpl]domainNameProperty)) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]domainNameProperty = [CtFieldReadImpl]org.wso2.carbon.user.core.UserCoreConstants.PRIMARY_DEFAULT_DOMAIN_NAME;
        }
        [CtReturnImpl]return [CtVariableReadImpl]domainNameProperty;
    }

    [CtMethodImpl][CtJavaDocImpl]/**
     * Process and return the modifed claim values against claim URI. Add or remove specific claim values
     * against old claim values of multi-valued claims. Replace old claim values from modified values for
     * non multi-valued claims.
     *
     * @param oldClaimMap
     * 		Map of claim URIs against old claim values of user.
     * @param multiValuedClaimsToAdd
     * 		Map of multi-valued claim URIs against values need to be added to
     * 		old claim value.
     * @param multiValuedClaimsToDelete
     * 		Map of multi-valued claim URIs against values need to be removed from
     * 		old claim value.
     * @param claimsExcludingMultiValuedClaims
     * 		Map of non multi-valued claim URIs against modified values to be stred.
     * @return Map of claim URIs against the modified claim values.
     */
    private [CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> getModifiedClaims([CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> oldClaimMap, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> multiValuedClaimsToAdd, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> multiValuedClaimsToDelete, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>> claimsExcludingMultiValuedClaims) [CtBlockImpl]{
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.HashMap<>();
        [CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String separator = [CtLiteralImpl]",";
        [CtIfImpl]if ([CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.isNotEmpty([CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.MULTI_ATTRIBUTE_SEPARATOR))) [CtBlockImpl]{
            [CtAssignmentImpl][CtVariableWriteImpl]separator = [CtInvocationImpl][CtFieldReadImpl]realmConfig.getUserStoreProperty([CtFieldReadImpl]org.wso2.carbon.user.core.common.AbstractUserStoreManager.MULTI_ATTRIBUTE_SEPARATOR);
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]claimsExcludingMultiValuedClaims != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String claimURI : [CtInvocationImpl][CtVariableReadImpl]claimsExcludingMultiValuedClaims.keySet()) [CtBlockImpl]{
                [CtInvocationImpl][CtVariableReadImpl]claims.put([CtVariableReadImpl]claimURI, [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.join([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]claimsExcludingMultiValuedClaims.get([CtVariableReadImpl]claimURI).iterator(), [CtVariableReadImpl]separator));
            }
        }
        [CtIfImpl][CtCommentImpl]// Get modified claim values for multi-valued claims.
        if ([CtBinaryOperatorImpl][CtVariableReadImpl]multiValuedClaimsToAdd != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String claimURI : [CtInvocationImpl][CtVariableReadImpl]multiValuedClaimsToAdd.keySet()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> modifiedValue = [CtConstructorCallImpl]new [CtTypeReferenceImpl]java.util.ArrayList<>();
                [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]oldClaimMap.containsKey([CtVariableReadImpl]claimURI)) [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]modifiedValue.addAll([CtInvocationImpl][CtVariableReadImpl]oldClaimMap.get([CtVariableReadImpl]claimURI));
                    [CtInvocationImpl][CtVariableReadImpl]modifiedValue.addAll([CtInvocationImpl][CtVariableReadImpl]multiValuedClaimsToAdd.get([CtVariableReadImpl]claimURI));
                } else [CtBlockImpl]{
                    [CtInvocationImpl][CtVariableReadImpl]modifiedValue.addAll([CtInvocationImpl][CtVariableReadImpl]multiValuedClaimsToAdd.get([CtVariableReadImpl]claimURI));
                }
                [CtInvocationImpl][CtVariableReadImpl]claims.put([CtVariableReadImpl]claimURI, [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.join([CtInvocationImpl][CtVariableReadImpl]modifiedValue.iterator(), [CtVariableReadImpl]separator));
            }
        }
        [CtIfImpl]if ([CtBinaryOperatorImpl][CtVariableReadImpl]multiValuedClaimsToDelete != [CtLiteralImpl]null) [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]java.lang.String claimURI : [CtInvocationImpl][CtVariableReadImpl]multiValuedClaimsToDelete.keySet()) [CtBlockImpl]{
                [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> values = [CtLiteralImpl]null;
                [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]claims.containsKey([CtVariableReadImpl]claimURI)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]values = [CtInvocationImpl][CtTypeAccessImpl]java.util.Arrays.asList([CtInvocationImpl][CtInvocationImpl][CtVariableReadImpl]claims.get([CtVariableReadImpl]claimURI).split([CtVariableReadImpl]separator));
                } else [CtIfImpl]if ([CtInvocationImpl][CtVariableReadImpl]oldClaimMap.containsKey([CtVariableReadImpl]claimURI)) [CtBlockImpl]{
                    [CtAssignmentImpl][CtVariableWriteImpl]values = [CtInvocationImpl][CtVariableReadImpl]oldClaimMap.get([CtVariableReadImpl]claimURI);
                }
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.collections.CollectionUtils.isEmpty([CtVariableReadImpl]values)) [CtBlockImpl]{
                    [CtLocalVariableImpl][CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String> modifiedValue = [CtInvocationImpl](([CtTypeReferenceImpl]java.util.List<[CtTypeReferenceImpl]java.lang.String>) ([CtTypeAccessImpl]org.apache.commons.collections.CollectionUtils.subtract([CtVariableReadImpl]values, [CtInvocationImpl][CtVariableReadImpl]multiValuedClaimsToDelete.get([CtVariableReadImpl]claimURI))));
                    [CtInvocationImpl][CtVariableReadImpl]claims.put([CtVariableReadImpl]claimURI, [CtInvocationImpl][CtTypeAccessImpl]org.apache.commons.lang.StringUtils.join([CtInvocationImpl][CtVariableReadImpl]modifiedValue.iterator(), [CtVariableReadImpl]separator));
                }
            }
        }
        [CtReturnImpl]return [CtVariableReadImpl]claims;
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void invokeDoPreSetUserClaimsWithIDListeners([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPreSetUserClaimValuesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleSetUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
    }

    [CtMethodImpl]private [CtTypeReferenceImpl]void invokeDoPostSetUserClaimsWithIDListeners([CtParameterImpl][CtTypeReferenceImpl]java.lang.String userID, [CtParameterImpl][CtTypeReferenceImpl]java.util.Map<[CtTypeReferenceImpl]java.lang.String, [CtTypeReferenceImpl]java.lang.String> claims, [CtParameterImpl][CtTypeReferenceImpl]java.lang.String profileName) throws [CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException [CtBlockImpl]{
        [CtTryImpl]try [CtBlockImpl]{
            [CtForEachImpl]for ([CtLocalVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.listener.UserOperationEventListener listener : [CtInvocationImpl][CtTypeAccessImpl]org.wso2.carbon.user.core.internal.UMListenerServiceComponent.getUserOperationEventListeners()) [CtBlockImpl]{
                [CtIfImpl]if ([CtUnaryOperatorImpl]![CtInvocationImpl][CtVariableReadImpl](([CtTypeReferenceImpl]org.wso2.carbon.user.core.common.AbstractUserOperationEventListener) (listener)).doPostSetUserClaimValuesWithID([CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName, [CtThisAccessImpl]this)) [CtBlockImpl]{
                    [CtInvocationImpl]handleSetUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUES.getMessage(), [CtTypeAccessImpl]UserCoreErrorConstants.POST_LISTENER_TASKS_FAILED_MESSAGE), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
                    [CtReturnImpl]return;
                }
            }
        }[CtCatchImpl] catch ([CtCatchVariableImpl][CtTypeReferenceImpl]org.wso2.carbon.user.core.UserStoreException e) [CtBlockImpl]{
            [CtInvocationImpl]handleSetUserClaimValuesFailureWithID([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUES.getCode(), [CtInvocationImpl][CtTypeAccessImpl]java.lang.String.format([CtInvocationImpl][CtTypeAccessImpl]ErrorMessages.ERROR_CODE_ERROR_DURING_POST_SET_USER_CLAIM_VALUES.getMessage(), [CtInvocationImpl][CtVariableReadImpl]e.getMessage()), [CtVariableReadImpl]userID, [CtVariableReadImpl]claims, [CtVariableReadImpl]profileName);
            [CtThrowImpl]throw [CtVariableReadImpl]e;
        }
    }
}