{"pr_number": 2422, "pr_title": "Introduce configurable access filter in agent.", "pr_author": "peter-hofer", "pr_createdAt": "2020-04-30T19:02:47Z", "pr_url": "https://github.com/oracle/graal/pull/2422", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2MjU0OQ==", "url": "https://github.com/oracle/graal/pull/2422#discussion_r418262549", "body": "A small question - could this also work like `copyBuiltinCallerFilterTree`?  It would copy `accessWithoutCallerFilter`, and then we could remove\r\n```\r\n        if (callerClass.get() == null && !accessWithoutCallerFilter.treeIncludes(queriedClass.get())) {\r\n            return true;\r\n        }\r\n```\r\nfrom the `shouldIgnore` call?", "bodyText": "A small question - could this also work like copyBuiltinCallerFilterTree?  It would copy accessWithoutCallerFilter, and then we could remove\n        if (callerClass.get() == null && !accessWithoutCallerFilter.treeIncludes(queriedClass.get())) {\n            return true;\n        }\n\nfrom the shouldIgnore call?", "bodyHTML": "<p dir=\"auto\">A small question - could this also work like <code>copyBuiltinCallerFilterTree</code>?  It would copy <code>accessWithoutCallerFilter</code>, and then we could remove</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        if (callerClass.get() == null &amp;&amp; !accessWithoutCallerFilter.treeIncludes(queriedClass.get())) {\n            return true;\n        }\"><pre><code>        if (callerClass.get() == null &amp;&amp; !accessWithoutCallerFilter.treeIncludes(queriedClass.get())) {\n            return true;\n        }\n</code></pre></div>\n<p dir=\"auto\">from the <code>shouldIgnore</code> call?</p>", "author": "gradinac", "createdAt": "2020-04-30T20:14:39Z", "path": "substratevm/src/com.oracle.svm.configure/src/com/oracle/svm/configure/trace/AccessAdvisor.java", "diffHunk": "@@ -67,16 +67,18 @@ public static RuleNode copyBuiltinCallerFilterTree() {\n         return internalCallerFilter.copy();\n     }\n \n+    public static RuleNode copyBuiltinAccessFilterTree() {\n+        RuleNode root = RuleNode.createRoot();\n+        root.addOrGetChildren(\"**\", RuleNode.Inclusion.Include);", "originalCommit": "2e15b432fe93d1af135045bcd75d71c4b6e8dce5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNDgwMg==", "url": "https://github.com/oracle/graal/pull/2422#discussion_r421604802", "bodyText": "I'm not sure if I understand correctly. It would probably be fine to merge the two filters, but accessWithoutCallerFilter is specifically for cases in which we don't know the caller class and it's very likely an internal access (JVMCI, Libgraal, JVM startup) where we assume it shouldn't end up in the user configuration, so I'd prefer to keep it separate.", "author": "peter-hofer", "createdAt": "2020-05-07T15:42:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2MjU0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA3NjkyNA==", "url": "https://github.com/oracle/graal/pull/2422#discussion_r422076924", "bodyText": "Ahh, I overlooked the purpose initially, my bad. I agree, it's best to keep it separate.", "author": "gradinac", "createdAt": "2020-05-08T10:50:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2MjU0OQ=="}], "type": "inlineReview"}, {"oid": "83dc2f155468742f5de0da75855bd9d7783834cb", "url": "https://github.com/oracle/graal/commit/83dc2f155468742f5de0da75855bd9d7783834cb", "message": "Introduce configurable agent access filter.", "committedDate": "2020-05-07T19:59:54Z", "type": "commit"}, {"oid": "83dc2f155468742f5de0da75855bd9d7783834cb", "url": "https://github.com/oracle/graal/commit/83dc2f155468742f5de0da75855bd9d7783834cb", "message": "Introduce configurable agent access filter.", "committedDate": "2020-05-07T19:59:54Z", "type": "forcePushed"}]}