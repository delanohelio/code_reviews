{"pr_number": 2360, "pr_title": "Support WithExceptionNode in IntrinsicGraphBuilder", "pr_author": "christianwimmer", "pr_createdAt": "2020-04-18T03:02:43Z", "pr_url": "https://github.com/oracle/graal/pull/2360", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwNjQ0OQ==", "url": "https://github.com/oracle/graal/pull/2360#discussion_r410706449", "body": "This should just be:\r\n```suggestion\r\n                AbstractBeginNode normalSuccessor = withExceptionNode.createNextBegin();\r\n```\r\nLooks good to me otherwise.", "bodyText": "This should just be:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            AbstractBeginNode normalSuccessor;\n          \n          \n            \n                            if (withExceptionNode instanceof SingleMemoryKill) {\n          \n          \n            \n                                normalSuccessor = graph.add(KillingBeginNode.create(((SingleMemoryKill) withExceptionNode).getKilledLocationIdentity()));\n          \n          \n            \n                            } else if (withExceptionNode instanceof MultiMemoryKill) {\n          \n          \n            \n                                normalSuccessor = graph.add(MultiKillingBeginNode.create(((MultiMemoryKill) withExceptionNode).getKilledLocationIdentities()));\n          \n          \n            \n                            } else {\n          \n          \n            \n                                assert !(withExceptionNode instanceof MemoryKill) : \"missing a MemoryKill\";\n          \n          \n            \n                                normalSuccessor = graph.add(new BeginNode());\n          \n          \n            \n                            }\n          \n          \n            \n                            AbstractBeginNode normalSuccessor = withExceptionNode.createNextBegin();\n          \n      \n    \n    \n  \n\nLooks good to me otherwise.", "bodyHTML": "<p dir=\"auto\">This should just be:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-smi\">AbstractBeginNode</span> normalSuccessor;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">if</span> (withExceptionNode <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">SingleMemoryKill</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    normalSuccessor <span class=\"pl-k\">=</span> graph<span class=\"pl-k\">.</span>add(<span class=\"pl-smi\">KillingBeginNode</span><span class=\"pl-k\">.</span>create(((<span class=\"pl-smi\">SingleMemoryKill</span>) withExceptionNode)<span class=\"pl-k\">.</span>getKilledLocationIdentity()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (withExceptionNode <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">MultiMemoryKill</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    normalSuccessor <span class=\"pl-k\">=</span> graph<span class=\"pl-k\">.</span>add(<span class=\"pl-smi\">MultiKillingBeginNode</span><span class=\"pl-k\">.</span>create(((<span class=\"pl-smi\">MultiMemoryKill</span>) withExceptionNode)<span class=\"pl-k\">.</span>getKilledLocationIdentities()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">assert</span> <span class=\"pl-k\">!</span>(withExceptionNode <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">MemoryKill</span>) <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>missing a MemoryKill<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    normalSuccessor <span class=\"pl-k\">=</span> graph<span class=\"pl-k\">.</span>add(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">BeginNode</span>());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-smi\">AbstractBeginNode</span> normalSuccessor <span class=\"pl-k\">=</span> withExceptionNode<span class=\"pl-k\">.</span>createNextBegin();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Looks good to me otherwise.</p>", "author": "gergo-", "createdAt": "2020-04-18T14:41:52Z", "path": "compiler/src/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/IntrinsicGraphBuilder.java", "diffHunk": "@@ -134,12 +146,46 @@ protected IntrinsicGraphBuilder(OptionValues options, DebugContext debug, CorePr\n                 FixedWithNextNode fixedWithNextNode = (FixedWithNextNode) fixedNode;\n                 assert fixedWithNextNode.next() == null : \"cannot append instruction to instruction which isn't end\";\n                 lastInstr = fixedWithNextNode;\n+\n+            } else if (fixedNode instanceof WithExceptionNode) {\n+                WithExceptionNode withExceptionNode = (WithExceptionNode) fixedNode;\n+                AbstractBeginNode normalSuccessor;\n+                if (withExceptionNode instanceof SingleMemoryKill) {\n+                    normalSuccessor = graph.add(KillingBeginNode.create(((SingleMemoryKill) withExceptionNode).getKilledLocationIdentity()));\n+                } else if (withExceptionNode instanceof MultiMemoryKill) {\n+                    normalSuccessor = graph.add(MultiKillingBeginNode.create(((MultiMemoryKill) withExceptionNode).getKilledLocationIdentities()));\n+                } else {\n+                    assert !(withExceptionNode instanceof MemoryKill) : \"missing a MemoryKill\";\n+                    normalSuccessor = graph.add(new BeginNode());\n+                }", "originalCommit": "c858675537ceef8035c9cccd64528f15e30747e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MzQ5MA==", "url": "https://github.com/oracle/graal/pull/2360#discussion_r410793490", "bodyText": "Thanks, didn't know that method exists. But I'm glad it does.", "author": "christianwimmer", "createdAt": "2020-04-19T02:12:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwNjQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwNzMyMw==", "url": "https://github.com/oracle/graal/pull/2360#discussion_r410707323", "body": "typo: `Exeption`", "bodyText": "typo: Exeption", "bodyHTML": "<p dir=\"auto\">typo: <code>Exeption</code></p>", "author": "gergo-", "createdAt": "2020-04-18T14:48:54Z", "path": "compiler/src/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/IntrinsicGraphBuilder.java", "diffHunk": "@@ -134,12 +146,46 @@ protected IntrinsicGraphBuilder(OptionValues options, DebugContext debug, CorePr\n                 FixedWithNextNode fixedWithNextNode = (FixedWithNextNode) fixedNode;\n                 assert fixedWithNextNode.next() == null : \"cannot append instruction to instruction which isn't end\";\n                 lastInstr = fixedWithNextNode;\n+\n+            } else if (fixedNode instanceof WithExceptionNode) {\n+                WithExceptionNode withExceptionNode = (WithExceptionNode) fixedNode;\n+                AbstractBeginNode normalSuccessor;\n+                if (withExceptionNode instanceof SingleMemoryKill) {\n+                    normalSuccessor = graph.add(KillingBeginNode.create(((SingleMemoryKill) withExceptionNode).getKilledLocationIdentity()));\n+                } else if (withExceptionNode instanceof MultiMemoryKill) {\n+                    normalSuccessor = graph.add(MultiKillingBeginNode.create(((MultiMemoryKill) withExceptionNode).getKilledLocationIdentities()));\n+                } else {\n+                    assert !(withExceptionNode instanceof MemoryKill) : \"missing a MemoryKill\";\n+                    normalSuccessor = graph.add(new BeginNode());\n+                }\n+                ExceptionObjectNode exceptionSuccessor = graph.add(new ExceptionObjectNode(getMetaAccess()));\n+                setExeptionState(exceptionSuccessor);\n+                exceptionSuccessor.setNext(graph.add(new UnwindNode(exceptionSuccessor)));\n+\n+                if (unwindCreated) {\n+                    throw GraalError.shouldNotReachHere(\"Intrinsic graph can only have one node with an exception edge\");\n+                }\n+                unwindCreated = true;\n+\n+                withExceptionNode.setNext(normalSuccessor);\n+                withExceptionNode.setExceptionEdge(exceptionSuccessor);\n+                lastInstr = normalSuccessor;\n+\n             } else {\n                 lastInstr = null;\n             }\n         }\n     }\n \n+    /**\n+     * Currently unimplemented here, but implemented in subclasses that need it.\n+     *\n+     * @param exceptionObject The node that needs an exception state.\n+     */\n+    protected void setExeptionState(ExceptionObjectNode exceptionObject) {", "originalCommit": "c858675537ceef8035c9cccd64528f15e30747e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3b6ab04484877b0b7268abd2c911d66fac4025ff", "url": "https://github.com/oracle/graal/commit/3b6ab04484877b0b7268abd2c911d66fac4025ff", "message": "Support WithExceptionNode in IntrinsicGraphBuilder", "committedDate": "2020-04-19T02:17:26Z", "type": "commit"}, {"oid": "3b6ab04484877b0b7268abd2c911d66fac4025ff", "url": "https://github.com/oracle/graal/commit/3b6ab04484877b0b7268abd2c911d66fac4025ff", "message": "Support WithExceptionNode in IntrinsicGraphBuilder", "committedDate": "2020-04-19T02:17:26Z", "type": "forcePushed"}]}