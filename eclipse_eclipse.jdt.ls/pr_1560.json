{"pr_number": 1560, "pr_title": "Created type doesn't implement sealed interface.", "pr_author": "rgrunber", "pr_createdAt": "2020-10-06T18:52:47Z", "pr_url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560", "merge_commit": "e5ac0d8a67f3d29ab04adf2bd2814cab83d5578d", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1MTUzMA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r500951530", "body": "I'd say the default would be `final`. Since the user is trying to restrict implementations, it'd make more sense to leave those restricted as well by default", "bodyText": "I'd say the default would be final. Since the user is trying to restrict implementations, it'd make more sense to leave those restricted as well by default", "bodyHTML": "<p dir=\"auto\">I'd say the default would be <code>final</code>. Since the user is trying to restrict implementations, it'd make more sense to leave those restricted as well by default</p>", "author": "fbricon", "createdAt": "2020-10-07T11:55:42Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java", "diffHunk": "@@ -397,16 +398,26 @@ private String constructTypeStub(ICompilationUnit parentCU, String name, int mod\n \t\tif (modifiers != 0) {\n \t\t\tbuf.append(' ');\n \t\t}\n+\n+\t\tString[] permittedNames = fCompilationUnit.findPrimaryType().getPermittedSubtypeNames();\n+\t\tboolean isPermitted = Arrays.asList(permittedNames).stream().anyMatch(p -> name.equals(p));\n+\t\tif (isPermitted) {\n+\t\t\tbuf.append(\"non-sealed \");", "originalCommit": "73d99ee8cb099e0ed186e0810ae53e8e389668ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1NjQ5Mg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r500956492", "bodyText": "I don't remember if we're allowed to return snippets at that point, but if yes, and provided the client supports snippets, then returning ${1:|final,non-sealed,sealed|} would be the best.", "author": "fbricon", "createdAt": "2020-10-07T12:04:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1MTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyODEyNw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r501228127", "bodyText": "Cool feature. It would seem to be a great replacement for what JDT UI calls \"linked proposals\". There are proposals that allow cycling through a set of fixed values at various points of an applied code snippet/template.\nFrom what I can tell, only CompletionItem supports snippets through the CompletionItem#setInsertTextFormat(InsertTextFormat.Snippet), assuming the client supports it. However, quick fixes/assists are represented as CodeAction, and I don't see a way of indicating the TextEdit(s) may contain snippets for resolution.\nFor now I've set it to final.", "author": "rgrunber", "createdAt": "2020-10-07T18:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1MTUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\nindex 1b4fcd9d..42f19352 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n", "chunk": "@@ -402,7 +400,7 @@ public class NewCUProposal extends ChangeCorrectionProposal {\n \t\tString[] permittedNames = fCompilationUnit.findPrimaryType().getPermittedSubtypeNames();\n \t\tboolean isPermitted = Arrays.asList(permittedNames).stream().anyMatch(p -> name.equals(p));\n \t\tif (isPermitted) {\n-\t\t\tbuf.append(\"non-sealed \");\n+\t\t\tbuf.append(\"final \");\n \t\t}\n \n \t\tString type = \"\"; //$NON-NLS-1$\n", "next_change": {"commit": "c8dbec12a74fc071d3456305e98f374e8b2b60bf", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\nindex 42f19352..37a21c39 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n", "chunk": "@@ -397,7 +397,8 @@ public class NewCUProposal extends ChangeCorrectionProposal {\n \t\t\tbuf.append(' ');\n \t\t}\n \n-\t\tString[] permittedNames = fCompilationUnit.findPrimaryType().getPermittedSubtypeNames();\n+\t\tIType cuType = fCompilationUnit.findPrimaryType();\n+\t\tString[] permittedNames = cuType.getPermittedSubtypeNames();\n \t\tboolean isPermitted = Arrays.asList(permittedNames).stream().anyMatch(p -> name.equals(p));\n \t\tif (isPermitted) {\n \t\t\tbuf.append(\"final \");\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "e5ac0d8a67f3d29ab04adf2bd2814cab83d5578d", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\nindex 1b4fcd9d..37a21c39 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n", "chunk": "@@ -392,17 +390,18 @@ public class NewCUProposal extends ChangeCorrectionProposal {\n \t * Called from createType to construct the source for this type\n \t */\n \tprivate String constructTypeStub(ICompilationUnit parentCU, String name, int modifiers, String lineDelimiter) throws CoreException {\n-\t\tStringBuffer buf = new StringBuffer();\n+\t\tStringBuilder buf = new StringBuilder();\n \n \t\tbuf.append(Flags.toString(modifiers));\n \t\tif (modifiers != 0) {\n \t\t\tbuf.append(' ');\n \t\t}\n \n-\t\tString[] permittedNames = fCompilationUnit.findPrimaryType().getPermittedSubtypeNames();\n+\t\tIType cuType = fCompilationUnit.findPrimaryType();\n+\t\tString[] permittedNames = cuType.getPermittedSubtypeNames();\n \t\tboolean isPermitted = Arrays.asList(permittedNames).stream().anyMatch(p -> name.equals(p));\n \t\tif (isPermitted) {\n-\t\t\tbuf.append(\"non-sealed \");\n+\t\t\tbuf.append(\"final \");\n \t\t}\n \n \t\tString type = \"\"; //$NON-NLS-1$\n", "next_change": null}]}, "commits_in_main": [{"oid": "e5ac0d8a67f3d29ab04adf2bd2814cab83d5578d", "message": "Merge commit", "committedDate": null}, {"oid": "82385b3251d29e3f0fc10f3aca295e1aa38323e4", "committedDate": "2021-04-16 23:31:34 +0200", "message": "NPE in NewCUProposal.createChange() (#1729)"}, {"oid": "d13bb28368e72549e225f109fd07d5126ffc0dc9", "committedDate": "2021-10-25 13:29:58 -0400", "message": "Remove some classes from o.e.jdt.ls.internal.corext.refactoring and use"}, {"oid": "791f30ed63f9960d5ad7dc2e9ba3b9e203cf2b9a", "committedDate": "2021-12-09 11:29:06 -0500", "message": "Use CreateFileChange from org.eclipse.jdt.ls.core"}, {"oid": "e3f5c743fdb395a8d1b6ef5154c75645b5939380", "committedDate": "2022-04-08 18:39:23 -0400", "message": "Provide file & type comments for newly created compilation units"}, {"oid": "438e6192cc327960f82d3086bc5f374a5cfaeca7", "committedDate": "2022-12-08 20:11:10 -0500", "message": "Use instanceof-pattern"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1MjEwNg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r500952106", "body": "We already know parent and type are not null, since they're an instance of Type.\r\n\r\nI think you want to check if typeDecl != null at some point", "bodyText": "We already know parent and type are not null, since they're an instance of Type.\nI think you want to check if typeDecl != null at some point", "bodyHTML": "<p dir=\"auto\">We already know parent and type are not null, since they're an instance of Type.</p>\n<p dir=\"auto\">I think you want to check if typeDecl != null at some point</p>", "author": "fbricon", "createdAt": "2020-10-07T11:56:49Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java", "diffHunk": "@@ -550,6 +550,25 @@ private static boolean hasFieldWithName(ITypeBinding typeBinding, String name) {\n \n \tprivate static int evauateTypeKind(ASTNode node, IJavaProject project) {\n \t\tint kind = ASTResolving.getPossibleTypeKinds(node, JavaModelUtil.is50OrHigher(project));\n+\n+\t\t/*\n+\t\t *  TODO : This code block should be contributed to ASTResolving.getPossibleTypeKinds(..)\n+\t\t *  Support determining type of the 'permits' node type.\n+\t\t */\n+\t\tASTNode parent = node.getParent();\n+\t\tif (parent instanceof Type) {\n+\t\t\tType type = (Type) parent;\n+\t\t\tTypeDeclaration typeDecl = ASTNodes.getParent(node, TypeDeclaration.class);\n+\t\t\tif (parent != null && type != null) {", "originalCommit": "73d99ee8cb099e0ed186e0810ae53e8e389668ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyMjQ3NA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r501222474", "bodyText": "Done. Moved typeDecl non-null check prior to calling typeDecl.isInterface().", "author": "rgrunber", "createdAt": "2020-10-07T18:24:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1MjEwNg=="}], "type": "inlineReview", "revised_code": {"commit": "d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java\nindex 55f9a94c..b9665829 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java\n", "chunk": "@@ -559,12 +559,10 @@ public class UnresolvedElementsSubProcessor {\n \t\tif (parent instanceof Type) {\n \t\t\tType type = (Type) parent;\n \t\t\tTypeDeclaration typeDecl = ASTNodes.getParent(node, TypeDeclaration.class);\n-\t\t\tif (parent != null && type != null) {\n-\t\t\t\tif (type.getLocationInParent() == TypeDeclaration.PERMITS_TYPES_PROPERTY) {\n-\t\t\t\t\tkind = TypeKinds.CLASSES;\n-\t\t\t\t\tif (typeDecl.isInterface()) {\n-\t\t\t\t\t\tkind |= TypeKinds.INTERFACES;\n-\t\t\t\t\t}\n+\t\t\tif (type.getLocationInParent() == TypeDeclaration.PERMITS_TYPES_PROPERTY) {\n+\t\t\t\tkind = TypeKinds.CLASSES;\n+\t\t\t\tif (typeDecl != null && typeDecl.isInterface()) {\n+\t\t\t\t\tkind |= TypeKinds.INTERFACES;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "e5ac0d8a67f3d29ab04adf2bd2814cab83d5578d", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java\nindex 55f9a94c..b9665829 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java\n", "chunk": "@@ -559,12 +559,10 @@ public class UnresolvedElementsSubProcessor {\n \t\tif (parent instanceof Type) {\n \t\t\tType type = (Type) parent;\n \t\t\tTypeDeclaration typeDecl = ASTNodes.getParent(node, TypeDeclaration.class);\n-\t\t\tif (parent != null && type != null) {\n-\t\t\t\tif (type.getLocationInParent() == TypeDeclaration.PERMITS_TYPES_PROPERTY) {\n-\t\t\t\t\tkind = TypeKinds.CLASSES;\n-\t\t\t\t\tif (typeDecl.isInterface()) {\n-\t\t\t\t\t\tkind |= TypeKinds.INTERFACES;\n-\t\t\t\t\t}\n+\t\t\tif (type.getLocationInParent() == TypeDeclaration.PERMITS_TYPES_PROPERTY) {\n+\t\t\t\tkind = TypeKinds.CLASSES;\n+\t\t\t\tif (typeDecl != null && typeDecl.isInterface()) {\n+\t\t\t\t\tkind |= TypeKinds.INTERFACES;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n", "next_change": {"commit": "d96d5dd75ad385afe9b701c572a78e48a3efb049", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java\nindex b9665829..8164110c 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java\n", "chunk": "@@ -550,23 +550,6 @@ public class UnresolvedElementsSubProcessor {\n \n \tprivate static int evauateTypeKind(ASTNode node, IJavaProject project) {\n \t\tint kind = ASTResolving.getPossibleTypeKinds(node, JavaModelUtil.is50OrHigher(project));\n-\n-\t\t/*\n-\t\t *  TODO : This code block should be contributed to ASTResolving.getPossibleTypeKinds(..)\n-\t\t *  Support determining type of the 'permits' node type.\n-\t\t */\n-\t\tASTNode parent = node.getParent();\n-\t\tif (parent instanceof Type) {\n-\t\t\tType type = (Type) parent;\n-\t\t\tTypeDeclaration typeDecl = ASTNodes.getParent(node, TypeDeclaration.class);\n-\t\t\tif (type.getLocationInParent() == TypeDeclaration.PERMITS_TYPES_PROPERTY) {\n-\t\t\t\tkind = TypeKinds.CLASSES;\n-\t\t\t\tif (typeDecl != null && typeDecl.isInterface()) {\n-\t\t\t\t\tkind |= TypeKinds.INTERFACES;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n \t\treturn kind;\n \t}\n \n", "next_change": {"commit": "2efcdfb3fee7548cc2d2f405ede9e6010c5bc6d2", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java\nindex 8164110c..d9716ea1 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java\n", "chunk": "@@ -557,8 +559,19 @@ public class UnresolvedElementsSubProcessor {\n \tpublic static void getTypeProposals(IInvocationContext context, IProblemLocationCore problem,\n \t\t\tCollection<ChangeCorrectionProposal> proposals) throws CoreException {\n \t\tICompilationUnit cu= context.getCompilationUnit();\n-\n-\t\tASTNode selectedNode= problem.getCoveringNode(context.getASTRoot());\n+\t\tASTNode selectedNode;\n+\t\tif (problem.getProblemId() == IProblem.UndefinedType && cu.getBuffer() != null && cu.getBuffer().getChar(problem.getOffset()) == '@') {\n+\t\t\tint offset = problem.getOffset() + 1;\n+\t\t\tint length = problem.getLength() - 1;\n+\t\t\twhile (offset < cu.getBuffer().getLength() && length >= 0 && Character.isWhitespace(cu.getBuffer().getChar(offset))) {\n+\t\t\t\toffset++;\n+\t\t\t\tlength--;\n+\t\t\t}\n+\t\t\tNodeFinder finder = new NodeFinder(context.getASTRoot(), offset, length);\n+\t\t\tselectedNode = finder.getCoveringNode();\n+\t\t} else {\n+\t\t\tselectedNode = problem.getCoveringNode(context.getASTRoot());\n+\t\t}\n \t\tif (selectedNode == null) {\n \t\t\treturn;\n \t\t}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "e5ac0d8a67f3d29ab04adf2bd2814cab83d5578d", "message": "Merge commit", "committedDate": null}, {"oid": "d96d5dd75ad385afe9b701c572a78e48a3efb049", "committedDate": "2020-11-20 01:35:05 +0100", "message": "Update TP to use Eclipse 2020-12 M2."}, {"oid": "2efcdfb3fee7548cc2d2f405ede9e6010c5bc6d2", "committedDate": "2021-07-07 23:48:02 +0200", "message": "quickfix not available where cursor lands by default on annotations (#1812)"}, {"oid": "f07c1a5c8e04e86d03180751c88c29b19ac29591", "committedDate": "2022-11-04 14:38:39 -0400", "message": "Support \"Add all missing imports\" (#2292)"}, {"oid": "5bdac979161b34cae73b9ed66733b5d867cce9d8", "committedDate": "2022-11-22 09:44:02 +0800", "message": "fix multiple add missing imports at one line (#2337)"}, {"oid": "438e6192cc327960f82d3086bc5f374a5cfaeca7", "committedDate": "2022-12-08 20:11:10 -0500", "message": "Use instanceof-pattern"}, {"oid": "1181a0ea83bed6f03c6830e088954d7f0329782a", "committedDate": "2023-03-23 11:43:49 -0400", "message": "increase relevance of create enum"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1Mzg5NQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r500953895", "body": "public final", "bodyText": "public final", "bodyHTML": "<p dir=\"auto\">public final</p>", "author": "fbricon", "createdAt": "2020-10-07T12:00:08Z", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java", "diffHunk": "@@ -1400,4 +1403,30 @@ public void testDontImportTestClassesInMainCode() throws Exception {\n \t\tassertCodeActionNotExists(cu1, \"Import 'Tests' (pt)\");\n \t}\n \n+\t@Test\n+\tpublic void testTypeInSealedTypeDeclaration() throws Exception {\n+\t\tMap<String, String> options15 = new HashMap<>();\n+\t\tJavaModelUtil.setComplianceOptions(options15, JavaCore.VERSION_15);\n+\t\toptions15.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n+\t\toptions15.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n+\t\tfJProject1.setOptions(options15);\n+\n+\t\tIPackageFragment pack1 = fSourceFolder.createPackageFragment(\"test1\", false, null);\n+\t\tStringBuilder buf = new StringBuilder();\n+\t\tbuf.append(\"package test1;\\n\");\n+\t\tbuf.append(\"public sealed interface E permits F {\\n\");\n+\t\tbuf.append(\"}\\n\");\n+\t\tICompilationUnit cu = pack1.createCompilationUnit(\"E.java\", buf.toString(), false, null);\n+\n+\t\tbuf = new StringBuilder();\n+\t\tbuf.append(\"package test1;\\n\");\n+\t\tbuf.append(\"\\n\");\n+\t\tbuf.append(\"public non-sealed class F implements E {\\n\");", "originalCommit": "73d99ee8cb099e0ed186e0810ae53e8e389668ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyMjY0Nw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r501222647", "bodyText": "Done.", "author": "rgrunber", "createdAt": "2020-10-07T18:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1Mzg5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\nindex 9fef296f..75e93052 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n", "chunk": "@@ -1421,7 +1421,7 @@ public class UnresolvedTypesQuickFixTest extends AbstractQuickFixTest {\n \t\tbuf = new StringBuilder();\n \t\tbuf.append(\"package test1;\\n\");\n \t\tbuf.append(\"\\n\");\n-\t\tbuf.append(\"public non-sealed class F implements E {\\n\");\n+\t\tbuf.append(\"public final class F implements E {\\n\");\n \t\tbuf.append(\"\\n\");\n \t\tbuf.append(\"}\\n\");\n \t\tExpected e1 = new Expected(\"Create class 'F'\", buf.toString());\n", "next_change": null}]}, "revised_code_in_main": {"commit": "e5ac0d8a67f3d29ab04adf2bd2814cab83d5578d", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\nindex 9fef296f..75e93052 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n", "chunk": "@@ -1421,7 +1421,7 @@ public class UnresolvedTypesQuickFixTest extends AbstractQuickFixTest {\n \t\tbuf = new StringBuilder();\n \t\tbuf.append(\"package test1;\\n\");\n \t\tbuf.append(\"\\n\");\n-\t\tbuf.append(\"public non-sealed class F implements E {\\n\");\n+\t\tbuf.append(\"public final class F implements E {\\n\");\n \t\tbuf.append(\"\\n\");\n \t\tbuf.append(\"}\\n\");\n \t\tExpected e1 = new Expected(\"Create class 'F'\", buf.toString());\n", "next_change": {"commit": "e3f5c743fdb395a8d1b6ef5154c75645b5939380", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\nindex 75e93052..def2c0c5 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n", "chunk": "@@ -1421,6 +1504,10 @@ public class UnresolvedTypesQuickFixTest extends AbstractQuickFixTest {\n \t\tbuf = new StringBuilder();\n \t\tbuf.append(\"package test1;\\n\");\n \t\tbuf.append(\"\\n\");\n+\t\tbuf.append(\"/**\\n\");\n+\t\tbuf.append(\" * \\n\");\n+\t\tbuf.append(\" */\\n\");\n+\t\tbuf.append(\"\\n\");\n \t\tbuf.append(\"public final class F implements E {\\n\");\n \t\tbuf.append(\"\\n\");\n \t\tbuf.append(\"}\\n\");\n", "next_change": {"commit": "f07c1a5c8e04e86d03180751c88c29b19ac29591", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\nindex def2c0c5..000b525a 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n", "chunk": "@@ -1516,4 +1516,37 @@ public class UnresolvedTypesQuickFixTest extends AbstractQuickFixTest {\n \t\tassertCodeActions(cu, e1);\n \t}\n \n+\t@Test\n+\tpublic void testAddAllMissingImports() throws Exception {\n+\t\tIPackageFragment pack1 = fSourceFolder.createPackageFragment(\"pack\", false, null);\n+\t\tStringBuilder buf = new StringBuilder();\n+\t\tbuf.append(\"package test1;\\n\");\n+\t\tbuf.append(\"\\n\");\n+\t\tbuf.append(\"public class E {\\n\");\n+\t\tbuf.append(\"    Vector vec;\\n\");\n+\t\tbuf.append(\"    List<String> b;\\n\");\n+\t\tbuf.append(\"}\\n\");\n+\t\tICompilationUnit cu = pack1.createCompilationUnit(\"E.java\", buf.toString(), false, null);\n+\t\t// assert quick fix exists\n+\t\tassertCodeActionExists(cu, \"Add all missing imports\");\n+\n+\t\t// use source action to test the return TextEdit\n+\t\tsetIgnoredKind(CodeActionKind.QuickFix);\n+\t\tbuf = new StringBuilder();\n+\t\tbuf.append(\"package test1;\\n\");\n+\t\tbuf.append(\"\\n\");\n+\t\tbuf.append(\"import java.util.List;\\n\");\n+\t\tbuf.append(\"import java.util.Vector;\\n\");\n+\t\tbuf.append(\"\\n\");\n+\t\tbuf.append(\"public class E {\\n\");\n+\t\tbuf.append(\"    Vector vec;\\n\");\n+\t\tbuf.append(\"    List<String> b;\\n\");\n+\t\tbuf.append(\"}\\n\");\n+\t\tExpected e1 = new Expected(\"Add all missing imports\", buf.toString());\n+\t\tassertCodeActions(cu, e1);\n+\n+\t\t// restore the ignored kind\n+\t\tsetIgnoredKind(CodeActionKind.Source + \".*\");\n+\t}\n+\n }\n\\ No newline at end of file\n", "next_change": {"commit": "5bdac979161b34cae73b9ed66733b5d867cce9d8", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\nindex 000b525a..916096df 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n", "chunk": "@@ -1549,4 +1554,26 @@ public class UnresolvedTypesQuickFixTest extends AbstractQuickFixTest {\n \t\tsetIgnoredKind(CodeActionKind.Source + \".*\");\n \t}\n \n+\t@Test\n+\tpublic void testMultipleAddAllMissingImports() throws Exception {\n+\t\tIPackageFragment pack1 = fSourceFolder.createPackageFragment(\"pack\", false, null);\n+\t\tStringBuilder buf = new StringBuilder();\n+\t\tbuf.append(\"package test1;\\n\");\n+\t\tbuf.append(\"\\n\");\n+\t\tbuf.append(\"public class E {\\n\");\n+\t\tbuf.append(\"    @Retention(RetentionPolicy.RUNTIME)\\n\");\n+\t\tbuf.append(\"    private void test() {\\n\");\n+\t\tbuf.append(\"    }\\n\");\n+\t\tbuf.append(\"}\\n\");\n+\t\tICompilationUnit cu = pack1.createCompilationUnit(\"E.java\", buf.toString(), false, null);\n+\t\t// assert quick fix exists\n+\t\tList<Either<Command, CodeAction>> codeActions = evaluateCodeActions(cu, new Range(new Position(3, 4), new Position(3, 4)));\n+\t\tList<CodeAction> addAllMissingImportsActions = codeActions.stream()\n+\t\t\t.filter((action) -> action.isRight())\n+\t\t\t.map((action) -> action.getRight())\n+\t\t\t.filter((action) -> action.getKind().equals((CodeActionKind.QuickFix)) && action.getTitle().equals(CorrectionMessages.UnresolvedElementsSubProcessor_add_allMissing_imports_description))\n+\t\t\t.collect(Collectors.toList());\n+\t\tassertEquals(1, addAllMissingImportsActions.size());\n+\t}\n+\n }\n\\ No newline at end of file\n", "next_change": {"commit": "7a62d824c15c2bc18ef67aa372f6090f119dee9c", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\nindex 916096df..de4171f2 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n", "chunk": "@@ -1576,4 +1575,31 @@ public class UnresolvedTypesQuickFixTest extends AbstractQuickFixTest {\n \t\tassertEquals(1, addAllMissingImportsActions.size());\n \t}\n \n+\t@Test\n+\tpublic void testIgnoreTypeFilter() throws Exception {\n+\t\tIPackageFragment pack1 = fSourceFolder.createPackageFragment(\"test1\", false, null);\n+\t\tString before = \"\"\"\n+package test1;\n+import java.util.ArrayList;\n+public class E {\n+\tvoid foo() {\n+\t\tList v= new ArrayList();\n+\t}\n+}\"\"\";\n+\t\tICompilationUnit cu = pack1.createCompilationUnit(\"E.java\", before, false, null);\n+\n+\t\tString after = \"\"\"\n+package test1;\n+import java.util.ArrayList;\n+import java.util.List;\n+public class E {\n+\tvoid foo() {\n+\t\tList v= new ArrayList();\n+\t}\n+}\"\"\";\n+\t\tExpected e1 = new Expected(\"Import 'List' (java.util)\", after);\n+\n+\t\tassertCodeActions(cu, e1);\n+\t}\n+\n }\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "e5ac0d8a67f3d29ab04adf2bd2814cab83d5578d", "message": "Merge commit", "committedDate": null}, {"oid": "3756738411a665a0fa6636bba3d97f321046fa50", "committedDate": "2021-03-19 12:11:01 +0100", "message": "Update Target Platform to 2021-03 Release."}, {"oid": "958ec96451c9241b18f7129edb41b235779f6c3d", "committedDate": "2021-03-25 16:50:17 -0400", "message": "Revert Java 16 support for the 1.0 release"}, {"oid": "de0fb4e24849df0987d5b0969989d5902f5c0054", "committedDate": "2021-04-20 10:21:03 +0200", "message": "Add Java 16 Support."}, {"oid": "11302ccf40b05c44fd4c8fb8ed3db913ac87272a", "committedDate": "2021-09-20 16:01:25 -0400", "message": "Support Java 17"}, {"oid": "791f30ed63f9960d5ad7dc2e9ba3b9e203cf2b9a", "committedDate": "2021-12-09 11:29:06 -0500", "message": "Use CreateFileChange from org.eclipse.jdt.ls.core"}, {"oid": "c15fe895fdc3eaca1386ff1cebde36f3af63f733", "committedDate": "2022-04-07 15:01:09 -0400", "message": "Provide Java 18 support"}, {"oid": "e3f5c743fdb395a8d1b6ef5154c75645b5939380", "committedDate": "2022-04-08 18:39:23 -0400", "message": "Provide file & type comments for newly created compilation units"}, {"oid": "ec927faca029a306c6ff93db0835d95f0d40520b", "committedDate": "2022-09-06 10:30:12 +0200", "message": "Provide Java 19 preview support in pre-release build"}, {"oid": "f07c1a5c8e04e86d03180751c88c29b19ac29591", "committedDate": "2022-11-04 14:38:39 -0400", "message": "Support \"Add all missing imports\" (#2292)"}, {"oid": "5bdac979161b34cae73b9ed66733b5d867cce9d8", "committedDate": "2022-11-22 09:44:02 +0800", "message": "fix multiple add missing imports at one line (#2337)"}, {"oid": "7a62d824c15c2bc18ef67aa372f6090f119dee9c", "committedDate": "2023-02-22 15:27:44 +0800", "message": "Update types filter according to import declarations (#2474)"}, {"oid": "605d1dc15059c58abfbbc774c5cd399bf5ea7fce", "committedDate": "2023-04-14 11:09:54 -0400", "message": "Update to eclipse build 4.28 nightly builds. (#2586)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk2NTkxMQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r500965911", "body": "on L 395, please change `StringBuilder buf = new StringBuilder();`\r\n", "bodyText": "on L 395, please change StringBuilder buf = new StringBuilder();", "bodyHTML": "<p dir=\"auto\">on L 395, please change <code>StringBuilder buf = new StringBuilder();</code></p>", "author": "fbricon", "createdAt": "2020-10-07T12:20:23Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java", "diffHunk": "@@ -397,16 +398,26 @@ private String constructTypeStub(ICompilationUnit parentCU, String name, int mod\n \t\tif (modifiers != 0) {", "originalCommit": "73d99ee8cb099e0ed186e0810ae53e8e389668ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyMjgxOA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r501222818", "bodyText": "Done.", "author": "rgrunber", "createdAt": "2020-10-07T18:25:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk2NTkxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\nindex 1b4fcd9d..42f19352 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n", "chunk": "@@ -392,7 +390,7 @@ public class NewCUProposal extends ChangeCorrectionProposal {\n \t * Called from createType to construct the source for this type\n \t */\n \tprivate String constructTypeStub(ICompilationUnit parentCU, String name, int modifiers, String lineDelimiter) throws CoreException {\n-\t\tStringBuffer buf = new StringBuffer();\n+\t\tStringBuilder buf = new StringBuilder();\n \n \t\tbuf.append(Flags.toString(modifiers));\n \t\tif (modifiers != 0) {\n", "next_change": {"commit": "c8dbec12a74fc071d3456305e98f374e8b2b60bf", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\nindex 42f19352..37a21c39 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n", "chunk": "@@ -397,7 +397,8 @@ public class NewCUProposal extends ChangeCorrectionProposal {\n \t\t\tbuf.append(' ');\n \t\t}\n \n-\t\tString[] permittedNames = fCompilationUnit.findPrimaryType().getPermittedSubtypeNames();\n+\t\tIType cuType = fCompilationUnit.findPrimaryType();\n+\t\tString[] permittedNames = cuType.getPermittedSubtypeNames();\n \t\tboolean isPermitted = Arrays.asList(permittedNames).stream().anyMatch(p -> name.equals(p));\n \t\tif (isPermitted) {\n \t\t\tbuf.append(\"final \");\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "e5ac0d8a67f3d29ab04adf2bd2814cab83d5578d", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\nindex 1b4fcd9d..37a21c39 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n", "chunk": "@@ -392,17 +390,18 @@ public class NewCUProposal extends ChangeCorrectionProposal {\n \t * Called from createType to construct the source for this type\n \t */\n \tprivate String constructTypeStub(ICompilationUnit parentCU, String name, int modifiers, String lineDelimiter) throws CoreException {\n-\t\tStringBuffer buf = new StringBuffer();\n+\t\tStringBuilder buf = new StringBuilder();\n \n \t\tbuf.append(Flags.toString(modifiers));\n \t\tif (modifiers != 0) {\n \t\t\tbuf.append(' ');\n \t\t}\n \n-\t\tString[] permittedNames = fCompilationUnit.findPrimaryType().getPermittedSubtypeNames();\n+\t\tIType cuType = fCompilationUnit.findPrimaryType();\n+\t\tString[] permittedNames = cuType.getPermittedSubtypeNames();\n \t\tboolean isPermitted = Arrays.asList(permittedNames).stream().anyMatch(p -> name.equals(p));\n \t\tif (isPermitted) {\n-\t\t\tbuf.append(\"non-sealed \");\n+\t\t\tbuf.append(\"final \");\n \t\t}\n \n \t\tString type = \"\"; //$NON-NLS-1$\n", "next_change": null}]}, "commits_in_main": [{"oid": "e5ac0d8a67f3d29ab04adf2bd2814cab83d5578d", "message": "Merge commit", "committedDate": null}, {"oid": "82385b3251d29e3f0fc10f3aca295e1aa38323e4", "committedDate": "2021-04-16 23:31:34 +0200", "message": "NPE in NewCUProposal.createChange() (#1729)"}, {"oid": "d13bb28368e72549e225f109fd07d5126ffc0dc9", "committedDate": "2021-10-25 13:29:58 -0400", "message": "Remove some classes from o.e.jdt.ls.internal.corext.refactoring and use"}, {"oid": "791f30ed63f9960d5ad7dc2e9ba3b9e203cf2b9a", "committedDate": "2021-12-09 11:29:06 -0500", "message": "Use CreateFileChange from org.eclipse.jdt.ls.core"}, {"oid": "e3f5c743fdb395a8d1b6ef5154c75645b5939380", "committedDate": "2022-04-08 18:39:23 -0400", "message": "Provide file & type comments for newly created compilation units"}, {"oid": "438e6192cc327960f82d3086bc5f374a5cfaeca7", "committedDate": "2022-12-08 20:11:10 -0500", "message": "Use instanceof-pattern"}]}, {"oid": "d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "message": "Created type doesn't implement sealed interface.\n\n- Add quick fix to generate proper type declaration for sealed type\n- Fixes #1553\n- Add testcase\n\nSigned-off-by: Roland Grunberg <rgrunber@redhat.com>", "committedDate": "2020-10-07T18:21:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU1MDM5NA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r501550394", "body": "we could avoid calling fCompilationUnit.findPrimaryType() several times in the same method, since a bunch of processing is happening behind the scene every time.", "bodyText": "we could avoid calling fCompilationUnit.findPrimaryType() several times in the same method, since a bunch of processing is happening behind the scene every time.", "bodyHTML": "<p dir=\"auto\">we could avoid calling fCompilationUnit.findPrimaryType() several times in the same method, since a bunch of processing is happening behind the scene every time.</p>", "author": "fbricon", "createdAt": "2020-10-08T08:46:42Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java", "diffHunk": "@@ -391,22 +390,32 @@ private String constructCUContent(ICompilationUnit cu, String typeContent, Strin\n \t * Called from createType to construct the source for this type\n \t */\n \tprivate String constructTypeStub(ICompilationUnit parentCU, String name, int modifiers, String lineDelimiter) throws CoreException {\n-\t\tStringBuffer buf = new StringBuffer();\n+\t\tStringBuilder buf = new StringBuilder();\n \n \t\tbuf.append(Flags.toString(modifiers));\n \t\tif (modifiers != 0) {\n \t\t\tbuf.append(' ');\n \t\t}\n+\n+\t\tString[] permittedNames = fCompilationUnit.findPrimaryType().getPermittedSubtypeNames();\n+\t\tboolean isPermitted = Arrays.asList(permittedNames).stream().anyMatch(p -> name.equals(p));\n+\t\tif (isPermitted) {\n+\t\t\tbuf.append(\"final \");\n+\t\t}\n+\n \t\tString type = \"\"; //$NON-NLS-1$\n \t\tString templateID = \"\"; //$NON-NLS-1$\n+\t\tString superType = \"\"; //$NON-NLS-1$\n \t\tswitch (fTypeKind) {\n \t\t\tcase K_CLASS:\n \t\t\t\ttype = \"class \"; //$NON-NLS-1$\n \t\t\t\ttemplateID = CodeGeneration.CLASS_BODY_TEMPLATE_ID;\n+\t\t\t\tsuperType = fCompilationUnit.findPrimaryType().isInterface() ? \"implements \" : \"extends \";", "originalCommit": "d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8dbec12a74fc071d3456305e98f374e8b2b60bf", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\nindex 42f19352..37a21c39 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n", "chunk": "@@ -410,7 +411,7 @@ public class NewCUProposal extends ChangeCorrectionProposal {\n \t\t\tcase K_CLASS:\n \t\t\t\ttype = \"class \"; //$NON-NLS-1$\n \t\t\t\ttemplateID = CodeGeneration.CLASS_BODY_TEMPLATE_ID;\n-\t\t\t\tsuperType = fCompilationUnit.findPrimaryType().isInterface() ? \"implements \" : \"extends \";\n+\t\t\t\tsuperType = cuType.isInterface() ? \"implements \" : \"extends \";\n \t\t\t\tbreak;\n \t\t\tcase K_INTERFACE:\n \t\t\t\ttype = \"interface \"; //$NON-NLS-1$\n", "next_change": null}]}, "revised_code_in_main": {"commit": "e5ac0d8a67f3d29ab04adf2bd2814cab83d5578d", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\nindex 42f19352..37a21c39 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n", "chunk": "@@ -410,7 +411,7 @@ public class NewCUProposal extends ChangeCorrectionProposal {\n \t\t\tcase K_CLASS:\n \t\t\t\ttype = \"class \"; //$NON-NLS-1$\n \t\t\t\ttemplateID = CodeGeneration.CLASS_BODY_TEMPLATE_ID;\n-\t\t\t\tsuperType = fCompilationUnit.findPrimaryType().isInterface() ? \"implements \" : \"extends \";\n+\t\t\t\tsuperType = cuType.isInterface() ? \"implements \" : \"extends \";\n \t\t\t\tbreak;\n \t\t\tcase K_INTERFACE:\n \t\t\t\ttype = \"interface \"; //$NON-NLS-1$\n", "next_change": null}]}, "commits_in_main": [{"oid": "e5ac0d8a67f3d29ab04adf2bd2814cab83d5578d", "message": "Merge commit", "committedDate": null}, {"oid": "82385b3251d29e3f0fc10f3aca295e1aa38323e4", "committedDate": "2021-04-16 23:31:34 +0200", "message": "NPE in NewCUProposal.createChange() (#1729)"}, {"oid": "d13bb28368e72549e225f109fd07d5126ffc0dc9", "committedDate": "2021-10-25 13:29:58 -0400", "message": "Remove some classes from o.e.jdt.ls.internal.corext.refactoring and use"}, {"oid": "791f30ed63f9960d5ad7dc2e9ba3b9e203cf2b9a", "committedDate": "2021-12-09 11:29:06 -0500", "message": "Use CreateFileChange from org.eclipse.jdt.ls.core"}, {"oid": "e3f5c743fdb395a8d1b6ef5154c75645b5939380", "committedDate": "2022-04-08 18:39:23 -0400", "message": "Provide file & type comments for newly created compilation units"}, {"oid": "438e6192cc327960f82d3086bc5f374a5cfaeca7", "committedDate": "2022-12-08 20:11:10 -0500", "message": "Use instanceof-pattern"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU1MDkyMA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r501550920", "body": "Assign fCompilationUnit.findPrimaryType() to a variable and reuse it on L413 and L434", "bodyText": "Assign fCompilationUnit.findPrimaryType() to a variable and reuse it on L413 and L434", "bodyHTML": "<p dir=\"auto\">Assign fCompilationUnit.findPrimaryType() to a variable and reuse it on L413 and L434</p>", "author": "fbricon", "createdAt": "2020-10-08T08:47:31Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java", "diffHunk": "@@ -391,22 +390,32 @@ private String constructCUContent(ICompilationUnit cu, String typeContent, Strin\n \t * Called from createType to construct the source for this type\n \t */\n \tprivate String constructTypeStub(ICompilationUnit parentCU, String name, int modifiers, String lineDelimiter) throws CoreException {\n-\t\tStringBuffer buf = new StringBuffer();\n+\t\tStringBuilder buf = new StringBuilder();\n \n \t\tbuf.append(Flags.toString(modifiers));\n \t\tif (modifiers != 0) {\n \t\t\tbuf.append(' ');\n \t\t}\n+\n+\t\tString[] permittedNames = fCompilationUnit.findPrimaryType().getPermittedSubtypeNames();", "originalCommit": "d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8dbec12a74fc071d3456305e98f374e8b2b60bf", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\nindex 42f19352..37a21c39 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n", "chunk": "@@ -397,7 +397,8 @@ public class NewCUProposal extends ChangeCorrectionProposal {\n \t\t\tbuf.append(' ');\n \t\t}\n \n-\t\tString[] permittedNames = fCompilationUnit.findPrimaryType().getPermittedSubtypeNames();\n+\t\tIType cuType = fCompilationUnit.findPrimaryType();\n+\t\tString[] permittedNames = cuType.getPermittedSubtypeNames();\n \t\tboolean isPermitted = Arrays.asList(permittedNames).stream().anyMatch(p -> name.equals(p));\n \t\tif (isPermitted) {\n \t\t\tbuf.append(\"final \");\n", "next_change": null}]}, "revised_code_in_main": {"commit": "e5ac0d8a67f3d29ab04adf2bd2814cab83d5578d", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\nindex 42f19352..37a21c39 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n", "chunk": "@@ -397,7 +397,8 @@ public class NewCUProposal extends ChangeCorrectionProposal {\n \t\t\tbuf.append(' ');\n \t\t}\n \n-\t\tString[] permittedNames = fCompilationUnit.findPrimaryType().getPermittedSubtypeNames();\n+\t\tIType cuType = fCompilationUnit.findPrimaryType();\n+\t\tString[] permittedNames = cuType.getPermittedSubtypeNames();\n \t\tboolean isPermitted = Arrays.asList(permittedNames).stream().anyMatch(p -> name.equals(p));\n \t\tif (isPermitted) {\n \t\t\tbuf.append(\"final \");\n", "next_change": null}]}, "commits_in_main": [{"oid": "e5ac0d8a67f3d29ab04adf2bd2814cab83d5578d", "message": "Merge commit", "committedDate": null}, {"oid": "82385b3251d29e3f0fc10f3aca295e1aa38323e4", "committedDate": "2021-04-16 23:31:34 +0200", "message": "NPE in NewCUProposal.createChange() (#1729)"}, {"oid": "d13bb28368e72549e225f109fd07d5126ffc0dc9", "committedDate": "2021-10-25 13:29:58 -0400", "message": "Remove some classes from o.e.jdt.ls.internal.corext.refactoring and use"}, {"oid": "791f30ed63f9960d5ad7dc2e9ba3b9e203cf2b9a", "committedDate": "2021-12-09 11:29:06 -0500", "message": "Use CreateFileChange from org.eclipse.jdt.ls.core"}, {"oid": "e3f5c743fdb395a8d1b6ef5154c75645b5939380", "committedDate": "2022-04-08 18:39:23 -0400", "message": "Provide file & type comments for newly created compilation units"}, {"oid": "438e6192cc327960f82d3086bc5f374a5cfaeca7", "committedDate": "2022-12-08 20:11:10 -0500", "message": "Use instanceof-pattern"}]}, {"oid": "c8dbec12a74fc071d3456305e98f374e8b2b60bf", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/c8dbec12a74fc071d3456305e98f374e8b2b60bf", "message": "Created type doesn't implement sealed interface.\n\n- Add quick fix to generate proper type declaration for sealed type\n- Fixes #1553\n- Add testcase\n\nSigned-off-by: Roland Grunberg <rgrunber@redhat.com>", "committedDate": "2020-10-08T21:16:31Z", "type": "commit"}, {"oid": "c8dbec12a74fc071d3456305e98f374e8b2b60bf", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/c8dbec12a74fc071d3456305e98f374e8b2b60bf", "message": "Created type doesn't implement sealed interface.\n\n- Add quick fix to generate proper type declaration for sealed type\n- Fixes #1553\n- Add testcase\n\nSigned-off-by: Roland Grunberg <rgrunber@redhat.com>", "committedDate": "2020-10-08T21:16:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5NjM4MQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r503996381", "body": "if E declares methods, then class F implements E but not those methods, leading to a compilation error", "bodyText": "if E declares methods, then class F implements E but not those methods, leading to a compilation error", "bodyHTML": "<p dir=\"auto\">if E declares methods, then class F implements E but not those methods, leading to a compilation error</p>", "author": "fbricon", "createdAt": "2020-10-13T14:25:08Z", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java", "diffHunk": "@@ -1400,4 +1403,30 @@ public void testDontImportTestClassesInMainCode() throws Exception {\n \t\tassertCodeActionNotExists(cu1, \"Import 'Tests' (pt)\");\n \t}\n \n+\t@Test\n+\tpublic void testTypeInSealedTypeDeclaration() throws Exception {\n+\t\tMap<String, String> options15 = new HashMap<>();\n+\t\tJavaModelUtil.setComplianceOptions(options15, JavaCore.VERSION_15);\n+\t\toptions15.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n+\t\toptions15.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n+\t\tfJProject1.setOptions(options15);\n+\n+\t\tIPackageFragment pack1 = fSourceFolder.createPackageFragment(\"test1\", false, null);\n+\t\tStringBuilder buf = new StringBuilder();\n+\t\tbuf.append(\"package test1;\\n\");\n+\t\tbuf.append(\"public sealed interface E permits F {\\n\");", "originalCommit": "c8dbec12a74fc071d3456305e98f374e8b2b60bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA5MzMwNw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r504093307", "bodyText": "I'll have another look at this. The initial problem I had was that adding the \"add unimplemented methods\" quick fix to the end of the existing one would fail because the ASTRewrite complained if the underlying CU didn't yet exist (which is the case here for F). This is why a lot of the code uses literal values to generate the code (eg. StubUtility* helpers). I could try calling StubUtility2Core.createImplementationStubCore(..) directly once we get the unimplemented methods but even that seems to require an ASTRewrite.\nWhen E declares methods, and after the create type is applied, there should be a separate quick fix to add those unimplemented methods.", "author": "rgrunber", "createdAt": "2020-10-13T16:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5NjM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5ODUwNA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r504698504", "bodyText": "So given this is a more global issue with generated types, we'll address this in a separate issue.", "author": "fbricon", "createdAt": "2020-10-14T13:56:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5NjM4MQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "3756738411a665a0fa6636bba3d97f321046fa50", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\nindex 75e93052..ad27a6ef 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n", "chunk": "@@ -1405,11 +1405,11 @@ public class UnresolvedTypesQuickFixTest extends AbstractQuickFixTest {\n \n \t@Test\n \tpublic void testTypeInSealedTypeDeclaration() throws Exception {\n-\t\tMap<String, String> options15 = new HashMap<>();\n-\t\tJavaModelUtil.setComplianceOptions(options15, JavaCore.VERSION_15);\n-\t\toptions15.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n-\t\toptions15.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n-\t\tfJProject1.setOptions(options15);\n+\t\tMap<String, String> options16 = new HashMap<>();\n+\t\tJavaModelUtil.setComplianceOptions(options16, JavaCore.VERSION_16);\n+\t\toptions16.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n+\t\toptions16.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n+\t\tfJProject1.setOptions(options16);\n \n \t\tIPackageFragment pack1 = fSourceFolder.createPackageFragment(\"test1\", false, null);\n \t\tStringBuilder buf = new StringBuilder();\n", "next_change": {"commit": "958ec96451c9241b18f7129edb41b235779f6c3d", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\nindex ad27a6ef..75e93052 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n", "chunk": "@@ -1405,11 +1405,11 @@ public class UnresolvedTypesQuickFixTest extends AbstractQuickFixTest {\n \n \t@Test\n \tpublic void testTypeInSealedTypeDeclaration() throws Exception {\n-\t\tMap<String, String> options16 = new HashMap<>();\n-\t\tJavaModelUtil.setComplianceOptions(options16, JavaCore.VERSION_16);\n-\t\toptions16.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n-\t\toptions16.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n-\t\tfJProject1.setOptions(options16);\n+\t\tMap<String, String> options15 = new HashMap<>();\n+\t\tJavaModelUtil.setComplianceOptions(options15, JavaCore.VERSION_15);\n+\t\toptions15.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n+\t\toptions15.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n+\t\tfJProject1.setOptions(options15);\n \n \t\tIPackageFragment pack1 = fSourceFolder.createPackageFragment(\"test1\", false, null);\n \t\tStringBuilder buf = new StringBuilder();\n", "next_change": {"commit": "de0fb4e24849df0987d5b0969989d5902f5c0054", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\nindex 75e93052..ad27a6ef 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n", "chunk": "@@ -1405,11 +1405,11 @@ public class UnresolvedTypesQuickFixTest extends AbstractQuickFixTest {\n \n \t@Test\n \tpublic void testTypeInSealedTypeDeclaration() throws Exception {\n-\t\tMap<String, String> options15 = new HashMap<>();\n-\t\tJavaModelUtil.setComplianceOptions(options15, JavaCore.VERSION_15);\n-\t\toptions15.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n-\t\toptions15.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n-\t\tfJProject1.setOptions(options15);\n+\t\tMap<String, String> options16 = new HashMap<>();\n+\t\tJavaModelUtil.setComplianceOptions(options16, JavaCore.VERSION_16);\n+\t\toptions16.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n+\t\toptions16.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n+\t\tfJProject1.setOptions(options16);\n \n \t\tIPackageFragment pack1 = fSourceFolder.createPackageFragment(\"test1\", false, null);\n \t\tStringBuilder buf = new StringBuilder();\n", "next_change": {"commit": "11302ccf40b05c44fd4c8fb8ed3db913ac87272a", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\nindex ad27a6ef..cf869842 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n", "chunk": "@@ -1405,11 +1405,11 @@ public class UnresolvedTypesQuickFixTest extends AbstractQuickFixTest {\n \n \t@Test\n \tpublic void testTypeInSealedTypeDeclaration() throws Exception {\n-\t\tMap<String, String> options16 = new HashMap<>();\n-\t\tJavaModelUtil.setComplianceOptions(options16, JavaCore.VERSION_16);\n-\t\toptions16.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n-\t\toptions16.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n-\t\tfJProject1.setOptions(options16);\n+\t\tMap<String, String> options17 = new HashMap<>();\n+\t\tJavaModelUtil.setComplianceOptions(options17, JavaCore.VERSION_17);\n+\t\toptions17.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n+\t\toptions17.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n+\t\tfJProject1.setOptions(options17);\n \n \t\tIPackageFragment pack1 = fSourceFolder.createPackageFragment(\"test1\", false, null);\n \t\tStringBuilder buf = new StringBuilder();\n", "next_change": {"commit": "c15fe895fdc3eaca1386ff1cebde36f3af63f733", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\nindex cf869842..480f06b5 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n", "chunk": "@@ -1405,11 +1448,11 @@ public class UnresolvedTypesQuickFixTest extends AbstractQuickFixTest {\n \n \t@Test\n \tpublic void testTypeInSealedTypeDeclaration() throws Exception {\n-\t\tMap<String, String> options17 = new HashMap<>();\n-\t\tJavaModelUtil.setComplianceOptions(options17, JavaCore.VERSION_17);\n-\t\toptions17.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n-\t\toptions17.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n-\t\tfJProject1.setOptions(options17);\n+\t\tMap<String, String> options18 = new HashMap<>();\n+\t\tJavaModelUtil.setComplianceOptions(options18, JavaCore.VERSION_18);\n+\t\toptions18.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n+\t\toptions18.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n+\t\tfJProject1.setOptions(options18);\n \n \t\tIPackageFragment pack1 = fSourceFolder.createPackageFragment(\"test1\", false, null);\n \t\tStringBuilder buf = new StringBuilder();\n", "next_change": {"commit": "ec927faca029a306c6ff93db0835d95f0d40520b", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\nindex 480f06b5..16e4d8a1 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n", "chunk": "@@ -1448,11 +1488,11 @@ public class UnresolvedTypesQuickFixTest extends AbstractQuickFixTest {\n \n \t@Test\n \tpublic void testTypeInSealedTypeDeclaration() throws Exception {\n-\t\tMap<String, String> options18 = new HashMap<>();\n-\t\tJavaModelUtil.setComplianceOptions(options18, JavaCore.VERSION_18);\n-\t\toptions18.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n-\t\toptions18.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n-\t\tfJProject1.setOptions(options18);\n+\t\tMap<String, String> options19 = new HashMap<>();\n+\t\tJavaModelUtil.setComplianceOptions(options19, JavaCore.VERSION_19);\n+\t\toptions19.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n+\t\toptions19.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n+\t\tfJProject1.setOptions(options19);\n \n \t\tIPackageFragment pack1 = fSourceFolder.createPackageFragment(\"test1\", false, null);\n \t\tStringBuilder buf = new StringBuilder();\n", "next_change": {"commit": "605d1dc15059c58abfbbc774c5cd399bf5ea7fce", "changed_code": [{"header": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\nindex 16e4d8a1..6b819ff6 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n", "chunk": "@@ -1488,11 +1492,11 @@ public class UnresolvedTypesQuickFixTest extends AbstractQuickFixTest {\n \n \t@Test\n \tpublic void testTypeInSealedTypeDeclaration() throws Exception {\n-\t\tMap<String, String> options19 = new HashMap<>();\n-\t\tJavaModelUtil.setComplianceOptions(options19, JavaCore.VERSION_19);\n-\t\toptions19.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n-\t\toptions19.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n-\t\tfJProject1.setOptions(options19);\n+\t\tMap<String, String> options20 = new HashMap<>();\n+\t\tJavaModelUtil.setComplianceOptions(options20, JavaCore.VERSION_20);\n+\t\toptions20.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n+\t\toptions20.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n+\t\tfJProject1.setOptions(options20);\n \n \t\tIPackageFragment pack1 = fSourceFolder.createPackageFragment(\"test1\", false, null);\n \t\tStringBuilder buf = new StringBuilder();\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "e5ac0d8a67f3d29ab04adf2bd2814cab83d5578d", "message": "Merge commit", "committedDate": null}, {"oid": "3756738411a665a0fa6636bba3d97f321046fa50", "committedDate": "2021-03-19 12:11:01 +0100", "message": "Update Target Platform to 2021-03 Release."}, {"oid": "958ec96451c9241b18f7129edb41b235779f6c3d", "committedDate": "2021-03-25 16:50:17 -0400", "message": "Revert Java 16 support for the 1.0 release"}, {"oid": "de0fb4e24849df0987d5b0969989d5902f5c0054", "committedDate": "2021-04-20 10:21:03 +0200", "message": "Add Java 16 Support."}, {"oid": "11302ccf40b05c44fd4c8fb8ed3db913ac87272a", "committedDate": "2021-09-20 16:01:25 -0400", "message": "Support Java 17"}, {"oid": "791f30ed63f9960d5ad7dc2e9ba3b9e203cf2b9a", "committedDate": "2021-12-09 11:29:06 -0500", "message": "Use CreateFileChange from org.eclipse.jdt.ls.core"}, {"oid": "c15fe895fdc3eaca1386ff1cebde36f3af63f733", "committedDate": "2022-04-07 15:01:09 -0400", "message": "Provide Java 18 support"}, {"oid": "e3f5c743fdb395a8d1b6ef5154c75645b5939380", "committedDate": "2022-04-08 18:39:23 -0400", "message": "Provide file & type comments for newly created compilation units"}, {"oid": "ec927faca029a306c6ff93db0835d95f0d40520b", "committedDate": "2022-09-06 10:30:12 +0200", "message": "Provide Java 19 preview support in pre-release build"}, {"oid": "f07c1a5c8e04e86d03180751c88c29b19ac29591", "committedDate": "2022-11-04 14:38:39 -0400", "message": "Support \"Add all missing imports\" (#2292)"}, {"oid": "5bdac979161b34cae73b9ed66733b5d867cce9d8", "committedDate": "2022-11-22 09:44:02 +0800", "message": "fix multiple add missing imports at one line (#2337)"}, {"oid": "7a62d824c15c2bc18ef67aa372f6090f119dee9c", "committedDate": "2023-02-22 15:27:44 +0800", "message": "Update types filter according to import declarations (#2474)"}, {"oid": "605d1dc15059c58abfbbc774c5cd399bf5ea7fce", "committedDate": "2023-04-14 11:09:54 -0400", "message": "Update to eclipse build 4.28 nightly builds. (#2586)"}]}]}