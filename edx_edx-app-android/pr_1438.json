{"pr_number": 1438, "pr_title": "Prioritise cache response of course enrolments api", "pr_author": "omerhabib26", "pr_createdAt": "2020-07-15T09:56:56Z", "pr_url": "https://github.com/edx/edx-app-android/pull/1438", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3MDA3Nw==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456370077", "body": "no need to initialize Null.", "bodyText": "no need to initialize Null.", "bodyHTML": "<p dir=\"auto\">no need to initialize Null.</p>", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T10:53:26Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3MTMyOQ==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456371329", "body": "these lines of code should be in the background thread otherwise increase load time.", "bodyText": "these lines of code should be in the background thread otherwise increase load time.", "bodyHTML": "<p dir=\"auto\">these lines of code should be in the background thread otherwise increase load time.</p>", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T10:56:18Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE5ODUzNA==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r457198534", "bodyText": "IMO we have to use the retrofit callback.", "author": "farhan-arshad-dev", "createdAt": "2020-07-20T09:02:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3MTMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3MjI1Mg==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456372252", "body": "better to display `loadingIndicator` before loading course data when getting cached data.", "bodyText": "better to display loadingIndicator before loading course data when getting cached data.", "bodyHTML": "<p dir=\"auto\">better to display <code>loadingIndicator</code> before loading course data when getting cached data.</p>", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T10:58:17Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3NjkzNQ==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456376935", "body": "should cover all the scenarios as cover before. [L#125](https://github.com/edx/edx-app-android/pull/1438/files#diff-72ed8aca4d4e5464642868e596642dabL125)", "bodyText": "should cover all the scenarios as cover before. L#125", "bodyHTML": "<p dir=\"auto\">should cover all the scenarios as cover before. <a href=\"https://github.com/edx/edx-app-android/pull/1438/files#diff-72ed8aca4d4e5464642868e596642dabL125\">L#125</a></p>", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T11:09:47Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n+        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n+            @Override\n+            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n+                if (response.isSuccessful()) {\n+                    setCourseData(new ArrayList<>(response.body()));\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment.getRouter().forceLogout(getContext(),\n+                            environment.getAnalyticsRegistry(),\n+                            environment.getNotificationDelegate());\n+                } else {\n+                    errorNotification.showError(getContext(), new HttpStatusException(\n+                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n+                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                            R.string.lbl_reload,\n+                            new View.OnClickListener() {\n+                                @Override\n+                                public void onClick(View v) {\n+                                    if (NetworkUtil.isConnected(getContext())) {\n+                                        onRefresh();\n+                                    }\n+                                }\n+                            });\n+                }\n+                binding.swipeContainer.setRefreshing(false);\n+                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n+\n+                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n+                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n+                }\n+            }\n+\n+            @Override\n+            public void onFailure(Call<List<EnrolledCoursesResponse>> call, Throwable t) {\n+                errorNotification.showError(getContext(), t.getCause(), R.string.lbl_reload,", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3NzgxMA==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456377810", "body": "IMO `getEnrolledCourses` is the more appropriate name here instated of `apiCall`", "bodyText": "IMO getEnrolledCourses is the more appropriate name here instated of apiCall", "bodyHTML": "<p dir=\"auto\">IMO <code>getEnrolledCourses</code> is the more appropriate name here instated of <code>apiCall</code></p>", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T11:12:00Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3ODE4MQ==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456378181", "body": "better to add `@NotNull` annotation with `call` and `response` params.", "bodyText": "better to add @NotNull annotation with call and response params.", "bodyHTML": "<p dir=\"auto\">better to add <code>@NotNull</code> annotation with <code>call</code> and <code>response</code> params.</p>", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T11:13:01Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n+        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n+            @Override\n+            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM4MjY1Ng==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456382656", "body": "IMO, we have to check response code `200`, there is the min chance to get other response code, as `isSuccessful` Returns true if response code is in the range [200..300).", "bodyText": "IMO, we have to check response code 200, there is the min chance to get other response code, as isSuccessful Returns true if response code is in the range [200..300).", "bodyHTML": "<p dir=\"auto\">IMO, we have to check response code <code>200</code>, there is the min chance to get other response code, as <code>isSuccessful</code> Returns true if response code is in the range [200..300).</p>", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T11:24:17Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n+        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n+            @Override\n+            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n+                if (response.isSuccessful()) {", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM4NTI4Mw==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456385283", "body": "better to replace with lambda notation.", "bodyText": "better to replace with lambda notation.", "bodyHTML": "<p dir=\"auto\">better to replace with lambda notation.</p>", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T11:30:58Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n+        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n+            @Override\n+            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n+                if (response.isSuccessful()) {\n+                    setCourseData(new ArrayList<>(response.body()));\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment.getRouter().forceLogout(getContext(),\n+                            environment.getAnalyticsRegistry(),\n+                            environment.getNotificationDelegate());\n+                } else {\n+                    errorNotification.showError(getContext(), new HttpStatusException(\n+                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n+                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                            R.string.lbl_reload,\n+                            new View.OnClickListener() {", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4OTIwNw==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456489207", "body": "there should be more appropriate method name e.d `populateCourseData`.", "bodyText": "there should be more appropriate method name e.d populateCourseData.", "bodyHTML": "<p dir=\"auto\">there should be more appropriate method name e.d <code>populateCourseData</code>.</p>", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T14:46:49Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -110,70 +108,25 @@ public void onRefresh() {\n     @Override\n     public void onViewCreated(View view, Bundle savedInstanceState) {\n         super.onViewCreated(view, savedInstanceState);\n-        loadData(true);\n-    }\n-\n-    @Override\n-    public Loader<AsyncTaskResult<List<EnrolledCoursesResponse>>> onCreateLoader(int i, Bundle bundle) {\n-        return new CoursesAsyncLoader(getActivity());\n+        loadData(true, true);\n     }\n \n-    @Override\n-    public void onLoadFinished(Loader<AsyncTaskResult<List<EnrolledCoursesResponse>>> asyncTaskResultLoader, AsyncTaskResult<List<EnrolledCoursesResponse>> result) {\n-        adapter.clear();\n-        final Exception exception = result.getEx();\n-        if (exception != null) {\n-            if (exception instanceof AuthException) {\n-                loginPrefs.clear();\n-                getActivity().finish();\n-            } else if (exception instanceof HttpStatusException) {\n-                final HttpStatusException httpStatusException = (HttpStatusException) exception;\n-                switch (httpStatusException.getStatusCode()) {\n-                    case HttpStatus.UNAUTHORIZED: {\n-                        environment.getRouter().forceLogout(getContext(),\n-                                environment.getAnalyticsRegistry(),\n-                                environment.getNotificationDelegate());\n-                        break;\n-                    }\n-                }\n-            } else {\n-                logger.error(exception);\n-            }\n-\n-            errorNotification.showError(getActivity(), exception, R.string.lbl_reload,\n-                    new View.OnClickListener() {\n-                        @Override\n-                        public void onClick(View v) {\n-                            if (NetworkUtil.isConnected(getContext())) {\n-                                onRefresh();\n-                            }\n-                        }\n-                    });\n-        } else if (result.getResult() != null) {\n-            ArrayList<EnrolledCoursesResponse> newItems = new ArrayList<EnrolledCoursesResponse>(result.getResult());\n-\n-            updateDatabaseAfterDownload(newItems);\n-\n-            if (result.getResult().size() > 0) {\n-                adapter.setItems(newItems);\n-            }\n-            addFindCoursesFooter();\n-            adapter.notifyDataSetChanged();\n+    private void setCourseData(ArrayList<EnrolledCoursesResponse> data) {", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MDU4NQ==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456490585", "body": "As these line of code is executed in any case pass/fail service response. Should cover in retrofit call fail/success too.", "bodyText": "As these line of code is executed in any case pass/fail service response. Should cover in retrofit call fail/success too.", "bodyHTML": "<p dir=\"auto\">As these line of code is executed in any case pass/fail service response. Should cover in retrofit call fail/success too.</p>", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T14:48:54Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -110,70 +108,25 @@ public void onRefresh() {\n     @Override\n     public void onViewCreated(View view, Bundle savedInstanceState) {\n         super.onViewCreated(view, savedInstanceState);\n-        loadData(true);\n-    }\n-\n-    @Override\n-    public Loader<AsyncTaskResult<List<EnrolledCoursesResponse>>> onCreateLoader(int i, Bundle bundle) {\n-        return new CoursesAsyncLoader(getActivity());\n+        loadData(true, true);\n     }\n \n-    @Override\n-    public void onLoadFinished(Loader<AsyncTaskResult<List<EnrolledCoursesResponse>>> asyncTaskResultLoader, AsyncTaskResult<List<EnrolledCoursesResponse>> result) {\n-        adapter.clear();\n-        final Exception exception = result.getEx();\n-        if (exception != null) {\n-            if (exception instanceof AuthException) {\n-                loginPrefs.clear();\n-                getActivity().finish();\n-            } else if (exception instanceof HttpStatusException) {\n-                final HttpStatusException httpStatusException = (HttpStatusException) exception;\n-                switch (httpStatusException.getStatusCode()) {\n-                    case HttpStatus.UNAUTHORIZED: {\n-                        environment.getRouter().forceLogout(getContext(),\n-                                environment.getAnalyticsRegistry(),\n-                                environment.getNotificationDelegate());\n-                        break;\n-                    }\n-                }\n-            } else {\n-                logger.error(exception);\n-            }\n-\n-            errorNotification.showError(getActivity(), exception, R.string.lbl_reload,\n-                    new View.OnClickListener() {\n-                        @Override\n-                        public void onClick(View v) {\n-                            if (NetworkUtil.isConnected(getContext())) {\n-                                onRefresh();\n-                            }\n-                        }\n-                    });\n-        } else if (result.getResult() != null) {\n-            ArrayList<EnrolledCoursesResponse> newItems = new ArrayList<EnrolledCoursesResponse>(result.getResult());\n-\n-            updateDatabaseAfterDownload(newItems);\n-\n-            if (result.getResult().size() > 0) {\n-                adapter.setItems(newItems);\n-            }\n-            addFindCoursesFooter();\n-            adapter.notifyDataSetChanged();\n+    private void setCourseData(ArrayList<EnrolledCoursesResponse> data) {\n+        updateDatabaseAfterDownload(data);\n \n-            if (adapter.isEmpty() && !ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-                errorNotification.showError(R.string.no_courses_to_display,\n-                        FontAwesomeIcons.fa_exclamation_circle, 0, null);\n-                binding.myCourseList.setVisibility(View.GONE);\n-            } else {\n-                binding.myCourseList.setVisibility(View.VISIBLE);\n-                errorNotification.hideError();\n-            }\n+        if (data.size() > 0) {\n+            adapter.setItems(data);\n         }\n-        binding.swipeContainer.setRefreshing(false);\n-        binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n+        addFindCoursesFooter();\n+        adapter.notifyDataSetChanged();\n \n-        if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n-            EventBus.getDefault().registerSticky(MyCoursesListFragment.this);", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MTQ5Nw==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456491497", "body": "should create a common method to show the error message, as these lines of code also using in case of success.", "bodyText": "should create a common method to show the error message, as these lines of code also using in case of success.", "bodyHTML": "<p dir=\"auto\">should create a common method to show the error message, as these lines of code also using in case of success.</p>", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T14:50:12Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n+        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n+            @Override\n+            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n+                if (response.isSuccessful()) {\n+                    setCourseData(new ArrayList<>(response.body()));\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment.getRouter().forceLogout(getContext(),\n+                            environment.getAnalyticsRegistry(),\n+                            environment.getNotificationDelegate());\n+                } else {\n+                    errorNotification.showError(getContext(), new HttpStatusException(\n+                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n+                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                            R.string.lbl_reload,\n+                            new View.OnClickListener() {\n+                                @Override\n+                                public void onClick(View v) {\n+                                    if (NetworkUtil.isConnected(getContext())) {\n+                                        onRefresh();\n+                                    }\n+                                }\n+                            });\n+                }\n+                binding.swipeContainer.setRefreshing(false);\n+                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n+\n+                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n+                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n+                }\n+            }\n+\n+            @Override\n+            public void onFailure(Call<List<EnrolledCoursesResponse>> call, Throwable t) {\n+                errorNotification.showError(getContext(), t.getCause(), R.string.lbl_reload,\n+                        new View.OnClickListener() {\n+                            @Override\n+                            public void onClick(View v) {\n+                                if (NetworkUtil.isConnected(getContext())) {\n+                                    onRefresh();\n+                                }\n+                            }\n+                        });", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NTgyNg==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456495826", "body": "should place these line of code in `onFailure` case too.", "bodyText": "should place these line of code in onFailure case too.", "bodyHTML": "<p dir=\"auto\">should place these line of code in <code>onFailure</code> case too.</p>", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T14:56:54Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n+        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n+            @Override\n+            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n+                if (response.isSuccessful()) {\n+                    setCourseData(new ArrayList<>(response.body()));\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment.getRouter().forceLogout(getContext(),\n+                            environment.getAnalyticsRegistry(),\n+                            environment.getNotificationDelegate());\n+                } else {\n+                    errorNotification.showError(getContext(), new HttpStatusException(\n+                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n+                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                            R.string.lbl_reload,\n+                            new View.OnClickListener() {\n+                                @Override\n+                                public void onClick(View v) {\n+                                    if (NetworkUtil.isConnected(getContext())) {\n+                                        onRefresh();\n+                                    }\n+                                }\n+                            });\n+                }\n+                binding.swipeContainer.setRefreshing(false);\n+                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n+\n+                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n+                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n+                }", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d448916df86d6e349b8f68066f9c4cc628e39eed", "url": "https://github.com/edx/edx-app-android/commit/d448916df86d6e349b8f68066f9c4cc628e39eed", "message": "Prioritise cache response of course enrolments api\n-LEARNER-7778\n-Remove AsynLoader Class\n-Convert MyCourseListFragment into kotlin\n-Improve line of codes\n-Prioritise cache response over server call", "committedDate": "2020-07-22T12:30:15Z", "type": "commit"}, {"oid": "d448916df86d6e349b8f68066f9c4cc628e39eed", "url": "https://github.com/edx/edx-app-android/commit/d448916df86d6e349b8f68066f9c4cc628e39eed", "message": "Prioritise cache response of course enrolments api\n-LEARNER-7778\n-Remove AsynLoader Class\n-Convert MyCourseListFragment into kotlin\n-Improve line of codes\n-Prioritise cache response over server call", "committedDate": "2020-07-22T12:30:15Z", "type": "forcePushed"}]}