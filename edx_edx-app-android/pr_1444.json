{"pr_number": 1444, "pr_title": "Show fields error after at least once focus has lost", "pr_author": "omerhabib26", "pr_createdAt": "2020-07-27T17:20:18Z", "pr_url": "https://github.com/edx/edx-app-android/pull/1444", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE0MzAyMQ==", "url": "https://github.com/edx/edx-app-android/pull/1444#discussion_r463143021", "body": "I think the following lines of code will cover the story requirement\r\n```java\r\n        // Add text change listener\r\n        mEditText.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                // Clear Error from the field\r\n                if (mErrorTextView.getVisibility() == View.VISIBLE) {\r\n                    mErrorTextView.setText(null);\r\n                    mErrorTextView.setVisibility(View.GONE);\r\n                    mTextInputLayout.setContentDescription(null);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable s) {\r\n            }\r\n        });\r\n\r\n        mEditText.setOnFocusChangeListener((v, hasFocus) -> {\r\n            if (!hasFocus) {\r\n                isValidInput();\r\n            }\r\n        });\r\n```", "bodyText": "I think the following lines of code will cover the story requirement\n        // Add text change listener\n        mEditText.addTextChangedListener(new TextWatcher() {\n            @Override\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n            }\n\n            @Override\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\n                // Clear Error from the field\n                if (mErrorTextView.getVisibility() == View.VISIBLE) {\n                    mErrorTextView.setText(null);\n                    mErrorTextView.setVisibility(View.GONE);\n                    mTextInputLayout.setContentDescription(null);\n                }\n            }\n\n            @Override\n            public void afterTextChanged(Editable s) {\n            }\n        });\n\n        mEditText.setOnFocusChangeListener((v, hasFocus) -> {\n            if (!hasFocus) {\n                isValidInput();\n            }\n        });", "bodyHTML": "<p dir=\"auto\">I think the following lines of code will cover the story requirement</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        // Add text change listener\n        mEditText.addTextChangedListener(new TextWatcher() {\n            @Override\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n            }\n\n            @Override\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\n                // Clear Error from the field\n                if (mErrorTextView.getVisibility() == View.VISIBLE) {\n                    mErrorTextView.setText(null);\n                    mErrorTextView.setVisibility(View.GONE);\n                    mTextInputLayout.setContentDescription(null);\n                }\n            }\n\n            @Override\n            public void afterTextChanged(Editable s) {\n            }\n        });\n\n        mEditText.setOnFocusChangeListener((v, hasFocus) -&gt; {\n            if (!hasFocus) {\n                isValidInput();\n            }\n        });\"><pre>        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Add text change listener</span>\n        mEditText<span class=\"pl-k\">.</span>addTextChangedListener(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">TextWatcher</span>() {\n            <span class=\"pl-k\">@Override</span>\n            <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">beforeTextChanged</span>(<span class=\"pl-smi\">CharSequence</span> <span class=\"pl-v\">s</span>, <span class=\"pl-k\">int</span> <span class=\"pl-v\">start</span>, <span class=\"pl-k\">int</span> <span class=\"pl-v\">count</span>, <span class=\"pl-k\">int</span> <span class=\"pl-v\">after</span>) {\n            }\n\n            <span class=\"pl-k\">@Override</span>\n            <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">onTextChanged</span>(<span class=\"pl-smi\">CharSequence</span> <span class=\"pl-v\">s</span>, <span class=\"pl-k\">int</span> <span class=\"pl-v\">start</span>, <span class=\"pl-k\">int</span> <span class=\"pl-v\">before</span>, <span class=\"pl-k\">int</span> <span class=\"pl-v\">count</span>) {\n                <span class=\"pl-c\"><span class=\"pl-c\">//</span> Clear Error from the field</span>\n                <span class=\"pl-k\">if</span> (mErrorTextView<span class=\"pl-k\">.</span>getVisibility() <span class=\"pl-k\">==</span> <span class=\"pl-smi\">View</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>VISIBLE</span>) {\n                    mErrorTextView<span class=\"pl-k\">.</span>setText(<span class=\"pl-c1\">null</span>);\n                    mErrorTextView<span class=\"pl-k\">.</span>setVisibility(<span class=\"pl-smi\">View</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>GONE</span>);\n                    mTextInputLayout<span class=\"pl-k\">.</span>setContentDescription(<span class=\"pl-c1\">null</span>);\n                }\n            }\n\n            <span class=\"pl-k\">@Override</span>\n            <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">afterTextChanged</span>(<span class=\"pl-smi\">Editable</span> <span class=\"pl-v\">s</span>) {\n            }\n        });\n\n        mEditText<span class=\"pl-k\">.</span>setOnFocusChangeListener((v, hasFocus) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {\n            <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>hasFocus) {\n                isValidInput();\n            }\n        });</pre></div>", "author": "farhan-arshad-dev", "createdAt": "2020-07-30T17:04:03Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/module/registration/view/RegistrationEditTextView.java", "diffHunk": "@@ -92,13 +93,23 @@ public void onTextChanged(CharSequence s, int start, int before, int count) {\n                     isChangedByUser = true;\n                     return;\n                 }\n-                isValidInput();\n+                // Don't show the error until view has lost the focus at least once\n+                if (hasFocusLost) {\n+                    isValidInput();\n+                }\n             }\n \n             @Override\n             public void afterTextChanged(Editable s) {\n             }\n         });\n+\n+        mEditText.setOnFocusChangeListener((v, hasFocus) -> {\n+            if (!hasFocus) {\n+                isValidInput();\n+                hasFocusLost = true;\n+            }\n+        });\n     }", "originalCommit": "f6076d386d0e55397a8380ec31741058bc69e5e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwMzcwNQ==", "url": "https://github.com/edx/edx-app-android/pull/1444#discussion_r465003705", "bodyText": "As per discussion on LEARNER-7767 Hilary approved the iOS flow implemented by @saeedbashir", "author": "omerhabib26", "createdAt": "2020-08-04T12:10:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE0MzAyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA2NTc4NQ==", "url": "https://github.com/edx/edx-app-android/pull/1444#discussion_r465065785", "body": "AutoComplete not showing error on focus out, to solve this issue we need to make the method call `isValidInput();`", "bodyText": "AutoComplete not showing error on focus out, to solve this issue we need to make the method call isValidInput();", "bodyHTML": "<p dir=\"auto\">AutoComplete not showing error on focus out, to solve this issue we need to make the method call <code>isValidInput();</code></p>", "author": "farhan-arshad-dev", "createdAt": "2020-08-04T13:52:32Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/module/registration/view/RegistrationSelectView.java", "diffHunk": "@@ -87,8 +91,10 @@ public void afterTextChanged(Editable s) {\n         mInputView.setOnFocusChangeListener(new View.OnFocusChangeListener() {\n             @Override\n             public void onFocusChange(View v, boolean hasFocus) {\n-                if(hasFocus){\n+                if (hasFocus) {\n                     mInputView.showDropDown();\n+                } else {\n+                    hasFocusLost = true;", "originalCommit": "9a91cbb14e65c75a47caa40a775b873454e9bf43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c9a3f9cd977e85a9756593132501a25a935b3822", "url": "https://github.com/edx/edx-app-android/commit/c9a3f9cd977e85a9756593132501a25a935b3822", "message": "Show fields error after at least once focus has lost\n- LEARNER-7780\n- Highlight error once focus has lost on first time input\n- after once follow the previous flow", "committedDate": "2020-08-04T15:07:54Z", "type": "commit"}, {"oid": "c9a3f9cd977e85a9756593132501a25a935b3822", "url": "https://github.com/edx/edx-app-android/commit/c9a3f9cd977e85a9756593132501a25a935b3822", "message": "Show fields error after at least once focus has lost\n- LEARNER-7780\n- Highlight error once focus has lost on first time input\n- after once follow the previous flow", "committedDate": "2020-08-04T15:07:54Z", "type": "forcePushed"}]}