{"pr_number": 818, "pr_title": "[JENKINS-59690] Fix: allow multiple labels also in Jenkinsfile", "pr_author": "scddev", "pr_createdAt": "2020-08-14T08:17:49Z", "pr_url": "https://github.com/jenkinsci/kubernetes-plugin/pull/818", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzMTY2Mw==", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/818#discussion_r471331663", "body": "Would effectively revert [JENKINS-60088](https://issues.jenkins-ci.org/browse/JENKINS-60088)\r\n\r\nExposed labels in Kubernetes have no effect on the Jenkins labels. I would recommend reverting this hunk.", "bodyText": "Would effectively revert JENKINS-60088\nExposed labels in Kubernetes have no effect on the Jenkins labels. I would recommend reverting this hunk.", "bodyHTML": "<p dir=\"auto\">Would effectively revert <a href=\"https://issues.jenkins-ci.org/browse/JENKINS-60088\" rel=\"nofollow\">JENKINS-60088</a></p>\n<p dir=\"auto\">Exposed labels in Kubernetes have no effect on the Jenkins labels. I would recommend reverting this hunk.</p>", "author": "Vlatombe", "createdAt": "2020-08-17T08:45:24Z", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodTemplate.java", "diffHunk": "@@ -395,7 +396,16 @@ public String getActiveDeadlineSecondsStr() {\n     }\n \n     public Map<String, String> getLabelsMap() {\n-        return ImmutableMap.of(\"jenkins/label\", label == null ? DEFAULT_LABEL : sanitizeLabel(label));\n+        if(label == null) {\n+            return ImmutableMap.of(\"jenkins/\" + DEFAULT_LABEL, \"true\");\n+        }\n+\n+        ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();\n+        getLabelSet().stream().map(Objects::toString).sorted().forEach((atom) -> {\n+            builder.put(\"jenkins/\" + sanitizeLabel(atom), \"true\");\n+        });\n+\n+        return builder.build();", "originalCommit": "c0702a45eb6a113f3927fa44cea3306acb1dbb94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzMjMyOA==", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/818#discussion_r471432328", "bodyText": "It depends on the length of the labels. As sanitize reduces the size to the right most 63 characters, it is easier to create duplicate values. When the plugin queries for already running or pending pods during provisioning of new ones, this leads to pods not being created even if caps are not hit.\nE.g. we create our labels based on capabilities which are installed in the docker image the label specified in the pod template might be linux-amd64-some_name_of_some_cap1-some_name_of_some_cap2-some_name_of_some_cap3, when we now have linux-ppc64le-some_name_of_some_cap1-..., this will yield a label of \"ame_of_some_cap1-some_name_of_some_cap2-some_name_of_some_cap3\".", "author": "scddev", "createdAt": "2020-08-17T12:03:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzMTY2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ0MDA1OA==", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/818#discussion_r471440058", "bodyText": "As a possible prevention of key explosion for JENKINS-60088 maybe using \"jenkins/label-1=sanitizedLabel1, jenkins/label-2=sanitizedLabel2, ...\"", "author": "scddev", "createdAt": "2020-08-17T12:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzMTY2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ0MDA4MA==", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/818#discussion_r471440080", "bodyText": "I'd rather avoid \"dynamic\" labels due to the ticket above. To prevent collisions, we could instead add a label whose value would be a digest of the complete label?", "author": "Vlatombe", "createdAt": "2020-08-17T12:20:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzMTY2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ0MjEwNg==", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/818#discussion_r471442106", "bodyText": "Some digest sounds good to me. Will have a look.", "author": "scddev", "createdAt": "2020-08-17T12:24:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzMTY2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ae4c4fc220e94cbcfff534dfb02a1fdbc67c2293", "changed_code": [{"header": "diff --git a/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodTemplate.java b/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodTemplate.java\nindex 6e811103..f205424a 100644\n--- a/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodTemplate.java\n+++ b/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodTemplate.java\n", "chunk": "@@ -396,18 +396,8 @@ public class PodTemplate extends AbstractDescribableImpl<PodTemplate> implements\n     }\n \n     public Map<String, String> getLabelsMap() {\n-        if(label == null) {\n-            return ImmutableMap.of(\"jenkins/\" + DEFAULT_LABEL, \"true\");\n-        }\n-\n-        ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();\n-        getLabelSet().stream().map(Objects::toString).sorted().forEach((atom) -> {\n-            builder.put(\"jenkins/\" + sanitizeLabel(atom), \"true\");\n-        });\n-\n-        return builder.build();\n+        return ImmutableMap.of(\"jenkins/label\", label == null ? DEFAULT_LABEL : sanitizeLabel(label), \"jenkins/label-md5\", label == null ? \"0\" : Hashing.md5().hashString(label).toString());\n     }\n-\n     static String sanitizeLabel(String input) {\n         String label = input;\n         int max = 63;\n", "next_change": {"commit": "6dcd7cc9146b51c0ef439a83e58b815e923bf7be", "changed_code": [{"header": "diff --git a/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodTemplate.java b/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodTemplate.java\nindex f205424a..88524f45 100644\n--- a/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodTemplate.java\n+++ b/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodTemplate.java\n", "chunk": "@@ -396,8 +402,19 @@ public class PodTemplate extends AbstractDescribableImpl<PodTemplate> implements\n     }\n \n     public Map<String, String> getLabelsMap() {\n-        return ImmutableMap.of(\"jenkins/label\", label == null ? DEFAULT_LABEL : sanitizeLabel(label), \"jenkins/label-md5\", label == null ? \"0\" : Hashing.md5().hashString(label).toString());\n+        if (label == null) {\n+            return ImmutableMap.of(\n+                    \"jenkins/label\", DEFAULT_LABEL,\n+                    \"jenkins/label-digest\", \"0\"\n+            );\n+        } else {\n+            return ImmutableMap.of(\n+                    \"jenkins/label\", sanitizeLabel(label),\n+                    \"jenkins/label-digest\", LABEL_DIGEST_FUNCTION.hashString(label).toString()\n+            );\n+        }\n     }\n+\n     static String sanitizeLabel(String input) {\n         String label = input;\n         int max = 63;\n", "next_change": null}]}}]}}, {"oid": "ae4c4fc220e94cbcfff534dfb02a1fdbc67c2293", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/ae4c4fc220e94cbcfff534dfb02a1fdbc67c2293", "message": "[JENKINS-59690] fix: allow multiple labels also in Jenkinsfile", "committedDate": "2020-08-17T15:27:22Z", "type": "commit"}, {"oid": "6dcd7cc9146b51c0ef439a83e58b815e923bf7be", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/6dcd7cc9146b51c0ef439a83e58b815e923bf7be", "message": "Add tests\n\n* Sort labels in KubernetesDeclarativeAgent#getLabelExpression for consistent output\n* Check node label in declarative\n* Switch hash function to sha1 (40 chars) and put in constant.\n* Rename \"jenkins/label-md5\" to \"jenkins/label-digest\"", "committedDate": "2020-08-19T08:06:59Z", "type": "commit"}]}