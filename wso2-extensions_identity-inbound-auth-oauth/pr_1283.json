{"pr_number": 1283, "pr_title": "Fix checkstyle issues", "pr_createdAt": "2020-01-03T12:02:48Z", "pr_url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1283", "merge_commit": "8604ca3f923319e60dbbc7e8f79f3a89f108c893", "timeline": [{"oid": "29b087e150eddf3a94c4c4a7e8aa97c362b772b7", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/29b087e150eddf3a94c4c4a7e8aa97c362b772b7", "message": "Fix checkstyle issues", "committedDate": "2020-01-03T12:24:40Z", "type": "commit"}, {"oid": "29b087e150eddf3a94c4c4a7e8aa97c362b772b7", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/29b087e150eddf3a94c4c4a7e8aa97c362b772b7", "message": "Fix checkstyle issues", "committedDate": "2020-01-03T12:24:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2MjY4MQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1283#discussion_r363162681", "body": "Shall we add a colon `:` before the user parameter?", "bodyText": "Shall we add a colon : before the user parameter?", "bodyHTML": "<p dir=\"auto\">Shall we add a colon <code>:</code> before the user parameter?</p>", "author": "tharindu-bandara", "createdAt": "2020-01-06T05:29:00Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -97,8 +98,8 @@\n \n         String loggedInUser = CarbonContext.getThreadLocalCarbonContext().getUsername();\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Adding a consumer secret for the logged in user \" + loggedInUser);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Adding a consumer secret for the logged in user \" + loggedInUser);", "originalCommit": "29b087e150eddf3a94c4c4a7e8aa97c362b772b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79c5215a8ded08479712a7fefce1ee9b14a7e320", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\nindex a11f9955e..295a18ef5 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\n", "chunk": "@@ -99,7 +99,7 @@ public class OAuthAdminServiceImpl {\n         String loggedInUser = CarbonContext.getThreadLocalCarbonContext().getUsername();\n \n         if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Adding a consumer secret for the logged in user \" + loggedInUser);\n+            LOG.debug(\"Adding a consumer secret for the logged in user:\" + loggedInUser);\n         }\n \n         String tenantUser = MultitenantUtils.getTenantAwareUsername(loggedInUser);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2MzEzNA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1283#discussion_r363163134", "body": "Shall we add a colon before the parameters?", "bodyText": "Shall we add a colon before the parameters?", "bodyHTML": "<p dir=\"auto\">Shall we add a colon before the parameters?</p>", "author": "tharindu-bandara", "createdAt": "2020-01-06T05:32:30Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -887,52 +889,52 @@ public OAuthRevocationResponseDTO revokeAuthzForAppsByResourceOwner(\n                             OAuthUtil.clearOAuthCache(accessTokenDO.getConsumerKey(), authzUser,\n                                     buildScopeString(accessTokenDO.getScope()), tokenBindingReference);\n                             OAuthUtil.clearOAuthCache(accessTokenDO.getConsumerKey(), authzUser,\n-                                                      buildScopeString(accessTokenDO.getScope()));\n+                                    buildScopeString(accessTokenDO.getScope()));\n                             OAuthUtil.clearOAuthCache(accessTokenDO.getConsumerKey(), authzUser);\n                             OAuthUtil.clearOAuthCache(accessTokenDO.getAccessToken());\n                             AccessTokenDO scopedToken;\n                             try {\n                                 // Retrieve latest access token for particular client, user and scope combination if\n                                 // its ACTIVE or EXPIRED.\n                                 scopedToken = OAuthTokenPersistenceFactory.getInstance().getAccessTokenDAO()\n-                                                                          .getLatestAccessToken(\n-                                                                                  appDTO.getOauthConsumerKey(), user,\n-                                                                                  userStoreDomain,\n-                                                                                  buildScopeString(\n-                                                                                          accessTokenDO.getScope()),\n-                                                                                  true);\n+                                        .getLatestAccessToken(\n+                                                appDTO.getOauthConsumerKey(), user,\n+                                                userStoreDomain,\n+                                                buildScopeString(\n+                                                        accessTokenDO.getScope()),\n+                                                true);\n                             } catch (IdentityOAuth2Exception e) {\n                                 String errorMsg = \"Error occurred while retrieving latest \" +\n-                                                  \"access token issued for Client ID : \" +\n-                                                  appDTO.getOauthConsumerKey() + \", User ID : \" + userName +\n-                                                  \" and Scope : \" + buildScopeString(accessTokenDO.getScope());\n+                                        \"access token issued for Client ID : \" +\n+                                        appDTO.getOauthConsumerKey() + \", User ID : \" + userName +\n+                                        \" and Scope : \" + buildScopeString(accessTokenDO.getScope());\n                                 throw handleError(errorMsg, e);\n                             }\n                             if (scopedToken != null) {\n                                 //Revoking token from database\n                                 try {\n                                     OAuthTokenPersistenceFactory.getInstance().getAccessTokenDAO()\n-                                                                .revokeAccessTokens(new String[]{scopedToken\n-                                                                        .getAccessToken()});\n+                                            .revokeAccessTokens(new String[]{scopedToken\n+                                                    .getAccessToken()});\n                                 } catch (IdentityOAuth2Exception e) {\n                                     String errorMsg = \"Error occurred while revoking \" + \"Access Token : \" +\n-                                                      scopedToken.getAccessToken();\n+                                            scopedToken.getAccessToken();\n                                     throw handleError(errorMsg, e);\n                                 }\n                                 //Revoking the oauth consent from database.\n                                 try {\n                                     OAuthTokenPersistenceFactory.getInstance().getTokenManagementDAO()\n-                                            .revokeOAuthConsentByApplicationAndUser((\n-                                                    (AuthenticatedUser) authzUser).getAuthenticatedSubjectIdentifier(),\n-                                                                                    tenantDomain, appName);\n+                                            .revokeOAuthConsentByApplicationAndUser(\n+                                                    authzUser.getAuthenticatedSubjectIdentifier(),\n+                                                    tenantDomain, appName);\n                                 } catch (IdentityOAuth2Exception e) {\n                                     String errorMsg = \"Error occurred while removing OAuth Consent of Application \" +\n-                                                      appName + \" of user \" + userName;\n+                                            appName + \" of user \" + userName;", "originalCommit": "29b087e150eddf3a94c4c4a7e8aa97c362b772b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79c5215a8ded08479712a7fefce1ee9b14a7e320", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\nindex a11f9955e..295a18ef5 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\n", "chunk": "@@ -928,8 +927,8 @@ public class OAuthAdminServiceImpl {\n                                                     authzUser.getAuthenticatedSubjectIdentifier(),\n                                                     tenantDomain, appName);\n                                 } catch (IdentityOAuth2Exception e) {\n-                                    String errorMsg = \"Error occurred while removing OAuth Consent of Application \" +\n-                                            appName + \" of user \" + userName;\n+                                    String errorMsg = \"Error occurred while removing OAuth Consent of Application: \" +\n+                                            appName + \" of user: \" + userName;\n                                     throw handleError(errorMsg, e);\n                                 }\n                             }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "8604ca3f923319e60dbbc7e8f79f3a89f108c893", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\nindex a11f9955e..295a18ef5 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\n", "chunk": "@@ -928,8 +927,8 @@ public class OAuthAdminServiceImpl {\n                                                     authzUser.getAuthenticatedSubjectIdentifier(),\n                                                     tenantDomain, appName);\n                                 } catch (IdentityOAuth2Exception e) {\n-                                    String errorMsg = \"Error occurred while removing OAuth Consent of Application \" +\n-                                            appName + \" of user \" + userName;\n+                                    String errorMsg = \"Error occurred while removing OAuth Consent of Application: \" +\n+                                            appName + \" of user: \" + userName;\n                                     throw handleError(errorMsg, e);\n                                 }\n                             }\n", "next_change": null}]}, "commits_in_main": [{"oid": "8604ca3f923319e60dbbc7e8f79f3a89f108c893", "message": "Merge commit", "committedDate": null}, {"oid": "1127870495238f9a00004490c0688fb6cff6758b", "committedDate": "2020-01-14 15:11:33 +0530", "message": "Single scope table for OAuth2 scope binding and OIDC scope."}, {"oid": "d933323ac565428001293e595697f65abff8f306", "committedDate": "2020-01-16 21:39:18 +0530", "message": "Includ proper exception handling in scope mgt"}, {"oid": "4bd2c5e8c0d7148bc7bdcf086abf2e03fbe21f53", "committedDate": "2020-01-17 00:14:22 +0530", "message": "fix list scope depends on endpoint."}, {"oid": "325138048a07e770e70f7971580657c115e8e503", "committedDate": "2020-01-17 11:34:38 +0530", "message": "refactored"}, {"oid": "46212ce62c2a35fbdbde558e49ddcdd49ca98250", "committedDate": "2020-01-24 10:35:38 +0530", "message": "reimplement scope mgt by having new column SCOPE_TYPE in IDN_OAUTH2_SCOPE table."}, {"oid": "8ba209a2d1afcd8947c277f89183cc21cccb74a8", "committedDate": "2020-01-24 15:22:16 +0530", "message": "Fix review comments."}, {"oid": "4dd5b36332ce960d67ac66ed1135d2930b5b5ae9", "committedDate": "2020-01-28 16:47:46 +0530", "message": "Fix review comment"}, {"oid": "fe209ca9ed0d945268d30af1e715a92451584a26", "committedDate": "2020-02-03 11:32:26 +0530", "message": "Handle scope not found under 41003 scope not found error code."}, {"oid": "80a9aea9f50760fc45a5728e69c5f4ae48a58e08", "committedDate": "2020-02-03 13:16:55 +0530", "message": "Improved the scope not found error message with it's error code."}, {"oid": "02d35a9ecea236695f65e451c0a33aa985ecbf7e", "committedDate": "2020-02-26 22:26:15 +0530", "message": "Fix the state issue when client secret regenerates"}, {"oid": "2ba6b892cfa18a3ff2c5016c2b8b2263ce374dc1", "committedDate": "2020-02-28 15:43:43 +0530", "message": "Fix validating id token encryption algorithm and method"}, {"oid": "b4875b1c8a1e92f0fc8c01dcf04f5d27528c1364", "committedDate": "2020-02-28 16:37:11 +0530", "message": "fix the formatting issues"}, {"oid": "4adb2395c29dd91bf7b6d835c2bb878f96f3741e", "committedDate": "2020-06-23 18:14:22 +0530", "message": "Fix for unable to disable id_token encryption"}, {"oid": "06e35f24144a964762575993bcb87d4789e43b02", "committedDate": "2020-06-24 13:53:09 +0530", "message": "Implement OAuth data deletion on Tenant Deletion"}, {"oid": "392e7ad1ea63415385dc76c17400522618e2f114", "committedDate": "2020-07-13 10:49:11 +0530", "message": "Merge pull request #1389 from sumedhe/oauth-data-deletion"}, {"oid": "5861287df66549e5c5f697bbedc04b540f1a4d22", "committedDate": "2020-08-07 17:01:26 +0530", "message": "Introduce a new OIDC property for apps to revoke tokens"}, {"oid": "3c03dd27c2d8a7aa67d82357ea6af325d1dda796", "committedDate": "2020-08-12 12:09:51 +0530", "message": "Merge pull request #1413 from pamodaaw/master"}, {"oid": "057ed7e179da0ac51a274760856387ecc628242c", "committedDate": "2020-08-12 16:48:07 +0530", "message": "Add UI configuration to enable token binding validation"}, {"oid": "88082052a83614a0c780221a4e72a68544604201", "committedDate": "2020-09-16 19:07:43 +0530", "message": "Fix token binding configuration issues."}, {"oid": "6d75ac254e53a299585da5e144939602d22e8e01", "committedDate": "2020-10-13 00:19:26 +0530", "message": "fix method access modifier"}, {"oid": "8ebe4ea1a6e263a9300207c972d6dd452c72d2d6", "committedDate": "2020-11-06 17:56:54 +0530", "message": "Fix special character issues"}, {"oid": "b5964070a6c9f25109844c0f09f00ee17722f86d", "committedDate": "2020-11-09 12:04:14 +0530", "message": "Add new OAuthApplicationMgtListener to handle OAuth application managment events"}, {"oid": "b0043446b86652560ae81c8d2d629247e60198af", "committedDate": "2020-11-10 22:59:12 +0530", "message": "Resolve comments"}, {"oid": "3cf3ed177f9db47f4205b289812d1666e1d5c93a", "committedDate": "2020-11-11 09:12:54 +0530", "message": "Merge pull request #1489 from nilasini/scopefix"}, {"oid": "9144267bd213a2776a7125018471685549262bba", "committedDate": "2021-01-27 11:50:16 +0530", "message": "Validate empty and duplicate OIDC audiences"}, {"oid": "f2502600584c12bc9b5bf88ac6f48c0921091c53", "committedDate": "2021-05-17 21:44:56 +0530", "message": "Handle access token cache properly"}, {"oid": "28c3785807770c8f68fa84c0f2bba59296eb7768", "committedDate": "2021-07-12 10:37:04 +0530", "message": "Add initial version of user id"}, {"oid": "7fcebc38826983bed2c2771c3ec21a7a16eec6e0", "committedDate": "2021-09-28 00:25:57 +0530", "message": "Fix for application deletion"}, {"oid": "5afc2463c78f0cffad0d1c4c318c77c6213faf6f", "committedDate": "2021-10-02 09:40:15 +0530", "message": "Fix oauth cache to use user's tenant"}, {"oid": "9f93e0f9614dd12478727837fae7d9199b75a37f", "committedDate": "2021-10-02 09:58:56 +0530", "message": "Refactor"}, {"oid": "7a0718445011a9b37555a151948d59fe97a0b5a0", "committedDate": "2021-10-02 23:29:51 +0530", "message": "Fix authorized app clearing logic"}, {"oid": "54533ce4b11fcbe0e7ebdb94824f6574efde0715", "committedDate": "2021-10-04 10:20:41 +0530", "message": "Remove redundant methods"}, {"oid": "a67681f159e94c2419b58dd5d1f946510b18bb81", "committedDate": "2021-10-14 17:23:44 +0530", "message": "Add functions to revoke issued tokens by consumerKey"}, {"oid": "c67a977b3cccf5bc6a939ab97f0c504f380449c5", "committedDate": "2021-10-15 15:22:46 +0530", "message": "Address review comments"}, {"oid": "6ab2e784392426df0b8472af6a9e31978092e4c1", "committedDate": "2021-10-18 23:17:03 +0530", "message": "Add binding type validation"}, {"oid": "24ab4a8fc4c70cfd6a1e63ccfd0253dcbc217865", "committedDate": "2021-10-18 23:17:19 +0530", "message": "[WSO2 Release] [Jenkins #3869] [Release 6.7.71] prepare for next development iteration"}, {"oid": "ccc2e5775aba025e9b68970484ba8203b5bef7fd", "committedDate": "2022-02-21 00:17:40 +0530", "message": "Add binding type validations for Application Management REST API"}, {"oid": "b9446355891a3b5394c78955a4e9b6e6fdb26e31", "committedDate": "2022-07-19 23:42:31 +0530", "message": "Enable cross tenant user resolving with OauthApp mgt"}, {"oid": "8fc67e25b7861ecf4667fb43ee0013c9a7532648", "committedDate": "2022-07-20 01:32:38 +0530", "message": "resolve dependency issue"}, {"oid": "7b29b2ac976cdecec557df684feab8e3e540c1a4", "committedDate": "2022-07-20 11:37:45 +0530", "message": "address reviews"}, {"oid": "e43260829af73441c403e3d1a6d0eef320c8cbf0", "committedDate": "2022-12-21 11:53:48 +0530", "message": "introduce method to get tenant wise oidc scopes"}, {"oid": "7cdfb7737175457d501829d330e21cad958ba3d8", "committedDate": "2022-12-21 13:18:30 +0530", "message": "remove null check"}, {"oid": "e6c04d1a48275a68d44a920dcdffac9d7a9616e1", "committedDate": "2022-12-21 13:39:50 +0530", "message": "Update components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2Mzc4OA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1283#discussion_r363163788", "body": "Space at the end of the log might not be required.", "bodyText": "Space at the end of the log might not be required.", "bodyHTML": "<p dir=\"auto\">Space at the end of the log might not be required.</p>", "author": "tharindu-bandara", "createdAt": "2020-01-06T05:37:07Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -998,16 +1000,16 @@ void triggerPostRevokeListeners(OAuthRevocationRequestDTO revokeRequestDTO,\n                                     OAuthRevocationResponseDTO revokeRespDTO, AccessTokenDO[] accessTokenDOs) {\n \n         OAuthEventInterceptor oAuthEventInterceptorProxy = OAuthComponentServiceHolder.getInstance()\n-                                                                                      .getOAuthEventInterceptorProxy();\n+                .getOAuthEventInterceptorProxy();\n \n         for (AccessTokenDO accessTokenDO : accessTokenDOs) {\n             if (oAuthEventInterceptorProxy != null && oAuthEventInterceptorProxy.isEnabled()) {\n                 try {\n                     Map<String, Object> paramMap = new HashMap<String, Object>();\n                     oAuthEventInterceptorProxy.onPostTokenRevocationByResourceOwner(revokeRequestDTO, revokeRespDTO,\n-                                                                                    accessTokenDO, paramMap);\n+                            accessTokenDO, paramMap);\n                 } catch (IdentityOAuth2Exception e) {\n-                    log.error(\"Error occurred with post revocation listener \", e);\n+                    LOG.error(\"Error occurred with post revocation listener \", e);", "originalCommit": "29b087e150eddf3a94c4c4a7e8aa97c362b772b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79c5215a8ded08479712a7fefce1ee9b14a7e320", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\nindex a11f9955e..295a18ef5 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\n", "chunk": "@@ -1009,7 +1008,7 @@ public class OAuthAdminServiceImpl {\n                     oAuthEventInterceptorProxy.onPostTokenRevocationByResourceOwner(revokeRequestDTO, revokeRespDTO,\n                             accessTokenDO, paramMap);\n                 } catch (IdentityOAuth2Exception e) {\n-                    LOG.error(\"Error occurred with post revocation listener \", e);\n+                    LOG.error(\"Error occurred with post revocation listener.\", e);\n                 }\n             }\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2MzkyNA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1283#discussion_r363163924", "body": "Shall we add a colon before the token type parameter?", "bodyText": "Shall we add a colon before the token type parameter?", "bodyHTML": "<p dir=\"auto\">Shall we add a colon before the token type parameter?</p>", "author": "tharindu-bandara", "createdAt": "2020-01-06T05:38:07Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -1137,36 +1140,36 @@ void validateTokenExpiryConfigurations(OAuthConsumerAppDTO oAuthConsumerAppDTO)\n             oAuthConsumerAppDTO.setUserAccessTokenExpiryTime(\n                     OAuthServerConfiguration.getInstance().getUserAccessTokenValidityPeriodInSeconds());\n             logOnInvalidConfig(oAuthConsumerAppDTO.getApplicationName(), \"user access token\",\n-                               oAuthConsumerAppDTO.getUserAccessTokenExpiryTime());\n+                    oAuthConsumerAppDTO.getUserAccessTokenExpiryTime());\n         }\n \n         if (oAuthConsumerAppDTO.getApplicationAccessTokenExpiryTime() == 0) {\n             oAuthConsumerAppDTO.setApplicationAccessTokenExpiryTime(\n                     OAuthServerConfiguration.getInstance().getApplicationAccessTokenValidityPeriodInSeconds());\n             logOnInvalidConfig(oAuthConsumerAppDTO.getApplicationName(), \"application access token\",\n-                               oAuthConsumerAppDTO.getApplicationAccessTokenExpiryTime());\n+                    oAuthConsumerAppDTO.getApplicationAccessTokenExpiryTime());\n         }\n \n         if (oAuthConsumerAppDTO.getRefreshTokenExpiryTime() == 0) {\n             oAuthConsumerAppDTO.setRefreshTokenExpiryTime(\n                     OAuthServerConfiguration.getInstance().getRefreshTokenValidityPeriodInSeconds());\n             logOnInvalidConfig(oAuthConsumerAppDTO.getApplicationName(), \"refresh token\",\n-                               oAuthConsumerAppDTO.getRefreshTokenExpiryTime());\n+                    oAuthConsumerAppDTO.getRefreshTokenExpiryTime());\n         }\n \n         if (oAuthConsumerAppDTO.getIdTokenExpiryTime() == 0) {\n             oAuthConsumerAppDTO.setIdTokenExpiryTime(\n                     OAuthServerConfiguration.getInstance().getOpenIDConnectIDTokenExpiryTimeInSeconds());\n             logOnInvalidConfig(oAuthConsumerAppDTO.getApplicationName(), \"id token\",\n-                               oAuthConsumerAppDTO.getIdTokenExpiryTime());\n+                    oAuthConsumerAppDTO.getIdTokenExpiryTime());\n         }\n     }\n \n     void logOnInvalidConfig(String appName, String tokenType, long defaultValue) {\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Invalid expiry time value '0' set for \" + tokenType + \" in ServiceProvider: \" + appName + \". \"\n-                      + \"Defaulting to expiry value: \" + defaultValue + \" seconds.\");\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Invalid expiry time value '0' set for \" + tokenType + \" in ServiceProvider: \" + appName + \". \"", "originalCommit": "29b087e150eddf3a94c4c4a7e8aa97c362b772b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79c5215a8ded08479712a7fefce1ee9b14a7e320", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\nindex a11f9955e..295a18ef5 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\n", "chunk": "@@ -1168,8 +1167,8 @@ public class OAuthAdminServiceImpl {\n     void logOnInvalidConfig(String appName, String tokenType, long defaultValue) {\n \n         if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Invalid expiry time value '0' set for \" + tokenType + \" in ServiceProvider: \" + appName + \". \"\n-                    + \"Defaulting to expiry value: \" + defaultValue + \" seconds.\");\n+            LOG.debug(\"Invalid expiry time value '0' set for token type: \" + tokenType + \" in ServiceProvider: \" +\n+                    appName + \". Defaulting to expiry value: \" + defaultValue + \" seconds.\");\n         }\n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NDkxNg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1283#discussion_r363164916", "body": "Shall we add the full stop for the debug messages?", "bodyText": "Shall we add the full stop for the debug messages?", "bodyHTML": "<p dir=\"auto\">Shall we add the full stop for the debug messages?</p>", "author": "pamodaaw", "createdAt": "2020-01-06T05:43:56Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -122,8 +123,8 @@\n \n         if (userName == null) {\n             String msg = \"User not logged in to get all registered OAuth Applications\";", "originalCommit": "29b087e150eddf3a94c4c4a7e8aa97c362b772b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79c5215a8ded08479712a7fefce1ee9b14a7e320", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\nindex a11f9955e..295a18ef5 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\n", "chunk": "@@ -122,7 +122,7 @@ public class OAuthAdminServiceImpl {\n         OAuthConsumerAppDTO[] dtos = new OAuthConsumerAppDTO[0];\n \n         if (userName == null) {\n-            String msg = \"User not logged in to get all registered OAuth Applications\";\n+            String msg = \"User not logged in to get all registered OAuth Applications.\";\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(msg);\n             }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NTg3OA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1283#discussion_r363165878", "body": "Can't these two lines be combined?", "bodyText": "Can't these two lines be combined?", "bodyHTML": "<p dir=\"auto\">Can't these two lines be combined?</p>", "author": "pamodaaw", "createdAt": "2020-01-06T05:50:23Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -700,36 +701,36 @@ void updateAppAndRevokeTokensAndAuthzCodes(String consumerKey,\n                     cacheKeyString = consumerKey + \":\" + authorizedUser + \":\" + scope + \":\" + authenticatedIDP;\n                 } else {\n                     cacheKeyString = consumerKey + \":\" + authorizedUser.toLowerCase() + \":\" + scope + \":\"\n-                                     + authenticatedIDP;\n+                            + authenticatedIDP;\n                 }\n                 OAuthCacheKey cacheKeyUser = new OAuthCacheKey(cacheKeyString);\n                 OAuthCache.getInstance().clearCacheEntry(cacheKeyUser);\n             }\n \n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Access tokens and token of users are removed from the cache for OAuth App with \" +\n-                          \"consumerKey: \" + consumerKey);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Access tokens and token of users are removed from the cache for OAuth App with \" +\n+                        \"consumerKey: \" + consumerKey);\n             }\n \n             Set<String> authorizationCodes = OAuthTokenPersistenceFactory.getInstance().getAuthorizationCodeDAO()\n-                                                                         .getActiveAuthorizationCodesByConsumerKey\n-                                                                                 (consumerKey);\n+                    .getActiveAuthorizationCodesByConsumerKey\n+                            (consumerKey);", "originalCommit": "29b087e150eddf3a94c4c4a7e8aa97c362b772b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79c5215a8ded08479712a7fefce1ee9b14a7e320", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\nindex a11f9955e..295a18ef5 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java\n", "chunk": "@@ -713,8 +713,7 @@ public class OAuthAdminServiceImpl {\n             }\n \n             Set<String> authorizationCodes = OAuthTokenPersistenceFactory.getInstance().getAuthorizationCodeDAO()\n-                    .getActiveAuthorizationCodesByConsumerKey\n-                            (consumerKey);\n+                    .getActiveAuthorizationCodesByConsumerKey(consumerKey);\n             for (String authorizationCode : authorizationCodes) {\n                 OAuthCacheKey cacheKey = new OAuthCacheKey(authorizationCode);\n                 OAuthCache.getInstance().clearCacheEntry(cacheKey);\n", "next_change": null}]}}, {"oid": "79c5215a8ded08479712a7fefce1ee9b14a7e320", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/79c5215a8ded08479712a7fefce1ee9b14a7e320", "message": "Fix PR comments", "committedDate": "2020-01-06T06:18:00Z", "type": "commit"}, {"oid": "79c5215a8ded08479712a7fefce1ee9b14a7e320", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/79c5215a8ded08479712a7fefce1ee9b14a7e320", "message": "Fix PR comments", "committedDate": "2020-01-06T06:18:00Z", "type": "forcePushed"}, {"oid": "5a9ed3c5454bd5f4c2966ace459d86bb835c757e", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/5a9ed3c5454bd5f4c2966ace459d86bb835c757e", "message": "Fix test failure", "committedDate": "2020-01-06T06:35:27Z", "type": "commit"}]}