{"pr_number": 1304, "pr_title": "Add system flag to allow the weak keys to be used for the signing.", "pr_author": "senthalan", "pr_createdAt": "2020-01-28T06:34:16Z", "pr_url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1304", "merge_commit": "4634329e9269288daf5f43d626f256ef98123467", "timeline": [{"oid": "0db23a5f1fd7153e9cadad783c4a7e8bcdc9a137", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/0db23a5f1fd7153e9cadad783c4a7e8bcdc9a137", "message": "Add system flag to allow the weak keys to be used for the signing.", "committedDate": "2020-01-28T06:30:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYyOTEwMg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1304#discussion_r371629102", "body": "```suggestion\r\n                    \" will be allowed for the signing.\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \" will be used for the signing.\");\n          \n          \n            \n                                \" will be allowed for the signing.\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> will be <span class=\"x x-first x-last\">used</span> for the signing.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> will be <span class=\"x x-first x-last\">allowed</span> for the signing.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mefarazath", "createdAt": "2020-01-28T06:37:16Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -2213,6 +2215,22 @@ private static JWT encryptWithPublicKey(Key publicKey, JWTClaimsSet jwtClaimsSet\n         }\n     }\n \n+    /**\n+     * Create JWSSigner using the server level configurations and return.\n+     *\n+     * @param privateKey RSA Private key.\n+     * @return  JWSSigner\n+     */\n+    public static JWSSigner createJWSSigner(RSAPrivateKey privateKey) {\n+\n+        boolean allowWeakKey = Boolean.parseBoolean(System.getProperty(ALLOW_WEAK_RSA_SIGNER_KEY));\n+        if (allowWeakKey && log.isDebugEnabled()) {\n+            log.debug(\"System flag 'allow_weak_rsa_signer_key' is  enabled. So weak keys (key length less than 2048) \" +\n+                    \" will be used for the signing.\");", "originalCommit": "0db23a5f1fd7153e9cadad783c4a7e8bcdc9a137", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f381e734a4a08409fdc936eac59e48cfcda7d36", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\nindex e8540d11d..7e83c0043 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n", "chunk": "@@ -2226,7 +2226,7 @@ public class OAuth2Util {\n         boolean allowWeakKey = Boolean.parseBoolean(System.getProperty(ALLOW_WEAK_RSA_SIGNER_KEY));\n         if (allowWeakKey && log.isDebugEnabled()) {\n             log.debug(\"System flag 'allow_weak_rsa_signer_key' is  enabled. So weak keys (key length less than 2048) \" +\n-                    \" will be used for the signing.\");\n+                    \" will be allowed for the signing.\");\n         }\n         return new RSASSASigner(privateKey, allowWeakKey);\n     }\n", "next_change": {"commit": "172af675320c075e22699d29824981270cca45df", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\nindex 7e83c0043..c23ba8ee2 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n", "chunk": "@@ -2226,7 +2226,7 @@ public class OAuth2Util {\n         boolean allowWeakKey = Boolean.parseBoolean(System.getProperty(ALLOW_WEAK_RSA_SIGNER_KEY));\n         if (allowWeakKey && log.isDebugEnabled()) {\n             log.debug(\"System flag 'allow_weak_rsa_signer_key' is  enabled. So weak keys (key length less than 2048) \" +\n-                    \" will be allowed for the signing.\");\n+                    \" will be allowed for signing.\");\n         }\n         return new RSASSASigner(privateKey, allowWeakKey);\n     }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "4634329e9269288daf5f43d626f256ef98123467", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\nindex e8540d11d..c23ba8ee2 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n", "chunk": "@@ -2226,7 +2226,7 @@ public class OAuth2Util {\n         boolean allowWeakKey = Boolean.parseBoolean(System.getProperty(ALLOW_WEAK_RSA_SIGNER_KEY));\n         if (allowWeakKey && log.isDebugEnabled()) {\n             log.debug(\"System flag 'allow_weak_rsa_signer_key' is  enabled. So weak keys (key length less than 2048) \" +\n-                    \" will be used for the signing.\");\n+                    \" will be allowed for signing.\");\n         }\n         return new RSASSASigner(privateKey, allowWeakKey);\n     }\n", "next_change": {"commit": "46212ce62c2a35fbdbde558e49ddcdd49ca98250", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\nindex c23ba8ee2..8c409c237 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n", "chunk": "@@ -2215,22 +2214,6 @@ public class OAuth2Util {\n         }\n     }\n \n-    /**\n-     * Create JWSSigner using the server level configurations and return.\n-     *\n-     * @param privateKey RSA Private key.\n-     * @return  JWSSigner\n-     */\n-    public static JWSSigner createJWSSigner(RSAPrivateKey privateKey) {\n-\n-        boolean allowWeakKey = Boolean.parseBoolean(System.getProperty(ALLOW_WEAK_RSA_SIGNER_KEY));\n-        if (allowWeakKey && log.isDebugEnabled()) {\n-            log.debug(\"System flag 'allow_weak_rsa_signer_key' is  enabled. So weak keys (key length less than 2048) \" +\n-                    \" will be allowed for signing.\");\n-        }\n-        return new RSASSASigner(privateKey, allowWeakKey);\n-    }\n-\n     /**\n      * Generic Signing function\n      *\n", "next_change": {"commit": "d4025c46ab1b9d6c816de6f11cb8970150ef8173", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\nindex 8c409c237..fafa73c91 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n", "chunk": "@@ -2214,6 +2216,22 @@ public class OAuth2Util {\n         }\n     }\n \n+    /**\n+     * Create JWSSigner using the server level configurations and return.\n+     *\n+     * @param privateKey RSA Private key.\n+     * @return  JWSSigner\n+     */\n+    public static JWSSigner createJWSSigner(RSAPrivateKey privateKey) {\n+\n+        boolean allowWeakKey = Boolean.parseBoolean(System.getProperty(ALLOW_WEAK_RSA_SIGNER_KEY));\n+        if (allowWeakKey && log.isDebugEnabled()) {\n+            log.debug(\"System flag 'allow_weak_rsa_signer_key' is  enabled. So weak keys (key length less than 2048) \" +\n+                    \" will be allowed for signing.\");\n+        }\n+        return new RSASSASigner(privateKey, allowWeakKey);\n+    }\n+\n     /**\n      * Generic Signing function\n      *\n", "next_change": {"commit": "09ac1cf337670037a050dc4d32ffd5bec2170879", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\nindex fafa73c91..73c1895e8 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n", "chunk": "@@ -2179,102 +2422,352 @@ public class OAuth2Util {\n     }\n \n     /**\n-     * Encrypt the JWT token with with given public key.\n+     * Encrypt JWT id token using RSA algorithm.\n      *\n-     * @param publicKey           public key used to encrypt\n-     * @param jwtClaimsSet        contains JWT body\n+     * @param signedJwt           contains signed JWT body\n      * @param encryptionAlgorithm JWT signing algorithm\n      * @param spTenantDomain      Service provider tenant domain\n      * @param clientId            ID of the client\n-     * @param thumbPrint          value used as 'kid'\n      * @return encrypted JWT token\n      * @throws IdentityOAuth2Exception\n      */\n-    private static JWT encryptWithPublicKey(Key publicKey, JWTClaimsSet jwtClaimsSet,\n-                                            JWEAlgorithm encryptionAlgorithm, EncryptionMethod encryptionMethod,\n-                                            String spTenantDomain, String clientId,\n-                                            String thumbPrint) throws IdentityOAuth2Exception {\n-\n-        JWEHeader.Builder headerBuilder = new JWEHeader.Builder(encryptionAlgorithm, encryptionMethod);\n+    private static JWT encryptWithRSA(SignedJWT signedJwt, JWEAlgorithm encryptionAlgorithm,\n+                                      EncryptionMethod encryptionMethod, String spTenantDomain, String clientId)\n+            throws IdentityOAuth2Exception {\n \n         try {\n-            headerBuilder.keyID(thumbPrint);\n-            JWEHeader header = headerBuilder.build();\n-            EncryptedJWT encryptedJWT = new EncryptedJWT(header, jwtClaimsSet);\n+            if (StringUtils.isBlank(spTenantDomain)) {\n+                spTenantDomain = MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(\"Assigned super tenant domain as signing domain when encrypting id token \" +\n+                            \"for client_id: %s .\", clientId));\n+                }\n+            }\n+            String jwksUri = getSPJwksUrl(clientId, spTenantDomain);\n \n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Encrypting JWT using the algorithm: \" + encryptionAlgorithm + \", method: \" +\n-                        encryptionMethod + \", tenant: \" + spTenantDomain + \" & header: \" + header.toString());\n+            if (StringUtils.isBlank(jwksUri)) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(\"Jwks uri is not configured for the service provider associated with \" +\n+                            \"client_id: %s , Checking for x509 certificate.\", clientId));\n+                }\n+                return encryptUsingSPX509Certificate(signedJwt, encryptionAlgorithm, encryptionMethod, spTenantDomain,\n+                        clientId);\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(\"Jwks uri is configured for the service provider associated with\" +\n+                            \" client %s from jwks uri %s .\", clientId, jwksUri));\n+                }\n+                return encryptUsingJwksPublicKey(signedJwt, encryptionAlgorithm, encryptionMethod, spTenantDomain,\n+                        clientId, jwksUri);\n             }\n \n-            JWEEncrypter encrypter = new RSAEncrypter((RSAPublicKey) publicKey);\n-            encryptedJWT.encrypt(encrypter);\n-            return encryptedJWT;\n-        } catch (JOSEException e) {\n+        } catch (JOSEException | ParseException e) {\n             throw new IdentityOAuth2Exception(\"Error occurred while encrypting JWT for the client_id: \" + clientId\n                     + \" with the tenant domain: \" + spTenantDomain, e);\n         }\n     }\n \n     /**\n-     * Create JWSSigner using the server level configurations and return.\n+     * Encrypt jwt using service provider's configured X509 certificate\n      *\n-     * @param privateKey RSA Private key.\n-     * @return  JWSSigner\n+     * @param signedJwt           contains signed JWT body\n+     * @param encryptionAlgorithm JWT signing algorithm\n+     * @param encryptionMethod    Encryption method\n+     * @param spTenantDomain      Service provider tenant domain\n+     * @param clientId            ID of the client\n+     * @return\n+     * @throws IdentityOAuth2Exception\n      */\n-    public static JWSSigner createJWSSigner(RSAPrivateKey privateKey) {\n+    private static JWT encryptUsingSPX509Certificate(SignedJWT signedJwt, JWEAlgorithm encryptionAlgorithm,\n+                                                     EncryptionMethod encryptionMethod, String spTenantDomain,\n+                                                     String clientId) throws IdentityOAuth2Exception {\n \n-        boolean allowWeakKey = Boolean.parseBoolean(System.getProperty(ALLOW_WEAK_RSA_SIGNER_KEY));\n-        if (allowWeakKey && log.isDebugEnabled()) {\n-            log.debug(\"System flag 'allow_weak_rsa_signer_key' is  enabled. So weak keys (key length less than 2048) \" +\n-                    \" will be allowed for signing.\");\n+        Certificate publicCert = getX509CertOfOAuthApp(clientId, spTenantDomain);\n+        if (publicCert == null) {\n+            throw new IdentityOAuth2Exception(\"Error while retrieving X509 cert from oauth app with \"\n+                    + \"client_id: \" + clientId + \" of tenantDomain: \" + spTenantDomain);\n         }\n-        return new RSASSASigner(privateKey, allowWeakKey);\n+        Key publicKey = publicCert.getPublicKey();\n+        if (publicKey == null) {\n+            throw new IdentityOAuth2Exception(\"Error while retrieving public key from X509 cert of oauth app with \"\n+                   + \"client_id: \" + clientId + \" of tenantDomain: \" + spTenantDomain);\n+        }\n+        String kid = getThumbPrint(publicCert);\n+        return encryptWithPublicKey(publicKey, signedJwt, encryptionAlgorithm, encryptionMethod,\n+                spTenantDomain, clientId, kid);\n     }\n \n     /**\n-     * Generic Signing function\n+     * Encrypt jwt using publickey fetched from jwks\n      *\n-     * @param jwtClaimsSet       contains JWT body\n-     * @param signatureAlgorithm JWT signing algorithm\n-     * @param tenantDomain       tenant domain\n-     * @return signed JWT token\n+     * @param signedJwt           contains signed JWT body\n+     * @param encryptionAlgorithm JWT signing algorithm\n+     * @param encryptionMethod    Encryption method\n+     * @param spTenantDomain      Service provider tenant domain\n+     * @param clientId            ID of the client\n+     * @param jwksUri             jwks url\n+     * @return\n      * @throws IdentityOAuth2Exception\n+     * @throws JOSEException\n+     * @throws ParseException\n      */\n-    public static JWT signJWT(JWTClaimsSet jwtClaimsSet, JWSAlgorithm signatureAlgorithm, String tenantDomain)\n-            throws IdentityOAuth2Exception {\n+    private static JWT encryptUsingJwksPublicKey(SignedJWT signedJwt, JWEAlgorithm encryptionAlgorithm,\n+                                                 EncryptionMethod encryptionMethod, String spTenantDomain,\n+                                                 String clientId, String jwksUri)\n+            throws IdentityOAuth2Exception, JOSEException, ParseException {\n \n-        if (JWSAlgorithm.RS256.equals(signatureAlgorithm) || JWSAlgorithm.RS384.equals(signatureAlgorithm) ||\n-                JWSAlgorithm.RS512.equals(signatureAlgorithm) || JWSAlgorithm.PS256.equals(signatureAlgorithm)) {\n-            return signJWTWithRSA(jwtClaimsSet, signatureAlgorithm, tenantDomain);\n-        } else if (JWSAlgorithm.HS256.equals(signatureAlgorithm) || JWSAlgorithm.HS384.equals(signatureAlgorithm) ||\n-                JWSAlgorithm.HS512.equals(signatureAlgorithm)) {\n-            // return signWithHMAC(jwtClaimsSet,jwsAlgorithm,request); implementation need to be done\n-            throw new RuntimeException(\"Provided signature algorithm: \" + signatureAlgorithm +\n-                    \" is not supported\");\n-        } else {\n-            // return signWithEC(jwtClaimsSet,jwsAlgorithm,request); implementation need to be done\n-            throw new RuntimeException(\"Provided signature algorithm: \" + signatureAlgorithm +\n-                    \" is not supported\");\n-        }\n+        JWK encryptionJwk = getEncryptionJWKFromJWKS(jwksUri, encryptionAlgorithm);\n+        Key publicKey = RSAKey.parse(encryptionJwk.toJSONString()).toRSAPublicKey();\n+        String kid = getKidValueFromJwk(encryptionJwk);\n+        return encryptWithPublicKey(publicKey, signedJwt, encryptionAlgorithm, encryptionMethod,\n+                spTenantDomain, clientId, kid);\n     }\n \n     /**\n-     * sign JWT token from RSA algorithm\n+     * Get kid value from the jwk\n      *\n-     * @param jwtClaimsSet       contains JWT body\n-     * @param signatureAlgorithm JWT signing algorithm\n-     * @param tenantDomain       tenant domain\n-     * @return signed JWT token\n-     * @throws IdentityOAuth2Exception\n+     * @param encryptionJwk Encryption jwk\n+     * @return\n      */\n-    //TODO: Can make this private after removing deprecated \"signJWTWithRSA\" methods in DefaultIDTokenBuilder\n-    public static JWT signJWTWithRSA(JWTClaimsSet jwtClaimsSet, JWSAlgorithm signatureAlgorithm, String tenantDomain)\n-            throws IdentityOAuth2Exception {\n+    private static String getKidValueFromJwk(JWK encryptionJwk) {\n \n-        try {\n-            if (StringUtils.isBlank(tenantDomain)) {\n-                tenantDomain = MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;\n+        String kid;\n+        Certificate publicCert;\n+        if (encryptionJwk.getKeyID() != null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(String.format(\"Kid value is available in jwk %s .\", encryptionJwk.getKeyID()));\n+            }\n+            kid = encryptionJwk.getKeyID();\n+        } else {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Kid value is not available in jwk, attempting to set x5c thumbprint as kid.\");\n+            }\n+            try {\n+                publicCert = getPublicCertFromJWK(encryptionJwk);\n+                kid = getJwkThumbPrint(publicCert);\n+            } catch (IdentityOAuth2Exception e) {\n+                log.error(\"Failed to set x5c thumbprint as kid value.\", e);\n+                kid = null;\n+            }\n+        }\n+        return kid;\n+    }\n+\n+    /**\n+     * Get encryption jwk from JWKS list when JWKS Uri is given.\n+     *\n+     * @param jwksUri - JWKS Uri\n+     * @param encryptionAlgorithm encryption algorithm\n+     * @return - encryption JWK from the jwks url\n+     * @throws IdentityOAuth2Exception - IdentityOAuth2Exception\n+     */\n+    private static JWK getEncryptionJWKFromJWKS(String jwksUri, JWEAlgorithm encryptionAlgorithm)\n+            throws IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(String.format(\"Attempting to retrieve encryption jwk from the Jwks uri: %s , algorithm : %s\",\n+                    jwksUri, encryptionAlgorithm));\n+        }\n+        try {\n+            JWKSet publicKeys = JWKSet.load(new URL(jwksUri));\n+            // Get the first key, use as enc and alg from the list\n+            JWKMatcher keyMatcherWithAlgAndEncryptionUse =\n+                    new JWKMatcher.Builder().algorithm(encryptionAlgorithm).keyUse(KeyUse.ENCRYPTION).build();\n+            List<JWK> jwkList = new JWKSelector(keyMatcherWithAlgAndEncryptionUse).select(publicKeys);\n+\n+            if (jwkList.isEmpty()) {\n+                // If empty, then get the first key, use as enc from the list\n+                JWKMatcher keyMatcherWithEncryptionUse = new JWKMatcher.Builder().keyUse(KeyUse.ENCRYPTION).build();\n+                jwkList = new JWKSelector(keyMatcherWithEncryptionUse).select(publicKeys);\n+\n+                if (jwkList.isEmpty()) {\n+                    // failover defaults to ->, then get the first key, use as sig from the list\n+                    JWKMatcher keyMatcherWithSignatureUse = new JWKMatcher.Builder().keyUse(KeyUse.SIGNATURE).build();\n+                    jwkList = new JWKSelector(keyMatcherWithSignatureUse).select(publicKeys);\n+                }\n+            }\n+\n+            if (jwkList.isEmpty()) {\n+                throw new IdentityOAuth2Exception(String.format(\"Failed to retrieve valid jwk from \" +\n+                        \"jwks uri: %s, algorithm : %s \", jwksUri, encryptionAlgorithm));\n+            } else {\n+                return jwkList.get(0);\n+            }\n+        } catch (ParseException | IOException e) {\n+            throw new IdentityOAuth2Exception(String.format(\"Failed to retrieve jwk from jwks uri: %s, algorithm : %s\",\n+                    jwksUri, encryptionAlgorithm), e);\n+        }\n+    }\n+\n+    /**\n+     * Get public certificate from JWK\n+     *\n+     * @param jwk\n+     * @return\n+     * @throws IdentityOAuth2Exception\n+     */\n+    private static X509Certificate getPublicCertFromJWK(JWK jwk) throws IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(String.format(\"Attempting to retrieve public certificate from the Jwk kid: %s .\"\n+                    , jwk.getKeyID()));\n+        }\n+        X509Certificate certificate;\n+        if (jwk != null && jwk.getParsedX509CertChain() != null) {\n+            certificate = jwk.getParsedX509CertChain().get(0);\n+            if (log.isDebugEnabled()) {\n+                log.debug(String.format(\"Retrieved the public signing certificate successfully from the \" +\n+                        \"jwk : %s .\", jwk));\n+            }\n+            return certificate;\n+        }\n+        throw new IdentityOAuth2Exception(\"Failed to retrieve public certificate from jwk due to null.\");\n+    }\n+\n+    /**\n+     * Encrypt the JWT token with with given public key.\n+     *\n+     * @param publicKey           public key used to encrypt\n+     * @param jwtClaimsSet        contains JWT body\n+     * @param encryptionAlgorithm JWT signing algorithm\n+     * @param spTenantDomain      Service provider tenant domain\n+     * @param clientId            ID of the client\n+     * @param thumbPrint          value used as 'kid'\n+     * @return encrypted JWT token\n+     * @throws IdentityOAuth2Exception\n+     * @deprecated replaced by\n+     * {@link #encryptWithPublicKey(Key, SignedJWT, JWEAlgorithm, EncryptionMethod, String, String, String)}\n+     */\n+    @Deprecated\n+    private static JWT encryptWithPublicKey(Key publicKey, JWTClaimsSet jwtClaimsSet,\n+                                            JWEAlgorithm encryptionAlgorithm, EncryptionMethod encryptionMethod,\n+                                            String spTenantDomain, String clientId,\n+                                            String thumbPrint) throws IdentityOAuth2Exception {\n+\n+        JWEHeader.Builder headerBuilder = new JWEHeader.Builder(encryptionAlgorithm, encryptionMethod);\n+\n+        try {\n+            headerBuilder.keyID(thumbPrint);\n+            JWEHeader header = headerBuilder.build();\n+            EncryptedJWT encryptedJWT = new EncryptedJWT(header, jwtClaimsSet);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Encrypting JWT using the algorithm: \" + encryptionAlgorithm + \", method: \" +\n+                        encryptionMethod + \", tenant: \" + spTenantDomain + \" & header: \" + header.toString());\n+            }\n+\n+            JWEEncrypter encrypter = new RSAEncrypter((RSAPublicKey) publicKey);\n+            encryptedJWT.encrypt(encrypter);\n+            return encryptedJWT;\n+        } catch (JOSEException e) {\n+            throw new IdentityOAuth2Exception(\"Error occurred while encrypting JWT for the client_id: \" + clientId\n+                    + \" with the tenant domain: \" + spTenantDomain, e);\n+        }\n+    }\n+\n+    /**\n+     * Encrypt the JWT token with with given public key.\n+     *\n+     * @param publicKey           public key used to encrypt\n+     * @param signedJwt           contains signed JWT body\n+     * @param encryptionAlgorithm JWT signing algorithm\n+     * @param spTenantDomain      Service provider tenant domain\n+     * @param clientId            ID of the client\n+     * @param kid                 value used as 'kid'\n+     * @return encrypted JWT token\n+     * @throws IdentityOAuth2Exception\n+     */\n+    private static JWT encryptWithPublicKey(Key publicKey, SignedJWT signedJwt,\n+                                            JWEAlgorithm encryptionAlgorithm, EncryptionMethod encryptionMethod,\n+                                            String spTenantDomain, String clientId,\n+                                            String kid) throws IdentityOAuth2Exception {\n+\n+        JWEHeader.Builder headerBuilder = new JWEHeader.Builder(encryptionAlgorithm, encryptionMethod);\n+\n+        try {\n+            if (StringUtils.isNotBlank(kid)) {\n+                headerBuilder.keyID(kid);\n+            }\n+            headerBuilder.contentType(JWT); // Required to indicate nested JWT.\n+            JWEHeader header = headerBuilder.build();\n+\n+            JWEObject jweObject = new JWEObject(header, new Payload(signedJwt));\n+            // Encrypt with the recipient's public key.\n+            jweObject.encrypt(new RSAEncrypter((RSAPublicKey) publicKey));\n+\n+            EncryptedJWT encryptedJWT = EncryptedJWT.parse(jweObject.serialize());\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Encrypting JWT using the algorithm: \" + encryptionAlgorithm + \", method: \" +\n+                        encryptionMethod + \", tenant: \" + spTenantDomain + \" & header: \" + header.toString());\n+            }\n+\n+            return encryptedJWT;\n+        } catch (JOSEException | ParseException e) {\n+            throw new IdentityOAuth2Exception(\"Error occurred while encrypting JWT for the client_id: \" + clientId\n+                    + \" with the tenant domain: \" + spTenantDomain, e);\n+        }\n+    }\n+\n+    /**\n+     * Create JWSSigner using the server level configurations and return.\n+     *\n+     * @param privateKey RSA Private key.\n+     * @return  JWSSigner\n+     */\n+    public static JWSSigner createJWSSigner(RSAPrivateKey privateKey) {\n+\n+        boolean allowWeakKey = Boolean.parseBoolean(System.getProperty(ALLOW_WEAK_RSA_SIGNER_KEY));\n+        if (allowWeakKey && log.isDebugEnabled()) {\n+            log.debug(\"System flag 'allow_weak_rsa_signer_key' is  enabled. So weak keys (key length less than 2048) \" +\n+                    \" will be allowed for signing.\");\n+        }\n+        return new RSASSASigner(privateKey, allowWeakKey);\n+    }\n+\n+    /**\n+     * Generic Signing function\n+     *\n+     * @param jwtClaimsSet       contains JWT body\n+     * @param signatureAlgorithm JWT signing algorithm\n+     * @param tenantDomain       tenant domain\n+     * @return signed JWT token\n+     * @throws IdentityOAuth2Exception\n+     */\n+    public static JWT signJWT(JWTClaimsSet jwtClaimsSet, JWSAlgorithm signatureAlgorithm, String tenantDomain)\n+            throws IdentityOAuth2Exception {\n+\n+        if (JWSAlgorithm.RS256.equals(signatureAlgorithm) || JWSAlgorithm.RS384.equals(signatureAlgorithm) ||\n+                JWSAlgorithm.RS512.equals(signatureAlgorithm) || JWSAlgorithm.PS256.equals(signatureAlgorithm)) {\n+            return signJWTWithRSA(jwtClaimsSet, signatureAlgorithm, tenantDomain);\n+        } else if (JWSAlgorithm.HS256.equals(signatureAlgorithm) || JWSAlgorithm.HS384.equals(signatureAlgorithm) ||\n+                JWSAlgorithm.HS512.equals(signatureAlgorithm)) {\n+            // return signWithHMAC(jwtClaimsSet,jwsAlgorithm,request); implementation need to be done\n+            throw new RuntimeException(\"Provided signature algorithm: \" + signatureAlgorithm +\n+                    \" is not supported\");\n+        } else {\n+            // return signWithEC(jwtClaimsSet,jwsAlgorithm,request); implementation need to be done\n+            throw new RuntimeException(\"Provided signature algorithm: \" + signatureAlgorithm +\n+                    \" is not supported\");\n+        }\n+    }\n+\n+    /**\n+     * sign JWT token from RSA algorithm\n+     *\n+     * @param jwtClaimsSet       contains JWT body\n+     * @param signatureAlgorithm JWT signing algorithm\n+     * @param tenantDomain       tenant domain\n+     * @return signed JWT token\n+     * @throws IdentityOAuth2Exception\n+     */\n+    //TODO: Can make this private after removing deprecated \"signJWTWithRSA\" methods in DefaultIDTokenBuilder\n+    public static JWT signJWTWithRSA(JWTClaimsSet jwtClaimsSet, JWSAlgorithm signatureAlgorithm, String tenantDomain)\n+            throws IdentityOAuth2Exception {\n+\n+        try {\n+            if (StringUtils.isBlank(tenantDomain)) {\n+                tenantDomain = MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;\n                 if (log.isDebugEnabled()) {\n                     log.debug(\"Assign super tenant domain as signing domain.\");\n                 }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "4634329e9269288daf5f43d626f256ef98123467", "message": "Merge commit", "committedDate": null}, {"oid": "46212ce62c2a35fbdbde558e49ddcdd49ca98250", "committedDate": "2020-01-24 10:35:38 +0530", "message": "reimplement scope mgt by having new column SCOPE_TYPE in IDN_OAUTH2_SCOPE table."}, {"oid": "d4025c46ab1b9d6c816de6f11cb8970150ef8173", "committedDate": "2020-01-29 12:08:14 +0530", "message": "Merge pull request #1302 from sarubi/scope-mgt-public"}, {"oid": "fddc67a3d0e6fddf721e77582f8074f95c2fde20", "committedDate": "2020-02-13 15:23:09 +0530", "message": "Replace find bugs with spot bugs and findsecbugs"}, {"oid": "da04a92e932134353651f408eaaa8d765f00652d", "committedDate": "2020-02-21 13:44:41 +0530", "message": "Support extension for OIDProviderResponseBuilder"}, {"oid": "090a921158abb01a424a835c8f733cc3b58185b5", "committedDate": "2020-02-24 18:18:50 +0530", "message": "Add additional parameters"}, {"oid": "a7a3d92223dae020f56d3e576d66cb608b9e09a9", "committedDate": "2020-03-23 18:40:13 +0530", "message": "Tenant-qualify OIDC discovery endpoint"}, {"oid": "fa4f7acf9ac5b084cee55c5882169c2824a78ef6", "committedDate": "2020-03-24 22:43:03 +0530", "message": "resolve issues"}, {"oid": "43fd748cab09c2fd4228102dbc4d1ad26f1c527d", "committedDate": "2020-03-26 08:41:04 +0530", "message": "Add String constants for OAuth2 endpoints. Fix tests."}, {"oid": "15383873bd07d9349271aeef1c92d9c7cc0df688", "committedDate": "2020-03-26 23:59:42 +0530", "message": "Resolve entity ID only if it is not modified"}, {"oid": "4a98d4c521da92928309f5f2cab35848b8b60811", "committedDate": "2020-03-27 13:29:29 +0530", "message": "Add tests for TenantURLSupport mode and fix minor issues"}, {"oid": "cab7627fdfa6d1e1284e4f0a675d94f6d4e18499", "committedDate": "2020-03-27 18:17:37 +0530", "message": "Add method comments."}, {"oid": "166d58ce1579224c8c747d183da7e44efbf2fec5", "committedDate": "2020-04-13 18:18:41 +0530", "message": "implement method to build url"}, {"oid": "6c76a3aa6d742b3f98b0d93cd667f13d0ebc19fa", "committedDate": "2020-04-13 18:19:29 +0530", "message": "change resolveUrl method usages to consume buildUrl"}, {"oid": "7de56f43584b50c5bfd69529a69b2cea8096ea4c", "committedDate": "2020-04-20 08:59:43 +0530", "message": "fix buildUrl method fix tests"}, {"oid": "9400163554242edc0f78ac79349bb99f8b0cd53b", "committedDate": "2020-04-20 16:59:56 +0530", "message": "fix minor issues"}, {"oid": "573eb63dfeaed5bf5c9af4342ab41dddb0b464e3", "committedDate": "2020-04-20 18:14:52 +0530", "message": "fix minor issues"}, {"oid": "3dab7125241b7c7d540d145196d1a88b9ee51467", "committedDate": "2020-04-21 12:49:24 +0530", "message": "resolve minor issues"}, {"oid": "cc00a3abd8c84a75c1d9f57f3671ce7557b49be6", "committedDate": "2020-04-21 18:55:01 +0530", "message": "minor changes to the build Service Url implementation"}, {"oid": "92711d34215089fd6cf0eb376f9f39a0fec77cac", "committedDate": "2020-04-22 19:20:29 +0530", "message": "Remove methods using resolveURL"}, {"oid": "3c09d0f93406284d57b345c4a1b140c88d67b58a", "committedDate": "2020-04-23 10:08:29 +0530", "message": "Support for tenant qualified URLs for Authentication endpoint"}, {"oid": "ea32a0a5c9c5be07448810a8e80ae432fc7e6995", "committedDate": "2020-04-23 14:13:48 +0530", "message": "Tenant qualify consent page URL and error page URLs"}, {"oid": "81d7be6add04513c081da2f5d6795ee87e32cdf3", "committedDate": "2020-04-23 21:54:35 +0530", "message": "Merge pull request #1362 from mefarazath/ashendes/tenant-qualify-urls"}, {"oid": "11277d223da66490be57b0a7d18a28bb209702e4", "committedDate": "2020-04-24 16:23:00 +0530", "message": "Return default token endpoint for issuer ID in the tenant-qualified URLs mode"}, {"oid": "5654c3971e0ccb838191e1bf6df56a404df617d3", "committedDate": "2020-04-24 17:55:53 +0530", "message": "Update error messages"}, {"oid": "246159fbe230cd6c24ce0488d461763d47338f28", "committedDate": "2020-05-06 15:53:07 +0530", "message": "Restrict cross tenant domain requests in tenant qualifed URL mode"}, {"oid": "fd3a52abcf3a0ae6f50e0238cc72146286961374", "committedDate": "2020-05-16 03:36:36 +0530", "message": "Fix JWT token validation at introspection"}, {"oid": "201acce27c9b11a2c09edacdaaea5e9367bae1fa", "committedDate": "2020-05-16 04:27:59 +0530", "message": "Fix formatting"}, {"oid": "1b45f0d9e7b8cd9c2aeedb370194448c09747715", "committedDate": "2020-05-18 16:33:17 +0530", "message": "Fix review comments"}, {"oid": "d8a134b88129cf8a210bd30c0d63b21d0d34b60d", "committedDate": "2020-06-18 13:41:07 +0530", "message": "Fix introspection endpoint url in tenant legacy URL mode in OIDC config response"}, {"oid": "b67eb489e485f9f7fc6f19c1526ceaf8fea2fa45", "committedDate": "2020-06-18 17:01:00 +0530", "message": "Address comment"}, {"oid": "6ec98c9253cc9236077d52d5c2a73a5d7aeb03f5", "committedDate": "2020-06-25 12:34:04 +0530", "message": "Set correct authenticated IdP value to AuthenticatedUser object"}, {"oid": "05440dfaef80c68103af65d990e85d3403a4ba95", "committedDate": "2020-08-11 15:33:58 +0530", "message": "Add methods to register custom KeyIDProvider implementations to Data holder during OSGi activation"}, {"oid": "3598c67dfb769cbe96a676ad7ce245408761203c", "committedDate": "2020-08-19 12:52:41 +0530", "message": "Fixed styling issues pointed in review"}, {"oid": "95115b883375a71a2d90436ff5ad9381af537f75", "committedDate": "2020-08-19 14:42:44 +0530", "message": "Add debug logs for KeyIDProvider implementation"}, {"oid": "f3759c7482fc2bf21a7b614f5a63dbd05c68c3dd", "committedDate": "2020-08-19 15:14:22 +0530", "message": "Fixed styling issues"}, {"oid": "04edb66ca6253384d82585f9139772267c194117", "committedDate": "2020-08-19 15:18:35 +0530", "message": "Fixed styling issues"}, {"oid": "3c35ec3dbc722e031615e03ad1402d022cda97b1", "committedDate": "2020-08-19 15:35:38 +0530", "message": "Fixed styling issues"}, {"oid": "c6a3abcb8c224352eccee7212ed814954c88b740", "committedDate": "2020-08-19 17:52:52 +0530", "message": "Debug log in OAuth2Util reformatted"}, {"oid": "30cbeb360acf87c9c903bd9c82d8c0652b17cb57", "committedDate": "2020-08-20 09:35:05 +0530", "message": "Update components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java"}, {"oid": "edc2012997898be551b94ffd5637f94b26f7720c", "committedDate": "2020-08-20 09:41:05 +0530", "message": "Refactored Exception message in getCertificate method"}, {"oid": "c0d257bf4bca184534a887234bf80dfb20f71891", "committedDate": "2020-08-20 09:41:32 +0530", "message": "Merge branch 'master' of https://github.com/dimuthnc/identity-inbound-auth-oauth"}, {"oid": "9bbbe7d1b4a6a7f2238637b2ce629be5b950f5ef", "committedDate": "2020-09-30 13:01:19 +0530", "message": "Improve fix done for JWT token validation at introspection"}, {"oid": "eea227d4a329cc0e9b3217f065c083f00094498b", "committedDate": "2020-10-06 17:12:32 +0530", "message": "Correcting the thumbprint algorithm"}, {"oid": "64de413c86c81a5f94dd28a7dd60b1d4ead435f4", "committedDate": "2020-10-06 17:39:38 +0530", "message": "Updating error message to indicate correct thumbprint calculation algorithm"}, {"oid": "f4fd730468b8c10412b357aae952ac2c055e62a7", "committedDate": "2020-10-15 20:47:22 +0530", "message": "Fix webfinger issuer in tenant mode"}, {"oid": "328d264a2e70a4028ddfcbf05a25f57e3e873174", "committedDate": "2020-10-19 03:30:47 +0530", "message": "move allowed scopes reading"}, {"oid": "dc50a199849af151aff3f12875d02c13a09887af", "committedDate": "2020-10-19 12:01:37 +0530", "message": "Merge branch 'master' of https://github.com/wso2-extensions/identity-inbound-auth-oauth into master-rolebasescopevaldation"}, {"oid": "9f55ee3aa001b5471ee20f6625ffebee8394af5e", "committedDate": "2020-10-19 15:15:27 +0530", "message": "refactor"}, {"oid": "77a61b51846b3ca4628073b663177e69174962b0", "committedDate": "2020-10-25 00:58:21 +0530", "message": "Add openid const"}, {"oid": "f9a33aa6a665899924d3902e3db6107dbb58539e", "committedDate": "2020-11-11 21:50:41 +0530", "message": "Merge pull request #1481 from janakamarasena/test-builder"}, {"oid": "8fa8b831b576be452425601c762f110c83b6ca24", "committedDate": "2020-12-08 09:45:53 +0530", "message": "Scope validation for not associated federated user using idp role mapping"}, {"oid": "1a7c7f3a5b837f55e90756a0ea6d7bef65c53af2", "committedDate": "2021-02-07 01:35:08 +0530", "message": "add more debug logs"}, {"oid": "7b7f55fb9bff0f7862d58535590826da6215a4ab", "committedDate": "2021-02-07 16:09:14 +0530", "message": "Filter unregistered scopes and remove oidc scopes from consent page url"}, {"oid": "f5575dd682102d622f9e32befa3e0f15bbe612d4", "committedDate": "2021-02-22 18:13:35 +0530", "message": "Update display names and descriptions of OIDC Scopes"}, {"oid": "ec5d0c4d07383a987deb316b475d1271ef876687", "committedDate": "2021-03-22 18:12:18 +0530", "message": "Fix issue in timestamp skew in token generation and validation flows"}, {"oid": "e5975a17130f5ec311b57598abb6ca3e4db5e469", "committedDate": "2021-04-28 15:01:48 +0530", "message": "Get consumer key from OAuthAppDO to avoid DB calls"}, {"oid": "269883d66aefb53883758dcf3a2d50d0d566599e", "committedDate": "2021-04-28 16:07:07 +0530", "message": "Refactor"}, {"oid": "07a797036eca310063cfad3b3ef2feb60a8d81ba", "committedDate": "2021-04-28 16:38:27 +0530", "message": "Refactor"}, {"oid": "690ce99fd183adf90f93588649b8a283c6ff544e", "committedDate": "2021-04-28 21:58:00 +0530", "message": "Add warn log when the OAuth applications not exists"}, {"oid": "a127743bf5f9c1c5b503a845b922e95568d504a4", "committedDate": "2021-04-29 18:15:06 +0530", "message": "Add warn log when the OAuth applications not exists"}, {"oid": "f47d66e1b3493847344a5bfb6a37a86d6b82e928", "committedDate": "2021-05-05 17:42:50 +0530", "message": "Add diagnostic logs for OAuth flows"}, {"oid": "3be7307263c4fd227d3975aad78f10fa6662723e", "committedDate": "2021-05-28 00:32:52 +0530", "message": "Change id token encryption logic to sign before encrypting"}, {"oid": "4d887a5f91aa50f4e7dadc7c1b7193a83278140f", "committedDate": "2021-06-01 23:59:33 +0530", "message": "Move jwt signing into encryptJWT method"}, {"oid": "29ab3139afc19cecab051ad242a7ac8ca1777356", "committedDate": "2021-06-02 01:12:05 +0530", "message": "Refactor the code"}, {"oid": "c297443bf3d0f91bca85be725732712326df471f", "committedDate": "2021-06-02 01:40:11 +0530", "message": "Add missing java docs"}, {"oid": "736625ebf8f492288edf61ba32e9c858e0488ab8", "committedDate": "2021-06-02 02:08:48 +0530", "message": "Fix javadoc issues"}, {"oid": "f20fb01fcabb0cc766bb5857390317660045d097", "committedDate": "2021-06-14 13:29:54 +0530", "message": "Fix review comments"}, {"oid": "ebefeaf60a3c07b17db6ffb8c976abc5c8edd092", "committedDate": "2021-06-14 13:52:36 +0530", "message": "Fix review comments"}, {"oid": "77773744684d10910194def27361aaf49b02299e", "committedDate": "2021-06-15 14:40:25 +0530", "message": "Fix review comments"}, {"oid": "0d54a15c217bee6d226387e8e508d3b1e9f9e4e8", "committedDate": "2021-06-15 17:17:04 +0530", "message": "fix NPE when retrieving publicCert of application"}, {"oid": "cd457feb19e80ac4b5f38b05f8f6c24265f6a53c", "committedDate": "2021-06-18 12:23:29 +0530", "message": "Modify logs with fullstops"}, {"oid": "aff283e0a117d9eaf79d12fbbb3d9b64db75d46c", "committedDate": "2021-06-25 15:02:07 +0530", "message": "Modify OIDC scope claims"}, {"oid": "3e36e5f40f310a3901eed2b66fc54932223cf789", "committedDate": "2021-06-26 12:43:54 +0530", "message": "Refactor code"}, {"oid": "28c3785807770c8f68fa84c0f2bba59296eb7768", "committedDate": "2021-07-12 10:37:04 +0530", "message": "Add initial version of user id"}, {"oid": "81b609a5a1e0c382752c265e85d5df703c67b350", "committedDate": "2021-07-13 10:25:33 +0530", "message": "Fix PR comments"}, {"oid": "4b584615b4d1b57bdf85bfbbbb7ed0d10c7ca28e", "committedDate": "2021-07-13 13:44:40 +0530", "message": "Fix API backward compatibility"}, {"oid": "3e86e0ca95a2cebbf2f1a18f5b8212b2a2c591c0", "committedDate": "2021-07-13 22:49:29 +0530", "message": "Fix token cache key for implecit grant"}, {"oid": "39a02e8fed6af53dcf1d77952cee55fc30cb2ac8", "committedDate": "2021-07-20 17:08:18 +0530", "message": "Revert Diagnostic Logs"}, {"oid": "62166cb2db9a0f896077cbd93b1e33079cad2bd1", "committedDate": "2021-08-11 09:45:06 +0530", "message": "Improve fetch encryption jwk from JWKS list, with encryption algorithm"}, {"oid": "336291d55b5bed75743ac1b0c6826f81b19eb138", "committedDate": "2021-08-11 16:23:47 +0530", "message": "Remove additional logs"}, {"oid": "a8181d2139710ecd33164c9aee6e62119314e81d", "committedDate": "2021-08-12 20:14:45 +0530", "message": "add support for PS256 configuration"}, {"oid": "a96dd3a9c727bd2b5602b238316c201a18e9390a", "committedDate": "2021-08-20 15:17:12 +0530", "message": "Token introspection restricted to tenant specific admins."}, {"oid": "0f80e5bdf366c15f9c1153c120ba4fe45b2d378c", "committedDate": "2021-08-25 13:01:31 +0530", "message": "Fix invalid access token error when revoking tokens mapped to session."}, {"oid": "28614a5ba7a41a4601bd87435192658bc1feee8b", "committedDate": "2021-09-06 22:48:15 +0530", "message": "load OIDC scope and Oauth scope binding config on server startup"}, {"oid": "769193d2218fc501bb24ce9d6b58e85bb8621509", "committedDate": "2021-09-08 16:36:53 +0530", "message": "Provide capability to extend the initialization of claim mapping for tenant"}, {"oid": "132e586fb2b911cd39da167a696d5242ad09f2f1", "committedDate": "2021-09-10 17:16:24 +0530", "message": "Merge pull request #1658 from ashendes/cross-tenant-introspection"}, {"oid": "45fd5eea5339d76f7b9ea2c05c6edc5b58728450", "committedDate": "2021-09-13 12:10:25 +0530", "message": "Revert \"Token introspection restricted to tenant specific admins.\""}, {"oid": "c8435fa38f92c708b068d3e5da168aa646448249", "committedDate": "2021-09-27 15:27:42 +0530", "message": "Add diagnostic logs to OIDC flows"}, {"oid": "050e9fa03341b1d33efc8d1fadd206e69ea5d658", "committedDate": "2021-09-28 09:19:30 +0530", "message": "Fix tests"}, {"oid": "5afc2463c78f0cffad0d1c4c318c77c6213faf6f", "committedDate": "2021-10-02 09:40:15 +0530", "message": "Fix oauth cache to use user's tenant"}, {"oid": "15c80d95b18633a1c4aa553260c14baddea05f29", "committedDate": "2021-10-03 21:53:27 +0530", "message": "Refactored the code"}, {"oid": "546e367417134c832010aafaea9d4225bafff193", "committedDate": "2021-10-04 15:19:57 +0530", "message": "Maintain internal scope - permission binding system level"}, {"oid": "e4ba59b383a79c0a934aeafe8810f218b97c6d81", "committedDate": "2021-10-04 22:13:16 +0530", "message": "fix identify authorized user subject identifier"}, {"oid": "5e18e14426c8168247a1791d0a6b08049ac1fe03", "committedDate": "2021-10-05 11:21:18 +0530", "message": "improve user id resolving logic"}, {"oid": "7ba2691356b2bef253aa40f01a0b7b2fb0c9bf8f", "committedDate": "2021-10-06 15:15:14 +0530", "message": "Merge pull request #1706 from senthalan/system-level"}, {"oid": "f9fd281ba28563e7a260d7f638288e6f69e7494a", "committedDate": "2021-10-14 11:20:19 +0530", "message": "Add dpop related code changes"}, {"oid": "3b54a0e553f392c603363303ceca7ee94b54ac60", "committedDate": "2021-10-26 15:13:30 +0530", "message": "Merge pull request #1705 from UdeshAthukorala/v6.7.42"}, {"oid": "071e14ebfa7f5ae828aeddab8097d8eeadb78d2f", "committedDate": "2021-11-05 12:09:48 +0530", "message": "Merge remote-tracking branch 'sathya/diag-logs2' into diag-logs-1"}, {"oid": "09ac1cf337670037a050dc4d32ffd5bec2170879", "committedDate": "2021-11-09 19:09:09 +0530", "message": "Add util method to check if the diagnostic logs are enabled"}, {"oid": "ba650f85362ebaa25fbeec0b1716bccb3e5aaced", "committedDate": "2021-11-09 19:22:33 +0530", "message": "Remove component ID from logs and include it in the OAuth2 log publishing util method"}, {"oid": "237b3493269c627c372e22b9bc5c5f978a375cda", "committedDate": "2021-11-09 23:07:48 +0530", "message": "Add diagnostic logs enabled checks in OAuth2Util"}, {"oid": "1a6cec2c39bfaefd7007ff99c535b33ff07a8c36", "committedDate": "2021-11-12 00:49:46 +0530", "message": "Move log related utils to a new class"}, {"oid": "4f56f649e198cf61e7d1c0b2bd249fec6d6c398f", "committedDate": "2021-11-16 21:25:42 +0530", "message": "Refactor SUCCESS, FAILED references with constants"}, {"oid": "cdec771c2137573013cf8305f7a33c43b13d7cff", "committedDate": "2021-11-25 00:42:17 +0530", "message": "Refactor code"}, {"oid": "3c3222347c89817fa1f8f8aa78e7e69cd22ee1a2", "committedDate": "2021-12-06 22:57:01 +0530", "message": "refactor code"}, {"oid": "6c667213570452cded5dacb5fe498432481c6252", "committedDate": "2022-01-12 13:01:56 +0530", "message": "Remove client error logs (#1729)"}, {"oid": "d0f7ace565f2fbd35f8386170c000aa0bf7739b9", "committedDate": "2022-03-15 22:12:34 +0530", "message": "Add device flow authz URL to discovery ep"}, {"oid": "82e17631d9c480d81e5d3ada7ec6681b8ed9fb74", "committedDate": "2022-04-11 11:34:19 +0530", "message": "Give an in-detail backend error message if a user tries to generate an ID token by enabling ID Token encryption without configuring a certificate or JWKS endpoint"}, {"oid": "c418550a178cf5c6eaf11358c443b805020b1cfc", "committedDate": "2022-04-11 15:01:35 +0530", "message": "Change the access modifier of the getSPJwksUrl method from private to public"}, {"oid": "3b101d750f20dc87016343487cac6c76e370e344", "committedDate": "2022-04-11 15:03:31 +0530", "message": "Change the jwksUri variable according to java best practices"}, {"oid": "63311097ce87f4c33248d9ac0dc9e7544403f4cd", "committedDate": "2022-04-11 15:08:16 +0530", "message": "Address comment"}, {"oid": "8a043ebe1a90c79b262006a2695a987c5408ade2", "committedDate": "2022-04-12 10:19:13 +0530", "message": "Address comment"}, {"oid": "89289ac01f74a9042cafdfcfc57d4d4c4027f723", "committedDate": "2022-04-12 15:20:07 +0530", "message": "Get the jwksUri directly using the ServiceProvider with its API instead of going through the SP properties"}, {"oid": "3ad96633c617a16de845cb61a215028290545337", "committedDate": "2022-04-12 15:23:57 +0530", "message": "Remove unused import"}, {"oid": "8a9185c657e3c9477d737c157e13111b93bb2298", "committedDate": "2022-05-19 02:06:04 +0400", "message": "Code review changes"}, {"oid": "2485224d8cd9e867eadf8bf05ab46a12c6c68580", "committedDate": "2022-05-19 02:07:40 +0400", "message": "Merge branch 'master' of github.com:wso2-extensions/identity-inbound-auth-oauth into device-flow-new"}, {"oid": "8b4e9cd4a8abf5a22d98aca5c40f10f6101e5381", "committedDate": "2022-06-08 23:51:07 +0530", "message": "Fix considering consent in refresh_token grant"}, {"oid": "8c964dd05b7971e2742a31295808594c588e941b", "committedDate": "2022-06-22 14:16:13 +0530", "message": "Address PR comments"}, {"oid": "b6466c20a18bd32ba3f5d4e044816c9aee97b3e6", "committedDate": "2022-06-22 22:02:34 +0530", "message": "Merge branch 'master' of github.com:wso2-extensions/identity-inbound-auth-oauth into device-flow-new"}, {"oid": "d866dc0cda1dd6a4e71e79625483a4db9286d981", "committedDate": "2022-06-23 14:44:54 +0530", "message": "Update tenant validation in OAuth2Util."}, {"oid": "2a84b9ba7b9a85239fe9321b40d24c524830c538", "committedDate": "2022-06-23 14:56:18 +0530", "message": "Remove star (*) imports."}, {"oid": "10201d14c1da255fd6379a4d1ef4df20bc20e42e", "committedDate": "2022-07-19 15:48:20 +0530", "message": "Refactored the validateRequestTenantDomain methods."}, {"oid": "30f232919f1f2ae8e34da8cd08af9ebe8d08d991", "committedDate": "2022-07-27 17:03:40 +0530", "message": "Add i18n translation for invalid client in tenant error"}, {"oid": "0850f60d0e82d59615b65be5498a856cf0dbd0bf", "committedDate": "2022-08-03 16:17:30 +0530", "message": "Add customParameters to OAuth2TokenRequestDTO."}, {"oid": "9a38dea8b55ba5eaa638ba03286627c3f318f0ac", "committedDate": "2022-08-04 10:42:36 +0530", "message": "Convert OAuth2TokenRequestDTO customParameters to parameters."}, {"oid": "9c415ad0a9a54253fe46d977523d8eaa2f1606fa", "committedDate": "2022-08-05 14:16:29 +0530", "message": "Merge pull request #1862 from dhaura/dhaura-patch-1"}, {"oid": "a21de57cac55f483b5b5e9f13655460aebdc9559", "committedDate": "2022-08-08 14:43:46 +0530", "message": "Fix tenant domain issues for federated users."}, {"oid": "ba0783763220e67c619cdb9c97361e0b0b30d4a4", "committedDate": "2022-08-08 14:43:46 +0530", "message": "Improve federated login authorization."}, {"oid": "988feb28302cb9c4e7f3068c6b2b7154daa83a9a", "committedDate": "2022-08-08 14:43:46 +0530", "message": "Improve role based authorization"}, {"oid": "2124186cda16a9dd87e8b976c702ce52c45cb6f3", "committedDate": "2022-08-08 14:43:46 +0530", "message": "Reformat federated user role based authorization logics."}, {"oid": "b703b7d42a26dd31a4b3d8950c27e49a9c821dfc", "committedDate": "2022-08-08 14:43:47 +0530", "message": "Update config for FIdP role based authz."}, {"oid": "cda14329e2bcc43d247be1b53663f619dc19c4b7", "committedDate": "2022-08-08 14:43:47 +0530", "message": "Fix unit test issue"}, {"oid": "1161df8a0e8aa54ffd17ff41b0c5c4c1b360a29b", "committedDate": "2022-08-08 14:43:47 +0530", "message": "Fix Attribute separator issue."}, {"oid": "59775ee9491dfb95c482712ce011d0cf71df4824", "committedDate": "2022-08-08 14:43:48 +0530", "message": "Refactor application name fetching logic."}, {"oid": "e60c216d518b3e728a607b5569306cef2f902666", "committedDate": "2022-08-15 16:29:55 +0530", "message": "Restrict the flow for super tenant."}, {"oid": "98b75eb31f5c14919ee6d22bec06145f3c36f9f6", "committedDate": "2022-09-23 00:05:17 +0530", "message": "Fix the issue with issuer name in logout token"}, {"oid": "702226547a7b70f9f76652f556698d49a32f680f", "committedDate": "2022-09-23 16:27:57 +0530", "message": "Add method comment"}, {"oid": "6a1a2ec7b89e19f0c528cb36d3544f7b1a3c98f8", "committedDate": "2022-11-20 20:17:03 +0530", "message": "Add Changes for adding Previous kid"}, {"oid": "6c31004807af7fcc13fc0caf7d700d9fd7de245e", "committedDate": "2022-12-07 12:28:21 +0530", "message": "Centralizing and Revamping scope validation logic in login flows (#1950)"}, {"oid": "40fd2914ed299beace1f5fd716b2ae9a2e226273", "committedDate": "2022-12-07 13:40:26 +0530", "message": "Revert \"Centralizing and Revamping scope validation logic in login flows (#1950)\""}, {"oid": "2e14a29cf41f5e7a8eba49da1facbe9a1051c704", "committedDate": "2022-12-08 15:56:03 +0530", "message": "Check tenant active status before client auth."}, {"oid": "2088e435c4af44c4ceaa9de640bff85fd0107fa4", "committedDate": "2022-12-09 17:06:09 +0530", "message": "Centralizing and Revamping scope validation logic in login flows (#1975)"}, {"oid": "e43260829af73441c403e3d1a6d0eef320c8cbf0", "committedDate": "2022-12-21 11:53:48 +0530", "message": "introduce method to get tenant wise oidc scopes"}, {"oid": "2a64662130fbe8590a374f8678bbc62fd9aecede", "committedDate": "2023-02-24 14:53:25 +0530", "message": "Add request binding to JWT tokens."}, {"oid": "f7ca0dd230998e0bf75fb69deaf476b9773481dd", "committedDate": "2023-04-18 22:31:36 +0530", "message": "Add capability to enrich JWT and ID_token with custom claims recieve from consent response. (#2038)"}, {"oid": "35394c60f4e1b8bcc7ad50e74978024be50e01ed", "committedDate": "2023-04-20 21:03:01 +0530", "message": "Retrieve external consent page"}, {"oid": "afe5e18def9b59daf25d82ae08a28dc4e8a88d67", "committedDate": "2023-04-21 07:31:38 +0530", "message": "Refactor the resolve consent page url method"}, {"oid": "8432933f56314d959512b7c62eb3af4c8c02121f", "committedDate": "2023-04-21 08:09:35 +0530", "message": "Changes to configuration manager service"}, {"oid": "f4f2f9af4bad1b5ab5b909e9653ce8d8f33f7c33", "committedDate": "2023-04-21 08:30:52 +0530", "message": "Add comment for the method"}, {"oid": "c9b684b9ca248ccf880d0d4bff678fcf498b903d", "committedDate": "2023-04-21 08:45:09 +0530", "message": "Change in resource type name"}, {"oid": "81aaad2f3ee44b90a99e2796bcd932c6989fe283", "committedDate": "2023-04-22 23:14:30 +0530", "message": "Refactor external consent page redirection"}, {"oid": "9c19a32c78af98abc3f7db6100698d419b710282", "committedDate": "2023-05-01 08:03:49 +0530", "message": "Changes dut to the change of consent server configs service name"}]}, {"oid": "2f381e734a4a08409fdc936eac59e48cfcda7d36", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/2f381e734a4a08409fdc936eac59e48cfcda7d36", "message": "Update debug log\n\nCo-Authored-By: Farasath Ahamed <mefarazath@gmail.com>", "committedDate": "2020-01-28T06:39:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYzMDI0NQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1304#discussion_r371630245", "body": "```suggestion\r\n                    \" will be allowed for signing.\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \" will be allowed for the signing.\");\n          \n          \n            \n                                \" will be allowed for signing.\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> will be allowed for <span class=\"x x-first x-last\">the </span>signing.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> will be allowed for signing.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mefarazath", "createdAt": "2020-01-28T06:41:26Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -2226,7 +2226,7 @@ public static JWSSigner createJWSSigner(RSAPrivateKey privateKey) {\n         boolean allowWeakKey = Boolean.parseBoolean(System.getProperty(ALLOW_WEAK_RSA_SIGNER_KEY));\n         if (allowWeakKey && log.isDebugEnabled()) {\n             log.debug(\"System flag 'allow_weak_rsa_signer_key' is  enabled. So weak keys (key length less than 2048) \" +\n-                    \" will be used for the signing.\");\n+                    \" will be allowed for the signing.\");", "originalCommit": "2f381e734a4a08409fdc936eac59e48cfcda7d36", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "172af675320c075e22699d29824981270cca45df", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\nindex 7e83c0043..c23ba8ee2 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n", "chunk": "@@ -2226,7 +2226,7 @@ public class OAuth2Util {\n         boolean allowWeakKey = Boolean.parseBoolean(System.getProperty(ALLOW_WEAK_RSA_SIGNER_KEY));\n         if (allowWeakKey && log.isDebugEnabled()) {\n             log.debug(\"System flag 'allow_weak_rsa_signer_key' is  enabled. So weak keys (key length less than 2048) \" +\n-                    \" will be allowed for the signing.\");\n+                    \" will be allowed for signing.\");\n         }\n         return new RSASSASigner(privateKey, allowWeakKey);\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "4634329e9269288daf5f43d626f256ef98123467", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\nindex 7e83c0043..c23ba8ee2 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n", "chunk": "@@ -2226,7 +2226,7 @@ public class OAuth2Util {\n         boolean allowWeakKey = Boolean.parseBoolean(System.getProperty(ALLOW_WEAK_RSA_SIGNER_KEY));\n         if (allowWeakKey && log.isDebugEnabled()) {\n             log.debug(\"System flag 'allow_weak_rsa_signer_key' is  enabled. So weak keys (key length less than 2048) \" +\n-                    \" will be allowed for the signing.\");\n+                    \" will be allowed for signing.\");\n         }\n         return new RSASSASigner(privateKey, allowWeakKey);\n     }\n", "next_change": {"commit": "46212ce62c2a35fbdbde558e49ddcdd49ca98250", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\nindex c23ba8ee2..8c409c237 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n", "chunk": "@@ -2215,22 +2214,6 @@ public class OAuth2Util {\n         }\n     }\n \n-    /**\n-     * Create JWSSigner using the server level configurations and return.\n-     *\n-     * @param privateKey RSA Private key.\n-     * @return  JWSSigner\n-     */\n-    public static JWSSigner createJWSSigner(RSAPrivateKey privateKey) {\n-\n-        boolean allowWeakKey = Boolean.parseBoolean(System.getProperty(ALLOW_WEAK_RSA_SIGNER_KEY));\n-        if (allowWeakKey && log.isDebugEnabled()) {\n-            log.debug(\"System flag 'allow_weak_rsa_signer_key' is  enabled. So weak keys (key length less than 2048) \" +\n-                    \" will be allowed for signing.\");\n-        }\n-        return new RSASSASigner(privateKey, allowWeakKey);\n-    }\n-\n     /**\n      * Generic Signing function\n      *\n", "next_change": {"commit": "d4025c46ab1b9d6c816de6f11cb8970150ef8173", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\nindex 8c409c237..fafa73c91 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n", "chunk": "@@ -2214,6 +2216,22 @@ public class OAuth2Util {\n         }\n     }\n \n+    /**\n+     * Create JWSSigner using the server level configurations and return.\n+     *\n+     * @param privateKey RSA Private key.\n+     * @return  JWSSigner\n+     */\n+    public static JWSSigner createJWSSigner(RSAPrivateKey privateKey) {\n+\n+        boolean allowWeakKey = Boolean.parseBoolean(System.getProperty(ALLOW_WEAK_RSA_SIGNER_KEY));\n+        if (allowWeakKey && log.isDebugEnabled()) {\n+            log.debug(\"System flag 'allow_weak_rsa_signer_key' is  enabled. So weak keys (key length less than 2048) \" +\n+                    \" will be allowed for signing.\");\n+        }\n+        return new RSASSASigner(privateKey, allowWeakKey);\n+    }\n+\n     /**\n      * Generic Signing function\n      *\n", "next_change": {"commit": "09ac1cf337670037a050dc4d32ffd5bec2170879", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\nindex fafa73c91..73c1895e8 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n", "chunk": "@@ -2179,102 +2422,352 @@ public class OAuth2Util {\n     }\n \n     /**\n-     * Encrypt the JWT token with with given public key.\n+     * Encrypt JWT id token using RSA algorithm.\n      *\n-     * @param publicKey           public key used to encrypt\n-     * @param jwtClaimsSet        contains JWT body\n+     * @param signedJwt           contains signed JWT body\n      * @param encryptionAlgorithm JWT signing algorithm\n      * @param spTenantDomain      Service provider tenant domain\n      * @param clientId            ID of the client\n-     * @param thumbPrint          value used as 'kid'\n      * @return encrypted JWT token\n      * @throws IdentityOAuth2Exception\n      */\n-    private static JWT encryptWithPublicKey(Key publicKey, JWTClaimsSet jwtClaimsSet,\n-                                            JWEAlgorithm encryptionAlgorithm, EncryptionMethod encryptionMethod,\n-                                            String spTenantDomain, String clientId,\n-                                            String thumbPrint) throws IdentityOAuth2Exception {\n-\n-        JWEHeader.Builder headerBuilder = new JWEHeader.Builder(encryptionAlgorithm, encryptionMethod);\n+    private static JWT encryptWithRSA(SignedJWT signedJwt, JWEAlgorithm encryptionAlgorithm,\n+                                      EncryptionMethod encryptionMethod, String spTenantDomain, String clientId)\n+            throws IdentityOAuth2Exception {\n \n         try {\n-            headerBuilder.keyID(thumbPrint);\n-            JWEHeader header = headerBuilder.build();\n-            EncryptedJWT encryptedJWT = new EncryptedJWT(header, jwtClaimsSet);\n+            if (StringUtils.isBlank(spTenantDomain)) {\n+                spTenantDomain = MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(\"Assigned super tenant domain as signing domain when encrypting id token \" +\n+                            \"for client_id: %s .\", clientId));\n+                }\n+            }\n+            String jwksUri = getSPJwksUrl(clientId, spTenantDomain);\n \n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Encrypting JWT using the algorithm: \" + encryptionAlgorithm + \", method: \" +\n-                        encryptionMethod + \", tenant: \" + spTenantDomain + \" & header: \" + header.toString());\n+            if (StringUtils.isBlank(jwksUri)) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(\"Jwks uri is not configured for the service provider associated with \" +\n+                            \"client_id: %s , Checking for x509 certificate.\", clientId));\n+                }\n+                return encryptUsingSPX509Certificate(signedJwt, encryptionAlgorithm, encryptionMethod, spTenantDomain,\n+                        clientId);\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(\"Jwks uri is configured for the service provider associated with\" +\n+                            \" client %s from jwks uri %s .\", clientId, jwksUri));\n+                }\n+                return encryptUsingJwksPublicKey(signedJwt, encryptionAlgorithm, encryptionMethod, spTenantDomain,\n+                        clientId, jwksUri);\n             }\n \n-            JWEEncrypter encrypter = new RSAEncrypter((RSAPublicKey) publicKey);\n-            encryptedJWT.encrypt(encrypter);\n-            return encryptedJWT;\n-        } catch (JOSEException e) {\n+        } catch (JOSEException | ParseException e) {\n             throw new IdentityOAuth2Exception(\"Error occurred while encrypting JWT for the client_id: \" + clientId\n                     + \" with the tenant domain: \" + spTenantDomain, e);\n         }\n     }\n \n     /**\n-     * Create JWSSigner using the server level configurations and return.\n+     * Encrypt jwt using service provider's configured X509 certificate\n      *\n-     * @param privateKey RSA Private key.\n-     * @return  JWSSigner\n+     * @param signedJwt           contains signed JWT body\n+     * @param encryptionAlgorithm JWT signing algorithm\n+     * @param encryptionMethod    Encryption method\n+     * @param spTenantDomain      Service provider tenant domain\n+     * @param clientId            ID of the client\n+     * @return\n+     * @throws IdentityOAuth2Exception\n      */\n-    public static JWSSigner createJWSSigner(RSAPrivateKey privateKey) {\n+    private static JWT encryptUsingSPX509Certificate(SignedJWT signedJwt, JWEAlgorithm encryptionAlgorithm,\n+                                                     EncryptionMethod encryptionMethod, String spTenantDomain,\n+                                                     String clientId) throws IdentityOAuth2Exception {\n \n-        boolean allowWeakKey = Boolean.parseBoolean(System.getProperty(ALLOW_WEAK_RSA_SIGNER_KEY));\n-        if (allowWeakKey && log.isDebugEnabled()) {\n-            log.debug(\"System flag 'allow_weak_rsa_signer_key' is  enabled. So weak keys (key length less than 2048) \" +\n-                    \" will be allowed for signing.\");\n+        Certificate publicCert = getX509CertOfOAuthApp(clientId, spTenantDomain);\n+        if (publicCert == null) {\n+            throw new IdentityOAuth2Exception(\"Error while retrieving X509 cert from oauth app with \"\n+                    + \"client_id: \" + clientId + \" of tenantDomain: \" + spTenantDomain);\n         }\n-        return new RSASSASigner(privateKey, allowWeakKey);\n+        Key publicKey = publicCert.getPublicKey();\n+        if (publicKey == null) {\n+            throw new IdentityOAuth2Exception(\"Error while retrieving public key from X509 cert of oauth app with \"\n+                   + \"client_id: \" + clientId + \" of tenantDomain: \" + spTenantDomain);\n+        }\n+        String kid = getThumbPrint(publicCert);\n+        return encryptWithPublicKey(publicKey, signedJwt, encryptionAlgorithm, encryptionMethod,\n+                spTenantDomain, clientId, kid);\n     }\n \n     /**\n-     * Generic Signing function\n+     * Encrypt jwt using publickey fetched from jwks\n      *\n-     * @param jwtClaimsSet       contains JWT body\n-     * @param signatureAlgorithm JWT signing algorithm\n-     * @param tenantDomain       tenant domain\n-     * @return signed JWT token\n+     * @param signedJwt           contains signed JWT body\n+     * @param encryptionAlgorithm JWT signing algorithm\n+     * @param encryptionMethod    Encryption method\n+     * @param spTenantDomain      Service provider tenant domain\n+     * @param clientId            ID of the client\n+     * @param jwksUri             jwks url\n+     * @return\n      * @throws IdentityOAuth2Exception\n+     * @throws JOSEException\n+     * @throws ParseException\n      */\n-    public static JWT signJWT(JWTClaimsSet jwtClaimsSet, JWSAlgorithm signatureAlgorithm, String tenantDomain)\n-            throws IdentityOAuth2Exception {\n+    private static JWT encryptUsingJwksPublicKey(SignedJWT signedJwt, JWEAlgorithm encryptionAlgorithm,\n+                                                 EncryptionMethod encryptionMethod, String spTenantDomain,\n+                                                 String clientId, String jwksUri)\n+            throws IdentityOAuth2Exception, JOSEException, ParseException {\n \n-        if (JWSAlgorithm.RS256.equals(signatureAlgorithm) || JWSAlgorithm.RS384.equals(signatureAlgorithm) ||\n-                JWSAlgorithm.RS512.equals(signatureAlgorithm) || JWSAlgorithm.PS256.equals(signatureAlgorithm)) {\n-            return signJWTWithRSA(jwtClaimsSet, signatureAlgorithm, tenantDomain);\n-        } else if (JWSAlgorithm.HS256.equals(signatureAlgorithm) || JWSAlgorithm.HS384.equals(signatureAlgorithm) ||\n-                JWSAlgorithm.HS512.equals(signatureAlgorithm)) {\n-            // return signWithHMAC(jwtClaimsSet,jwsAlgorithm,request); implementation need to be done\n-            throw new RuntimeException(\"Provided signature algorithm: \" + signatureAlgorithm +\n-                    \" is not supported\");\n-        } else {\n-            // return signWithEC(jwtClaimsSet,jwsAlgorithm,request); implementation need to be done\n-            throw new RuntimeException(\"Provided signature algorithm: \" + signatureAlgorithm +\n-                    \" is not supported\");\n-        }\n+        JWK encryptionJwk = getEncryptionJWKFromJWKS(jwksUri, encryptionAlgorithm);\n+        Key publicKey = RSAKey.parse(encryptionJwk.toJSONString()).toRSAPublicKey();\n+        String kid = getKidValueFromJwk(encryptionJwk);\n+        return encryptWithPublicKey(publicKey, signedJwt, encryptionAlgorithm, encryptionMethod,\n+                spTenantDomain, clientId, kid);\n     }\n \n     /**\n-     * sign JWT token from RSA algorithm\n+     * Get kid value from the jwk\n      *\n-     * @param jwtClaimsSet       contains JWT body\n-     * @param signatureAlgorithm JWT signing algorithm\n-     * @param tenantDomain       tenant domain\n-     * @return signed JWT token\n-     * @throws IdentityOAuth2Exception\n+     * @param encryptionJwk Encryption jwk\n+     * @return\n      */\n-    //TODO: Can make this private after removing deprecated \"signJWTWithRSA\" methods in DefaultIDTokenBuilder\n-    public static JWT signJWTWithRSA(JWTClaimsSet jwtClaimsSet, JWSAlgorithm signatureAlgorithm, String tenantDomain)\n-            throws IdentityOAuth2Exception {\n+    private static String getKidValueFromJwk(JWK encryptionJwk) {\n \n-        try {\n-            if (StringUtils.isBlank(tenantDomain)) {\n-                tenantDomain = MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;\n+        String kid;\n+        Certificate publicCert;\n+        if (encryptionJwk.getKeyID() != null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(String.format(\"Kid value is available in jwk %s .\", encryptionJwk.getKeyID()));\n+            }\n+            kid = encryptionJwk.getKeyID();\n+        } else {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Kid value is not available in jwk, attempting to set x5c thumbprint as kid.\");\n+            }\n+            try {\n+                publicCert = getPublicCertFromJWK(encryptionJwk);\n+                kid = getJwkThumbPrint(publicCert);\n+            } catch (IdentityOAuth2Exception e) {\n+                log.error(\"Failed to set x5c thumbprint as kid value.\", e);\n+                kid = null;\n+            }\n+        }\n+        return kid;\n+    }\n+\n+    /**\n+     * Get encryption jwk from JWKS list when JWKS Uri is given.\n+     *\n+     * @param jwksUri - JWKS Uri\n+     * @param encryptionAlgorithm encryption algorithm\n+     * @return - encryption JWK from the jwks url\n+     * @throws IdentityOAuth2Exception - IdentityOAuth2Exception\n+     */\n+    private static JWK getEncryptionJWKFromJWKS(String jwksUri, JWEAlgorithm encryptionAlgorithm)\n+            throws IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(String.format(\"Attempting to retrieve encryption jwk from the Jwks uri: %s , algorithm : %s\",\n+                    jwksUri, encryptionAlgorithm));\n+        }\n+        try {\n+            JWKSet publicKeys = JWKSet.load(new URL(jwksUri));\n+            // Get the first key, use as enc and alg from the list\n+            JWKMatcher keyMatcherWithAlgAndEncryptionUse =\n+                    new JWKMatcher.Builder().algorithm(encryptionAlgorithm).keyUse(KeyUse.ENCRYPTION).build();\n+            List<JWK> jwkList = new JWKSelector(keyMatcherWithAlgAndEncryptionUse).select(publicKeys);\n+\n+            if (jwkList.isEmpty()) {\n+                // If empty, then get the first key, use as enc from the list\n+                JWKMatcher keyMatcherWithEncryptionUse = new JWKMatcher.Builder().keyUse(KeyUse.ENCRYPTION).build();\n+                jwkList = new JWKSelector(keyMatcherWithEncryptionUse).select(publicKeys);\n+\n+                if (jwkList.isEmpty()) {\n+                    // failover defaults to ->, then get the first key, use as sig from the list\n+                    JWKMatcher keyMatcherWithSignatureUse = new JWKMatcher.Builder().keyUse(KeyUse.SIGNATURE).build();\n+                    jwkList = new JWKSelector(keyMatcherWithSignatureUse).select(publicKeys);\n+                }\n+            }\n+\n+            if (jwkList.isEmpty()) {\n+                throw new IdentityOAuth2Exception(String.format(\"Failed to retrieve valid jwk from \" +\n+                        \"jwks uri: %s, algorithm : %s \", jwksUri, encryptionAlgorithm));\n+            } else {\n+                return jwkList.get(0);\n+            }\n+        } catch (ParseException | IOException e) {\n+            throw new IdentityOAuth2Exception(String.format(\"Failed to retrieve jwk from jwks uri: %s, algorithm : %s\",\n+                    jwksUri, encryptionAlgorithm), e);\n+        }\n+    }\n+\n+    /**\n+     * Get public certificate from JWK\n+     *\n+     * @param jwk\n+     * @return\n+     * @throws IdentityOAuth2Exception\n+     */\n+    private static X509Certificate getPublicCertFromJWK(JWK jwk) throws IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(String.format(\"Attempting to retrieve public certificate from the Jwk kid: %s .\"\n+                    , jwk.getKeyID()));\n+        }\n+        X509Certificate certificate;\n+        if (jwk != null && jwk.getParsedX509CertChain() != null) {\n+            certificate = jwk.getParsedX509CertChain().get(0);\n+            if (log.isDebugEnabled()) {\n+                log.debug(String.format(\"Retrieved the public signing certificate successfully from the \" +\n+                        \"jwk : %s .\", jwk));\n+            }\n+            return certificate;\n+        }\n+        throw new IdentityOAuth2Exception(\"Failed to retrieve public certificate from jwk due to null.\");\n+    }\n+\n+    /**\n+     * Encrypt the JWT token with with given public key.\n+     *\n+     * @param publicKey           public key used to encrypt\n+     * @param jwtClaimsSet        contains JWT body\n+     * @param encryptionAlgorithm JWT signing algorithm\n+     * @param spTenantDomain      Service provider tenant domain\n+     * @param clientId            ID of the client\n+     * @param thumbPrint          value used as 'kid'\n+     * @return encrypted JWT token\n+     * @throws IdentityOAuth2Exception\n+     * @deprecated replaced by\n+     * {@link #encryptWithPublicKey(Key, SignedJWT, JWEAlgorithm, EncryptionMethod, String, String, String)}\n+     */\n+    @Deprecated\n+    private static JWT encryptWithPublicKey(Key publicKey, JWTClaimsSet jwtClaimsSet,\n+                                            JWEAlgorithm encryptionAlgorithm, EncryptionMethod encryptionMethod,\n+                                            String spTenantDomain, String clientId,\n+                                            String thumbPrint) throws IdentityOAuth2Exception {\n+\n+        JWEHeader.Builder headerBuilder = new JWEHeader.Builder(encryptionAlgorithm, encryptionMethod);\n+\n+        try {\n+            headerBuilder.keyID(thumbPrint);\n+            JWEHeader header = headerBuilder.build();\n+            EncryptedJWT encryptedJWT = new EncryptedJWT(header, jwtClaimsSet);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Encrypting JWT using the algorithm: \" + encryptionAlgorithm + \", method: \" +\n+                        encryptionMethod + \", tenant: \" + spTenantDomain + \" & header: \" + header.toString());\n+            }\n+\n+            JWEEncrypter encrypter = new RSAEncrypter((RSAPublicKey) publicKey);\n+            encryptedJWT.encrypt(encrypter);\n+            return encryptedJWT;\n+        } catch (JOSEException e) {\n+            throw new IdentityOAuth2Exception(\"Error occurred while encrypting JWT for the client_id: \" + clientId\n+                    + \" with the tenant domain: \" + spTenantDomain, e);\n+        }\n+    }\n+\n+    /**\n+     * Encrypt the JWT token with with given public key.\n+     *\n+     * @param publicKey           public key used to encrypt\n+     * @param signedJwt           contains signed JWT body\n+     * @param encryptionAlgorithm JWT signing algorithm\n+     * @param spTenantDomain      Service provider tenant domain\n+     * @param clientId            ID of the client\n+     * @param kid                 value used as 'kid'\n+     * @return encrypted JWT token\n+     * @throws IdentityOAuth2Exception\n+     */\n+    private static JWT encryptWithPublicKey(Key publicKey, SignedJWT signedJwt,\n+                                            JWEAlgorithm encryptionAlgorithm, EncryptionMethod encryptionMethod,\n+                                            String spTenantDomain, String clientId,\n+                                            String kid) throws IdentityOAuth2Exception {\n+\n+        JWEHeader.Builder headerBuilder = new JWEHeader.Builder(encryptionAlgorithm, encryptionMethod);\n+\n+        try {\n+            if (StringUtils.isNotBlank(kid)) {\n+                headerBuilder.keyID(kid);\n+            }\n+            headerBuilder.contentType(JWT); // Required to indicate nested JWT.\n+            JWEHeader header = headerBuilder.build();\n+\n+            JWEObject jweObject = new JWEObject(header, new Payload(signedJwt));\n+            // Encrypt with the recipient's public key.\n+            jweObject.encrypt(new RSAEncrypter((RSAPublicKey) publicKey));\n+\n+            EncryptedJWT encryptedJWT = EncryptedJWT.parse(jweObject.serialize());\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Encrypting JWT using the algorithm: \" + encryptionAlgorithm + \", method: \" +\n+                        encryptionMethod + \", tenant: \" + spTenantDomain + \" & header: \" + header.toString());\n+            }\n+\n+            return encryptedJWT;\n+        } catch (JOSEException | ParseException e) {\n+            throw new IdentityOAuth2Exception(\"Error occurred while encrypting JWT for the client_id: \" + clientId\n+                    + \" with the tenant domain: \" + spTenantDomain, e);\n+        }\n+    }\n+\n+    /**\n+     * Create JWSSigner using the server level configurations and return.\n+     *\n+     * @param privateKey RSA Private key.\n+     * @return  JWSSigner\n+     */\n+    public static JWSSigner createJWSSigner(RSAPrivateKey privateKey) {\n+\n+        boolean allowWeakKey = Boolean.parseBoolean(System.getProperty(ALLOW_WEAK_RSA_SIGNER_KEY));\n+        if (allowWeakKey && log.isDebugEnabled()) {\n+            log.debug(\"System flag 'allow_weak_rsa_signer_key' is  enabled. So weak keys (key length less than 2048) \" +\n+                    \" will be allowed for signing.\");\n+        }\n+        return new RSASSASigner(privateKey, allowWeakKey);\n+    }\n+\n+    /**\n+     * Generic Signing function\n+     *\n+     * @param jwtClaimsSet       contains JWT body\n+     * @param signatureAlgorithm JWT signing algorithm\n+     * @param tenantDomain       tenant domain\n+     * @return signed JWT token\n+     * @throws IdentityOAuth2Exception\n+     */\n+    public static JWT signJWT(JWTClaimsSet jwtClaimsSet, JWSAlgorithm signatureAlgorithm, String tenantDomain)\n+            throws IdentityOAuth2Exception {\n+\n+        if (JWSAlgorithm.RS256.equals(signatureAlgorithm) || JWSAlgorithm.RS384.equals(signatureAlgorithm) ||\n+                JWSAlgorithm.RS512.equals(signatureAlgorithm) || JWSAlgorithm.PS256.equals(signatureAlgorithm)) {\n+            return signJWTWithRSA(jwtClaimsSet, signatureAlgorithm, tenantDomain);\n+        } else if (JWSAlgorithm.HS256.equals(signatureAlgorithm) || JWSAlgorithm.HS384.equals(signatureAlgorithm) ||\n+                JWSAlgorithm.HS512.equals(signatureAlgorithm)) {\n+            // return signWithHMAC(jwtClaimsSet,jwsAlgorithm,request); implementation need to be done\n+            throw new RuntimeException(\"Provided signature algorithm: \" + signatureAlgorithm +\n+                    \" is not supported\");\n+        } else {\n+            // return signWithEC(jwtClaimsSet,jwsAlgorithm,request); implementation need to be done\n+            throw new RuntimeException(\"Provided signature algorithm: \" + signatureAlgorithm +\n+                    \" is not supported\");\n+        }\n+    }\n+\n+    /**\n+     * sign JWT token from RSA algorithm\n+     *\n+     * @param jwtClaimsSet       contains JWT body\n+     * @param signatureAlgorithm JWT signing algorithm\n+     * @param tenantDomain       tenant domain\n+     * @return signed JWT token\n+     * @throws IdentityOAuth2Exception\n+     */\n+    //TODO: Can make this private after removing deprecated \"signJWTWithRSA\" methods in DefaultIDTokenBuilder\n+    public static JWT signJWTWithRSA(JWTClaimsSet jwtClaimsSet, JWSAlgorithm signatureAlgorithm, String tenantDomain)\n+            throws IdentityOAuth2Exception {\n+\n+        try {\n+            if (StringUtils.isBlank(tenantDomain)) {\n+                tenantDomain = MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;\n                 if (log.isDebugEnabled()) {\n                     log.debug(\"Assign super tenant domain as signing domain.\");\n                 }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "4634329e9269288daf5f43d626f256ef98123467", "message": "Merge commit", "committedDate": null}, {"oid": "46212ce62c2a35fbdbde558e49ddcdd49ca98250", "committedDate": "2020-01-24 10:35:38 +0530", "message": "reimplement scope mgt by having new column SCOPE_TYPE in IDN_OAUTH2_SCOPE table."}, {"oid": "d4025c46ab1b9d6c816de6f11cb8970150ef8173", "committedDate": "2020-01-29 12:08:14 +0530", "message": "Merge pull request #1302 from sarubi/scope-mgt-public"}, {"oid": "fddc67a3d0e6fddf721e77582f8074f95c2fde20", "committedDate": "2020-02-13 15:23:09 +0530", "message": "Replace find bugs with spot bugs and findsecbugs"}, {"oid": "da04a92e932134353651f408eaaa8d765f00652d", "committedDate": "2020-02-21 13:44:41 +0530", "message": "Support extension for OIDProviderResponseBuilder"}, {"oid": "090a921158abb01a424a835c8f733cc3b58185b5", "committedDate": "2020-02-24 18:18:50 +0530", "message": "Add additional parameters"}, {"oid": "a7a3d92223dae020f56d3e576d66cb608b9e09a9", "committedDate": "2020-03-23 18:40:13 +0530", "message": "Tenant-qualify OIDC discovery endpoint"}, {"oid": "fa4f7acf9ac5b084cee55c5882169c2824a78ef6", "committedDate": "2020-03-24 22:43:03 +0530", "message": "resolve issues"}, {"oid": "43fd748cab09c2fd4228102dbc4d1ad26f1c527d", "committedDate": "2020-03-26 08:41:04 +0530", "message": "Add String constants for OAuth2 endpoints. Fix tests."}, {"oid": "15383873bd07d9349271aeef1c92d9c7cc0df688", "committedDate": "2020-03-26 23:59:42 +0530", "message": "Resolve entity ID only if it is not modified"}, {"oid": "4a98d4c521da92928309f5f2cab35848b8b60811", "committedDate": "2020-03-27 13:29:29 +0530", "message": "Add tests for TenantURLSupport mode and fix minor issues"}, {"oid": "cab7627fdfa6d1e1284e4f0a675d94f6d4e18499", "committedDate": "2020-03-27 18:17:37 +0530", "message": "Add method comments."}, {"oid": "166d58ce1579224c8c747d183da7e44efbf2fec5", "committedDate": "2020-04-13 18:18:41 +0530", "message": "implement method to build url"}, {"oid": "6c76a3aa6d742b3f98b0d93cd667f13d0ebc19fa", "committedDate": "2020-04-13 18:19:29 +0530", "message": "change resolveUrl method usages to consume buildUrl"}, {"oid": "7de56f43584b50c5bfd69529a69b2cea8096ea4c", "committedDate": "2020-04-20 08:59:43 +0530", "message": "fix buildUrl method fix tests"}, {"oid": "9400163554242edc0f78ac79349bb99f8b0cd53b", "committedDate": "2020-04-20 16:59:56 +0530", "message": "fix minor issues"}, {"oid": "573eb63dfeaed5bf5c9af4342ab41dddb0b464e3", "committedDate": "2020-04-20 18:14:52 +0530", "message": "fix minor issues"}, {"oid": "3dab7125241b7c7d540d145196d1a88b9ee51467", "committedDate": "2020-04-21 12:49:24 +0530", "message": "resolve minor issues"}, {"oid": "cc00a3abd8c84a75c1d9f57f3671ce7557b49be6", "committedDate": "2020-04-21 18:55:01 +0530", "message": "minor changes to the build Service Url implementation"}, {"oid": "92711d34215089fd6cf0eb376f9f39a0fec77cac", "committedDate": "2020-04-22 19:20:29 +0530", "message": "Remove methods using resolveURL"}, {"oid": "3c09d0f93406284d57b345c4a1b140c88d67b58a", "committedDate": "2020-04-23 10:08:29 +0530", "message": "Support for tenant qualified URLs for Authentication endpoint"}, {"oid": "ea32a0a5c9c5be07448810a8e80ae432fc7e6995", "committedDate": "2020-04-23 14:13:48 +0530", "message": "Tenant qualify consent page URL and error page URLs"}, {"oid": "81d7be6add04513c081da2f5d6795ee87e32cdf3", "committedDate": "2020-04-23 21:54:35 +0530", "message": "Merge pull request #1362 from mefarazath/ashendes/tenant-qualify-urls"}, {"oid": "11277d223da66490be57b0a7d18a28bb209702e4", "committedDate": "2020-04-24 16:23:00 +0530", "message": "Return default token endpoint for issuer ID in the tenant-qualified URLs mode"}, {"oid": "5654c3971e0ccb838191e1bf6df56a404df617d3", "committedDate": "2020-04-24 17:55:53 +0530", "message": "Update error messages"}, {"oid": "246159fbe230cd6c24ce0488d461763d47338f28", "committedDate": "2020-05-06 15:53:07 +0530", "message": "Restrict cross tenant domain requests in tenant qualifed URL mode"}, {"oid": "fd3a52abcf3a0ae6f50e0238cc72146286961374", "committedDate": "2020-05-16 03:36:36 +0530", "message": "Fix JWT token validation at introspection"}, {"oid": "201acce27c9b11a2c09edacdaaea5e9367bae1fa", "committedDate": "2020-05-16 04:27:59 +0530", "message": "Fix formatting"}, {"oid": "1b45f0d9e7b8cd9c2aeedb370194448c09747715", "committedDate": "2020-05-18 16:33:17 +0530", "message": "Fix review comments"}, {"oid": "d8a134b88129cf8a210bd30c0d63b21d0d34b60d", "committedDate": "2020-06-18 13:41:07 +0530", "message": "Fix introspection endpoint url in tenant legacy URL mode in OIDC config response"}, {"oid": "b67eb489e485f9f7fc6f19c1526ceaf8fea2fa45", "committedDate": "2020-06-18 17:01:00 +0530", "message": "Address comment"}, {"oid": "6ec98c9253cc9236077d52d5c2a73a5d7aeb03f5", "committedDate": "2020-06-25 12:34:04 +0530", "message": "Set correct authenticated IdP value to AuthenticatedUser object"}, {"oid": "05440dfaef80c68103af65d990e85d3403a4ba95", "committedDate": "2020-08-11 15:33:58 +0530", "message": "Add methods to register custom KeyIDProvider implementations to Data holder during OSGi activation"}, {"oid": "3598c67dfb769cbe96a676ad7ce245408761203c", "committedDate": "2020-08-19 12:52:41 +0530", "message": "Fixed styling issues pointed in review"}, {"oid": "95115b883375a71a2d90436ff5ad9381af537f75", "committedDate": "2020-08-19 14:42:44 +0530", "message": "Add debug logs for KeyIDProvider implementation"}, {"oid": "f3759c7482fc2bf21a7b614f5a63dbd05c68c3dd", "committedDate": "2020-08-19 15:14:22 +0530", "message": "Fixed styling issues"}, {"oid": "04edb66ca6253384d82585f9139772267c194117", "committedDate": "2020-08-19 15:18:35 +0530", "message": "Fixed styling issues"}, {"oid": "3c35ec3dbc722e031615e03ad1402d022cda97b1", "committedDate": "2020-08-19 15:35:38 +0530", "message": "Fixed styling issues"}, {"oid": "c6a3abcb8c224352eccee7212ed814954c88b740", "committedDate": "2020-08-19 17:52:52 +0530", "message": "Debug log in OAuth2Util reformatted"}, {"oid": "30cbeb360acf87c9c903bd9c82d8c0652b17cb57", "committedDate": "2020-08-20 09:35:05 +0530", "message": "Update components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java"}, {"oid": "edc2012997898be551b94ffd5637f94b26f7720c", "committedDate": "2020-08-20 09:41:05 +0530", "message": "Refactored Exception message in getCertificate method"}, {"oid": "c0d257bf4bca184534a887234bf80dfb20f71891", "committedDate": "2020-08-20 09:41:32 +0530", "message": "Merge branch 'master' of https://github.com/dimuthnc/identity-inbound-auth-oauth"}, {"oid": "9bbbe7d1b4a6a7f2238637b2ce629be5b950f5ef", "committedDate": "2020-09-30 13:01:19 +0530", "message": "Improve fix done for JWT token validation at introspection"}, {"oid": "eea227d4a329cc0e9b3217f065c083f00094498b", "committedDate": "2020-10-06 17:12:32 +0530", "message": "Correcting the thumbprint algorithm"}, {"oid": "64de413c86c81a5f94dd28a7dd60b1d4ead435f4", "committedDate": "2020-10-06 17:39:38 +0530", "message": "Updating error message to indicate correct thumbprint calculation algorithm"}, {"oid": "f4fd730468b8c10412b357aae952ac2c055e62a7", "committedDate": "2020-10-15 20:47:22 +0530", "message": "Fix webfinger issuer in tenant mode"}, {"oid": "328d264a2e70a4028ddfcbf05a25f57e3e873174", "committedDate": "2020-10-19 03:30:47 +0530", "message": "move allowed scopes reading"}, {"oid": "dc50a199849af151aff3f12875d02c13a09887af", "committedDate": "2020-10-19 12:01:37 +0530", "message": "Merge branch 'master' of https://github.com/wso2-extensions/identity-inbound-auth-oauth into master-rolebasescopevaldation"}, {"oid": "9f55ee3aa001b5471ee20f6625ffebee8394af5e", "committedDate": "2020-10-19 15:15:27 +0530", "message": "refactor"}, {"oid": "77a61b51846b3ca4628073b663177e69174962b0", "committedDate": "2020-10-25 00:58:21 +0530", "message": "Add openid const"}, {"oid": "f9a33aa6a665899924d3902e3db6107dbb58539e", "committedDate": "2020-11-11 21:50:41 +0530", "message": "Merge pull request #1481 from janakamarasena/test-builder"}, {"oid": "8fa8b831b576be452425601c762f110c83b6ca24", "committedDate": "2020-12-08 09:45:53 +0530", "message": "Scope validation for not associated federated user using idp role mapping"}, {"oid": "1a7c7f3a5b837f55e90756a0ea6d7bef65c53af2", "committedDate": "2021-02-07 01:35:08 +0530", "message": "add more debug logs"}, {"oid": "7b7f55fb9bff0f7862d58535590826da6215a4ab", "committedDate": "2021-02-07 16:09:14 +0530", "message": "Filter unregistered scopes and remove oidc scopes from consent page url"}, {"oid": "f5575dd682102d622f9e32befa3e0f15bbe612d4", "committedDate": "2021-02-22 18:13:35 +0530", "message": "Update display names and descriptions of OIDC Scopes"}, {"oid": "ec5d0c4d07383a987deb316b475d1271ef876687", "committedDate": "2021-03-22 18:12:18 +0530", "message": "Fix issue in timestamp skew in token generation and validation flows"}, {"oid": "e5975a17130f5ec311b57598abb6ca3e4db5e469", "committedDate": "2021-04-28 15:01:48 +0530", "message": "Get consumer key from OAuthAppDO to avoid DB calls"}, {"oid": "269883d66aefb53883758dcf3a2d50d0d566599e", "committedDate": "2021-04-28 16:07:07 +0530", "message": "Refactor"}, {"oid": "07a797036eca310063cfad3b3ef2feb60a8d81ba", "committedDate": "2021-04-28 16:38:27 +0530", "message": "Refactor"}, {"oid": "690ce99fd183adf90f93588649b8a283c6ff544e", "committedDate": "2021-04-28 21:58:00 +0530", "message": "Add warn log when the OAuth applications not exists"}, {"oid": "a127743bf5f9c1c5b503a845b922e95568d504a4", "committedDate": "2021-04-29 18:15:06 +0530", "message": "Add warn log when the OAuth applications not exists"}, {"oid": "f47d66e1b3493847344a5bfb6a37a86d6b82e928", "committedDate": "2021-05-05 17:42:50 +0530", "message": "Add diagnostic logs for OAuth flows"}, {"oid": "3be7307263c4fd227d3975aad78f10fa6662723e", "committedDate": "2021-05-28 00:32:52 +0530", "message": "Change id token encryption logic to sign before encrypting"}, {"oid": "4d887a5f91aa50f4e7dadc7c1b7193a83278140f", "committedDate": "2021-06-01 23:59:33 +0530", "message": "Move jwt signing into encryptJWT method"}, {"oid": "29ab3139afc19cecab051ad242a7ac8ca1777356", "committedDate": "2021-06-02 01:12:05 +0530", "message": "Refactor the code"}, {"oid": "c297443bf3d0f91bca85be725732712326df471f", "committedDate": "2021-06-02 01:40:11 +0530", "message": "Add missing java docs"}, {"oid": "736625ebf8f492288edf61ba32e9c858e0488ab8", "committedDate": "2021-06-02 02:08:48 +0530", "message": "Fix javadoc issues"}, {"oid": "f20fb01fcabb0cc766bb5857390317660045d097", "committedDate": "2021-06-14 13:29:54 +0530", "message": "Fix review comments"}, {"oid": "ebefeaf60a3c07b17db6ffb8c976abc5c8edd092", "committedDate": "2021-06-14 13:52:36 +0530", "message": "Fix review comments"}, {"oid": "77773744684d10910194def27361aaf49b02299e", "committedDate": "2021-06-15 14:40:25 +0530", "message": "Fix review comments"}, {"oid": "0d54a15c217bee6d226387e8e508d3b1e9f9e4e8", "committedDate": "2021-06-15 17:17:04 +0530", "message": "fix NPE when retrieving publicCert of application"}, {"oid": "cd457feb19e80ac4b5f38b05f8f6c24265f6a53c", "committedDate": "2021-06-18 12:23:29 +0530", "message": "Modify logs with fullstops"}, {"oid": "aff283e0a117d9eaf79d12fbbb3d9b64db75d46c", "committedDate": "2021-06-25 15:02:07 +0530", "message": "Modify OIDC scope claims"}, {"oid": "3e36e5f40f310a3901eed2b66fc54932223cf789", "committedDate": "2021-06-26 12:43:54 +0530", "message": "Refactor code"}, {"oid": "28c3785807770c8f68fa84c0f2bba59296eb7768", "committedDate": "2021-07-12 10:37:04 +0530", "message": "Add initial version of user id"}, {"oid": "81b609a5a1e0c382752c265e85d5df703c67b350", "committedDate": "2021-07-13 10:25:33 +0530", "message": "Fix PR comments"}, {"oid": "4b584615b4d1b57bdf85bfbbbb7ed0d10c7ca28e", "committedDate": "2021-07-13 13:44:40 +0530", "message": "Fix API backward compatibility"}, {"oid": "3e86e0ca95a2cebbf2f1a18f5b8212b2a2c591c0", "committedDate": "2021-07-13 22:49:29 +0530", "message": "Fix token cache key for implecit grant"}, {"oid": "39a02e8fed6af53dcf1d77952cee55fc30cb2ac8", "committedDate": "2021-07-20 17:08:18 +0530", "message": "Revert Diagnostic Logs"}, {"oid": "62166cb2db9a0f896077cbd93b1e33079cad2bd1", "committedDate": "2021-08-11 09:45:06 +0530", "message": "Improve fetch encryption jwk from JWKS list, with encryption algorithm"}, {"oid": "336291d55b5bed75743ac1b0c6826f81b19eb138", "committedDate": "2021-08-11 16:23:47 +0530", "message": "Remove additional logs"}, {"oid": "a8181d2139710ecd33164c9aee6e62119314e81d", "committedDate": "2021-08-12 20:14:45 +0530", "message": "add support for PS256 configuration"}, {"oid": "a96dd3a9c727bd2b5602b238316c201a18e9390a", "committedDate": "2021-08-20 15:17:12 +0530", "message": "Token introspection restricted to tenant specific admins."}, {"oid": "0f80e5bdf366c15f9c1153c120ba4fe45b2d378c", "committedDate": "2021-08-25 13:01:31 +0530", "message": "Fix invalid access token error when revoking tokens mapped to session."}, {"oid": "28614a5ba7a41a4601bd87435192658bc1feee8b", "committedDate": "2021-09-06 22:48:15 +0530", "message": "load OIDC scope and Oauth scope binding config on server startup"}, {"oid": "769193d2218fc501bb24ce9d6b58e85bb8621509", "committedDate": "2021-09-08 16:36:53 +0530", "message": "Provide capability to extend the initialization of claim mapping for tenant"}, {"oid": "132e586fb2b911cd39da167a696d5242ad09f2f1", "committedDate": "2021-09-10 17:16:24 +0530", "message": "Merge pull request #1658 from ashendes/cross-tenant-introspection"}, {"oid": "45fd5eea5339d76f7b9ea2c05c6edc5b58728450", "committedDate": "2021-09-13 12:10:25 +0530", "message": "Revert \"Token introspection restricted to tenant specific admins.\""}, {"oid": "c8435fa38f92c708b068d3e5da168aa646448249", "committedDate": "2021-09-27 15:27:42 +0530", "message": "Add diagnostic logs to OIDC flows"}, {"oid": "050e9fa03341b1d33efc8d1fadd206e69ea5d658", "committedDate": "2021-09-28 09:19:30 +0530", "message": "Fix tests"}, {"oid": "5afc2463c78f0cffad0d1c4c318c77c6213faf6f", "committedDate": "2021-10-02 09:40:15 +0530", "message": "Fix oauth cache to use user's tenant"}, {"oid": "15c80d95b18633a1c4aa553260c14baddea05f29", "committedDate": "2021-10-03 21:53:27 +0530", "message": "Refactored the code"}, {"oid": "546e367417134c832010aafaea9d4225bafff193", "committedDate": "2021-10-04 15:19:57 +0530", "message": "Maintain internal scope - permission binding system level"}, {"oid": "e4ba59b383a79c0a934aeafe8810f218b97c6d81", "committedDate": "2021-10-04 22:13:16 +0530", "message": "fix identify authorized user subject identifier"}, {"oid": "5e18e14426c8168247a1791d0a6b08049ac1fe03", "committedDate": "2021-10-05 11:21:18 +0530", "message": "improve user id resolving logic"}, {"oid": "7ba2691356b2bef253aa40f01a0b7b2fb0c9bf8f", "committedDate": "2021-10-06 15:15:14 +0530", "message": "Merge pull request #1706 from senthalan/system-level"}, {"oid": "f9fd281ba28563e7a260d7f638288e6f69e7494a", "committedDate": "2021-10-14 11:20:19 +0530", "message": "Add dpop related code changes"}, {"oid": "3b54a0e553f392c603363303ceca7ee94b54ac60", "committedDate": "2021-10-26 15:13:30 +0530", "message": "Merge pull request #1705 from UdeshAthukorala/v6.7.42"}, {"oid": "071e14ebfa7f5ae828aeddab8097d8eeadb78d2f", "committedDate": "2021-11-05 12:09:48 +0530", "message": "Merge remote-tracking branch 'sathya/diag-logs2' into diag-logs-1"}, {"oid": "09ac1cf337670037a050dc4d32ffd5bec2170879", "committedDate": "2021-11-09 19:09:09 +0530", "message": "Add util method to check if the diagnostic logs are enabled"}, {"oid": "ba650f85362ebaa25fbeec0b1716bccb3e5aaced", "committedDate": "2021-11-09 19:22:33 +0530", "message": "Remove component ID from logs and include it in the OAuth2 log publishing util method"}, {"oid": "237b3493269c627c372e22b9bc5c5f978a375cda", "committedDate": "2021-11-09 23:07:48 +0530", "message": "Add diagnostic logs enabled checks in OAuth2Util"}, {"oid": "1a6cec2c39bfaefd7007ff99c535b33ff07a8c36", "committedDate": "2021-11-12 00:49:46 +0530", "message": "Move log related utils to a new class"}, {"oid": "4f56f649e198cf61e7d1c0b2bd249fec6d6c398f", "committedDate": "2021-11-16 21:25:42 +0530", "message": "Refactor SUCCESS, FAILED references with constants"}, {"oid": "cdec771c2137573013cf8305f7a33c43b13d7cff", "committedDate": "2021-11-25 00:42:17 +0530", "message": "Refactor code"}, {"oid": "3c3222347c89817fa1f8f8aa78e7e69cd22ee1a2", "committedDate": "2021-12-06 22:57:01 +0530", "message": "refactor code"}, {"oid": "6c667213570452cded5dacb5fe498432481c6252", "committedDate": "2022-01-12 13:01:56 +0530", "message": "Remove client error logs (#1729)"}, {"oid": "d0f7ace565f2fbd35f8386170c000aa0bf7739b9", "committedDate": "2022-03-15 22:12:34 +0530", "message": "Add device flow authz URL to discovery ep"}, {"oid": "82e17631d9c480d81e5d3ada7ec6681b8ed9fb74", "committedDate": "2022-04-11 11:34:19 +0530", "message": "Give an in-detail backend error message if a user tries to generate an ID token by enabling ID Token encryption without configuring a certificate or JWKS endpoint"}, {"oid": "c418550a178cf5c6eaf11358c443b805020b1cfc", "committedDate": "2022-04-11 15:01:35 +0530", "message": "Change the access modifier of the getSPJwksUrl method from private to public"}, {"oid": "3b101d750f20dc87016343487cac6c76e370e344", "committedDate": "2022-04-11 15:03:31 +0530", "message": "Change the jwksUri variable according to java best practices"}, {"oid": "63311097ce87f4c33248d9ac0dc9e7544403f4cd", "committedDate": "2022-04-11 15:08:16 +0530", "message": "Address comment"}, {"oid": "8a043ebe1a90c79b262006a2695a987c5408ade2", "committedDate": "2022-04-12 10:19:13 +0530", "message": "Address comment"}, {"oid": "89289ac01f74a9042cafdfcfc57d4d4c4027f723", "committedDate": "2022-04-12 15:20:07 +0530", "message": "Get the jwksUri directly using the ServiceProvider with its API instead of going through the SP properties"}, {"oid": "3ad96633c617a16de845cb61a215028290545337", "committedDate": "2022-04-12 15:23:57 +0530", "message": "Remove unused import"}, {"oid": "8a9185c657e3c9477d737c157e13111b93bb2298", "committedDate": "2022-05-19 02:06:04 +0400", "message": "Code review changes"}, {"oid": "2485224d8cd9e867eadf8bf05ab46a12c6c68580", "committedDate": "2022-05-19 02:07:40 +0400", "message": "Merge branch 'master' of github.com:wso2-extensions/identity-inbound-auth-oauth into device-flow-new"}, {"oid": "8b4e9cd4a8abf5a22d98aca5c40f10f6101e5381", "committedDate": "2022-06-08 23:51:07 +0530", "message": "Fix considering consent in refresh_token grant"}, {"oid": "8c964dd05b7971e2742a31295808594c588e941b", "committedDate": "2022-06-22 14:16:13 +0530", "message": "Address PR comments"}, {"oid": "b6466c20a18bd32ba3f5d4e044816c9aee97b3e6", "committedDate": "2022-06-22 22:02:34 +0530", "message": "Merge branch 'master' of github.com:wso2-extensions/identity-inbound-auth-oauth into device-flow-new"}, {"oid": "d866dc0cda1dd6a4e71e79625483a4db9286d981", "committedDate": "2022-06-23 14:44:54 +0530", "message": "Update tenant validation in OAuth2Util."}, {"oid": "2a84b9ba7b9a85239fe9321b40d24c524830c538", "committedDate": "2022-06-23 14:56:18 +0530", "message": "Remove star (*) imports."}, {"oid": "10201d14c1da255fd6379a4d1ef4df20bc20e42e", "committedDate": "2022-07-19 15:48:20 +0530", "message": "Refactored the validateRequestTenantDomain methods."}, {"oid": "30f232919f1f2ae8e34da8cd08af9ebe8d08d991", "committedDate": "2022-07-27 17:03:40 +0530", "message": "Add i18n translation for invalid client in tenant error"}, {"oid": "0850f60d0e82d59615b65be5498a856cf0dbd0bf", "committedDate": "2022-08-03 16:17:30 +0530", "message": "Add customParameters to OAuth2TokenRequestDTO."}, {"oid": "9a38dea8b55ba5eaa638ba03286627c3f318f0ac", "committedDate": "2022-08-04 10:42:36 +0530", "message": "Convert OAuth2TokenRequestDTO customParameters to parameters."}, {"oid": "9c415ad0a9a54253fe46d977523d8eaa2f1606fa", "committedDate": "2022-08-05 14:16:29 +0530", "message": "Merge pull request #1862 from dhaura/dhaura-patch-1"}, {"oid": "a21de57cac55f483b5b5e9f13655460aebdc9559", "committedDate": "2022-08-08 14:43:46 +0530", "message": "Fix tenant domain issues for federated users."}, {"oid": "ba0783763220e67c619cdb9c97361e0b0b30d4a4", "committedDate": "2022-08-08 14:43:46 +0530", "message": "Improve federated login authorization."}, {"oid": "988feb28302cb9c4e7f3068c6b2b7154daa83a9a", "committedDate": "2022-08-08 14:43:46 +0530", "message": "Improve role based authorization"}, {"oid": "2124186cda16a9dd87e8b976c702ce52c45cb6f3", "committedDate": "2022-08-08 14:43:46 +0530", "message": "Reformat federated user role based authorization logics."}, {"oid": "b703b7d42a26dd31a4b3d8950c27e49a9c821dfc", "committedDate": "2022-08-08 14:43:47 +0530", "message": "Update config for FIdP role based authz."}, {"oid": "cda14329e2bcc43d247be1b53663f619dc19c4b7", "committedDate": "2022-08-08 14:43:47 +0530", "message": "Fix unit test issue"}, {"oid": "1161df8a0e8aa54ffd17ff41b0c5c4c1b360a29b", "committedDate": "2022-08-08 14:43:47 +0530", "message": "Fix Attribute separator issue."}, {"oid": "59775ee9491dfb95c482712ce011d0cf71df4824", "committedDate": "2022-08-08 14:43:48 +0530", "message": "Refactor application name fetching logic."}, {"oid": "e60c216d518b3e728a607b5569306cef2f902666", "committedDate": "2022-08-15 16:29:55 +0530", "message": "Restrict the flow for super tenant."}, {"oid": "98b75eb31f5c14919ee6d22bec06145f3c36f9f6", "committedDate": "2022-09-23 00:05:17 +0530", "message": "Fix the issue with issuer name in logout token"}, {"oid": "702226547a7b70f9f76652f556698d49a32f680f", "committedDate": "2022-09-23 16:27:57 +0530", "message": "Add method comment"}, {"oid": "6a1a2ec7b89e19f0c528cb36d3544f7b1a3c98f8", "committedDate": "2022-11-20 20:17:03 +0530", "message": "Add Changes for adding Previous kid"}, {"oid": "6c31004807af7fcc13fc0caf7d700d9fd7de245e", "committedDate": "2022-12-07 12:28:21 +0530", "message": "Centralizing and Revamping scope validation logic in login flows (#1950)"}, {"oid": "40fd2914ed299beace1f5fd716b2ae9a2e226273", "committedDate": "2022-12-07 13:40:26 +0530", "message": "Revert \"Centralizing and Revamping scope validation logic in login flows (#1950)\""}, {"oid": "2e14a29cf41f5e7a8eba49da1facbe9a1051c704", "committedDate": "2022-12-08 15:56:03 +0530", "message": "Check tenant active status before client auth."}, {"oid": "2088e435c4af44c4ceaa9de640bff85fd0107fa4", "committedDate": "2022-12-09 17:06:09 +0530", "message": "Centralizing and Revamping scope validation logic in login flows (#1975)"}, {"oid": "e43260829af73441c403e3d1a6d0eef320c8cbf0", "committedDate": "2022-12-21 11:53:48 +0530", "message": "introduce method to get tenant wise oidc scopes"}, {"oid": "2a64662130fbe8590a374f8678bbc62fd9aecede", "committedDate": "2023-02-24 14:53:25 +0530", "message": "Add request binding to JWT tokens."}, {"oid": "f7ca0dd230998e0bf75fb69deaf476b9773481dd", "committedDate": "2023-04-18 22:31:36 +0530", "message": "Add capability to enrich JWT and ID_token with custom claims recieve from consent response. (#2038)"}, {"oid": "35394c60f4e1b8bcc7ad50e74978024be50e01ed", "committedDate": "2023-04-20 21:03:01 +0530", "message": "Retrieve external consent page"}, {"oid": "afe5e18def9b59daf25d82ae08a28dc4e8a88d67", "committedDate": "2023-04-21 07:31:38 +0530", "message": "Refactor the resolve consent page url method"}, {"oid": "8432933f56314d959512b7c62eb3af4c8c02121f", "committedDate": "2023-04-21 08:09:35 +0530", "message": "Changes to configuration manager service"}, {"oid": "f4f2f9af4bad1b5ab5b909e9653ce8d8f33f7c33", "committedDate": "2023-04-21 08:30:52 +0530", "message": "Add comment for the method"}, {"oid": "c9b684b9ca248ccf880d0d4bff678fcf498b903d", "committedDate": "2023-04-21 08:45:09 +0530", "message": "Change in resource type name"}, {"oid": "81aaad2f3ee44b90a99e2796bcd932c6989fe283", "committedDate": "2023-04-22 23:14:30 +0530", "message": "Refactor external consent page redirection"}, {"oid": "9c19a32c78af98abc3f7db6100698d419b710282", "committedDate": "2023-05-01 08:03:49 +0530", "message": "Changes dut to the change of consent server configs service name"}]}, {"oid": "172af675320c075e22699d29824981270cca45df", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/172af675320c075e22699d29824981270cca45df", "message": "Update debug log", "committedDate": "2020-01-28T06:42:42Z", "type": "commit"}]}