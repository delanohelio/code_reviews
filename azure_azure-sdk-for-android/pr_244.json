{"pr_number": 244, "pr_title": "Added public APIs for deleting blobs.", "pr_createdAt": "2020-06-13T01:49:10Z", "pr_url": "https://github.com/Azure/azure-sdk-for-android/pull/244", "merge_commit": "67604fcb40f08db095112565068ca48b3d449cc1", "timeline": [{"oid": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "url": "https://github.com/Azure/azure-sdk-for-android/commit/feb0690a4e64d58dea4b38cba26a2968820cb75d", "message": "Added a public API for deleting blobs.", "committedDate": "2020-06-13T01:44:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMzE1NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441213154", "body": "seems its JavaDoc for different API.", "bodyText": "seems its JavaDoc for different API.", "bodyHTML": "<p dir=\"auto\">seems its JavaDoc for different API.</p>", "author": "anuchandy", "createdAt": "2020-06-17T00:25:31Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -547,6 +551,161 @@ public ServiceCall commitBlockListWithRestResponse(String containerName,\n             tier, callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */\n+    Void delete(String containerName,", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk0OTE0Nw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441949147", "bodyText": "Thank you, I took the template from getBlobProperties and forgot to modify it.", "author": "vcolin7", "createdAt": "2020-06-18T03:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMzE1NA=="}], "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 9045bb169..5345aee4a 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n", "chunk": "@@ -552,11 +552,10 @@ public class StorageBlobClient {\n     }\n \n     /**\n-     * Reads the blob's metadata & properties.\n+     * Deletes the specified blob or snapshot. Note that deleting a blob also deletes all its snapshots.\n      *\n      * @param containerName The container name.\n      * @param blobName      The blob name.\n-     * @return The blob's metadata.\n      */\n     Void delete(String containerName,\n                 String blobName) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMzI1NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441213254", "body": "Javadoc need to be fixed I think.", "bodyText": "Javadoc need to be fixed I think.", "bodyHTML": "<p dir=\"auto\">Javadoc need to be fixed I think.</p>", "author": "anuchandy", "createdAt": "2020-06-17T00:25:50Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -547,6 +551,161 @@ public ServiceCall commitBlockListWithRestResponse(String containerName,\n             tier, callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */\n+    Void delete(String containerName,\n+                String blobName) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName);\n+    }\n+\n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    ServiceCall delete(String containerName,", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 9045bb169..5345aee4a 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n", "chunk": "@@ -565,11 +564,12 @@ public class StorageBlobClient {\n     }\n \n     /**\n-     * Reads the blob's metadata & properties.\n+     * Deletes the specified blob or snapshot. Note that deleting a blob also deletes all its snapshots.\n      *\n      * @param containerName The container name.\n      * @param blobName      The blob name.\n      * @param callback      Callback that receives the response.\n+     * @return A handle to the service call.\n      */\n     ServiceCall delete(String containerName,\n                        String blobName,\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMzYwMg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441213602", "body": "Looks like this link \"(Set-Blob-Service-Properties.md)\" is invalid", "bodyText": "Looks like this link \"(Set-Blob-Service-Properties.md)\" is invalid", "bodyHTML": "<p dir=\"auto\">Looks like this link \"(Set-Blob-Service-Properties.md)\" is invalid</p>", "author": "anuchandy", "createdAt": "2020-06-17T00:27:08Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -547,6 +551,161 @@ public ServiceCall commitBlockListWithRestResponse(String containerName,\n             tier, callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */\n+    Void delete(String containerName,\n+                String blobName) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName);\n+    }\n+\n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    ServiceCall delete(String containerName,\n+                       String blobName,\n+                       Callback<Void> callback) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName,\n+            callback);\n+    }\n+\n+    /**\n+     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n+     * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n+     * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n+     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service\n+     * properties] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 9045bb169..5345aee4a 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n", "chunk": "@@ -580,21 +580,23 @@ public class StorageBlobClient {\n     }\n \n     /**\n+     * Deletes the specified blob or snapshot. Note that deleting a blob also deletes all its snapshots.\n+     * <p>\n      * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n      * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n      * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n-     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service\n-     * properties] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data\n-     * is permanently removed from the storage account. Note that you continue to be charged for the soft-deleted\n-     * blob's storage until it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query\n-     * parameter to discover which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API\n-     * to restore a soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to\n-     * return an HTTP status code of 404 (ResourceNotFound). If the storage account's automatic snapshot feature is\n-     * enabled, then, when a blob is deleted, an automatic snapshot is created. The blob becomes inaccessible\n-     * immediately. All other operations on the blob causes the service to return an HTTP status code of 404\n-     * (ResourceNotFound). You can access automatic snapshot using snapshot timestamp or version id. You can restore\n-     * the blob by calling Put or Copy Blob API with automatic snapshot as source. Deleting automatic snapshot\n-     * requires shared key or special SAS/RBAC permissions.\n+     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of\n+     * &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties\"&gt; Storage service properties.&lt;/a&gt;.\n+     * After the specified number of days has passed, the blob's data is permanently removed from the storage account.\n+     * Note that you continue to be charged for the soft-deleted blob's storage until it is permanently removed. Use\n+     * the List Blobs API and specify the \"include=deleted\" query parameter to discover which blobs and snapshots\n+     * have been soft deleted. You can then use the Undelete Blob API to restore a soft-deleted blob. All other\n+     * operations on a soft-deleted blob or snapshot causes the service to return an HTTP status code of 404\n+     * (ResourceNotFound). If the storage account's automatic snapshot feature is enabled, then, when a blob is\n+     * deleted, an automatic snapshot is created. The blob becomes inaccessible immediately. All other operations on\n+     * the blob causes the service to return an HTTP status code of 404 (ResourceNotFound). You can access automatic\n+     * snapshot using snapshot timestamp or version ID. You can restore the blob by calling Put or Copy Blob API with\n+     * automatic snapshot as source. Deleting automatic snapshot requires shared key or special SAS/RBAC permissions.\n      *\n      * @param containerName     The container name.\n      * @param blobName          The blob name.\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMzgyNg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441213826", "body": "missing return", "bodyText": "missing return", "bodyHTML": "<p dir=\"auto\">missing return</p>", "author": "anuchandy", "createdAt": "2020-06-17T00:27:57Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -547,6 +551,161 @@ public ServiceCall commitBlockListWithRestResponse(String containerName,\n             tier, callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */\n+    Void delete(String containerName,\n+                String blobName) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName);\n+    }\n+\n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    ServiceCall delete(String containerName,\n+                       String blobName,\n+                       Callback<Void> callback) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName,\n+            callback);\n+    }\n+\n+    /**\n+     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n+     * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n+     * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n+     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service\n+     * properties] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data\n+     * is permanently removed from the storage account. Note that you continue to be charged for the soft-deleted\n+     * blob's storage until it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query\n+     * parameter to discover which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API\n+     * to restore a soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to\n+     * return an HTTP status code of 404 (ResourceNotFound). If the storage account's automatic snapshot feature is\n+     * enabled, then, when a blob is deleted, an automatic snapshot is created. The blob becomes inaccessible\n+     * immediately. All other operations on the blob causes the service to return an HTTP status code of 404\n+     * (ResourceNotFound). You can access automatic snapshot using snapshot timestamp or version id. You can restore\n+     * the blob by calling Put or Copy Blob API with automatic snapshot as source. Deleting automatic snapshot\n+     * requires shared key or special SAS/RBAC permissions.\n+     *\n+     * @param containerName     The container name.\n+     * @param blobName          The blob name.\n+     * @param snapshot          The snapshot parameter is an opaque DateTime value that, when present, specifies the\n+     *                          blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n+     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n+     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param leaseId           If specified, the operation only succeeds if the resource's lease is active and\n+     *                          matches this ID.\n+     * @param deleteSnapshots   Required if the blob has associated snapshots. Specify one of the following two\n+     *                          options: include: Delete the base blob and all of its snapshots. only: Delete only the blob's snapshots and not the blob itself. Possible values include: 'include', 'only'.\n+     * @param ifModifiedSince   Specify this header value to operate only on a blob if it has been modified since the\n+     *                          specified date/time.\n+     * @param ifUnmodifiedSince Specify this header value to operate only on a blob if it has not been modified since\n+     *                          the specified date/time.\n+     * @param ifMatch           Specify an ETag value to operate only on blobs with a matching value.\n+     * @param ifNoneMatch       Specify an ETag value to operate only on blobs without a matching value.\n+     * @param requestId         Provides a client-generated, opaque value with a 1 KB character limit that is\n+     *                          recorded in the analytics logs when storage analytics logging is enabled.\n+     */", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 9045bb169..5345aee4a 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n", "chunk": "@@ -614,6 +616,7 @@ public class StorageBlobClient {\n      * @param ifNoneMatch       Specify an ETag value to operate only on blobs without a matching value.\n      * @param requestId         Provides a client-generated, opaque value with a 1 KB character limit that is\n      *                          recorded in the analytics logs when storage analytics logging is enabled.\n+     * @return A response object containing the details of the delete operation.\n      */\n     BlobDeleteResponse deleteWithResponse(String containerName,\n                                           String blobName,\n", "next_change": null}]}, "revised_code_in_main": {"commit": "67604fcb40f08db095112565068ca48b3d449cc1", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 9045bb169..17b2c9169 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n", "chunk": "@@ -614,6 +963,7 @@ public class StorageBlobClient {\n      * @param ifNoneMatch       Specify an ETag value to operate only on blobs without a matching value.\n      * @param requestId         Provides a client-generated, opaque value with a 1 KB character limit that is\n      *                          recorded in the analytics logs when storage analytics logging is enabled.\n+     * @return A response object containing the details of the delete operation.\n      */\n     BlobDeleteResponse deleteWithResponse(String containerName,\n                                           String blobName,\n", "next_change": {"commit": "213c93409759e10c597eef72b1fea28a3c6f8270", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 17b2c9169..5f461b4ff 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n", "chunk": "@@ -963,6 +452,7 @@ public class StorageBlobClient {\n      * @param ifNoneMatch       Specify an ETag value to operate only on blobs without a matching value.\n      * @param requestId         Provides a client-generated, opaque value with a 1 KB character limit that is\n      *                          recorded in the analytics logs when storage analytics logging is enabled.\n+     * @param cancellationToken The token to request cancellation.\n      * @return A response object containing the details of the delete operation.\n      */\n     BlobDeleteResponse deleteWithResponse(String containerName,\n", "next_change": {"commit": "8c7babc862d9b9a81d57d98b31ae5e09702dbacf", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 5f461b4ff..52079a331 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n", "chunk": "@@ -455,20 +481,20 @@ public class StorageBlobClient {\n      * @param cancellationToken The token to request cancellation.\n      * @return A response object containing the details of the delete operation.\n      */\n-    BlobDeleteResponse deleteWithResponse(String containerName,\n-                                          String blobName,\n-                                          String snapshot,\n-                                          Integer timeout,\n-                                          String version,\n-                                          String leaseId,\n-                                          DeleteSnapshotsOptionType deleteSnapshots,\n-                                          OffsetDateTime ifModifiedSince,\n-                                          OffsetDateTime ifUnmodifiedSince,\n-                                          String ifMatch,\n-                                          String ifNoneMatch,\n-                                          String requestId,\n-                                          CancellationToken cancellationToken) {\n-        return storageBlobServiceClient.deleteWithResponse(containerName,\n+    BlobDeleteResponse deleteWithRestResponse(String containerName,\n+                                              String blobName,\n+                                              String snapshot,\n+                                              Integer timeout,\n+                                              String version,\n+                                              String leaseId,\n+                                              DeleteSnapshotsOptionType deleteSnapshots,\n+                                              OffsetDateTime ifModifiedSince,\n+                                              OffsetDateTime ifUnmodifiedSince,\n+                                              String ifMatch,\n+                                              String ifNoneMatch,\n+                                              String requestId,\n+                                              CancellationToken cancellationToken) {\n+        return storageBlobServiceClient.deleteWithRestResponse(containerName,\n             blobName,\n             snapshot,\n             timeout,\n", "next_change": {"commit": "201afcb62cf1cf68af39751f8b8f302577e4542b", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 52079a331..e48fa785c 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n", "chunk": "@@ -481,20 +574,20 @@ public class StorageBlobClient {\n      * @param cancellationToken The token to request cancellation.\n      * @return A response object containing the details of the delete operation.\n      */\n-    BlobDeleteResponse deleteWithRestResponse(String containerName,\n-                                              String blobName,\n-                                              String snapshot,\n-                                              Integer timeout,\n-                                              String version,\n-                                              String leaseId,\n-                                              DeleteSnapshotsOptionType deleteSnapshots,\n-                                              OffsetDateTime ifModifiedSince,\n-                                              OffsetDateTime ifUnmodifiedSince,\n-                                              String ifMatch,\n-                                              String ifNoneMatch,\n-                                              String requestId,\n-                                              CancellationToken cancellationToken) {\n-        return storageBlobServiceClient.deleteWithRestResponse(containerName,\n+    BlobDeleteResponse deleteBlobWithRestResponse(String containerName,\n+                                                  String blobName,\n+                                                  String snapshot,\n+                                                  Integer timeout,\n+                                                  String version,\n+                                                  String leaseId,\n+                                                  DeleteSnapshotsOptionType deleteSnapshots,\n+                                                  OffsetDateTime ifModifiedSince,\n+                                                  OffsetDateTime ifUnmodifiedSince,\n+                                                  String ifMatch,\n+                                                  String ifNoneMatch,\n+                                                  String requestId,\n+                                                  CancellationToken cancellationToken) {\n+        return storageBlobServiceClient.deleteBlobWithRestResponse(containerName,\n             blobName,\n             snapshot,\n             timeout,\n", "next_change": {"commit": "12928481c42f69581eb233d129a3770e739aeed2", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex e48fa785c..ad4fe537b 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n", "chunk": "@@ -579,12 +570,8 @@ public class StorageBlobClient {\n                                                   String snapshot,\n                                                   Integer timeout,\n                                                   String version,\n-                                                  String leaseId,\n                                                   DeleteSnapshotsOptionType deleteSnapshots,\n-                                                  OffsetDateTime ifModifiedSince,\n-                                                  OffsetDateTime ifUnmodifiedSince,\n-                                                  String ifMatch,\n-                                                  String ifNoneMatch,\n+                                                  BlobRequestConditions requestConditions,\n                                                   String requestId,\n                                                   CancellationToken cancellationToken) {\n         return storageBlobServiceClient.deleteBlobWithRestResponse(containerName,\n", "next_change": {"commit": "6a9930d16e66ab2d195a0af8eabc47742c7c4dd2", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex ad4fe537b..2c334ac08 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n", "chunk": "@@ -565,15 +722,15 @@ public class StorageBlobClient {\n      * @param cancellationToken The token to request cancellation.\n      * @return A response object containing the details of the delete operation.\n      */\n-    BlobDeleteResponse deleteBlobWithRestResponse(String containerName,\n-                                                  String blobName,\n-                                                  String snapshot,\n-                                                  Integer timeout,\n-                                                  String version,\n-                                                  DeleteSnapshotsOptionType deleteSnapshots,\n-                                                  BlobRequestConditions requestConditions,\n-                                                  String requestId,\n-                                                  CancellationToken cancellationToken) {\n+    public BlobDeleteResponse deleteBlobWithRestResponse(String containerName,\n+                                                         String blobName,\n+                                                         String snapshot,\n+                                                         Integer timeout,\n+                                                         String version,\n+                                                         DeleteSnapshotsOptionType deleteSnapshots,\n+                                                         BlobRequestConditions requestConditions,\n+                                                         String requestId,\n+                                                         CancellationToken cancellationToken) {\n         return storageBlobServiceClient.deleteBlobWithRestResponse(containerName,\n             blobName,\n             snapshot,\n", "next_change": {"commit": "0ef4de95021f90c07c3e888cd740592cf7e924c4", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 2c334ac08..a637e0f0d 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n", "chunk": "@@ -726,19 +666,15 @@ public class StorageBlobClient {\n                                                          String blobName,\n                                                          String snapshot,\n                                                          Integer timeout,\n-                                                         String version,\n                                                          DeleteSnapshotsOptionType deleteSnapshots,\n                                                          BlobRequestConditions requestConditions,\n-                                                         String requestId,\n                                                          CancellationToken cancellationToken) {\n         return storageBlobServiceClient.deleteBlobWithRestResponse(containerName,\n             blobName,\n             snapshot,\n             timeout,\n-            version,\n             deleteSnapshots,\n             requestConditions,\n-            requestId,\n             cancellationToken);\n     }\n \n", "next_change": {"commit": "9b6d9b14ba73b7e51adf0daa17a4f8995fc5b8fc", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex a637e0f0d..e664d941a 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n", "chunk": "@@ -678,35 +697,6 @@ public class StorageBlobClient {\n             cancellationToken);\n     }\n \n-    /**\n-     * Deletes a container.\n-     *\n-     * @param containerName The container name.\n-     */\n-    public Void deleteContainer(String containerName) {\n-        return storageBlobServiceClient.deleteContainer(containerName);\n-    }\n-\n-    /**\n-     * Deletes a container\n-     *\n-     * @param containerName     The container name.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n-     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param requestConditions {@link BlobRequestConditions}\n-     * @param cancellationToken The token to request cancellation.\n-     * @return A response object containing the details of the delete operation.\n-     */\n-    public ContainerDeleteResponse deleteContainerWithRestResponse(String containerName,\n-                                                                   Integer timeout,\n-                                                                   BlobRequestConditions requestConditions,\n-                                                                   CancellationToken cancellationToken) {\n-        return storageBlobServiceClient.deleteContainerWithRestResponse(containerName,\n-            timeout,\n-            requestConditions,\n-            cancellationToken);\n-    }\n-\n     /**\n      * Gets tags associated with a blob.\n      *\n", "next_change": {"commit": "927088035fe49832bd9f9c35bcd3a920e9148b8c", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\ndeleted file mode 100644\nindex e664d941a..000000000\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ /dev/null\n", "chunk": "@@ -1,882 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.android.storage.blob;\n-\n-import android.content.Context;\n-import android.net.Uri;\n-\n-import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-\n-import com.azure.android.core.http.Response;\n-import com.azure.android.core.http.ServiceClient;\n-import com.azure.android.core.http.interceptor.AddDateInterceptor;\n-import com.azure.android.core.http.interceptor.RequestIdInterceptor;\n-import com.azure.android.core.util.CancellationToken;\n-import com.azure.android.storage.blob.implementation.util.ModelHelper;\n-import com.azure.android.storage.blob.interceptor.MetadataInterceptor;\n-import com.azure.android.storage.blob.interceptor.NormalizeEtagInterceptor;\n-import com.azure.android.storage.blob.models.AccessTier;\n-import com.azure.android.storage.blob.models.BlobDeleteResponse;\n-import com.azure.android.storage.blob.models.BlobDownloadResponse;\n-import com.azure.android.storage.blob.models.BlobGetPropertiesHeaders;\n-import com.azure.android.storage.blob.models.BlobGetPropertiesResponse;\n-import com.azure.android.storage.blob.models.BlobGetTagsResponse;\n-import com.azure.android.storage.blob.models.BlobHttpHeaders;\n-import com.azure.android.storage.blob.models.BlobItem;\n-import com.azure.android.storage.blob.models.BlobRange;\n-import com.azure.android.storage.blob.models.BlobRequestConditions;\n-import com.azure.android.storage.blob.models.BlobSetHttpHeadersResponse;\n-import com.azure.android.storage.blob.models.BlobSetMetadataResponse;\n-import com.azure.android.storage.blob.models.BlobSetTagsResponse;\n-import com.azure.android.storage.blob.models.BlobSetTierResponse;\n-import com.azure.android.storage.blob.models.BlobTags;\n-import com.azure.android.storage.blob.models.BlobsPage;\n-import com.azure.android.storage.blob.models.BlockBlobItem;\n-import com.azure.android.storage.blob.models.BlockBlobsCommitBlockListResponse;\n-import com.azure.android.storage.blob.models.BlockBlobsStageBlockResponse;\n-import com.azure.android.storage.blob.models.ContainerCreateResponse;\n-import com.azure.android.storage.blob.models.ContainerDeleteResponse;\n-import com.azure.android.storage.blob.models.ContainerGetPropertiesHeaders;\n-import com.azure.android.storage.blob.models.ContainerGetPropertiesResponse;\n-import com.azure.android.storage.blob.models.ContainersListBlobFlatSegmentResponse;\n-import com.azure.android.storage.blob.models.CpkInfo;\n-import com.azure.android.storage.blob.models.DeleteSnapshotsOptionType;\n-import com.azure.android.storage.blob.models.ListBlobsFlatSegmentResponse;\n-import com.azure.android.storage.blob.models.ListBlobsIncludeItem;\n-import com.azure.android.storage.blob.models.ListBlobsOptions;\n-import com.azure.android.storage.blob.models.RehydratePriority;\n-import com.azure.android.storage.blob.options.ContainerCreateOptions;\n-import com.azure.android.storage.blob.options.ContainerDeleteOptions;\n-import com.azure.android.storage.blob.options.ContainerGetPropertiesOptions;\n-\n-import java.io.File;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-\n-import okhttp3.Interceptor;\n-import okhttp3.ResponseBody;\n-\n-/**\n- * Client for Storage Blob service.\n- *\n- * <p>\n- * This client is instantiated through {@link StorageBlobClient.Builder}.\n- */\n-public class StorageBlobClient {\n-    private final ServiceClient serviceClient;\n-    private final StorageBlobServiceImpl storageBlobServiceClient;\n-\n-    private StorageBlobClient(ServiceClient serviceClient, String serviceVersion) {\n-        this.serviceClient = serviceClient;\n-        this.storageBlobServiceClient = new StorageBlobServiceImpl(this.serviceClient, serviceVersion);\n-    }\n-\n-    /**\n-     * Creates a new {@link Builder} with initial configuration copied from this {@link StorageBlobClient}\n-     *\n-     * @return A new {@link Builder}.\n-     */\n-    public StorageBlobClient.Builder newBuilder() {\n-        return new Builder(this);\n-    }\n-\n-    /**\n-     * Gets the blob service base URL.\n-     *\n-     * @return The blob service base URL.\n-     */\n-    public String getBlobServiceUrl() {\n-        return this.serviceClient.getBaseUrl();\n-    }\n-\n-    /**\n-     * Creates a new container within a storage account. If a container with the same name already exists, the operation\n-     * fails.\n-     * For more information, see the <a href=\"https://docs.microsoft.com/rest/api/storageservices/create-container\">Azure Docs</a>.\n-     *\n-     * @param containerName The container name.\n-     */\n-    @Nullable\n-    public Void createContainer(@NonNull String containerName) {\n-        return this.createContainerWithResponse(new ContainerCreateOptions(containerName)).getValue();\n-    }\n-\n-    /**\n-     * Creates a new container within a storage account. If a container with the same name already exists, the operation\n-     * fails.\n-     * For more information, see the <a href=\"https://docs.microsoft.com/rest/api/storageservices/create-container\">Azure Docs</a>.\n-     *\n-     * @param options {@link ContainerCreateOptions}\n-     * @return The response information returned from the server when creating a container.\n-     */\n-    @NonNull\n-    public ContainerCreateResponse createContainerWithResponse(@NonNull ContainerCreateOptions options) {\n-        Objects.requireNonNull(options);\n-        return storageBlobServiceClient.createContainerWithRestResponse(options.getContainerName(),\n-            options.getTimeout(), options.getMetadata(), options.getPublicAccessType(), options.getCancellationToken());\n-    }\n-\n-    /**\n-     * Marks the specified container for deletion. The container and any blobs contained within it are later deleted\n-     * during garbage collection. For more information, see the\n-     * <a href=\"https://docs.microsoft.com/rest/api/storageservices/delete-container\">Azure Docs</a>.\n-     *\n-     * @param containerName The container name.\n-     */\n-    @Nullable\n-    public Void deleteContainer(@NonNull String containerName) {\n-        return this.deleteContainerWithResponse(new ContainerDeleteOptions(containerName)).getValue();\n-    }\n-\n-    /**\n-     * Marks the specified container for deletion. The container and any blobs contained within it are later deleted\n-     * during garbage collection. For more information, see the\n-     * <a href=\"https://docs.microsoft.com/rest/api/storageservices/delete-container\">Azure Docs</a>.\n-     *\n-     * @param options {@link ContainerDeleteOptions}\n-     * @return The response information returned from the server when deleting a container.\n-     */\n-    @NonNull\n-    public ContainerDeleteResponse deleteContainerWithResponse(@NonNull ContainerDeleteOptions options) {\n-        Objects.requireNonNull(options);\n-        ModelHelper.validateRequestConditions(options.getRequestConditions(), false, true, true, false);\n-        return storageBlobServiceClient.deleteContainerWithRestResponse(options.getContainerName(),\n-            options.getTimeout(), options.getRequestConditions(), options.getCancellationToken());\n-    }\n-\n-    /**\n-     * Returns the container's metadata and system properties. For more information, see the\n-     * <a href=\"https://docs.microsoft.com/rest/api/storageservices/get-container-metadata\">Azure Docs</a>.\n-     *\n-     * @param containerName The container name.\n-     * @return The container's properties.\n-     */\n-    /* TODO: (gapra) This should probably return a handwrapped type? */\n-    @NonNull\n-    public ContainerGetPropertiesHeaders getContainerProperties(@NonNull String containerName) {\n-        return this.getContainerPropertiesWithResponse(new ContainerGetPropertiesOptions(containerName)).getDeserializedHeaders();\n-    }\n-\n-    /**\n-     * Returns the container's metadata and system properties. For more information, see the\n-     * <a href=\"https://docs.microsoft.com/rest/api/storageservices/get-container-metadata\">Azure Docs</a>.\n-     *\n-     * @param options {@link ContainerGetPropertiesOptions}\n-     * @return The response information returned from the server when getting a container's properties.\n-     */\n-    @NonNull\n-    public ContainerGetPropertiesResponse getContainerPropertiesWithResponse(@NonNull ContainerGetPropertiesOptions options) {\n-        Objects.requireNonNull(options);\n-        ModelHelper.validateRequestConditions(options.getRequestConditions(), false, false, true, false);\n-        BlobRequestConditions requestConditions = options.getRequestConditions() == null ? new BlobRequestConditions()\n-            : options.getRequestConditions();\n-\n-        return storageBlobServiceClient.getContainerPropertiesWithResponse(options.getContainerName(),\n-            options.getTimeout(), requestConditions.getLeaseId(), options.getCancellationToken());\n-    }\n-\n-    /**\n-     * Gets a list of blobs identified by a page id in a given container.\n-     *\n-     * @param pageId        Identifies the portion of the list to be returned.\n-     * @param containerName The container name.\n-     * @param options       The page options.\n-     * @return A list of blobs.\n-     */\n-    public BlobsPage getBlobsInPage(String pageId,\n-                                    String containerName,\n-                                    ListBlobsOptions options) {\n-        ListBlobsFlatSegmentResponse result = this.storageBlobServiceClient.listBlobFlatSegment(pageId,\n-            containerName, options);\n-\n-        final List<BlobItem> list;\n-        if (result.getSegment() != null\n-            && result.getSegment().getBlobItems() != null) {\n-            list = result.getSegment().getBlobItems();\n-        } else {\n-            list = new ArrayList<>(0);\n-        }\n-        return new BlobsPage(list, pageId, result.getNextMarker());\n-    }\n-\n-    /**\n-     * Gets a list of blobs identified by a page id in a given container.\n-     *\n-     * @param pageId            Identifies the portion of the list to be returned.\n-     * @param containerName     The container name.\n-     * @param prefix            Filters the results to return only blobs whose name begins with the specified prefix.\n-     * @param maxResults        Specifies the maximum number of blobs to return.\n-     * @param include           Include this parameter to specify one or more datasets to include in the response.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n-     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param cancellationToken The token to request cancellation.\n-     * @return A response object containing a list of blobs.\n-     */\n-    public Response<BlobsPage> getBlobsInPageWithRestResponse(String pageId,\n-                                                              String containerName,\n-                                                              String prefix,\n-                                                              Integer maxResults,\n-                                                              List<ListBlobsIncludeItem> include,\n-                                                              Integer timeout,\n-                                                              CancellationToken cancellationToken) {\n-        ContainersListBlobFlatSegmentResponse result\n-            = this.storageBlobServiceClient.listBlobFlatSegmentWithRestResponse(pageId,\n-            containerName,\n-            prefix,\n-            maxResults,\n-            include,\n-            timeout,\n-            cancellationToken);\n-        final List<BlobItem> list;\n-        if (result.getValue().getSegment() != null\n-            && result.getValue().getSegment().getBlobItems() != null) {\n-            list = result.getValue().getSegment().getBlobItems();\n-        } else {\n-            list = new ArrayList<>(0);\n-        }\n-        BlobsPage blobsPage = new BlobsPage(list, pageId, result.getValue().getNextMarker());\n-\n-        return new Response<>(null,\n-            result.getStatusCode(),\n-            result.getHeaders(),\n-            blobsPage);\n-    }\n-\n-    /**\n-     * Reads the blob's metadata and properties.\n-     *\n-     * @param containerName The container name.\n-     * @param blobName      The blob name.\n-     * @return The blob's metadata and properties\n-     */\n-    public BlobGetPropertiesHeaders getBlobProperties(String containerName,\n-                                                      String blobName) {\n-        return storageBlobServiceClient.getBlobProperties(containerName, blobName);\n-    }\n-\n-    /**\n-     * Reads a blob's metadata and properties.\n-     *\n-     * @param containerName         The container name.\n-     * @param blobName              The blob name.\n-     * @param snapshot              The snapshot parameter is an opaque DateTime value that, when present, specifies\n-     *                              the blob snapshot to retrieve. For more information on working with blob snapshots,\n-     *                              see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n-     * @param timeout               The timeout parameter is expressed in seconds. For more information, see\n-     *                              &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param blobRequestConditions Object that contains values which will restrict the successful operation of a\n-     *                              variety of requests to the conditions present. These conditions are entirely\n-     *                              optional.\n-     * @param cpkInfo               Additional parameters for the operation.\n-     * @param cancellationToken     The token to request cancellation.\n-     * @return The response information returned from the server when downloading a blob.\n-     */\n-    public BlobGetPropertiesResponse getBlobPropertiesWithRestResponse(String containerName,\n-                                                                       String blobName,\n-                                                                       String snapshot,\n-                                                                       Integer timeout,\n-                                                                       BlobRequestConditions blobRequestConditions,\n-                                                                       CpkInfo cpkInfo,\n-                                                                       CancellationToken cancellationToken) {\n-        return storageBlobServiceClient.getBlobPropertiesWithRestResponse(containerName,\n-            blobName,\n-            snapshot,\n-            timeout,\n-            blobRequestConditions,\n-            cpkInfo,\n-            cancellationToken);\n-    }\n-\n-    /**\n-     * Changes a blob's HTTP header properties. If only one HTTP header is updated, the others will all be erased. In\n-     * order to preserve existing values, they must be passed alongside the header being changed.\n-     *\n-     * @param containerName The container name.\n-     * @param blobName      The blob name.\n-     * @param headers       {@link BlobHttpHeaders}\n-     */\n-    public Void setBlobHttpHeaders(String containerName,\n-                                   String blobName,\n-                                   BlobHttpHeaders headers) {\n-        return storageBlobServiceClient.setBlobHttpHeaders(containerName, blobName, headers);\n-    }\n-\n-    /**\n-     * Changes a blob's HTTP header properties. If only one HTTP header is updated, the others will all be erased. In\n-     * order to preserve existing values, they must be passed alongside the header being changed.\n-     *\n-     * @param containerName     The container name.\n-     * @param blobName          The blob name.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n-     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param requestConditions {@link BlobRequestConditions}\n-     * @param headers           {@link BlobHttpHeaders}\n-     * @param cancellationToken The token to request cancellation.\n-     * @return The response object.\n-     */\n-    public BlobSetHttpHeadersResponse setBlobHttpHeadersWithResponse(String containerName,\n-                                                                     String blobName,\n-                                                                     Integer timeout,\n-                                                                     BlobRequestConditions requestConditions,\n-                                                                     BlobHttpHeaders headers,\n-                                                                     CancellationToken cancellationToken) {\n-        return storageBlobServiceClient.setBlobHttpHeadersWithRestResponse(containerName,\n-            blobName,\n-            timeout,\n-            requestConditions,\n-            headers,\n-            cancellationToken);\n-    }\n-\n-    /**\n-     * Changes a blob's metadata. The specified metadata in this method will replace existing metadata. If old values\n-     * must be preserved, they must be downloaded and included in the call to this method.\n-     *\n-     * @param containerName The container name.\n-     * @param blobName      The blob name.\n-     * @param metadata      Metadata to associate with the blob.\n-     */\n-    public Void setBlobMetadata(String containerName,\n-                                String blobName,\n-                                Map<String, String> metadata) {\n-        return storageBlobServiceClient.setBlobMetadata(containerName, blobName, metadata);\n-    }\n-\n-    /**\n-     * Changes a blob's metadata. The specified metadata in this method will replace existing metadata. If old values\n-     * must be preserved, they must be downloaded and included in the call to this method.\n-     *\n-     * @param containerName     The container name.\n-     * @param blobName          The blob name.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n-     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param requestConditions {@link BlobRequestConditions}\n-     * @param metadata          Metadata to associate with the blob.\n-     * @param cpkInfo           Additional parameters for the operation.\n-     * @param cancellationToken The token to request cancellation.\n-     */\n-    public BlobSetMetadataResponse setBlobMetadataWithResponse(String containerName,\n-                                                               String blobName,\n-                                                               Integer timeout,\n-                                                               BlobRequestConditions requestConditions,\n-                                                               Map<String, String> metadata,\n-                                                               CpkInfo cpkInfo,\n-                                                               CancellationToken cancellationToken) {\n-        return storageBlobServiceClient.setBlobMetadataWithRestResponse(containerName,\n-            blobName,\n-            timeout,\n-            requestConditions,\n-            metadata,\n-            cpkInfo,\n-            cancellationToken);\n-    }\n-\n-    /**\n-     * Sets the blob's tier.\n-     *\n-     * @param containerName The container name.\n-     * @param blobName      The blob name.\n-     * @param tier          The access tier.\n-     */\n-    public Void setBlobTier(String containerName,\n-                            String blobName,\n-                            AccessTier tier) {\n-        return storageBlobServiceClient.setBlobTier(containerName, blobName, tier);\n-    }\n-\n-    /**\n-     * Sets the blob's tier.\n-     *\n-     * @param containerName     The container name.\n-     * @param blobName          The blob name.\n-     * @param tier              The access tier.\n-     * @param snapshot          The snapshot parameter is an opaque DateTime value that, when present, specifies\n-     *                          the blob snapshot to retrieve. For more information on working with blob snapshots,\n-     *                          see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n-     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param rehydratePriority The rehydrate priority.\n-     * @return The response information returned from the server when setting a blob's access tier.\n-     */\n-    public BlobSetTierResponse setBlobTierWithRestResponse(String containerName,\n-                                                           String blobName,\n-                                                           AccessTier tier,\n-                                                           String snapshot,\n-                                                           Integer timeout,\n-                                                           RehydratePriority rehydratePriority,\n-                                                           String leaseId,\n-                                                           String tagsConditions,\n-                                                           CancellationToken cancellationToken) {\n-\n-        return storageBlobServiceClient.setBlobTierWithRestResponse(containerName,\n-            blobName,\n-            tier,\n-            snapshot,\n-            null,  /* TODO: (gapra) Add version id when there is support for STG73 */\n-            timeout,\n-            rehydratePriority,\n-            leaseId,\n-            tagsConditions,\n-            cancellationToken);\n-    }\n-\n-    /**\n-     * Reads the entire blob.\n-     *\n-     * <p>\n-     * This method will execute a raw HTTP GET in order to download a single blob to the destination.\n-     * It is **STRONGLY** recommended that you use the {@link StorageBlobAsyncClient#download(Context, String, String, File)}\n-     * or {@link StorageBlobAsyncClient#download(Context, String, String, Uri)} method instead - that method will\n-     * manage the transfer in the face of changing network conditions, and is able to transfer multiple\n-     * blocks in parallel.\n-     * `\n-     *\n-     * @param containerName The container name.\n-     * @param blobName      The blob name.\n-     * @return The response containing the blob's bytes.\n-     */\n-    public ResponseBody rawDownload(String containerName,\n-                                    String blobName) {\n-        return storageBlobServiceClient.download(containerName,\n-            blobName);\n-    }\n-\n-    /**\n-     * Reads a range of bytes from a blob.\n-     *\n-     * <p>\n-     * This method will execute a raw HTTP GET in order to download a single blob to the destination.\n-     * It is **STRONGLY** recommended that you use the {@link StorageBlobAsyncClient#download(Context, String, String, File)}\n-     * or {@link StorageBlobAsyncClient#download(Context, String, String, Uri)} method instead - that method will\n-     * manage the transfer in the face of changing network conditions, and is able to transfer multiple\n-     * blocks in parallel.\n-     *\n-     * @param containerName         The container name.\n-     * @param blobName              The blob name.\n-     * @param snapshot              The snapshot parameter is an opaque DateTime value that, when present, specifies\n-     *                              the blob snapshot to retrieve. For more information on working with blob snapshots,\n-     *                              see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n-     * @param timeout               The timeout parameter is expressed in seconds. For more information, see\n-     *                              &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param range                 Return only the bytes of the blob in the specified range.\n-     * @param blobRequestConditions Object that contains values which will restrict the successful operation of a\n-     *                              variety of requests to the conditions present. These conditions are entirely\n-     *                              optional.\n-     * @param getRangeContentMd5    When set to true and specified together with the Range, the service returns the\n-     *                              MD5 hash for the range, as long as the range is less than or equal to 4 MB in size.\n-     * @param getRangeContentCrc64  When set to true and specified together with the Range, the service returns the\n-     *                              CRC64 hash for the range, as long as the range is less than or equal to 4 MB in size.\n-     * @param cpkInfo               Additional parameters for the operation.\n-     * @param cancellationToken     The token to request cancellation.\n-     * @return The response information returned from the server when downloading a blob.\n-     */\n-    public BlobDownloadResponse rawDownloadWithRestResponse(String containerName,\n-                                                            String blobName,\n-                                                            String snapshot,\n-                                                            Integer timeout,\n-                                                            BlobRange range,\n-                                                            BlobRequestConditions blobRequestConditions,\n-                                                            Boolean getRangeContentMd5,\n-                                                            Boolean getRangeContentCrc64,\n-                                                            CpkInfo cpkInfo,\n-                                                            CancellationToken cancellationToken) {\n-        range = range == null ? new BlobRange(0) : range;\n-        blobRequestConditions = blobRequestConditions == null ? new BlobRequestConditions() : blobRequestConditions;\n-\n-        return storageBlobServiceClient.downloadWithRestResponse(containerName,\n-            blobName,\n-            snapshot,\n-            timeout,\n-            range.toHeaderValue(),\n-            getRangeContentMd5,\n-            getRangeContentCrc64,\n-            blobRequestConditions,\n-            cpkInfo,\n-            cancellationToken);\n-    }\n-\n-    /**\n-     * Creates a new block to be committed as part of a blob.\n-     *\n-     * @param containerName The container name.\n-     * @param blobName      The blob name.\n-     * @param base64BlockId A valid Base64 string value that identifies the block. Prior to encoding, the string must\n-     *                      be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n-     *                      for the base64BlockId parameter must be the same size for each block.\n-     * @param blockContent  The block content in bytes.\n-     * @param contentMd5    The transactional MD5 for the body, to be validated by the service.\n-     */\n-    public Void stageBlock(String containerName,\n-                           String blobName,\n-                           String base64BlockId,\n-                           byte[] blockContent,\n-                           byte[] contentMd5) {\n-        return this.storageBlobServiceClient.stageBlock(containerName,\n-            blobName,\n-            base64BlockId,\n-            blockContent,\n-            contentMd5);\n-    }\n-\n-    /**\n-     * Creates a new block to be committed as part of a blob.\n-     *\n-     * @param containerName     The container name.\n-     * @param blobName          The blob name.\n-     * @param base64BlockId     A valid Base64 string value that identifies the block. Prior to encoding, the string must\n-     *                          be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n-     *                          for the base64BlockId parameter must be the same size for each block.\n-     * @param blockContent      The block content in bytes.\n-     * @param contentMd5        The transactional MD5 for the block content, to be validated by the service.\n-     * @param contentCrc64      Specify the transactional crc64 for the block content, to be validated by the service.\n-     * @param computeMd5        Whether or not the library should calculate the md5 and send it for the service to verify.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information,\n-     *                          see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param leaseId           If specified, the staging only succeeds if the resource's lease is active and matches this ID.\n-     * @param cpkInfo           Additional parameters for the operation.\n-     * @param cancellationToken The token to request cancellation.\n-     * @return The response object.\n-     */\n-    public BlockBlobsStageBlockResponse stageBlockWithRestResponse(String containerName,\n-                                                                   String blobName,\n-                                                                   String base64BlockId,\n-                                                                   byte[] blockContent,\n-                                                                   byte[] contentMd5,\n-                                                                   byte[] contentCrc64,\n-                                                                   Boolean computeMd5,\n-                                                                   Integer timeout,\n-                                                                   String leaseId,\n-                                                                   CpkInfo cpkInfo,\n-                                                                   CancellationToken cancellationToken) {\n-        return this.storageBlobServiceClient.stageBlockWithRestResponse(containerName,\n-            blobName,\n-            base64BlockId,\n-            blockContent,\n-            contentMd5,\n-            contentCrc64,\n-            computeMd5,\n-            timeout,\n-            leaseId,\n-            cpkInfo,\n-            cancellationToken);\n-    }\n-\n-    /**\n-     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob.\n-     * For a block to be written as part of a blob, the block must have been successfully written to the server in a prior\n-     * {@link StorageBlobClient#stageBlock(String, String, String, byte[], byte[])} operation. You can call commit Block List\n-     * to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together.\n-     * You can do this by specifying whether to commit a block from the committed block list or from the uncommitted block list,\n-     * or to commit the most recently uploaded version of the block, whichever list it may belong to.\n-     *\n-     * @param containerName  The container name.\n-     * @param blobName       The blob name.\n-     * @param base64BlockIds The block IDs.\n-     * @param overwrite      Indicate whether to overwrite the block list if already exists.\n-     * @return The properties of the block blob\n-     */\n-    public BlockBlobItem commitBlockList(String containerName,\n-                                         String blobName,\n-                                         List<String> base64BlockIds,\n-                                         boolean overwrite) {\n-        return this.storageBlobServiceClient.commitBlockList(containerName,\n-            blobName,\n-            base64BlockIds,\n-            overwrite);\n-    }\n-\n-    /**\n-     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob.\n-     * For a block to be written as part of a blob, the block must have been successfully written to the server in a prior\n-     * {@link StorageBlobClient#stageBlock(String, String, String, byte[], byte[])} operation. You can call commit Block List\n-     * to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together.\n-     * You can do this by specifying whether to commit a block from the committed block list or from the uncommitted block list,\n-     * or to commit the most recently uploaded version of the block, whichever list it may belong to.\n-     *\n-     * @param containerName     The container name.\n-     * @param blobName          The blob name.\n-     * @param base64BlockIds    The block IDs.\n-     * @param contentMD5        Specify the transactional md5 for the body, to be validated by the service.\n-     * @param contentCrc64      Specify the transactional crc64 for the body, to be validated by the service.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information,\n-     *                          see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param blobHttpHeaders   Additional Http headers for this operation.\n-     * @param metadata          Specifies a user-defined name-value pair associated with the blob.\n-     * @param requestConditions {@link BlobRequestConditions}.\n-     * @param cpkInfo           Additional parameters for the operation.\n-     * @param tier              Indicates the tier to be set on the blob.\n-     * @param cancellationToken The token to request cancellation.\n-     * @return The response object.\n-     */\n-    public BlockBlobsCommitBlockListResponse commitBlockListWithRestResponse(String containerName,\n-                                                                             String blobName,\n-                                                                             List<String> base64BlockIds,\n-                                                                             byte[] contentMD5,\n-                                                                             byte[] contentCrc64,\n-                                                                             Integer timeout,\n-                                                                             BlobHttpHeaders blobHttpHeaders,\n-                                                                             Map<String, String> metadata,\n-                                                                             BlobRequestConditions requestConditions,\n-                                                                             CpkInfo cpkInfo,\n-                                                                             AccessTier tier,\n-                                                                             CancellationToken cancellationToken) {\n-        return this.storageBlobServiceClient.commitBlockListWithRestResponse(containerName,\n-            blobName,\n-            base64BlockIds,\n-            contentMD5,\n-            contentCrc64,\n-            timeout,\n-            blobHttpHeaders,\n-            metadata,\n-            requestConditions,\n-            cpkInfo,\n-            tier,\n-            cancellationToken);\n-    }\n-\n-    /**\n-     * Deletes the specified blob or snapshot. Note that deleting a blob also deletes all its snapshots.\n-     *\n-     * @param containerName The container name.\n-     * @param blobName      The blob name.\n-     */\n-    public Void deleteBlob(String containerName,\n-                           String blobName) {\n-        return storageBlobServiceClient.deleteBlob(containerName,\n-            blobName);\n-    }\n-\n-    /**\n-     * Deletes the specified blob or snapshot. Note that deleting a blob also deletes all its snapshots.\n-     * <p>\n-     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n-     * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n-     * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n-     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of\n-     * &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties\"&gt; Storage service properties.&lt;/a&gt;.\n-     * After the specified number of days has passed, the blob's data is permanently removed from the storage account.\n-     * Note that you continue to be charged for the soft-deleted blob's storage until it is permanently removed. Use\n-     * the List Blobs API and specify the \"include=deleted\" query parameter to discover which blobs and snapshots\n-     * have been soft deleted. You can then use the Undelete Blob API to restore a soft-deleted blob. All other\n-     * operations on a soft-deleted blob or snapshot causes the service to return an HTTP status code of 404\n-     * (ResourceNotFound). If the storage account's automatic snapshot feature is enabled, then, when a blob is\n-     * deleted, an automatic snapshot is created. The blob becomes inaccessible immediately. All other operations on\n-     * the blob causes the service to return an HTTP status code of 404 (ResourceNotFound). You can access automatic\n-     * snapshot using snapshot timestamp or version ID. You can restore the blob by calling Put or Copy Blob API with\n-     * automatic snapshot as source. Deleting automatic snapshot requires shared key or special SAS/RBAC permissions.\n-     *\n-     * @param containerName     The container name.\n-     * @param blobName          The blob name.\n-     * @param snapshot          The snapshot parameter is an opaque DateTime value that, when present, specifies the\n-     *                          blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n-     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param deleteSnapshots   Required if the blob has associated snapshots. Specify one of the following two\n-     *                          options: include: Delete the base blob and all of its snapshots. only: Delete only the blob's snapshots and not the blob itself. Possible values include: 'include', 'only'.\n-     * @param requestConditions {@link BlobRequestConditions}\n-     * @param cancellationToken The token to request cancellation.\n-     * @return A response object containing the details of the delete operation.\n-     */\n-    public BlobDeleteResponse deleteBlobWithRestResponse(String containerName,\n-                                                         String blobName,\n-                                                         String snapshot,\n-                                                         Integer timeout,\n-                                                         DeleteSnapshotsOptionType deleteSnapshots,\n-                                                         BlobRequestConditions requestConditions,\n-                                                         CancellationToken cancellationToken) {\n-        return storageBlobServiceClient.deleteBlobWithRestResponse(containerName,\n-            blobName,\n-            snapshot,\n-            timeout,\n-            deleteSnapshots,\n-            requestConditions,\n-            cancellationToken);\n-    }\n-\n-    /**\n-     * Gets tags associated with a blob.\n-     *\n-     * @param containerName The container name.\n-     * @param blobName      The blob name.\n-     * @return The blob's tags.\n-     */\n-    public Map<String, String> getBlobTags(String containerName,\n-                                           String blobName) {\n-        BlobTags response = this.storageBlobServiceClient.getTags(containerName,\n-            blobName);\n-        return ModelHelper.populateBlobTags(response);\n-    }\n-\n-    /**\n-     * Gets tags associated with a blob.\n-     *\n-     * @param containerName     The container name.\n-     * @param blobName          The blob name.\n-     * @param snapshot          The snapshot parameter is an opaque DateTime value that, when present, specifies the\n-     *                          blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n-     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param cancellationToken The token to request cancellation.\n-     * @return A response object containing the blob's tags.\n-     */\n-    public Response<Map<String, String>> getBlobTagsWithRestResponse(String containerName,\n-                                                                     String blobName,\n-                                                                     String snapshot,\n-                                                                     Integer timeout,\n-                                                                     String tagsConditions,\n-                                                                     CancellationToken cancellationToken) {\n-        BlobGetTagsResponse response = this.storageBlobServiceClient.getTagsWithRestResponse(containerName,\n-            blobName,\n-            snapshot,\n-            null, /* TODO (gapra) : Add in support when we set version to STG73 */\n-            timeout,\n-            tagsConditions,\n-            cancellationToken);\n-\n-        return new Response<>(null,\n-            response.getStatusCode(),\n-            response.getHeaders(),\n-            ModelHelper.populateBlobTags(response.getValue()));\n-    }\n-\n-    /**\n-     * Changes a blob's tags. The specified tags in this method will replace existing tags. If old values\n-     * must be preserved, they must be downloaded and included in the call to this method.\n-     *\n-     * @param containerName The container name.\n-     * @param blobName      The blob name.\n-     * @param tags          Tags to associate with the blob.\n-     */\n-    public Void setBlobTags(String containerName,\n-                            String blobName,\n-                            Map<String, String> tags) {\n-        return storageBlobServiceClient.setBlobTags(containerName, blobName, tags);\n-    }\n-\n-    /**\n-     * Changes a blob's tags. The specified tags in this method will replace existing tags. If old values\n-     * must be preserved, they must be downloaded and included in the call to this method.\n-     *\n-     * @param containerName     The container name.\n-     * @param blobName          The blob name.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n-     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param tagsConditions            Specifies a SQL query to apply to the blob's tags.\n-     * @param tags              Tags to associate with the blob.\n-     * @param cancellationToken The token to request cancellation.\n-     */\n-    public BlobSetTagsResponse setBlobTagsWithResponse(String containerName,\n-                                                       String blobName,\n-                                                       Integer timeout,\n-                                                       String tagsConditions, /*TODO: Should this be BlobRequestConditions? */\n-                                                       Map<String, String> tags,\n-                                                       CancellationToken cancellationToken) {\n-        return storageBlobServiceClient.setBlobTagsWithRestResponse(containerName,\n-            blobName,\n-            timeout,\n-            null, // TODO: Add back with versioning support\n-            tagsConditions,\n-            tags,\n-            cancellationToken);\n-    }\n-\n-    /**\n-     * Builder for {@link StorageBlobClient}.\n-     * A builder to configure and build a {@link StorageBlobClient}.\n-     */\n-    public static class Builder {\n-        private final ServiceClient.Builder serviceClientBuilder;\n-        private BlobServiceVersion serviceVersion;\n-\n-        /**\n-         * Creates a {@link Builder}.\n-         */\n-        public Builder() {\n-            this(new ServiceClient.Builder());\n-            addStandardInterceptors();\n-        }\n-\n-        /**\n-         * Creates a {@link Builder} that uses the provided {@link com.azure.android.core.http.ServiceClient.Builder}\n-         * to build a {@link ServiceClient} for the {@link StorageBlobClient}.\n-         *\n-         * <p>\n-         * The builder produced {@link ServiceClient} is used by the {@link StorageBlobClient} to make Rest API calls.\n-         * Multiple {@link StorageBlobClient} instances can share the same {@link ServiceClient} instance, for e.g.\n-         * when a new {@link StorageBlobClient} is created from an existing {@link StorageBlobClient} through\n-         * {@link StorageBlobClient#newBuilder()} ()} then both shares the same {@link ServiceClient}.\n-         * The {@link ServiceClient} composes HttpClient, HTTP settings (such as connection timeout, interceptors)\n-         * and Retrofit for Rest calls.\n-         *\n-         * @param serviceClientBuilder The {@link com.azure.android.core.http.ServiceClient.Builder}.\n-         */\n-        public Builder(ServiceClient.Builder serviceClientBuilder) {\n-            this.serviceClientBuilder\n-                = Objects.requireNonNull(serviceClientBuilder, \"serviceClientBuilder cannot be null.\");\n-            addStandardInterceptors();\n-        }\n-\n-        private void addStandardInterceptors() {\n-            this.serviceClientBuilder\n-                .addInterceptor(new RequestIdInterceptor())\n-                .addInterceptor(new AddDateInterceptor())\n-                .addInterceptor(new MetadataInterceptor())\n-                .addInterceptor(new NormalizeEtagInterceptor());\n-            //.addInterceptor(new ResponseHeadersValidationInterceptor()); // TODO: Uncomment when we add a request id interceptor\n-        }\n-\n-        /**\n-         * Sets the base URL for the {@link StorageBlobClient}.\n-         *\n-         * @param blobServiceUrl The blob service base URL.\n-         * @return An updated {@link Builder} with the provided blob service URL set.\n-         */\n-        public Builder setBlobServiceUrl(String blobServiceUrl) {\n-            Objects.requireNonNull(blobServiceUrl, \"blobServiceUrl cannot be null.\");\n-            this.serviceClientBuilder.setBaseUrl(blobServiceUrl);\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the service version for the {@link StorageBlobClient}.\n-         *\n-         * @param serviceVersion {@link BlobServiceVersion}\n-         * @return An updated {@link StorageBlobClient.Builder} with the provided blob service version set.\n-         */\n-        public StorageBlobClient.Builder setServiceVersion(BlobServiceVersion serviceVersion) {\n-            this.serviceVersion = serviceVersion;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets an interceptor used to authenticate the blob service request.\n-         *\n-         * @param credentialInterceptor The credential interceptor.\n-         * @return An updated {@link Builder} with the provided credentials interceptor set.\n-         */\n-        public Builder setCredentialInterceptor(Interceptor credentialInterceptor) {\n-            this.serviceClientBuilder.setCredentialsInterceptor(credentialInterceptor);\n-            return this;\n-        }\n-\n-        /**\n-         * Builds a {@link StorageBlobClient} based on this {@link Builder}'s configuration.\n-         *\n-         * @return A {@link StorageBlobClient}.\n-         */\n-        public StorageBlobClient build() {\n-            BlobServiceVersion version = this.serviceVersion == null ? BlobServiceVersion.getLatest()\n-                : this.serviceVersion;\n-            StorageBlobClient client = new StorageBlobClient(this.serviceClientBuilder.build(), version.getVersion());\n-            return client;\n-        }\n-\n-        private Builder(final StorageBlobClient storageBlobClient) {\n-            this(storageBlobClient.serviceClient.newBuilder());\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex e48fa785c..ad4fe537b 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n", "chunk": "@@ -592,12 +579,8 @@ public class StorageBlobClient {\n             snapshot,\n             timeout,\n             version,\n-            leaseId,\n             deleteSnapshots,\n-            ifModifiedSince,\n-            ifUnmodifiedSince,\n-            ifMatch,\n-            ifNoneMatch,\n+            requestConditions,\n             requestId,\n             cancellationToken);\n     }\n", "next_change": {"commit": "0ef4de95021f90c07c3e888cd740592cf7e924c4", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex ad4fe537b..a637e0f0d 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n", "chunk": "@@ -560,28 +659,22 @@ public class StorageBlobClient {\n      * @param deleteSnapshots   Required if the blob has associated snapshots. Specify one of the following two\n      *                          options: include: Delete the base blob and all of its snapshots. only: Delete only the blob's snapshots and not the blob itself. Possible values include: 'include', 'only'.\n      * @param requestConditions {@link BlobRequestConditions}\n-     * @param requestId         Provides a client-generated, opaque value with a 1 KB character limit that is\n-     *                          recorded in the analytics logs when storage analytics logging is enabled.\n      * @param cancellationToken The token to request cancellation.\n      * @return A response object containing the details of the delete operation.\n      */\n-    BlobDeleteResponse deleteBlobWithRestResponse(String containerName,\n-                                                  String blobName,\n-                                                  String snapshot,\n-                                                  Integer timeout,\n-                                                  String version,\n-                                                  DeleteSnapshotsOptionType deleteSnapshots,\n-                                                  BlobRequestConditions requestConditions,\n-                                                  String requestId,\n-                                                  CancellationToken cancellationToken) {\n+    public BlobDeleteResponse deleteBlobWithRestResponse(String containerName,\n+                                                         String blobName,\n+                                                         String snapshot,\n+                                                         Integer timeout,\n+                                                         DeleteSnapshotsOptionType deleteSnapshots,\n+                                                         BlobRequestConditions requestConditions,\n+                                                         CancellationToken cancellationToken) {\n         return storageBlobServiceClient.deleteBlobWithRestResponse(containerName,\n             blobName,\n             snapshot,\n             timeout,\n-            version,\n             deleteSnapshots,\n             requestConditions,\n-            requestId,\n             cancellationToken);\n     }\n \n", "next_change": {"commit": "9b6d9b14ba73b7e51adf0daa17a4f8995fc5b8fc", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex a637e0f0d..e664d941a 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n", "chunk": "@@ -678,35 +697,6 @@ public class StorageBlobClient {\n             cancellationToken);\n     }\n \n-    /**\n-     * Deletes a container.\n-     *\n-     * @param containerName The container name.\n-     */\n-    public Void deleteContainer(String containerName) {\n-        return storageBlobServiceClient.deleteContainer(containerName);\n-    }\n-\n-    /**\n-     * Deletes a container\n-     *\n-     * @param containerName     The container name.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n-     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param requestConditions {@link BlobRequestConditions}\n-     * @param cancellationToken The token to request cancellation.\n-     * @return A response object containing the details of the delete operation.\n-     */\n-    public ContainerDeleteResponse deleteContainerWithRestResponse(String containerName,\n-                                                                   Integer timeout,\n-                                                                   BlobRequestConditions requestConditions,\n-                                                                   CancellationToken cancellationToken) {\n-        return storageBlobServiceClient.deleteContainerWithRestResponse(containerName,\n-            timeout,\n-            requestConditions,\n-            cancellationToken);\n-    }\n-\n     /**\n      * Gets tags associated with a blob.\n      *\n", "next_change": {"commit": "927088035fe49832bd9f9c35bcd3a920e9148b8c", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\ndeleted file mode 100644\nindex e664d941a..000000000\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ /dev/null\n", "chunk": "@@ -1,882 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.android.storage.blob;\n-\n-import android.content.Context;\n-import android.net.Uri;\n-\n-import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-\n-import com.azure.android.core.http.Response;\n-import com.azure.android.core.http.ServiceClient;\n-import com.azure.android.core.http.interceptor.AddDateInterceptor;\n-import com.azure.android.core.http.interceptor.RequestIdInterceptor;\n-import com.azure.android.core.util.CancellationToken;\n-import com.azure.android.storage.blob.implementation.util.ModelHelper;\n-import com.azure.android.storage.blob.interceptor.MetadataInterceptor;\n-import com.azure.android.storage.blob.interceptor.NormalizeEtagInterceptor;\n-import com.azure.android.storage.blob.models.AccessTier;\n-import com.azure.android.storage.blob.models.BlobDeleteResponse;\n-import com.azure.android.storage.blob.models.BlobDownloadResponse;\n-import com.azure.android.storage.blob.models.BlobGetPropertiesHeaders;\n-import com.azure.android.storage.blob.models.BlobGetPropertiesResponse;\n-import com.azure.android.storage.blob.models.BlobGetTagsResponse;\n-import com.azure.android.storage.blob.models.BlobHttpHeaders;\n-import com.azure.android.storage.blob.models.BlobItem;\n-import com.azure.android.storage.blob.models.BlobRange;\n-import com.azure.android.storage.blob.models.BlobRequestConditions;\n-import com.azure.android.storage.blob.models.BlobSetHttpHeadersResponse;\n-import com.azure.android.storage.blob.models.BlobSetMetadataResponse;\n-import com.azure.android.storage.blob.models.BlobSetTagsResponse;\n-import com.azure.android.storage.blob.models.BlobSetTierResponse;\n-import com.azure.android.storage.blob.models.BlobTags;\n-import com.azure.android.storage.blob.models.BlobsPage;\n-import com.azure.android.storage.blob.models.BlockBlobItem;\n-import com.azure.android.storage.blob.models.BlockBlobsCommitBlockListResponse;\n-import com.azure.android.storage.blob.models.BlockBlobsStageBlockResponse;\n-import com.azure.android.storage.blob.models.ContainerCreateResponse;\n-import com.azure.android.storage.blob.models.ContainerDeleteResponse;\n-import com.azure.android.storage.blob.models.ContainerGetPropertiesHeaders;\n-import com.azure.android.storage.blob.models.ContainerGetPropertiesResponse;\n-import com.azure.android.storage.blob.models.ContainersListBlobFlatSegmentResponse;\n-import com.azure.android.storage.blob.models.CpkInfo;\n-import com.azure.android.storage.blob.models.DeleteSnapshotsOptionType;\n-import com.azure.android.storage.blob.models.ListBlobsFlatSegmentResponse;\n-import com.azure.android.storage.blob.models.ListBlobsIncludeItem;\n-import com.azure.android.storage.blob.models.ListBlobsOptions;\n-import com.azure.android.storage.blob.models.RehydratePriority;\n-import com.azure.android.storage.blob.options.ContainerCreateOptions;\n-import com.azure.android.storage.blob.options.ContainerDeleteOptions;\n-import com.azure.android.storage.blob.options.ContainerGetPropertiesOptions;\n-\n-import java.io.File;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-\n-import okhttp3.Interceptor;\n-import okhttp3.ResponseBody;\n-\n-/**\n- * Client for Storage Blob service.\n- *\n- * <p>\n- * This client is instantiated through {@link StorageBlobClient.Builder}.\n- */\n-public class StorageBlobClient {\n-    private final ServiceClient serviceClient;\n-    private final StorageBlobServiceImpl storageBlobServiceClient;\n-\n-    private StorageBlobClient(ServiceClient serviceClient, String serviceVersion) {\n-        this.serviceClient = serviceClient;\n-        this.storageBlobServiceClient = new StorageBlobServiceImpl(this.serviceClient, serviceVersion);\n-    }\n-\n-    /**\n-     * Creates a new {@link Builder} with initial configuration copied from this {@link StorageBlobClient}\n-     *\n-     * @return A new {@link Builder}.\n-     */\n-    public StorageBlobClient.Builder newBuilder() {\n-        return new Builder(this);\n-    }\n-\n-    /**\n-     * Gets the blob service base URL.\n-     *\n-     * @return The blob service base URL.\n-     */\n-    public String getBlobServiceUrl() {\n-        return this.serviceClient.getBaseUrl();\n-    }\n-\n-    /**\n-     * Creates a new container within a storage account. If a container with the same name already exists, the operation\n-     * fails.\n-     * For more information, see the <a href=\"https://docs.microsoft.com/rest/api/storageservices/create-container\">Azure Docs</a>.\n-     *\n-     * @param containerName The container name.\n-     */\n-    @Nullable\n-    public Void createContainer(@NonNull String containerName) {\n-        return this.createContainerWithResponse(new ContainerCreateOptions(containerName)).getValue();\n-    }\n-\n-    /**\n-     * Creates a new container within a storage account. If a container with the same name already exists, the operation\n-     * fails.\n-     * For more information, see the <a href=\"https://docs.microsoft.com/rest/api/storageservices/create-container\">Azure Docs</a>.\n-     *\n-     * @param options {@link ContainerCreateOptions}\n-     * @return The response information returned from the server when creating a container.\n-     */\n-    @NonNull\n-    public ContainerCreateResponse createContainerWithResponse(@NonNull ContainerCreateOptions options) {\n-        Objects.requireNonNull(options);\n-        return storageBlobServiceClient.createContainerWithRestResponse(options.getContainerName(),\n-            options.getTimeout(), options.getMetadata(), options.getPublicAccessType(), options.getCancellationToken());\n-    }\n-\n-    /**\n-     * Marks the specified container for deletion. The container and any blobs contained within it are later deleted\n-     * during garbage collection. For more information, see the\n-     * <a href=\"https://docs.microsoft.com/rest/api/storageservices/delete-container\">Azure Docs</a>.\n-     *\n-     * @param containerName The container name.\n-     */\n-    @Nullable\n-    public Void deleteContainer(@NonNull String containerName) {\n-        return this.deleteContainerWithResponse(new ContainerDeleteOptions(containerName)).getValue();\n-    }\n-\n-    /**\n-     * Marks the specified container for deletion. The container and any blobs contained within it are later deleted\n-     * during garbage collection. For more information, see the\n-     * <a href=\"https://docs.microsoft.com/rest/api/storageservices/delete-container\">Azure Docs</a>.\n-     *\n-     * @param options {@link ContainerDeleteOptions}\n-     * @return The response information returned from the server when deleting a container.\n-     */\n-    @NonNull\n-    public ContainerDeleteResponse deleteContainerWithResponse(@NonNull ContainerDeleteOptions options) {\n-        Objects.requireNonNull(options);\n-        ModelHelper.validateRequestConditions(options.getRequestConditions(), false, true, true, false);\n-        return storageBlobServiceClient.deleteContainerWithRestResponse(options.getContainerName(),\n-            options.getTimeout(), options.getRequestConditions(), options.getCancellationToken());\n-    }\n-\n-    /**\n-     * Returns the container's metadata and system properties. For more information, see the\n-     * <a href=\"https://docs.microsoft.com/rest/api/storageservices/get-container-metadata\">Azure Docs</a>.\n-     *\n-     * @param containerName The container name.\n-     * @return The container's properties.\n-     */\n-    /* TODO: (gapra) This should probably return a handwrapped type? */\n-    @NonNull\n-    public ContainerGetPropertiesHeaders getContainerProperties(@NonNull String containerName) {\n-        return this.getContainerPropertiesWithResponse(new ContainerGetPropertiesOptions(containerName)).getDeserializedHeaders();\n-    }\n-\n-    /**\n-     * Returns the container's metadata and system properties. For more information, see the\n-     * <a href=\"https://docs.microsoft.com/rest/api/storageservices/get-container-metadata\">Azure Docs</a>.\n-     *\n-     * @param options {@link ContainerGetPropertiesOptions}\n-     * @return The response information returned from the server when getting a container's properties.\n-     */\n-    @NonNull\n-    public ContainerGetPropertiesResponse getContainerPropertiesWithResponse(@NonNull ContainerGetPropertiesOptions options) {\n-        Objects.requireNonNull(options);\n-        ModelHelper.validateRequestConditions(options.getRequestConditions(), false, false, true, false);\n-        BlobRequestConditions requestConditions = options.getRequestConditions() == null ? new BlobRequestConditions()\n-            : options.getRequestConditions();\n-\n-        return storageBlobServiceClient.getContainerPropertiesWithResponse(options.getContainerName(),\n-            options.getTimeout(), requestConditions.getLeaseId(), options.getCancellationToken());\n-    }\n-\n-    /**\n-     * Gets a list of blobs identified by a page id in a given container.\n-     *\n-     * @param pageId        Identifies the portion of the list to be returned.\n-     * @param containerName The container name.\n-     * @param options       The page options.\n-     * @return A list of blobs.\n-     */\n-    public BlobsPage getBlobsInPage(String pageId,\n-                                    String containerName,\n-                                    ListBlobsOptions options) {\n-        ListBlobsFlatSegmentResponse result = this.storageBlobServiceClient.listBlobFlatSegment(pageId,\n-            containerName, options);\n-\n-        final List<BlobItem> list;\n-        if (result.getSegment() != null\n-            && result.getSegment().getBlobItems() != null) {\n-            list = result.getSegment().getBlobItems();\n-        } else {\n-            list = new ArrayList<>(0);\n-        }\n-        return new BlobsPage(list, pageId, result.getNextMarker());\n-    }\n-\n-    /**\n-     * Gets a list of blobs identified by a page id in a given container.\n-     *\n-     * @param pageId            Identifies the portion of the list to be returned.\n-     * @param containerName     The container name.\n-     * @param prefix            Filters the results to return only blobs whose name begins with the specified prefix.\n-     * @param maxResults        Specifies the maximum number of blobs to return.\n-     * @param include           Include this parameter to specify one or more datasets to include in the response.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n-     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param cancellationToken The token to request cancellation.\n-     * @return A response object containing a list of blobs.\n-     */\n-    public Response<BlobsPage> getBlobsInPageWithRestResponse(String pageId,\n-                                                              String containerName,\n-                                                              String prefix,\n-                                                              Integer maxResults,\n-                                                              List<ListBlobsIncludeItem> include,\n-                                                              Integer timeout,\n-                                                              CancellationToken cancellationToken) {\n-        ContainersListBlobFlatSegmentResponse result\n-            = this.storageBlobServiceClient.listBlobFlatSegmentWithRestResponse(pageId,\n-            containerName,\n-            prefix,\n-            maxResults,\n-            include,\n-            timeout,\n-            cancellationToken);\n-        final List<BlobItem> list;\n-        if (result.getValue().getSegment() != null\n-            && result.getValue().getSegment().getBlobItems() != null) {\n-            list = result.getValue().getSegment().getBlobItems();\n-        } else {\n-            list = new ArrayList<>(0);\n-        }\n-        BlobsPage blobsPage = new BlobsPage(list, pageId, result.getValue().getNextMarker());\n-\n-        return new Response<>(null,\n-            result.getStatusCode(),\n-            result.getHeaders(),\n-            blobsPage);\n-    }\n-\n-    /**\n-     * Reads the blob's metadata and properties.\n-     *\n-     * @param containerName The container name.\n-     * @param blobName      The blob name.\n-     * @return The blob's metadata and properties\n-     */\n-    public BlobGetPropertiesHeaders getBlobProperties(String containerName,\n-                                                      String blobName) {\n-        return storageBlobServiceClient.getBlobProperties(containerName, blobName);\n-    }\n-\n-    /**\n-     * Reads a blob's metadata and properties.\n-     *\n-     * @param containerName         The container name.\n-     * @param blobName              The blob name.\n-     * @param snapshot              The snapshot parameter is an opaque DateTime value that, when present, specifies\n-     *                              the blob snapshot to retrieve. For more information on working with blob snapshots,\n-     *                              see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n-     * @param timeout               The timeout parameter is expressed in seconds. For more information, see\n-     *                              &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param blobRequestConditions Object that contains values which will restrict the successful operation of a\n-     *                              variety of requests to the conditions present. These conditions are entirely\n-     *                              optional.\n-     * @param cpkInfo               Additional parameters for the operation.\n-     * @param cancellationToken     The token to request cancellation.\n-     * @return The response information returned from the server when downloading a blob.\n-     */\n-    public BlobGetPropertiesResponse getBlobPropertiesWithRestResponse(String containerName,\n-                                                                       String blobName,\n-                                                                       String snapshot,\n-                                                                       Integer timeout,\n-                                                                       BlobRequestConditions blobRequestConditions,\n-                                                                       CpkInfo cpkInfo,\n-                                                                       CancellationToken cancellationToken) {\n-        return storageBlobServiceClient.getBlobPropertiesWithRestResponse(containerName,\n-            blobName,\n-            snapshot,\n-            timeout,\n-            blobRequestConditions,\n-            cpkInfo,\n-            cancellationToken);\n-    }\n-\n-    /**\n-     * Changes a blob's HTTP header properties. If only one HTTP header is updated, the others will all be erased. In\n-     * order to preserve existing values, they must be passed alongside the header being changed.\n-     *\n-     * @param containerName The container name.\n-     * @param blobName      The blob name.\n-     * @param headers       {@link BlobHttpHeaders}\n-     */\n-    public Void setBlobHttpHeaders(String containerName,\n-                                   String blobName,\n-                                   BlobHttpHeaders headers) {\n-        return storageBlobServiceClient.setBlobHttpHeaders(containerName, blobName, headers);\n-    }\n-\n-    /**\n-     * Changes a blob's HTTP header properties. If only one HTTP header is updated, the others will all be erased. In\n-     * order to preserve existing values, they must be passed alongside the header being changed.\n-     *\n-     * @param containerName     The container name.\n-     * @param blobName          The blob name.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n-     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param requestConditions {@link BlobRequestConditions}\n-     * @param headers           {@link BlobHttpHeaders}\n-     * @param cancellationToken The token to request cancellation.\n-     * @return The response object.\n-     */\n-    public BlobSetHttpHeadersResponse setBlobHttpHeadersWithResponse(String containerName,\n-                                                                     String blobName,\n-                                                                     Integer timeout,\n-                                                                     BlobRequestConditions requestConditions,\n-                                                                     BlobHttpHeaders headers,\n-                                                                     CancellationToken cancellationToken) {\n-        return storageBlobServiceClient.setBlobHttpHeadersWithRestResponse(containerName,\n-            blobName,\n-            timeout,\n-            requestConditions,\n-            headers,\n-            cancellationToken);\n-    }\n-\n-    /**\n-     * Changes a blob's metadata. The specified metadata in this method will replace existing metadata. If old values\n-     * must be preserved, they must be downloaded and included in the call to this method.\n-     *\n-     * @param containerName The container name.\n-     * @param blobName      The blob name.\n-     * @param metadata      Metadata to associate with the blob.\n-     */\n-    public Void setBlobMetadata(String containerName,\n-                                String blobName,\n-                                Map<String, String> metadata) {\n-        return storageBlobServiceClient.setBlobMetadata(containerName, blobName, metadata);\n-    }\n-\n-    /**\n-     * Changes a blob's metadata. The specified metadata in this method will replace existing metadata. If old values\n-     * must be preserved, they must be downloaded and included in the call to this method.\n-     *\n-     * @param containerName     The container name.\n-     * @param blobName          The blob name.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n-     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param requestConditions {@link BlobRequestConditions}\n-     * @param metadata          Metadata to associate with the blob.\n-     * @param cpkInfo           Additional parameters for the operation.\n-     * @param cancellationToken The token to request cancellation.\n-     */\n-    public BlobSetMetadataResponse setBlobMetadataWithResponse(String containerName,\n-                                                               String blobName,\n-                                                               Integer timeout,\n-                                                               BlobRequestConditions requestConditions,\n-                                                               Map<String, String> metadata,\n-                                                               CpkInfo cpkInfo,\n-                                                               CancellationToken cancellationToken) {\n-        return storageBlobServiceClient.setBlobMetadataWithRestResponse(containerName,\n-            blobName,\n-            timeout,\n-            requestConditions,\n-            metadata,\n-            cpkInfo,\n-            cancellationToken);\n-    }\n-\n-    /**\n-     * Sets the blob's tier.\n-     *\n-     * @param containerName The container name.\n-     * @param blobName      The blob name.\n-     * @param tier          The access tier.\n-     */\n-    public Void setBlobTier(String containerName,\n-                            String blobName,\n-                            AccessTier tier) {\n-        return storageBlobServiceClient.setBlobTier(containerName, blobName, tier);\n-    }\n-\n-    /**\n-     * Sets the blob's tier.\n-     *\n-     * @param containerName     The container name.\n-     * @param blobName          The blob name.\n-     * @param tier              The access tier.\n-     * @param snapshot          The snapshot parameter is an opaque DateTime value that, when present, specifies\n-     *                          the blob snapshot to retrieve. For more information on working with blob snapshots,\n-     *                          see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n-     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param rehydratePriority The rehydrate priority.\n-     * @return The response information returned from the server when setting a blob's access tier.\n-     */\n-    public BlobSetTierResponse setBlobTierWithRestResponse(String containerName,\n-                                                           String blobName,\n-                                                           AccessTier tier,\n-                                                           String snapshot,\n-                                                           Integer timeout,\n-                                                           RehydratePriority rehydratePriority,\n-                                                           String leaseId,\n-                                                           String tagsConditions,\n-                                                           CancellationToken cancellationToken) {\n-\n-        return storageBlobServiceClient.setBlobTierWithRestResponse(containerName,\n-            blobName,\n-            tier,\n-            snapshot,\n-            null,  /* TODO: (gapra) Add version id when there is support for STG73 */\n-            timeout,\n-            rehydratePriority,\n-            leaseId,\n-            tagsConditions,\n-            cancellationToken);\n-    }\n-\n-    /**\n-     * Reads the entire blob.\n-     *\n-     * <p>\n-     * This method will execute a raw HTTP GET in order to download a single blob to the destination.\n-     * It is **STRONGLY** recommended that you use the {@link StorageBlobAsyncClient#download(Context, String, String, File)}\n-     * or {@link StorageBlobAsyncClient#download(Context, String, String, Uri)} method instead - that method will\n-     * manage the transfer in the face of changing network conditions, and is able to transfer multiple\n-     * blocks in parallel.\n-     * `\n-     *\n-     * @param containerName The container name.\n-     * @param blobName      The blob name.\n-     * @return The response containing the blob's bytes.\n-     */\n-    public ResponseBody rawDownload(String containerName,\n-                                    String blobName) {\n-        return storageBlobServiceClient.download(containerName,\n-            blobName);\n-    }\n-\n-    /**\n-     * Reads a range of bytes from a blob.\n-     *\n-     * <p>\n-     * This method will execute a raw HTTP GET in order to download a single blob to the destination.\n-     * It is **STRONGLY** recommended that you use the {@link StorageBlobAsyncClient#download(Context, String, String, File)}\n-     * or {@link StorageBlobAsyncClient#download(Context, String, String, Uri)} method instead - that method will\n-     * manage the transfer in the face of changing network conditions, and is able to transfer multiple\n-     * blocks in parallel.\n-     *\n-     * @param containerName         The container name.\n-     * @param blobName              The blob name.\n-     * @param snapshot              The snapshot parameter is an opaque DateTime value that, when present, specifies\n-     *                              the blob snapshot to retrieve. For more information on working with blob snapshots,\n-     *                              see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n-     * @param timeout               The timeout parameter is expressed in seconds. For more information, see\n-     *                              &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param range                 Return only the bytes of the blob in the specified range.\n-     * @param blobRequestConditions Object that contains values which will restrict the successful operation of a\n-     *                              variety of requests to the conditions present. These conditions are entirely\n-     *                              optional.\n-     * @param getRangeContentMd5    When set to true and specified together with the Range, the service returns the\n-     *                              MD5 hash for the range, as long as the range is less than or equal to 4 MB in size.\n-     * @param getRangeContentCrc64  When set to true and specified together with the Range, the service returns the\n-     *                              CRC64 hash for the range, as long as the range is less than or equal to 4 MB in size.\n-     * @param cpkInfo               Additional parameters for the operation.\n-     * @param cancellationToken     The token to request cancellation.\n-     * @return The response information returned from the server when downloading a blob.\n-     */\n-    public BlobDownloadResponse rawDownloadWithRestResponse(String containerName,\n-                                                            String blobName,\n-                                                            String snapshot,\n-                                                            Integer timeout,\n-                                                            BlobRange range,\n-                                                            BlobRequestConditions blobRequestConditions,\n-                                                            Boolean getRangeContentMd5,\n-                                                            Boolean getRangeContentCrc64,\n-                                                            CpkInfo cpkInfo,\n-                                                            CancellationToken cancellationToken) {\n-        range = range == null ? new BlobRange(0) : range;\n-        blobRequestConditions = blobRequestConditions == null ? new BlobRequestConditions() : blobRequestConditions;\n-\n-        return storageBlobServiceClient.downloadWithRestResponse(containerName,\n-            blobName,\n-            snapshot,\n-            timeout,\n-            range.toHeaderValue(),\n-            getRangeContentMd5,\n-            getRangeContentCrc64,\n-            blobRequestConditions,\n-            cpkInfo,\n-            cancellationToken);\n-    }\n-\n-    /**\n-     * Creates a new block to be committed as part of a blob.\n-     *\n-     * @param containerName The container name.\n-     * @param blobName      The blob name.\n-     * @param base64BlockId A valid Base64 string value that identifies the block. Prior to encoding, the string must\n-     *                      be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n-     *                      for the base64BlockId parameter must be the same size for each block.\n-     * @param blockContent  The block content in bytes.\n-     * @param contentMd5    The transactional MD5 for the body, to be validated by the service.\n-     */\n-    public Void stageBlock(String containerName,\n-                           String blobName,\n-                           String base64BlockId,\n-                           byte[] blockContent,\n-                           byte[] contentMd5) {\n-        return this.storageBlobServiceClient.stageBlock(containerName,\n-            blobName,\n-            base64BlockId,\n-            blockContent,\n-            contentMd5);\n-    }\n-\n-    /**\n-     * Creates a new block to be committed as part of a blob.\n-     *\n-     * @param containerName     The container name.\n-     * @param blobName          The blob name.\n-     * @param base64BlockId     A valid Base64 string value that identifies the block. Prior to encoding, the string must\n-     *                          be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n-     *                          for the base64BlockId parameter must be the same size for each block.\n-     * @param blockContent      The block content in bytes.\n-     * @param contentMd5        The transactional MD5 for the block content, to be validated by the service.\n-     * @param contentCrc64      Specify the transactional crc64 for the block content, to be validated by the service.\n-     * @param computeMd5        Whether or not the library should calculate the md5 and send it for the service to verify.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information,\n-     *                          see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param leaseId           If specified, the staging only succeeds if the resource's lease is active and matches this ID.\n-     * @param cpkInfo           Additional parameters for the operation.\n-     * @param cancellationToken The token to request cancellation.\n-     * @return The response object.\n-     */\n-    public BlockBlobsStageBlockResponse stageBlockWithRestResponse(String containerName,\n-                                                                   String blobName,\n-                                                                   String base64BlockId,\n-                                                                   byte[] blockContent,\n-                                                                   byte[] contentMd5,\n-                                                                   byte[] contentCrc64,\n-                                                                   Boolean computeMd5,\n-                                                                   Integer timeout,\n-                                                                   String leaseId,\n-                                                                   CpkInfo cpkInfo,\n-                                                                   CancellationToken cancellationToken) {\n-        return this.storageBlobServiceClient.stageBlockWithRestResponse(containerName,\n-            blobName,\n-            base64BlockId,\n-            blockContent,\n-            contentMd5,\n-            contentCrc64,\n-            computeMd5,\n-            timeout,\n-            leaseId,\n-            cpkInfo,\n-            cancellationToken);\n-    }\n-\n-    /**\n-     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob.\n-     * For a block to be written as part of a blob, the block must have been successfully written to the server in a prior\n-     * {@link StorageBlobClient#stageBlock(String, String, String, byte[], byte[])} operation. You can call commit Block List\n-     * to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together.\n-     * You can do this by specifying whether to commit a block from the committed block list or from the uncommitted block list,\n-     * or to commit the most recently uploaded version of the block, whichever list it may belong to.\n-     *\n-     * @param containerName  The container name.\n-     * @param blobName       The blob name.\n-     * @param base64BlockIds The block IDs.\n-     * @param overwrite      Indicate whether to overwrite the block list if already exists.\n-     * @return The properties of the block blob\n-     */\n-    public BlockBlobItem commitBlockList(String containerName,\n-                                         String blobName,\n-                                         List<String> base64BlockIds,\n-                                         boolean overwrite) {\n-        return this.storageBlobServiceClient.commitBlockList(containerName,\n-            blobName,\n-            base64BlockIds,\n-            overwrite);\n-    }\n-\n-    /**\n-     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob.\n-     * For a block to be written as part of a blob, the block must have been successfully written to the server in a prior\n-     * {@link StorageBlobClient#stageBlock(String, String, String, byte[], byte[])} operation. You can call commit Block List\n-     * to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together.\n-     * You can do this by specifying whether to commit a block from the committed block list or from the uncommitted block list,\n-     * or to commit the most recently uploaded version of the block, whichever list it may belong to.\n-     *\n-     * @param containerName     The container name.\n-     * @param blobName          The blob name.\n-     * @param base64BlockIds    The block IDs.\n-     * @param contentMD5        Specify the transactional md5 for the body, to be validated by the service.\n-     * @param contentCrc64      Specify the transactional crc64 for the body, to be validated by the service.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information,\n-     *                          see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param blobHttpHeaders   Additional Http headers for this operation.\n-     * @param metadata          Specifies a user-defined name-value pair associated with the blob.\n-     * @param requestConditions {@link BlobRequestConditions}.\n-     * @param cpkInfo           Additional parameters for the operation.\n-     * @param tier              Indicates the tier to be set on the blob.\n-     * @param cancellationToken The token to request cancellation.\n-     * @return The response object.\n-     */\n-    public BlockBlobsCommitBlockListResponse commitBlockListWithRestResponse(String containerName,\n-                                                                             String blobName,\n-                                                                             List<String> base64BlockIds,\n-                                                                             byte[] contentMD5,\n-                                                                             byte[] contentCrc64,\n-                                                                             Integer timeout,\n-                                                                             BlobHttpHeaders blobHttpHeaders,\n-                                                                             Map<String, String> metadata,\n-                                                                             BlobRequestConditions requestConditions,\n-                                                                             CpkInfo cpkInfo,\n-                                                                             AccessTier tier,\n-                                                                             CancellationToken cancellationToken) {\n-        return this.storageBlobServiceClient.commitBlockListWithRestResponse(containerName,\n-            blobName,\n-            base64BlockIds,\n-            contentMD5,\n-            contentCrc64,\n-            timeout,\n-            blobHttpHeaders,\n-            metadata,\n-            requestConditions,\n-            cpkInfo,\n-            tier,\n-            cancellationToken);\n-    }\n-\n-    /**\n-     * Deletes the specified blob or snapshot. Note that deleting a blob also deletes all its snapshots.\n-     *\n-     * @param containerName The container name.\n-     * @param blobName      The blob name.\n-     */\n-    public Void deleteBlob(String containerName,\n-                           String blobName) {\n-        return storageBlobServiceClient.deleteBlob(containerName,\n-            blobName);\n-    }\n-\n-    /**\n-     * Deletes the specified blob or snapshot. Note that deleting a blob also deletes all its snapshots.\n-     * <p>\n-     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n-     * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n-     * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n-     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of\n-     * &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties\"&gt; Storage service properties.&lt;/a&gt;.\n-     * After the specified number of days has passed, the blob's data is permanently removed from the storage account.\n-     * Note that you continue to be charged for the soft-deleted blob's storage until it is permanently removed. Use\n-     * the List Blobs API and specify the \"include=deleted\" query parameter to discover which blobs and snapshots\n-     * have been soft deleted. You can then use the Undelete Blob API to restore a soft-deleted blob. All other\n-     * operations on a soft-deleted blob or snapshot causes the service to return an HTTP status code of 404\n-     * (ResourceNotFound). If the storage account's automatic snapshot feature is enabled, then, when a blob is\n-     * deleted, an automatic snapshot is created. The blob becomes inaccessible immediately. All other operations on\n-     * the blob causes the service to return an HTTP status code of 404 (ResourceNotFound). You can access automatic\n-     * snapshot using snapshot timestamp or version ID. You can restore the blob by calling Put or Copy Blob API with\n-     * automatic snapshot as source. Deleting automatic snapshot requires shared key or special SAS/RBAC permissions.\n-     *\n-     * @param containerName     The container name.\n-     * @param blobName          The blob name.\n-     * @param snapshot          The snapshot parameter is an opaque DateTime value that, when present, specifies the\n-     *                          blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n-     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param deleteSnapshots   Required if the blob has associated snapshots. Specify one of the following two\n-     *                          options: include: Delete the base blob and all of its snapshots. only: Delete only the blob's snapshots and not the blob itself. Possible values include: 'include', 'only'.\n-     * @param requestConditions {@link BlobRequestConditions}\n-     * @param cancellationToken The token to request cancellation.\n-     * @return A response object containing the details of the delete operation.\n-     */\n-    public BlobDeleteResponse deleteBlobWithRestResponse(String containerName,\n-                                                         String blobName,\n-                                                         String snapshot,\n-                                                         Integer timeout,\n-                                                         DeleteSnapshotsOptionType deleteSnapshots,\n-                                                         BlobRequestConditions requestConditions,\n-                                                         CancellationToken cancellationToken) {\n-        return storageBlobServiceClient.deleteBlobWithRestResponse(containerName,\n-            blobName,\n-            snapshot,\n-            timeout,\n-            deleteSnapshots,\n-            requestConditions,\n-            cancellationToken);\n-    }\n-\n-    /**\n-     * Gets tags associated with a blob.\n-     *\n-     * @param containerName The container name.\n-     * @param blobName      The blob name.\n-     * @return The blob's tags.\n-     */\n-    public Map<String, String> getBlobTags(String containerName,\n-                                           String blobName) {\n-        BlobTags response = this.storageBlobServiceClient.getTags(containerName,\n-            blobName);\n-        return ModelHelper.populateBlobTags(response);\n-    }\n-\n-    /**\n-     * Gets tags associated with a blob.\n-     *\n-     * @param containerName     The container name.\n-     * @param blobName          The blob name.\n-     * @param snapshot          The snapshot parameter is an opaque DateTime value that, when present, specifies the\n-     *                          blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n-     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param cancellationToken The token to request cancellation.\n-     * @return A response object containing the blob's tags.\n-     */\n-    public Response<Map<String, String>> getBlobTagsWithRestResponse(String containerName,\n-                                                                     String blobName,\n-                                                                     String snapshot,\n-                                                                     Integer timeout,\n-                                                                     String tagsConditions,\n-                                                                     CancellationToken cancellationToken) {\n-        BlobGetTagsResponse response = this.storageBlobServiceClient.getTagsWithRestResponse(containerName,\n-            blobName,\n-            snapshot,\n-            null, /* TODO (gapra) : Add in support when we set version to STG73 */\n-            timeout,\n-            tagsConditions,\n-            cancellationToken);\n-\n-        return new Response<>(null,\n-            response.getStatusCode(),\n-            response.getHeaders(),\n-            ModelHelper.populateBlobTags(response.getValue()));\n-    }\n-\n-    /**\n-     * Changes a blob's tags. The specified tags in this method will replace existing tags. If old values\n-     * must be preserved, they must be downloaded and included in the call to this method.\n-     *\n-     * @param containerName The container name.\n-     * @param blobName      The blob name.\n-     * @param tags          Tags to associate with the blob.\n-     */\n-    public Void setBlobTags(String containerName,\n-                            String blobName,\n-                            Map<String, String> tags) {\n-        return storageBlobServiceClient.setBlobTags(containerName, blobName, tags);\n-    }\n-\n-    /**\n-     * Changes a blob's tags. The specified tags in this method will replace existing tags. If old values\n-     * must be preserved, they must be downloaded and included in the call to this method.\n-     *\n-     * @param containerName     The container name.\n-     * @param blobName          The blob name.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n-     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param tagsConditions            Specifies a SQL query to apply to the blob's tags.\n-     * @param tags              Tags to associate with the blob.\n-     * @param cancellationToken The token to request cancellation.\n-     */\n-    public BlobSetTagsResponse setBlobTagsWithResponse(String containerName,\n-                                                       String blobName,\n-                                                       Integer timeout,\n-                                                       String tagsConditions, /*TODO: Should this be BlobRequestConditions? */\n-                                                       Map<String, String> tags,\n-                                                       CancellationToken cancellationToken) {\n-        return storageBlobServiceClient.setBlobTagsWithRestResponse(containerName,\n-            blobName,\n-            timeout,\n-            null, // TODO: Add back with versioning support\n-            tagsConditions,\n-            tags,\n-            cancellationToken);\n-    }\n-\n-    /**\n-     * Builder for {@link StorageBlobClient}.\n-     * A builder to configure and build a {@link StorageBlobClient}.\n-     */\n-    public static class Builder {\n-        private final ServiceClient.Builder serviceClientBuilder;\n-        private BlobServiceVersion serviceVersion;\n-\n-        /**\n-         * Creates a {@link Builder}.\n-         */\n-        public Builder() {\n-            this(new ServiceClient.Builder());\n-            addStandardInterceptors();\n-        }\n-\n-        /**\n-         * Creates a {@link Builder} that uses the provided {@link com.azure.android.core.http.ServiceClient.Builder}\n-         * to build a {@link ServiceClient} for the {@link StorageBlobClient}.\n-         *\n-         * <p>\n-         * The builder produced {@link ServiceClient} is used by the {@link StorageBlobClient} to make Rest API calls.\n-         * Multiple {@link StorageBlobClient} instances can share the same {@link ServiceClient} instance, for e.g.\n-         * when a new {@link StorageBlobClient} is created from an existing {@link StorageBlobClient} through\n-         * {@link StorageBlobClient#newBuilder()} ()} then both shares the same {@link ServiceClient}.\n-         * The {@link ServiceClient} composes HttpClient, HTTP settings (such as connection timeout, interceptors)\n-         * and Retrofit for Rest calls.\n-         *\n-         * @param serviceClientBuilder The {@link com.azure.android.core.http.ServiceClient.Builder}.\n-         */\n-        public Builder(ServiceClient.Builder serviceClientBuilder) {\n-            this.serviceClientBuilder\n-                = Objects.requireNonNull(serviceClientBuilder, \"serviceClientBuilder cannot be null.\");\n-            addStandardInterceptors();\n-        }\n-\n-        private void addStandardInterceptors() {\n-            this.serviceClientBuilder\n-                .addInterceptor(new RequestIdInterceptor())\n-                .addInterceptor(new AddDateInterceptor())\n-                .addInterceptor(new MetadataInterceptor())\n-                .addInterceptor(new NormalizeEtagInterceptor());\n-            //.addInterceptor(new ResponseHeadersValidationInterceptor()); // TODO: Uncomment when we add a request id interceptor\n-        }\n-\n-        /**\n-         * Sets the base URL for the {@link StorageBlobClient}.\n-         *\n-         * @param blobServiceUrl The blob service base URL.\n-         * @return An updated {@link Builder} with the provided blob service URL set.\n-         */\n-        public Builder setBlobServiceUrl(String blobServiceUrl) {\n-            Objects.requireNonNull(blobServiceUrl, \"blobServiceUrl cannot be null.\");\n-            this.serviceClientBuilder.setBaseUrl(blobServiceUrl);\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the service version for the {@link StorageBlobClient}.\n-         *\n-         * @param serviceVersion {@link BlobServiceVersion}\n-         * @return An updated {@link StorageBlobClient.Builder} with the provided blob service version set.\n-         */\n-        public StorageBlobClient.Builder setServiceVersion(BlobServiceVersion serviceVersion) {\n-            this.serviceVersion = serviceVersion;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets an interceptor used to authenticate the blob service request.\n-         *\n-         * @param credentialInterceptor The credential interceptor.\n-         * @return An updated {@link Builder} with the provided credentials interceptor set.\n-         */\n-        public Builder setCredentialInterceptor(Interceptor credentialInterceptor) {\n-            this.serviceClientBuilder.setCredentialsInterceptor(credentialInterceptor);\n-            return this;\n-        }\n-\n-        /**\n-         * Builds a {@link StorageBlobClient} based on this {@link Builder}'s configuration.\n-         *\n-         * @return A {@link StorageBlobClient}.\n-         */\n-        public StorageBlobClient build() {\n-            BlobServiceVersion version = this.serviceVersion == null ? BlobServiceVersion.getLatest()\n-                : this.serviceVersion;\n-            StorageBlobClient client = new StorageBlobClient(this.serviceClientBuilder.build(), version.getVersion());\n-            return client;\n-        }\n-\n-        private Builder(final StorageBlobClient storageBlobClient) {\n-            this(storageBlobClient.serviceClient.newBuilder());\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "67604fcb40f08db095112565068ca48b3d449cc1", "message": "Merge commit", "committedDate": null}, {"oid": "213c93409759e10c597eef72b1fea28a3c6f8270", "committedDate": "2020-07-09 20:59:04 -0700", "message": "Enable CancellationToken support and Split Storage client to Sync and Async. (#252)"}, {"oid": "8c7babc862d9b9a81d57d98b31ae5e09702dbacf", "committedDate": "2020-09-15 12:03:24 -0700", "message": "Adding callbackWithHeader and updating callback signature to include Response (#340)"}, {"oid": "3db213ea82719d55d62a5afb0a2c410ce7937814", "committedDate": "2020-09-15 17:57:09 -0700", "message": "Remove leaking of SerializerAdapter (#344)"}, {"oid": "201afcb62cf1cf68af39751f8b8f302577e4542b", "committedDate": "2020-10-19 10:24:07 -0700", "message": "Create container (#399)"}, {"oid": "12928481c42f69581eb233d129a3770e739aeed2", "committedDate": "2020-10-19 16:24:36 -0700", "message": "Added Tests for Blobs (#407)"}, {"oid": "acb496d92626ea182ae766875fa7b5334b5ba25f", "committedDate": "2020-10-20 13:07:57 -0700", "message": "Added support to set access tier on a blob (#386)"}, {"oid": "e574619f9d9e889615fe6f5095a4353def434aaf", "committedDate": "2020-10-21 11:10:18 -0700", "message": "Added support to get blob tags (#389)"}, {"oid": "3b631043db756d25c2a7ed09a310875c53f22255", "committedDate": "2020-10-21 15:25:53 -0700", "message": "Set blob properties (#387)"}, {"oid": "1940bcc8fdbe9cd098bb676f2d806ffa52a6c1e9", "committedDate": "2020-10-22 10:47:12 -0700", "message": "Set metadata (#390)"}, {"oid": "6a9930d16e66ab2d195a0af8eabc47742c7c4dd2", "committedDate": "2020-10-22 14:18:36 -0700", "message": "Set tags (#393)"}, {"oid": "0ef4de95021f90c07c3e888cd740592cf7e924c4", "committedDate": "2020-10-27 13:51:39 -0700", "message": "Added ability to set service version on builder and added the request id interceptor instead of passing through the API (#424)"}, {"oid": "b7a2567cf6f0dda2941a806aeb48081e4458dfc2", "committedDate": "2020-10-27 16:15:40 -0700", "message": "Added support to automatically compute Md5 (#414)"}, {"oid": "1741649a57155fe36fd91c2093432cfef3b13a18", "committedDate": "2020-11-02 11:59:01 -0800", "message": "Added support for conditional tags (#438)"}, {"oid": "9b6d9b14ba73b7e51adf0daa17a4f8995fc5b8fc", "committedDate": "2020-11-17 12:41:44 -0800", "message": "Added options bags to storage container APIs (#450)"}, {"oid": "927088035fe49832bd9f9c35bcd3a920e9148b8c", "committedDate": "2021-03-30 15:01:52 -0700", "message": "Removing legacy code from master in favor of upcoming v2"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxNDE3OA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441214178", "body": "before this detailed doc for delete, it will be helpful to have a short doc indicating this API delete the blob?", "bodyText": "before this detailed doc for delete, it will be helpful to have a short doc indicating this API delete the blob?", "bodyHTML": "<p dir=\"auto\">before this detailed doc for delete, it will be helpful to have a short doc indicating this API delete the blob?</p>", "author": "anuchandy", "createdAt": "2020-06-17T00:29:22Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -547,6 +551,161 @@ public ServiceCall commitBlockListWithRestResponse(String containerName,\n             tier, callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */\n+    Void delete(String containerName,\n+                String blobName) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName);\n+    }\n+\n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    ServiceCall delete(String containerName,\n+                       String blobName,\n+                       Callback<Void> callback) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName,\n+            callback);\n+    }\n+\n+    /**\n+     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1MjcxNA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441952714", "bodyText": "I think you are right. I'll add a more brief description.", "author": "vcolin7", "createdAt": "2020-06-18T03:49:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxNDE3OA=="}], "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 9045bb169..5345aee4a 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n", "chunk": "@@ -580,21 +580,23 @@ public class StorageBlobClient {\n     }\n \n     /**\n+     * Deletes the specified blob or snapshot. Note that deleting a blob also deletes all its snapshots.\n+     * <p>\n      * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n      * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n      * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n-     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service\n-     * properties] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data\n-     * is permanently removed from the storage account. Note that you continue to be charged for the soft-deleted\n-     * blob's storage until it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query\n-     * parameter to discover which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API\n-     * to restore a soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to\n-     * return an HTTP status code of 404 (ResourceNotFound). If the storage account's automatic snapshot feature is\n-     * enabled, then, when a blob is deleted, an automatic snapshot is created. The blob becomes inaccessible\n-     * immediately. All other operations on the blob causes the service to return an HTTP status code of 404\n-     * (ResourceNotFound). You can access automatic snapshot using snapshot timestamp or version id. You can restore\n-     * the blob by calling Put or Copy Blob API with automatic snapshot as source. Deleting automatic snapshot\n-     * requires shared key or special SAS/RBAC permissions.\n+     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of\n+     * &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties\"&gt; Storage service properties.&lt;/a&gt;.\n+     * After the specified number of days has passed, the blob's data is permanently removed from the storage account.\n+     * Note that you continue to be charged for the soft-deleted blob's storage until it is permanently removed. Use\n+     * the List Blobs API and specify the \"include=deleted\" query parameter to discover which blobs and snapshots\n+     * have been soft deleted. You can then use the Undelete Blob API to restore a soft-deleted blob. All other\n+     * operations on a soft-deleted blob or snapshot causes the service to return an HTTP status code of 404\n+     * (ResourceNotFound). If the storage account's automatic snapshot feature is enabled, then, when a blob is\n+     * deleted, an automatic snapshot is created. The blob becomes inaccessible immediately. All other operations on\n+     * the blob causes the service to return an HTTP status code of 404 (ResourceNotFound). You can access automatic\n+     * snapshot using snapshot timestamp or version ID. You can restore the blob by calling Put or Copy Blob API with\n+     * automatic snapshot as source. Deleting automatic snapshot requires shared key or special SAS/RBAC permissions.\n      *\n      * @param containerName     The container name.\n      * @param blobName          The blob name.\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxNDMwMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441214300", "body": "missing return ", "bodyText": "missing return", "bodyHTML": "<p dir=\"auto\">missing return</p>", "author": "anuchandy", "createdAt": "2020-06-17T00:29:50Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -547,6 +551,161 @@ public ServiceCall commitBlockListWithRestResponse(String containerName,\n             tier, callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */\n+    Void delete(String containerName,\n+                String blobName) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName);\n+    }\n+\n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    ServiceCall delete(String containerName,\n+                       String blobName,\n+                       Callback<Void> callback) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName,\n+            callback);\n+    }\n+\n+    /**\n+     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n+     * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n+     * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n+     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service\n+     * properties] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data\n+     * is permanently removed from the storage account. Note that you continue to be charged for the soft-deleted\n+     * blob's storage until it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query\n+     * parameter to discover which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API\n+     * to restore a soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to\n+     * return an HTTP status code of 404 (ResourceNotFound). If the storage account's automatic snapshot feature is\n+     * enabled, then, when a blob is deleted, an automatic snapshot is created. The blob becomes inaccessible\n+     * immediately. All other operations on the blob causes the service to return an HTTP status code of 404\n+     * (ResourceNotFound). You can access automatic snapshot using snapshot timestamp or version id. You can restore\n+     * the blob by calling Put or Copy Blob API with automatic snapshot as source. Deleting automatic snapshot\n+     * requires shared key or special SAS/RBAC permissions.\n+     *\n+     * @param containerName     The container name.\n+     * @param blobName          The blob name.\n+     * @param snapshot          The snapshot parameter is an opaque DateTime value that, when present, specifies the\n+     *                          blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n+     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n+     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param leaseId           If specified, the operation only succeeds if the resource's lease is active and\n+     *                          matches this ID.\n+     * @param deleteSnapshots   Required if the blob has associated snapshots. Specify one of the following two\n+     *                          options: include: Delete the base blob and all of its snapshots. only: Delete only the blob's snapshots and not the blob itself. Possible values include: 'include', 'only'.\n+     * @param ifModifiedSince   Specify this header value to operate only on a blob if it has been modified since the\n+     *                          specified date/time.\n+     * @param ifUnmodifiedSince Specify this header value to operate only on a blob if it has not been modified since\n+     *                          the specified date/time.\n+     * @param ifMatch           Specify an ETag value to operate only on blobs with a matching value.\n+     * @param ifNoneMatch       Specify an ETag value to operate only on blobs without a matching value.\n+     * @param requestId         Provides a client-generated, opaque value with a 1 KB character limit that is\n+     *                          recorded in the analytics logs when storage analytics logging is enabled.\n+     */\n+    BlobDeleteResponse deleteWithResponse(String containerName,\n+                                          String blobName,\n+                                          String snapshot,\n+                                          Integer timeout,\n+                                          String version,\n+                                          String leaseId,\n+                                          DeleteSnapshotsOptionType deleteSnapshots,\n+                                          OffsetDateTime ifModifiedSince,\n+                                          OffsetDateTime ifUnmodifiedSince,\n+                                          String ifMatch,\n+                                          String ifNoneMatch,\n+                                          String requestId) {\n+        return storageBlobServiceClient.deleteWithResponse(containerName,\n+            blobName,\n+            snapshot,\n+            timeout,\n+            version,\n+            leaseId,\n+            deleteSnapshots,\n+            ifModifiedSince,\n+            ifUnmodifiedSince,\n+            ifMatch,\n+            ifNoneMatch,\n+            requestId);\n+    }\n+\n+    /**\n+     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n+     * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n+     * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n+     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service\n+     * properties] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data\n+     * is permanently removed from the storage account. Note that you continue to be charged for the soft-deleted\n+     * blob's storage until it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query\n+     * parameter to discover which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API\n+     * to restore a soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to\n+     * return an HTTP status code of 404 (ResourceNotFound). If the storage account's automatic snapshot feature is\n+     * enabled, then, when a blob is deleted, an automatic snapshot is created. The blob becomes inaccessible\n+     * immediately. All other operations on the blob causes the service to return an HTTP status code of 404\n+     * (ResourceNotFound). You can access automatic snapshot using snapshot timestamp or version id. You can restore\n+     * the blob by calling Put or Copy Blob API with automatic snapshot as source. Deleting automatic snapshot\n+     * requires shared key or special SAS/RBAC permissions.\n+     *\n+     * @param containerName     The container name.\n+     * @param blobName          The blob name.\n+     * @param snapshot          The snapshot parameter is an opaque DateTime value that, when present, specifies the\n+     *                          blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n+     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n+     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param leaseId           If specified, the operation only succeeds if the resource's lease is active and\n+     *                          matches this ID.\n+     * @param deleteSnapshots   Required if the blob has associated snapshots. Specify one of the following two\n+     *                          options: include: Delete the base blob and all of its snapshots. only: Delete only the blob's snapshots and not the blob itself. Possible values include: 'include', 'only'.\n+     * @param ifModifiedSince   Specify this header value to operate only on a blob if it has been modified since the\n+     *                          specified date/time.\n+     * @param ifUnmodifiedSince Specify this header value to operate only on a blob if it has not been modified since\n+     *                          the specified date/time.\n+     * @param ifMatch           Specify an ETag value to operate only on blobs with a matching value.\n+     * @param ifNoneMatch       Specify an ETag value to operate only on blobs without a matching value.\n+     * @param requestId         Provides a client-generated, opaque value with a 1 KB character limit that is\n+     *                          recorded in the analytics logs when storage analytics logging is enabled.\n+     * @param callback          Callback that receives the response.", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 9045bb169..5345aee4a 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n", "chunk": "@@ -677,6 +682,7 @@ public class StorageBlobClient {\n      * @param requestId         Provides a client-generated, opaque value with a 1 KB character limit that is\n      *                          recorded in the analytics logs when storage analytics logging is enabled.\n      * @param callback          Callback that receives the response.\n+     * @return A handle to the service call.\n      */\n     ServiceCall deleteWithResponse(String containerName,\n                                    String blobName,\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxNDQ3OA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441214478", "body": "a short description of API before this detailed description will be helpful", "bodyText": "a short description of API before this detailed description will be helpful", "bodyHTML": "<p dir=\"auto\">a short description of API before this detailed description will be helpful</p>", "author": "anuchandy", "createdAt": "2020-06-17T00:30:28Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -547,6 +551,161 @@ public ServiceCall commitBlockListWithRestResponse(String containerName,\n             tier, callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */\n+    Void delete(String containerName,\n+                String blobName) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName);\n+    }\n+\n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    ServiceCall delete(String containerName,\n+                       String blobName,\n+                       Callback<Void> callback) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName,\n+            callback);\n+    }\n+\n+    /**\n+     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n+     * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n+     * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n+     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service\n+     * properties] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data\n+     * is permanently removed from the storage account. Note that you continue to be charged for the soft-deleted\n+     * blob's storage until it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query\n+     * parameter to discover which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API\n+     * to restore a soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to\n+     * return an HTTP status code of 404 (ResourceNotFound). If the storage account's automatic snapshot feature is\n+     * enabled, then, when a blob is deleted, an automatic snapshot is created. The blob becomes inaccessible\n+     * immediately. All other operations on the blob causes the service to return an HTTP status code of 404\n+     * (ResourceNotFound). You can access automatic snapshot using snapshot timestamp or version id. You can restore\n+     * the blob by calling Put or Copy Blob API with automatic snapshot as source. Deleting automatic snapshot\n+     * requires shared key or special SAS/RBAC permissions.\n+     *\n+     * @param containerName     The container name.\n+     * @param blobName          The blob name.\n+     * @param snapshot          The snapshot parameter is an opaque DateTime value that, when present, specifies the\n+     *                          blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n+     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n+     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param leaseId           If specified, the operation only succeeds if the resource's lease is active and\n+     *                          matches this ID.\n+     * @param deleteSnapshots   Required if the blob has associated snapshots. Specify one of the following two\n+     *                          options: include: Delete the base blob and all of its snapshots. only: Delete only the blob's snapshots and not the blob itself. Possible values include: 'include', 'only'.\n+     * @param ifModifiedSince   Specify this header value to operate only on a blob if it has been modified since the\n+     *                          specified date/time.\n+     * @param ifUnmodifiedSince Specify this header value to operate only on a blob if it has not been modified since\n+     *                          the specified date/time.\n+     * @param ifMatch           Specify an ETag value to operate only on blobs with a matching value.\n+     * @param ifNoneMatch       Specify an ETag value to operate only on blobs without a matching value.\n+     * @param requestId         Provides a client-generated, opaque value with a 1 KB character limit that is\n+     *                          recorded in the analytics logs when storage analytics logging is enabled.\n+     */\n+    BlobDeleteResponse deleteWithResponse(String containerName,\n+                                          String blobName,\n+                                          String snapshot,\n+                                          Integer timeout,\n+                                          String version,\n+                                          String leaseId,\n+                                          DeleteSnapshotsOptionType deleteSnapshots,\n+                                          OffsetDateTime ifModifiedSince,\n+                                          OffsetDateTime ifUnmodifiedSince,\n+                                          String ifMatch,\n+                                          String ifNoneMatch,\n+                                          String requestId) {\n+        return storageBlobServiceClient.deleteWithResponse(containerName,\n+            blobName,\n+            snapshot,\n+            timeout,\n+            version,\n+            leaseId,\n+            deleteSnapshots,\n+            ifModifiedSince,\n+            ifUnmodifiedSince,\n+            ifMatch,\n+            ifNoneMatch,\n+            requestId);\n+    }\n+\n+    /**\n+     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 9045bb169..5345aee4a 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n", "chunk": "@@ -642,21 +645,23 @@ public class StorageBlobClient {\n     }\n \n     /**\n+     * Deletes the specified blob or snapshot. Note that deleting a blob also deletes all its snapshots.\n+     * <p>\n      * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n      * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n      * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n-     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service\n-     * properties] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data\n-     * is permanently removed from the storage account. Note that you continue to be charged for the soft-deleted\n-     * blob's storage until it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query\n-     * parameter to discover which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API\n-     * to restore a soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to\n-     * return an HTTP status code of 404 (ResourceNotFound). If the storage account's automatic snapshot feature is\n-     * enabled, then, when a blob is deleted, an automatic snapshot is created. The blob becomes inaccessible\n-     * immediately. All other operations on the blob causes the service to return an HTTP status code of 404\n-     * (ResourceNotFound). You can access automatic snapshot using snapshot timestamp or version id. You can restore\n-     * the blob by calling Put or Copy Blob API with automatic snapshot as source. Deleting automatic snapshot\n-     * requires shared key or special SAS/RBAC permissions.\n+     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of\n+     * &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties\"&gt; Storage service properties.&lt;/a&gt;.\n+     * After the specified number of days has passed, the blob's data is permanently removed from the storage account.\n+     * Note that you continue to be charged for the soft-deleted blob's storage until it is permanently removed. Use\n+     * the List Blobs API and specify the \"include=deleted\" query parameter to discover which blobs and snapshots\n+     * have been soft deleted. You can then use the Undelete Blob API to restore a soft-deleted blob. All other\n+     * operations on a soft-deleted blob or snapshot causes the service to return an HTTP status code of 404\n+     * (ResourceNotFound). If the storage account's automatic snapshot feature is enabled, then, when a blob is\n+     * deleted, an automatic snapshot is created. The blob becomes inaccessible immediately. All other operations on\n+     * the blob causes the service to return an HTTP status code of 404 (ResourceNotFound). You can access automatic\n+     * snapshot using snapshot timestamp or version ID. You can restore the blob by calling Put or Copy Blob API with\n+     * automatic snapshot as source. Deleting automatic snapshot requires shared key or special SAS/RBAC permissions.\n      *\n      * @param containerName     The container name.\n      * @param blobName          The blob name.\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxNDU3Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441214576", "body": "same as previous comment invalid link I guess.", "bodyText": "same as previous comment invalid link I guess.", "bodyHTML": "<p dir=\"auto\">same as previous comment invalid link I guess.</p>", "author": "anuchandy", "createdAt": "2020-06-17T00:30:46Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -547,6 +551,161 @@ public ServiceCall commitBlockListWithRestResponse(String containerName,\n             tier, callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */\n+    Void delete(String containerName,\n+                String blobName) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName);\n+    }\n+\n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    ServiceCall delete(String containerName,\n+                       String blobName,\n+                       Callback<Void> callback) {\n+        return storageBlobServiceClient.delete(containerName,\n+            blobName,\n+            callback);\n+    }\n+\n+    /**\n+     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n+     * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n+     * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n+     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service\n+     * properties] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data\n+     * is permanently removed from the storage account. Note that you continue to be charged for the soft-deleted\n+     * blob's storage until it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query\n+     * parameter to discover which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API\n+     * to restore a soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to\n+     * return an HTTP status code of 404 (ResourceNotFound). If the storage account's automatic snapshot feature is\n+     * enabled, then, when a blob is deleted, an automatic snapshot is created. The blob becomes inaccessible\n+     * immediately. All other operations on the blob causes the service to return an HTTP status code of 404\n+     * (ResourceNotFound). You can access automatic snapshot using snapshot timestamp or version id. You can restore\n+     * the blob by calling Put or Copy Blob API with automatic snapshot as source. Deleting automatic snapshot\n+     * requires shared key or special SAS/RBAC permissions.\n+     *\n+     * @param containerName     The container name.\n+     * @param blobName          The blob name.\n+     * @param snapshot          The snapshot parameter is an opaque DateTime value that, when present, specifies the\n+     *                          blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n+     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n+     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param leaseId           If specified, the operation only succeeds if the resource's lease is active and\n+     *                          matches this ID.\n+     * @param deleteSnapshots   Required if the blob has associated snapshots. Specify one of the following two\n+     *                          options: include: Delete the base blob and all of its snapshots. only: Delete only the blob's snapshots and not the blob itself. Possible values include: 'include', 'only'.\n+     * @param ifModifiedSince   Specify this header value to operate only on a blob if it has been modified since the\n+     *                          specified date/time.\n+     * @param ifUnmodifiedSince Specify this header value to operate only on a blob if it has not been modified since\n+     *                          the specified date/time.\n+     * @param ifMatch           Specify an ETag value to operate only on blobs with a matching value.\n+     * @param ifNoneMatch       Specify an ETag value to operate only on blobs without a matching value.\n+     * @param requestId         Provides a client-generated, opaque value with a 1 KB character limit that is\n+     *                          recorded in the analytics logs when storage analytics logging is enabled.\n+     */\n+    BlobDeleteResponse deleteWithResponse(String containerName,\n+                                          String blobName,\n+                                          String snapshot,\n+                                          Integer timeout,\n+                                          String version,\n+                                          String leaseId,\n+                                          DeleteSnapshotsOptionType deleteSnapshots,\n+                                          OffsetDateTime ifModifiedSince,\n+                                          OffsetDateTime ifUnmodifiedSince,\n+                                          String ifMatch,\n+                                          String ifNoneMatch,\n+                                          String requestId) {\n+        return storageBlobServiceClient.deleteWithResponse(containerName,\n+            blobName,\n+            snapshot,\n+            timeout,\n+            version,\n+            leaseId,\n+            deleteSnapshots,\n+            ifModifiedSince,\n+            ifUnmodifiedSince,\n+            ifMatch,\n+            ifNoneMatch,\n+            requestId);\n+    }\n+\n+    /**\n+     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n+     * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n+     * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n+     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service\n+     * properties] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 9045bb169..5345aee4a 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n", "chunk": "@@ -642,21 +645,23 @@ public class StorageBlobClient {\n     }\n \n     /**\n+     * Deletes the specified blob or snapshot. Note that deleting a blob also deletes all its snapshots.\n+     * <p>\n      * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently\n      * removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob\n      * is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains\n-     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service\n-     * properties] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data\n-     * is permanently removed from the storage account. Note that you continue to be charged for the soft-deleted\n-     * blob's storage until it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query\n-     * parameter to discover which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API\n-     * to restore a soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to\n-     * return an HTTP status code of 404 (ResourceNotFound). If the storage account's automatic snapshot feature is\n-     * enabled, then, when a blob is deleted, an automatic snapshot is created. The blob becomes inaccessible\n-     * immediately. All other operations on the blob causes the service to return an HTTP status code of 404\n-     * (ResourceNotFound). You can access automatic snapshot using snapshot timestamp or version id. You can restore\n-     * the blob by calling Put or Copy Blob API with automatic snapshot as source. Deleting automatic snapshot\n-     * requires shared key or special SAS/RBAC permissions.\n+     * the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of\n+     * &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties\"&gt; Storage service properties.&lt;/a&gt;.\n+     * After the specified number of days has passed, the blob's data is permanently removed from the storage account.\n+     * Note that you continue to be charged for the soft-deleted blob's storage until it is permanently removed. Use\n+     * the List Blobs API and specify the \"include=deleted\" query parameter to discover which blobs and snapshots\n+     * have been soft deleted. You can then use the Undelete Blob API to restore a soft-deleted blob. All other\n+     * operations on a soft-deleted blob or snapshot causes the service to return an HTTP status code of 404\n+     * (ResourceNotFound). If the storage account's automatic snapshot feature is enabled, then, when a blob is\n+     * deleted, an automatic snapshot is created. The blob becomes inaccessible immediately. All other operations on\n+     * the blob causes the service to return an HTTP status code of 404 (ResourceNotFound). You can access automatic\n+     * snapshot using snapshot timestamp or version ID. You can restore the blob by calling Put or Copy Blob API with\n+     * automatic snapshot as source. Deleting automatic snapshot requires shared key or special SAS/RBAC permissions.\n      *\n      * @param containerName     The container name.\n      * @param blobName          The blob name.\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxNDg4Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441214882", "body": "doc seems for getProperties.", "bodyText": "doc seems for getProperties.", "bodyHTML": "<p dir=\"auto\">doc seems for getProperties.</p>", "author": "anuchandy", "createdAt": "2020-06-17T00:31:53Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -682,6 +686,194 @@ ServiceCall commitBlockListWithRestResponse(String containerName,\n         return new ServiceCall(callAndOptionalResult.getCall());\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @return The blob's metadata.\n+     */", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\nindex 8a60019cd..145016f92 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n", "chunk": "@@ -687,14 +687,13 @@ final class StorageBlobServiceImpl {\n     }\n \n     /**\n-     * Reads the blob's metadata & properties.\n+     * Deletes the specified blob or snapshot. Note that deleting a blob also deletes all its snapshots.\n      *\n      * @param containerName The container name.\n      * @param blobName      The blob name.\n-     * @return The blob's metadata.\n      */\n     Void delete(String containerName,\n-                String blobName) {\n+                        String blobName) {\n         return deleteWithResponse(containerName,\n             blobName,\n             null,\n", "next_change": {"commit": "f5a4e7534c35804feadb7550823c065652a559e1", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\nindex 145016f92..384d5a3bb 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n", "chunk": "@@ -693,7 +695,7 @@ final class StorageBlobServiceImpl {\n      * @param blobName      The blob name.\n      */\n     Void delete(String containerName,\n-                        String blobName) {\n+                String blobName) {\n         return deleteWithResponse(containerName,\n             blobName,\n             null,\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxNzMzNw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441217337", "body": "this should be like below:\r\n\r\n```java\r\nString strContent = readAsString(response.body());\r\ncallback.onFailure(new BlobStorageException(strContent, response.raw()));\r\n```\r\n\r\nthis snippet is consistent with the pattern we follow in other APIs and also we shouldn't add our own text to the error message: ref: https://github.com/Azure/azure-sdk-for-android/pull/239#discussion_r432886895", "bodyText": "this should be like below:\nString strContent = readAsString(response.body());\ncallback.onFailure(new BlobStorageException(strContent, response.raw()));\nthis snippet is consistent with the pattern we follow in other APIs and also we shouldn't add our own text to the error message: ref: #239 (comment)", "bodyHTML": "<p dir=\"auto\">this should be like below:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"String strContent = readAsString(response.body());\ncallback.onFailure(new BlobStorageException(strContent, response.raw()));\n\"><pre><span class=\"pl-smi\">String</span> strContent <span class=\"pl-k\">=</span> readAsString(response<span class=\"pl-k\">.</span>body());\ncallback<span class=\"pl-k\">.</span>onFailure(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">BlobStorageException</span>(strContent, response<span class=\"pl-k\">.</span>raw()));</pre></div>\n<p dir=\"auto\">this snippet is consistent with the pattern we follow in other APIs and also we shouldn't add our own text to the error message: ref: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"623549395\" data-permission-text=\"Title is private\" data-url=\"https://github.com/Azure/azure-sdk-for-android/issues/239\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/Azure/azure-sdk-for-android/pull/239/hovercard?comment_id=432886895&amp;comment_type=review_comment\" href=\"https://github.com/Azure/azure-sdk-for-android/pull/239#discussion_r432886895\">#239 (comment)</a></p>", "author": "anuchandy", "createdAt": "2020-06-17T00:41:46Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1335,6 +1446,96 @@ public void onFailure(Call<ResponseBody> call, Throwable t) {\n         }\n     }\n \n+    private CallAndOptionalResult<BlobDeleteResponse> deleteWithRestResponseIntern(String containerName,\n+                                                                                   String blobName,\n+                                                                                   String snapshot,\n+                                                                                   Integer timeout,\n+                                                                                   String version,\n+                                                                                   String leaseId,\n+                                                                                   DeleteSnapshotsOptionType deleteSnapshots,\n+                                                                                   OffsetDateTime ifModifiedSince,\n+                                                                                   OffsetDateTime ifUnmodifiedSince,\n+                                                                                   String ifMatch,\n+                                                                                   String ifNoneMatch,\n+                                                                                   String requestId,\n+                                                                                   Callback<BlobDeleteResponse> callback) {\n+        DateTimeRfc1123 ifModifiedSinceConverted = ifModifiedSince == null ? null :\n+            new DateTimeRfc1123(ifModifiedSince);\n+        DateTimeRfc1123 ifUnmodifiedSinceConverted = ifUnmodifiedSince == null ? null :\n+            new DateTimeRfc1123(ifUnmodifiedSince);\n+\n+        Call<Void> call = service.delete(containerName,\n+            blobName,\n+            snapshot,\n+            timeout,\n+            leaseId,\n+            deleteSnapshots,\n+            ifModifiedSinceConverted,\n+            ifUnmodifiedSinceConverted,\n+            ifMatch,\n+            ifNoneMatch,\n+            XMS_VERSION, // TODO: Replace with 'version'.\n+            requestId);\n+\n+        if (callback != null) {\n+            executeCall(call, new retrofit2.Callback<Void>() {\n+                @Override\n+                public void onResponse(@NonNull Call<Void> call, @NonNull Response<Void> response) {\n+                    if (response.isSuccessful()) {\n+                        if (response.code() >= 200 && response.code() < 300) {\n+                            BlobDeleteHeaders typedHeaders = deserializeHeaders(response.headers(),\n+                                BlobDeleteHeaders.class);\n+\n+                            callback.onResponse(new BlobDeleteResponse(response.raw().request(),\n+                                response.code(),\n+                                response.headers(),\n+                                response.body(),\n+                                typedHeaders));\n+                        } else {\n+                            callback.onFailure(new BlobStorageException(\"Response failed with error code: \" + response.code(),\n+                                response.raw()));", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\nindex 8a60019cd..145016f92 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n", "chunk": "@@ -1478,22 +1484,23 @@ final class StorageBlobServiceImpl {\n             requestId);\n \n         if (callback != null) {\n-            executeCall(call, new retrofit2.Callback<Void>() {\n+            executeCall(call, new retrofit2.Callback<ResponseBody>() {\n                 @Override\n-                public void onResponse(@NonNull Call<Void> call, @NonNull Response<Void> response) {\n+                public void onResponse(@NonNull Call<ResponseBody> call, @NonNull Response<ResponseBody> response) {\n                     if (response.isSuccessful()) {\n-                        if (response.code() >= 200 && response.code() < 300) {\n+                        if (response.code() == 202) {\n                             BlobDeleteHeaders typedHeaders = deserializeHeaders(response.headers(),\n                                 BlobDeleteHeaders.class);\n \n                             callback.onResponse(new BlobDeleteResponse(response.raw().request(),\n                                 response.code(),\n                                 response.headers(),\n-                                response.body(),\n+                                null,\n                                 typedHeaders));\n                         } else {\n-                            callback.onFailure(new BlobStorageException(\"Response failed with error code: \" + response.code(),\n-                                response.raw()));\n+                            String strContent = readAsString(response.body());\n+\n+                            callback.onFailure(new BlobStorageException(strContent, response.raw()));\n                         }\n                     } else {\n                         String strContent = readAsString(response.errorBody());\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxODM0NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441218344", "body": "The only valid response status code for a successful delete is 202, all other code 2XX status code should hit else case.", "bodyText": "The only valid response status code for a successful delete is 202, all other code 2XX status code should hit else case.", "bodyHTML": "<p dir=\"auto\">The only valid response status code for a successful delete is 202, all other code 2XX status code should hit else case.</p>", "author": "anuchandy", "createdAt": "2020-06-17T00:45:12Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1335,6 +1446,96 @@ public void onFailure(Call<ResponseBody> call, Throwable t) {\n         }\n     }\n \n+    private CallAndOptionalResult<BlobDeleteResponse> deleteWithRestResponseIntern(String containerName,\n+                                                                                   String blobName,\n+                                                                                   String snapshot,\n+                                                                                   Integer timeout,\n+                                                                                   String version,\n+                                                                                   String leaseId,\n+                                                                                   DeleteSnapshotsOptionType deleteSnapshots,\n+                                                                                   OffsetDateTime ifModifiedSince,\n+                                                                                   OffsetDateTime ifUnmodifiedSince,\n+                                                                                   String ifMatch,\n+                                                                                   String ifNoneMatch,\n+                                                                                   String requestId,\n+                                                                                   Callback<BlobDeleteResponse> callback) {\n+        DateTimeRfc1123 ifModifiedSinceConverted = ifModifiedSince == null ? null :\n+            new DateTimeRfc1123(ifModifiedSince);\n+        DateTimeRfc1123 ifUnmodifiedSinceConverted = ifUnmodifiedSince == null ? null :\n+            new DateTimeRfc1123(ifUnmodifiedSince);\n+\n+        Call<Void> call = service.delete(containerName,\n+            blobName,\n+            snapshot,\n+            timeout,\n+            leaseId,\n+            deleteSnapshots,\n+            ifModifiedSinceConverted,\n+            ifUnmodifiedSinceConverted,\n+            ifMatch,\n+            ifNoneMatch,\n+            XMS_VERSION, // TODO: Replace with 'version'.\n+            requestId);\n+\n+        if (callback != null) {\n+            executeCall(call, new retrofit2.Callback<Void>() {\n+                @Override\n+                public void onResponse(@NonNull Call<Void> call, @NonNull Response<Void> response) {\n+                    if (response.isSuccessful()) {\n+                        if (response.code() >= 200 && response.code() < 300) {", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\nindex 8a60019cd..145016f92 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n", "chunk": "@@ -1478,22 +1484,23 @@ final class StorageBlobServiceImpl {\n             requestId);\n \n         if (callback != null) {\n-            executeCall(call, new retrofit2.Callback<Void>() {\n+            executeCall(call, new retrofit2.Callback<ResponseBody>() {\n                 @Override\n-                public void onResponse(@NonNull Call<Void> call, @NonNull Response<Void> response) {\n+                public void onResponse(@NonNull Call<ResponseBody> call, @NonNull Response<ResponseBody> response) {\n                     if (response.isSuccessful()) {\n-                        if (response.code() >= 200 && response.code() < 300) {\n+                        if (response.code() == 202) {\n                             BlobDeleteHeaders typedHeaders = deserializeHeaders(response.headers(),\n                                 BlobDeleteHeaders.class);\n \n                             callback.onResponse(new BlobDeleteResponse(response.raw().request(),\n                                 response.code(),\n                                 response.headers(),\n-                                response.body(),\n+                                null,\n                                 typedHeaders));\n                         } else {\n-                            callback.onFailure(new BlobStorageException(\"Response failed with error code: \" + response.code(),\n-                                response.raw()));\n+                            String strContent = readAsString(response.body());\n+\n+                            callback.onFailure(new BlobStorageException(strContent, response.raw()));\n                         }\n                     } else {\n                         String strContent = readAsString(response.errorBody());\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxODgzNA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441218834", "body": "Not sure why we check the range 200-300 for async delete and 200 for sync delete, as per swagger the only valid response status code for a successful delete is 202.", "bodyText": "Not sure why we check the range 200-300 for async delete and 200 for sync delete, as per swagger the only valid response status code for a successful delete is 202.", "bodyHTML": "<p dir=\"auto\">Not sure why we check the range 200-300 for async delete and 200 for sync delete, as per swagger the only valid response status code for a successful delete is 202.</p>", "author": "anuchandy", "createdAt": "2020-06-17T00:47:11Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1335,6 +1446,96 @@ public void onFailure(Call<ResponseBody> call, Throwable t) {\n         }\n     }\n \n+    private CallAndOptionalResult<BlobDeleteResponse> deleteWithRestResponseIntern(String containerName,\n+                                                                                   String blobName,\n+                                                                                   String snapshot,\n+                                                                                   Integer timeout,\n+                                                                                   String version,\n+                                                                                   String leaseId,\n+                                                                                   DeleteSnapshotsOptionType deleteSnapshots,\n+                                                                                   OffsetDateTime ifModifiedSince,\n+                                                                                   OffsetDateTime ifUnmodifiedSince,\n+                                                                                   String ifMatch,\n+                                                                                   String ifNoneMatch,\n+                                                                                   String requestId,\n+                                                                                   Callback<BlobDeleteResponse> callback) {\n+        DateTimeRfc1123 ifModifiedSinceConverted = ifModifiedSince == null ? null :\n+            new DateTimeRfc1123(ifModifiedSince);\n+        DateTimeRfc1123 ifUnmodifiedSinceConverted = ifUnmodifiedSince == null ? null :\n+            new DateTimeRfc1123(ifUnmodifiedSince);\n+\n+        Call<Void> call = service.delete(containerName,\n+            blobName,\n+            snapshot,\n+            timeout,\n+            leaseId,\n+            deleteSnapshots,\n+            ifModifiedSinceConverted,\n+            ifUnmodifiedSinceConverted,\n+            ifMatch,\n+            ifNoneMatch,\n+            XMS_VERSION, // TODO: Replace with 'version'.\n+            requestId);\n+\n+        if (callback != null) {\n+            executeCall(call, new retrofit2.Callback<Void>() {\n+                @Override\n+                public void onResponse(@NonNull Call<Void> call, @NonNull Response<Void> response) {\n+                    if (response.isSuccessful()) {\n+                        if (response.code() >= 200 && response.code() < 300) {\n+                            BlobDeleteHeaders typedHeaders = deserializeHeaders(response.headers(),\n+                                BlobDeleteHeaders.class);\n+\n+                            callback.onResponse(new BlobDeleteResponse(response.raw().request(),\n+                                response.code(),\n+                                response.headers(),\n+                                response.body(),\n+                                typedHeaders));\n+                        } else {\n+                            callback.onFailure(new BlobStorageException(\"Response failed with error code: \" + response.code(),\n+                                response.raw()));\n+                        }\n+                    } else {\n+                        String strContent = readAsString(response.errorBody());\n+\n+                        callback.onFailure(new BlobStorageException(strContent, response.raw()));\n+                    }\n+                }\n+\n+                @Override\n+                public void onFailure(@NonNull Call<Void> call, @NonNull Throwable t) {\n+                    callback.onFailure(t);\n+                }\n+            });\n+\n+            return new CallAndOptionalResult<>(call, null);\n+        } else {\n+            Response<Void> response = executeCall(call);\n+\n+            if (response.isSuccessful()) {\n+                if (response.code() == 200) {", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMjI5Nw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441222297", "bodyText": "The java SDK API is here for reference.", "author": "anuchandy", "createdAt": "2020-06-17T01:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxODgzNA=="}], "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\nindex 8a60019cd..145016f92 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n", "chunk": "@@ -1503,30 +1510,31 @@ final class StorageBlobServiceImpl {\n                 }\n \n                 @Override\n-                public void onFailure(@NonNull Call<Void> call, @NonNull Throwable t) {\n+                public void onFailure(@NonNull Call<ResponseBody> call, @NonNull Throwable t) {\n                     callback.onFailure(t);\n                 }\n             });\n \n             return new CallAndOptionalResult<>(call, null);\n         } else {\n-            Response<Void> response = executeCall(call);\n+            Response<ResponseBody> response = executeCall(call);\n \n             if (response.isSuccessful()) {\n-                if (response.code() == 200) {\n+                if (response.code() == 202) {\n                     BlobDeleteHeaders headers = deserializeHeaders(response.headers(),\n                         BlobDeleteHeaders.class);\n \n                     BlobDeleteResponse result = new BlobDeleteResponse(response.raw().request(),\n                         response.code(),\n                         response.headers(),\n-                        response.body(),\n+                        null,\n                         headers);\n \n                     return new CallAndOptionalResult<>(call, result);\n                 } else {\n-                    throw new BlobStorageException(\"Response failed with error code: \" + response.code(),\n-                        response.raw());\n+                    String strContent = readAsString(response.body());\n+\n+                    throw new BlobStorageException(strContent, response.raw());\n                 }\n             } else {\n                 String strContent = readAsString(response.errorBody());\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxOTEwMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441219100", "body": "```java\r\nString strContent = readAsString(response.body());\r\ncallback.onFailure(new BlobStorageException(strContent, response.raw()));\r\n```", "bodyText": "String strContent = readAsString(response.body());\ncallback.onFailure(new BlobStorageException(strContent, response.raw()));", "bodyHTML": "<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"String strContent = readAsString(response.body());\ncallback.onFailure(new BlobStorageException(strContent, response.raw()));\n\"><pre><span class=\"pl-smi\">String</span> strContent <span class=\"pl-k\">=</span> readAsString(response<span class=\"pl-k\">.</span>body());\ncallback<span class=\"pl-k\">.</span>onFailure(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">BlobStorageException</span>(strContent, response<span class=\"pl-k\">.</span>raw()));</pre></div>", "author": "anuchandy", "createdAt": "2020-06-17T00:48:14Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1335,6 +1446,96 @@ public void onFailure(Call<ResponseBody> call, Throwable t) {\n         }\n     }\n \n+    private CallAndOptionalResult<BlobDeleteResponse> deleteWithRestResponseIntern(String containerName,\n+                                                                                   String blobName,\n+                                                                                   String snapshot,\n+                                                                                   Integer timeout,\n+                                                                                   String version,\n+                                                                                   String leaseId,\n+                                                                                   DeleteSnapshotsOptionType deleteSnapshots,\n+                                                                                   OffsetDateTime ifModifiedSince,\n+                                                                                   OffsetDateTime ifUnmodifiedSince,\n+                                                                                   String ifMatch,\n+                                                                                   String ifNoneMatch,\n+                                                                                   String requestId,\n+                                                                                   Callback<BlobDeleteResponse> callback) {\n+        DateTimeRfc1123 ifModifiedSinceConverted = ifModifiedSince == null ? null :\n+            new DateTimeRfc1123(ifModifiedSince);\n+        DateTimeRfc1123 ifUnmodifiedSinceConverted = ifUnmodifiedSince == null ? null :\n+            new DateTimeRfc1123(ifUnmodifiedSince);\n+\n+        Call<Void> call = service.delete(containerName,\n+            blobName,\n+            snapshot,\n+            timeout,\n+            leaseId,\n+            deleteSnapshots,\n+            ifModifiedSinceConverted,\n+            ifUnmodifiedSinceConverted,\n+            ifMatch,\n+            ifNoneMatch,\n+            XMS_VERSION, // TODO: Replace with 'version'.\n+            requestId);\n+\n+        if (callback != null) {\n+            executeCall(call, new retrofit2.Callback<Void>() {\n+                @Override\n+                public void onResponse(@NonNull Call<Void> call, @NonNull Response<Void> response) {\n+                    if (response.isSuccessful()) {\n+                        if (response.code() >= 200 && response.code() < 300) {\n+                            BlobDeleteHeaders typedHeaders = deserializeHeaders(response.headers(),\n+                                BlobDeleteHeaders.class);\n+\n+                            callback.onResponse(new BlobDeleteResponse(response.raw().request(),\n+                                response.code(),\n+                                response.headers(),\n+                                response.body(),\n+                                typedHeaders));\n+                        } else {\n+                            callback.onFailure(new BlobStorageException(\"Response failed with error code: \" + response.code(),\n+                                response.raw()));\n+                        }\n+                    } else {\n+                        String strContent = readAsString(response.errorBody());\n+\n+                        callback.onFailure(new BlobStorageException(strContent, response.raw()));\n+                    }\n+                }\n+\n+                @Override\n+                public void onFailure(@NonNull Call<Void> call, @NonNull Throwable t) {\n+                    callback.onFailure(t);\n+                }\n+            });\n+\n+            return new CallAndOptionalResult<>(call, null);\n+        } else {\n+            Response<Void> response = executeCall(call);\n+\n+            if (response.isSuccessful()) {\n+                if (response.code() == 200) {\n+                    BlobDeleteHeaders headers = deserializeHeaders(response.headers(),\n+                        BlobDeleteHeaders.class);\n+\n+                    BlobDeleteResponse result = new BlobDeleteResponse(response.raw().request(),\n+                        response.code(),\n+                        response.headers(),\n+                        response.body(),\n+                        headers);\n+\n+                    return new CallAndOptionalResult<>(call, result);\n+                } else {\n+                    throw new BlobStorageException(\"Response failed with error code: \" + response.code(),", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\nindex 8a60019cd..145016f92 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n", "chunk": "@@ -1503,30 +1510,31 @@ final class StorageBlobServiceImpl {\n                 }\n \n                 @Override\n-                public void onFailure(@NonNull Call<Void> call, @NonNull Throwable t) {\n+                public void onFailure(@NonNull Call<ResponseBody> call, @NonNull Throwable t) {\n                     callback.onFailure(t);\n                 }\n             });\n \n             return new CallAndOptionalResult<>(call, null);\n         } else {\n-            Response<Void> response = executeCall(call);\n+            Response<ResponseBody> response = executeCall(call);\n \n             if (response.isSuccessful()) {\n-                if (response.code() == 200) {\n+                if (response.code() == 202) {\n                     BlobDeleteHeaders headers = deserializeHeaders(response.headers(),\n                         BlobDeleteHeaders.class);\n \n                     BlobDeleteResponse result = new BlobDeleteResponse(response.raw().request(),\n                         response.code(),\n                         response.headers(),\n-                        response.body(),\n+                        null,\n                         headers);\n \n                     return new CallAndOptionalResult<>(call, result);\n                 } else {\n-                    throw new BlobStorageException(\"Response failed with error code: \" + response.code(),\n-                        response.raw());\n+                    String strContent = readAsString(response.body());\n+\n+                    throw new BlobStorageException(strContent, response.raw());\n                 }\n             } else {\n                 String strContent = readAsString(response.errorBody());\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMDY5OA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441220698", "body": "\"Code generated by\" txt might be misleading for Android case, we shouldn't include it in our files I guess.", "bodyText": "\"Code generated by\" txt might be misleading for Android case, we shouldn't include it in our files I guess.", "bodyHTML": "<p dir=\"auto\">\"Code generated by\" txt might be misleading for Android case, we shouldn't include it in our files I guess.</p>", "author": "anuchandy", "createdAt": "2020-06-17T00:54:23Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobDeleteHeaders.java", "diffHunk": "@@ -0,0 +1,171 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobDeleteHeaders.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobDeleteHeaders.java\nindex 647b26290..70bd0fcc0 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobDeleteHeaders.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobDeleteHeaders.java\n", "chunk": "@@ -1,6 +1,5 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.\n \n package com.azure.android.storage.blob.models;\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMDk4NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441220984", "body": "nit; we shouldn't include the txt \"Code generated by..\"", "bodyText": "nit; we shouldn't include the txt \"Code generated by..\"", "bodyHTML": "<p dir=\"auto\">nit; we shouldn't include the txt \"Code generated by..\"</p>", "author": "anuchandy", "createdAt": "2020-06-17T00:55:36Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobDeleteResponse.java", "diffHunk": "@@ -0,0 +1,32 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobDeleteResponse.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobDeleteResponse.java\nindex 9e876e994..27210304e 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobDeleteResponse.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobDeleteResponse.java\n", "chunk": "@@ -1,6 +1,5 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.\n \n package com.azure.android.storage.blob.models;\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMTE1OA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441221158", "body": "same comment as above w.r.t auto-gen txt", "bodyText": "same comment as above w.r.t auto-gen txt", "bodyHTML": "<p dir=\"auto\">same comment as above w.r.t auto-gen txt</p>", "author": "anuchandy", "createdAt": "2020-06-17T00:56:10Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/DeleteSnapshotsOptionType.java", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/DeleteSnapshotsOptionType.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/DeleteSnapshotsOptionType.java\nindex 3d17fbfac..f02030ee5 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/DeleteSnapshotsOptionType.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/DeleteSnapshotsOptionType.java\n", "chunk": "@@ -1,6 +1,5 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.\n \n package com.azure.android.storage.blob.models;\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzIwMw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441223203", "body": "This should be `Call<ResponseBody>` instead of  `Call<Void>`.", "bodyText": "This should be Call<ResponseBody> instead of  Call<Void>.", "bodyHTML": "<p dir=\"auto\">This should be <code>Call&lt;ResponseBody&gt;</code> instead of  <code>Call&lt;Void&gt;</code>.</p>", "author": "anuchandy", "createdAt": "2020-06-17T01:04:05Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1335,6 +1446,96 @@ public void onFailure(Call<ResponseBody> call, Throwable t) {\n         }\n     }\n \n+    private CallAndOptionalResult<BlobDeleteResponse> deleteWithRestResponseIntern(String containerName,\n+                                                                                   String blobName,\n+                                                                                   String snapshot,\n+                                                                                   Integer timeout,\n+                                                                                   String version,\n+                                                                                   String leaseId,\n+                                                                                   DeleteSnapshotsOptionType deleteSnapshots,\n+                                                                                   OffsetDateTime ifModifiedSince,\n+                                                                                   OffsetDateTime ifUnmodifiedSince,\n+                                                                                   String ifMatch,\n+                                                                                   String ifNoneMatch,\n+                                                                                   String requestId,\n+                                                                                   Callback<BlobDeleteResponse> callback) {\n+        DateTimeRfc1123 ifModifiedSinceConverted = ifModifiedSince == null ? null :\n+            new DateTimeRfc1123(ifModifiedSince);\n+        DateTimeRfc1123 ifUnmodifiedSinceConverted = ifUnmodifiedSince == null ? null :\n+            new DateTimeRfc1123(ifUnmodifiedSince);\n+\n+        Call<Void> call = service.delete(containerName,", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzcwNQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441223705", "bodyText": "The reason for \"ResponseBody\" is, we want later read the body if the delete fails i.e. if service returns non-202.", "author": "anuchandy", "createdAt": "2020-06-17T01:06:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzIwMw=="}], "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\nindex 8a60019cd..145016f92 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n", "chunk": "@@ -1464,7 +1470,7 @@ final class StorageBlobServiceImpl {\n         DateTimeRfc1123 ifUnmodifiedSinceConverted = ifUnmodifiedSince == null ? null :\n             new DateTimeRfc1123(ifUnmodifiedSince);\n \n-        Call<Void> call = service.delete(containerName,\n+        Call<ResponseBody> call = service.delete(containerName,\n             blobName,\n             snapshot,\n             timeout,\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzMzOQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441223339", "body": "return type should be `Call <ResponseBody>`", "bodyText": "return type should be Call <ResponseBody>", "bodyHTML": "<p dir=\"auto\">return type should be <code>Call &lt;ResponseBody&gt;</code></p>", "author": "anuchandy", "createdAt": "2020-06-17T01:04:41Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1485,5 +1686,19 @@ T getResult() {\n                                            @Header(\"x-ms-encryption-key\") String encryptionKey,\n                                            @Header(\"x-ms-encryption-key-sha256\") String encryptionKeySha256,\n                                            @Header(\"x-ms-encryption-algorithm\") EncryptionAlgorithmType encryptionAlgorithm);\n+\n+        @DELETE(\"{containerName}/{blob}\")\n+        Call<Void> delete(@Path(\"containerName\") String containerName,", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1NTI2OA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441955268", "bodyText": "I assume we should also do this for APIs like getBlobProperties where we don't expect a body in a successful call, but there could be one in a failed call, right?", "author": "vcolin7", "createdAt": "2020-06-18T04:00:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzMzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1OTA2OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441959069", "bodyText": "Also, the reason I went with Void is because the Java API returns a Mono<Void> for the delete operation and the BlobDeleteResponse object.", "author": "vcolin7", "createdAt": "2020-06-18T04:17:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzMzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3OTg1Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441979853", "bodyText": "I guess this means we want to return a Void at the public API level but a ResponseBody at the service interface level. Is this correct?", "author": "vcolin7", "createdAt": "2020-06-18T05:41:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzMzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMTQyNw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r442421427", "bodyText": "I assume we should also do this for APIs like getBlobProperties where we don't expect a body in a successful call, but there could be one in a failed call, right?\nYes, it seems there is a similar bug in getBlobProperties as well, that needs to be fixed.\nI guess this means we want to return a Void at the public API level but a ResponseBody at the service interface level. Is this correct?\nright, like java SDK, from public API we return Void but in internal service interface we need ResponseBody so that we can read error body from it and throw.", "author": "anuchandy", "createdAt": "2020-06-18T18:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzMzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\nindex 8a60019cd..145016f92 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n", "chunk": "@@ -1688,17 +1696,17 @@ final class StorageBlobServiceImpl {\n                                            @Header(\"x-ms-encryption-algorithm\") EncryptionAlgorithmType encryptionAlgorithm);\n \n         @DELETE(\"{containerName}/{blob}\")\n-        Call<Void> delete(@Path(\"containerName\") String containerName,\n-                          @Path(\"blob\") String blob,\n-                          @Query(\"snapshot\") String snapshot,\n-                          @Query(\"timeout\") Integer timeout,\n-                          @Header(\"x-ms-lease-id\") String leaseId,\n-                          @Header(\"x-ms-delete-snapshots\") DeleteSnapshotsOptionType deleteSnapshots,\n-                          @Header(\"If-Modified-Since\") DateTimeRfc1123 ifModifiedSince,\n-                          @Header(\"If-Unmodified-Since\") DateTimeRfc1123 ifUnmodifiedSince,\n-                          @Header(\"If-Match\") String ifMatch,\n-                          @Header(\"If-None-Match\") String ifNoneMatch,\n-                          @Header(\"x-ms-version\") String version,\n-                          @Header(\"x-ms-client-request-id\") String requestId);\n+        Call<ResponseBody> delete(@Path(\"containerName\") String containerName,\n+                                  @Path(\"blob\") String blob,\n+                                  @Query(\"snapshot\") String snapshot,\n+                                  @Query(\"timeout\") Integer timeout,\n+                                  @Header(\"x-ms-lease-id\") String leaseId,\n+                                  @Header(\"x-ms-delete-snapshots\") DeleteSnapshotsOptionType deleteSnapshots,\n+                                  @Header(\"If-Modified-Since\") DateTimeRfc1123 ifModifiedSince,\n+                                  @Header(\"If-Unmodified-Since\") DateTimeRfc1123 ifUnmodifiedSince,\n+                                  @Header(\"If-Match\") String ifMatch,\n+                                  @Header(\"If-None-Match\") String ifNoneMatch,\n+                                  @Header(\"x-ms-version\") String version,\n+                                  @Header(\"x-ms-client-request-id\") String requestId);\n     }\n }\n", "next_change": {"commit": "f5a4e7534c35804feadb7550823c065652a559e1", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\nindex 145016f92..384d5a3bb 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n", "chunk": "@@ -1708,5 +1909,14 @@ final class StorageBlobServiceImpl {\n                                   @Header(\"If-None-Match\") String ifNoneMatch,\n                                   @Header(\"x-ms-version\") String version,\n                                   @Header(\"x-ms-client-request-id\") String requestId);\n+\n+        @PUT(\"{containerName}/{blob}\")\n+        Call<ResponseBody> undelete(@Path(\"containerName\") String containerName,\n+                                    @Path(\"blob\") String blobName,\n+                                    @Query(\"url\") String url,\n+                                    @Query(\"timeout\") Integer timeout,\n+                                    @Header(\"x-ms-version\") String version,\n+                                    @Header(\"x-ms-client-request-id\") String requestId,\n+                                    @Query(\"comp\") String comp);\n     }\n }\n", "next_change": {"commit": "6a8bcb18998f73ad06718b1d5dd8f61d0de35c19", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\nindex 384d5a3bb..acfd5d5d9 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n", "chunk": "@@ -1909,14 +1708,5 @@ final class StorageBlobServiceImpl {\n                                   @Header(\"If-None-Match\") String ifNoneMatch,\n                                   @Header(\"x-ms-version\") String version,\n                                   @Header(\"x-ms-client-request-id\") String requestId);\n-\n-        @PUT(\"{containerName}/{blob}\")\n-        Call<ResponseBody> undelete(@Path(\"containerName\") String containerName,\n-                                    @Path(\"blob\") String blobName,\n-                                    @Query(\"url\") String url,\n-                                    @Query(\"timeout\") Integer timeout,\n-                                    @Header(\"x-ms-version\") String version,\n-                                    @Header(\"x-ms-client-request-id\") String requestId,\n-                                    @Query(\"comp\") String comp);\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzc4NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441223784", "body": "`new retrofit2.Callback<ResponseBody>()`", "bodyText": "new retrofit2.Callback<ResponseBody>()", "bodyHTML": "<p dir=\"auto\"><code>new retrofit2.Callback&lt;ResponseBody&gt;()</code></p>", "author": "anuchandy", "createdAt": "2020-06-17T01:06:30Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1335,6 +1446,96 @@ public void onFailure(Call<ResponseBody> call, Throwable t) {\n         }\n     }\n \n+    private CallAndOptionalResult<BlobDeleteResponse> deleteWithRestResponseIntern(String containerName,\n+                                                                                   String blobName,\n+                                                                                   String snapshot,\n+                                                                                   Integer timeout,\n+                                                                                   String version,\n+                                                                                   String leaseId,\n+                                                                                   DeleteSnapshotsOptionType deleteSnapshots,\n+                                                                                   OffsetDateTime ifModifiedSince,\n+                                                                                   OffsetDateTime ifUnmodifiedSince,\n+                                                                                   String ifMatch,\n+                                                                                   String ifNoneMatch,\n+                                                                                   String requestId,\n+                                                                                   Callback<BlobDeleteResponse> callback) {\n+        DateTimeRfc1123 ifModifiedSinceConverted = ifModifiedSince == null ? null :\n+            new DateTimeRfc1123(ifModifiedSince);\n+        DateTimeRfc1123 ifUnmodifiedSinceConverted = ifUnmodifiedSince == null ? null :\n+            new DateTimeRfc1123(ifUnmodifiedSince);\n+\n+        Call<Void> call = service.delete(containerName,\n+            blobName,\n+            snapshot,\n+            timeout,\n+            leaseId,\n+            deleteSnapshots,\n+            ifModifiedSinceConverted,\n+            ifUnmodifiedSinceConverted,\n+            ifMatch,\n+            ifNoneMatch,\n+            XMS_VERSION, // TODO: Replace with 'version'.\n+            requestId);\n+\n+        if (callback != null) {\n+            executeCall(call, new retrofit2.Callback<Void>() {", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\nindex 8a60019cd..145016f92 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n", "chunk": "@@ -1478,22 +1484,23 @@ final class StorageBlobServiceImpl {\n             requestId);\n \n         if (callback != null) {\n-            executeCall(call, new retrofit2.Callback<Void>() {\n+            executeCall(call, new retrofit2.Callback<ResponseBody>() {\n                 @Override\n-                public void onResponse(@NonNull Call<Void> call, @NonNull Response<Void> response) {\n+                public void onResponse(@NonNull Call<ResponseBody> call, @NonNull Response<ResponseBody> response) {\n                     if (response.isSuccessful()) {\n-                        if (response.code() >= 200 && response.code() < 300) {\n+                        if (response.code() == 202) {\n                             BlobDeleteHeaders typedHeaders = deserializeHeaders(response.headers(),\n                                 BlobDeleteHeaders.class);\n \n                             callback.onResponse(new BlobDeleteResponse(response.raw().request(),\n                                 response.code(),\n                                 response.headers(),\n-                                response.body(),\n+                                null,\n                                 typedHeaders));\n                         } else {\n-                            callback.onFailure(new BlobStorageException(\"Response failed with error code: \" + response.code(),\n-                                response.raw()));\n+                            String strContent = readAsString(response.body());\n+\n+                            callback.onFailure(new BlobStorageException(strContent, response.raw()));\n                         }\n                     } else {\n                         String strContent = readAsString(response.errorBody());\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyNDA2OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/244#discussion_r441224069", "body": "since we need to change from `Call<Void>` to `Call<ResponseBody>` here instead of `response.body()` it should be `null`.", "bodyText": "since we need to change from Call<Void> to Call<ResponseBody> here instead of response.body() it should be null.", "bodyHTML": "<p dir=\"auto\">since we need to change from <code>Call&lt;Void&gt;</code> to <code>Call&lt;ResponseBody&gt;</code> here instead of <code>response.body()</code> it should be <code>null</code>.</p>", "author": "anuchandy", "createdAt": "2020-06-17T01:07:43Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1335,6 +1446,96 @@ public void onFailure(Call<ResponseBody> call, Throwable t) {\n         }\n     }\n \n+    private CallAndOptionalResult<BlobDeleteResponse> deleteWithRestResponseIntern(String containerName,\n+                                                                                   String blobName,\n+                                                                                   String snapshot,\n+                                                                                   Integer timeout,\n+                                                                                   String version,\n+                                                                                   String leaseId,\n+                                                                                   DeleteSnapshotsOptionType deleteSnapshots,\n+                                                                                   OffsetDateTime ifModifiedSince,\n+                                                                                   OffsetDateTime ifUnmodifiedSince,\n+                                                                                   String ifMatch,\n+                                                                                   String ifNoneMatch,\n+                                                                                   String requestId,\n+                                                                                   Callback<BlobDeleteResponse> callback) {\n+        DateTimeRfc1123 ifModifiedSinceConverted = ifModifiedSince == null ? null :\n+            new DateTimeRfc1123(ifModifiedSince);\n+        DateTimeRfc1123 ifUnmodifiedSinceConverted = ifUnmodifiedSince == null ? null :\n+            new DateTimeRfc1123(ifUnmodifiedSince);\n+\n+        Call<Void> call = service.delete(containerName,\n+            blobName,\n+            snapshot,\n+            timeout,\n+            leaseId,\n+            deleteSnapshots,\n+            ifModifiedSinceConverted,\n+            ifUnmodifiedSinceConverted,\n+            ifMatch,\n+            ifNoneMatch,\n+            XMS_VERSION, // TODO: Replace with 'version'.\n+            requestId);\n+\n+        if (callback != null) {\n+            executeCall(call, new retrofit2.Callback<Void>() {\n+                @Override\n+                public void onResponse(@NonNull Call<Void> call, @NonNull Response<Void> response) {\n+                    if (response.isSuccessful()) {\n+                        if (response.code() >= 200 && response.code() < 300) {\n+                            BlobDeleteHeaders typedHeaders = deserializeHeaders(response.headers(),\n+                                BlobDeleteHeaders.class);\n+\n+                            callback.onResponse(new BlobDeleteResponse(response.raw().request(),\n+                                response.code(),\n+                                response.headers(),\n+                                response.body(),", "originalCommit": "feb0690a4e64d58dea4b38cba26a2968820cb75d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9f066b7be1431d24271219b9b891d46739840e7", "changed_code": [{"header": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\nindex 8a60019cd..145016f92 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n", "chunk": "@@ -1478,22 +1484,23 @@ final class StorageBlobServiceImpl {\n             requestId);\n \n         if (callback != null) {\n-            executeCall(call, new retrofit2.Callback<Void>() {\n+            executeCall(call, new retrofit2.Callback<ResponseBody>() {\n                 @Override\n-                public void onResponse(@NonNull Call<Void> call, @NonNull Response<Void> response) {\n+                public void onResponse(@NonNull Call<ResponseBody> call, @NonNull Response<ResponseBody> response) {\n                     if (response.isSuccessful()) {\n-                        if (response.code() >= 200 && response.code() < 300) {\n+                        if (response.code() == 202) {\n                             BlobDeleteHeaders typedHeaders = deserializeHeaders(response.headers(),\n                                 BlobDeleteHeaders.class);\n \n                             callback.onResponse(new BlobDeleteResponse(response.raw().request(),\n                                 response.code(),\n                                 response.headers(),\n-                                response.body(),\n+                                null,\n                                 typedHeaders));\n                         } else {\n-                            callback.onFailure(new BlobStorageException(\"Response failed with error code: \" + response.code(),\n-                                response.raw()));\n+                            String strContent = readAsString(response.body());\n+\n+                            callback.onFailure(new BlobStorageException(strContent, response.raw()));\n                         }\n                     } else {\n                         String strContent = readAsString(response.errorBody());\n", "next_change": null}]}}, {"oid": "a9f066b7be1431d24271219b9b891d46739840e7", "url": "https://github.com/Azure/azure-sdk-for-android/commit/a9f066b7be1431d24271219b9b891d46739840e7", "message": "Addressed PR comments by @anuchandy.", "committedDate": "2020-06-18T05:53:49Z", "type": "commit"}, {"oid": "eaf169a066489c6f911c83e0a086e545bab1216d", "url": "https://github.com/Azure/azure-sdk-for-android/commit/eaf169a066489c6f911c83e0a086e545bab1216d", "message": "Modified the `getBlobProperties` API in the service interface to return a `ResponseBody` instead of `Void`.", "committedDate": "2020-06-18T07:26:34Z", "type": "commit"}, {"oid": "f5a4e7534c35804feadb7550823c065652a559e1", "url": "https://github.com/Azure/azure-sdk-for-android/commit/f5a4e7534c35804feadb7550823c065652a559e1", "message": "Added an API to undelete blobs.", "committedDate": "2020-06-18T07:51:56Z", "type": "commit"}, {"oid": "6a8bcb18998f73ad06718b1d5dd8f61d0de35c19", "url": "https://github.com/Azure/azure-sdk-for-android/commit/6a8bcb18998f73ad06718b1d5dd8f61d0de35c19", "message": "Removed the undelete API. Will create a separate PR for it.", "committedDate": "2020-06-19T21:28:13Z", "type": "commit"}, {"oid": "90b481a0998c4581dd62e88dadddf19e3d4dd207", "url": "https://github.com/Azure/azure-sdk-for-android/commit/90b481a0998c4581dd62e88dadddf19e3d4dd207", "message": "Merge branch 'dev' into delete-api", "committedDate": "2020-06-22T18:15:46Z", "type": "commit"}, {"oid": "c680a7877e9e53cdd50af0c73c3646bcc2cb4a16", "url": "https://github.com/Azure/azure-sdk-for-android/commit/c680a7877e9e53cdd50af0c73c3646bcc2cb4a16", "message": "Reverted the `getBlobProperties()` return type change from `Void` to `ResponseBody`. An OkHttp HEAD service call does not allow for a return type other than `Void`.", "committedDate": "2020-06-22T23:41:14Z", "type": "commit"}, {"oid": "22fdb0a61038aa128d002cd0e13058d5af85f3c1", "url": "https://github.com/Azure/azure-sdk-for-android/commit/22fdb0a61038aa128d002cd0e13058d5af85f3c1", "message": "Added unit tests for the delete API variants.", "committedDate": "2020-06-22T23:42:18Z", "type": "commit"}, {"oid": "0ab5d7dae614f08524e369aeca608cb570644dee", "url": "https://github.com/Azure/azure-sdk-for-android/commit/0ab5d7dae614f08524e369aeca608cb570644dee", "message": "Merge branch 'dev' into delete-api", "committedDate": "2020-06-23T00:18:19Z", "type": "commit"}]}