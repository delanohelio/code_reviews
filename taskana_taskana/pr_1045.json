{"pr_number": 1045, "pr_title": "TSK-1208", "pr_author": "krozzus", "pr_createdAt": "2020-04-30T19:30:16Z", "pr_url": "https://github.com/Taskana/taskana/pull/1045", "merge_commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "timeline": [{"oid": "84bae6de0f02d0e78c29f433897e8ec4c50821cd", "url": "https://github.com/Taskana/taskana/commit/84bae6de0f02d0e78c29f433897e8ec4c50821cd", "message": "lets shove these to the side", "committedDate": "2020-04-30T19:34:27Z", "type": "forcePushed"}, {"oid": "9ad3834ffb411a9a0a252f3c82e1be046cd6a058", "url": "https://github.com/Taskana/taskana/commit/9ad3834ffb411a9a0a252f3c82e1be046cd6a058", "message": "lets find those conflicts", "committedDate": "2020-04-30T19:29:15Z", "type": "forcePushed"}, {"oid": "69210d23de78a5593b144e52e6f0f35a62fafa45", "url": "https://github.com/Taskana/taskana/commit/69210d23de78a5593b144e52e6f0f35a62fafa45", "message": "lets shove these to the side", "committedDate": "2020-04-30T19:43:00Z", "type": "forcePushed"}, {"oid": "df154906d25fa5a1a0c1b2eb8371327341a1d421", "url": "https://github.com/Taskana/taskana/commit/df154906d25fa5a1a0c1b2eb8371327341a1d421", "message": "TSK-1208: changed HATE terminology and replaced list resources with generic one", "committedDate": "2020-04-30T19:44:41Z", "type": "forcePushed"}, {"oid": "6806ed31a3b44f35c7d29ba7fc52a9df445346a5", "url": "https://github.com/Taskana/taskana/commit/6806ed31a3b44f35c7d29ba7fc52a9df445346a5", "message": "TSK-1208: changed HATE terminology and replaced list resources with generic one", "committedDate": "2020-05-01T08:32:51Z", "type": "forcePushed"}, {"oid": "9d8096ca91c6c6b68c53cb0a7339b65218bea72c", "url": "https://github.com/Taskana/taskana/commit/9d8096ca91c6c6b68c53cb0a7339b65218bea72c", "message": "TSK-1208: changed HATE terminology and replaced list resources with generic one", "committedDate": "2020-05-02T21:12:55Z", "type": "forcePushed"}, {"oid": "6ea020a489adc18ba8e3a942e02a29e14e7c868b", "url": "https://github.com/Taskana/taskana/commit/6ea020a489adc18ba8e3a942e02a29e14e7c868b", "message": "TSK-1208 changed HATE terminology and replaced list resources with generic one", "committedDate": "2020-05-02T21:44:05Z", "type": "forcePushed"}, {"oid": "492f3730767bc19be9e5c4847548dd83c6ca00a8", "url": "https://github.com/Taskana/taskana/commit/492f3730767bc19be9e5c4847548dd83c6ca00a8", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one", "committedDate": "2020-05-03T10:03:27Z", "type": "forcePushed"}, {"oid": "8b69cf0667a4dd05fbb72e8af74bc5fe37c85657", "url": "https://github.com/Taskana/taskana/commit/8b69cf0667a4dd05fbb72e8af74bc5fe37c85657", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one", "committedDate": "2020-05-04T08:05:02Z", "type": "forcePushed"}, {"oid": "13559f812b364d43b88988a49944f5dea51dc702", "url": "https://github.com/Taskana/taskana/commit/13559f812b364d43b88988a49944f5dea51dc702", "message": "TSK-1208: reduced code duplication", "committedDate": "2020-05-05T10:51:45Z", "type": "forcePushed"}, {"oid": "d8eab0515687a22a754e9166832182c273e46f63", "url": "https://github.com/Taskana/taskana/commit/d8eab0515687a22a754e9166832182c273e46f63", "message": "TSK-1208: reduced code duplication", "committedDate": "2020-05-05T11:26:51Z", "type": "forcePushed"}, {"oid": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "url": "https://github.com/Taskana/taskana/commit/329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "message": "TSK-1208: reduced code duplication", "committedDate": "2020-05-07T16:31:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2MzIxMg==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r418463212", "body": "usersAndGroups.sort(\r\n        Comparator.comparing(\r\n            AccessIdRepresentationModel::getAccessId, String.CASE_INSENSITIVE_ORDER));", "bodyText": "usersAndGroups.sort(\nComparator.comparing(\nAccessIdRepresentationModel::getAccessId, String.CASE_INSENSITIVE_ORDER));", "bodyHTML": "<p dir=\"auto\">usersAndGroups.sort(<br>\nComparator.comparing(<br>\nAccessIdRepresentationModel::getAccessId, String.CASE_INSENSITIVE_ORDER));</p>", "author": "mustaphazorgati", "createdAt": "2020-05-01T08:38:06Z", "path": "rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java", "diffHunk": "@@ -331,19 +340,19 @@\n     }\n \n     usersAndGroups.sort(\n-        (AccessIdResource a, AccessIdResource b) -> {\n+        (AccessIdRepresentationModel a, AccessIdRepresentationModel b) -> {", "originalCommit": "6806ed31a3b44f35c7d29ba7fc52a9df445346a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13559f812b364d43b88988a49944f5dea51dc702", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java b/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\nindex 3be853e63..a7918d129 100644\n--- a/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\n+++ b/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\n", "chunk": "@@ -340,9 +340,9 @@ public class LdapCacheTestImpl implements LdapCache {\n     }\n \n     usersAndGroups.sort(\n-        (AccessIdRepresentationModel a, AccessIdRepresentationModel b) -> {\n-          return a.getAccessId().compareToIgnoreCase(b.getAccessId());\n-        });\n+        (AccessIdRepresentationModel a, AccessIdRepresentationModel b) -> a.getAccessId()\n+                                                                              .compareToIgnoreCase(\n+                                                                                  b.getAccessId()));\n \n     List<AccessIdRepresentationModel> result =\n         usersAndGroups.subList(0, Math.min(usersAndGroups.size(), maxNumberOfReturnedAccessIds));\n", "next_change": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java b/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\nindex a7918d129..3d6937bbd 100644\n--- a/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\n+++ b/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\n", "chunk": "@@ -340,14 +341,10 @@ public class LdapCacheTestImpl implements LdapCache {\n     }\n \n     usersAndGroups.sort(\n-        (AccessIdRepresentationModel a, AccessIdRepresentationModel b) -> a.getAccessId()\n-                                                                              .compareToIgnoreCase(\n-                                                                                  b.getAccessId()));\n+        Comparator.comparing(\n+            AccessIdRepresentationModel::getAccessId, String.CASE_INSENSITIVE_ORDER));\n \n-    List<AccessIdRepresentationModel> result =\n-        usersAndGroups.subList(0, Math.min(usersAndGroups.size(), maxNumberOfReturnedAccessIds));\n-\n-    return result;\n+    return usersAndGroups.subList(0, Math.min(usersAndGroups.size(), maxNumberOfReturnedAccessIds));\n   }\n \n   private Map<AccessIdRepresentationModel, List<AccessIdRepresentationModel>> addUsersToGroups() {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java b/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\nindex 3be853e63..3d6937bbd 100644\n--- a/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\n+++ b/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\n", "chunk": "@@ -340,24 +341,20 @@ public class LdapCacheTestImpl implements LdapCache {\n     }\n \n     usersAndGroups.sort(\n-        (AccessIdRepresentationModel a, AccessIdRepresentationModel b) -> {\n-          return a.getAccessId().compareToIgnoreCase(b.getAccessId());\n-        });\n-\n-    List<AccessIdRepresentationModel> result =\n-        usersAndGroups.subList(0, Math.min(usersAndGroups.size(), maxNumberOfReturnedAccessIds));\n+        Comparator.comparing(\n+            AccessIdRepresentationModel::getAccessId, String.CASE_INSENSITIVE_ORDER));\n \n-    return result;\n+    return usersAndGroups.subList(0, Math.min(usersAndGroups.size(), maxNumberOfReturnedAccessIds));\n   }\n \n   private Map<AccessIdRepresentationModel, List<AccessIdRepresentationModel>> addUsersToGroups() {\n     List<AccessIdRepresentationModel> groups = new ArrayList<>();\n-    Map<AccessIdRepresentationModel, List<AccessIdRepresentationModel>> users = new HashMap<>();\n+    Map<AccessIdRepresentationModel, List<AccessIdRepresentationModel>> userMap = new HashMap<>();\n \n     accessIds.forEach(\n         item -> {\n           if (!item.getAccessId().contains(\"ou=groups\")) {\n-            users.put(item, new ArrayList<>());\n+            userMap.put(item, new ArrayList<>());\n           } else {\n             groups.add(item);\n           }\n", "next_change": {"commit": "71c33670d66b8342a264827d4e3858962e4bcb3d", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java b/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\nindex 3d6937bbd..d90ad6dc3 100644\n--- a/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\n+++ b/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\n", "chunk": "@@ -19,395 +19,377 @@ import pro.taskana.rest.resource.AccessIdRepresentationModel;\n @Component\n public class LdapCacheTestImpl implements LdapCache {\n \n-  /**\n-   * Dictionary is a {@link Map} collection that contains {@link AccessIdRepresentationModel} as key\n-   * (user) and {@link List} as value (groups of which the user is a member) .\n-   */\n-  private Map<AccessIdRepresentationModel, List<AccessIdRepresentationModel>> users;\n+    /**\n+     * Dictionary is a {@link Map} collection that contains {@link AccessIdResource} as key (user)\n+     * and {@link List<AccessIdResource>} as value (groups of which the user is a member) .\n+     */\n+    private static Map<AccessIdResource, List<AccessIdResource>> users;\n+    private static List<AccessIdResource> accessIds = new ArrayList<>(Arrays.asList(\n+        new AccessIdResource(\"Martin, Rojas Miguel Angel\", \"user_1_1\"),\n+        new AccessIdResource(\"Zorgati, Mustapha\", \"user_2_1\"),\n+        new AccessIdResource(\"Behrendt, Maximilian\", \"max\"),\n+        new AccessIdResource(\"Bert, Ali\", \"teamlead_5\"),\n+        new AccessIdResource(\"Hagen, Holger\", \"teamlead_3\"),\n+        new AccessIdResource(\"Breier, Bernd\", \"user_2_2\"),\n+        new AccessIdResource(\"Fielmalz, Anke\", \"user017\"),\n+        new AccessIdResource(\"Mente, Maximilian\", \"max_mente\"),\n+        new AccessIdResource(\"Theke, Bernd\", \"user_2_3\"),\n+        new AccessIdResource(\"Ferrante, Elena\", \"elena\"),\n+        new AccessIdResource(\"Mueller, Simone\", \"simone\"),\n+        new AccessIdResource(\"Sirup, Aaron\", \"user001\"),\n+        new AccessIdResource(\"Nacho, recuerda\", \"user_1_2\"),\n+        new AccessIdResource(\"Lass, Ada\", \"user003\"),\n+        new AccessIdResource(\"Tion, Addi\", \"user004\"),\n+        new AccessIdResource(\"Lette, Adi\", \"user005\"),\n+        new AccessIdResource(\"Admin\", \"teamlead_2\"),\n+        new AccessIdResource(\"Native, Alter\", \"user006\"),\n+        new AccessIdResource(\"Herum, Albert\", \"user007\"),\n+        new AccessIdResource(\"Meyer, Dominik\", \"teamlead_1\"),\n+        new AccessIdResource(\"Mente, Ali\", \"user009\"),\n+        new AccessIdResource(\"Nach, Alma\", \"user011\"),\n+        new AccessIdResource(\"Gehzauch, Anders\", \"user012\"),\n+        new AccessIdResource(\"Theke, Andi\", \"user013\"),\n+        new AccessIdResource(\"Kreuz, Andreas\", \"user014\"),\n+        new AccessIdResource(\"Tiefsee, Anka\", \"user016\"),\n+        new AccessIdResource(\"Fassen, Ann\", \"user018\"),\n+        new AccessIdResource(\"Probe, Ann\", \"user019\"),\n+        new AccessIdResource(\"Bolika, Anna\", \"user020\"),\n+        new AccessIdResource(\"Ecke, Anna\", \"user021\"),\n+        new AccessIdResource(\"Hosi, Anna\", \"user022\"),\n+        new AccessIdResource(\"Kronis-Tisch, Anna\", \"user023\"),\n+        new AccessIdResource(\"Logie, Anna\", \"user024\"),\n+        new AccessIdResource(\"Luehse, Anna\", \"user025\"),\n+        new AccessIdResource(\"Nass, Anna\", \"user026\"),\n+        new AccessIdResource(\"Thalb, Anna\", \"user027\"),\n+        new AccessIdResource(\"Tomie, Anna\", \"user028\"),\n+        new AccessIdResource(\"Donnich, Anne\", \"user029\"),\n+        new AccessIdResource(\"Kaffek, Anne\", \"user030\"),\n+        new AccessIdResource(\"Thek, Anne\", \"user031\"),\n+        new AccessIdResource(\"Matoer, Anni\", \"user032\"),\n+        new AccessIdResource(\"Ragentor, Ansgar\", \"user033\"),\n+        new AccessIdResource(\"Stoteles, Ari\", \"user034\"),\n+        new AccessIdResource(\"Thmetik, Ari\", \"user035\"),\n+        new AccessIdResource(\"Nuehm, Arno\", \"user036\"),\n+        new AccessIdResource(\"Schocke, Artie\", \"user037\"),\n+        new AccessIdResource(\"Stoppel, Bart\", \"user038\"),\n+        new AccessIdResource(\"Beitung, Bea\", \"user039\"),\n+        new AccessIdResource(\"Ildich, Bea\", \"user040\"),\n+        new AccessIdResource(\"Vista, Bella\", \"user041\"),\n+        new AccessIdResource(\"Utzer, Ben\", \"user042\"),\n+        new AccessIdResource(\"Zien, Ben\", \"user043\"),\n+        new AccessIdResource(\"Stein, Bernd\", \"user044\"),\n+        new AccessIdResource(\"Deramen, Bill\", \"user045\"),\n+        new AccessIdResource(\"Honig, Bine\", \"user046\"),\n+        new AccessIdResource(\"Densatz, Bo\", \"user047\"),\n+        new AccessIdResource(\"Densee, Bo\", \"user048\"),\n+        new AccessIdResource(\"Lerwagen, Bo\", \"user049\"),\n+        new AccessIdResource(\"Tail, Bob\", \"user050\"),\n+        new AccessIdResource(\"Ketta, Bruce\", \"user051\"),\n+        new AccessIdResource(\"Terrie, Bud\", \"user052\"),\n+        new AccessIdResource(\"Biener-Haken, Cara\", \"user053\"),\n+        new AccessIdResource(\"Ass, Caro\", \"user054\"),\n+        new AccessIdResource(\"Kaffee, Caro\", \"user055\"),\n+        new AccessIdResource(\"Linger, Caro\", \"user056\"),\n+        new AccessIdResource(\"tenSaft, Caro\", \"user057\"),\n+        new AccessIdResource(\"Antheme, Chris\", \"user058\"),\n+        new AccessIdResource(\"Baum, Chris\", \"user059\"),\n+        new AccessIdResource(\"Tall, Chris\", \"user060\"),\n+        new AccessIdResource(\"Reiniger, Claas\", \"user061\"),\n+        new AccessIdResource(\"Grube, Claire\", \"user062\"),\n+        new AccessIdResource(\"Fall, Clara\", \"user063\"),\n+        new AccessIdResource(\"Korn, Clara\", \"user064\"),\n+        new AccessIdResource(\"Lenriff, Cora\", \"user065\"),\n+        new AccessIdResource(\"Schiert, Cora\", \"user066\"),\n+        new AccessIdResource(\"Hose, Cord\", \"user067\"),\n+        new AccessIdResource(\"Onbleu, Cord\", \"user068\"),\n+        new AccessIdResource(\"Umkleide, Damon\", \"user069\"),\n+        new AccessIdResource(\"Affier, Dean\", \"user070\"),\n+        new AccessIdResource(\"Orm, Dean\", \"user071\"),\n+        new AccessIdResource(\"Platz, Dennis\", \"user072\"),\n+        new AccessIdResource(\"Milch, Dick\", \"user073\"),\n+        new AccessIdResource(\"Mow, Dina\", \"user074\"),\n+        new AccessIdResource(\"Keil, Donna\", \"user075\"),\n+        new AccessIdResource(\"Littchen, Donna\", \"user076\"),\n+        new AccessIdResource(\"Wetter, Donna\", \"user077\"),\n+        new AccessIdResource(\"Was, Ed\", \"user078\"),\n+        new AccessIdResource(\"Khar, Ede\", \"user079\"),\n+        new AccessIdResource(\"Nut, Ella\", \"user080\"),\n+        new AccessIdResource(\"Stisch, Ella\", \"user081\"),\n+        new AccessIdResource(\"Diel, Emma\", \"user082\"),\n+        new AccessIdResource(\"Herdamit, Emma\", \"user083\"),\n+        new AccessIdResource(\"Mitter-Uhe, Emma\", \"user084\"),\n+        new AccessIdResource(\"Tatt, Erich\", \"user085\"),\n+        new AccessIdResource(\"Drigend, Ernie\", \"user086\"),\n+        new AccessIdResource(\"Poly, Esther\", \"user087\"),\n+        new AccessIdResource(\"Trautz, Eugen\", \"user088\"),\n+        new AccessIdResource(\"Quiert, Eva\", \"user089\"),\n+        new AccessIdResource(\"Inurlaub, Fatma\", \"user090\"),\n+        new AccessIdResource(\"Land, Finn\", \"user091\"),\n+        new AccessIdResource(\"Sternis, Finn\", \"user092\"),\n+        new AccessIdResource(\"Furt, Frank\", \"user093\"),\n+        new AccessIdResource(\"Reich, Frank\", \"user094\"),\n+        new AccessIdResource(\"Iskaner, Franz\", \"user095\"),\n+        new AccessIdResource(\"Nerr, Franziska\", \"user096\"),\n+        new AccessIdResource(\"Zafen, Friedrich\", \"user097\"),\n+        new AccessIdResource(\"Pomm, Fritz\", \"user098\"),\n+        new AccessIdResource(\"deWegs, Gera\", \"user099\"),\n+        new AccessIdResource(\"Staebe, Gitta\", \"user100\"),\n+        new AccessIdResource(\"Zend, Glenn\", \"user101\"),\n+        new AccessIdResource(\"Fisch, Grete\", \"user102\"),\n+        new AccessIdResource(\"Zucker, Gus\", \"user103\"),\n+        new AccessIdResource(\"Muhn, Hanni\", \"user104\"),\n+        new AccessIdResource(\"Fermesse, Hanno\", \"user105\"),\n+        new AccessIdResource(\"Aplast, Hans\", \"user106\"),\n+        new AccessIdResource(\"Eart, Hans\", \"user107\"),\n+        new AccessIdResource(\"Back, Hardy\", \"user108\"),\n+        new AccessIdResource(\"Beau, Harry\", \"user109\"),\n+        new AccessIdResource(\"Kraut, Heide\", \"user110\"),\n+        new AccessIdResource(\"Witzka, Heide\", \"user111\"),\n+        new AccessIdResource(\"Buchen, Hein\", \"user112\"),\n+        new AccessIdResource(\"Lichkeit, Hein\", \"user113\"),\n+        new AccessIdResource(\"Suchung, Hein\", \"user114\"),\n+        new AccessIdResource(\"Ellmann, Heinz\", \"user115\"),\n+        new AccessIdResource(\"Ketchup, Heinz\", \"user116\"),\n+        new AccessIdResource(\"Zeim, Hilde\", \"user117\"),\n+        new AccessIdResource(\"Bilien, Immo\", \"user118\"),\n+        new AccessIdResource(\"Her, Inge\", \"user119\"),\n+        new AccessIdResource(\"Wahrsam, Inge\", \"user120\"),\n+        new AccessIdResource(\"Flamm, Ingo\", \"user121\"),\n+        new AccessIdResource(\"Enzien, Ingrid\", \"user122\"),\n+        new AccessIdResource(\"Rohsch, Inken\", \"user123\"),\n+        new AccessIdResource(\"Ihr, Insa\", \"user124\"),\n+        new AccessIdResource(\"Nerda, Iska\", \"user125\"),\n+        new AccessIdResource(\"Eitz, Jens\", \"user126\"),\n+        new AccessIdResource(\"Nastik, Jim\", \"user127\"),\n+        new AccessIdResource(\"Gurt, Jo\", \"user128\"),\n+        new AccessIdResource(\"Kurrth, Jo\", \"user129\"),\n+        new AccessIdResource(\"Kolade, Joe\", \"user130\"),\n+        new AccessIdResource(\"Iter, Johann\", \"user131\"),\n+        new AccessIdResource(\"Tick, Joyce\", \"user132\"),\n+        new AccessIdResource(\"Case, Justin\", \"user133\"),\n+        new AccessIdResource(\"Time, Justin\", \"user134\"),\n+        new AccessIdResource(\"Komp, Jutta\", \"user135\"),\n+        new AccessIdResource(\"Mauer, Kai\", \"user136\"),\n+        new AccessIdResource(\"Pirinja, Kai\", \"user137\"),\n+        new AccessIdResource(\"Serpfalz, Kai\", \"user138\"),\n+        new AccessIdResource(\"Auer, Karl\", \"user139\"),\n+        new AccessIdResource(\"Ielauge, Karl\", \"user140\"),\n+        new AccessIdResource(\"Ifornjen, Karl\", \"user141\"),\n+        new AccessIdResource(\"Radi, Karl\", \"user142\"),\n+        new AccessIdResource(\"Verti, Karl\", \"user143\"),\n+        new AccessIdResource(\"Sery, Karo\", \"user144\"),\n+        new AccessIdResource(\"Lisator, Katha\", \"user145\"),\n+        new AccessIdResource(\"Flo, Kati\", \"user146\"),\n+        new AccessIdResource(\"Schenn, Knut\", \"user147\"),\n+        new AccessIdResource(\"Achse, Kurt\", \"user148\"),\n+        new AccessIdResource(\"Zepause, Kurt\", \"user149\"),\n+        new AccessIdResource(\"Zerr, Kurt\", \"user150\"),\n+        new AccessIdResource(\"Reden, Lasse\", \"user151\"),\n+        new AccessIdResource(\"Metten, Lee\", \"user152\"),\n+        new AccessIdResource(\"Arm, Lene\", \"user153\"),\n+        new AccessIdResource(\"Thur, Linnea\", \"user154\"),\n+        new AccessIdResource(\"Bonn, Lisa\", \"user155\"),\n+        new AccessIdResource(\"Sembourg, Luc\", \"user156\"),\n+        new AccessIdResource(\"Rung, Lucky\", \"user157\"),\n+        new AccessIdResource(\"Zafen, Ludwig\", \"user158\"),\n+        new AccessIdResource(\"Hauden, Lukas\", \"user159\"),\n+        new AccessIdResource(\"Hose, Lutz\", \"user160\"),\n+        new AccessIdResource(\"Tablette, Lutz\", \"user161\"),\n+        new AccessIdResource(\"Fehr, Luzie\", \"user162\"),\n+        new AccessIdResource(\"Nalyse, Magda\", \"user163\"),\n+        new AccessIdResource(\"Ehfer, Maik\", \"user164\"),\n+        new AccessIdResource(\"Sehr, Malte\", \"user165\"),\n+        new AccessIdResource(\"Thon, Mara\", \"user166\"),\n+        new AccessIdResource(\"Quark, Marga\", \"user167\"),\n+        new AccessIdResource(\"Nade, Marie\", \"user168\"),\n+        new AccessIdResource(\"Niert, Marie\", \"user169\"),\n+        new AccessIdResource(\"Neese, Mario\", \"user170\"),\n+        new AccessIdResource(\"Nette, Marion\", \"user171\"),\n+        new AccessIdResource(\"Nesium, Mark\", \"user172\"),\n+        new AccessIdResource(\"Thalle, Mark\", \"user173\"),\n+        new AccessIdResource(\"Diven, Marle\", \"user174\"),\n+        new AccessIdResource(\"Fitz, Marle\", \"user175\"),\n+        new AccessIdResource(\"Pfahl, Marta\", \"user176\"),\n+        new AccessIdResource(\"Zorn, Martin\", \"user177\"),\n+        new AccessIdResource(\"Krissmes, Mary\", \"user178\"),\n+        new AccessIdResource(\"Jess, Matt\", \"user179\"),\n+        new AccessIdResource(\"Strammer, Max\", \"user180\"),\n+        new AccessIdResource(\"Mumm, Maxi\", \"user181\"),\n+        new AccessIdResource(\"Morphose, Meta\", \"user182\"),\n+        new AccessIdResource(\"Uh, Mia\", \"user183\"),\n+        new AccessIdResource(\"Rofon, Mike\", \"user184\"),\n+        new AccessIdResource(\"Rosoft, Mike\", \"user185\"),\n+        new AccessIdResource(\"Liter, Milli\", \"user186\"),\n+        new AccessIdResource(\"Th\u00e4r, Milli\", \"user187\"),\n+        new AccessIdResource(\"Welle, Mirko\", \"user188\"),\n+        new AccessIdResource(\"Thorat, Mo\", \"user189\"),\n+        new AccessIdResource(\"Thor, Moni\", \"user190\"),\n+        new AccessIdResource(\"Kinolta, Monika\", \"user191\"),\n+        new AccessIdResource(\"Mundhaar, Monika\", \"user192\"),\n+        new AccessIdResource(\"Munter, Monika\", \"user193\"),\n+        new AccessIdResource(\"Zwerg, Nat\", \"user194\"),\n+        new AccessIdResource(\"Elmine, Nick\", \"user195\"),\n+        new AccessIdResource(\"Thien, Niko\", \"user196\"),\n+        new AccessIdResource(\"Pferd, Nils\", \"user197\"),\n+        new AccessIdResource(\"Lerweise, Norma\", \"user198\"),\n+        new AccessIdResource(\"Motor, Otto\", \"user199\"),\n+        new AccessIdResource(\"Totol, Otto\", \"user200\"),\n+        new AccessIdResource(\"Nerr, Paula\", \"user201\"),\n+        new AccessIdResource(\"Imeter, Peer\", \"user202\"),\n+        new AccessIdResource(\"Serkatze, Peer\", \"user203\"),\n+        new AccessIdResource(\"Gogisch, Peter\", \"user204\"),\n+        new AccessIdResource(\"Silje, Peter\", \"user205\"),\n+        new AccessIdResource(\"Harmonie, Phil\", \"user206\"),\n+        new AccessIdResource(\"Ihnen, Philip\", \"user207\"),\n+        new AccessIdResource(\"Uto, Pia\", \"user208\"),\n+        new AccessIdResource(\"Kothek, Pina\", \"user209\"),\n+        new AccessIdResource(\"Zar, Pit\", \"user210\"),\n+        new AccessIdResource(\"Zeih, Polly\", \"user211\"),\n+        new AccessIdResource(\"Tswan, Puh\", \"user212\"),\n+        new AccessIdResource(\"Zufall, Rainer\", \"user213\"),\n+        new AccessIdResource(\"Lien, Rita\", \"user214\"),\n+        new AccessIdResource(\"Held, Roman\", \"user215\"),\n+        new AccessIdResource(\"Haar, Ross\", \"user216\"),\n+        new AccessIdResource(\"Dick, Roy\", \"user217\"),\n+        new AccessIdResource(\"Enplaner, Ruth\", \"user218\"),\n+        new AccessIdResource(\"Kommen, Ryan\", \"user219\"),\n+        new AccessIdResource(\"Philo, Sophie\", \"user220\"),\n+        new AccessIdResource(\"Matisier, Stig\", \"user221\"),\n+        new AccessIdResource(\"Loniki, Tessa\", \"user222\"),\n+        new AccessIdResource(\"Tralisch, Thea\", \"user223\"),\n+        new AccessIdResource(\"Logie, Theo\", \"user224\"),\n+        new AccessIdResource(\"Ister, Thorn\", \"user225\"),\n+        new AccessIdResource(\"Buktu, Tim\", \"user226\"),\n+        new AccessIdResource(\"Ate, Tom\", \"user227\"),\n+        new AccessIdResource(\"Pie, Udo\", \"user228\"),\n+        new AccessIdResource(\"Aloe, Vera\", \"user229\"),\n+        new AccessIdResource(\"Hausver, Walter\", \"user230\"),\n+        new AccessIdResource(\"Schuh, Wanda\", \"user231\"),\n+        new AccessIdResource(\"Rahm, Wolf\", \"user232\"),\n \n-  private final List<AccessIdRepresentationModel> accessIds =\n-      new ArrayList<>(\n-          Arrays.asList(\n-              new AccessIdRepresentationModel(\"Martin, Rojas Miguel Angel\", \"user_1_1\"),\n-              new AccessIdRepresentationModel(\"Zorgati, Mustapha\", \"user_2_1\"),\n-              new AccessIdRepresentationModel(\"Behrendt, Maximilian\", \"max\"),\n-              new AccessIdRepresentationModel(\"Bert, Ali\", \"teamlead_5\"),\n-              new AccessIdRepresentationModel(\"Hagen, Holger\", \"teamlead_3\"),\n-              new AccessIdRepresentationModel(\"Breier, Bernd\", \"user_2_2\"),\n-              new AccessIdRepresentationModel(\"Fielmalz, Anke\", \"user017\"),\n-              new AccessIdRepresentationModel(\"Mente, Maximilian\", \"max_mente\"),\n-              new AccessIdRepresentationModel(\"Theke, Bernd\", \"user_2_3\"),\n-              new AccessIdRepresentationModel(\"Ferrante, Elena\", \"elena\"),\n-              new AccessIdRepresentationModel(\"Mueller, Simone\", \"simone\"),\n-              new AccessIdRepresentationModel(\"Sirup, Aaron\", \"user001\"),\n-              new AccessIdRepresentationModel(\"Nacho, recuerda\", \"user_1_2\"),\n-              new AccessIdRepresentationModel(\"Lass, Ada\", \"user003\"),\n-              new AccessIdRepresentationModel(\"Tion, Addi\", \"user004\"),\n-              new AccessIdRepresentationModel(\"Lette, Adi\", \"user005\"),\n-              new AccessIdRepresentationModel(\"Admin\", \"teamlead_2\"),\n-              new AccessIdRepresentationModel(\"Native, Alter\", \"user006\"),\n-              new AccessIdRepresentationModel(\"Herum, Albert\", \"user007\"),\n-              new AccessIdRepresentationModel(\"Meyer, Dominik\", \"teamlead_1\"),\n-              new AccessIdRepresentationModel(\"Mente, Ali\", \"user009\"),\n-              new AccessIdRepresentationModel(\"Nach, Alma\", \"user011\"),\n-              new AccessIdRepresentationModel(\"Gehzauch, Anders\", \"user012\"),\n-              new AccessIdRepresentationModel(\"Theke, Andi\", \"user013\"),\n-              new AccessIdRepresentationModel(\"Kreuz, Andreas\", \"user014\"),\n-              new AccessIdRepresentationModel(\"Tiefsee, Anka\", \"user016\"),\n-              new AccessIdRepresentationModel(\"Fassen, Ann\", \"user018\"),\n-              new AccessIdRepresentationModel(\"Probe, Ann\", \"user019\"),\n-              new AccessIdRepresentationModel(\"Bolika, Anna\", \"user020\"),\n-              new AccessIdRepresentationModel(\"Ecke, Anna\", \"user021\"),\n-              new AccessIdRepresentationModel(\"Hosi, Anna\", \"user022\"),\n-              new AccessIdRepresentationModel(\"Kronis-Tisch, Anna\", \"user023\"),\n-              new AccessIdRepresentationModel(\"Logie, Anna\", \"user024\"),\n-              new AccessIdRepresentationModel(\"Luehse, Anna\", \"user025\"),\n-              new AccessIdRepresentationModel(\"Nass, Anna\", \"user026\"),\n-              new AccessIdRepresentationModel(\"Thalb, Anna\", \"user027\"),\n-              new AccessIdRepresentationModel(\"Tomie, Anna\", \"user028\"),\n-              new AccessIdRepresentationModel(\"Donnich, Anne\", \"user029\"),\n-              new AccessIdRepresentationModel(\"Kaffek, Anne\", \"user030\"),\n-              new AccessIdRepresentationModel(\"Thek, Anne\", \"user031\"),\n-              new AccessIdRepresentationModel(\"Matoer, Anni\", \"user032\"),\n-              new AccessIdRepresentationModel(\"Ragentor, Ansgar\", \"user033\"),\n-              new AccessIdRepresentationModel(\"Stoteles, Ari\", \"user034\"),\n-              new AccessIdRepresentationModel(\"Thmetik, Ari\", \"user035\"),\n-              new AccessIdRepresentationModel(\"Nuehm, Arno\", \"user036\"),\n-              new AccessIdRepresentationModel(\"Schocke, Artie\", \"user037\"),\n-              new AccessIdRepresentationModel(\"Stoppel, Bart\", \"user038\"),\n-              new AccessIdRepresentationModel(\"Beitung, Bea\", \"user039\"),\n-              new AccessIdRepresentationModel(\"Ildich, Bea\", \"user040\"),\n-              new AccessIdRepresentationModel(\"Vista, Bella\", \"user041\"),\n-              new AccessIdRepresentationModel(\"Utzer, Ben\", \"user042\"),\n-              new AccessIdRepresentationModel(\"Zien, Ben\", \"user043\"),\n-              new AccessIdRepresentationModel(\"Stein, Bernd\", \"user044\"),\n-              new AccessIdRepresentationModel(\"Deramen, Bill\", \"user045\"),\n-              new AccessIdRepresentationModel(\"Honig, Bine\", \"user046\"),\n-              new AccessIdRepresentationModel(\"Densatz, Bo\", \"user047\"),\n-              new AccessIdRepresentationModel(\"Densee, Bo\", \"user048\"),\n-              new AccessIdRepresentationModel(\"Lerwagen, Bo\", \"user049\"),\n-              new AccessIdRepresentationModel(\"Tail, Bob\", \"user050\"),\n-              new AccessIdRepresentationModel(\"Ketta, Bruce\", \"user051\"),\n-              new AccessIdRepresentationModel(\"Terrie, Bud\", \"user052\"),\n-              new AccessIdRepresentationModel(\"Biener-Haken, Cara\", \"user053\"),\n-              new AccessIdRepresentationModel(\"Ass, Caro\", \"user054\"),\n-              new AccessIdRepresentationModel(\"Kaffee, Caro\", \"user055\"),\n-              new AccessIdRepresentationModel(\"Linger, Caro\", \"user056\"),\n-              new AccessIdRepresentationModel(\"tenSaft, Caro\", \"user057\"),\n-              new AccessIdRepresentationModel(\"Antheme, Chris\", \"user058\"),\n-              new AccessIdRepresentationModel(\"Baum, Chris\", \"user059\"),\n-              new AccessIdRepresentationModel(\"Tall, Chris\", \"user060\"),\n-              new AccessIdRepresentationModel(\"Reiniger, Claas\", \"user061\"),\n-              new AccessIdRepresentationModel(\"Grube, Claire\", \"user062\"),\n-              new AccessIdRepresentationModel(\"Fall, Clara\", \"user063\"),\n-              new AccessIdRepresentationModel(\"Korn, Clara\", \"user064\"),\n-              new AccessIdRepresentationModel(\"Lenriff, Cora\", \"user065\"),\n-              new AccessIdRepresentationModel(\"Schiert, Cora\", \"user066\"),\n-              new AccessIdRepresentationModel(\"Hose, Cord\", \"user067\"),\n-              new AccessIdRepresentationModel(\"Onbleu, Cord\", \"user068\"),\n-              new AccessIdRepresentationModel(\"Umkleide, Damon\", \"user069\"),\n-              new AccessIdRepresentationModel(\"Affier, Dean\", \"user070\"),\n-              new AccessIdRepresentationModel(\"Orm, Dean\", \"user071\"),\n-              new AccessIdRepresentationModel(\"Platz, Dennis\", \"user072\"),\n-              new AccessIdRepresentationModel(\"Milch, Dick\", \"user073\"),\n-              new AccessIdRepresentationModel(\"Mow, Dina\", \"user074\"),\n-              new AccessIdRepresentationModel(\"Keil, Donna\", \"user075\"),\n-              new AccessIdRepresentationModel(\"Littchen, Donna\", \"user076\"),\n-              new AccessIdRepresentationModel(\"Wetter, Donna\", \"user077\"),\n-              new AccessIdRepresentationModel(\"Was, Ed\", \"user078\"),\n-              new AccessIdRepresentationModel(\"Khar, Ede\", \"user079\"),\n-              new AccessIdRepresentationModel(\"Nut, Ella\", \"user080\"),\n-              new AccessIdRepresentationModel(\"Stisch, Ella\", \"user081\"),\n-              new AccessIdRepresentationModel(\"Diel, Emma\", \"user082\"),\n-              new AccessIdRepresentationModel(\"Herdamit, Emma\", \"user083\"),\n-              new AccessIdRepresentationModel(\"Mitter-Uhe, Emma\", \"user084\"),\n-              new AccessIdRepresentationModel(\"Tatt, Erich\", \"user085\"),\n-              new AccessIdRepresentationModel(\"Drigend, Ernie\", \"user086\"),\n-              new AccessIdRepresentationModel(\"Poly, Esther\", \"user087\"),\n-              new AccessIdRepresentationModel(\"Trautz, Eugen\", \"user088\"),\n-              new AccessIdRepresentationModel(\"Quiert, Eva\", \"user089\"),\n-              new AccessIdRepresentationModel(\"Inurlaub, Fatma\", \"user090\"),\n-              new AccessIdRepresentationModel(\"Land, Finn\", \"user091\"),\n-              new AccessIdRepresentationModel(\"Sternis, Finn\", \"user092\"),\n-              new AccessIdRepresentationModel(\"Furt, Frank\", \"user093\"),\n-              new AccessIdRepresentationModel(\"Reich, Frank\", \"user094\"),\n-              new AccessIdRepresentationModel(\"Iskaner, Franz\", \"user095\"),\n-              new AccessIdRepresentationModel(\"Nerr, Franziska\", \"user096\"),\n-              new AccessIdRepresentationModel(\"Zafen, Friedrich\", \"user097\"),\n-              new AccessIdRepresentationModel(\"Pomm, Fritz\", \"user098\"),\n-              new AccessIdRepresentationModel(\"deWegs, Gera\", \"user099\"),\n-              new AccessIdRepresentationModel(\"Staebe, Gitta\", \"user100\"),\n-              new AccessIdRepresentationModel(\"Zend, Glenn\", \"user101\"),\n-              new AccessIdRepresentationModel(\"Fisch, Grete\", \"user102\"),\n-              new AccessIdRepresentationModel(\"Zucker, Gus\", \"user103\"),\n-              new AccessIdRepresentationModel(\"Muhn, Hanni\", \"user104\"),\n-              new AccessIdRepresentationModel(\"Fermesse, Hanno\", \"user105\"),\n-              new AccessIdRepresentationModel(\"Aplast, Hans\", \"user106\"),\n-              new AccessIdRepresentationModel(\"Eart, Hans\", \"user107\"),\n-              new AccessIdRepresentationModel(\"Back, Hardy\", \"user108\"),\n-              new AccessIdRepresentationModel(\"Beau, Harry\", \"user109\"),\n-              new AccessIdRepresentationModel(\"Kraut, Heide\", \"user110\"),\n-              new AccessIdRepresentationModel(\"Witzka, Heide\", \"user111\"),\n-              new AccessIdRepresentationModel(\"Buchen, Hein\", \"user112\"),\n-              new AccessIdRepresentationModel(\"Lichkeit, Hein\", \"user113\"),\n-              new AccessIdRepresentationModel(\"Suchung, Hein\", \"user114\"),\n-              new AccessIdRepresentationModel(\"Ellmann, Heinz\", \"user115\"),\n-              new AccessIdRepresentationModel(\"Ketchup, Heinz\", \"user116\"),\n-              new AccessIdRepresentationModel(\"Zeim, Hilde\", \"user117\"),\n-              new AccessIdRepresentationModel(\"Bilien, Immo\", \"user118\"),\n-              new AccessIdRepresentationModel(\"Her, Inge\", \"user119\"),\n-              new AccessIdRepresentationModel(\"Wahrsam, Inge\", \"user120\"),\n-              new AccessIdRepresentationModel(\"Flamm, Ingo\", \"user121\"),\n-              new AccessIdRepresentationModel(\"Enzien, Ingrid\", \"user122\"),\n-              new AccessIdRepresentationModel(\"Rohsch, Inken\", \"user123\"),\n-              new AccessIdRepresentationModel(\"Ihr, Insa\", \"user124\"),\n-              new AccessIdRepresentationModel(\"Nerda, Iska\", \"user125\"),\n-              new AccessIdRepresentationModel(\"Eitz, Jens\", \"user126\"),\n-              new AccessIdRepresentationModel(\"Nastik, Jim\", \"user127\"),\n-              new AccessIdRepresentationModel(\"Gurt, Jo\", \"user128\"),\n-              new AccessIdRepresentationModel(\"Kurrth, Jo\", \"user129\"),\n-              new AccessIdRepresentationModel(\"Kolade, Joe\", \"user130\"),\n-              new AccessIdRepresentationModel(\"Iter, Johann\", \"user131\"),\n-              new AccessIdRepresentationModel(\"Tick, Joyce\", \"user132\"),\n-              new AccessIdRepresentationModel(\"Case, Justin\", \"user133\"),\n-              new AccessIdRepresentationModel(\"Time, Justin\", \"user134\"),\n-              new AccessIdRepresentationModel(\"Komp, Jutta\", \"user135\"),\n-              new AccessIdRepresentationModel(\"Mauer, Kai\", \"user136\"),\n-              new AccessIdRepresentationModel(\"Pirinja, Kai\", \"user137\"),\n-              new AccessIdRepresentationModel(\"Serpfalz, Kai\", \"user138\"),\n-              new AccessIdRepresentationModel(\"Auer, Karl\", \"user139\"),\n-              new AccessIdRepresentationModel(\"Ielauge, Karl\", \"user140\"),\n-              new AccessIdRepresentationModel(\"Ifornjen, Karl\", \"user141\"),\n-              new AccessIdRepresentationModel(\"Radi, Karl\", \"user142\"),\n-              new AccessIdRepresentationModel(\"Verti, Karl\", \"user143\"),\n-              new AccessIdRepresentationModel(\"Sery, Karo\", \"user144\"),\n-              new AccessIdRepresentationModel(\"Lisator, Katha\", \"user145\"),\n-              new AccessIdRepresentationModel(\"Flo, Kati\", \"user146\"),\n-              new AccessIdRepresentationModel(\"Schenn, Knut\", \"user147\"),\n-              new AccessIdRepresentationModel(\"Achse, Kurt\", \"user148\"),\n-              new AccessIdRepresentationModel(\"Zepause, Kurt\", \"user149\"),\n-              new AccessIdRepresentationModel(\"Zerr, Kurt\", \"user150\"),\n-              new AccessIdRepresentationModel(\"Reden, Lasse\", \"user151\"),\n-              new AccessIdRepresentationModel(\"Metten, Lee\", \"user152\"),\n-              new AccessIdRepresentationModel(\"Arm, Lene\", \"user153\"),\n-              new AccessIdRepresentationModel(\"Thur, Linnea\", \"user154\"),\n-              new AccessIdRepresentationModel(\"Bonn, Lisa\", \"user155\"),\n-              new AccessIdRepresentationModel(\"Sembourg, Luc\", \"user156\"),\n-              new AccessIdRepresentationModel(\"Rung, Lucky\", \"user157\"),\n-              new AccessIdRepresentationModel(\"Zafen, Ludwig\", \"user158\"),\n-              new AccessIdRepresentationModel(\"Hauden, Lukas\", \"user159\"),\n-              new AccessIdRepresentationModel(\"Hose, Lutz\", \"user160\"),\n-              new AccessIdRepresentationModel(\"Tablette, Lutz\", \"user161\"),\n-              new AccessIdRepresentationModel(\"Fehr, Luzie\", \"user162\"),\n-              new AccessIdRepresentationModel(\"Nalyse, Magda\", \"user163\"),\n-              new AccessIdRepresentationModel(\"Ehfer, Maik\", \"user164\"),\n-              new AccessIdRepresentationModel(\"Sehr, Malte\", \"user165\"),\n-              new AccessIdRepresentationModel(\"Thon, Mara\", \"user166\"),\n-              new AccessIdRepresentationModel(\"Quark, Marga\", \"user167\"),\n-              new AccessIdRepresentationModel(\"Nade, Marie\", \"user168\"),\n-              new AccessIdRepresentationModel(\"Niert, Marie\", \"user169\"),\n-              new AccessIdRepresentationModel(\"Neese, Mario\", \"user170\"),\n-              new AccessIdRepresentationModel(\"Nette, Marion\", \"user171\"),\n-              new AccessIdRepresentationModel(\"Nesium, Mark\", \"user172\"),\n-              new AccessIdRepresentationModel(\"Thalle, Mark\", \"user173\"),\n-              new AccessIdRepresentationModel(\"Diven, Marle\", \"user174\"),\n-              new AccessIdRepresentationModel(\"Fitz, Marle\", \"user175\"),\n-              new AccessIdRepresentationModel(\"Pfahl, Marta\", \"user176\"),\n-              new AccessIdRepresentationModel(\"Zorn, Martin\", \"user177\"),\n-              new AccessIdRepresentationModel(\"Krissmes, Mary\", \"user178\"),\n-              new AccessIdRepresentationModel(\"Jess, Matt\", \"user179\"),\n-              new AccessIdRepresentationModel(\"Strammer, Max\", \"user180\"),\n-              new AccessIdRepresentationModel(\"Mumm, Maxi\", \"user181\"),\n-              new AccessIdRepresentationModel(\"Morphose, Meta\", \"user182\"),\n-              new AccessIdRepresentationModel(\"Uh, Mia\", \"user183\"),\n-              new AccessIdRepresentationModel(\"Rofon, Mike\", \"user184\"),\n-              new AccessIdRepresentationModel(\"Rosoft, Mike\", \"user185\"),\n-              new AccessIdRepresentationModel(\"Liter, Milli\", \"user186\"),\n-              new AccessIdRepresentationModel(\"Th\u00e4r, Milli\", \"user187\"),\n-              new AccessIdRepresentationModel(\"Welle, Mirko\", \"user188\"),\n-              new AccessIdRepresentationModel(\"Thorat, Mo\", \"user189\"),\n-              new AccessIdRepresentationModel(\"Thor, Moni\", \"user190\"),\n-              new AccessIdRepresentationModel(\"Kinolta, Monika\", \"user191\"),\n-              new AccessIdRepresentationModel(\"Mundhaar, Monika\", \"user192\"),\n-              new AccessIdRepresentationModel(\"Munter, Monika\", \"user193\"),\n-              new AccessIdRepresentationModel(\"Zwerg, Nat\", \"user194\"),\n-              new AccessIdRepresentationModel(\"Elmine, Nick\", \"user195\"),\n-              new AccessIdRepresentationModel(\"Thien, Niko\", \"user196\"),\n-              new AccessIdRepresentationModel(\"Pferd, Nils\", \"user197\"),\n-              new AccessIdRepresentationModel(\"Lerweise, Norma\", \"user198\"),\n-              new AccessIdRepresentationModel(\"Motor, Otto\", \"user199\"),\n-              new AccessIdRepresentationModel(\"Totol, Otto\", \"user200\"),\n-              new AccessIdRepresentationModel(\"Nerr, Paula\", \"user201\"),\n-              new AccessIdRepresentationModel(\"Imeter, Peer\", \"user202\"),\n-              new AccessIdRepresentationModel(\"Serkatze, Peer\", \"user203\"),\n-              new AccessIdRepresentationModel(\"Gogisch, Peter\", \"user204\"),\n-              new AccessIdRepresentationModel(\"Silje, Peter\", \"user205\"),\n-              new AccessIdRepresentationModel(\"Harmonie, Phil\", \"user206\"),\n-              new AccessIdRepresentationModel(\"Ihnen, Philip\", \"user207\"),\n-              new AccessIdRepresentationModel(\"Uto, Pia\", \"user208\"),\n-              new AccessIdRepresentationModel(\"Kothek, Pina\", \"user209\"),\n-              new AccessIdRepresentationModel(\"Zar, Pit\", \"user210\"),\n-              new AccessIdRepresentationModel(\"Zeih, Polly\", \"user211\"),\n-              new AccessIdRepresentationModel(\"Tswan, Puh\", \"user212\"),\n-              new AccessIdRepresentationModel(\"Zufall, Rainer\", \"user213\"),\n-              new AccessIdRepresentationModel(\"Lien, Rita\", \"user214\"),\n-              new AccessIdRepresentationModel(\"Held, Roman\", \"user215\"),\n-              new AccessIdRepresentationModel(\"Haar, Ross\", \"user216\"),\n-              new AccessIdRepresentationModel(\"Dick, Roy\", \"user217\"),\n-              new AccessIdRepresentationModel(\"Enplaner, Ruth\", \"user218\"),\n-              new AccessIdRepresentationModel(\"Kommen, Ryan\", \"user219\"),\n-              new AccessIdRepresentationModel(\"Philo, Sophie\", \"user220\"),\n-              new AccessIdRepresentationModel(\"Matisier, Stig\", \"user221\"),\n-              new AccessIdRepresentationModel(\"Loniki, Tessa\", \"user222\"),\n-              new AccessIdRepresentationModel(\"Tralisch, Thea\", \"user223\"),\n-              new AccessIdRepresentationModel(\"Logie, Theo\", \"user224\"),\n-              new AccessIdRepresentationModel(\"Ister, Thorn\", \"user225\"),\n-              new AccessIdRepresentationModel(\"Buktu, Tim\", \"user226\"),\n-              new AccessIdRepresentationModel(\"Ate, Tom\", \"user227\"),\n-              new AccessIdRepresentationModel(\"Pie, Udo\", \"user228\"),\n-              new AccessIdRepresentationModel(\"Aloe, Vera\", \"user229\"),\n-              new AccessIdRepresentationModel(\"Hausver, Walter\", \"user230\"),\n-              new AccessIdRepresentationModel(\"Schuh, Wanda\", \"user231\"),\n-              new AccessIdRepresentationModel(\"Rahm, Wolf\", \"user232\"),\n-              new AccessIdRepresentationModel(\n-                  \"businessadmin\", \"cn=businessadmin,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"UsersGroup\", \"cn=usersgroup,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"DevelopersGroup\", \"cn=developersgroup,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"businessadmin\", \"cn=customersgroup,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"user_domain_A\", \"cn=user_domain_a,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\"monitor\", \"cn=monitor,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"user_domain_C\", \"cn=user_domain_c,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"user_domain_D\", \"cn=user_domain_d,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\"admin\", \"cn=admin,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"manager_domain_B\", \"cn=manager_domain_b,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"manager_domain_C\", \"cn=manager_domain_c,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"manager_domain_D\", \"cn=manager_domain_d,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"teamlead_2\", \"cn=teamlead_2\" + \",ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"teamlead_4\", \"cn=teamlead_4\" + \",ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\"team_3\", \"cn=team_3\" + \",ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\"team_4\", \"cn=team_4\" + \",ou=groups,o=taskanatest\")));\n+        new AccessIdResource(\"businessadmin\", \"cn=businessadmin,ou=groups,o=taskanatest\"),\n+        new AccessIdResource(\"UsersGroup\", \"cn=usersgroup,ou=groups,o=taskanatest\"),\n+        new AccessIdResource(\"DevelopersGroup\", \"cn=developersgroup,ou=groups,o=taskanatest\"),\n+        new AccessIdResource(\"businessadmin\", \"cn=customersgroup,ou=groups,o=taskanatest\"),\n \n-  @Override\n-  public List<AccessIdRepresentationModel> findMatchingAccessId(\n-      String searchFor, int maxNumberOfReturnedAccessIds) {\n-    return findAcessIdResource(searchFor, maxNumberOfReturnedAccessIds, false);\n-  }\n+        new AccessIdResource(\"user_domain_A\", \"cn=user_domain_a,ou=groups,o=taskanatest\"),\n+        new AccessIdResource(\"monitor\", \"cn=monitor,ou=groups,o=taskanatest\"),\n+        new AccessIdResource(\"user_domain_C\", \"cn=user_domain_c,ou=groups,o=taskanatest\"),\n+        new AccessIdResource(\"user_domain_D\", \"cn=user_domain_d,ou=groups,o=taskanatest\"),\n \n-  @Override\n-  public List<AccessIdRepresentationModel> findGroupsOfUser(\n-      String searchFor, int maxNumberOfReturnedAccessIds) {\n-    if (users == null) {\n-      users = addUsersToGroups();\n-    }\n-    return findAcessIdResource(searchFor, maxNumberOfReturnedAccessIds, true);\n-  }\n+        new AccessIdResource(\"admin\", \"cn=admin,ou=groups,o=taskanatest\"),\n+        new AccessIdResource(\"manager_domain_B\", \"cn=manager_domain_b,ou=groups,o=taskanatest\"),\n+        new AccessIdResource(\"manager_domain_C\", \"cn=manager_domain_c,ou=groups,o=taskanatest\"),\n+        new AccessIdResource(\"manager_domain_D\", \"cn=manager_domain_d,ou=groups,o=taskanatest\"),\n \n-  @Override\n-  public List<AccessIdRepresentationModel> validateAccessId(String accessId) {\n-    return accessIds.stream()\n-        .filter(t -> (t.getAccessId().equalsIgnoreCase(accessId.toLowerCase())))\n-        .collect(Collectors.toList());\n-  }\n+        new AccessIdResource(\"teamlead_2\", \"cn=teamlead_2\" + \",ou=groups,o=taskanatest\"),\n+        new AccessIdResource(\"teamlead_4\", \"cn=teamlead_4\" + \",ou=groups,o=taskanatest\"),\n+        new AccessIdResource(\"team_3\", \"cn=team_3\" + \",ou=groups,o=taskanatest\"),\n+        new AccessIdResource(\"team_4\", \"cn=team_4\" + \",ou=groups,o=taskanatest\")));\n \n-  private List<AccessIdRepresentationModel> findAcessIdResource(\n-      String searchFor, int maxNumberOfReturnedAccessIds, boolean groupMember) {\n-    List<AccessIdRepresentationModel> usersAndGroups =\n-        accessIds.stream()\n-            .filter(\n-                t ->\n-                    (t.getName().toLowerCase().contains(searchFor.toLowerCase())\n-                        || t.getAccessId().toLowerCase().contains(searchFor.toLowerCase())))\n-            .collect(Collectors.toList());\n+    @Override\n+    public List<AccessIdResource> findMatchingAccessId(String searchFor, int maxNumberOfReturnedAccessIds) {\n+        return findAcessIdResource(searchFor, maxNumberOfReturnedAccessIds, false);\n+    }\n \n-    List<AccessIdRepresentationModel> usersAndGroupsAux = new ArrayList<>(usersAndGroups);\n-    if (groupMember) {\n-      usersAndGroupsAux.forEach(\n-          item -> {\n-            if (users.get(item) != null) {\n-              usersAndGroups.addAll(users.get(item));\n-            }\n-          });\n+    @Override\n+    public List<AccessIdResource> findGroupsOfUser(String searchFor, int maxNumberOfReturnedAccessIds) {\n+        if (users == null) {\n+            addUsersToGroups();\n+        }\n+        return findAcessIdResource(searchFor, maxNumberOfReturnedAccessIds, true);\n     }\n \n-    usersAndGroups.sort(\n-        Comparator.comparing(\n-            AccessIdRepresentationModel::getAccessId, String.CASE_INSENSITIVE_ORDER));\n+    @Override\n+    public List<AccessIdResource> validateAccessId(String accessId) {\n+        return accessIds.stream()\n+            .filter(t -> (t.getAccessId().equalsIgnoreCase(accessId.toLowerCase())))\n+            .collect(Collectors.toList());\n+    }\n \n-    return usersAndGroups.subList(0, Math.min(usersAndGroups.size(), maxNumberOfReturnedAccessIds));\n-  }\n+    private List<AccessIdResource> findAcessIdResource(String searchFor, int maxNumberOfReturnedAccessIds,\n+        boolean groupMember) {\n+        List<AccessIdResource> usersAndGroups = accessIds.stream()\n+            .filter(t -> (t.getName().toLowerCase().contains(searchFor.toLowerCase())\n+                || t.getAccessId().toLowerCase().contains(searchFor.toLowerCase())))\n+            .collect(Collectors.toList());\n \n-  private Map<AccessIdRepresentationModel, List<AccessIdRepresentationModel>> addUsersToGroups() {\n-    List<AccessIdRepresentationModel> groups = new ArrayList<>();\n-    Map<AccessIdRepresentationModel, List<AccessIdRepresentationModel>> userMap = new HashMap<>();\n+        List<AccessIdResource> usersAndGroupsAux = new ArrayList<>(usersAndGroups);\n+        if (groupMember) {\n+            usersAndGroupsAux.forEach(item -> {\n+                if (users.get(item) != null) {\n+                    usersAndGroups.addAll(users.get(item));\n+                }\n+            });\n+        }\n \n-    accessIds.forEach(\n-        item -> {\n-          if (!item.getAccessId().contains(\"ou=groups\")) {\n-            userMap.put(item, new ArrayList<>());\n-          } else {\n-            groups.add(item);\n-          }\n+        usersAndGroups.sort((AccessIdResource a, AccessIdResource b) -> {\n+            return a.getAccessId().compareToIgnoreCase(b.getAccessId());\n         });\n \n-    int groupNumber = 0;\n-    List<AccessIdRepresentationModel> group0 = new ArrayList<>();\n-    List<AccessIdRepresentationModel> group1 = new ArrayList<>();\n-    List<AccessIdRepresentationModel> group2 = new ArrayList<>();\n-    List<AccessIdRepresentationModel> group3 = new ArrayList<>();\n+        List<AccessIdResource> result = usersAndGroups.subList(0,\n+            Math.min(usersAndGroups.size(), maxNumberOfReturnedAccessIds));\n \n-    for (AccessIdRepresentationModel group : groups) {\n-      switch (groupNumber) {\n-        case 0:\n-          group0.add(group);\n-          break;\n-        case 1:\n-          group1.add(group);\n-          break;\n-        case 2:\n-          group2.add(group);\n-          break;\n-        case 3:\n-          group3.add(group);\n-          break;\n-        default:\n-          break;\n-      }\n-      groupNumber = (groupNumber + 1) % 4;\n+        return result;\n     }\n \n-    int countUser = 0;\n-    for (AccessIdRepresentationModel item : accessIds) {\n-      if (!item.getAccessId().contains(\"ou=groups\")) {\n-        switch (countUser) {\n-          case 0:\n-            userMap.put(item, group0);\n-            break;\n-          case 1:\n-            userMap.put(item, group1);\n-            break;\n-          case 2:\n-            userMap.put(item, group2);\n-            break;\n-          case 3:\n-            userMap.put(item, group3);\n-            break;\n-          default:\n-            break;\n+    private void addUsersToGroups() {\n+        List<AccessIdResource> groups = new ArrayList<>();\n+        users = new HashMap<>();\n+\n+        accessIds.forEach(item -> {\n+            if (!item.getAccessId().contains(\"ou=groups\")) {\n+                users.put(item, new ArrayList<>());\n+            } else {\n+                groups.add(item);\n+            }\n+        });\n+\n+        int groupNumber = 0;\n+        List<AccessIdResource> group0 = new ArrayList<>(), group1 = new ArrayList<>(), group2 = new ArrayList<>(), group3 = new ArrayList<>();\n+\n+        for (AccessIdResource group : groups) {\n+            switch (groupNumber) {\n+                case 0:\n+                    group0.add(group);\n+                    break;\n+                case 1:\n+                    group1.add(group);\n+                    break;\n+                case 2:\n+                    group2.add(group);\n+                    break;\n+                case 3:\n+                    group3.add(group);\n+                    break;\n+                default:\n+                    break;\n+            }\n+            groupNumber = (groupNumber + 1) % 4;\n+        }\n+\n+        int countUser = 0;\n+        for (AccessIdResource item : accessIds) {\n+            if (!item.getAccessId().contains(\"ou=groups\")) {\n+                switch (countUser) {\n+                    case 0:\n+                        users.put(item, group0);\n+                        break;\n+                    case 1:\n+                        users.put(item, group1);\n+                        break;\n+                    case 2:\n+                        users.put(item, group2);\n+                        break;\n+                    case 3:\n+                        users.put(item, group3);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            }\n+            countUser = (countUser + 1) % 4;\n         }\n-      }\n-      countUser = (countUser + 1) % 4;\n     }\n-    return userMap;\n-  }\n+\n }\n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java b/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\nindex d90ad6dc3..79f88618a 100644\n--- a/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\n+++ b/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\n", "chunk": "@@ -19,377 +18,389 @@ import pro.taskana.rest.resource.AccessIdResource;\n @Component\n public class LdapCacheTestImpl implements LdapCache {\n \n-    /**\n-     * Dictionary is a {@link Map} collection that contains {@link AccessIdResource} as key (user)\n-     * and {@link List<AccessIdResource>} as value (groups of which the user is a member) .\n-     */\n-    private static Map<AccessIdResource, List<AccessIdResource>> users;\n-    private static List<AccessIdResource> accessIds = new ArrayList<>(Arrays.asList(\n-        new AccessIdResource(\"Martin, Rojas Miguel Angel\", \"user_1_1\"),\n-        new AccessIdResource(\"Zorgati, Mustapha\", \"user_2_1\"),\n-        new AccessIdResource(\"Behrendt, Maximilian\", \"max\"),\n-        new AccessIdResource(\"Bert, Ali\", \"teamlead_5\"),\n-        new AccessIdResource(\"Hagen, Holger\", \"teamlead_3\"),\n-        new AccessIdResource(\"Breier, Bernd\", \"user_2_2\"),\n-        new AccessIdResource(\"Fielmalz, Anke\", \"user017\"),\n-        new AccessIdResource(\"Mente, Maximilian\", \"max_mente\"),\n-        new AccessIdResource(\"Theke, Bernd\", \"user_2_3\"),\n-        new AccessIdResource(\"Ferrante, Elena\", \"elena\"),\n-        new AccessIdResource(\"Mueller, Simone\", \"simone\"),\n-        new AccessIdResource(\"Sirup, Aaron\", \"user001\"),\n-        new AccessIdResource(\"Nacho, recuerda\", \"user_1_2\"),\n-        new AccessIdResource(\"Lass, Ada\", \"user003\"),\n-        new AccessIdResource(\"Tion, Addi\", \"user004\"),\n-        new AccessIdResource(\"Lette, Adi\", \"user005\"),\n-        new AccessIdResource(\"Admin\", \"teamlead_2\"),\n-        new AccessIdResource(\"Native, Alter\", \"user006\"),\n-        new AccessIdResource(\"Herum, Albert\", \"user007\"),\n-        new AccessIdResource(\"Meyer, Dominik\", \"teamlead_1\"),\n-        new AccessIdResource(\"Mente, Ali\", \"user009\"),\n-        new AccessIdResource(\"Nach, Alma\", \"user011\"),\n-        new AccessIdResource(\"Gehzauch, Anders\", \"user012\"),\n-        new AccessIdResource(\"Theke, Andi\", \"user013\"),\n-        new AccessIdResource(\"Kreuz, Andreas\", \"user014\"),\n-        new AccessIdResource(\"Tiefsee, Anka\", \"user016\"),\n-        new AccessIdResource(\"Fassen, Ann\", \"user018\"),\n-        new AccessIdResource(\"Probe, Ann\", \"user019\"),\n-        new AccessIdResource(\"Bolika, Anna\", \"user020\"),\n-        new AccessIdResource(\"Ecke, Anna\", \"user021\"),\n-        new AccessIdResource(\"Hosi, Anna\", \"user022\"),\n-        new AccessIdResource(\"Kronis-Tisch, Anna\", \"user023\"),\n-        new AccessIdResource(\"Logie, Anna\", \"user024\"),\n-        new AccessIdResource(\"Luehse, Anna\", \"user025\"),\n-        new AccessIdResource(\"Nass, Anna\", \"user026\"),\n-        new AccessIdResource(\"Thalb, Anna\", \"user027\"),\n-        new AccessIdResource(\"Tomie, Anna\", \"user028\"),\n-        new AccessIdResource(\"Donnich, Anne\", \"user029\"),\n-        new AccessIdResource(\"Kaffek, Anne\", \"user030\"),\n-        new AccessIdResource(\"Thek, Anne\", \"user031\"),\n-        new AccessIdResource(\"Matoer, Anni\", \"user032\"),\n-        new AccessIdResource(\"Ragentor, Ansgar\", \"user033\"),\n-        new AccessIdResource(\"Stoteles, Ari\", \"user034\"),\n-        new AccessIdResource(\"Thmetik, Ari\", \"user035\"),\n-        new AccessIdResource(\"Nuehm, Arno\", \"user036\"),\n-        new AccessIdResource(\"Schocke, Artie\", \"user037\"),\n-        new AccessIdResource(\"Stoppel, Bart\", \"user038\"),\n-        new AccessIdResource(\"Beitung, Bea\", \"user039\"),\n-        new AccessIdResource(\"Ildich, Bea\", \"user040\"),\n-        new AccessIdResource(\"Vista, Bella\", \"user041\"),\n-        new AccessIdResource(\"Utzer, Ben\", \"user042\"),\n-        new AccessIdResource(\"Zien, Ben\", \"user043\"),\n-        new AccessIdResource(\"Stein, Bernd\", \"user044\"),\n-        new AccessIdResource(\"Deramen, Bill\", \"user045\"),\n-        new AccessIdResource(\"Honig, Bine\", \"user046\"),\n-        new AccessIdResource(\"Densatz, Bo\", \"user047\"),\n-        new AccessIdResource(\"Densee, Bo\", \"user048\"),\n-        new AccessIdResource(\"Lerwagen, Bo\", \"user049\"),\n-        new AccessIdResource(\"Tail, Bob\", \"user050\"),\n-        new AccessIdResource(\"Ketta, Bruce\", \"user051\"),\n-        new AccessIdResource(\"Terrie, Bud\", \"user052\"),\n-        new AccessIdResource(\"Biener-Haken, Cara\", \"user053\"),\n-        new AccessIdResource(\"Ass, Caro\", \"user054\"),\n-        new AccessIdResource(\"Kaffee, Caro\", \"user055\"),\n-        new AccessIdResource(\"Linger, Caro\", \"user056\"),\n-        new AccessIdResource(\"tenSaft, Caro\", \"user057\"),\n-        new AccessIdResource(\"Antheme, Chris\", \"user058\"),\n-        new AccessIdResource(\"Baum, Chris\", \"user059\"),\n-        new AccessIdResource(\"Tall, Chris\", \"user060\"),\n-        new AccessIdResource(\"Reiniger, Claas\", \"user061\"),\n-        new AccessIdResource(\"Grube, Claire\", \"user062\"),\n-        new AccessIdResource(\"Fall, Clara\", \"user063\"),\n-        new AccessIdResource(\"Korn, Clara\", \"user064\"),\n-        new AccessIdResource(\"Lenriff, Cora\", \"user065\"),\n-        new AccessIdResource(\"Schiert, Cora\", \"user066\"),\n-        new AccessIdResource(\"Hose, Cord\", \"user067\"),\n-        new AccessIdResource(\"Onbleu, Cord\", \"user068\"),\n-        new AccessIdResource(\"Umkleide, Damon\", \"user069\"),\n-        new AccessIdResource(\"Affier, Dean\", \"user070\"),\n-        new AccessIdResource(\"Orm, Dean\", \"user071\"),\n-        new AccessIdResource(\"Platz, Dennis\", \"user072\"),\n-        new AccessIdResource(\"Milch, Dick\", \"user073\"),\n-        new AccessIdResource(\"Mow, Dina\", \"user074\"),\n-        new AccessIdResource(\"Keil, Donna\", \"user075\"),\n-        new AccessIdResource(\"Littchen, Donna\", \"user076\"),\n-        new AccessIdResource(\"Wetter, Donna\", \"user077\"),\n-        new AccessIdResource(\"Was, Ed\", \"user078\"),\n-        new AccessIdResource(\"Khar, Ede\", \"user079\"),\n-        new AccessIdResource(\"Nut, Ella\", \"user080\"),\n-        new AccessIdResource(\"Stisch, Ella\", \"user081\"),\n-        new AccessIdResource(\"Diel, Emma\", \"user082\"),\n-        new AccessIdResource(\"Herdamit, Emma\", \"user083\"),\n-        new AccessIdResource(\"Mitter-Uhe, Emma\", \"user084\"),\n-        new AccessIdResource(\"Tatt, Erich\", \"user085\"),\n-        new AccessIdResource(\"Drigend, Ernie\", \"user086\"),\n-        new AccessIdResource(\"Poly, Esther\", \"user087\"),\n-        new AccessIdResource(\"Trautz, Eugen\", \"user088\"),\n-        new AccessIdResource(\"Quiert, Eva\", \"user089\"),\n-        new AccessIdResource(\"Inurlaub, Fatma\", \"user090\"),\n-        new AccessIdResource(\"Land, Finn\", \"user091\"),\n-        new AccessIdResource(\"Sternis, Finn\", \"user092\"),\n-        new AccessIdResource(\"Furt, Frank\", \"user093\"),\n-        new AccessIdResource(\"Reich, Frank\", \"user094\"),\n-        new AccessIdResource(\"Iskaner, Franz\", \"user095\"),\n-        new AccessIdResource(\"Nerr, Franziska\", \"user096\"),\n-        new AccessIdResource(\"Zafen, Friedrich\", \"user097\"),\n-        new AccessIdResource(\"Pomm, Fritz\", \"user098\"),\n-        new AccessIdResource(\"deWegs, Gera\", \"user099\"),\n-        new AccessIdResource(\"Staebe, Gitta\", \"user100\"),\n-        new AccessIdResource(\"Zend, Glenn\", \"user101\"),\n-        new AccessIdResource(\"Fisch, Grete\", \"user102\"),\n-        new AccessIdResource(\"Zucker, Gus\", \"user103\"),\n-        new AccessIdResource(\"Muhn, Hanni\", \"user104\"),\n-        new AccessIdResource(\"Fermesse, Hanno\", \"user105\"),\n-        new AccessIdResource(\"Aplast, Hans\", \"user106\"),\n-        new AccessIdResource(\"Eart, Hans\", \"user107\"),\n-        new AccessIdResource(\"Back, Hardy\", \"user108\"),\n-        new AccessIdResource(\"Beau, Harry\", \"user109\"),\n-        new AccessIdResource(\"Kraut, Heide\", \"user110\"),\n-        new AccessIdResource(\"Witzka, Heide\", \"user111\"),\n-        new AccessIdResource(\"Buchen, Hein\", \"user112\"),\n-        new AccessIdResource(\"Lichkeit, Hein\", \"user113\"),\n-        new AccessIdResource(\"Suchung, Hein\", \"user114\"),\n-        new AccessIdResource(\"Ellmann, Heinz\", \"user115\"),\n-        new AccessIdResource(\"Ketchup, Heinz\", \"user116\"),\n-        new AccessIdResource(\"Zeim, Hilde\", \"user117\"),\n-        new AccessIdResource(\"Bilien, Immo\", \"user118\"),\n-        new AccessIdResource(\"Her, Inge\", \"user119\"),\n-        new AccessIdResource(\"Wahrsam, Inge\", \"user120\"),\n-        new AccessIdResource(\"Flamm, Ingo\", \"user121\"),\n-        new AccessIdResource(\"Enzien, Ingrid\", \"user122\"),\n-        new AccessIdResource(\"Rohsch, Inken\", \"user123\"),\n-        new AccessIdResource(\"Ihr, Insa\", \"user124\"),\n-        new AccessIdResource(\"Nerda, Iska\", \"user125\"),\n-        new AccessIdResource(\"Eitz, Jens\", \"user126\"),\n-        new AccessIdResource(\"Nastik, Jim\", \"user127\"),\n-        new AccessIdResource(\"Gurt, Jo\", \"user128\"),\n-        new AccessIdResource(\"Kurrth, Jo\", \"user129\"),\n-        new AccessIdResource(\"Kolade, Joe\", \"user130\"),\n-        new AccessIdResource(\"Iter, Johann\", \"user131\"),\n-        new AccessIdResource(\"Tick, Joyce\", \"user132\"),\n-        new AccessIdResource(\"Case, Justin\", \"user133\"),\n-        new AccessIdResource(\"Time, Justin\", \"user134\"),\n-        new AccessIdResource(\"Komp, Jutta\", \"user135\"),\n-        new AccessIdResource(\"Mauer, Kai\", \"user136\"),\n-        new AccessIdResource(\"Pirinja, Kai\", \"user137\"),\n-        new AccessIdResource(\"Serpfalz, Kai\", \"user138\"),\n-        new AccessIdResource(\"Auer, Karl\", \"user139\"),\n-        new AccessIdResource(\"Ielauge, Karl\", \"user140\"),\n-        new AccessIdResource(\"Ifornjen, Karl\", \"user141\"),\n-        new AccessIdResource(\"Radi, Karl\", \"user142\"),\n-        new AccessIdResource(\"Verti, Karl\", \"user143\"),\n-        new AccessIdResource(\"Sery, Karo\", \"user144\"),\n-        new AccessIdResource(\"Lisator, Katha\", \"user145\"),\n-        new AccessIdResource(\"Flo, Kati\", \"user146\"),\n-        new AccessIdResource(\"Schenn, Knut\", \"user147\"),\n-        new AccessIdResource(\"Achse, Kurt\", \"user148\"),\n-        new AccessIdResource(\"Zepause, Kurt\", \"user149\"),\n-        new AccessIdResource(\"Zerr, Kurt\", \"user150\"),\n-        new AccessIdResource(\"Reden, Lasse\", \"user151\"),\n-        new AccessIdResource(\"Metten, Lee\", \"user152\"),\n-        new AccessIdResource(\"Arm, Lene\", \"user153\"),\n-        new AccessIdResource(\"Thur, Linnea\", \"user154\"),\n-        new AccessIdResource(\"Bonn, Lisa\", \"user155\"),\n-        new AccessIdResource(\"Sembourg, Luc\", \"user156\"),\n-        new AccessIdResource(\"Rung, Lucky\", \"user157\"),\n-        new AccessIdResource(\"Zafen, Ludwig\", \"user158\"),\n-        new AccessIdResource(\"Hauden, Lukas\", \"user159\"),\n-        new AccessIdResource(\"Hose, Lutz\", \"user160\"),\n-        new AccessIdResource(\"Tablette, Lutz\", \"user161\"),\n-        new AccessIdResource(\"Fehr, Luzie\", \"user162\"),\n-        new AccessIdResource(\"Nalyse, Magda\", \"user163\"),\n-        new AccessIdResource(\"Ehfer, Maik\", \"user164\"),\n-        new AccessIdResource(\"Sehr, Malte\", \"user165\"),\n-        new AccessIdResource(\"Thon, Mara\", \"user166\"),\n-        new AccessIdResource(\"Quark, Marga\", \"user167\"),\n-        new AccessIdResource(\"Nade, Marie\", \"user168\"),\n-        new AccessIdResource(\"Niert, Marie\", \"user169\"),\n-        new AccessIdResource(\"Neese, Mario\", \"user170\"),\n-        new AccessIdResource(\"Nette, Marion\", \"user171\"),\n-        new AccessIdResource(\"Nesium, Mark\", \"user172\"),\n-        new AccessIdResource(\"Thalle, Mark\", \"user173\"),\n-        new AccessIdResource(\"Diven, Marle\", \"user174\"),\n-        new AccessIdResource(\"Fitz, Marle\", \"user175\"),\n-        new AccessIdResource(\"Pfahl, Marta\", \"user176\"),\n-        new AccessIdResource(\"Zorn, Martin\", \"user177\"),\n-        new AccessIdResource(\"Krissmes, Mary\", \"user178\"),\n-        new AccessIdResource(\"Jess, Matt\", \"user179\"),\n-        new AccessIdResource(\"Strammer, Max\", \"user180\"),\n-        new AccessIdResource(\"Mumm, Maxi\", \"user181\"),\n-        new AccessIdResource(\"Morphose, Meta\", \"user182\"),\n-        new AccessIdResource(\"Uh, Mia\", \"user183\"),\n-        new AccessIdResource(\"Rofon, Mike\", \"user184\"),\n-        new AccessIdResource(\"Rosoft, Mike\", \"user185\"),\n-        new AccessIdResource(\"Liter, Milli\", \"user186\"),\n-        new AccessIdResource(\"Th\u00e4r, Milli\", \"user187\"),\n-        new AccessIdResource(\"Welle, Mirko\", \"user188\"),\n-        new AccessIdResource(\"Thorat, Mo\", \"user189\"),\n-        new AccessIdResource(\"Thor, Moni\", \"user190\"),\n-        new AccessIdResource(\"Kinolta, Monika\", \"user191\"),\n-        new AccessIdResource(\"Mundhaar, Monika\", \"user192\"),\n-        new AccessIdResource(\"Munter, Monika\", \"user193\"),\n-        new AccessIdResource(\"Zwerg, Nat\", \"user194\"),\n-        new AccessIdResource(\"Elmine, Nick\", \"user195\"),\n-        new AccessIdResource(\"Thien, Niko\", \"user196\"),\n-        new AccessIdResource(\"Pferd, Nils\", \"user197\"),\n-        new AccessIdResource(\"Lerweise, Norma\", \"user198\"),\n-        new AccessIdResource(\"Motor, Otto\", \"user199\"),\n-        new AccessIdResource(\"Totol, Otto\", \"user200\"),\n-        new AccessIdResource(\"Nerr, Paula\", \"user201\"),\n-        new AccessIdResource(\"Imeter, Peer\", \"user202\"),\n-        new AccessIdResource(\"Serkatze, Peer\", \"user203\"),\n-        new AccessIdResource(\"Gogisch, Peter\", \"user204\"),\n-        new AccessIdResource(\"Silje, Peter\", \"user205\"),\n-        new AccessIdResource(\"Harmonie, Phil\", \"user206\"),\n-        new AccessIdResource(\"Ihnen, Philip\", \"user207\"),\n-        new AccessIdResource(\"Uto, Pia\", \"user208\"),\n-        new AccessIdResource(\"Kothek, Pina\", \"user209\"),\n-        new AccessIdResource(\"Zar, Pit\", \"user210\"),\n-        new AccessIdResource(\"Zeih, Polly\", \"user211\"),\n-        new AccessIdResource(\"Tswan, Puh\", \"user212\"),\n-        new AccessIdResource(\"Zufall, Rainer\", \"user213\"),\n-        new AccessIdResource(\"Lien, Rita\", \"user214\"),\n-        new AccessIdResource(\"Held, Roman\", \"user215\"),\n-        new AccessIdResource(\"Haar, Ross\", \"user216\"),\n-        new AccessIdResource(\"Dick, Roy\", \"user217\"),\n-        new AccessIdResource(\"Enplaner, Ruth\", \"user218\"),\n-        new AccessIdResource(\"Kommen, Ryan\", \"user219\"),\n-        new AccessIdResource(\"Philo, Sophie\", \"user220\"),\n-        new AccessIdResource(\"Matisier, Stig\", \"user221\"),\n-        new AccessIdResource(\"Loniki, Tessa\", \"user222\"),\n-        new AccessIdResource(\"Tralisch, Thea\", \"user223\"),\n-        new AccessIdResource(\"Logie, Theo\", \"user224\"),\n-        new AccessIdResource(\"Ister, Thorn\", \"user225\"),\n-        new AccessIdResource(\"Buktu, Tim\", \"user226\"),\n-        new AccessIdResource(\"Ate, Tom\", \"user227\"),\n-        new AccessIdResource(\"Pie, Udo\", \"user228\"),\n-        new AccessIdResource(\"Aloe, Vera\", \"user229\"),\n-        new AccessIdResource(\"Hausver, Walter\", \"user230\"),\n-        new AccessIdResource(\"Schuh, Wanda\", \"user231\"),\n-        new AccessIdResource(\"Rahm, Wolf\", \"user232\"),\n-\n-        new AccessIdResource(\"businessadmin\", \"cn=businessadmin,ou=groups,o=taskanatest\"),\n-        new AccessIdResource(\"UsersGroup\", \"cn=usersgroup,ou=groups,o=taskanatest\"),\n-        new AccessIdResource(\"DevelopersGroup\", \"cn=developersgroup,ou=groups,o=taskanatest\"),\n-        new AccessIdResource(\"businessadmin\", \"cn=customersgroup,ou=groups,o=taskanatest\"),\n-\n-        new AccessIdResource(\"user_domain_A\", \"cn=user_domain_a,ou=groups,o=taskanatest\"),\n-        new AccessIdResource(\"monitor\", \"cn=monitor,ou=groups,o=taskanatest\"),\n-        new AccessIdResource(\"user_domain_C\", \"cn=user_domain_c,ou=groups,o=taskanatest\"),\n-        new AccessIdResource(\"user_domain_D\", \"cn=user_domain_d,ou=groups,o=taskanatest\"),\n+  /**\n+   * Dictionary is a {@link Map} collection that contains {@link AccessIdResource} as key (user) and\n+   * {@link List<AccessIdResource>} as value (groups of which the user is a member) .\n+   */\n+  private static Map<AccessIdResource, List<AccessIdResource>> users;\n \n-        new AccessIdResource(\"admin\", \"cn=admin,ou=groups,o=taskanatest\"),\n-        new AccessIdResource(\"manager_domain_B\", \"cn=manager_domain_b,ou=groups,o=taskanatest\"),\n-        new AccessIdResource(\"manager_domain_C\", \"cn=manager_domain_c,ou=groups,o=taskanatest\"),\n-        new AccessIdResource(\"manager_domain_D\", \"cn=manager_domain_d,ou=groups,o=taskanatest\"),\n+  private static List<AccessIdResource> accessIds =\n+      new ArrayList<>(\n+          Arrays.asList(\n+              new AccessIdResource(\"Martin, Rojas Miguel Angel\", \"user_1_1\"),\n+              new AccessIdResource(\"Zorgati, Mustapha\", \"user_2_1\"),\n+              new AccessIdResource(\"Behrendt, Maximilian\", \"max\"),\n+              new AccessIdResource(\"Bert, Ali\", \"teamlead_5\"),\n+              new AccessIdResource(\"Hagen, Holger\", \"teamlead_3\"),\n+              new AccessIdResource(\"Breier, Bernd\", \"user_2_2\"),\n+              new AccessIdResource(\"Fielmalz, Anke\", \"user017\"),\n+              new AccessIdResource(\"Mente, Maximilian\", \"max_mente\"),\n+              new AccessIdResource(\"Theke, Bernd\", \"user_2_3\"),\n+              new AccessIdResource(\"Ferrante, Elena\", \"elena\"),\n+              new AccessIdResource(\"Mueller, Simone\", \"simone\"),\n+              new AccessIdResource(\"Sirup, Aaron\", \"user001\"),\n+              new AccessIdResource(\"Nacho, recuerda\", \"user_1_2\"),\n+              new AccessIdResource(\"Lass, Ada\", \"user003\"),\n+              new AccessIdResource(\"Tion, Addi\", \"user004\"),\n+              new AccessIdResource(\"Lette, Adi\", \"user005\"),\n+              new AccessIdResource(\"Admin\", \"teamlead_2\"),\n+              new AccessIdResource(\"Native, Alter\", \"user006\"),\n+              new AccessIdResource(\"Herum, Albert\", \"user007\"),\n+              new AccessIdResource(\"Meyer, Dominik\", \"teamlead_1\"),\n+              new AccessIdResource(\"Mente, Ali\", \"user009\"),\n+              new AccessIdResource(\"Nach, Alma\", \"user011\"),\n+              new AccessIdResource(\"Gehzauch, Anders\", \"user012\"),\n+              new AccessIdResource(\"Theke, Andi\", \"user013\"),\n+              new AccessIdResource(\"Kreuz, Andreas\", \"user014\"),\n+              new AccessIdResource(\"Tiefsee, Anka\", \"user016\"),\n+              new AccessIdResource(\"Fassen, Ann\", \"user018\"),\n+              new AccessIdResource(\"Probe, Ann\", \"user019\"),\n+              new AccessIdResource(\"Bolika, Anna\", \"user020\"),\n+              new AccessIdResource(\"Ecke, Anna\", \"user021\"),\n+              new AccessIdResource(\"Hosi, Anna\", \"user022\"),\n+              new AccessIdResource(\"Kronis-Tisch, Anna\", \"user023\"),\n+              new AccessIdResource(\"Logie, Anna\", \"user024\"),\n+              new AccessIdResource(\"Luehse, Anna\", \"user025\"),\n+              new AccessIdResource(\"Nass, Anna\", \"user026\"),\n+              new AccessIdResource(\"Thalb, Anna\", \"user027\"),\n+              new AccessIdResource(\"Tomie, Anna\", \"user028\"),\n+              new AccessIdResource(\"Donnich, Anne\", \"user029\"),\n+              new AccessIdResource(\"Kaffek, Anne\", \"user030\"),\n+              new AccessIdResource(\"Thek, Anne\", \"user031\"),\n+              new AccessIdResource(\"Matoer, Anni\", \"user032\"),\n+              new AccessIdResource(\"Ragentor, Ansgar\", \"user033\"),\n+              new AccessIdResource(\"Stoteles, Ari\", \"user034\"),\n+              new AccessIdResource(\"Thmetik, Ari\", \"user035\"),\n+              new AccessIdResource(\"Nuehm, Arno\", \"user036\"),\n+              new AccessIdResource(\"Schocke, Artie\", \"user037\"),\n+              new AccessIdResource(\"Stoppel, Bart\", \"user038\"),\n+              new AccessIdResource(\"Beitung, Bea\", \"user039\"),\n+              new AccessIdResource(\"Ildich, Bea\", \"user040\"),\n+              new AccessIdResource(\"Vista, Bella\", \"user041\"),\n+              new AccessIdResource(\"Utzer, Ben\", \"user042\"),\n+              new AccessIdResource(\"Zien, Ben\", \"user043\"),\n+              new AccessIdResource(\"Stein, Bernd\", \"user044\"),\n+              new AccessIdResource(\"Deramen, Bill\", \"user045\"),\n+              new AccessIdResource(\"Honig, Bine\", \"user046\"),\n+              new AccessIdResource(\"Densatz, Bo\", \"user047\"),\n+              new AccessIdResource(\"Densee, Bo\", \"user048\"),\n+              new AccessIdResource(\"Lerwagen, Bo\", \"user049\"),\n+              new AccessIdResource(\"Tail, Bob\", \"user050\"),\n+              new AccessIdResource(\"Ketta, Bruce\", \"user051\"),\n+              new AccessIdResource(\"Terrie, Bud\", \"user052\"),\n+              new AccessIdResource(\"Biener-Haken, Cara\", \"user053\"),\n+              new AccessIdResource(\"Ass, Caro\", \"user054\"),\n+              new AccessIdResource(\"Kaffee, Caro\", \"user055\"),\n+              new AccessIdResource(\"Linger, Caro\", \"user056\"),\n+              new AccessIdResource(\"tenSaft, Caro\", \"user057\"),\n+              new AccessIdResource(\"Antheme, Chris\", \"user058\"),\n+              new AccessIdResource(\"Baum, Chris\", \"user059\"),\n+              new AccessIdResource(\"Tall, Chris\", \"user060\"),\n+              new AccessIdResource(\"Reiniger, Claas\", \"user061\"),\n+              new AccessIdResource(\"Grube, Claire\", \"user062\"),\n+              new AccessIdResource(\"Fall, Clara\", \"user063\"),\n+              new AccessIdResource(\"Korn, Clara\", \"user064\"),\n+              new AccessIdResource(\"Lenriff, Cora\", \"user065\"),\n+              new AccessIdResource(\"Schiert, Cora\", \"user066\"),\n+              new AccessIdResource(\"Hose, Cord\", \"user067\"),\n+              new AccessIdResource(\"Onbleu, Cord\", \"user068\"),\n+              new AccessIdResource(\"Umkleide, Damon\", \"user069\"),\n+              new AccessIdResource(\"Affier, Dean\", \"user070\"),\n+              new AccessIdResource(\"Orm, Dean\", \"user071\"),\n+              new AccessIdResource(\"Platz, Dennis\", \"user072\"),\n+              new AccessIdResource(\"Milch, Dick\", \"user073\"),\n+              new AccessIdResource(\"Mow, Dina\", \"user074\"),\n+              new AccessIdResource(\"Keil, Donna\", \"user075\"),\n+              new AccessIdResource(\"Littchen, Donna\", \"user076\"),\n+              new AccessIdResource(\"Wetter, Donna\", \"user077\"),\n+              new AccessIdResource(\"Was, Ed\", \"user078\"),\n+              new AccessIdResource(\"Khar, Ede\", \"user079\"),\n+              new AccessIdResource(\"Nut, Ella\", \"user080\"),\n+              new AccessIdResource(\"Stisch, Ella\", \"user081\"),\n+              new AccessIdResource(\"Diel, Emma\", \"user082\"),\n+              new AccessIdResource(\"Herdamit, Emma\", \"user083\"),\n+              new AccessIdResource(\"Mitter-Uhe, Emma\", \"user084\"),\n+              new AccessIdResource(\"Tatt, Erich\", \"user085\"),\n+              new AccessIdResource(\"Drigend, Ernie\", \"user086\"),\n+              new AccessIdResource(\"Poly, Esther\", \"user087\"),\n+              new AccessIdResource(\"Trautz, Eugen\", \"user088\"),\n+              new AccessIdResource(\"Quiert, Eva\", \"user089\"),\n+              new AccessIdResource(\"Inurlaub, Fatma\", \"user090\"),\n+              new AccessIdResource(\"Land, Finn\", \"user091\"),\n+              new AccessIdResource(\"Sternis, Finn\", \"user092\"),\n+              new AccessIdResource(\"Furt, Frank\", \"user093\"),\n+              new AccessIdResource(\"Reich, Frank\", \"user094\"),\n+              new AccessIdResource(\"Iskaner, Franz\", \"user095\"),\n+              new AccessIdResource(\"Nerr, Franziska\", \"user096\"),\n+              new AccessIdResource(\"Zafen, Friedrich\", \"user097\"),\n+              new AccessIdResource(\"Pomm, Fritz\", \"user098\"),\n+              new AccessIdResource(\"deWegs, Gera\", \"user099\"),\n+              new AccessIdResource(\"Staebe, Gitta\", \"user100\"),\n+              new AccessIdResource(\"Zend, Glenn\", \"user101\"),\n+              new AccessIdResource(\"Fisch, Grete\", \"user102\"),\n+              new AccessIdResource(\"Zucker, Gus\", \"user103\"),\n+              new AccessIdResource(\"Muhn, Hanni\", \"user104\"),\n+              new AccessIdResource(\"Fermesse, Hanno\", \"user105\"),\n+              new AccessIdResource(\"Aplast, Hans\", \"user106\"),\n+              new AccessIdResource(\"Eart, Hans\", \"user107\"),\n+              new AccessIdResource(\"Back, Hardy\", \"user108\"),\n+              new AccessIdResource(\"Beau, Harry\", \"user109\"),\n+              new AccessIdResource(\"Kraut, Heide\", \"user110\"),\n+              new AccessIdResource(\"Witzka, Heide\", \"user111\"),\n+              new AccessIdResource(\"Buchen, Hein\", \"user112\"),\n+              new AccessIdResource(\"Lichkeit, Hein\", \"user113\"),\n+              new AccessIdResource(\"Suchung, Hein\", \"user114\"),\n+              new AccessIdResource(\"Ellmann, Heinz\", \"user115\"),\n+              new AccessIdResource(\"Ketchup, Heinz\", \"user116\"),\n+              new AccessIdResource(\"Zeim, Hilde\", \"user117\"),\n+              new AccessIdResource(\"Bilien, Immo\", \"user118\"),\n+              new AccessIdResource(\"Her, Inge\", \"user119\"),\n+              new AccessIdResource(\"Wahrsam, Inge\", \"user120\"),\n+              new AccessIdResource(\"Flamm, Ingo\", \"user121\"),\n+              new AccessIdResource(\"Enzien, Ingrid\", \"user122\"),\n+              new AccessIdResource(\"Rohsch, Inken\", \"user123\"),\n+              new AccessIdResource(\"Ihr, Insa\", \"user124\"),\n+              new AccessIdResource(\"Nerda, Iska\", \"user125\"),\n+              new AccessIdResource(\"Eitz, Jens\", \"user126\"),\n+              new AccessIdResource(\"Nastik, Jim\", \"user127\"),\n+              new AccessIdResource(\"Gurt, Jo\", \"user128\"),\n+              new AccessIdResource(\"Kurrth, Jo\", \"user129\"),\n+              new AccessIdResource(\"Kolade, Joe\", \"user130\"),\n+              new AccessIdResource(\"Iter, Johann\", \"user131\"),\n+              new AccessIdResource(\"Tick, Joyce\", \"user132\"),\n+              new AccessIdResource(\"Case, Justin\", \"user133\"),\n+              new AccessIdResource(\"Time, Justin\", \"user134\"),\n+              new AccessIdResource(\"Komp, Jutta\", \"user135\"),\n+              new AccessIdResource(\"Mauer, Kai\", \"user136\"),\n+              new AccessIdResource(\"Pirinja, Kai\", \"user137\"),\n+              new AccessIdResource(\"Serpfalz, Kai\", \"user138\"),\n+              new AccessIdResource(\"Auer, Karl\", \"user139\"),\n+              new AccessIdResource(\"Ielauge, Karl\", \"user140\"),\n+              new AccessIdResource(\"Ifornjen, Karl\", \"user141\"),\n+              new AccessIdResource(\"Radi, Karl\", \"user142\"),\n+              new AccessIdResource(\"Verti, Karl\", \"user143\"),\n+              new AccessIdResource(\"Sery, Karo\", \"user144\"),\n+              new AccessIdResource(\"Lisator, Katha\", \"user145\"),\n+              new AccessIdResource(\"Flo, Kati\", \"user146\"),\n+              new AccessIdResource(\"Schenn, Knut\", \"user147\"),\n+              new AccessIdResource(\"Achse, Kurt\", \"user148\"),\n+              new AccessIdResource(\"Zepause, Kurt\", \"user149\"),\n+              new AccessIdResource(\"Zerr, Kurt\", \"user150\"),\n+              new AccessIdResource(\"Reden, Lasse\", \"user151\"),\n+              new AccessIdResource(\"Metten, Lee\", \"user152\"),\n+              new AccessIdResource(\"Arm, Lene\", \"user153\"),\n+              new AccessIdResource(\"Thur, Linnea\", \"user154\"),\n+              new AccessIdResource(\"Bonn, Lisa\", \"user155\"),\n+              new AccessIdResource(\"Sembourg, Luc\", \"user156\"),\n+              new AccessIdResource(\"Rung, Lucky\", \"user157\"),\n+              new AccessIdResource(\"Zafen, Ludwig\", \"user158\"),\n+              new AccessIdResource(\"Hauden, Lukas\", \"user159\"),\n+              new AccessIdResource(\"Hose, Lutz\", \"user160\"),\n+              new AccessIdResource(\"Tablette, Lutz\", \"user161\"),\n+              new AccessIdResource(\"Fehr, Luzie\", \"user162\"),\n+              new AccessIdResource(\"Nalyse, Magda\", \"user163\"),\n+              new AccessIdResource(\"Ehfer, Maik\", \"user164\"),\n+              new AccessIdResource(\"Sehr, Malte\", \"user165\"),\n+              new AccessIdResource(\"Thon, Mara\", \"user166\"),\n+              new AccessIdResource(\"Quark, Marga\", \"user167\"),\n+              new AccessIdResource(\"Nade, Marie\", \"user168\"),\n+              new AccessIdResource(\"Niert, Marie\", \"user169\"),\n+              new AccessIdResource(\"Neese, Mario\", \"user170\"),\n+              new AccessIdResource(\"Nette, Marion\", \"user171\"),\n+              new AccessIdResource(\"Nesium, Mark\", \"user172\"),\n+              new AccessIdResource(\"Thalle, Mark\", \"user173\"),\n+              new AccessIdResource(\"Diven, Marle\", \"user174\"),\n+              new AccessIdResource(\"Fitz, Marle\", \"user175\"),\n+              new AccessIdResource(\"Pfahl, Marta\", \"user176\"),\n+              new AccessIdResource(\"Zorn, Martin\", \"user177\"),\n+              new AccessIdResource(\"Krissmes, Mary\", \"user178\"),\n+              new AccessIdResource(\"Jess, Matt\", \"user179\"),\n+              new AccessIdResource(\"Strammer, Max\", \"user180\"),\n+              new AccessIdResource(\"Mumm, Maxi\", \"user181\"),\n+              new AccessIdResource(\"Morphose, Meta\", \"user182\"),\n+              new AccessIdResource(\"Uh, Mia\", \"user183\"),\n+              new AccessIdResource(\"Rofon, Mike\", \"user184\"),\n+              new AccessIdResource(\"Rosoft, Mike\", \"user185\"),\n+              new AccessIdResource(\"Liter, Milli\", \"user186\"),\n+              new AccessIdResource(\"Th\u00e4r, Milli\", \"user187\"),\n+              new AccessIdResource(\"Welle, Mirko\", \"user188\"),\n+              new AccessIdResource(\"Thorat, Mo\", \"user189\"),\n+              new AccessIdResource(\"Thor, Moni\", \"user190\"),\n+              new AccessIdResource(\"Kinolta, Monika\", \"user191\"),\n+              new AccessIdResource(\"Mundhaar, Monika\", \"user192\"),\n+              new AccessIdResource(\"Munter, Monika\", \"user193\"),\n+              new AccessIdResource(\"Zwerg, Nat\", \"user194\"),\n+              new AccessIdResource(\"Elmine, Nick\", \"user195\"),\n+              new AccessIdResource(\"Thien, Niko\", \"user196\"),\n+              new AccessIdResource(\"Pferd, Nils\", \"user197\"),\n+              new AccessIdResource(\"Lerweise, Norma\", \"user198\"),\n+              new AccessIdResource(\"Motor, Otto\", \"user199\"),\n+              new AccessIdResource(\"Totol, Otto\", \"user200\"),\n+              new AccessIdResource(\"Nerr, Paula\", \"user201\"),\n+              new AccessIdResource(\"Imeter, Peer\", \"user202\"),\n+              new AccessIdResource(\"Serkatze, Peer\", \"user203\"),\n+              new AccessIdResource(\"Gogisch, Peter\", \"user204\"),\n+              new AccessIdResource(\"Silje, Peter\", \"user205\"),\n+              new AccessIdResource(\"Harmonie, Phil\", \"user206\"),\n+              new AccessIdResource(\"Ihnen, Philip\", \"user207\"),\n+              new AccessIdResource(\"Uto, Pia\", \"user208\"),\n+              new AccessIdResource(\"Kothek, Pina\", \"user209\"),\n+              new AccessIdResource(\"Zar, Pit\", \"user210\"),\n+              new AccessIdResource(\"Zeih, Polly\", \"user211\"),\n+              new AccessIdResource(\"Tswan, Puh\", \"user212\"),\n+              new AccessIdResource(\"Zufall, Rainer\", \"user213\"),\n+              new AccessIdResource(\"Lien, Rita\", \"user214\"),\n+              new AccessIdResource(\"Held, Roman\", \"user215\"),\n+              new AccessIdResource(\"Haar, Ross\", \"user216\"),\n+              new AccessIdResource(\"Dick, Roy\", \"user217\"),\n+              new AccessIdResource(\"Enplaner, Ruth\", \"user218\"),\n+              new AccessIdResource(\"Kommen, Ryan\", \"user219\"),\n+              new AccessIdResource(\"Philo, Sophie\", \"user220\"),\n+              new AccessIdResource(\"Matisier, Stig\", \"user221\"),\n+              new AccessIdResource(\"Loniki, Tessa\", \"user222\"),\n+              new AccessIdResource(\"Tralisch, Thea\", \"user223\"),\n+              new AccessIdResource(\"Logie, Theo\", \"user224\"),\n+              new AccessIdResource(\"Ister, Thorn\", \"user225\"),\n+              new AccessIdResource(\"Buktu, Tim\", \"user226\"),\n+              new AccessIdResource(\"Ate, Tom\", \"user227\"),\n+              new AccessIdResource(\"Pie, Udo\", \"user228\"),\n+              new AccessIdResource(\"Aloe, Vera\", \"user229\"),\n+              new AccessIdResource(\"Hausver, Walter\", \"user230\"),\n+              new AccessIdResource(\"Schuh, Wanda\", \"user231\"),\n+              new AccessIdResource(\"Rahm, Wolf\", \"user232\"),\n+              new AccessIdResource(\"businessadmin\", \"cn=businessadmin,ou=groups,o=taskanatest\"),\n+              new AccessIdResource(\"UsersGroup\", \"cn=usersgroup,ou=groups,o=taskanatest\"),\n+              new AccessIdResource(\"DevelopersGroup\", \"cn=developersgroup,ou=groups,o=taskanatest\"),\n+              new AccessIdResource(\"businessadmin\", \"cn=customersgroup,ou=groups,o=taskanatest\"),\n+              new AccessIdResource(\"user_domain_A\", \"cn=user_domain_a,ou=groups,o=taskanatest\"),\n+              new AccessIdResource(\"monitor\", \"cn=monitor,ou=groups,o=taskanatest\"),\n+              new AccessIdResource(\"user_domain_C\", \"cn=user_domain_c,ou=groups,o=taskanatest\"),\n+              new AccessIdResource(\"user_domain_D\", \"cn=user_domain_d,ou=groups,o=taskanatest\"),\n+              new AccessIdResource(\"admin\", \"cn=admin,ou=groups,o=taskanatest\"),\n+              new AccessIdResource(\n+                  \"manager_domain_B\", \"cn=manager_domain_b,ou=groups,o=taskanatest\"),\n+              new AccessIdResource(\n+                  \"manager_domain_C\", \"cn=manager_domain_c,ou=groups,o=taskanatest\"),\n+              new AccessIdResource(\n+                  \"manager_domain_D\", \"cn=manager_domain_d,ou=groups,o=taskanatest\"),\n+              new AccessIdResource(\"teamlead_2\", \"cn=teamlead_2\" + \",ou=groups,o=taskanatest\"),\n+              new AccessIdResource(\"teamlead_4\", \"cn=teamlead_4\" + \",ou=groups,o=taskanatest\"),\n+              new AccessIdResource(\"team_3\", \"cn=team_3\" + \",ou=groups,o=taskanatest\"),\n+              new AccessIdResource(\"team_4\", \"cn=team_4\" + \",ou=groups,o=taskanatest\")));\n \n-        new AccessIdResource(\"teamlead_2\", \"cn=teamlead_2\" + \",ou=groups,o=taskanatest\"),\n-        new AccessIdResource(\"teamlead_4\", \"cn=teamlead_4\" + \",ou=groups,o=taskanatest\"),\n-        new AccessIdResource(\"team_3\", \"cn=team_3\" + \",ou=groups,o=taskanatest\"),\n-        new AccessIdResource(\"team_4\", \"cn=team_4\" + \",ou=groups,o=taskanatest\")));\n+  @Override\n+  public List<AccessIdResource> findMatchingAccessId(\n+      String searchFor, int maxNumberOfReturnedAccessIds) {\n+    return findAcessIdResource(searchFor, maxNumberOfReturnedAccessIds, false);\n+  }\n \n-    @Override\n-    public List<AccessIdResource> findMatchingAccessId(String searchFor, int maxNumberOfReturnedAccessIds) {\n-        return findAcessIdResource(searchFor, maxNumberOfReturnedAccessIds, false);\n+  @Override\n+  public List<AccessIdResource> findGroupsOfUser(\n+      String searchFor, int maxNumberOfReturnedAccessIds) {\n+    if (users == null) {\n+      addUsersToGroups();\n     }\n+    return findAcessIdResource(searchFor, maxNumberOfReturnedAccessIds, true);\n+  }\n \n-    @Override\n-    public List<AccessIdResource> findGroupsOfUser(String searchFor, int maxNumberOfReturnedAccessIds) {\n-        if (users == null) {\n-            addUsersToGroups();\n-        }\n-        return findAcessIdResource(searchFor, maxNumberOfReturnedAccessIds, true);\n-    }\n+  @Override\n+  public List<AccessIdResource> validateAccessId(String accessId) {\n+    return accessIds.stream()\n+        .filter(t -> (t.getAccessId().equalsIgnoreCase(accessId.toLowerCase())))\n+        .collect(Collectors.toList());\n+  }\n \n-    @Override\n-    public List<AccessIdResource> validateAccessId(String accessId) {\n-        return accessIds.stream()\n-            .filter(t -> (t.getAccessId().equalsIgnoreCase(accessId.toLowerCase())))\n-            .collect(Collectors.toList());\n-    }\n-\n-    private List<AccessIdResource> findAcessIdResource(String searchFor, int maxNumberOfReturnedAccessIds,\n-        boolean groupMember) {\n-        List<AccessIdResource> usersAndGroups = accessIds.stream()\n-            .filter(t -> (t.getName().toLowerCase().contains(searchFor.toLowerCase())\n-                || t.getAccessId().toLowerCase().contains(searchFor.toLowerCase())))\n+  private List<AccessIdResource> findAcessIdResource(\n+      String searchFor, int maxNumberOfReturnedAccessIds, boolean groupMember) {\n+    List<AccessIdResource> usersAndGroups =\n+        accessIds.stream()\n+            .filter(\n+                t ->\n+                    (t.getName().toLowerCase().contains(searchFor.toLowerCase())\n+                        || t.getAccessId().toLowerCase().contains(searchFor.toLowerCase())))\n             .collect(Collectors.toList());\n \n-        List<AccessIdResource> usersAndGroupsAux = new ArrayList<>(usersAndGroups);\n-        if (groupMember) {\n-            usersAndGroupsAux.forEach(item -> {\n-                if (users.get(item) != null) {\n-                    usersAndGroups.addAll(users.get(item));\n-                }\n-            });\n-        }\n+    List<AccessIdResource> usersAndGroupsAux = new ArrayList<>(usersAndGroups);\n+    if (groupMember) {\n+      usersAndGroupsAux.forEach(\n+          item -> {\n+            if (users.get(item) != null) {\n+              usersAndGroups.addAll(users.get(item));\n+            }\n+          });\n+    }\n \n-        usersAndGroups.sort((AccessIdResource a, AccessIdResource b) -> {\n-            return a.getAccessId().compareToIgnoreCase(b.getAccessId());\n+    usersAndGroups.sort(\n+        (AccessIdResource a, AccessIdResource b) -> {\n+          return a.getAccessId().compareToIgnoreCase(b.getAccessId());\n         });\n \n-        List<AccessIdResource> result = usersAndGroups.subList(0,\n-            Math.min(usersAndGroups.size(), maxNumberOfReturnedAccessIds));\n+    List<AccessIdResource> result =\n+        usersAndGroups.subList(0, Math.min(usersAndGroups.size(), maxNumberOfReturnedAccessIds));\n \n-        return result;\n-    }\n+    return result;\n+  }\n \n-    private void addUsersToGroups() {\n-        List<AccessIdResource> groups = new ArrayList<>();\n-        users = new HashMap<>();\n+  private void addUsersToGroups() {\n+    List<AccessIdResource> groups = new ArrayList<>();\n+    users = new HashMap<>();\n \n-        accessIds.forEach(item -> {\n-            if (!item.getAccessId().contains(\"ou=groups\")) {\n-                users.put(item, new ArrayList<>());\n-            } else {\n-                groups.add(item);\n-            }\n+    accessIds.forEach(\n+        item -> {\n+          if (!item.getAccessId().contains(\"ou=groups\")) {\n+            users.put(item, new ArrayList<>());\n+          } else {\n+            groups.add(item);\n+          }\n         });\n \n-        int groupNumber = 0;\n-        List<AccessIdResource> group0 = new ArrayList<>(), group1 = new ArrayList<>(), group2 = new ArrayList<>(), group3 = new ArrayList<>();\n+    int groupNumber = 0;\n+    List<AccessIdResource> group0 = new ArrayList<>(),\n+        group1 = new ArrayList<>(),\n+        group2 = new ArrayList<>(),\n+        group3 = new ArrayList<>();\n \n-        for (AccessIdResource group : groups) {\n-            switch (groupNumber) {\n-                case 0:\n-                    group0.add(group);\n-                    break;\n-                case 1:\n-                    group1.add(group);\n-                    break;\n-                case 2:\n-                    group2.add(group);\n-                    break;\n-                case 3:\n-                    group3.add(group);\n-                    break;\n-                default:\n-                    break;\n-            }\n-            groupNumber = (groupNumber + 1) % 4;\n-        }\n+    for (AccessIdResource group : groups) {\n+      switch (groupNumber) {\n+        case 0:\n+          group0.add(group);\n+          break;\n+        case 1:\n+          group1.add(group);\n+          break;\n+        case 2:\n+          group2.add(group);\n+          break;\n+        case 3:\n+          group3.add(group);\n+          break;\n+        default:\n+          break;\n+      }\n+      groupNumber = (groupNumber + 1) % 4;\n+    }\n \n-        int countUser = 0;\n-        for (AccessIdResource item : accessIds) {\n-            if (!item.getAccessId().contains(\"ou=groups\")) {\n-                switch (countUser) {\n-                    case 0:\n-                        users.put(item, group0);\n-                        break;\n-                    case 1:\n-                        users.put(item, group1);\n-                        break;\n-                    case 2:\n-                        users.put(item, group2);\n-                        break;\n-                    case 3:\n-                        users.put(item, group3);\n-                        break;\n-                    default:\n-                        break;\n-                }\n-            }\n-            countUser = (countUser + 1) % 4;\n+    int countUser = 0;\n+    for (AccessIdResource item : accessIds) {\n+      if (!item.getAccessId().contains(\"ou=groups\")) {\n+        switch (countUser) {\n+          case 0:\n+            users.put(item, group0);\n+            break;\n+          case 1:\n+            users.put(item, group1);\n+            break;\n+          case 2:\n+            users.put(item, group2);\n+            break;\n+          case 3:\n+            users.put(item, group3);\n+            break;\n+          default:\n+            break;\n         }\n+      }\n+      countUser = (countUser + 1) % 4;\n     }\n-\n+  }\n }\n", "next_change": {"commit": "0d9ebe07c5ff006a59942e3ab1770d498bd28b73", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java b/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\nindex 79f88618a..5b35f3d48 100644\n--- a/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\n+++ b/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\n", "chunk": "@@ -402,5 +402,6 @@ public class LdapCacheTestImpl implements LdapCache {\n       }\n       countUser = (countUser + 1) % 4;\n     }\n+    return users;\n   }\n }\n", "next_change": {"commit": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java b/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\nindex 5b35f3d48..3d6937bbd 100644\n--- a/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\n+++ b/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\n", "chunk": "@@ -402,6 +408,6 @@ public class LdapCacheTestImpl implements LdapCache {\n       }\n       countUser = (countUser + 1) % 4;\n     }\n-    return users;\n+    return userMap;\n   }\n }\n", "next_change": {"commit": "cc4efaa1cdd708366adea79d631b8aa5ccc013a8", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java b/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\ndeleted file mode 100644\nindex 3d6937bbd..000000000\n--- a/rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/ldap/LdapCacheTestImpl.java\n+++ /dev/null\n", "chunk": "@@ -1,413 +0,0 @@\n-package pro.taskana.ldap;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Comparator;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-import org.springframework.stereotype.Component;\n-\n-import pro.taskana.rest.resource.AccessIdRepresentationModel;\n-\n-/**\n- * Implementation of LdapCache used for Unit tests.\n- *\n- * @author bbr\n- */\n-@Component\n-public class LdapCacheTestImpl implements LdapCache {\n-\n-  /**\n-   * Dictionary is a {@link Map} collection that contains {@link AccessIdRepresentationModel} as key\n-   * (user) and {@link List} as value (groups of which the user is a member) .\n-   */\n-  private Map<AccessIdRepresentationModel, List<AccessIdRepresentationModel>> users;\n-\n-  private final List<AccessIdRepresentationModel> accessIds =\n-      new ArrayList<>(\n-          Arrays.asList(\n-              new AccessIdRepresentationModel(\"Martin, Rojas Miguel Angel\", \"user_1_1\"),\n-              new AccessIdRepresentationModel(\"Zorgati, Mustapha\", \"user_2_1\"),\n-              new AccessIdRepresentationModel(\"Behrendt, Maximilian\", \"max\"),\n-              new AccessIdRepresentationModel(\"Bert, Ali\", \"teamlead_5\"),\n-              new AccessIdRepresentationModel(\"Hagen, Holger\", \"teamlead_3\"),\n-              new AccessIdRepresentationModel(\"Breier, Bernd\", \"user_2_2\"),\n-              new AccessIdRepresentationModel(\"Fielmalz, Anke\", \"user017\"),\n-              new AccessIdRepresentationModel(\"Mente, Maximilian\", \"max_mente\"),\n-              new AccessIdRepresentationModel(\"Theke, Bernd\", \"user_2_3\"),\n-              new AccessIdRepresentationModel(\"Ferrante, Elena\", \"elena\"),\n-              new AccessIdRepresentationModel(\"Mueller, Simone\", \"simone\"),\n-              new AccessIdRepresentationModel(\"Sirup, Aaron\", \"user001\"),\n-              new AccessIdRepresentationModel(\"Nacho, recuerda\", \"user_1_2\"),\n-              new AccessIdRepresentationModel(\"Lass, Ada\", \"user003\"),\n-              new AccessIdRepresentationModel(\"Tion, Addi\", \"user004\"),\n-              new AccessIdRepresentationModel(\"Lette, Adi\", \"user005\"),\n-              new AccessIdRepresentationModel(\"Admin\", \"teamlead_2\"),\n-              new AccessIdRepresentationModel(\"Native, Alter\", \"user006\"),\n-              new AccessIdRepresentationModel(\"Herum, Albert\", \"user007\"),\n-              new AccessIdRepresentationModel(\"Meyer, Dominik\", \"teamlead_1\"),\n-              new AccessIdRepresentationModel(\"Mente, Ali\", \"user009\"),\n-              new AccessIdRepresentationModel(\"Nach, Alma\", \"user011\"),\n-              new AccessIdRepresentationModel(\"Gehzauch, Anders\", \"user012\"),\n-              new AccessIdRepresentationModel(\"Theke, Andi\", \"user013\"),\n-              new AccessIdRepresentationModel(\"Kreuz, Andreas\", \"user014\"),\n-              new AccessIdRepresentationModel(\"Tiefsee, Anka\", \"user016\"),\n-              new AccessIdRepresentationModel(\"Fassen, Ann\", \"user018\"),\n-              new AccessIdRepresentationModel(\"Probe, Ann\", \"user019\"),\n-              new AccessIdRepresentationModel(\"Bolika, Anna\", \"user020\"),\n-              new AccessIdRepresentationModel(\"Ecke, Anna\", \"user021\"),\n-              new AccessIdRepresentationModel(\"Hosi, Anna\", \"user022\"),\n-              new AccessIdRepresentationModel(\"Kronis-Tisch, Anna\", \"user023\"),\n-              new AccessIdRepresentationModel(\"Logie, Anna\", \"user024\"),\n-              new AccessIdRepresentationModel(\"Luehse, Anna\", \"user025\"),\n-              new AccessIdRepresentationModel(\"Nass, Anna\", \"user026\"),\n-              new AccessIdRepresentationModel(\"Thalb, Anna\", \"user027\"),\n-              new AccessIdRepresentationModel(\"Tomie, Anna\", \"user028\"),\n-              new AccessIdRepresentationModel(\"Donnich, Anne\", \"user029\"),\n-              new AccessIdRepresentationModel(\"Kaffek, Anne\", \"user030\"),\n-              new AccessIdRepresentationModel(\"Thek, Anne\", \"user031\"),\n-              new AccessIdRepresentationModel(\"Matoer, Anni\", \"user032\"),\n-              new AccessIdRepresentationModel(\"Ragentor, Ansgar\", \"user033\"),\n-              new AccessIdRepresentationModel(\"Stoteles, Ari\", \"user034\"),\n-              new AccessIdRepresentationModel(\"Thmetik, Ari\", \"user035\"),\n-              new AccessIdRepresentationModel(\"Nuehm, Arno\", \"user036\"),\n-              new AccessIdRepresentationModel(\"Schocke, Artie\", \"user037\"),\n-              new AccessIdRepresentationModel(\"Stoppel, Bart\", \"user038\"),\n-              new AccessIdRepresentationModel(\"Beitung, Bea\", \"user039\"),\n-              new AccessIdRepresentationModel(\"Ildich, Bea\", \"user040\"),\n-              new AccessIdRepresentationModel(\"Vista, Bella\", \"user041\"),\n-              new AccessIdRepresentationModel(\"Utzer, Ben\", \"user042\"),\n-              new AccessIdRepresentationModel(\"Zien, Ben\", \"user043\"),\n-              new AccessIdRepresentationModel(\"Stein, Bernd\", \"user044\"),\n-              new AccessIdRepresentationModel(\"Deramen, Bill\", \"user045\"),\n-              new AccessIdRepresentationModel(\"Honig, Bine\", \"user046\"),\n-              new AccessIdRepresentationModel(\"Densatz, Bo\", \"user047\"),\n-              new AccessIdRepresentationModel(\"Densee, Bo\", \"user048\"),\n-              new AccessIdRepresentationModel(\"Lerwagen, Bo\", \"user049\"),\n-              new AccessIdRepresentationModel(\"Tail, Bob\", \"user050\"),\n-              new AccessIdRepresentationModel(\"Ketta, Bruce\", \"user051\"),\n-              new AccessIdRepresentationModel(\"Terrie, Bud\", \"user052\"),\n-              new AccessIdRepresentationModel(\"Biener-Haken, Cara\", \"user053\"),\n-              new AccessIdRepresentationModel(\"Ass, Caro\", \"user054\"),\n-              new AccessIdRepresentationModel(\"Kaffee, Caro\", \"user055\"),\n-              new AccessIdRepresentationModel(\"Linger, Caro\", \"user056\"),\n-              new AccessIdRepresentationModel(\"tenSaft, Caro\", \"user057\"),\n-              new AccessIdRepresentationModel(\"Antheme, Chris\", \"user058\"),\n-              new AccessIdRepresentationModel(\"Baum, Chris\", \"user059\"),\n-              new AccessIdRepresentationModel(\"Tall, Chris\", \"user060\"),\n-              new AccessIdRepresentationModel(\"Reiniger, Claas\", \"user061\"),\n-              new AccessIdRepresentationModel(\"Grube, Claire\", \"user062\"),\n-              new AccessIdRepresentationModel(\"Fall, Clara\", \"user063\"),\n-              new AccessIdRepresentationModel(\"Korn, Clara\", \"user064\"),\n-              new AccessIdRepresentationModel(\"Lenriff, Cora\", \"user065\"),\n-              new AccessIdRepresentationModel(\"Schiert, Cora\", \"user066\"),\n-              new AccessIdRepresentationModel(\"Hose, Cord\", \"user067\"),\n-              new AccessIdRepresentationModel(\"Onbleu, Cord\", \"user068\"),\n-              new AccessIdRepresentationModel(\"Umkleide, Damon\", \"user069\"),\n-              new AccessIdRepresentationModel(\"Affier, Dean\", \"user070\"),\n-              new AccessIdRepresentationModel(\"Orm, Dean\", \"user071\"),\n-              new AccessIdRepresentationModel(\"Platz, Dennis\", \"user072\"),\n-              new AccessIdRepresentationModel(\"Milch, Dick\", \"user073\"),\n-              new AccessIdRepresentationModel(\"Mow, Dina\", \"user074\"),\n-              new AccessIdRepresentationModel(\"Keil, Donna\", \"user075\"),\n-              new AccessIdRepresentationModel(\"Littchen, Donna\", \"user076\"),\n-              new AccessIdRepresentationModel(\"Wetter, Donna\", \"user077\"),\n-              new AccessIdRepresentationModel(\"Was, Ed\", \"user078\"),\n-              new AccessIdRepresentationModel(\"Khar, Ede\", \"user079\"),\n-              new AccessIdRepresentationModel(\"Nut, Ella\", \"user080\"),\n-              new AccessIdRepresentationModel(\"Stisch, Ella\", \"user081\"),\n-              new AccessIdRepresentationModel(\"Diel, Emma\", \"user082\"),\n-              new AccessIdRepresentationModel(\"Herdamit, Emma\", \"user083\"),\n-              new AccessIdRepresentationModel(\"Mitter-Uhe, Emma\", \"user084\"),\n-              new AccessIdRepresentationModel(\"Tatt, Erich\", \"user085\"),\n-              new AccessIdRepresentationModel(\"Drigend, Ernie\", \"user086\"),\n-              new AccessIdRepresentationModel(\"Poly, Esther\", \"user087\"),\n-              new AccessIdRepresentationModel(\"Trautz, Eugen\", \"user088\"),\n-              new AccessIdRepresentationModel(\"Quiert, Eva\", \"user089\"),\n-              new AccessIdRepresentationModel(\"Inurlaub, Fatma\", \"user090\"),\n-              new AccessIdRepresentationModel(\"Land, Finn\", \"user091\"),\n-              new AccessIdRepresentationModel(\"Sternis, Finn\", \"user092\"),\n-              new AccessIdRepresentationModel(\"Furt, Frank\", \"user093\"),\n-              new AccessIdRepresentationModel(\"Reich, Frank\", \"user094\"),\n-              new AccessIdRepresentationModel(\"Iskaner, Franz\", \"user095\"),\n-              new AccessIdRepresentationModel(\"Nerr, Franziska\", \"user096\"),\n-              new AccessIdRepresentationModel(\"Zafen, Friedrich\", \"user097\"),\n-              new AccessIdRepresentationModel(\"Pomm, Fritz\", \"user098\"),\n-              new AccessIdRepresentationModel(\"deWegs, Gera\", \"user099\"),\n-              new AccessIdRepresentationModel(\"Staebe, Gitta\", \"user100\"),\n-              new AccessIdRepresentationModel(\"Zend, Glenn\", \"user101\"),\n-              new AccessIdRepresentationModel(\"Fisch, Grete\", \"user102\"),\n-              new AccessIdRepresentationModel(\"Zucker, Gus\", \"user103\"),\n-              new AccessIdRepresentationModel(\"Muhn, Hanni\", \"user104\"),\n-              new AccessIdRepresentationModel(\"Fermesse, Hanno\", \"user105\"),\n-              new AccessIdRepresentationModel(\"Aplast, Hans\", \"user106\"),\n-              new AccessIdRepresentationModel(\"Eart, Hans\", \"user107\"),\n-              new AccessIdRepresentationModel(\"Back, Hardy\", \"user108\"),\n-              new AccessIdRepresentationModel(\"Beau, Harry\", \"user109\"),\n-              new AccessIdRepresentationModel(\"Kraut, Heide\", \"user110\"),\n-              new AccessIdRepresentationModel(\"Witzka, Heide\", \"user111\"),\n-              new AccessIdRepresentationModel(\"Buchen, Hein\", \"user112\"),\n-              new AccessIdRepresentationModel(\"Lichkeit, Hein\", \"user113\"),\n-              new AccessIdRepresentationModel(\"Suchung, Hein\", \"user114\"),\n-              new AccessIdRepresentationModel(\"Ellmann, Heinz\", \"user115\"),\n-              new AccessIdRepresentationModel(\"Ketchup, Heinz\", \"user116\"),\n-              new AccessIdRepresentationModel(\"Zeim, Hilde\", \"user117\"),\n-              new AccessIdRepresentationModel(\"Bilien, Immo\", \"user118\"),\n-              new AccessIdRepresentationModel(\"Her, Inge\", \"user119\"),\n-              new AccessIdRepresentationModel(\"Wahrsam, Inge\", \"user120\"),\n-              new AccessIdRepresentationModel(\"Flamm, Ingo\", \"user121\"),\n-              new AccessIdRepresentationModel(\"Enzien, Ingrid\", \"user122\"),\n-              new AccessIdRepresentationModel(\"Rohsch, Inken\", \"user123\"),\n-              new AccessIdRepresentationModel(\"Ihr, Insa\", \"user124\"),\n-              new AccessIdRepresentationModel(\"Nerda, Iska\", \"user125\"),\n-              new AccessIdRepresentationModel(\"Eitz, Jens\", \"user126\"),\n-              new AccessIdRepresentationModel(\"Nastik, Jim\", \"user127\"),\n-              new AccessIdRepresentationModel(\"Gurt, Jo\", \"user128\"),\n-              new AccessIdRepresentationModel(\"Kurrth, Jo\", \"user129\"),\n-              new AccessIdRepresentationModel(\"Kolade, Joe\", \"user130\"),\n-              new AccessIdRepresentationModel(\"Iter, Johann\", \"user131\"),\n-              new AccessIdRepresentationModel(\"Tick, Joyce\", \"user132\"),\n-              new AccessIdRepresentationModel(\"Case, Justin\", \"user133\"),\n-              new AccessIdRepresentationModel(\"Time, Justin\", \"user134\"),\n-              new AccessIdRepresentationModel(\"Komp, Jutta\", \"user135\"),\n-              new AccessIdRepresentationModel(\"Mauer, Kai\", \"user136\"),\n-              new AccessIdRepresentationModel(\"Pirinja, Kai\", \"user137\"),\n-              new AccessIdRepresentationModel(\"Serpfalz, Kai\", \"user138\"),\n-              new AccessIdRepresentationModel(\"Auer, Karl\", \"user139\"),\n-              new AccessIdRepresentationModel(\"Ielauge, Karl\", \"user140\"),\n-              new AccessIdRepresentationModel(\"Ifornjen, Karl\", \"user141\"),\n-              new AccessIdRepresentationModel(\"Radi, Karl\", \"user142\"),\n-              new AccessIdRepresentationModel(\"Verti, Karl\", \"user143\"),\n-              new AccessIdRepresentationModel(\"Sery, Karo\", \"user144\"),\n-              new AccessIdRepresentationModel(\"Lisator, Katha\", \"user145\"),\n-              new AccessIdRepresentationModel(\"Flo, Kati\", \"user146\"),\n-              new AccessIdRepresentationModel(\"Schenn, Knut\", \"user147\"),\n-              new AccessIdRepresentationModel(\"Achse, Kurt\", \"user148\"),\n-              new AccessIdRepresentationModel(\"Zepause, Kurt\", \"user149\"),\n-              new AccessIdRepresentationModel(\"Zerr, Kurt\", \"user150\"),\n-              new AccessIdRepresentationModel(\"Reden, Lasse\", \"user151\"),\n-              new AccessIdRepresentationModel(\"Metten, Lee\", \"user152\"),\n-              new AccessIdRepresentationModel(\"Arm, Lene\", \"user153\"),\n-              new AccessIdRepresentationModel(\"Thur, Linnea\", \"user154\"),\n-              new AccessIdRepresentationModel(\"Bonn, Lisa\", \"user155\"),\n-              new AccessIdRepresentationModel(\"Sembourg, Luc\", \"user156\"),\n-              new AccessIdRepresentationModel(\"Rung, Lucky\", \"user157\"),\n-              new AccessIdRepresentationModel(\"Zafen, Ludwig\", \"user158\"),\n-              new AccessIdRepresentationModel(\"Hauden, Lukas\", \"user159\"),\n-              new AccessIdRepresentationModel(\"Hose, Lutz\", \"user160\"),\n-              new AccessIdRepresentationModel(\"Tablette, Lutz\", \"user161\"),\n-              new AccessIdRepresentationModel(\"Fehr, Luzie\", \"user162\"),\n-              new AccessIdRepresentationModel(\"Nalyse, Magda\", \"user163\"),\n-              new AccessIdRepresentationModel(\"Ehfer, Maik\", \"user164\"),\n-              new AccessIdRepresentationModel(\"Sehr, Malte\", \"user165\"),\n-              new AccessIdRepresentationModel(\"Thon, Mara\", \"user166\"),\n-              new AccessIdRepresentationModel(\"Quark, Marga\", \"user167\"),\n-              new AccessIdRepresentationModel(\"Nade, Marie\", \"user168\"),\n-              new AccessIdRepresentationModel(\"Niert, Marie\", \"user169\"),\n-              new AccessIdRepresentationModel(\"Neese, Mario\", \"user170\"),\n-              new AccessIdRepresentationModel(\"Nette, Marion\", \"user171\"),\n-              new AccessIdRepresentationModel(\"Nesium, Mark\", \"user172\"),\n-              new AccessIdRepresentationModel(\"Thalle, Mark\", \"user173\"),\n-              new AccessIdRepresentationModel(\"Diven, Marle\", \"user174\"),\n-              new AccessIdRepresentationModel(\"Fitz, Marle\", \"user175\"),\n-              new AccessIdRepresentationModel(\"Pfahl, Marta\", \"user176\"),\n-              new AccessIdRepresentationModel(\"Zorn, Martin\", \"user177\"),\n-              new AccessIdRepresentationModel(\"Krissmes, Mary\", \"user178\"),\n-              new AccessIdRepresentationModel(\"Jess, Matt\", \"user179\"),\n-              new AccessIdRepresentationModel(\"Strammer, Max\", \"user180\"),\n-              new AccessIdRepresentationModel(\"Mumm, Maxi\", \"user181\"),\n-              new AccessIdRepresentationModel(\"Morphose, Meta\", \"user182\"),\n-              new AccessIdRepresentationModel(\"Uh, Mia\", \"user183\"),\n-              new AccessIdRepresentationModel(\"Rofon, Mike\", \"user184\"),\n-              new AccessIdRepresentationModel(\"Rosoft, Mike\", \"user185\"),\n-              new AccessIdRepresentationModel(\"Liter, Milli\", \"user186\"),\n-              new AccessIdRepresentationModel(\"Th\u00e4r, Milli\", \"user187\"),\n-              new AccessIdRepresentationModel(\"Welle, Mirko\", \"user188\"),\n-              new AccessIdRepresentationModel(\"Thorat, Mo\", \"user189\"),\n-              new AccessIdRepresentationModel(\"Thor, Moni\", \"user190\"),\n-              new AccessIdRepresentationModel(\"Kinolta, Monika\", \"user191\"),\n-              new AccessIdRepresentationModel(\"Mundhaar, Monika\", \"user192\"),\n-              new AccessIdRepresentationModel(\"Munter, Monika\", \"user193\"),\n-              new AccessIdRepresentationModel(\"Zwerg, Nat\", \"user194\"),\n-              new AccessIdRepresentationModel(\"Elmine, Nick\", \"user195\"),\n-              new AccessIdRepresentationModel(\"Thien, Niko\", \"user196\"),\n-              new AccessIdRepresentationModel(\"Pferd, Nils\", \"user197\"),\n-              new AccessIdRepresentationModel(\"Lerweise, Norma\", \"user198\"),\n-              new AccessIdRepresentationModel(\"Motor, Otto\", \"user199\"),\n-              new AccessIdRepresentationModel(\"Totol, Otto\", \"user200\"),\n-              new AccessIdRepresentationModel(\"Nerr, Paula\", \"user201\"),\n-              new AccessIdRepresentationModel(\"Imeter, Peer\", \"user202\"),\n-              new AccessIdRepresentationModel(\"Serkatze, Peer\", \"user203\"),\n-              new AccessIdRepresentationModel(\"Gogisch, Peter\", \"user204\"),\n-              new AccessIdRepresentationModel(\"Silje, Peter\", \"user205\"),\n-              new AccessIdRepresentationModel(\"Harmonie, Phil\", \"user206\"),\n-              new AccessIdRepresentationModel(\"Ihnen, Philip\", \"user207\"),\n-              new AccessIdRepresentationModel(\"Uto, Pia\", \"user208\"),\n-              new AccessIdRepresentationModel(\"Kothek, Pina\", \"user209\"),\n-              new AccessIdRepresentationModel(\"Zar, Pit\", \"user210\"),\n-              new AccessIdRepresentationModel(\"Zeih, Polly\", \"user211\"),\n-              new AccessIdRepresentationModel(\"Tswan, Puh\", \"user212\"),\n-              new AccessIdRepresentationModel(\"Zufall, Rainer\", \"user213\"),\n-              new AccessIdRepresentationModel(\"Lien, Rita\", \"user214\"),\n-              new AccessIdRepresentationModel(\"Held, Roman\", \"user215\"),\n-              new AccessIdRepresentationModel(\"Haar, Ross\", \"user216\"),\n-              new AccessIdRepresentationModel(\"Dick, Roy\", \"user217\"),\n-              new AccessIdRepresentationModel(\"Enplaner, Ruth\", \"user218\"),\n-              new AccessIdRepresentationModel(\"Kommen, Ryan\", \"user219\"),\n-              new AccessIdRepresentationModel(\"Philo, Sophie\", \"user220\"),\n-              new AccessIdRepresentationModel(\"Matisier, Stig\", \"user221\"),\n-              new AccessIdRepresentationModel(\"Loniki, Tessa\", \"user222\"),\n-              new AccessIdRepresentationModel(\"Tralisch, Thea\", \"user223\"),\n-              new AccessIdRepresentationModel(\"Logie, Theo\", \"user224\"),\n-              new AccessIdRepresentationModel(\"Ister, Thorn\", \"user225\"),\n-              new AccessIdRepresentationModel(\"Buktu, Tim\", \"user226\"),\n-              new AccessIdRepresentationModel(\"Ate, Tom\", \"user227\"),\n-              new AccessIdRepresentationModel(\"Pie, Udo\", \"user228\"),\n-              new AccessIdRepresentationModel(\"Aloe, Vera\", \"user229\"),\n-              new AccessIdRepresentationModel(\"Hausver, Walter\", \"user230\"),\n-              new AccessIdRepresentationModel(\"Schuh, Wanda\", \"user231\"),\n-              new AccessIdRepresentationModel(\"Rahm, Wolf\", \"user232\"),\n-              new AccessIdRepresentationModel(\n-                  \"businessadmin\", \"cn=businessadmin,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"UsersGroup\", \"cn=usersgroup,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"DevelopersGroup\", \"cn=developersgroup,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"businessadmin\", \"cn=customersgroup,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"user_domain_A\", \"cn=user_domain_a,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\"monitor\", \"cn=monitor,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"user_domain_C\", \"cn=user_domain_c,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"user_domain_D\", \"cn=user_domain_d,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\"admin\", \"cn=admin,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"manager_domain_B\", \"cn=manager_domain_b,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"manager_domain_C\", \"cn=manager_domain_c,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"manager_domain_D\", \"cn=manager_domain_d,ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"teamlead_2\", \"cn=teamlead_2\" + \",ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\n-                  \"teamlead_4\", \"cn=teamlead_4\" + \",ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\"team_3\", \"cn=team_3\" + \",ou=groups,o=taskanatest\"),\n-              new AccessIdRepresentationModel(\"team_4\", \"cn=team_4\" + \",ou=groups,o=taskanatest\")));\n-\n-  @Override\n-  public List<AccessIdRepresentationModel> findMatchingAccessId(\n-      String searchFor, int maxNumberOfReturnedAccessIds) {\n-    return findAcessIdResource(searchFor, maxNumberOfReturnedAccessIds, false);\n-  }\n-\n-  @Override\n-  public List<AccessIdRepresentationModel> findGroupsOfUser(\n-      String searchFor, int maxNumberOfReturnedAccessIds) {\n-    if (users == null) {\n-      users = addUsersToGroups();\n-    }\n-    return findAcessIdResource(searchFor, maxNumberOfReturnedAccessIds, true);\n-  }\n-\n-  @Override\n-  public List<AccessIdRepresentationModel> validateAccessId(String accessId) {\n-    return accessIds.stream()\n-        .filter(t -> (t.getAccessId().equalsIgnoreCase(accessId.toLowerCase())))\n-        .collect(Collectors.toList());\n-  }\n-\n-  private List<AccessIdRepresentationModel> findAcessIdResource(\n-      String searchFor, int maxNumberOfReturnedAccessIds, boolean groupMember) {\n-    List<AccessIdRepresentationModel> usersAndGroups =\n-        accessIds.stream()\n-            .filter(\n-                t ->\n-                    (t.getName().toLowerCase().contains(searchFor.toLowerCase())\n-                        || t.getAccessId().toLowerCase().contains(searchFor.toLowerCase())))\n-            .collect(Collectors.toList());\n-\n-    List<AccessIdRepresentationModel> usersAndGroupsAux = new ArrayList<>(usersAndGroups);\n-    if (groupMember) {\n-      usersAndGroupsAux.forEach(\n-          item -> {\n-            if (users.get(item) != null) {\n-              usersAndGroups.addAll(users.get(item));\n-            }\n-          });\n-    }\n-\n-    usersAndGroups.sort(\n-        Comparator.comparing(\n-            AccessIdRepresentationModel::getAccessId, String.CASE_INSENSITIVE_ORDER));\n-\n-    return usersAndGroups.subList(0, Math.min(usersAndGroups.size(), maxNumberOfReturnedAccessIds));\n-  }\n-\n-  private Map<AccessIdRepresentationModel, List<AccessIdRepresentationModel>> addUsersToGroups() {\n-    List<AccessIdRepresentationModel> groups = new ArrayList<>();\n-    Map<AccessIdRepresentationModel, List<AccessIdRepresentationModel>> userMap = new HashMap<>();\n-\n-    accessIds.forEach(\n-        item -> {\n-          if (!item.getAccessId().contains(\"ou=groups\")) {\n-            userMap.put(item, new ArrayList<>());\n-          } else {\n-            groups.add(item);\n-          }\n-        });\n-\n-    int groupNumber = 0;\n-    List<AccessIdRepresentationModel> group0 = new ArrayList<>();\n-    List<AccessIdRepresentationModel> group1 = new ArrayList<>();\n-    List<AccessIdRepresentationModel> group2 = new ArrayList<>();\n-    List<AccessIdRepresentationModel> group3 = new ArrayList<>();\n-\n-    for (AccessIdRepresentationModel group : groups) {\n-      switch (groupNumber) {\n-        case 0:\n-          group0.add(group);\n-          break;\n-        case 1:\n-          group1.add(group);\n-          break;\n-        case 2:\n-          group2.add(group);\n-          break;\n-        case 3:\n-          group3.add(group);\n-          break;\n-        default:\n-          break;\n-      }\n-      groupNumber = (groupNumber + 1) % 4;\n-    }\n-\n-    int countUser = 0;\n-    for (AccessIdRepresentationModel item : accessIds) {\n-      if (!item.getAccessId().contains(\"ou=groups\")) {\n-        switch (countUser) {\n-          case 0:\n-            userMap.put(item, group0);\n-            break;\n-          case 1:\n-            userMap.put(item, group1);\n-            break;\n-          case 2:\n-            userMap.put(item, group2);\n-            break;\n-          case 3:\n-            userMap.put(item, group3);\n-            break;\n-          default:\n-            break;\n-        }\n-      }\n-      countUser = (countUser + 1) % 4;\n-    }\n-    return userMap;\n-  }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "71c33670d66b8342a264827d4e3858962e4bcb3d", "committedDate": "2019-12-02 11:24:59 +0100", "message": "TSK-949: renamed modules to increase understandability"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "85725a052cd4f40f2aa1f6328726da4a3ac7b31f", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: Fix more building errors after checkstyle changes"}, {"oid": "0d9ebe07c5ff006a59942e3ab1770d498bd28b73", "committedDate": "2020-01-29 09:27:08 +0100", "message": "TSK-987: Fix Spotbugs - Write to static field from instance method"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "df4fd1726402ec41a8ab057e34c5081571f7f7f6", "committedDate": "2020-05-15 15:56:02 +0200", "message": "TSK-1252: Fixed new code smells of the last 30 days"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}, {"oid": "cc4efaa1cdd708366adea79d631b8aa5ccc013a8", "committedDate": "2020-06-05 20:03:15 +0200", "message": "TSK-1210: Replaced LoginModule with Embedded Spring LDAP"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2NDQzMg==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r418464432", "body": "accessIds.sort(\r\n        Comparator.comparing(\r\n            AccessIdRepresentationModel::getAccessId, String.CASE_INSENSITIVE_ORDER));", "bodyText": "accessIds.sort(\nComparator.comparing(\nAccessIdRepresentationModel::getAccessId, String.CASE_INSENSITIVE_ORDER));", "bodyHTML": "<p dir=\"auto\">accessIds.sort(<br>\nComparator.comparing(<br>\nAccessIdRepresentationModel::getAccessId, String.CASE_INSENSITIVE_ORDER));</p>", "author": "mustaphazorgati", "createdAt": "2020-05-01T08:42:25Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java", "diffHunk": "@@ -288,9 +289,9 @@ void isInitOrFail() {\n     }\n   }\n \n-  void sortListOfAccessIdResources(List<AccessIdResource> accessIds) {\n+  void sortListOfAccessIdResources(List<AccessIdRepresentationModel> accessIds) {\n     accessIds.sort(", "originalCommit": "6806ed31a3b44f35c7d29ba7fc52a9df445346a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\nindex c33dd186f..98c3d9aeb 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\n", "chunk": "@@ -291,8 +292,8 @@ public class LdapClient {\n \n   void sortListOfAccessIdResources(List<AccessIdRepresentationModel> accessIds) {\n     accessIds.sort(\n-        (AccessIdRepresentationModel a, AccessIdRepresentationModel b) ->\n-            a.getAccessId().compareToIgnoreCase(b.getAccessId()));\n+        Comparator.comparing(\n+            AccessIdRepresentationModel::getAccessId, String.CASE_INSENSITIVE_ORDER));\n   }\n \n   String getNameWithoutBaseDn(String name) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\nindex c33dd186f..98c3d9aeb 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\n", "chunk": "@@ -291,8 +292,8 @@ public class LdapClient {\n \n   void sortListOfAccessIdResources(List<AccessIdRepresentationModel> accessIds) {\n     accessIds.sort(\n-        (AccessIdRepresentationModel a, AccessIdRepresentationModel b) ->\n-            a.getAccessId().compareToIgnoreCase(b.getAccessId()));\n+        Comparator.comparing(\n+            AccessIdRepresentationModel::getAccessId, String.CASE_INSENSITIVE_ORDER));\n   }\n \n   String getNameWithoutBaseDn(String name) {\n", "next_change": {"commit": "c92542e36208170098256df8f6768c9b516694ff", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\nindex 98c3d9aeb..2ed678584 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\n", "chunk": "@@ -35,353 +30,229 @@ import pro.taskana.rest.resource.AccessIdRepresentationModel;\n @Component\n public class LdapClient {\n \n-  static final String MISSING_CONFIGURATION_S =\n-      \"LdapClient was called but is not active due to missing configuration: %s \";\n-\n-  private static final Logger LOGGER = LoggerFactory.getLogger(LdapClient.class);\n-\n-  private static final String CN = \"cn\";\n-\n-  private boolean active = false;\n-\n-  @Autowired private Environment env;\n-\n-  @Autowired(required = false)\n-  private LdapTemplate ldapTemplate;\n-\n-  private int minSearchForLength;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LdapClient.class);\n+    private boolean active = false;\n+\n+    @Autowired\n+    private Environment env;\n+\n+    @Autowired\n+    private LdapTemplate ldapTemplate;\n+\n+    private String userSearchBase;\n+    private String userSearchFilterName;\n+    private String userSearchFilterValue;\n+    private String userFirstnameAttribute;\n+    private String userLastnameAttribute;\n+    private String groupSearchBase;\n+    private String groupSearchFilterName;\n+    private String groupSearchFilterValue;\n+    private String groupNameAttribute;\n+\n+    private static final String CN = \"cn\";\n+    private String message;\n+\n+    @PostConstruct\n+    private void init() {\n+\n+        if (useLdap()) {\n+            userSearchBase = getUserSearchBase();\n+            userSearchFilterName = getUserSearchFilterName();\n+            userSearchFilterValue = getUserSearchFilterValue();\n+            userFirstnameAttribute = getUserFirstnameAttribute();\n+            userLastnameAttribute = getUserLastnameAttribute();\n+            groupSearchBase = getGroupSearchBase();\n+            groupSearchFilterName = getGroupSearchFilterName();\n+            groupSearchFilterValue = getGroupSearchFilterValue();\n+            groupNameAttribute = getGroupNameAttribute();\n+\n+            message = \"taskana.ldap.useLdap is set to true, but\";\n+            if (userSearchBase == null) {\n+                message += \" taskana.ldap.userSearchBase is not configured.\";\n+            }\n+            if (userSearchFilterName == null) {\n+                message += \" taskana.ldap.userSearchFilterName is not configured.\";\n+            }\n+            if (userSearchFilterValue == null) {\n+                message += \" taskana.ldap.userSearchFilterValue is not configured.\";\n+            }\n+            if (userFirstnameAttribute == null) {\n+                message += \" taskana.ldap.userFirstnameAttribute is not configured.\";\n+            }\n+            if (userLastnameAttribute == null) {\n+                message += \" taskana.ldap.userLastnameAttribute is not configured.\";\n+            }\n+            if (groupSearchBase == null) {\n+                message += \" taskana.ldap.groupSearchBase is not configured.\";\n+            }\n+            if (groupSearchFilterName == null) {\n+                message += \" taskana.ldap.groupSearchFilterName is not configured.\";\n+            }\n+            if (groupSearchFilterValue == null) {\n+                message += \" taskana.ldap.groupSearchFilterValue is not configured.\";\n+            }\n+            if (groupNameAttribute == null) {\n+                message += \" taskana.ldap.groupNameAttribute is not configured.\";\n+            }\n+            if (!message.equals(\"taskana.ldap.useLdap is set to true, but\")) {\n+                LOGGER.error(\"Ldap configuration error detected: {}\", message);\n+                throw new SystemException(message);\n+            }\n+            active = true;\n+        }\n+    }\n \n-  private int maxNumberOfReturnedAccessIds;\n+    public List<AccessIdResource> searchUsersAndGroups(final String name) {\n+        LOGGER.debug(\"entry to searchUsersAndGroups(name = {})\", name);\n+        if (!active) {\n+            LOGGER.error(\"LdapClient was called but is not active due to missing configuration: \" + message);\n+            throw new SystemException(\n+                \"LdapClient was called but is not active due to missing configuration: \" + message);\n+        }\n+        List<AccessIdResource> users = searchUsersByName(name);\n+        users.addAll(searchGroupsByName(name));\n+        LOGGER.debug(\"exit from searchUsersAndGroups(name = {}). Found {} users and groups.\", name, users.size());\n+        return users;\n+    }\n \n-  private String message;\n+    public List<AccessIdResource> searchUsersByName(final String name) {\n+        LOGGER.debug(\"entry to searchUsersByName(name = {}).\", name);\n+        if (!active) {\n+            LOGGER.error(\"LdapClient was called but is not active due to missing configuration: \" + message);\n+            throw new SystemException(\n+                \"LdapClient was called but is not active due to missing configuration: \" + message);\n+        }\n+        final AndFilter andFilter = new AndFilter();\n+        andFilter.and(new EqualsFilter(getUserSearchFilterName(), getUserSearchFilterValue()));\n+        final OrFilter orFilter = new OrFilter();\n+\n+        orFilter.or(new WhitespaceWildcardsFilter(CN, name));\n+        orFilter.or(new WhitespaceWildcardsFilter(getUserFirstnameAttribute(), name));\n+        orFilter.or(new WhitespaceWildcardsFilter(getUserLastnameAttribute(), name));\n+        andFilter.and(orFilter);\n+\n+        String[] userAttributesToReturn = {getUserFirstnameAttribute(), getUserLastnameAttribute(), CN};\n+\n+        try {\n+            final List<AccessIdResource> accessIds = ldapTemplate.search(getUserSearchBase(), andFilter.encode(),\n+                SearchControls.SUBTREE_SCOPE, userAttributesToReturn, new UserContextMapper());\n+            LOGGER.debug(\"exit from searchUsersByName. Retrieved the following users: {}.\",\n+                LoggerUtils.listToString(accessIds));\n+            return accessIds;\n+        } catch (Exception e) {\n+            LOGGER.error(\"caught Exception {} \", e.getMessage());\n+            throw e;\n+        }\n+    }\n \n-  /**\n-   * Search LDAP for matching users or groups.\n-   *\n-   * @param name lookup string for names or groups\n-   * @return a list of AccessIdResources sorted by AccessId and limited to\n-   *     maxNumberOfReturnedAccessIds\n-   * @throws InvalidArgumentException if input is shorter than minSearchForLength\n-   */\n-  public List<AccessIdRepresentationModel> searchUsersAndGroups(final String name)\n-      throws InvalidArgumentException {\n-    LOGGER.debug(\"entry to searchUsersAndGroups(name = {})\", name);\n-    isInitOrFail();\n-    testMinSearchForLength(name);\n+    public List<AccessIdResource> searchGroupsByName(final String name) {\n+        LOGGER.debug(\"entry to searchGroupsByName(name = {}).\", name);\n+        if (!active) {\n+            LOGGER.error(\"LdapClient was called but is not active due to missing configuration: \" + message);\n+            throw new SystemException(\n+                \"LdapClient was called but is not active due to missing configuration: \" + message);\n+        }\n+        final AndFilter andFilter = new AndFilter();\n+        andFilter.and(new EqualsFilter(getGroupSearchFilterName(), getGroupSearchFilterValue()));\n+        final OrFilter orFilter = new OrFilter();\n+        orFilter.or(new WhitespaceWildcardsFilter(getGroupNameAttribute(), name));\n+        if (!CN.equals(groupNameAttribute)) {\n+            orFilter.or(new WhitespaceWildcardsFilter(CN, name));\n+        }\n+        andFilter.and(orFilter);\n+\n+        String[] groupAttributesToReturn;\n+        if (CN.equals(groupNameAttribute)) {\n+            groupAttributesToReturn = new String[] {CN};\n+        } else {\n+            groupAttributesToReturn = new String[] {getGroupNameAttribute(), CN};\n+        }\n+\n+        try {\n+            final List<AccessIdResource> accessIds = ldapTemplate.search(getGroupSearchBase(), andFilter.encode(),\n+                SearchControls.SUBTREE_SCOPE, groupAttributesToReturn, new GroupContextMapper());\n+            LOGGER.debug(\"Exit from searchGroupsByName. Retrieved the following groups: {}\",\n+                LoggerUtils.listToString(accessIds));\n+            return accessIds;\n+        } catch (Exception e) {\n+            LOGGER.error(\"caught Exception {} \", e.getMessage());\n+            throw e;\n+        }\n \n-    List<AccessIdRepresentationModel> accessIds = new ArrayList<>();\n-    if (nameIsDn(name)) {\n-      AccessIdRepresentationModel groupByDn = searchGroupByDn(name);\n-      if (groupByDn != null) {\n-        accessIds.add(groupByDn);\n-      }\n-    } else {\n-      accessIds.addAll(searchUsersByName(name));\n-      accessIds.addAll(searchGroupsByName(name));\n-    }\n-    sortListOfAccessIdResources(accessIds);\n-    List<AccessIdRepresentationModel> result = getFirstPageOfaResultList(accessIds);\n-\n-    LOGGER.debug(\n-        \"exit from searchUsersAndGroups(name = {}). Returning {} users and groups: {}\",\n-        name,\n-        accessIds.size(),\n-        LoggerUtils.listToString(result));\n-\n-    return result;\n-  }\n-\n-  public List<AccessIdRepresentationModel> searchUsersByName(final String name)\n-      throws InvalidArgumentException {\n-    LOGGER.debug(\"entry to searchUsersByName(name = {}).\", name);\n-    isInitOrFail();\n-    testMinSearchForLength(name);\n-\n-    final AndFilter andFilter = new AndFilter();\n-    andFilter.and(new EqualsFilter(getUserSearchFilterName(), getUserSearchFilterValue()));\n-    final OrFilter orFilter = new OrFilter();\n-\n-    orFilter.or(new WhitespaceWildcardsFilter(getUserFirstnameAttribute(), name));\n-    orFilter.or(new WhitespaceWildcardsFilter(getUserLastnameAttribute(), name));\n-    orFilter.or(new WhitespaceWildcardsFilter(getUserIdAttribute(), name));\n-    andFilter.and(orFilter);\n-\n-    String[] userAttributesToReturn = {\n-      getUserFirstnameAttribute(), getUserLastnameAttribute(), getUserIdAttribute()\n-    };\n-\n-    final List<AccessIdRepresentationModel> accessIds =\n-        ldapTemplate.search(\n-            getUserSearchBase(),\n-            andFilter.encode(),\n-            SearchControls.SUBTREE_SCOPE,\n-            userAttributesToReturn,\n-            new UserContextMapper());\n-    LOGGER.debug(\n-        \"exit from searchUsersByName. Retrieved the following users: {}.\",\n-        LoggerUtils.listToString(accessIds));\n-    return accessIds;\n-  }\n-\n-  public List<AccessIdRepresentationModel> searchGroupsByName(final String name)\n-      throws InvalidArgumentException {\n-    LOGGER.debug(\"entry to searchGroupsByName(name = {}).\", name);\n-    isInitOrFail();\n-    testMinSearchForLength(name);\n-\n-    final AndFilter andFilter = new AndFilter();\n-    andFilter.and(new EqualsFilter(getGroupSearchFilterName(), getGroupSearchFilterValue()));\n-    final OrFilter orFilter = new OrFilter();\n-    orFilter.or(new WhitespaceWildcardsFilter(getGroupNameAttribute(), name));\n-    if (!CN.equals(getGroupNameAttribute())) {\n-      orFilter.or(new WhitespaceWildcardsFilter(CN, name));\n     }\n-    andFilter.and(orFilter);\n-\n-    final List<AccessIdRepresentationModel> accessIds =\n-        ldapTemplate.search(\n-            getGroupSearchBase(),\n-            andFilter.encode(),\n-            SearchControls.SUBTREE_SCOPE,\n-            getLookUpGoupAttributesToReturn(),\n-            new GroupContextMapper());\n-    LOGGER.debug(\n-        \"Exit from searchGroupsByName. Retrieved the following groups: {}\",\n-        LoggerUtils.listToString(accessIds));\n-    return accessIds;\n-  }\n-\n-  public AccessIdRepresentationModel searchGroupByDn(final String name) {\n-    LOGGER.debug(\"entry to searchGroupByDn(name = {}).\", name);\n-    isInitOrFail();\n-    // Obviously Spring LdapTemplate does have a inconsistency and always adds the base name to the\n-    // given DN.\n-    // https://stackoverflow.com/questions/55285743/spring-ldaptemplate-how-to-lookup-fully-qualified-dn-with-configured-base-dn\n-    // Therefore we have to remove the base name from the dn before performing the lookup\n-    String nameWithoutBaseDn = getNameWithoutBaseDn(name);\n-    LOGGER.debug(\n-        \"Removed baseDN {} from given DN. New DN to be used: {}\", getBaseDn(), nameWithoutBaseDn);\n-    final AccessIdRepresentationModel accessId =\n-        ldapTemplate.lookup(\n-            nameWithoutBaseDn, getLookUpGoupAttributesToReturn(), new GroupContextMapper());\n-    LOGGER.debug(\"Exit from searchGroupByDn. Retrieved the following group: {}\", accessId);\n-    return accessId;\n-  }\n-\n-  public List<AccessIdRepresentationModel> searchGroupsofUsersIsMember(final String name)\n-      throws InvalidArgumentException {\n-    LOGGER.debug(\"entry to searchGroupsofUsersIsMember(name = {}).\", name);\n-    isInitOrFail();\n-    testMinSearchForLength(name);\n-\n-    final AndFilter andFilter = new AndFilter();\n-    andFilter.and(new WhitespaceWildcardsFilter(getGroupNameAttribute(), \"\"));\n-    andFilter.and(new EqualsFilter(getGroupsOfUser(), name));\n-\n-    String[] userAttributesToReturn = {getUserIdAttribute(), getGroupNameAttribute()};\n-\n-    final List<AccessIdRepresentationModel> accessIds =\n-        ldapTemplate.search(\n-            getGroupSearchBase(),\n-            andFilter.encode(),\n-            SearchControls.SUBTREE_SCOPE,\n-            userAttributesToReturn,\n-            new GroupContextMapper());\n-    LOGGER.debug(\n-        \"exit from searchGroupsofUsersIsMember. Retrieved the following users: {}.\",\n-        LoggerUtils.listToString(accessIds));\n-    return accessIds;\n-  }\n-\n-  public boolean useLdap() {\n-    String useLdap = LdapSettings.TASKANA_LDAP_USE_LDAP.getValueFromEnv(env);\n-    return Boolean.parseBoolean(useLdap);\n-  }\n-\n-  public String getUserSearchBase() {\n-    return LdapSettings.TASKANA_LDAP_USER_SEARCH_BASE.getValueFromEnv(env);\n-  }\n-\n-  public String getUserSearchFilterName() {\n-    return LdapSettings.TASKANA_LDAP_USER_SEARCH_FILTER_NAME.getValueFromEnv(env);\n-  }\n-\n-  public String getUserSearchFilterValue() {\n-    return LdapSettings.TASKANA_LDAP_USER_SEARCH_FILTER_VALUE.getValueFromEnv(env);\n-  }\n-\n-  public String getUserFirstnameAttribute() {\n-    return LdapSettings.TASKANA_LDAP_USER_FIRSTNAME_ATTRIBUTE.getValueFromEnv(env);\n-  }\n-\n-  public String getUserLastnameAttribute() {\n-    return LdapSettings.TASKANA_LDAP_USER_LASTNAME_ATTRIBUTE.getValueFromEnv(env);\n-  }\n-\n-  public String getUserIdAttribute() {\n-    return LdapSettings.TASKANA_LDAP_USER_ID_ATTRIBUTE.getValueFromEnv(env);\n-  }\n-\n-  public String getGroupSearchBase() {\n-    return LdapSettings.TASKANA_LDAP_GROUP_SEARCH_BASE.getValueFromEnv(env);\n-  }\n-\n-  public String getBaseDn() {\n-    return LdapSettings.TASKANA_LDAP_BASE_DN.getValueFromEnv(env);\n-  }\n-\n-  public String getGroupSearchFilterName() {\n-    return LdapSettings.TASKANA_LDAP_GROUP_SEARCH_FILTER_NAME.getValueFromEnv(env);\n-  }\n-\n-  public String getGroupSearchFilterValue() {\n-    return LdapSettings.TASKANA_LDAP_GROUP_SEARCH_FILTER_VALUE.getValueFromEnv(env);\n-  }\n-\n-  public String getGroupNameAttribute() {\n-    return LdapSettings.TASKANA_LDAP_GROUP_NAME_ATTRIBUTE.getValueFromEnv(env);\n-  }\n-\n-  public int calcMinSearchForLength(int defaultValue) {\n-    String envValue = LdapSettings.TASKANA_LDAP_MIN_SEARCH_FOR_LENGTH.getValueFromEnv(env);\n-    if (envValue == null || envValue.isEmpty()) {\n-      return defaultValue;\n-    }\n-    return Integer.parseInt(envValue);\n-  }\n-\n-  public int getMinSearchForLength() {\n-    return minSearchForLength;\n-  }\n-\n-  public int calcMaxNumberOfReturnedAccessIds(int defaultValue) {\n-    String envValue =\n-        LdapSettings.TASKANA_LDAP_MAX_NUMBER_OF_RETURNED_ACCESS_IDS.getValueFromEnv(env);\n-    if (envValue == null || envValue.isEmpty()) {\n-      return defaultValue;\n-    }\n-    return Integer.parseInt(envValue);\n-  }\n \n-  public int getMaxNumberOfReturnedAccessIds() {\n-    return maxNumberOfReturnedAccessIds;\n-  }\n+    public boolean useLdap() {\n+        String useLdap = env.getProperty(\"taskana.ldap.useLdap\");\n+        if (useLdap == null || useLdap.isEmpty()) {\n+            return false;\n+        } else {\n+            return Boolean.parseBoolean(useLdap);\n+        }\n+    }\n \n-  public String getGroupsOfUser() {\n-    return LdapSettings.TASKANA_LDAP_GROUPS_OF_USER.getValueFromEnv(env);\n-  }\n+    public String getUserSearchBase() {\n+        return env.getProperty(\"taskana.ldap.userSearchBase\");\n+    }\n \n-  public boolean isGroup(String accessId) {\n-    return accessId.contains(getGroupSearchBase());\n-  }\n+    public String getUserSearchFilterName() {\n+        return env.getProperty(\"taskana.ldap.userSearchFilterName\");\n+    }\n \n-  boolean nameIsDn(String name) {\n-    return name.toLowerCase().endsWith(getBaseDn().toLowerCase());\n-  }\n+    public String getUserSearchFilterValue() {\n+        return env.getProperty(\"taskana.ldap.userSearchFilterValue\");\n+    }\n \n-  List<AccessIdRepresentationModel> getFirstPageOfaResultList(\n-      List<AccessIdRepresentationModel> accessIds) {\n-    return accessIds.subList(0, Math.min(accessIds.size(), maxNumberOfReturnedAccessIds));\n-  }\n+    public String getUserFirstnameAttribute() {\n+        return env.getProperty(\"taskana.ldap.userFirstnameAttribute\");\n+    }\n \n-  void isInitOrFail() {\n-    if (!active) {\n-      throw new SystemException(String.format(MISSING_CONFIGURATION_S, message));\n+    public String getUserLastnameAttribute() {\n+        return env.getProperty(\"taskana.ldap.userLastnameAttribute\");\n     }\n-  }\n-\n-  void sortListOfAccessIdResources(List<AccessIdRepresentationModel> accessIds) {\n-    accessIds.sort(\n-        Comparator.comparing(\n-            AccessIdRepresentationModel::getAccessId, String.CASE_INSENSITIVE_ORDER));\n-  }\n-\n-  String getNameWithoutBaseDn(String name) {\n-    // (?i) --> case insensitive replacement\n-    return name.replaceAll(\"(?i)\" + Pattern.quote(\",\" + getBaseDn()), \"\");\n-  }\n-\n-  String[] getLookUpGoupAttributesToReturn() {\n-    if (CN.equals(getGroupNameAttribute())) {\n-      return new String[] {CN};\n-    } else {\n-      return new String[] {getGroupNameAttribute(), CN};\n+\n+    public String getGroupSearchBase() {\n+        return env.getProperty(\"taskana.ldap.groupSearchBase\");\n     }\n-  }\n-\n-  @PostConstruct\n-  void init() {\n-    LOGGER.debug(\"Entry to init()\");\n-    minSearchForLength = calcMinSearchForLength(3);\n-    maxNumberOfReturnedAccessIds = calcMaxNumberOfReturnedAccessIds(50);\n-\n-    if (useLdap()) {\n-      ldapTemplate.setDefaultCountLimit(maxNumberOfReturnedAccessIds);\n-\n-      final List<LdapSettings> missingConfigurations = checkForMissingConfigurations();\n-\n-      if (missingConfigurations.size() > 0) {\n-        message =\n-            String.format(\n-                \"taskana.ldap.useLdap is set to true, but following configurations are missing: %s\",\n-                missingConfigurations);\n-        throw new SystemException(message);\n-      }\n-      active = true;\n+\n+    public String getGroupSearchFilterName() {\n+        return env.getProperty(\"taskana.ldap.groupSearchFilterName\");\n     }\n-    LOGGER.debug(\"Exit from init()\");\n-  }\n-\n-  List<LdapSettings> checkForMissingConfigurations() {\n-    return Arrays.stream(LdapSettings.values())\n-        // optional settings\n-        .filter(p -> !p.equals(LdapSettings.TASKANA_LDAP_MAX_NUMBER_OF_RETURNED_ACCESS_IDS))\n-        .filter(p -> !p.equals(LdapSettings.TASKANA_LDAP_MIN_SEARCH_FOR_LENGTH))\n-        .filter(p -> Objects.isNull(p.getValueFromEnv(env)))\n-        .collect(Collectors.toList());\n-  }\n-\n-  void testMinSearchForLength(final String name) throws InvalidArgumentException {\n-    if (name == null || name.length() < minSearchForLength) {\n-      throw new InvalidArgumentException(\n-          String.format(\n-              \"search for string %s is too short. Minimum Length is %s\",\n-              name, getMinSearchForLength()));\n+\n+    public String getGroupSearchFilterValue() {\n+        return env.getProperty(\"taskana.ldap.groupSearchFilterValue\");\n     }\n-  }\n \n-  String getDnWithBaseDn(final String givenDn) {\n-    String dn = givenDn;\n-    if (!dn.toLowerCase().endsWith(getBaseDn().toLowerCase())) {\n-      dn = dn + \",\" + getBaseDn();\n+    public String getGroupNameAttribute() {\n+        return env.getProperty(\"taskana.ldap.groupNameAttribute\");\n     }\n-    return dn;\n-  }\n-\n-  /** Context Mapper for user entries. */\n-  class GroupContextMapper extends AbstractContextMapper<AccessIdRepresentationModel> {\n-\n-    @Override\n-    public AccessIdRepresentationModel doMapFromContext(final DirContextOperations context) {\n-      final AccessIdRepresentationModel accessId = new AccessIdRepresentationModel();\n-      String dn = getDnWithBaseDn(context.getDn().toString());\n-      accessId.setAccessId(dn); // fully qualified dn\n-      accessId.setName(context.getStringAttribute(getGroupNameAttribute()));\n-      return accessId;\n+\n+    /**\n+     * Context Mapper for user entries.\n+     */\n+    private class UserContextMapper extends AbstractContextMapper<AccessIdResource> {\n+\n+        @Override\n+        public AccessIdResource doMapFromContext(final DirContextOperations context) {\n+            final AccessIdResource accessId = new AccessIdResource();\n+            accessId.setAccessId(context.getNameInNamespace()); // fully qualified dn\n+            String firstName = context.getStringAttribute(getUserFirstnameAttribute());\n+            String lastName = context.getStringAttribute(getUserLastnameAttribute());\n+            accessId.setName(lastName + \", \" + firstName);\n+            return accessId;\n+        }\n     }\n-  }\n-\n-  /** Context Mapper for user entries. */\n-  class UserContextMapper extends AbstractContextMapper<AccessIdRepresentationModel> {\n-\n-    @Override\n-    public AccessIdRepresentationModel doMapFromContext(final DirContextOperations context) {\n-      final AccessIdRepresentationModel accessId = new AccessIdRepresentationModel();\n-      accessId.setAccessId(context.getStringAttribute(getUserIdAttribute()));\n-      String firstName = context.getStringAttribute(getUserFirstnameAttribute());\n-      String lastName = context.getStringAttribute(getUserLastnameAttribute());\n-      accessId.setName(String.format(\"%s, %s\", lastName, firstName));\n-      return accessId;\n+\n+    /**\n+     * Context Mapper for user entries.\n+     */\n+    private class GroupContextMapper extends AbstractContextMapper<AccessIdResource> {\n+\n+        @Override\n+        public AccessIdResource doMapFromContext(final DirContextOperations context) {\n+            final AccessIdResource accessId = new AccessIdResource();\n+            accessId.setAccessId(context.getNameInNamespace()); // fully qualified dn\n+            accessId.setName(context.getStringAttribute(getGroupNameAttribute()));\n+            return accessId;\n+        }\n     }\n-  }\n }\n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\nindex 2ed678584..9d9ca82c8 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\n", "chunk": "@@ -30,229 +29,339 @@ import pro.taskana.rest.resource.AccessIdResource;\n @Component\n public class LdapClient {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(LdapClient.class);\n-    private boolean active = false;\n-\n-    @Autowired\n-    private Environment env;\n-\n-    @Autowired\n-    private LdapTemplate ldapTemplate;\n-\n-    private String userSearchBase;\n-    private String userSearchFilterName;\n-    private String userSearchFilterValue;\n-    private String userFirstnameAttribute;\n-    private String userLastnameAttribute;\n-    private String groupSearchBase;\n-    private String groupSearchFilterName;\n-    private String groupSearchFilterValue;\n-    private String groupNameAttribute;\n-\n-    private static final String CN = \"cn\";\n-    private String message;\n-\n-    @PostConstruct\n-    private void init() {\n-\n-        if (useLdap()) {\n-            userSearchBase = getUserSearchBase();\n-            userSearchFilterName = getUserSearchFilterName();\n-            userSearchFilterValue = getUserSearchFilterValue();\n-            userFirstnameAttribute = getUserFirstnameAttribute();\n-            userLastnameAttribute = getUserLastnameAttribute();\n-            groupSearchBase = getGroupSearchBase();\n-            groupSearchFilterName = getGroupSearchFilterName();\n-            groupSearchFilterValue = getGroupSearchFilterValue();\n-            groupNameAttribute = getGroupNameAttribute();\n-\n-            message = \"taskana.ldap.useLdap is set to true, but\";\n-            if (userSearchBase == null) {\n-                message += \" taskana.ldap.userSearchBase is not configured.\";\n-            }\n-            if (userSearchFilterName == null) {\n-                message += \" taskana.ldap.userSearchFilterName is not configured.\";\n-            }\n-            if (userSearchFilterValue == null) {\n-                message += \" taskana.ldap.userSearchFilterValue is not configured.\";\n-            }\n-            if (userFirstnameAttribute == null) {\n-                message += \" taskana.ldap.userFirstnameAttribute is not configured.\";\n-            }\n-            if (userLastnameAttribute == null) {\n-                message += \" taskana.ldap.userLastnameAttribute is not configured.\";\n-            }\n-            if (groupSearchBase == null) {\n-                message += \" taskana.ldap.groupSearchBase is not configured.\";\n-            }\n-            if (groupSearchFilterName == null) {\n-                message += \" taskana.ldap.groupSearchFilterName is not configured.\";\n-            }\n-            if (groupSearchFilterValue == null) {\n-                message += \" taskana.ldap.groupSearchFilterValue is not configured.\";\n-            }\n-            if (groupNameAttribute == null) {\n-                message += \" taskana.ldap.groupNameAttribute is not configured.\";\n-            }\n-            if (!message.equals(\"taskana.ldap.useLdap is set to true, but\")) {\n-                LOGGER.error(\"Ldap configuration error detected: {}\", message);\n-                throw new SystemException(message);\n-            }\n-            active = true;\n-        }\n+  public static final String TASKANA_USE_LDAP_PROP_NAME = \"taskana.ldap.useLdap\";\n+  private static final Logger LOGGER = LoggerFactory.getLogger(LdapClient.class);\n+  private static final String CN = \"cn\";\n+  private boolean active = false;\n+  @Autowired private Environment env;\n+\n+  @Autowired(required = false)\n+  private LdapTemplate ldapTemplate;\n+\n+  private String userSearchBase;\n+  private String userSearchFilterName;\n+  private String userSearchFilterValue;\n+  private String userFirstnameAttribute;\n+  private String userLastnameAttribute;\n+  private String userIdAttribute;\n+  private String groupSearchBase;\n+  private String groupSearchFilterName;\n+  private String groupSearchFilterValue;\n+  private String groupNameAttribute;\n+  private String groupsOfUser;\n+  private int minSearchForLength;\n+  private int maxNumberOfReturnedAccessIds;\n+  private String message;\n+\n+  public List<AccessIdResource> searchUsersAndGroups(final String name)\n+      throws InvalidArgumentException {\n+    LOGGER.debug(\"entry to searchUsersAndGroups(name = {})\", name);\n+    if (!active) {\n+      throw new SystemException(\n+          \"LdapClient was called but is not active due to missing configuration: \" + message);\n     }\n-\n-    public List<AccessIdResource> searchUsersAndGroups(final String name) {\n-        LOGGER.debug(\"entry to searchUsersAndGroups(name = {})\", name);\n-        if (!active) {\n-            LOGGER.error(\"LdapClient was called but is not active due to missing configuration: \" + message);\n-            throw new SystemException(\n-                \"LdapClient was called but is not active due to missing configuration: \" + message);\n-        }\n-        List<AccessIdResource> users = searchUsersByName(name);\n-        users.addAll(searchGroupsByName(name));\n-        LOGGER.debug(\"exit from searchUsersAndGroups(name = {}). Found {} users and groups.\", name, users.size());\n-        return users;\n+    testMinSearchForLength(name);\n+\n+    List<AccessIdResource> users = searchUsersByName(name);\n+    users.addAll(searchGroupsByName(name));\n+    users.sort(\n+        (AccessIdResource a, AccessIdResource b) -> {\n+          return a.getAccessId().compareToIgnoreCase(b.getAccessId());\n+        });\n+\n+    List<AccessIdResource> result =\n+        users.subList(0, Math.min(users.size(), maxNumberOfReturnedAccessIds));\n+    LOGGER.debug(\n+        \"exit from searchUsersAndGroups(name = {}). Returning {} users and groups: {}\",\n+        name,\n+        users.size(),\n+        LoggerUtils.listToString(result));\n+\n+    return result;\n+  }\n+\n+  public List<AccessIdResource> searchUsersByName(final String name)\n+      throws InvalidArgumentException {\n+    LOGGER.debug(\"entry to searchUsersByName(name = {}).\", name);\n+    if (!active) {\n+      throw new SystemException(\n+          \"LdapClient was called but is not active due to missing configuration: \" + message);\n     }\n-\n-    public List<AccessIdResource> searchUsersByName(final String name) {\n-        LOGGER.debug(\"entry to searchUsersByName(name = {}).\", name);\n-        if (!active) {\n-            LOGGER.error(\"LdapClient was called but is not active due to missing configuration: \" + message);\n-            throw new SystemException(\n-                \"LdapClient was called but is not active due to missing configuration: \" + message);\n-        }\n-        final AndFilter andFilter = new AndFilter();\n-        andFilter.and(new EqualsFilter(getUserSearchFilterName(), getUserSearchFilterValue()));\n-        final OrFilter orFilter = new OrFilter();\n-\n-        orFilter.or(new WhitespaceWildcardsFilter(CN, name));\n-        orFilter.or(new WhitespaceWildcardsFilter(getUserFirstnameAttribute(), name));\n-        orFilter.or(new WhitespaceWildcardsFilter(getUserLastnameAttribute(), name));\n-        andFilter.and(orFilter);\n-\n-        String[] userAttributesToReturn = {getUserFirstnameAttribute(), getUserLastnameAttribute(), CN};\n-\n-        try {\n-            final List<AccessIdResource> accessIds = ldapTemplate.search(getUserSearchBase(), andFilter.encode(),\n-                SearchControls.SUBTREE_SCOPE, userAttributesToReturn, new UserContextMapper());\n-            LOGGER.debug(\"exit from searchUsersByName. Retrieved the following users: {}.\",\n-                LoggerUtils.listToString(accessIds));\n-            return accessIds;\n-        } catch (Exception e) {\n-            LOGGER.error(\"caught Exception {} \", e.getMessage());\n-            throw e;\n-        }\n+    testMinSearchForLength(name);\n+\n+    final AndFilter andFilter = new AndFilter();\n+    andFilter.and(new EqualsFilter(getUserSearchFilterName(), getUserSearchFilterValue()));\n+    final OrFilter orFilter = new OrFilter();\n+\n+    orFilter.or(new WhitespaceWildcardsFilter(getUserFirstnameAttribute(), name));\n+    orFilter.or(new WhitespaceWildcardsFilter(getUserLastnameAttribute(), name));\n+    orFilter.or(new WhitespaceWildcardsFilter(getUserIdAttribute(), name));\n+    andFilter.and(orFilter);\n+\n+    String[] userAttributesToReturn = {\n+      getUserFirstnameAttribute(), getUserLastnameAttribute(), getUserIdAttribute()\n+    };\n+\n+    final List<AccessIdResource> accessIds =\n+        ldapTemplate.search(\n+            getUserSearchBase(),\n+            andFilter.encode(),\n+            SearchControls.SUBTREE_SCOPE,\n+            userAttributesToReturn,\n+            new UserContextMapper());\n+    LOGGER.debug(\n+        \"exit from searchUsersByName. Retrieved the following users: {}.\",\n+        LoggerUtils.listToString(accessIds));\n+    return accessIds;\n+  }\n+\n+  public List<AccessIdResource> searchGroupsByName(final String name)\n+      throws InvalidArgumentException {\n+    LOGGER.debug(\"entry to searchGroupsByName(name = {}).\", name);\n+    if (!active) {\n+      throw new SystemException(\n+          \"LdapClient was called but is not active due to missing configuration: \" + message);\n     }\n-\n-    public List<AccessIdResource> searchGroupsByName(final String name) {\n-        LOGGER.debug(\"entry to searchGroupsByName(name = {}).\", name);\n-        if (!active) {\n-            LOGGER.error(\"LdapClient was called but is not active due to missing configuration: \" + message);\n-            throw new SystemException(\n-                \"LdapClient was called but is not active due to missing configuration: \" + message);\n-        }\n-        final AndFilter andFilter = new AndFilter();\n-        andFilter.and(new EqualsFilter(getGroupSearchFilterName(), getGroupSearchFilterValue()));\n-        final OrFilter orFilter = new OrFilter();\n-        orFilter.or(new WhitespaceWildcardsFilter(getGroupNameAttribute(), name));\n-        if (!CN.equals(groupNameAttribute)) {\n-            orFilter.or(new WhitespaceWildcardsFilter(CN, name));\n-        }\n-        andFilter.and(orFilter);\n-\n-        String[] groupAttributesToReturn;\n-        if (CN.equals(groupNameAttribute)) {\n-            groupAttributesToReturn = new String[] {CN};\n-        } else {\n-            groupAttributesToReturn = new String[] {getGroupNameAttribute(), CN};\n-        }\n-\n-        try {\n-            final List<AccessIdResource> accessIds = ldapTemplate.search(getGroupSearchBase(), andFilter.encode(),\n-                SearchControls.SUBTREE_SCOPE, groupAttributesToReturn, new GroupContextMapper());\n-            LOGGER.debug(\"Exit from searchGroupsByName. Retrieved the following groups: {}\",\n-                LoggerUtils.listToString(accessIds));\n-            return accessIds;\n-        } catch (Exception e) {\n-            LOGGER.error(\"caught Exception {} \", e.getMessage());\n-            throw e;\n-        }\n-\n+    testMinSearchForLength(name);\n+\n+    final AndFilter andFilter = new AndFilter();\n+    andFilter.and(new EqualsFilter(getGroupSearchFilterName(), getGroupSearchFilterValue()));\n+    final OrFilter orFilter = new OrFilter();\n+    orFilter.or(new WhitespaceWildcardsFilter(getGroupNameAttribute(), name));\n+    if (!CN.equals(groupNameAttribute)) {\n+      orFilter.or(new WhitespaceWildcardsFilter(CN, name));\n     }\n+    andFilter.and(orFilter);\n \n-    public boolean useLdap() {\n-        String useLdap = env.getProperty(\"taskana.ldap.useLdap\");\n-        if (useLdap == null || useLdap.isEmpty()) {\n-            return false;\n-        } else {\n-            return Boolean.parseBoolean(useLdap);\n-        }\n+    String[] groupAttributesToReturn;\n+    if (CN.equals(groupNameAttribute)) {\n+      groupAttributesToReturn = new String[] {CN};\n+    } else {\n+      groupAttributesToReturn = new String[] {getGroupNameAttribute(), CN};\n     }\n \n-    public String getUserSearchBase() {\n-        return env.getProperty(\"taskana.ldap.userSearchBase\");\n+    final List<AccessIdResource> accessIds =\n+        ldapTemplate.search(\n+            getGroupSearchBase(),\n+            andFilter.encode(),\n+            SearchControls.SUBTREE_SCOPE,\n+            groupAttributesToReturn,\n+            new GroupContextMapper());\n+    LOGGER.debug(\n+        \"Exit from searchGroupsByName. Retrieved the following groups: {}\",\n+        LoggerUtils.listToString(accessIds));\n+    return accessIds;\n+  }\n+\n+  public List<AccessIdResource> searchGroupsofUsersIsMember(final String name)\n+      throws InvalidArgumentException {\n+    LOGGER.debug(\"entry to searchGroupsofUsersIsMember(name = {}).\", name);\n+    if (!active) {\n+      throw new SystemException(\n+          \"LdapClient was called but is not active due to missing configuration: \" + message);\n     }\n-\n-    public String getUserSearchFilterName() {\n-        return env.getProperty(\"taskana.ldap.userSearchFilterName\");\n+    testMinSearchForLength(name);\n+\n+    final AndFilter andFilter = new AndFilter();\n+    andFilter.and(new WhitespaceWildcardsFilter(getGroupNameAttribute(), \"\"));\n+    andFilter.and(new EqualsFilter(getGroupsOfUser(), name));\n+\n+    String[] userAttributesToReturn = {getUserIdAttribute(), getGroupNameAttribute()};\n+\n+    final List<AccessIdResource> accessIds =\n+        ldapTemplate.search(\n+            getGroupSearchBase(),\n+            andFilter.encode(),\n+            SearchControls.SUBTREE_SCOPE,\n+            userAttributesToReturn,\n+            new GroupContextMapper());\n+    LOGGER.debug(\n+        \"exit from searchGroupsofUsersIsMember. Retrieved the following users: {}.\",\n+        LoggerUtils.listToString(accessIds));\n+    return accessIds;\n+  }\n+\n+  public boolean useLdap() {\n+    String useLdap = env.getProperty(TASKANA_USE_LDAP_PROP_NAME);\n+    if (useLdap == null || useLdap.isEmpty()) {\n+      return false;\n+    } else {\n+      return Boolean.parseBoolean(useLdap);\n     }\n-\n-    public String getUserSearchFilterValue() {\n-        return env.getProperty(\"taskana.ldap.userSearchFilterValue\");\n+  }\n+\n+  public String getUserSearchBase() {\n+    return env.getProperty(\"taskana.ldap.userSearchBase\");\n+  }\n+\n+  public String getUserSearchFilterName() {\n+    return env.getProperty(\"taskana.ldap.userSearchFilterName\");\n+  }\n+\n+  public String getUserSearchFilterValue() {\n+    return env.getProperty(\"taskana.ldap.userSearchFilterValue\");\n+  }\n+\n+  public String getUserFirstnameAttribute() {\n+    return env.getProperty(\"taskana.ldap.userFirstnameAttribute\");\n+  }\n+\n+  public String getUserLastnameAttribute() {\n+    return env.getProperty(\"taskana.ldap.userLastnameAttribute\");\n+  }\n+\n+  public String getUserIdAttribute() {\n+    return env.getProperty(\"taskana.ldap.userIdAttribute\");\n+  }\n+\n+  public String getGroupSearchBase() {\n+    return env.getProperty(\"taskana.ldap.groupSearchBase\");\n+  }\n+\n+  public String getGroupSearchFilterName() {\n+    return env.getProperty(\"taskana.ldap.groupSearchFilterName\");\n+  }\n+\n+  public String getGroupSearchFilterValue() {\n+    return env.getProperty(\"taskana.ldap.groupSearchFilterValue\");\n+  }\n+\n+  public String getGroupNameAttribute() {\n+    return env.getProperty(\"taskana.ldap.groupNameAttribute\");\n+  }\n+\n+  public String getMinSearchForLengthAsString() {\n+    return env.getProperty(\"taskana.ldap.minSearchForLength\");\n+  }\n+\n+  public int getMinSearchForLength() {\n+    return minSearchForLength;\n+  }\n+\n+  public String getMaxNumberOfReturnedAccessIdsAsString() {\n+    return env.getProperty(\"taskana.ldap.maxNumberOfReturnedAccessIds\");\n+  }\n+\n+  public int getMaxNumberOfReturnedAccessIds() {\n+    return maxNumberOfReturnedAccessIds;\n+  }\n+\n+  public String getGroupsOfUser() {\n+    return env.getProperty(\"taskana.ldap.groupsOfUser\");\n+  }\n+\n+  public boolean isGroup(String accessId) {\n+    return accessId.contains(getGroupSearchBase());\n+  }\n+\n+  @PostConstruct\n+  private void init() {\n+    LOGGER.debug(\"Entry to init()\");\n+    String strMinSearchForLength = getMinSearchForLengthAsString();\n+    if (strMinSearchForLength == null || strMinSearchForLength.isEmpty()) {\n+      minSearchForLength = 3;\n+    } else {\n+      minSearchForLength = Integer.parseInt(strMinSearchForLength);\n     }\n \n-    public String getUserFirstnameAttribute() {\n-        return env.getProperty(\"taskana.ldap.userFirstnameAttribute\");\n+    String strMaxNumberOfReturnedAccessIds = getMaxNumberOfReturnedAccessIdsAsString();\n+    if (strMaxNumberOfReturnedAccessIds == null || strMaxNumberOfReturnedAccessIds.isEmpty()) {\n+      maxNumberOfReturnedAccessIds = 50;\n+    } else {\n+      maxNumberOfReturnedAccessIds = Integer.parseInt(strMaxNumberOfReturnedAccessIds);\n     }\n \n-    public String getUserLastnameAttribute() {\n-        return env.getProperty(\"taskana.ldap.userLastnameAttribute\");\n+    if (useLdap()) {\n+      userSearchBase = getUserSearchBase();\n+      userSearchFilterName = getUserSearchFilterName();\n+      userSearchFilterValue = getUserSearchFilterValue();\n+      userFirstnameAttribute = getUserFirstnameAttribute();\n+      userLastnameAttribute = getUserLastnameAttribute();\n+      userIdAttribute = getUserIdAttribute();\n+      groupSearchBase = getGroupSearchBase();\n+      groupSearchFilterName = getGroupSearchFilterName();\n+      groupSearchFilterValue = getGroupSearchFilterValue();\n+      groupNameAttribute = getGroupNameAttribute();\n+      groupsOfUser = getGroupsOfUser();\n+\n+      ldapTemplate.setDefaultCountLimit(maxNumberOfReturnedAccessIds);\n+\n+      final String emptyMessage = \"taskana.ldap.useLdap is set to true, but\";\n+      message = emptyMessage;\n+      if (userSearchBase == null) {\n+        message += \" taskana.ldap.userSearchBase is not configured.\";\n+      }\n+      if (userSearchFilterName == null) {\n+        message += \" taskana.ldap.userSearchFilterName is not configured.\";\n+      }\n+      if (userSearchFilterValue == null) {\n+        message += \" taskana.ldap.userSearchFilterValue is not configured.\";\n+      }\n+      if (userFirstnameAttribute == null) {\n+        message += \" taskana.ldap.userFirstnameAttribute is not configured.\";\n+      }\n+      if (userLastnameAttribute == null) {\n+        message += \" taskana.ldap.userLastnameAttribute is not configured.\";\n+      }\n+      if (userIdAttribute == null) {\n+        message += \" taskana.ldap.userIdAttribute is not configured.\";\n+      }\n+      if (groupSearchBase == null) {\n+        message += \" taskana.ldap.groupSearchBase is not configured.\";\n+      }\n+      if (groupSearchFilterName == null) {\n+        message += \" taskana.ldap.groupSearchFilterName is not configured.\";\n+      }\n+      if (groupSearchFilterValue == null) {\n+        message += \" taskana.ldap.groupSearchFilterValue is not configured.\";\n+      }\n+      if (groupNameAttribute == null) {\n+        message += \" taskana.ldap.groupNameAttribute is not configured.\";\n+      }\n+      if (groupsOfUser == null) {\n+        message += \" taskana.ldap.groupsOfUser is not configured.\";\n+      }\n+      if (!message.equals(emptyMessage)) {\n+        throw new SystemException(message);\n+      }\n+      active = true;\n     }\n-\n-    public String getGroupSearchBase() {\n-        return env.getProperty(\"taskana.ldap.groupSearchBase\");\n-    }\n-\n-    public String getGroupSearchFilterName() {\n-        return env.getProperty(\"taskana.ldap.groupSearchFilterName\");\n+    LOGGER.debug(\"Exit from init()\");\n+  }\n+\n+  private void testMinSearchForLength(final String name) throws InvalidArgumentException {\n+    if (name == null || name.length() < minSearchForLength) {\n+      throw new InvalidArgumentException(\n+          \"searchFor string \"\n+              + name\n+              + \" is too short. Minimum Length = \"\n+              + getMinSearchForLength());\n     }\n-\n-    public String getGroupSearchFilterValue() {\n-        return env.getProperty(\"taskana.ldap.groupSearchFilterValue\");\n+  }\n+\n+  /** Context Mapper for user entries. */\n+  private class UserContextMapper extends AbstractContextMapper<AccessIdResource> {\n+\n+    @Override\n+    public AccessIdResource doMapFromContext(final DirContextOperations context) {\n+      final AccessIdResource accessId = new AccessIdResource();\n+      accessId.setAccessId(context.getStringAttribute(getUserIdAttribute()));\n+      String firstName = context.getStringAttribute(getUserFirstnameAttribute());\n+      String lastName = context.getStringAttribute(getUserLastnameAttribute());\n+      accessId.setName(lastName + \", \" + firstName);\n+      return accessId;\n     }\n+  }\n \n-    public String getGroupNameAttribute() {\n-        return env.getProperty(\"taskana.ldap.groupNameAttribute\");\n-    }\n-\n-    /**\n-     * Context Mapper for user entries.\n-     */\n-    private class UserContextMapper extends AbstractContextMapper<AccessIdResource> {\n-\n-        @Override\n-        public AccessIdResource doMapFromContext(final DirContextOperations context) {\n-            final AccessIdResource accessId = new AccessIdResource();\n-            accessId.setAccessId(context.getNameInNamespace()); // fully qualified dn\n-            String firstName = context.getStringAttribute(getUserFirstnameAttribute());\n-            String lastName = context.getStringAttribute(getUserLastnameAttribute());\n-            accessId.setName(lastName + \", \" + firstName);\n-            return accessId;\n-        }\n-    }\n+  /** Context Mapper for user entries. */\n+  private class GroupContextMapper extends AbstractContextMapper<AccessIdResource> {\n \n-    /**\n-     * Context Mapper for user entries.\n-     */\n-    private class GroupContextMapper extends AbstractContextMapper<AccessIdResource> {\n-\n-        @Override\n-        public AccessIdResource doMapFromContext(final DirContextOperations context) {\n-            final AccessIdResource accessId = new AccessIdResource();\n-            accessId.setAccessId(context.getNameInNamespace()); // fully qualified dn\n-            accessId.setName(context.getStringAttribute(getGroupNameAttribute()));\n-            return accessId;\n-        }\n+    @Override\n+    public AccessIdResource doMapFromContext(final DirContextOperations context) {\n+      final AccessIdResource accessId = new AccessIdResource();\n+      accessId.setAccessId(context.getNameInNamespace()); // fully qualified dn\n+      accessId.setName(context.getStringAttribute(getGroupNameAttribute()));\n+      return accessId;\n     }\n+  }\n }\n", "next_change": {"commit": "34d6bfdae611215cd6718d79aade4c1ec5c4357e", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\nindex 9d9ca82c8..409a582dc 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\n", "chunk": "@@ -340,27 +400,27 @@ public class LdapClient {\n   }\n \n   /** Context Mapper for user entries. */\n-  private class UserContextMapper extends AbstractContextMapper<AccessIdResource> {\n+  class GroupContextMapper extends AbstractContextMapper<AccessIdResource> {\n \n     @Override\n     public AccessIdResource doMapFromContext(final DirContextOperations context) {\n       final AccessIdResource accessId = new AccessIdResource();\n-      accessId.setAccessId(context.getStringAttribute(getUserIdAttribute()));\n-      String firstName = context.getStringAttribute(getUserFirstnameAttribute());\n-      String lastName = context.getStringAttribute(getUserLastnameAttribute());\n-      accessId.setName(lastName + \", \" + firstName);\n+      accessId.setAccessId(context.getNameInNamespace()); // fully qualified dn\n+      accessId.setName(context.getStringAttribute(getGroupNameAttribute()));\n       return accessId;\n     }\n   }\n \n   /** Context Mapper for user entries. */\n-  private class GroupContextMapper extends AbstractContextMapper<AccessIdResource> {\n+  private class UserContextMapper extends AbstractContextMapper<AccessIdResource> {\n \n     @Override\n     public AccessIdResource doMapFromContext(final DirContextOperations context) {\n       final AccessIdResource accessId = new AccessIdResource();\n-      accessId.setAccessId(context.getNameInNamespace()); // fully qualified dn\n-      accessId.setName(context.getStringAttribute(getGroupNameAttribute()));\n+      accessId.setAccessId(context.getStringAttribute(getUserIdAttribute()));\n+      String firstName = context.getStringAttribute(getUserFirstnameAttribute());\n+      String lastName = context.getStringAttribute(getUserLastnameAttribute());\n+      accessId.setName(lastName + \", \" + firstName);\n       return accessId;\n     }\n   }\n", "next_change": {"commit": "a1f1e72afca37cab617d782057d19adadf6a5200", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\nindex 409a582dc..fa59c1161 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\n", "chunk": "@@ -420,7 +371,7 @@ public class LdapClient {\n       accessId.setAccessId(context.getStringAttribute(getUserIdAttribute()));\n       String firstName = context.getStringAttribute(getUserFirstnameAttribute());\n       String lastName = context.getStringAttribute(getUserLastnameAttribute());\n-      accessId.setName(lastName + \", \" + firstName);\n+      accessId.setName(String.format(\"%s, %s\", lastName, firstName));\n       return accessId;\n     }\n   }\n", "next_change": {"commit": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\nindex fa59c1161..98c3d9aeb 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\n", "chunk": "@@ -346,28 +350,33 @@ public class LdapClient {\n     }\n   }\n \n-  /**\n-   * Context Mapper for user entries.\n-   */\n-  class GroupContextMapper extends AbstractContextMapper<AccessIdResource> {\n+  String getDnWithBaseDn(final String givenDn) {\n+    String dn = givenDn;\n+    if (!dn.toLowerCase().endsWith(getBaseDn().toLowerCase())) {\n+      dn = dn + \",\" + getBaseDn();\n+    }\n+    return dn;\n+  }\n+\n+  /** Context Mapper for user entries. */\n+  class GroupContextMapper extends AbstractContextMapper<AccessIdRepresentationModel> {\n \n     @Override\n-    public AccessIdResource doMapFromContext(final DirContextOperations context) {\n-      final AccessIdResource accessId = new AccessIdResource();\n-      accessId.setAccessId(context.getNameInNamespace()); // fully qualified dn\n+    public AccessIdRepresentationModel doMapFromContext(final DirContextOperations context) {\n+      final AccessIdRepresentationModel accessId = new AccessIdRepresentationModel();\n+      String dn = getDnWithBaseDn(context.getDn().toString());\n+      accessId.setAccessId(dn); // fully qualified dn\n       accessId.setName(context.getStringAttribute(getGroupNameAttribute()));\n       return accessId;\n     }\n   }\n \n-  /**\n-   * Context Mapper for user entries.\n-   */\n-  class UserContextMapper extends AbstractContextMapper<AccessIdResource> {\n+  /** Context Mapper for user entries. */\n+  class UserContextMapper extends AbstractContextMapper<AccessIdRepresentationModel> {\n \n     @Override\n-    public AccessIdResource doMapFromContext(final DirContextOperations context) {\n-      final AccessIdResource accessId = new AccessIdResource();\n+    public AccessIdRepresentationModel doMapFromContext(final DirContextOperations context) {\n+      final AccessIdRepresentationModel accessId = new AccessIdRepresentationModel();\n       accessId.setAccessId(context.getStringAttribute(getUserIdAttribute()));\n       String firstName = context.getStringAttribute(getUserFirstnameAttribute());\n       String lastName = context.getStringAttribute(getUserLastnameAttribute());\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "c92542e36208170098256df8f6768c9b516694ff", "committedDate": "2018-05-25 09:27:15 +0200", "message": "TSK-497 implement Ldap access"}, {"oid": "fd564b305382ac7d9e0a2a755cb71d7632ddacbb", "committedDate": "2018-06-05 10:36:09 +0200", "message": "TSK-548 Ldap Access must use uid field as user Id for persons"}, {"oid": "3230e35c2cac340dde88a7c5e94853e5d580a6a6", "committedDate": "2018-06-11 11:25:31 +0200", "message": "TSK-512: Improve general exception handling"}, {"oid": "e07c8919cd7f8f9419661f143dd455417a975681", "committedDate": "2018-06-19 14:55:08 +0200", "message": "TSK-581 Separate configuration of LdapTemplate. Wire LdapTemplate conditionally."}, {"oid": "3f8dc3cf87cb36dd0eb10a0a43fac3b2d5995711", "committedDate": "2018-09-11 11:06:16 +0200", "message": "TSK-694 - Show list of all access items valid for a user (REST)"}, {"oid": "ef703b4a4025548faac4905ba488ae5777e791c0", "committedDate": "2018-09-11 11:06:16 +0200", "message": "TSK-694: refactored WorkbasketAccessItemQuery + Extended"}, {"oid": "afe618eba4abeaa8b310515029673645899455ee", "committedDate": "2018-09-25 09:37:05 +0200", "message": "TSK-679 - Delete all workbasket access items for a user"}, {"oid": "24a700b81dd383fd606785af81f37d2670bb84fe", "committedDate": "2019-01-22 13:22:01 +0100", "message": "TSK-769 - Improve the logger on both library and rest"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "226c30bf73f3be31a644485b7cfd7a87d123e2b2", "committedDate": "2020-01-23 17:49:30 +0100", "message": "TSK-1024: add LDAP lookup for group by dn"}, {"oid": "08571e7216750b41cddedc4d28dd561898f07d84", "committedDate": "2020-01-30 10:03:34 +0100", "message": "TSK-1024: Add tests for ldapclient"}, {"oid": "34d6bfdae611215cd6718d79aade4c1ec5c4357e", "committedDate": "2020-01-30 10:03:34 +0100", "message": "TSK-1024: removed lenient() and replaced MockitoSettings annotation"}, {"oid": "99e2caadecab68a787d1e29672810a54d4e91792", "committedDate": "2020-01-30 10:03:34 +0100", "message": "TSK-1024: Refactor and clean up LdapClient changes"}, {"oid": "a1f1e72afca37cab617d782057d19adadf6a5200", "committedDate": "2020-01-30 17:24:45 +0100", "message": "TSK-1024: Make LdapClient more testable"}, {"oid": "3b13b9a95e4d7d1cf172f22fa0f2679ff1c5f79b", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 after initial refactoring"}, {"oid": "442385482236ad0c25830becbadddf30f6e7bf2d", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 fix dependent projects"}, {"oid": "e308578ced577706e1f6994473e0e6252f647b9e", "committedDate": "2020-02-06 17:26:05 +0100", "message": "TSK-991: refactored report structure to meet api -> internal agreement"}, {"oid": "22b1db4a2368e5ba6eb367669f95368a5cd5e312", "committedDate": "2020-03-04 16:39:59 +0100", "message": "TSK-1024: Add base dn to dn if it does not exist."}, {"oid": "ad31328e1b4df780aa61e98481bbd037aa049d62", "committedDate": "2020-03-05 13:27:41 +0100", "message": "TSK-1152: using embedded ldap for integration tests."}, {"oid": "32d069ac97b5976831c2c1442108459acc84c842", "committedDate": "2020-03-05 13:27:41 +0100", "message": "TSK-1152: added test coverage for util methods."}, {"oid": "35705ddb02fddbade31cb2e1892040ecf8e5bbab", "committedDate": "2020-04-24 12:59:13 +0200", "message": "automatically formatted code"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyNDYyNg==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422624626", "body": "Please reformat", "bodyText": "Please reformat", "bodyHTML": "<p dir=\"auto\">Please reformat</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T10:33:46Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java", "diffHunk": "@@ -47,18 +48,21 @@\n \n   @Autowired private WorkbasketService workbasketService;\n \n-  @Autowired private WorkbasketAccessItemResourceAssembler workbasketAccessItemResourceAssembler;\n+  @Autowired\n+  private WorkbasketAccessItemRepresentationModelAssembler\n+      workbasketAccessItemRepresentationModelAssembler;\n \n   /**\n    * This GET method return all workbasketAccessItems that correspond the given data.\n    *\n    * @param params filter, order and access ids.\n    * @return all WorkbasketAccesItemResource.\n-   * @throws NotAuthorizedException if the user is not authorized.\n+   * @throws NotAuthorizedException   if the user is not authorized.\n    * @throws InvalidArgumentException if some argument is invalid.\n    */\n   @GetMapping(path = Mapping.URL_WORKBASKETACCESSITEMS)\n-  public ResponseEntity<WorkbasketAccessItemListResource> getWorkbasketAccessItems(\n+  @SuppressWarnings(\"checkstyle:LineLength\")", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java\nindex dc5f251eb..864c6ee2a 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java\n", "chunk": "@@ -61,8 +71,8 @@ public class WorkbasketAccessItemController extends AbstractPagingController {\n    * @throws InvalidArgumentException if some argument is invalid.\n    */\n   @GetMapping(path = Mapping.URL_WORKBASKETACCESSITEMS)\n-  @SuppressWarnings(\"checkstyle:LineLength\")\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> getWorkbasketAccessItems(\n+  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n+        getWorkbasketAccessItems(\n       @RequestParam MultiValueMap<String, String> params)\n       throws NotAuthorizedException, InvalidArgumentException {\n     if (LOGGER.isDebugEnabled()) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java\nindex dc5f251eb..864c6ee2a 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java\n", "chunk": "@@ -61,8 +71,8 @@ public class WorkbasketAccessItemController extends AbstractPagingController {\n    * @throws InvalidArgumentException if some argument is invalid.\n    */\n   @GetMapping(path = Mapping.URL_WORKBASKETACCESSITEMS)\n-  @SuppressWarnings(\"checkstyle:LineLength\")\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> getWorkbasketAccessItems(\n+  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n+        getWorkbasketAccessItems(\n       @RequestParam MultiValueMap<String, String> params)\n       throws NotAuthorizedException, InvalidArgumentException {\n     if (LOGGER.isDebugEnabled()) {\n", "next_change": {"commit": "3f8dc3cf87cb36dd0eb10a0a43fac3b2d5995711", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java\nindex 864c6ee2a..348580bb4 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java\n", "chunk": "@@ -1,228 +1,145 @@\n package pro.taskana.rest;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.hateoas.PagedModel.PageMetadata;\n+import org.springframework.hateoas.PagedResources;\n import org.springframework.hateoas.config.EnableHypermediaSupport;\n+import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.util.MultiValueMap;\n-import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.RestController;\n+import pro.taskana.BaseQuery;\n+import pro.taskana.WorkbasketAccessItemExtended;\n+import pro.taskana.WorkbasketAccessItemExtendedQuery;\n+import pro.taskana.WorkbasketService;\n+import pro.taskana.exceptions.InvalidArgumentException;\n+import pro.taskana.exceptions.NotAuthorizedException;\n+import pro.taskana.rest.resource.WorkbasketAccesItemExtendedResource;\n+import pro.taskana.rest.resource.assembler.WorkbasketAccessItemExtendedAssembler;\n+\n+import java.util.List;\n \n-import pro.taskana.common.api.BaseQuery;\n-import pro.taskana.common.api.exceptions.InvalidArgumentException;\n-import pro.taskana.common.api.exceptions.NotAuthorizedException;\n-import pro.taskana.ldap.LdapClient;\n-import pro.taskana.rest.resource.TaskanaPagedModel;\n-import pro.taskana.rest.resource.WorkbasketAccessItemRepresentationModel;\n-import pro.taskana.rest.resource.WorkbasketAccessItemRepresentationModelAssembler;\n-import pro.taskana.workbasket.api.WorkbasketAccessItemQuery;\n-import pro.taskana.workbasket.api.WorkbasketService;\n-import pro.taskana.workbasket.api.models.WorkbasketAccessItem;\n-\n-/** Controller for Workbasket access. */\n+/**\n+ * Controller for Workbasket access.\n+ */\n @RestController\n @EnableHypermediaSupport(type = EnableHypermediaSupport.HypermediaType.HAL)\n+@RequestMapping(path = \"/v1/workbasket-access\", produces = \"application/hal+json\")\n public class WorkbasketAccessItemController extends AbstractPagingController {\n \n-  private static final Logger LOGGER =\n-      LoggerFactory.getLogger(WorkbasketAccessItemController.class);\n-\n-  private static final String LIKE = \"%\";\n-  private static final String WORKBASKET_KEY = \"workbasket-key\";\n-  private static final String WORKBASKET_KEY_LIKE = \"workbasket-key-like\";\n-  private static final String ACCESS_ID = \"access-id\";\n-  private static final String ACCESS_ID_LIKE = \"access-id-like\";\n-  private static final String ACCESS_IDS = \"access-ids\";\n-\n-  private static final String SORT_BY = \"sort-by\";\n-  private static final String SORT_DIRECTION = \"order\";\n-\n-  final LdapClient ldapClient;\n-\n-  private final WorkbasketService workbasketService;\n-\n-  private final WorkbasketAccessItemRepresentationModelAssembler\n-      workbasketAccessItemRepresentationModelAssembler;\n-\n-  @Autowired\n-  public WorkbasketAccessItemController(\n-      LdapClient ldapClient, WorkbasketService workbasketService,\n-      WorkbasketAccessItemRepresentationModelAssembler\n-          workbasketAccessItemRepresentationModelAssembler) {\n-    this.ldapClient = ldapClient;\n-    this.workbasketService = workbasketService;\n-    this.workbasketAccessItemRepresentationModelAssembler\n-        = workbasketAccessItemRepresentationModelAssembler;\n-  }\n-\n-  /**\n-   * This GET method return all workbasketAccessItems that correspond the given data.\n-   *\n-   * @param params filter, order and access ids.\n-   * @return all WorkbasketAccesItemResource.\n-   * @throws NotAuthorizedException   if the user is not authorized.\n-   * @throws InvalidArgumentException if some argument is invalid.\n-   */\n-  @GetMapping(path = Mapping.URL_WORKBASKETACCESSITEMS)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n-        getWorkbasketAccessItems(\n-      @RequestParam MultiValueMap<String, String> params)\n-      throws NotAuthorizedException, InvalidArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to getWorkbasketAccessItems(params= {})\", params);\n-    }\n-\n-    WorkbasketAccessItemQuery query = workbasketService.createWorkbasketAccessItemQuery();\n-    getAccessIds(query, params);\n-    applyFilterParams(query, params);\n-    query = applySortingParams(query, params);\n-\n-    PageMetadata pageMetadata = getPageMetadata(params, query);\n-    List<WorkbasketAccessItem> workbasketAccessItems = getQueryList(query, pageMetadata);\n-\n-    TaskanaPagedModel<WorkbasketAccessItemRepresentationModel> pagedResources =\n-        workbasketAccessItemRepresentationModelAssembler.toPageModel(\n-            workbasketAccessItems, pageMetadata);\n-\n-    ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> response =\n-        ResponseEntity.ok(pagedResources);\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getWorkbasketAccessItems(), returning {}\", response);\n-    }\n-\n-    return response;\n-  }\n-\n-  /**\n-   * This DELETE method delete all workbasketAccessItems that correspond the given accessId.\n-   *\n-   * @param accessId which need remove his workbasketAccessItems.\n-   * @return ResponseEntity if the user is not authorized.\n-   * @throws NotAuthorizedException if the user is not authorized.\n-   * @throws InvalidArgumentException if some argument is invalid.\n-   */\n-  @DeleteMapping(path = Mapping.URL_WORKBASKETACCESSITEMS)\n-  public ResponseEntity<Void> removeWorkbasketAccessItems(\n-      @RequestParam(\"access-id\") String accessId)\n-      throws NotAuthorizedException, InvalidArgumentException {\n-    LOGGER.debug(\"Entry to removeWorkbasketAccessItems(access-id= {})\", accessId);\n-    if (!ldapClient.isGroup(accessId)) {\n-      List<WorkbasketAccessItem> workbasketAccessItemList =\n-          workbasketService.createWorkbasketAccessItemQuery().accessIdIn(accessId).list();\n-\n-      if (workbasketAccessItemList != null && !workbasketAccessItemList.isEmpty()) {\n-        workbasketService.deleteWorkbasketAccessItemsForAccessId(accessId);\n-      }\n-    } else {\n-      throw new InvalidArgumentException(\n-          String.format(\n-              \"%s corresponding to a group, not a user. \"\n-                  + \"You just can remove access items for a user\",\n-              accessId));\n-    }\n-\n-    ResponseEntity<Void> response = ResponseEntity.noContent().build();\n-    LOGGER.debug(\"Exit from removeWorkbasketAccessItems(), returning {}\", response);\n-    return response;\n-  }\n-\n-  private void getAccessIds(\n-      WorkbasketAccessItemQuery query, MultiValueMap<String, String> params) {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to getAccessIds(query= {}, params= {})\", params);\n-    }\n-\n-    if (params.containsKey(ACCESS_IDS)) {\n-      String[] accessIds = extractVerticalBarSeparatedFields(params.get(ACCESS_IDS));\n-      query.accessIdIn(accessIds);\n-      params.remove(ACCESS_IDS);\n-    }\n-\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getAccessIds(), returning {}\", query);\n+    private static final String LIKE = \"%\";\n+    private static final String WORKBASKET_KEY = \"workbasket-key\";\n+    private static final String WORKBASKET_KEY_LIKE = \"workbasket-key-like\";\n+    private static final String ACCESS_ID = \"access-id\";\n+    private static final String ACCESS_ID_LIKE = \"access-id-like\";\n+    private static final String ACCESS_IDS = \"access-ids\";\n+\n+    private static final String SORT_BY = \"sort-by\";\n+    private static final String SORT_DIRECTION = \"order\";\n+\n+    private static final String PAGING_PAGE = \"page\";\n+    private static final String PAGING_PAGE_SIZE = \"page-size\";\n+\n+    @Autowired\n+    private WorkbasketService workbasketService;\n+\n+    @GetMapping\n+    public ResponseEntity<PagedResources<WorkbasketAccesItemExtendedResource>> getWorkbasketAccessItems(\n+            @RequestParam MultiValueMap<String, String> params)\n+            throws NotAuthorizedException, InvalidArgumentException {\n+\n+        WorkbasketAccessItemExtendedQuery query = workbasketService.createWorkbasketAccessItemExtendedQuery();\n+        query = getAccessIds(query, params);\n+        query = applyFilterParams(query, params);\n+        query = applySortingParams(query, params);\n+\n+        PagedResources.PageMetadata pageMetadata = null;\n+        List<WorkbasketAccessItemExtended> workbasketAccessItemsExtended;\n+        String page = params.getFirst(PAGING_PAGE);\n+        String pageSize = params.getFirst(PAGING_PAGE_SIZE);\n+        params.remove(PAGING_PAGE);\n+        params.remove(PAGING_PAGE_SIZE);\n+        validateNoInvalidParameterIsLeft(params);\n+        if (page != null && pageSize != null) {\n+            // paging\n+            long totalElements = query.count();\n+            pageMetadata = initPageMetadata(pageSize, page, totalElements);\n+            workbasketAccessItemsExtended = query.listPage((int) pageMetadata.getNumber(),\n+                    (int) pageMetadata.getSize());\n+        } else if (page == null && pageSize == null) {\n+            // not paging\n+            workbasketAccessItemsExtended = query.list();\n+        } else {\n+            throw new InvalidArgumentException(\"Paging information is incomplete.\");\n+        }\n+\n+        WorkbasketAccessItemExtendedAssembler assembler = new WorkbasketAccessItemExtendedAssembler();\n+        PagedResources<WorkbasketAccesItemExtendedResource> pagedResources = assembler.toResources(workbasketAccessItemsExtended,\n+                pageMetadata);\n+\n+        return new ResponseEntity<>(pagedResources, HttpStatus.OK);\n+    }\n+\n+    private WorkbasketAccessItemExtendedQuery getAccessIds(WorkbasketAccessItemExtendedQuery query,\n+                                                           MultiValueMap<String, String> params) throws InvalidArgumentException {\n+        if (params.containsKey(ACCESS_IDS)) {\n+            String[] accessIds = extractCommaSeparatedFields(params.get(ACCESS_IDS));\n+            query.accessIdIn(accessIds);\n+            params.remove(ACCESS_IDS);\n+        }\n+        return query;\n+    }\n+\n+    private WorkbasketAccessItemExtendedQuery applyFilterParams(WorkbasketAccessItemExtendedQuery query,\n+                                                                MultiValueMap<String, String> params) throws InvalidArgumentException {\n+        if (params.containsKey(WORKBASKET_KEY)) {\n+            String[] keys = extractCommaSeparatedFields(params.get(WORKBASKET_KEY));\n+            query.workbasketKeyIn(keys);\n+            params.remove(WORKBASKET_KEY);\n+        }\n+        if (params.containsKey(WORKBASKET_KEY_LIKE)) {\n+            query.workbasketKeyLike(LIKE + params.get(WORKBASKET_KEY_LIKE).get(0) + LIKE);\n+            params.remove(WORKBASKET_KEY_LIKE);\n+        }\n+        if (params.containsKey(ACCESS_ID)) {\n+            String[] accessId = extractCommaSeparatedFields(params.get(ACCESS_ID));\n+            query.accessIdIn(accessId);\n+            params.remove(ACCESS_ID);\n+        }\n+        if (params.containsKey(ACCESS_ID_LIKE)) {\n+            query.accessIdLike(LIKE + params.get(ACCESS_ID_LIKE).get(0) + LIKE);\n+            params.remove(ACCESS_ID_LIKE);\n+        }\n+        return query;\n+    }\n+\n+    private WorkbasketAccessItemExtendedQuery applySortingParams(WorkbasketAccessItemExtendedQuery query, MultiValueMap<String, String> params)\n+            throws IllegalArgumentException {\n+        // sorting\n+        String sortBy = params.getFirst(SORT_BY);\n+        if (sortBy != null) {\n+            BaseQuery.SortDirection sortDirection;\n+            if (params.getFirst(SORT_DIRECTION) != null && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n+                sortDirection = BaseQuery.SortDirection.DESCENDING;\n+            } else {\n+                sortDirection = BaseQuery.SortDirection.ASCENDING;\n+            }\n+            switch (sortBy) {\n+                case (WORKBASKET_KEY):\n+                    query = query.orderByWorkbasketKey(sortDirection);\n+                    break;\n+                case (ACCESS_ID):\n+                    query = query.orderByAccessId(sortDirection);\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n+            }\n+        }\n+        params.remove(SORT_BY);\n+        params.remove(SORT_DIRECTION);\n+        return query;\n     }\n \n-  }\n-\n-  private void applyFilterParams(\n-      WorkbasketAccessItemQuery query, MultiValueMap<String, String> params) {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", params);\n-    }\n-\n-    if (params.containsKey(WORKBASKET_KEY)) {\n-      String[] keys = extractCommaSeparatedFields(params.get(WORKBASKET_KEY));\n-      query.workbasketKeyIn(keys);\n-      params.remove(WORKBASKET_KEY);\n-    }\n-    if (params.containsKey(WORKBASKET_KEY_LIKE)) {\n-      query.workbasketKeyLike(LIKE + params.get(WORKBASKET_KEY_LIKE).get(0) + LIKE);\n-      params.remove(WORKBASKET_KEY_LIKE);\n-    }\n-    if (params.containsKey(ACCESS_ID)) {\n-      String[] accessId = extractCommaSeparatedFields(params.get(ACCESS_ID));\n-      query.accessIdIn(accessId);\n-      params.remove(ACCESS_ID);\n-    }\n-    if (params.containsKey(ACCESS_ID_LIKE)) {\n-      query.accessIdLike(LIKE + params.get(ACCESS_ID_LIKE).get(0) + LIKE);\n-      params.remove(ACCESS_ID_LIKE);\n-    }\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n-    }\n-\n-  }\n-\n-  private WorkbasketAccessItemQuery applySortingParams(\n-      WorkbasketAccessItemQuery query, MultiValueMap<String, String> params)\n-      throws IllegalArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to applySortingParams(query= {}, params= {})\", params);\n-    }\n-\n-    // sorting\n-    String sortBy = params.getFirst(SORT_BY);\n-    if (sortBy != null) {\n-      BaseQuery.SortDirection sortDirection;\n-      if (params.getFirst(SORT_DIRECTION) != null\n-          && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n-        sortDirection = BaseQuery.SortDirection.DESCENDING;\n-      } else {\n-        sortDirection = BaseQuery.SortDirection.ASCENDING;\n-      }\n-      switch (sortBy) {\n-        case (WORKBASKET_KEY):\n-          query = query.orderByWorkbasketKey(sortDirection);\n-          break;\n-        case (ACCESS_ID):\n-          query = query.orderByAccessId(sortDirection);\n-          break;\n-        default:\n-          throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n-      }\n-    }\n-    params.remove(SORT_BY);\n-    params.remove(SORT_DIRECTION);\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n-    }\n-\n-    return query;\n-  }\n-\n-  private String[] extractVerticalBarSeparatedFields(List<String> searchFor) {\n-    List<String> values = new ArrayList<>();\n-    if (searchFor != null) {\n-      searchFor.forEach(item -> Collections.addAll(values, item.split(\"\\\\|\")));\n-    }\n-    return values.toArray(new String[0]);\n-  }\n }\n", "next_change": {"commit": "ec432d122aa7e39b5e05c0b90cfbcee876df6269", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java\nindex 348580bb4..b18a49279 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java\n", "chunk": "@@ -142,4 +144,12 @@ public class WorkbasketAccessItemController extends AbstractPagingController {\n         return query;\n     }\n \n+    private String[] extractVerticalBarSeparatedFields(List<String> searchFor) {\n+        List<String> values = new ArrayList<>();\n+        if (searchFor != null) {\n+            searchFor.forEach(item -> values.addAll(Arrays.asList(item.split(\"\\\\|\"))));\n+        }\n+        return values.toArray(new String[0]);\n+    }\n+\n }\n", "next_change": {"commit": "40b2648060536e851164614c7e1f2dcd8020d08b", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java\nindex b18a49279..8890be41e 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java\n", "chunk": "@@ -147,7 +147,7 @@ public class WorkbasketAccessItemController extends AbstractPagingController {\n     private String[] extractVerticalBarSeparatedFields(List<String> searchFor) {\n         List<String> values = new ArrayList<>();\n         if (searchFor != null) {\n-            searchFor.forEach(item -> values.addAll(Arrays.asList(item.split(\"\\\\|\"))));\n+            searchFor.forEach(item -> Collections.addAll(values, item.split(\"\\\\|\")));\n         }\n         return values.toArray(new String[0]);\n     }\n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java\nindex 8890be41e..9964140bc 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketAccessItemController.java\n", "chunk": "@@ -1,155 +1,213 @@\n package pro.taskana.rest;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.hateoas.PagedResources;\n import org.springframework.hateoas.config.EnableHypermediaSupport;\n-import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.RestController;\n+\n import pro.taskana.BaseQuery;\n-import pro.taskana.WorkbasketAccessItemExtended;\n-import pro.taskana.WorkbasketAccessItemExtendedQuery;\n+import pro.taskana.WorkbasketAccessItem;\n+import pro.taskana.WorkbasketAccessItemQuery;\n import pro.taskana.WorkbasketService;\n import pro.taskana.exceptions.InvalidArgumentException;\n import pro.taskana.exceptions.NotAuthorizedException;\n-import pro.taskana.rest.resource.WorkbasketAccesItemExtendedResource;\n-import pro.taskana.rest.resource.assembler.WorkbasketAccessItemExtendedAssembler;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n+import pro.taskana.ldap.LdapClient;\n+import pro.taskana.rest.resource.PagedResources.PageMetadata;\n+import pro.taskana.rest.resource.WorkbasketAccessItemPaginatedListResource;\n+import pro.taskana.rest.resource.WorkbasketAccessItemResourceAssembler;\n \n-/**\n- * Controller for Workbasket access.\n- */\n+/** Controller for Workbasket access. */\n @RestController\n @EnableHypermediaSupport(type = EnableHypermediaSupport.HypermediaType.HAL)\n-@RequestMapping(path = \"/v1/workbasket-access\", produces = \"application/hal+json\")\n public class WorkbasketAccessItemController extends AbstractPagingController {\n \n-    private static final String LIKE = \"%\";\n-    private static final String WORKBASKET_KEY = \"workbasket-key\";\n-    private static final String WORKBASKET_KEY_LIKE = \"workbasket-key-like\";\n-    private static final String ACCESS_ID = \"access-id\";\n-    private static final String ACCESS_ID_LIKE = \"access-id-like\";\n-    private static final String ACCESS_IDS = \"access-ids\";\n-\n-    private static final String SORT_BY = \"sort-by\";\n-    private static final String SORT_DIRECTION = \"order\";\n-\n-    private static final String PAGING_PAGE = \"page\";\n-    private static final String PAGING_PAGE_SIZE = \"page-size\";\n-\n-    @Autowired\n-    private WorkbasketService workbasketService;\n-\n-    @GetMapping\n-    public ResponseEntity<PagedResources<WorkbasketAccesItemExtendedResource>> getWorkbasketAccessItems(\n-            @RequestParam MultiValueMap<String, String> params)\n-            throws NotAuthorizedException, InvalidArgumentException {\n-\n-        WorkbasketAccessItemExtendedQuery query = workbasketService.createWorkbasketAccessItemExtendedQuery();\n-        query = getAccessIds(query, params);\n-        query = applyFilterParams(query, params);\n-        query = applySortingParams(query, params);\n-\n-        PagedResources.PageMetadata pageMetadata = null;\n-        List<WorkbasketAccessItemExtended> workbasketAccessItemsExtended;\n-        String page = params.getFirst(PAGING_PAGE);\n-        String pageSize = params.getFirst(PAGING_PAGE_SIZE);\n-        params.remove(PAGING_PAGE);\n-        params.remove(PAGING_PAGE_SIZE);\n-        validateNoInvalidParameterIsLeft(params);\n-        if (page != null && pageSize != null) {\n-            // paging\n-            long totalElements = query.count();\n-            pageMetadata = initPageMetadata(pageSize, page, totalElements);\n-            workbasketAccessItemsExtended = query.listPage((int) pageMetadata.getNumber(),\n-                    (int) pageMetadata.getSize());\n-        } else if (page == null && pageSize == null) {\n-            // not paging\n-            workbasketAccessItemsExtended = query.list();\n-        } else {\n-            throw new InvalidArgumentException(\"Paging information is incomplete.\");\n-        }\n-\n-        WorkbasketAccessItemExtendedAssembler assembler = new WorkbasketAccessItemExtendedAssembler();\n-        PagedResources<WorkbasketAccesItemExtendedResource> pagedResources = assembler.toResources(workbasketAccessItemsExtended,\n-                pageMetadata);\n-\n-        return new ResponseEntity<>(pagedResources, HttpStatus.OK);\n-    }\n-\n-    private WorkbasketAccessItemExtendedQuery getAccessIds(WorkbasketAccessItemExtendedQuery query,\n-                                                           MultiValueMap<String, String> params) throws InvalidArgumentException {\n-        if (params.containsKey(ACCESS_IDS)) {\n-            String[] accessIds = extractVerticalBarSeparatedFields(params.get(ACCESS_IDS));\n-            query.accessIdIn(accessIds);\n-            params.remove(ACCESS_IDS);\n-        }\n-        return query;\n-    }\n-\n-    private WorkbasketAccessItemExtendedQuery applyFilterParams(WorkbasketAccessItemExtendedQuery query,\n-                                                                MultiValueMap<String, String> params) throws InvalidArgumentException {\n-        if (params.containsKey(WORKBASKET_KEY)) {\n-            String[] keys = extractCommaSeparatedFields(params.get(WORKBASKET_KEY));\n-            query.workbasketKeyIn(keys);\n-            params.remove(WORKBASKET_KEY);\n-        }\n-        if (params.containsKey(WORKBASKET_KEY_LIKE)) {\n-            query.workbasketKeyLike(LIKE + params.get(WORKBASKET_KEY_LIKE).get(0) + LIKE);\n-            params.remove(WORKBASKET_KEY_LIKE);\n-        }\n-        if (params.containsKey(ACCESS_ID)) {\n-            String[] accessId = extractCommaSeparatedFields(params.get(ACCESS_ID));\n-            query.accessIdIn(accessId);\n-            params.remove(ACCESS_ID);\n-        }\n-        if (params.containsKey(ACCESS_ID_LIKE)) {\n-            query.accessIdLike(LIKE + params.get(ACCESS_ID_LIKE).get(0) + LIKE);\n-            params.remove(ACCESS_ID_LIKE);\n-        }\n-        return query;\n-    }\n-\n-    private WorkbasketAccessItemExtendedQuery applySortingParams(WorkbasketAccessItemExtendedQuery query, MultiValueMap<String, String> params)\n-            throws IllegalArgumentException {\n-        // sorting\n-        String sortBy = params.getFirst(SORT_BY);\n-        if (sortBy != null) {\n-            BaseQuery.SortDirection sortDirection;\n-            if (params.getFirst(SORT_DIRECTION) != null && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n-                sortDirection = BaseQuery.SortDirection.DESCENDING;\n-            } else {\n-                sortDirection = BaseQuery.SortDirection.ASCENDING;\n-            }\n-            switch (sortBy) {\n-                case (WORKBASKET_KEY):\n-                    query = query.orderByWorkbasketKey(sortDirection);\n-                    break;\n-                case (ACCESS_ID):\n-                    query = query.orderByAccessId(sortDirection);\n-                    break;\n-                default:\n-                    throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n-            }\n-        }\n-        params.remove(SORT_BY);\n-        params.remove(SORT_DIRECTION);\n-        return query;\n-    }\n-\n-    private String[] extractVerticalBarSeparatedFields(List<String> searchFor) {\n-        List<String> values = new ArrayList<>();\n-        if (searchFor != null) {\n-            searchFor.forEach(item -> Collections.addAll(values, item.split(\"\\\\|\")));\n-        }\n-        return values.toArray(new String[0]);\n+  private static final Logger LOGGER =\n+      LoggerFactory.getLogger(WorkbasketAccessItemController.class);\n+\n+  private static final String LIKE = \"%\";\n+  private static final String WORKBASKET_KEY = \"workbasket-key\";\n+  private static final String WORKBASKET_KEY_LIKE = \"workbasket-key-like\";\n+  private static final String ACCESS_ID = \"access-id\";\n+  private static final String ACCESS_ID_LIKE = \"access-id-like\";\n+  private static final String ACCESS_IDS = \"access-ids\";\n+\n+  private static final String SORT_BY = \"sort-by\";\n+  private static final String SORT_DIRECTION = \"order\";\n+\n+  @Autowired LdapClient ldapClient;\n+\n+  @Autowired private WorkbasketService workbasketService;\n+\n+  @Autowired private WorkbasketAccessItemResourceAssembler workbasketAccessItemResourceAssembler;\n+\n+  /**\n+   * This GET method return all workbasketAccessItems that correspond the given data.\n+   *\n+   * @param params filter, order and access ids.\n+   * @return all WorkbasketAccesItemResource.\n+   * @throws NotAuthorizedException if the user is not authorized.\n+   * @throws InvalidArgumentException if some argument is invalid.\n+   */\n+  @GetMapping(path = Mapping.URL_WORKBASKETACCESSITEMS)\n+  public ResponseEntity<WorkbasketAccessItemPaginatedListResource> getWorkbasketAccessItems(\n+      @RequestParam MultiValueMap<String, String> params)\n+      throws NotAuthorizedException, InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to getWorkbasketAccessItems(params= {})\", params);\n+    }\n+\n+    WorkbasketAccessItemQuery query = workbasketService.createWorkbasketAccessItemQuery();\n+    query = getAccessIds(query, params);\n+    query = applyFilterParams(query, params);\n+    query = applySortingParams(query, params);\n+\n+    PageMetadata pageMetadata = getPageMetadata(params, query);\n+    List<WorkbasketAccessItem> workbasketAccessItems = getQueryList(query, pageMetadata);\n+\n+    WorkbasketAccessItemPaginatedListResource pagedResources =\n+        workbasketAccessItemResourceAssembler.toResources(workbasketAccessItems, pageMetadata);\n+\n+    ResponseEntity<WorkbasketAccessItemPaginatedListResource> response =\n+        ResponseEntity.ok(pagedResources);\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getWorkbasketAccessItems(), returning {}\", response);\n+    }\n+\n+    return response;\n+  }\n+\n+  /**\n+   * This DELETE method delete all workbasketAccessItems that correspond the given accessId.\n+   *\n+   * @param accessId which need remove his workbasketAccessItems.\n+   * @return ResponseEntity if the user is not authorized.\n+   * @throws NotAuthorizedException if the user is not authorized.\n+   * @throws InvalidArgumentException if some argument is invalid.\n+   */\n+  @DeleteMapping(path = Mapping.URL_WORKBASKETACCESSITEMS)\n+  public ResponseEntity<Void> removeWorkbasketAccessItems(\n+      @RequestParam(\"access-id\") String accessId)\n+      throws NotAuthorizedException, InvalidArgumentException {\n+    LOGGER.debug(\"Entry to removeWorkbasketAccessItems(access-id= {})\", accessId);\n+    if (!ldapClient.isGroup(accessId)) {\n+      List<WorkbasketAccessItem> workbasketAccessItemList =\n+          workbasketService.createWorkbasketAccessItemQuery().accessIdIn(accessId).list();\n+\n+      if (workbasketAccessItemList != null && !workbasketAccessItemList.isEmpty()) {\n+        workbasketService.deleteWorkbasketAccessItemsForAccessId(accessId);\n+      }\n+    } else {\n+      throw new InvalidArgumentException(\n+          accessId\n+              + \" corresponding to a group, not a user. You just can remove access items for a user\");\n+    }\n+\n+    ResponseEntity<Void> response = ResponseEntity.noContent().build();\n+    LOGGER.debug(\"Exit from removeWorkbasketAccessItems(), returning {}\", response);\n+    return response;\n+  }\n+\n+  private WorkbasketAccessItemQuery getAccessIds(\n+      WorkbasketAccessItemQuery query, MultiValueMap<String, String> params) {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to getAccessIds(query= {}, params= {})\", params);\n+    }\n+\n+    if (params.containsKey(ACCESS_IDS)) {\n+      String[] accessIds = extractVerticalBarSeparatedFields(params.get(ACCESS_IDS));\n+      query.accessIdIn(accessIds);\n+      params.remove(ACCESS_IDS);\n     }\n \n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getAccessIds(), returning {}\", query);\n+    }\n+\n+    return query;\n+  }\n+\n+  private WorkbasketAccessItemQuery applyFilterParams(\n+      WorkbasketAccessItemQuery query, MultiValueMap<String, String> params) {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", params);\n+    }\n+\n+    if (params.containsKey(WORKBASKET_KEY)) {\n+      String[] keys = extractCommaSeparatedFields(params.get(WORKBASKET_KEY));\n+      query.workbasketKeyIn(keys);\n+      params.remove(WORKBASKET_KEY);\n+    }\n+    if (params.containsKey(WORKBASKET_KEY_LIKE)) {\n+      query.workbasketKeyLike(LIKE + params.get(WORKBASKET_KEY_LIKE).get(0) + LIKE);\n+      params.remove(WORKBASKET_KEY_LIKE);\n+    }\n+    if (params.containsKey(ACCESS_ID)) {\n+      String[] accessId = extractCommaSeparatedFields(params.get(ACCESS_ID));\n+      query.accessIdIn(accessId);\n+      params.remove(ACCESS_ID);\n+    }\n+    if (params.containsKey(ACCESS_ID_LIKE)) {\n+      query.accessIdLike(LIKE + params.get(ACCESS_ID_LIKE).get(0) + LIKE);\n+      params.remove(ACCESS_ID_LIKE);\n+    }\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n+    }\n+\n+    return query;\n+  }\n+\n+  private WorkbasketAccessItemQuery applySortingParams(\n+      WorkbasketAccessItemQuery query, MultiValueMap<String, String> params)\n+      throws IllegalArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to applySortingParams(query= {}, params= {})\", params);\n+    }\n+\n+    // sorting\n+    String sortBy = params.getFirst(SORT_BY);\n+    if (sortBy != null) {\n+      BaseQuery.SortDirection sortDirection;\n+      if (params.getFirst(SORT_DIRECTION) != null\n+          && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n+        sortDirection = BaseQuery.SortDirection.DESCENDING;\n+      } else {\n+        sortDirection = BaseQuery.SortDirection.ASCENDING;\n+      }\n+      switch (sortBy) {\n+        case (WORKBASKET_KEY):\n+          query = query.orderByWorkbasketKey(sortDirection);\n+          break;\n+        case (ACCESS_ID):\n+          query = query.orderByAccessId(sortDirection);\n+          break;\n+        default:\n+          throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n+      }\n+    }\n+    params.remove(SORT_BY);\n+    params.remove(SORT_DIRECTION);\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n+    }\n+\n+    return query;\n+  }\n+\n+  private String[] extractVerticalBarSeparatedFields(List<String> searchFor) {\n+    List<String> values = new ArrayList<>();\n+    if (searchFor != null) {\n+      searchFor.forEach(item -> Collections.addAll(values, item.split(\"\\\\|\")));\n+    }\n+    return values.toArray(new String[0]);\n+  }\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "3f8dc3cf87cb36dd0eb10a0a43fac3b2d5995711", "committedDate": "2018-09-11 11:06:16 +0200", "message": "TSK-694 - Show list of all access items valid for a user (REST)"}, {"oid": "ec432d122aa7e39b5e05c0b90cfbcee876df6269", "committedDate": "2018-09-11 11:06:16 +0200", "message": "Joining  lib, rest and web"}, {"oid": "40b2648060536e851164614c7e1f2dcd8020d08b", "committedDate": "2018-09-11 11:06:16 +0200", "message": "Fixed minors"}, {"oid": "ef703b4a4025548faac4905ba488ae5777e791c0", "committedDate": "2018-09-11 11:06:16 +0200", "message": "TSK-694: refactored WorkbasketAccessItemQuery + Extended"}, {"oid": "afe618eba4abeaa8b310515029673645899455ee", "committedDate": "2018-09-25 09:37:05 +0200", "message": "TSK-679 - Delete all workbasket access items for a user"}, {"oid": "1e6fc73f7dde50c9d05dcb4556c026ce71db6025", "committedDate": "2018-10-15 08:32:12 +0200", "message": "TSK-715 - Merge WorkbasketAccessItem entities and remove the extended one"}, {"oid": "577ccaa648f52115c876706282d8434fe023f885", "committedDate": "2018-12-19 10:58:53 +0100", "message": "TSK-755 - Controller to get the simple history events"}, {"oid": "110056624cce354fe4b92bb342a8ddce0da46d7e", "committedDate": "2018-12-21 10:12:05 +0100", "message": "TSK-756 Add externalId to task to achieve idempotency"}, {"oid": "24a700b81dd383fd606785af81f37d2670bb84fe", "committedDate": "2019-01-22 13:22:01 +0100", "message": "TSK-769 - Improve the logger on both library and rest"}, {"oid": "8789dd5bf53e7f3712deb0fb85b68829e78724aa", "committedDate": "2019-02-01 13:50:43 +0100", "message": "TSK-775\t adapt code formatting to checkstyle template"}, {"oid": "cbc2ff16ac237bb923dbef4574b532bb20d90dcc", "committedDate": "2019-03-28 16:02:03 +0100", "message": "task/828: Unify and reduce the response and logger code in the controllers"}, {"oid": "aea64975dba98ebe04361ba7230f6bf186f2bcd8", "committedDate": "2019-05-07 08:24:49 +0200", "message": "feature/810 Add querying by planned date in monitor screen"}, {"oid": "aebd87b935fa739131d97336e5f3b6f3c6a99c5f", "committedDate": "2019-06-04 15:36:26 +0200", "message": "TSK-850: rebase cleanup"}, {"oid": "352d0d67cd3480f62eca33c4e5b3014c26c63394", "committedDate": "2019-09-26 10:38:29 +0200", "message": "TSK-881: Refactored REST-Api"}, {"oid": "f68e730a72cfba413fc2102ef84ac513ed194cee", "committedDate": "2019-10-04 22:12:52 +0200", "message": "TSK-896: Removed _embedded from History"}, {"oid": "f848bf4f4ecb62ca72b330bee2e1e47c9e53a829", "committedDate": "2019-11-30 12:21:18 +0100", "message": "TSK-947: Extract Url mappings"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "7509bb0f1c7cfb9e8bcc634fbd3f80c0b74b5ca6", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: Fix simple checkstyle warnings"}, {"oid": "78cfd64902439848c2f81d5226a4c0a99892739e", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: replaced MessageFormat with String.format"}, {"oid": "c1d74b212648dad55f3d09e2c19868098ebbdb8a", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: automatic formatting number 2"}, {"oid": "6a6dcb9c1e3984670c644f89c569eba3d20dcf3d", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Standardise paginated List behaviour and sub classes"}, {"oid": "3b13b9a95e4d7d1cf172f22fa0f2679ff1c5f79b", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 after initial refactoring"}, {"oid": "442385482236ad0c25830becbadddf30f6e7bf2d", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 fix dependent projects"}, {"oid": "5c7d38451ce7cbea2ad52d3b84be72d49c474c71", "committedDate": "2020-02-13 15:09:39 +0100", "message": "TSK-1094 introduce models package for */api and */internal"}, {"oid": "a8e44dead343598b7266254616a7f8559ee941ba", "committedDate": "2020-04-23 09:49:16 +0200", "message": "TSK-1083: Updated HATEOAS from version 0.24.0 to version 1.0.4"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyNDY3NQ==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422624675", "body": "Please reformat", "bodyText": "Please reformat", "bodyHTML": "<p dir=\"auto\">Please reformat</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T10:34:24Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java", "diffHunk": "@@ -215,17 +224,18 @@\n \n   @GetMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS, produces = MediaTypes.HAL_JSON_VALUE)\n   @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<WorkbasketAccessItemListResource> getWorkbasketAccessItems(\n-      @PathVariable(value = \"workbasketId\") String workbasketId)\n+  @SuppressWarnings(\"checkstyle:LineLength\")", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 820e48f04..b48fc9c2e 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -224,8 +224,8 @@ public class WorkbasketController extends AbstractPagingController {\n \n   @GetMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS, produces = MediaTypes.HAL_JSON_VALUE)\n   @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  @SuppressWarnings(\"checkstyle:LineLength\")\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> getWorkbasketAccessItems(@PathVariable(value = \"workbasketId\") String workbasketId)\n+  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n+      getWorkbasketAccessItems(@PathVariable(value = \"workbasketId\") String workbasketId)\n       throws NotAuthorizedException, WorkbasketNotFoundException {\n     LOGGER.debug(\"Entry to getWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n     ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> result;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 820e48f04..090eef61c 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -224,8 +224,8 @@ public class WorkbasketController extends AbstractPagingController {\n \n   @GetMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS, produces = MediaTypes.HAL_JSON_VALUE)\n   @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  @SuppressWarnings(\"checkstyle:LineLength\")\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> getWorkbasketAccessItems(@PathVariable(value = \"workbasketId\") String workbasketId)\n+  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n+      getWorkbasketAccessItems(@PathVariable(value = \"workbasketId\") String workbasketId)\n       throws NotAuthorizedException, WorkbasketNotFoundException {\n     LOGGER.debug(\"Entry to getWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n     ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> result;\n", "next_change": {"commit": "e872c39340c4755c0ea85ddbdee17229b7494bf8", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 090eef61c..509fef84a 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -1,518 +1,418 @@\n package pro.taskana.rest;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.hateoas.MediaTypes;\n-import org.springframework.hateoas.PagedModel.PageMetadata;\n-import org.springframework.hateoas.config.EnableHypermediaSupport;\n-import org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.util.MultiValueMap;\n+import org.springframework.transaction.interceptor.TransactionInterceptor;\n import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.PutMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.RestController;\n \n-import pro.taskana.common.api.BaseQuery.SortDirection;\n-import pro.taskana.common.api.LoggerUtils;\n-import pro.taskana.common.api.exceptions.ConcurrencyException;\n-import pro.taskana.common.api.exceptions.DomainNotFoundException;\n-import pro.taskana.common.api.exceptions.InvalidArgumentException;\n-import pro.taskana.common.api.exceptions.NotAuthorizedException;\n-import pro.taskana.rest.resource.DistributionTargetRepresentationModelAssembler;\n-import pro.taskana.rest.resource.TaskanaPagedModel;\n-import pro.taskana.rest.resource.WorkbasketAccessItemRepresentationModel;\n-import pro.taskana.rest.resource.WorkbasketAccessItemRepresentationModelAssembler;\n-import pro.taskana.rest.resource.WorkbasketRepresentationModel;\n-import pro.taskana.rest.resource.WorkbasketRepresentationModelAssembler;\n-import pro.taskana.rest.resource.WorkbasketSummaryRepresentationModel;\n-import pro.taskana.rest.resource.WorkbasketSummaryRepresentationModelAssembler;\n-import pro.taskana.workbasket.api.WorkbasketPermission;\n-import pro.taskana.workbasket.api.WorkbasketQuery;\n-import pro.taskana.workbasket.api.WorkbasketService;\n-import pro.taskana.workbasket.api.WorkbasketType;\n-import pro.taskana.workbasket.api.exceptions.InvalidWorkbasketException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketAccessItemAlreadyExistException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketAlreadyExistException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketInUseException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketNotFoundException;\n-import pro.taskana.workbasket.api.models.Workbasket;\n-import pro.taskana.workbasket.api.models.WorkbasketAccessItem;\n-import pro.taskana.workbasket.api.models.WorkbasketSummary;\n+import pro.taskana.BaseQuery;\n+import pro.taskana.Workbasket;\n+import pro.taskana.WorkbasketAccessItem;\n+import pro.taskana.WorkbasketPermission;\n+import pro.taskana.WorkbasketQuery;\n+import pro.taskana.WorkbasketService;\n+import pro.taskana.WorkbasketSummary;\n+import pro.taskana.exceptions.InvalidArgumentException;\n+import pro.taskana.exceptions.InvalidWorkbasketException;\n+import pro.taskana.exceptions.NotAuthorizedException;\n+import pro.taskana.exceptions.WorkbasketInUseException;\n+import pro.taskana.exceptions.WorkbasketNotFoundException;\n+import pro.taskana.impl.WorkbasketType;\n+import pro.taskana.rest.resource.WorkbasketAccessItemResource;\n+import pro.taskana.rest.resource.WorkbasketResource;\n+import pro.taskana.rest.resource.WorkbasketSummaryResource;\n+import pro.taskana.rest.resource.mapper.WorkbasketAccessItemMapper;\n+import pro.taskana.rest.resource.mapper.WorkbasketMapper;\n+import pro.taskana.rest.resource.mapper.WorkbasketSummaryMapper;\n \n-/** Controller for all {@link Workbasket} related endpoints. */\n @RestController\n-@EnableHypermediaSupport(type = HypermediaType.HAL)\n-public class WorkbasketController extends AbstractPagingController {\n-\n-  private static final Logger LOGGER = LoggerFactory.getLogger(WorkbasketController.class);\n-\n-  private static final String LIKE = \"%\";\n-  private static final String NAME = \"name\";\n-  private static final String NAME_LIKE = \"name-like\";\n-  private static final String KEY = \"key\";\n-  private static final String KEY_LIKE = \"key-like\";\n-  private static final String OWNER = \"owner\";\n-  private static final String OWNER_LIKE = \"owner-like\";\n-  private static final String DESCRIPTION_LIKE = \"description-like\";\n-  private static final String DOMAIN = \"domain\";\n-  private static final String REQUIRED_PERMISSION = \"required-permission\";\n-  private static final String TYPE = \"type\";\n-  private static final String DESCRIPTION = \"description\";\n-\n-  private static final String SORT_BY = \"sort-by\";\n-  private static final String SORT_DIRECTION = \"order\";\n-\n-  private final WorkbasketService workbasketService;\n-\n-  private final WorkbasketRepresentationModelAssembler workbasketRepresentationModelAssembler;\n-\n-  private final WorkbasketSummaryRepresentationModelAssembler\n-      workbasketSummaryRepresentationModelAssembler;\n-\n-  private final DistributionTargetRepresentationModelAssembler\n-      distributionTargetRepresentationModelAssembler;\n-\n-  private final WorkbasketAccessItemRepresentationModelAssembler\n-      workbasketAccessItemRepresentationModelAssembler;\n-\n-  WorkbasketController(\n-      WorkbasketService workbasketService,\n-      WorkbasketRepresentationModelAssembler workbasketRepresentationModelAssembler,\n-      WorkbasketSummaryRepresentationModelAssembler workbasketSummaryRepresentationModelAssembler,\n-      DistributionTargetRepresentationModelAssembler distributionTargetRepresentationModelAssembler,\n-      WorkbasketAccessItemRepresentationModelAssembler\n-          workbasketAccessItemRepresentationModelAssembler) {\n-    this.workbasketService = workbasketService;\n-    this.workbasketRepresentationModelAssembler = workbasketRepresentationModelAssembler;\n-    this.workbasketSummaryRepresentationModelAssembler =\n-        workbasketSummaryRepresentationModelAssembler;\n-    this.distributionTargetRepresentationModelAssembler =\n-        distributionTargetRepresentationModelAssembler;\n-    this.workbasketAccessItemRepresentationModelAssembler =\n-        workbasketAccessItemRepresentationModelAssembler;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> getWorkbaskets(\n-      @RequestParam MultiValueMap<String, String> params) throws InvalidArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to getWorkbaskets(params= {})\", params);\n-    }\n-\n-    WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n-    query = applySortingParams(query, params);\n-    applyFilterParams(query, params);\n-\n-    PageMetadata pageMetadata = getPageMetadata(params, query);\n-    List<WorkbasketSummary> workbasketSummaries = getQueryList(query, pageMetadata);\n-    TaskanaPagedModel<WorkbasketSummaryRepresentationModel> pagedModels =\n-        workbasketSummaryRepresentationModelAssembler.toPageModel(\n-            workbasketSummaries, pageMetadata);\n-\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        ResponseEntity.ok(pagedModels);\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getWorkbaskets(), returning {}\", response);\n+@RequestMapping(path = \"/v1/workbaskets\", produces = {MediaType.APPLICATION_JSON_VALUE})\n+public class WorkbasketController {\n+\n+    private static final String LIKE = \"%\";\n+    private static final String NAME = \"name\";\n+    private static final String KEY = \"key\";\n+    private static final String DESCRIPTION = \"description\";\n+    private static final String OWNER = \"owner\";\n+    private static final String TYPE = \"type\";\n+    private static final String DESC = \"desc\";\n+\n+    @Autowired\n+    private WorkbasketService workbasketService;\n+\n+    @Autowired\n+    private WorkbasketSummaryMapper workbasketSummaryMapper;\n+\n+    @Autowired\n+    private WorkbasketMapper workbasketMapper;\n+\n+    @Autowired\n+    private WorkbasketAccessItemMapper workbasketAccessItemMapper;\n+\n+    @GetMapping\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<List<WorkbasketSummaryResource>> getWorkbaskets(\n+        @RequestParam(value = \"sortBy\", defaultValue = \"name\", required = false) String sortBy,\n+        @RequestParam(value = \"order\", defaultValue = \"asc\", required = false) String order,\n+        @RequestParam(value = \"name\", required = false) String name,\n+        @RequestParam(value = \"nameLike\", required = false) String nameLike,\n+        @RequestParam(value = \"key\", required = false) String key,\n+        @RequestParam(value = \"keyLike\", required = false) String keyLike,\n+        @RequestParam(value = \"descLike\", required = false) String descLike,\n+        @RequestParam(value = \"owner\", required = false) String owner,\n+        @RequestParam(value = \"ownerLike\", required = false) String ownerLike,\n+        @RequestParam(value = \"type\", required = false) String type,\n+        @RequestParam(value = \"requiredPermission\", required = false) String requiredPermission) {\n+        ResponseEntity<List<WorkbasketSummaryResource>> result;\n+        List<WorkbasketSummary> workbasketsSummary;\n+        WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n+        addSortingToQuery(query, sortBy, order);\n+        addAttributeFilter(query, name, nameLike, key, keyLike, descLike, owner, ownerLike, type);\n+        addAuthorizationFilter(query, requiredPermission);\n+        workbasketsSummary = query.list();\n+        result = new ResponseEntity<>(workbasketsSummary.stream()\n+            .map(workbasket -> workbasketSummaryMapper.toResource(workbasket))\n+            .collect(Collectors.toList()), HttpStatus.OK);\n+        return result;\n     }\n \n-    return response;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET_ID, produces = MediaTypes.HAL_JSON_VALUE)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<WorkbasketRepresentationModel> getWorkbasket(\n-      @PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-    LOGGER.debug(\"Entry to getWorkbasket(workbasketId= {})\", workbasketId);\n-    ResponseEntity<WorkbasketRepresentationModel> result;\n-    Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n-    result = ResponseEntity.ok(workbasketRepresentationModelAssembler.toModel(workbasket));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getWorkbasket(), returning {}\", result);\n-    }\n-\n-    return result;\n-  }\n-\n-  @DeleteMapping(path = Mapping.URL_WORKBASKET_ID)\n-  @Transactional(rollbackFor = Exception.class, noRollbackFor = WorkbasketNotFoundException.class)\n-  public ResponseEntity<?> deleteWorkbasket(\n-      @PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException,\n-          WorkbasketInUseException {\n-    LOGGER.debug(\"Entry to markWorkbasketForDeletion(workbasketId= {})\", workbasketId);\n-    ResponseEntity<?> response;\n-\n-    boolean workbasketDeleted = workbasketService.deleteWorkbasket(workbasketId);\n-\n-    if (workbasketDeleted) {\n-      LOGGER.debug(\"Workbasket successfully deleted.\");\n-      response = ResponseEntity.noContent().build();\n-    } else {\n-      LOGGER.debug(\n-          \"Workbasket was only marked for deletion and will be physically deleted later on.\");\n-      response = ResponseEntity.accepted().build();\n+    @GetMapping(path = \"/{workbasketId}\")\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketResource> getWorkbasket(@PathVariable(value = \"workbasketId\") String workbasketId) {\n+        ResponseEntity<WorkbasketResource> result;\n+        try {\n+            Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n+            result = new ResponseEntity<>(workbasketMapper.toResource(workbasket), HttpStatus.OK);\n+        } catch (WorkbasketNotFoundException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.NOT_FOUND);\n+        } catch (NotAuthorizedException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n+        }\n+        return result;\n     }\n \n-    LOGGER.debug(\"Exit from markWorkbasketForDeletion(), returning {}\", response);\n-    return response;\n-  }\n-\n-  @PostMapping(path = Mapping.URL_WORKBASKET)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<WorkbasketRepresentationModel> createWorkbasket(\n-      @RequestBody WorkbasketRepresentationModel workbasketRepresentationModel)\n-      throws InvalidWorkbasketException, NotAuthorizedException, WorkbasketAlreadyExistException,\n-          DomainNotFoundException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\n-          \"Entry to createWorkbasket(workbasketResource= {})\", workbasketRepresentationModel);\n+    @DeleteMapping(path = \"/{workbasketId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<?> deleteWorkbasket(@PathVariable(value = \"workbasketId\") String workbasketId) {\n+        ResponseEntity<?> result = ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n+        try {\n+            workbasketService.deleteWorkbasket(workbasketId);\n+        } catch (WorkbasketNotFoundException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n+        } catch (NotAuthorizedException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n+        } catch (WorkbasketInUseException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.LOCKED).build();\n+        } catch (InvalidArgumentException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.PRECONDITION_FAILED).build();\n+        }\n+        return result;\n     }\n \n-    Workbasket workbasket =\n-        workbasketRepresentationModelAssembler.toEntityModel(workbasketRepresentationModel);\n-    workbasket = workbasketService.createWorkbasket(workbasket);\n-    ResponseEntity<WorkbasketRepresentationModel> response =\n-        ResponseEntity.status(HttpStatus.CREATED)\n-            .body(workbasketRepresentationModelAssembler.toModel(workbasket));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from createWorkbasket(), returning {}\", response);\n+    @PostMapping\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketResource> createWorkbasket(@RequestBody WorkbasketResource workbasketResource)\n+        throws NotAuthorizedException {\n+        try {\n+            Workbasket workbasket = workbasketMapper.toModel(workbasketResource);\n+            workbasket = workbasketService.createWorkbasket(workbasket);\n+            return new ResponseEntity<>(workbasketMapper.toResource(workbasket), HttpStatus.CREATED);\n+        } catch (InvalidWorkbasketException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);\n+        }\n     }\n \n-    return response;\n-  }\n-\n-  @PutMapping(path = Mapping.URL_WORKBASKET_ID)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<WorkbasketRepresentationModel> updateWorkbasket(\n-      @PathVariable(value = \"workbasketId\") String workbasketId,\n-      @RequestBody WorkbasketRepresentationModel workbasketRepresentationModel)\n-      throws InvalidWorkbasketException, WorkbasketNotFoundException, NotAuthorizedException,\n-          ConcurrencyException {\n-    LOGGER.debug(\"Entry to updateWorkbasket(workbasketId= {})\", workbasketId);\n-    ResponseEntity<WorkbasketRepresentationModel> result;\n-    if (workbasketId.equals(workbasketRepresentationModel.getWorkbasketId())) {\n-      Workbasket workbasket =\n-          workbasketRepresentationModelAssembler.toEntityModel(workbasketRepresentationModel);\n-      workbasket = workbasketService.updateWorkbasket(workbasket);\n-      result = ResponseEntity.ok(workbasketRepresentationModelAssembler.toModel(workbasket));\n-    } else {\n-      throw new InvalidWorkbasketException(\n-          \"Target-WB-ID('\"\n-              + workbasketId\n-              + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n-              + workbasketRepresentationModel.getWorkbasketId()\n-              + \"')\");\n-    }\n+    @PutMapping(path = \"/{workbasketId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketResource> updateWorkbasket(\n+        @PathVariable(value = \"workbasketId\") String workbasketId,\n+        @RequestBody WorkbasketResource workbasketResource) {\n+        ResponseEntity<WorkbasketResource> result;\n+        try {\n+            if (workbasketId.equals(workbasketResource.workbasketId)) {\n+                Workbasket workbasket = workbasketMapper.toModel(workbasketResource);\n+                workbasket = workbasketService.updateWorkbasket(workbasket);\n+                result = ResponseEntity.ok(workbasketMapper.toResource(workbasket));\n+            } else {\n+                throw new InvalidWorkbasketException(\n+                    \"Target-WB-ID('\" + workbasketId\n+                        + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n+                        + workbasketResource.getId() + \"')\");\n+            }\n+        } catch (InvalidWorkbasketException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.BAD_REQUEST);\n+        } catch (WorkbasketNotFoundException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.NOT_FOUND);\n+        } catch (NotAuthorizedException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n+        }\n \n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from updateWorkbasket(), returning {}\", result);\n+        return result;\n     }\n \n-    return result;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS, produces = MediaTypes.HAL_JSON_VALUE)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n-      getWorkbasketAccessItems(@PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws NotAuthorizedException, WorkbasketNotFoundException {\n-    LOGGER.debug(\"Entry to getWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-    ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> result;\n-\n-    List<WorkbasketAccessItem> accessItems =\n-        workbasketService.getWorkbasketAccessItems(workbasketId);\n-    result =\n-        ResponseEntity.ok(\n-            workbasketAccessItemRepresentationModelAssembler.toPageModel(\n-                workbasketId, accessItems, null));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getWorkbasketAccessItems(), returning {}\", result);\n+    @GetMapping(path = \"/{workbasketId}/workbasketAccessItems\")\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<List<WorkbasketAccessItemResource>> getWorkbasketAccessItems(\n+        @PathVariable(value = \"workbasketId\") String workbasketId) {\n+        List<WorkbasketAccessItem> wbAuthorizations = workbasketService.getWorkbasketAccessItems(workbasketId);\n+        List<WorkbasketAccessItemResource> result = new ArrayList<>();\n+        wbAuthorizations.stream()\n+            .forEach(accItem -> {\n+                try {\n+                    result.add(workbasketAccessItemMapper.toResource(accItem));\n+                } catch (NotAuthorizedException e) {\n+                    e.printStackTrace();\n+                }\n+            });\n+        return new ResponseEntity<>(result, HttpStatus.OK);\n     }\n \n-    return result;\n-  }\n-\n-  @PutMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n-      setWorkbasketAccessItems(\n-      @PathVariable(value = \"workbasketId\") String workbasketId,\n-      @RequestBody List<WorkbasketAccessItemRepresentationModel> workbasketAccessResourceItems)\n-      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException,\n-                 WorkbasketAccessItemAlreadyExistException {\n-    LOGGER.debug(\"Entry to setWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-    if (workbasketAccessResourceItems == null) {\n-      throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n+    @PostMapping(path = \"/workbasketAccessItems\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketAccessItemResource> createWorkbasketAccessItem(\n+        @RequestBody WorkbasketAccessItemResource workbasketAccessItemResource) throws NotAuthorizedException {\n+        try {\n+            WorkbasketAccessItem workbasketAccessItem = workbasketAccessItemMapper\n+                .toModel(workbasketAccessItemResource);\n+            workbasketAccessItem = workbasketService.createWorkbasketAccessItem(workbasketAccessItem);\n+            return new ResponseEntity<>(workbasketAccessItemMapper.toResource(workbasketAccessItem), HttpStatus.OK);\n+        } catch (InvalidArgumentException e) {\n+            return new ResponseEntity<>(HttpStatus.PRECONDITION_FAILED);\n+        }\n     }\n \n-    List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n-    workbasketAccessResourceItems.forEach(\n-        item -> wbAccessItems\n-                    .add(workbasketAccessItemRepresentationModelAssembler.toEntityModel(item)));\n-    workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n-    List<WorkbasketAccessItem> updatedWbAccessItems =\n-        workbasketService.getWorkbasketAccessItems(workbasketId);\n-\n-    ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> response =\n-        ResponseEntity.ok(\n-            workbasketAccessItemRepresentationModelAssembler.toPageModel(\n-                workbasketId, updatedWbAccessItems, null));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from setWorkbasketAccessItems(), returning {}\", response);\n+    @PutMapping(path = \"/workbasketAccessItems/{workbasketAccessItemId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketAccessItemResource> updateWorkbasketAccessItem(\n+        @PathVariable(value = \"authId\") String authId,\n+        @RequestBody WorkbasketAccessItemResource workbasketAccessItemResource) {\n+        try {\n+            WorkbasketAccessItem workbasketAccessItem = workbasketAccessItemMapper\n+                .toModel(workbasketAccessItemResource);\n+            workbasketAccessItem = workbasketService.updateWorkbasketAccessItem(workbasketAccessItem);\n+            return new ResponseEntity<>(workbasketAccessItemMapper.toResource(workbasketAccessItem), HttpStatus.OK);\n+        } catch (InvalidArgumentException | NotAuthorizedException e) {\n+            return new ResponseEntity<>(HttpStatus.PRECONDITION_FAILED);\n+        }\n     }\n \n-    return response;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION, produces = MediaTypes.HAL_JSON_VALUE)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n-      getDistributionTargets(@PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-\n-    LOGGER.debug(\"Entry to getDistributionTargets(workbasketId= {})\", workbasketId);\n-    List<WorkbasketSummary> distributionTargets =\n-        workbasketService.getDistributionTargets(workbasketId);\n-    TaskanaPagedModel<WorkbasketSummaryRepresentationModel> distributionTargetListResource =\n-        distributionTargetRepresentationModelAssembler.toPageModel(distributionTargets, null);\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> result =\n-        ResponseEntity.ok(distributionTargetListResource);\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getDistributionTargets(), returning {}\", result);\n+    @PutMapping(value = \"/{workbasketId}/workbasketAccessItems/\")\n+    public ResponseEntity<?> setWorkbasketAccessItems(@PathVariable(value = \"workbasketId\") String workbasketId,\n+        @RequestBody List<WorkbasketAccessItemResource> workbasketAccessResourceItems) {\n+        try {\n+            if (workbasketAccessResourceItems == null) {\n+                throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n+            }\n+            List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n+            workbasketAccessResourceItems.stream()\n+                .forEach(item -> wbAccessItems.add(workbasketAccessItemMapper.toModel(item)));\n+            workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n+            return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n+        } catch (InvalidArgumentException | NullPointerException e) {\n+            return new ResponseEntity<>(HttpStatus.PRECONDITION_FAILED);\n+        }\n     }\n \n-    return result;\n-  }\n-\n-  @PutMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n-      setDistributionTargetsForWorkbasketId(\n-      @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n-      @RequestBody List<String> targetWorkbasketIds)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\n-          \"Entry to getTasksStatusReport(workbasketId= {}, targetWorkbasketIds\u00b4= {})\",\n-          sourceWorkbasketId,\n-          LoggerUtils.listToString(targetWorkbasketIds));\n+    @DeleteMapping(path = \"/workbasketAccessItems/{workbasketAccessItemId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<?> deleteWorkbasketAccessItem(@PathVariable(value = \"authId\") String authId)\n+        throws NotAuthorizedException {\n+        workbasketService.deleteWorkbasketAccessItem(authId);\n+        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n     }\n \n-    workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n-\n-    List<WorkbasketSummary> distributionTargets =\n-        workbasketService.getDistributionTargets(sourceWorkbasketId);\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        ResponseEntity.ok(\n-            distributionTargetRepresentationModelAssembler.toPageModel(distributionTargets, null));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getTasksStatusReport(), returning {}\", response);\n+    @GetMapping(path = \"/{workbasketId}/distributiontargets\")\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<List<WorkbasketSummaryResource>> getDistributionTargetsForWorkbasketId(\n+        @PathVariable(value = \"workbasketId\") String workbasketId) {\n+\n+        ResponseEntity<List<WorkbasketSummaryResource>> result;\n+        List<WorkbasketSummary> distributionTargets;\n+        try {\n+            distributionTargets = workbasketService.getDistributionTargets(workbasketId);\n+            result = new ResponseEntity<>(distributionTargets.stream()\n+                .map(workbasket -> workbasketSummaryMapper.toResource(workbasket))\n+                .collect(Collectors.toList()), HttpStatus.OK);\n+        } catch (WorkbasketNotFoundException e) {\n+            result = new ResponseEntity<>(HttpStatus.NOT_FOUND);\n+        } catch (NotAuthorizedException e) {\n+            result = new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n+        }\n+        return result;\n     }\n \n-    return response;\n-  }\n-\n-  @DeleteMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n-      removeDistributionTargetForWorkbasketId(\n-      @PathVariable(value = \"workbasketId\") String targetWorkbasketId)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-    LOGGER.debug(\n-        \"Entry to removeDistributionTargetForWorkbasketId(workbasketId= {})\", targetWorkbasketId);\n-\n-    List<WorkbasketSummary> sourceWorkbaskets =\n-        workbasketService.getDistributionSources(targetWorkbasketId);\n-    for (WorkbasketSummary source : sourceWorkbaskets) {\n-      workbasketService.removeDistributionTarget(source.getId(), targetWorkbasketId);\n+    @PutMapping(path = \"/{workbasketId}/distributiontargets\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<?> setDistributionTargetsForWorkbasketId(\n+        @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n+        @RequestBody List<String> targetWorkbasketIds) {\n+        ResponseEntity<?> result;\n+        try {\n+            workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n+            result = ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n+        } catch (WorkbasketNotFoundException e) {\n+            result = ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n+        } catch (NotAuthorizedException e) {\n+            result = ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n+        }\n+        return result;\n     }\n \n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        ResponseEntity.noContent().build();\n-    LOGGER.debug(\"Exit from removeDistributionTargetForWorkbasketId(), returning {}\", response);\n-    return response;\n-  }\n+    private void addAuthorizationFilter(WorkbasketQuery query, String requiredPermission) {\n+        if (requiredPermission == null) {\n+            return;\n+        }\n \n-  private WorkbasketQuery applySortingParams(\n-      WorkbasketQuery query, MultiValueMap<String, String> params) throws IllegalArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to applySortingParams(query= {}, params={})\", query, params);\n+        for (String authorization : Arrays.asList(requiredPermission.split(\",\"))) {\n+            try {\n+                switch (authorization.trim()) {\n+                    case \"READ\":\n+                        query.callerHasPermission(WorkbasketPermission.READ);\n+                        break;\n+                    case \"OPEN\":\n+                        query.callerHasPermission(WorkbasketPermission.OPEN);\n+                        break;\n+                    case \"APPEND\":\n+                        query.callerHasPermission(WorkbasketPermission.APPEND);\n+                        break;\n+                    case \"TRANSFER\":\n+                        query.callerHasPermission(WorkbasketPermission.TRANSFER);\n+                        break;\n+                    case \"DISTRIBUTE\":\n+                        query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n+                        break;\n+                    case \"CUSTOM_1\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n+                        break;\n+                    case \"CUSTOM_2\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n+                        break;\n+                    case \"CUSTOM_3\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n+                        break;\n+                    case \"CUSTOM_4\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n+                        break;\n+                    case \"CUSTOM_5\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n+                        break;\n+                    case \"CUSTOM_6\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n+                        break;\n+                    case \"CUSTOM_7\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n+                        break;\n+                    case \"CUSTOM_8\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n+                        break;\n+                    case \"CUSTOM_9\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n+                        break;\n+                    case \"CUSTOM_10\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n+                        break;\n+                    case \"CUSTOM_11\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n+                        break;\n+                    case \"CUSTOM_12\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n+                        break;\n+                }\n+            } catch (InvalidArgumentException e) {\n+                e.printStackTrace();\n+            }\n+        }\n     }\n \n-    // sorting\n-    String sortBy = params.getFirst(SORT_BY);\n-    if (sortBy != null) {\n-      SortDirection sortDirection;\n-      if (params.getFirst(SORT_DIRECTION) != null\n-          && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n-        sortDirection = SortDirection.DESCENDING;\n-      } else {\n-        sortDirection = SortDirection.ASCENDING;\n-      }\n-      switch (sortBy) {\n-        case (NAME):\n-          query = query.orderByName(sortDirection);\n-          break;\n-        case (KEY):\n-          query = query.orderByKey(sortDirection);\n-          break;\n-        case (OWNER):\n-          query = query.orderByOwner(sortDirection);\n-          break;\n-        case (TYPE):\n-          query = query.orderByType(sortDirection);\n-          break;\n-        case (DESCRIPTION):\n-          query = query.orderByDescription(sortDirection);\n-          break;\n-        default:\n-          throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n-      }\n-    }\n-    params.remove(SORT_BY);\n-    params.remove(SORT_DIRECTION);\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n+    private void addSortingToQuery(WorkbasketQuery query, String sortBy, String order) {\n+        BaseQuery.SortDirection sortDirection = getSortDirection(order);\n+\n+        switch (sortBy) {\n+            case NAME:\n+                query.orderByName(sortDirection);\n+                break;\n+            case KEY:\n+                query.orderByKey(sortDirection);\n+                break;\n+            case DESCRIPTION:\n+                query.orderByDescription(sortDirection);\n+                break;\n+            case OWNER:\n+                query.orderByOwner(sortDirection);\n+                break;\n+            case TYPE:\n+                query.orderByType(sortDirection);\n+                break;\n+        }\n     }\n \n-    return query;\n-  }\n-\n-  private void applyFilterParams(\n-      WorkbasketQuery query, MultiValueMap<String, String> params) throws InvalidArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", query, params);\n+    private BaseQuery.SortDirection getSortDirection(String order) {\n+        if (order.equals(DESC)) {\n+            return BaseQuery.SortDirection.DESCENDING;\n+        }\n+        return BaseQuery.SortDirection.ASCENDING;\n     }\n \n-    if (params.containsKey(NAME)) {\n-      String[] names = extractCommaSeparatedFields(params.get(NAME));\n-      query.nameIn(names);\n-      params.remove(NAME);\n-    }\n-    if (params.containsKey(NAME_LIKE)) {\n-      query.nameLike(LIKE + params.get(NAME_LIKE).get(0) + LIKE);\n-      params.remove(NAME_LIKE);\n-    }\n-    if (params.containsKey(KEY)) {\n-      String[] names = extractCommaSeparatedFields(params.get(KEY));\n-      query.keyIn(names);\n-      params.remove(KEY);\n-    }\n-    if (params.containsKey(KEY_LIKE)) {\n-      query.keyLike(LIKE + params.get(KEY_LIKE).get(0) + LIKE);\n-      params.remove(KEY_LIKE);\n-    }\n-    if (params.containsKey(OWNER)) {\n-      String[] names = extractCommaSeparatedFields(params.get(OWNER));\n-      query.ownerIn(names);\n-      params.remove(OWNER);\n-    }\n-    if (params.containsKey(OWNER_LIKE)) {\n-      query.ownerLike(LIKE + params.get(OWNER_LIKE).get(0) + LIKE);\n-      params.remove(OWNER_LIKE);\n-    }\n-    if (params.containsKey(DESCRIPTION_LIKE)) {\n-      query.descriptionLike(LIKE + params.get(DESCRIPTION_LIKE).get(0) + LIKE);\n-      params.remove(DESCRIPTION_LIKE);\n-    }\n-    if (params.containsKey(DOMAIN)) {\n-      query.domainIn(extractCommaSeparatedFields(params.get(DOMAIN)));\n-      params.remove(DOMAIN);\n-    }\n-    if (params.containsKey(TYPE)) {\n-      switch (params.getFirst(TYPE)) {\n-        case \"PERSONAL\":\n-          query.typeIn(WorkbasketType.PERSONAL);\n-          break;\n-        case \"GROUP\":\n-          query.typeIn(WorkbasketType.GROUP);\n-          break;\n-        case \"CLEARANCE\":\n-          query.typeIn(WorkbasketType.CLEARANCE);\n-          break;\n-        case \"TOPIC\":\n-          query.typeIn(WorkbasketType.TOPIC);\n-          break;\n-        default:\n-          throw new InvalidArgumentException(\n-              \"Unknown Workbasket type '\" + params.getFirst(TYPE) + \"'\");\n-      }\n-      params.remove(TYPE);\n-    }\n-    if (params.containsKey(REQUIRED_PERMISSION)) {\n-      for (String authorization : params.getFirst(REQUIRED_PERMISSION).split(\",\")) {\n-        switch (authorization.trim()) {\n-          case \"READ\":\n-            query.callerHasPermission(WorkbasketPermission.READ);\n-            break;\n-          case \"OPEN\":\n-            query.callerHasPermission(WorkbasketPermission.OPEN);\n-            break;\n-          case \"APPEND\":\n-            query.callerHasPermission(WorkbasketPermission.APPEND);\n-            break;\n-          case \"TRANSFER\":\n-            query.callerHasPermission(WorkbasketPermission.TRANSFER);\n-            break;\n-          case \"DISTRIBUTE\":\n-            query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n-            break;\n-          case \"CUSTOM_1\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n-            break;\n-          case \"CUSTOM_2\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n-            break;\n-          case \"CUSTOM_3\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n-            break;\n-          case \"CUSTOM_4\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n-            break;\n-          case \"CUSTOM_5\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n-            break;\n-          case \"CUSTOM_6\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n-            break;\n-          case \"CUSTOM_7\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n-            break;\n-          case \"CUSTOM_8\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n-            break;\n-          case \"CUSTOM_9\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n-            break;\n-          case \"CUSTOM_10\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n-            break;\n-          case \"CUSTOM_11\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n-            break;\n-          case \"CUSTOM_12\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n-            break;\n-          default:\n-            throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n+    private void addAttributeFilter(WorkbasketQuery query,\n+        String name, String nameLike,\n+        String key, String keyLike,\n+        String descLike, String owner,\n+        String ownerLike, String type) {\n+        if (name != null)\n+            query.nameIn(name);\n+        if (nameLike != null)\n+            query.nameLike(LIKE + nameLike + LIKE);\n+        if (key != null)\n+            query.keyIn(key);\n+        if (keyLike != null)\n+            query.keyLike(LIKE + keyLike + LIKE);\n+        if (owner != null)\n+            query.ownerIn(owner);\n+        if (ownerLike != null)\n+            query.ownerLike(LIKE + ownerLike + LIKE);\n+        if (descLike != null)\n+            query.descriptionLike(LIKE + descLike + LIKE);\n+        if (type != null) {\n+            switch (type) {\n+                case \"PERSONAL\":\n+                    query.typeIn(WorkbasketType.PERSONAL);\n+                    break;\n+                case \"GROUP\":\n+                    query.typeIn(WorkbasketType.GROUP);\n+                    break;\n+                case \"CLEARANCE\":\n+                    query.typeIn(WorkbasketType.CLEARANCE);\n+                    break;\n+                case \"TOPIC\":\n+                    query.typeIn(WorkbasketType.TOPIC);\n+                    break;\n+            }\n         }\n-      }\n-      params.remove(REQUIRED_PERMISSION);\n-    }\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n     }\n-\n-  }\n }\n", "next_change": {"commit": "eaf15fd19c0b34abc699c6feedb1a216eeaade45", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 509fef84a..93f7f77be 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -412,6 +426,8 @@ public class WorkbasketController {\n                 case \"TOPIC\":\n                     query.typeIn(WorkbasketType.TOPIC);\n                     break;\n+                    default:\n+                        throw new RuntimeException(\"should never occur\");\n             }\n         }\n     }\n", "next_change": {"commit": "43a226f26d53d3e7ec1842b4de28c2d0ab1e6b37", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 93f7f77be..d31c828e4 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -426,8 +424,8 @@ public class WorkbasketController {\n                 case \"TOPIC\":\n                     query.typeIn(WorkbasketType.TOPIC);\n                     break;\n-                    default:\n-                        throw new RuntimeException(\"should never occur\");\n+                default:\n+                    throw new InvalidArgumentException(\"Unknown Workbaskettype '\" + type + \"'\");\n             }\n         }\n     }\n", "next_change": {"commit": "4765fc242ac1934ac0e681a691e10a7afd055059", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex d31c828e4..58f52582a 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -429,4 +386,19 @@ public class WorkbasketController {\n             }\n         }\n     }\n+\n+    private PageMetadata initPageMetadata(String pagesizeParam, String pageParam, long totalElements)\n+        throws InvalidArgumentException {\n+        long pagesize;\n+        long page;\n+        try {\n+            pagesize = Long.valueOf(pagesizeParam);\n+            page = Long.valueOf(pageParam);\n+        } catch (NumberFormatException e) {\n+            throw new InvalidArgumentException(\"page and pagesize must be a integer value.\");\n+        }\n+        PageMetadata pageMetadata = new PageMetadata(pagesize, page, totalElements, (totalElements / pagesize) + 1);\n+        return pageMetadata;\n+    }\n+\n }\n", "next_change": {"commit": "106df46a69a9fbebad2795ad53474f8cf91944c1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 58f52582a..990b5b64c 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -387,18 +388,4 @@ public class WorkbasketController {\n         }\n     }\n \n-    private PageMetadata initPageMetadata(String pagesizeParam, String pageParam, long totalElements)\n-        throws InvalidArgumentException {\n-        long pagesize;\n-        long page;\n-        try {\n-            pagesize = Long.valueOf(pagesizeParam);\n-            page = Long.valueOf(pageParam);\n-        } catch (NumberFormatException e) {\n-            throw new InvalidArgumentException(\"page and pagesize must be a integer value.\");\n-        }\n-        PageMetadata pageMetadata = new PageMetadata(pagesize, page, totalElements, (totalElements / pagesize) + 1);\n-        return pageMetadata;\n-    }\n-\n }\n", "next_change": {"commit": "dc8b0dbc54b4a715cea84d8644da78ebb6778314", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 990b5b64c..1ce35ed49 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -383,9 +320,71 @@ public class WorkbasketController extends AbstractPagingController {\n                     query.typeIn(WorkbasketType.TOPIC);\n                     break;\n                 default:\n-                    throw new InvalidArgumentException(\"Unknown Workbaskettype '\" + type + \"'\");\n+                    throw new InvalidArgumentException(\"Unknown Workbaskettype '\" + params.getFirst(TYPE) + \"'\");\n+            }\n+            params.remove(TYPE);\n+        }\n+        if (params.containsKey(REQUIRED_PERMISSION)) {\n+            for (String authorization : Arrays.asList(params.getFirst(REQUIRED_PERMISSION).split(\",\"))) {\n+                switch (authorization.trim()) {\n+                    case \"READ\":\n+                        query.callerHasPermission(WorkbasketPermission.READ);\n+                        break;\n+                    case \"OPEN\":\n+                        query.callerHasPermission(WorkbasketPermission.OPEN);\n+                        break;\n+                    case \"APPEND\":\n+                        query.callerHasPermission(WorkbasketPermission.APPEND);\n+                        break;\n+                    case \"TRANSFER\":\n+                        query.callerHasPermission(WorkbasketPermission.TRANSFER);\n+                        break;\n+                    case \"DISTRIBUTE\":\n+                        query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n+                        break;\n+                    case \"CUSTOM_1\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n+                        break;\n+                    case \"CUSTOM_2\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n+                        break;\n+                    case \"CUSTOM_3\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n+                        break;\n+                    case \"CUSTOM_4\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n+                        break;\n+                    case \"CUSTOM_5\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n+                        break;\n+                    case \"CUSTOM_6\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n+                        break;\n+                    case \"CUSTOM_7\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n+                        break;\n+                    case \"CUSTOM_8\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n+                        break;\n+                    case \"CUSTOM_9\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n+                        break;\n+                    case \"CUSTOM_10\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n+                        break;\n+                    case \"CUSTOM_11\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n+                        break;\n+                    case \"CUSTOM_12\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n+                        break;\n+                    default:\n+                        throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n+                }\n             }\n+            params.remove(REQUIRED_PERMISSION);\n         }\n+        return query;\n     }\n \n }\n", "next_change": {"commit": "24a700b81dd383fd606785af81f37d2670bb84fe", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 1ce35ed49..683864185 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -384,6 +476,10 @@ public class WorkbasketController extends AbstractPagingController {\n             }\n             params.remove(REQUIRED_PERMISSION);\n         }\n+        if(LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n+        }\n+\n         return query;\n     }\n \n", "next_change": {"commit": "8789dd5bf53e7f3712deb0fb85b68829e78724aa", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 683864185..bc1b82904 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -476,7 +476,7 @@ public class WorkbasketController extends AbstractPagingController {\n             }\n             params.remove(REQUIRED_PERMISSION);\n         }\n-        if(LOGGER.isDebugEnabled()) {\n+        if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n         }\n \n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex bc1b82904..86d6b11e9 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -43,444 +37,455 @@ import pro.taskana.exceptions.WorkbasketAlreadyExistException;\n import pro.taskana.exceptions.WorkbasketInUseException;\n import pro.taskana.exceptions.WorkbasketNotFoundException;\n import pro.taskana.impl.util.LoggerUtils;\n+import pro.taskana.rest.resource.DistributionTargetListResource;\n import pro.taskana.rest.resource.DistributionTargetResource;\n+import pro.taskana.rest.resource.DistributionTargetResourceAssembler;\n+import pro.taskana.rest.resource.PagedResources.PageMetadata;\n+import pro.taskana.rest.resource.WorkbasketAccessItemListResource;\n import pro.taskana.rest.resource.WorkbasketAccessItemResource;\n+import pro.taskana.rest.resource.WorkbasketAccessItemResourceAssembler;\n import pro.taskana.rest.resource.WorkbasketResource;\n-import pro.taskana.rest.resource.WorkbasketSummaryResource;\n-import pro.taskana.rest.resource.DistributionTargetListAssembler;\n-import pro.taskana.rest.resource.WorkbasketAccessItemAssembler;\n-import pro.taskana.rest.resource.WorkbasketAccessItemListAssembler;\n import pro.taskana.rest.resource.WorkbasketResourceAssembler;\n-import pro.taskana.rest.resource.WorkbasketSummaryResourcesAssembler;\n+import pro.taskana.rest.resource.WorkbasketSummaryListResource;\n+import pro.taskana.rest.resource.WorkbasketSummaryResourceAssembler;\n \n-/**\n- * Controller for all {@link Workbasket} related endpoints.\n- */\n+/** Controller for all {@link Workbasket} related endpoints. */\n @RestController\n @EnableHypermediaSupport(type = HypermediaType.HAL)\n-@RequestMapping(path = \"/v1/workbaskets\", produces = \"application/hal+json\")\n public class WorkbasketController extends AbstractPagingController {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(WorkbasketController.class);\n-\n-    private static final String LIKE = \"%\";\n-    private static final String NAME = \"name\";\n-    private static final String NAME_LIKE = \"name-like\";\n-    private static final String KEY = \"key\";\n-    private static final String KEY_LIKE = \"key-like\";\n-    private static final String OWNER = \"owner\";\n-    private static final String OWNER_LIKE = \"owner-like\";\n-    private static final String DESCRIPTION_LIKE = \"description-like\";\n-    private static final String DOMAIN = \"domain\";\n-    private static final String REQUIRED_PERMISSION = \"required-permission\";\n-    private static final String TYPE = \"type\";\n-    private static final String DESCRIPTION = \"description\";\n-\n-    private static final String SORT_BY = \"sort-by\";\n-    private static final String SORT_DIRECTION = \"order\";\n-\n-    private static final String PAGING_PAGE = \"page\";\n-    private static final String PAGING_PAGE_SIZE = \"page-size\";\n-\n-    @Autowired\n-    private WorkbasketService workbasketService;\n-\n-    @Autowired\n-    private TaskService taskService;\n-\n-    @Autowired\n-    private WorkbasketResourceAssembler workbasketResourceAssembler;\n-\n-    @Autowired\n-    private DistributionTargetListAssembler distributionTargetListAssembler;\n-\n-    @Autowired\n-    private WorkbasketAccessItemListAssembler accessItemListAssembler;\n-\n-    @Autowired\n-    private WorkbasketAccessItemAssembler workbasketAccessItemAssembler;\n-\n-    @GetMapping\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<PagedResources<WorkbasketSummaryResource>> getWorkbaskets(\n-        @RequestParam MultiValueMap<String, String> params) throws InvalidArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to getWorkbaskets(params= {})\", params);\n-        }\n \n-        WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n-        query = applySortingParams(query, params);\n-        query = applyFilterParams(query, params);\n-\n-        PageMetadata pageMetadata = null;\n-        List<WorkbasketSummary> workbasketSummaries = null;\n-        String page = params.getFirst(PAGING_PAGE);\n-        String pageSize = params.getFirst(PAGING_PAGE_SIZE);\n-        params.remove(PAGING_PAGE);\n-        params.remove(PAGING_PAGE_SIZE);\n-        validateNoInvalidParameterIsLeft(params);\n-        if (page != null && pageSize != null) {\n-            // paging\n-            long totalElements = query.count();\n-            pageMetadata = initPageMetadata(pageSize, page, totalElements);\n-            workbasketSummaries = query.listPage((int) pageMetadata.getNumber(),\n-                (int) pageMetadata.getSize());\n-        } else if (page == null && pageSize == null) {\n-            // not paging\n-            workbasketSummaries = query.list();\n-        } else {\n-            throw new InvalidArgumentException(\"Paging information is incomplete.\");\n-        }\n+  private static final Logger LOGGER = LoggerFactory.getLogger(WorkbasketController.class);\n+\n+  private static final String LIKE = \"%\";\n+  private static final String NAME = \"name\";\n+  private static final String NAME_LIKE = \"name-like\";\n+  private static final String KEY = \"key\";\n+  private static final String KEY_LIKE = \"key-like\";\n+  private static final String OWNER = \"owner\";\n+  private static final String OWNER_LIKE = \"owner-like\";\n+  private static final String DESCRIPTION_LIKE = \"description-like\";\n+  private static final String DOMAIN = \"domain\";\n+  private static final String REQUIRED_PERMISSION = \"required-permission\";\n+  private static final String TYPE = \"type\";\n+  private static final String DESCRIPTION = \"description\";\n+\n+  private static final String SORT_BY = \"sort-by\";\n+  private static final String SORT_DIRECTION = \"order\";\n+\n+  private WorkbasketService workbasketService;\n+\n+  private WorkbasketResourceAssembler workbasketResourceAssembler;\n+\n+  private WorkbasketSummaryResourceAssembler workbasketSummaryResourceAssembler;\n+\n+  private DistributionTargetResourceAssembler distributionTargetResourceAssembler;\n+\n+  private WorkbasketAccessItemResourceAssembler workbasketAccessItemResourceAssembler;\n+\n+  WorkbasketController(\n+      WorkbasketService workbasketService,\n+      WorkbasketResourceAssembler workbasketResourceAssembler,\n+      WorkbasketSummaryResourceAssembler workbasketSummaryResourceAssembler,\n+      DistributionTargetResourceAssembler distributionTargetResourceAssembler,\n+      WorkbasketAccessItemResourceAssembler workbasketAccessItemResourceAssembler) {\n+    this.workbasketService = workbasketService;\n+    this.workbasketResourceAssembler = workbasketResourceAssembler;\n+    this.workbasketSummaryResourceAssembler = workbasketSummaryResourceAssembler;\n+    this.distributionTargetResourceAssembler = distributionTargetResourceAssembler;\n+    this.workbasketAccessItemResourceAssembler = workbasketAccessItemResourceAssembler;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketSummaryListResource> getWorkbaskets(\n+      @RequestParam MultiValueMap<String, String> params) throws InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to getWorkbaskets(params= {})\", params);\n+    }\n \n-        WorkbasketSummaryResourcesAssembler assembler = new WorkbasketSummaryResourcesAssembler();\n-        PagedResources<WorkbasketSummaryResource> pagedResources = assembler.toResources(workbasketSummaries,\n-            pageMetadata);\n+    WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n+    query = applySortingParams(query, params);\n+    query = applyFilterParams(query, params);\n \n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getWorkbaskets(), returning {}\", new ResponseEntity<>(pagedResources, HttpStatus.OK));\n-        }\n+    PageMetadata pageMetadata = getPageMetadata(params, query);\n+    List<WorkbasketSummary> workbasketSummaries = getQueryList(query, pageMetadata);\n+    WorkbasketSummaryListResource pagedResources =\n+        workbasketSummaryResourceAssembler.toResources(workbasketSummaries, pageMetadata);\n \n-        return new ResponseEntity<>(pagedResources, HttpStatus.OK);\n+    ResponseEntity<WorkbasketSummaryListResource> response = ResponseEntity.ok(pagedResources);\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getWorkbaskets(), returning {}\", response);\n     }\n \n-    @GetMapping(path = \"/{workbasketId}\")\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<WorkbasketResource> getWorkbasket(@PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to getWorkbasket(workbasketId= {})\", workbasketId);\n-        ResponseEntity<WorkbasketResource> result;\n-        Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n-        result = new ResponseEntity<>(workbasketResourceAssembler.toResource(workbasket), HttpStatus.OK);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getWorkbasket(), returning {}\", result);\n-        }\n-\n-        return result;\n+    return response;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET_ID)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketResource> getWorkbasket(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws WorkbasketNotFoundException, NotAuthorizedException {\n+    LOGGER.debug(\"Entry to getWorkbasket(workbasketId= {})\", workbasketId);\n+    ResponseEntity<WorkbasketResource> result;\n+    Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n+    result = ResponseEntity.ok(workbasketResourceAssembler.toResource(workbasket));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getWorkbasket(), returning {}\", result);\n     }\n \n-    @DeleteMapping(path = \"/{workbasketId}\")\n-    @Transactional(rollbackFor = Exception.class, noRollbackFor = WorkbasketNotFoundException.class)\n-    public ResponseEntity<?> markWorkbasketForDeletion(@PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws NotAuthorizedException, InvalidArgumentException,\n-        WorkbasketNotFoundException, WorkbasketInUseException {\n-        LOGGER.debug(\"Entry to markWorkbasketForDeletion(workbasketId= {})\", workbasketId);\n-        LOGGER.debug(\"Exit from markWorkbasketForDeletion(), returning {}\", new ResponseEntity<>(workbasketService.deleteWorkbasket(workbasketId), HttpStatus.ACCEPTED));\n-            return new ResponseEntity<>(workbasketService.deleteWorkbasket(workbasketId), HttpStatus.ACCEPTED);\n+    return result;\n+  }\n+\n+  @DeleteMapping(path = Mapping.URL_WORKBASKET_ID)\n+  @Transactional(rollbackFor = Exception.class, noRollbackFor = WorkbasketNotFoundException.class)\n+  public ResponseEntity<?> markWorkbasketForDeletion(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException,\n+          WorkbasketInUseException {\n+    LOGGER.debug(\"Entry to markWorkbasketForDeletion(workbasketId= {})\", workbasketId);\n+    ResponseEntity<?> response =\n+        ResponseEntity.accepted().body(workbasketService.deleteWorkbasket(workbasketId));\n+    LOGGER.debug(\"Exit from markWorkbasketForDeletion(), returning {}\", response);\n+    return response;\n+  }\n+\n+  @PostMapping(path = Mapping.URL_WORKBASKET)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketResource> createWorkbasket(\n+      @RequestBody WorkbasketResource workbasketResource)\n+      throws InvalidWorkbasketException, NotAuthorizedException, WorkbasketAlreadyExistException,\n+          WorkbasketNotFoundException, DomainNotFoundException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to createWorkbasket(workbasketResource= {})\", workbasketResource);\n     }\n \n-    @PostMapping\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<WorkbasketResource> createWorkbasket(@RequestBody WorkbasketResource workbasketResource)\n-        throws InvalidWorkbasketException, NotAuthorizedException, WorkbasketAlreadyExistException,\n-        WorkbasketNotFoundException, DomainNotFoundException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to createWorkbasket(workbasketResource= {})\", workbasketResource);\n-        }\n-\n-        Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n-        workbasket = workbasketService.createWorkbasket(workbasket);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from createWorkbasket(), returning {}\", new ResponseEntity<>(workbasketResourceAssembler.toResource(workbasket), HttpStatus.CREATED));\n-        }\n-\n-        return new ResponseEntity<>(workbasketResourceAssembler.toResource(workbasket), HttpStatus.CREATED);\n+    Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n+    workbasket = workbasketService.createWorkbasket(workbasket);\n+    ResponseEntity<WorkbasketResource> response =\n+        ResponseEntity.status(HttpStatus.CREATED)\n+            .body(workbasketResourceAssembler.toResource(workbasket));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from createWorkbasket(), returning {}\", response);\n     }\n \n-    @PutMapping(path = \"/{workbasketId}\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<WorkbasketResource> updateWorkbasket(\n-        @PathVariable(value = \"workbasketId\") String workbasketId,\n-        @RequestBody WorkbasketResource workbasketResource)\n-        throws InvalidWorkbasketException, WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to updateWorkbasket(workbasketId= {})\", workbasketId);\n-        ResponseEntity<WorkbasketResource> result;\n-        if (workbasketId.equals(workbasketResource.workbasketId)) {\n-            Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n-            workbasket = workbasketService.updateWorkbasket(workbasket);\n-            result = ResponseEntity.ok(workbasketResourceAssembler.toResource(workbasket));\n-        } else {\n-            throw new InvalidWorkbasketException(\n-                \"Target-WB-ID('\" + workbasketId\n-                    + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n-                    + workbasketResource.getId() + \"')\");\n-        }\n-\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from updateWorkbasket(), returning {}\", result);\n-        }\n-\n-        return result;\n+    return response;\n+  }\n+\n+  @PutMapping(path = Mapping.URL_WORKBASKET_ID)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketResource> updateWorkbasket(\n+      @PathVariable(value = \"workbasketId\") String workbasketId,\n+      @RequestBody WorkbasketResource workbasketResource)\n+      throws InvalidWorkbasketException, WorkbasketNotFoundException, NotAuthorizedException {\n+    LOGGER.debug(\"Entry to updateWorkbasket(workbasketId= {})\", workbasketId);\n+    ResponseEntity<WorkbasketResource> result;\n+    if (workbasketId.equals(workbasketResource.workbasketId)) {\n+      Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n+      workbasket = workbasketService.updateWorkbasket(workbasket);\n+      result = ResponseEntity.ok(workbasketResourceAssembler.toResource(workbasket));\n+    } else {\n+      throw new InvalidWorkbasketException(\n+          \"Target-WB-ID('\"\n+              + workbasketId\n+              + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n+              + workbasketResource.getId()\n+              + \"')\");\n     }\n \n-    @GetMapping(path = \"/{workbasketId}/workbasketAccessItems\")\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<WorkbasketAccessItemResource>> getWorkbasketAccessItems(\n-        @PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws NotAuthorizedException, WorkbasketNotFoundException {\n-        LOGGER.debug(\"Entry to getWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-        ResponseEntity<Resources<WorkbasketAccessItemResource>> result;\n-\n-        List<WorkbasketAccessItem> accessItems = workbasketService.getWorkbasketAccessItems(workbasketId);\n-        Resources<WorkbasketAccessItemResource> accessItemListResource = accessItemListAssembler\n-            .toResource(workbasketId, accessItems);\n-        result = new ResponseEntity<>(accessItemListResource, HttpStatus.OK);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getWorkbasketAccessItems(), returning {}\", result);\n-        }\n-\n-        return result;\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from updateWorkbasket(), returning {}\", result);\n     }\n \n-    @PutMapping(value = \"/{workbasketId}/workbasketAccessItems\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<WorkbasketAccessItemResource>> setWorkbasketAccessItems(\n-        @PathVariable(value = \"workbasketId\") String workbasketId,\n-        @RequestBody List<WorkbasketAccessItemResource> workbasketAccessResourceItems)\n-        throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException {\n-        LOGGER.debug(\"Entry to setWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-        if (workbasketAccessResourceItems == null) {\n-            throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n-        }\n-\n-        List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n-        workbasketAccessResourceItems.forEach(item -> wbAccessItems.add(workbasketAccessItemAssembler.toModel(item)));\n-        workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n-\n-        List<WorkbasketAccessItem> updatedWbAccessItems = workbasketService.getWorkbasketAccessItems(workbasketId);\n-        Resources<WorkbasketAccessItemResource> accessItemListResource = accessItemListAssembler\n-            .toResource(workbasketId, updatedWbAccessItems);\n-\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from setWorkbasketAccessItems(), returning {}\", new ResponseEntity<>(accessItemListResource, HttpStatus.OK));\n-        }\n-\n-        return new ResponseEntity<>(accessItemListResource, HttpStatus.OK);\n+    return result;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketAccessItemListResource> getWorkbasketAccessItems(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws NotAuthorizedException, WorkbasketNotFoundException {\n+    LOGGER.debug(\"Entry to getWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n+    ResponseEntity<WorkbasketAccessItemListResource> result;\n+\n+    List<WorkbasketAccessItem> accessItems =\n+        workbasketService.getWorkbasketAccessItems(workbasketId);\n+    result =\n+        ResponseEntity.ok(\n+            workbasketAccessItemResourceAssembler.toResources(workbasketId, accessItems));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getWorkbasketAccessItems(), returning {}\", result);\n     }\n \n-    @GetMapping(path = \"/{workbasketId}/distribution-targets\")\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<DistributionTargetResource>> getDistributionTargets(\n-        @PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to getDistributionTargets(workbasketId= {})\", workbasketId);\n-        ResponseEntity<Resources<DistributionTargetResource>> result;\n-        List<WorkbasketSummary> distributionTargets = workbasketService.getDistributionTargets(workbasketId);\n-        Resources<DistributionTargetResource> distributionTargetListResource = distributionTargetListAssembler\n-            .toResource(workbasketId, distributionTargets);\n-        result = new ResponseEntity<>(distributionTargetListResource, HttpStatus.OK);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getDistributionTargets(), returning {}\", result);\n-        }\n+    return result;\n+  }\n+\n+  @PutMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketAccessItemListResource> setWorkbasketAccessItems(\n+      @PathVariable(value = \"workbasketId\") String workbasketId,\n+      @RequestBody List<WorkbasketAccessItemResource> workbasketAccessResourceItems)\n+      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException {\n+    LOGGER.debug(\"Entry to setWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n+    if (workbasketAccessResourceItems == null) {\n+      throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n+    }\n \n-        return result;\n+    List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n+    workbasketAccessResourceItems.forEach(\n+        item -> wbAccessItems.add(workbasketAccessItemResourceAssembler.toModel(item)));\n+    workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n+    List<WorkbasketAccessItem> updatedWbAccessItems =\n+        workbasketService.getWorkbasketAccessItems(workbasketId);\n+\n+    ResponseEntity<WorkbasketAccessItemListResource> response =\n+        ResponseEntity.ok(\n+            workbasketAccessItemResourceAssembler.toResources(workbasketId, updatedWbAccessItems));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from setWorkbasketAccessItems(), returning {}\", response);\n     }\n \n-    @PutMapping(path = \"/{workbasketId}/distribution-targets\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<DistributionTargetResource>> setDistributionTargetsForWorkbasketId(\n-        @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n-        @RequestBody List<String> targetWorkbasketIds) throws WorkbasketNotFoundException, NotAuthorizedException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to getTasksStatusReport(workbasketId= {}, targetWorkbasketIds\u00b4= {})\", sourceWorkbasketId,\n-                LoggerUtils.listToString(targetWorkbasketIds));\n-        }\n+    return response;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<DistributionTargetListResource> getDistributionTargets(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws WorkbasketNotFoundException, NotAuthorizedException {\n+\n+    LOGGER.debug(\"Entry to getDistributionTargets(workbasketId= {})\", workbasketId);\n+    List<WorkbasketSummary> distributionTargets =\n+        workbasketService.getDistributionTargets(workbasketId);\n+    DistributionTargetListResource distributionTargetListResource =\n+        distributionTargetResourceAssembler.toResources(workbasketId, distributionTargets);\n+    ResponseEntity<DistributionTargetListResource> result =\n+        ResponseEntity.ok(distributionTargetListResource);\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getDistributionTargets(), returning {}\", result);\n+    }\n \n-        workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n+    return result;\n+  }\n+\n+  @PutMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<DistributionTargetListResource> setDistributionTargetsForWorkbasketId(\n+      @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n+      @RequestBody List<String> targetWorkbasketIds)\n+      throws WorkbasketNotFoundException, NotAuthorizedException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\n+          \"Entry to getTasksStatusReport(workbasketId= {}, targetWorkbasketIds\u00b4= {})\",\n+          sourceWorkbasketId,\n+          LoggerUtils.listToString(targetWorkbasketIds));\n+    }\n \n-        List<WorkbasketSummary> distributionTargets = workbasketService.getDistributionTargets(sourceWorkbasketId);\n-        Resources<DistributionTargetResource> distributionTargetListResource = distributionTargetListAssembler\n-            .toResource(sourceWorkbasketId, distributionTargets);\n+    workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n \n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getTasksStatusReport(), returning {}\", new ResponseEntity<>(distributionTargetListResource, HttpStatus.OK));\n-        }\n+    List<WorkbasketSummary> distributionTargets =\n+        workbasketService.getDistributionTargets(sourceWorkbasketId);\n+    ResponseEntity<DistributionTargetListResource> response =\n+        ResponseEntity.ok(\n+            distributionTargetResourceAssembler.toResources(\n+                sourceWorkbasketId, distributionTargets));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getTasksStatusReport(), returning {}\", response);\n+    }\n \n-        return new ResponseEntity<>(distributionTargetListResource, HttpStatus.OK);\n+    return response;\n+  }\n+\n+  // TODO - schema inconsistent with PUT and GET\n+  @DeleteMapping(path = Mapping.URL_WORKBASKET_DISTRIBUTION_ID)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<Resources<DistributionTargetResource>>\n+      removeDistributionTargetForWorkbasketId(\n+          @PathVariable(value = \"workbasketId\") String targetWorkbasketId)\n+          throws WorkbasketNotFoundException, NotAuthorizedException {\n+    LOGGER.debug(\n+        \"Entry to removeDistributionTargetForWorkbasketId(workbasketId= {})\", targetWorkbasketId);\n+    List<WorkbasketSummary> sourceWorkbaskets =\n+        workbasketService.getDistributionSources(targetWorkbasketId);\n+    for (WorkbasketSummary source : sourceWorkbaskets) {\n+      workbasketService.removeDistributionTarget(source.getId(), targetWorkbasketId);\n     }\n \n-    @DeleteMapping(path = \"/distribution-targets/{workbasketId}\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<DistributionTargetResource>> removeDistributionTargetForWorkbasketId(\n-        @PathVariable(value = \"workbasketId\") String targetWorkbasketId)\n-        throws WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to removeDistributionTargetForWorkbasketId(workbasketId= {})\", targetWorkbasketId);\n-        List<WorkbasketSummary> sourceWorkbaskets = workbasketService.getDistributionSources(targetWorkbasketId);\n-        for (WorkbasketSummary source : sourceWorkbaskets) {\n-            workbasketService.removeDistributionTarget(source.getId(), targetWorkbasketId);\n-        }\n+    ResponseEntity<Resources<DistributionTargetResource>> response =\n+        ResponseEntity.noContent().build();\n+    LOGGER.debug(\"Exit from removeDistributionTargetForWorkbasketId(), returning {}\", response);\n+    return response;\n+  }\n \n-        LOGGER.debug(\"Exit from removeDistributionTargetForWorkbasketId(), returning {}\", new ResponseEntity<>(HttpStatus.NO_CONTENT));\n-        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n+  private WorkbasketQuery applySortingParams(\n+      WorkbasketQuery query, MultiValueMap<String, String> params) throws IllegalArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to applySortingParams(query= {}, params={})\", query, params);\n     }\n \n-    private WorkbasketQuery applySortingParams(WorkbasketQuery query, MultiValueMap<String, String> params)\n-        throws IllegalArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to applySortingParams(query= {}, params={})\", query, params);\n-        }\n+    // sorting\n+    String sortBy = params.getFirst(SORT_BY);\n+    if (sortBy != null) {\n+      SortDirection sortDirection;\n+      if (params.getFirst(SORT_DIRECTION) != null\n+          && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n+        sortDirection = SortDirection.DESCENDING;\n+      } else {\n+        sortDirection = SortDirection.ASCENDING;\n+      }\n+      switch (sortBy) {\n+        case (NAME):\n+          query = query.orderByName(sortDirection);\n+          break;\n+        case (KEY):\n+          query = query.orderByKey(sortDirection);\n+          break;\n+        case (OWNER):\n+          query = query.orderByOwner(sortDirection);\n+          break;\n+        case (TYPE):\n+          query = query.orderByType(sortDirection);\n+          break;\n+        case (DESCRIPTION):\n+          query = query.orderByDescription(sortDirection);\n+          break;\n+        default:\n+          throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n+      }\n+    }\n+    params.remove(SORT_BY);\n+    params.remove(SORT_DIRECTION);\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n+    }\n \n-        // sorting\n-        String sortBy = params.getFirst(SORT_BY);\n-        if (sortBy != null) {\n-            SortDirection sortDirection;\n-            if (params.getFirst(SORT_DIRECTION) != null && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n-                sortDirection = SortDirection.DESCENDING;\n-            } else {\n-                sortDirection = SortDirection.ASCENDING;\n-            }\n-            switch (sortBy) {\n-                case (NAME):\n-                    query = query.orderByName(sortDirection);\n-                    break;\n-                case (KEY):\n-                    query = query.orderByKey(sortDirection);\n-                    break;\n-                case (OWNER):\n-                    query = query.orderByOwner(sortDirection);\n-                    break;\n-                case (TYPE):\n-                    query = query.orderByType(sortDirection);\n-                    break;\n-                case (DESCRIPTION):\n-                    query = query.orderByDescription(sortDirection);\n-                    break;\n-                default:\n-                    throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n-            }\n-        }\n-        params.remove(SORT_BY);\n-        params.remove(SORT_DIRECTION);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n-        }\n+    return query;\n+  }\n \n-        return query;\n+  private WorkbasketQuery applyFilterParams(\n+      WorkbasketQuery query, MultiValueMap<String, String> params) throws InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", query, params);\n     }\n \n-    private WorkbasketQuery applyFilterParams(WorkbasketQuery query,\n-        MultiValueMap<String, String> params) throws InvalidArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", query, params);\n-        }\n-\n-        if (params.containsKey(NAME)) {\n-            String[] names = extractCommaSeparatedFields(params.get(NAME));\n-            query.nameIn(names);\n-            params.remove(NAME);\n-        }\n-        if (params.containsKey(NAME_LIKE)) {\n-            query.nameLike(LIKE + params.get(NAME_LIKE).get(0) + LIKE);\n-            params.remove(NAME_LIKE);\n-        }\n-        if (params.containsKey(KEY)) {\n-            String[] names = extractCommaSeparatedFields(params.get(KEY));\n-            query.keyIn(names);\n-            params.remove(KEY);\n-        }\n-        if (params.containsKey(KEY_LIKE)) {\n-            query.keyLike(LIKE + params.get(KEY_LIKE).get(0) + LIKE);\n-            params.remove(KEY_LIKE);\n-        }\n-        if (params.containsKey(OWNER)) {\n-            String[] names = extractCommaSeparatedFields(params.get(OWNER));\n-            query.ownerIn(names);\n-            params.remove(OWNER);\n-        }\n-        if (params.containsKey(OWNER_LIKE)) {\n-            query.ownerLike(LIKE + params.get(OWNER_LIKE).get(0) + LIKE);\n-            params.remove(OWNER_LIKE);\n-        }\n-        if (params.containsKey(DESCRIPTION_LIKE)) {\n-            query.descriptionLike(LIKE + params.get(DESCRIPTION_LIKE).get(0) + LIKE);\n-            params.remove(DESCRIPTION_LIKE);\n-        }\n-        if (params.containsKey(DOMAIN)) {\n-            query.domainIn(extractCommaSeparatedFields(params.get(DOMAIN)));\n-            params.remove(DOMAIN);\n-        }\n-        if (params.containsKey(TYPE)) {\n-            switch (params.getFirst(TYPE)) {\n-                case \"PERSONAL\":\n-                    query.typeIn(WorkbasketType.PERSONAL);\n-                    break;\n-                case \"GROUP\":\n-                    query.typeIn(WorkbasketType.GROUP);\n-                    break;\n-                case \"CLEARANCE\":\n-                    query.typeIn(WorkbasketType.CLEARANCE);\n-                    break;\n-                case \"TOPIC\":\n-                    query.typeIn(WorkbasketType.TOPIC);\n-                    break;\n-                default:\n-                    throw new InvalidArgumentException(\"Unknown Workbasket type '\" + params.getFirst(TYPE) + \"'\");\n-            }\n-            params.remove(TYPE);\n-        }\n-        if (params.containsKey(REQUIRED_PERMISSION)) {\n-            for (String authorization : Arrays.asList(params.getFirst(REQUIRED_PERMISSION).split(\",\"))) {\n-                switch (authorization.trim()) {\n-                    case \"READ\":\n-                        query.callerHasPermission(WorkbasketPermission.READ);\n-                        break;\n-                    case \"OPEN\":\n-                        query.callerHasPermission(WorkbasketPermission.OPEN);\n-                        break;\n-                    case \"APPEND\":\n-                        query.callerHasPermission(WorkbasketPermission.APPEND);\n-                        break;\n-                    case \"TRANSFER\":\n-                        query.callerHasPermission(WorkbasketPermission.TRANSFER);\n-                        break;\n-                    case \"DISTRIBUTE\":\n-                        query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n-                        break;\n-                    case \"CUSTOM_1\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n-                        break;\n-                    case \"CUSTOM_2\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n-                        break;\n-                    case \"CUSTOM_3\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n-                        break;\n-                    case \"CUSTOM_4\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n-                        break;\n-                    case \"CUSTOM_5\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n-                        break;\n-                    case \"CUSTOM_6\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n-                        break;\n-                    case \"CUSTOM_7\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n-                        break;\n-                    case \"CUSTOM_8\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n-                        break;\n-                    case \"CUSTOM_9\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n-                        break;\n-                    case \"CUSTOM_10\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n-                        break;\n-                    case \"CUSTOM_11\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n-                        break;\n-                    case \"CUSTOM_12\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n-                        break;\n-                    default:\n-                        throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n-                }\n-            }\n-            params.remove(REQUIRED_PERMISSION);\n-        }\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n+    if (params.containsKey(NAME)) {\n+      String[] names = extractCommaSeparatedFields(params.get(NAME));\n+      query.nameIn(names);\n+      params.remove(NAME);\n+    }\n+    if (params.containsKey(NAME_LIKE)) {\n+      query.nameLike(LIKE + params.get(NAME_LIKE).get(0) + LIKE);\n+      params.remove(NAME_LIKE);\n+    }\n+    if (params.containsKey(KEY)) {\n+      String[] names = extractCommaSeparatedFields(params.get(KEY));\n+      query.keyIn(names);\n+      params.remove(KEY);\n+    }\n+    if (params.containsKey(KEY_LIKE)) {\n+      query.keyLike(LIKE + params.get(KEY_LIKE).get(0) + LIKE);\n+      params.remove(KEY_LIKE);\n+    }\n+    if (params.containsKey(OWNER)) {\n+      String[] names = extractCommaSeparatedFields(params.get(OWNER));\n+      query.ownerIn(names);\n+      params.remove(OWNER);\n+    }\n+    if (params.containsKey(OWNER_LIKE)) {\n+      query.ownerLike(LIKE + params.get(OWNER_LIKE).get(0) + LIKE);\n+      params.remove(OWNER_LIKE);\n+    }\n+    if (params.containsKey(DESCRIPTION_LIKE)) {\n+      query.descriptionLike(LIKE + params.get(DESCRIPTION_LIKE).get(0) + LIKE);\n+      params.remove(DESCRIPTION_LIKE);\n+    }\n+    if (params.containsKey(DOMAIN)) {\n+      query.domainIn(extractCommaSeparatedFields(params.get(DOMAIN)));\n+      params.remove(DOMAIN);\n+    }\n+    if (params.containsKey(TYPE)) {\n+      switch (params.getFirst(TYPE)) {\n+        case \"PERSONAL\":\n+          query.typeIn(WorkbasketType.PERSONAL);\n+          break;\n+        case \"GROUP\":\n+          query.typeIn(WorkbasketType.GROUP);\n+          break;\n+        case \"CLEARANCE\":\n+          query.typeIn(WorkbasketType.CLEARANCE);\n+          break;\n+        case \"TOPIC\":\n+          query.typeIn(WorkbasketType.TOPIC);\n+          break;\n+        default:\n+          throw new InvalidArgumentException(\n+              \"Unknown Workbasket type '\" + params.getFirst(TYPE) + \"'\");\n+      }\n+      params.remove(TYPE);\n+    }\n+    if (params.containsKey(REQUIRED_PERMISSION)) {\n+      for (String authorization : Arrays.asList(params.getFirst(REQUIRED_PERMISSION).split(\",\"))) {\n+        switch (authorization.trim()) {\n+          case \"READ\":\n+            query.callerHasPermission(WorkbasketPermission.READ);\n+            break;\n+          case \"OPEN\":\n+            query.callerHasPermission(WorkbasketPermission.OPEN);\n+            break;\n+          case \"APPEND\":\n+            query.callerHasPermission(WorkbasketPermission.APPEND);\n+            break;\n+          case \"TRANSFER\":\n+            query.callerHasPermission(WorkbasketPermission.TRANSFER);\n+            break;\n+          case \"DISTRIBUTE\":\n+            query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n+            break;\n+          case \"CUSTOM_1\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n+            break;\n+          case \"CUSTOM_2\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n+            break;\n+          case \"CUSTOM_3\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n+            break;\n+          case \"CUSTOM_4\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n+            break;\n+          case \"CUSTOM_5\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n+            break;\n+          case \"CUSTOM_6\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n+            break;\n+          case \"CUSTOM_7\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n+            break;\n+          case \"CUSTOM_8\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n+            break;\n+          case \"CUSTOM_9\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n+            break;\n+          case \"CUSTOM_10\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n+            break;\n+          case \"CUSTOM_11\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n+            break;\n+          case \"CUSTOM_12\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n+            break;\n+          default:\n+            throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n         }\n-\n-        return query;\n+      }\n+      params.remove(REQUIRED_PERMISSION);\n+    }\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n     }\n \n+    return query;\n+  }\n }\n", "next_change": {"commit": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 86d6b11e9..090eef61c 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -486,6 +514,5 @@ public class WorkbasketController extends AbstractPagingController {\n       LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n     }\n \n-    return query;\n   }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "e872c39340c4755c0ea85ddbdee17229b7494bf8", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311 seperated rest service"}, {"oid": "eaf15fd19c0b34abc699c6feedb1a216eeaade45", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311 fixed checkstyle"}, {"oid": "798e160669500dabdd3486c788774dea5592d271", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311 refactoring"}, {"oid": "43a226f26d53d3e7ec1842b4de28c2d0ab1e6b37", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311: replaced RuntimeExceptions with more precise exceptions"}, {"oid": "d9bb89248b62e3724f5f56d6ab679af41a5f8aa7", "committedDate": "2018-03-01 13:31:27 +0100", "message": "TSK-327: Move Enums from impl to taskana package"}, {"oid": "bab3d9ff5ce3e2cf981a47bb5754e287e187416b", "committedDate": "2018-03-05 16:16:32 +0100", "message": "TSK-359 setWorkbasketAccessItems doesn't save access items"}, {"oid": "c958e8f1d4d4733ea79f489ae6a7480fa9bf5604", "committedDate": "2018-03-13 10:25:02 +0100", "message": "TSK-373: added HAL format to workbasket list."}, {"oid": "4c8b29bcec1c0b57536d63db31308526aeb8296a", "committedDate": "2018-03-13 10:25:02 +0100", "message": "TSK-373: list resources according to HAL format."}, {"oid": "3498df039ab4780c675b6635f3510255f13f2908", "committedDate": "2018-03-13 11:09:08 +0100", "message": "TSK-377 provide meaningful response for duplicate key exception"}, {"oid": "e581c8051b05ddbe065ae58d4f4effdf1b3525aa", "committedDate": "2018-03-14 08:15:28 +0100", "message": "TSK-378: PUT operations return updated entities and removed not required operations."}, {"oid": "aef0e987e9831452efdbc0a739a0670a89350490", "committedDate": "2018-03-15 10:06:43 +0100", "message": "TSK-385:"}, {"oid": "5de0cd5e09fd3599254ec441b0ae72b91b6db423", "committedDate": "2018-03-15 17:08:22 +0100", "message": "TSK-382 add errorhandling to controllers"}, {"oid": "2c62de91d79b6118fc999fdc714cc5ad5b738863", "committedDate": "2018-03-20 09:44:50 +0100", "message": "TSK-378: Add pagination to WorkbasketController."}, {"oid": "15dee0c2691fe78dd7cb9912da847aeacee906b1", "committedDate": "2018-03-20 09:44:50 +0100", "message": "TSK-378: introduced REST integration tests on WorkbasketController."}, {"oid": "4765fc242ac1934ac0e681a691e10a7afd055059", "committedDate": "2018-03-20 09:44:50 +0100", "message": "TSK-217: pagination support for WorkbasketController and first page to be number 1."}, {"oid": "9803de0502e11521b2c5d0d8816ccf8551c9ccf1", "committedDate": "2018-03-23 10:19:16 +0100", "message": "TSK-398: domain is checked for existance during workbasket creation."}, {"oid": "106df46a69a9fbebad2795ad53474f8cf91944c1", "committedDate": "2018-03-28 17:53:45 +0200", "message": "TSK-406: Added pagination for TaskController."}, {"oid": "a311a6030189d8b07e66fe4a6640b8a0329de9cb", "committedDate": "2018-04-02 08:32:29 +0200", "message": "TSK-426"}, {"oid": "dc8b0dbc54b4a715cea84d8644da78ebb6778314", "committedDate": "2018-04-18 12:30:58 +0200", "message": "TSK-421: invalid parameter lead to error message."}, {"oid": "ccf6f133ee4b9a171fe39da9bbeb409c2b34db3e", "committedDate": "2018-04-18 21:56:13 +0200", "message": "TSK-432 Domain switch and filtering for the application"}, {"oid": "87f44bd026132e2c5df92e14d13e5e5ee7f112b7", "committedDate": "2018-04-27 11:50:19 +0200", "message": "TSK-469: added endpoint to delete workbasket as distribution target."}, {"oid": "ec33a7a1ffe1c7353996c42a3c479f2b850ca54b", "committedDate": "2018-05-08 08:35:09 +0200", "message": "TSK-468 Add remove distribution target button and endpoint."}, {"oid": "30f72604c96b1312af763aa9d0bbfb38f875ec0a", "committedDate": "2018-05-14 08:29:39 +0200", "message": "TSK-482"}, {"oid": "712d8b435ba97b80ab723509e6fc1a3e913f7313", "committedDate": "2018-06-04 17:04:48 +0200", "message": "TSK-538 Bug order by description issue is now fixed."}, {"oid": "3f8dc3cf87cb36dd0eb10a0a43fac3b2d5995711", "committedDate": "2018-09-11 11:06:16 +0200", "message": "TSK-694 - Show list of all access items valid for a user (REST)"}, {"oid": "ef703b4a4025548faac4905ba488ae5777e791c0", "committedDate": "2018-09-11 11:06:16 +0200", "message": "TSK-694: refactored WorkbasketAccessItemQuery + Extended"}, {"oid": "66e25b4bd54adc2c71ca47f67a3bd9db8b044d08", "committedDate": "2018-09-11 13:09:40 +0200", "message": "TSK-682: redesigned task details and added custom Attributes"}, {"oid": "f74a70e0d5b87ed203622913ff9cb07ba0ad211d", "committedDate": "2018-10-09 10:38:40 +0200", "message": "TSK-680 - Mark workbasket for deletion"}, {"oid": "55e8135cc8a766a0869611f067490bec98a51d7c", "committedDate": "2018-10-17 10:14:27 +0200", "message": "TSK-733 - Modify response deleteWorkbasket"}, {"oid": "577ccaa648f52115c876706282d8434fe023f885", "committedDate": "2018-12-19 10:58:53 +0100", "message": "TSK-755 - Controller to get the simple history events"}, {"oid": "24a700b81dd383fd606785af81f37d2670bb84fe", "committedDate": "2019-01-22 13:22:01 +0100", "message": "TSK-769 - Improve the logger on both library and rest"}, {"oid": "8789dd5bf53e7f3712deb0fb85b68829e78724aa", "committedDate": "2019-02-01 13:50:43 +0100", "message": "TSK-775\t adapt code formatting to checkstyle template"}, {"oid": "cbc2ff16ac237bb923dbef4574b532bb20d90dcc", "committedDate": "2019-03-28 16:02:03 +0100", "message": "task/828: Unify and reduce the response and logger code in the controllers"}, {"oid": "aea64975dba98ebe04361ba7230f6bf186f2bcd8", "committedDate": "2019-05-07 08:24:49 +0200", "message": "feature/810 Add querying by planned date in monitor screen"}, {"oid": "aebd87b935fa739131d97336e5f3b6f3c6a99c5f", "committedDate": "2019-06-04 15:36:26 +0200", "message": "TSK-850: rebase cleanup"}, {"oid": "352d0d67cd3480f62eca33c4e5b3014c26c63394", "committedDate": "2019-09-26 10:38:29 +0200", "message": "TSK-881: Refactored REST-Api"}, {"oid": "f68e730a72cfba413fc2102ef84ac513ed194cee", "committedDate": "2019-10-04 22:12:52 +0200", "message": "TSK-896: Removed _embedded from History"}, {"oid": "f848bf4f4ecb62ca72b330bee2e1e47c9e53a829", "committedDate": "2019-11-30 12:21:18 +0100", "message": "TSK-947: Extract Url mappings"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "f06f87f41e08aea691512d53fe1087bd12e892b8", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Replace WorkbasketAccessItemListResource with equivalent PaginatedListResource"}, {"oid": "6a6dcb9c1e3984670c644f89c569eba3d20dcf3d", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Standardise paginated List behaviour and sub classes"}, {"oid": "fae9d1fb9bdec9a1ea1499e04575738044c03235", "committedDate": "2020-01-23 13:00:04 +0100", "message": "TSK-1029: Fix deletion of workbasket as business admin not possible"}, {"oid": "9b61abda37480fa9ba589c54f15bf6c0403a8184", "committedDate": "2020-01-28 12:27:37 +0100", "message": "TSK-1038: added WAIAlreadyExistsException to missing operations with access Items"}, {"oid": "3b13b9a95e4d7d1cf172f22fa0f2679ff1c5f79b", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 after initial refactoring"}, {"oid": "442385482236ad0c25830becbadddf30f6e7bf2d", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 fix dependent projects"}, {"oid": "e308578ced577706e1f6994473e0e6252f647b9e", "committedDate": "2020-02-06 17:26:05 +0100", "message": "TSK-991: refactored report structure to meet api -> internal agreement"}, {"oid": "dcc72d1781fffea923a9d4a2b0d568a1984f88bb", "committedDate": "2020-02-11 09:33:54 +0100", "message": "TSK-1088 optimistic locking on workbasket update"}, {"oid": "e6f8883e4911704f16404846fe4208ee3abb2adc", "committedDate": "2020-02-11 17:05:34 +0100", "message": "TSK-1031: removed unnecessary throws statements"}, {"oid": "007f268be599fda8b884e002b7b03bb260c7620f", "committedDate": "2020-02-11 17:05:34 +0100", "message": "TSK-1031: update Spring Boot to 2.2.4.RELEASE except Hateoas."}, {"oid": "fc812cb9ea2a94c50a4df6ca1d786e2a0306375d", "committedDate": "2020-02-13 09:25:08 +0100", "message": "TSK-1109 Make WorkbasketResource attributes private and convert tests to AssertJ"}, {"oid": "4c884819d5823f5bdede585a3ed347589c465c4d", "committedDate": "2020-02-13 14:20:17 +0100", "message": "TSK-1123: workbasketaccessitems now produce application/hal-json"}, {"oid": "5c7d38451ce7cbea2ad52d3b84be72d49c474c71", "committedDate": "2020-02-13 15:09:39 +0100", "message": "TSK-1094 introduce models package for */api and */internal"}, {"oid": "f64053ec4ecf4887deba1baf199a017e51ae42e0", "committedDate": "2020-02-13 16:12:39 +0100", "message": "TSK-1125: distributiontargets now produce application/hal-json"}, {"oid": "c9791b01b8b72b711025903276f2a1a30e3e85a2", "committedDate": "2020-03-19 09:53:54 +0100", "message": "TSK-1029: Proper distinction between delete and markForFeletion for workbaskets"}, {"oid": "a8e44dead343598b7266254616a7f8559ee941ba", "committedDate": "2020-04-23 09:49:16 +0200", "message": "TSK-1083: Updated HATEOAS from version 0.24.0 to version 1.0.4"}, {"oid": "75a340ccf32a72f2f45bdea73ace9ee3d33bf05c", "committedDate": "2020-05-11 14:48:36 +0200", "message": "TSK-1243: made rest url for workbasket distribution-targets consistent"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyNDY5OQ==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422624699", "body": "Please reformat", "bodyText": "Please reformat", "bodyHTML": "<p dir=\"auto\">Please reformat</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T10:34:36Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java", "diffHunk": "@@ -235,27 +245,28 @@\n \n   @PutMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS)\n   @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<WorkbasketAccessItemListResource> setWorkbasketAccessItems(\n+  @SuppressWarnings(\"checkstyle:LineLength\")", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 820e48f04..b48fc9c2e 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -245,8 +245,8 @@ public class WorkbasketController extends AbstractPagingController {\n \n   @PutMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS)\n   @Transactional(rollbackFor = Exception.class)\n-  @SuppressWarnings(\"checkstyle:LineLength\")\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> setWorkbasketAccessItems(\n+  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n+      setWorkbasketAccessItems(\n       @PathVariable(value = \"workbasketId\") String workbasketId,\n       @RequestBody List<WorkbasketAccessItemRepresentationModel> workbasketAccessResourceItems)\n       throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException,\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 820e48f04..090eef61c 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -245,8 +245,8 @@ public class WorkbasketController extends AbstractPagingController {\n \n   @PutMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS)\n   @Transactional(rollbackFor = Exception.class)\n-  @SuppressWarnings(\"checkstyle:LineLength\")\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> setWorkbasketAccessItems(\n+  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n+      setWorkbasketAccessItems(\n       @PathVariable(value = \"workbasketId\") String workbasketId,\n       @RequestBody List<WorkbasketAccessItemRepresentationModel> workbasketAccessResourceItems)\n       throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException,\n", "next_change": {"commit": "e872c39340c4755c0ea85ddbdee17229b7494bf8", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 090eef61c..509fef84a 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -1,518 +1,418 @@\n package pro.taskana.rest;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.hateoas.MediaTypes;\n-import org.springframework.hateoas.PagedModel.PageMetadata;\n-import org.springframework.hateoas.config.EnableHypermediaSupport;\n-import org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.util.MultiValueMap;\n+import org.springframework.transaction.interceptor.TransactionInterceptor;\n import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.PutMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.RestController;\n \n-import pro.taskana.common.api.BaseQuery.SortDirection;\n-import pro.taskana.common.api.LoggerUtils;\n-import pro.taskana.common.api.exceptions.ConcurrencyException;\n-import pro.taskana.common.api.exceptions.DomainNotFoundException;\n-import pro.taskana.common.api.exceptions.InvalidArgumentException;\n-import pro.taskana.common.api.exceptions.NotAuthorizedException;\n-import pro.taskana.rest.resource.DistributionTargetRepresentationModelAssembler;\n-import pro.taskana.rest.resource.TaskanaPagedModel;\n-import pro.taskana.rest.resource.WorkbasketAccessItemRepresentationModel;\n-import pro.taskana.rest.resource.WorkbasketAccessItemRepresentationModelAssembler;\n-import pro.taskana.rest.resource.WorkbasketRepresentationModel;\n-import pro.taskana.rest.resource.WorkbasketRepresentationModelAssembler;\n-import pro.taskana.rest.resource.WorkbasketSummaryRepresentationModel;\n-import pro.taskana.rest.resource.WorkbasketSummaryRepresentationModelAssembler;\n-import pro.taskana.workbasket.api.WorkbasketPermission;\n-import pro.taskana.workbasket.api.WorkbasketQuery;\n-import pro.taskana.workbasket.api.WorkbasketService;\n-import pro.taskana.workbasket.api.WorkbasketType;\n-import pro.taskana.workbasket.api.exceptions.InvalidWorkbasketException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketAccessItemAlreadyExistException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketAlreadyExistException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketInUseException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketNotFoundException;\n-import pro.taskana.workbasket.api.models.Workbasket;\n-import pro.taskana.workbasket.api.models.WorkbasketAccessItem;\n-import pro.taskana.workbasket.api.models.WorkbasketSummary;\n+import pro.taskana.BaseQuery;\n+import pro.taskana.Workbasket;\n+import pro.taskana.WorkbasketAccessItem;\n+import pro.taskana.WorkbasketPermission;\n+import pro.taskana.WorkbasketQuery;\n+import pro.taskana.WorkbasketService;\n+import pro.taskana.WorkbasketSummary;\n+import pro.taskana.exceptions.InvalidArgumentException;\n+import pro.taskana.exceptions.InvalidWorkbasketException;\n+import pro.taskana.exceptions.NotAuthorizedException;\n+import pro.taskana.exceptions.WorkbasketInUseException;\n+import pro.taskana.exceptions.WorkbasketNotFoundException;\n+import pro.taskana.impl.WorkbasketType;\n+import pro.taskana.rest.resource.WorkbasketAccessItemResource;\n+import pro.taskana.rest.resource.WorkbasketResource;\n+import pro.taskana.rest.resource.WorkbasketSummaryResource;\n+import pro.taskana.rest.resource.mapper.WorkbasketAccessItemMapper;\n+import pro.taskana.rest.resource.mapper.WorkbasketMapper;\n+import pro.taskana.rest.resource.mapper.WorkbasketSummaryMapper;\n \n-/** Controller for all {@link Workbasket} related endpoints. */\n @RestController\n-@EnableHypermediaSupport(type = HypermediaType.HAL)\n-public class WorkbasketController extends AbstractPagingController {\n-\n-  private static final Logger LOGGER = LoggerFactory.getLogger(WorkbasketController.class);\n-\n-  private static final String LIKE = \"%\";\n-  private static final String NAME = \"name\";\n-  private static final String NAME_LIKE = \"name-like\";\n-  private static final String KEY = \"key\";\n-  private static final String KEY_LIKE = \"key-like\";\n-  private static final String OWNER = \"owner\";\n-  private static final String OWNER_LIKE = \"owner-like\";\n-  private static final String DESCRIPTION_LIKE = \"description-like\";\n-  private static final String DOMAIN = \"domain\";\n-  private static final String REQUIRED_PERMISSION = \"required-permission\";\n-  private static final String TYPE = \"type\";\n-  private static final String DESCRIPTION = \"description\";\n-\n-  private static final String SORT_BY = \"sort-by\";\n-  private static final String SORT_DIRECTION = \"order\";\n-\n-  private final WorkbasketService workbasketService;\n-\n-  private final WorkbasketRepresentationModelAssembler workbasketRepresentationModelAssembler;\n-\n-  private final WorkbasketSummaryRepresentationModelAssembler\n-      workbasketSummaryRepresentationModelAssembler;\n-\n-  private final DistributionTargetRepresentationModelAssembler\n-      distributionTargetRepresentationModelAssembler;\n-\n-  private final WorkbasketAccessItemRepresentationModelAssembler\n-      workbasketAccessItemRepresentationModelAssembler;\n-\n-  WorkbasketController(\n-      WorkbasketService workbasketService,\n-      WorkbasketRepresentationModelAssembler workbasketRepresentationModelAssembler,\n-      WorkbasketSummaryRepresentationModelAssembler workbasketSummaryRepresentationModelAssembler,\n-      DistributionTargetRepresentationModelAssembler distributionTargetRepresentationModelAssembler,\n-      WorkbasketAccessItemRepresentationModelAssembler\n-          workbasketAccessItemRepresentationModelAssembler) {\n-    this.workbasketService = workbasketService;\n-    this.workbasketRepresentationModelAssembler = workbasketRepresentationModelAssembler;\n-    this.workbasketSummaryRepresentationModelAssembler =\n-        workbasketSummaryRepresentationModelAssembler;\n-    this.distributionTargetRepresentationModelAssembler =\n-        distributionTargetRepresentationModelAssembler;\n-    this.workbasketAccessItemRepresentationModelAssembler =\n-        workbasketAccessItemRepresentationModelAssembler;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> getWorkbaskets(\n-      @RequestParam MultiValueMap<String, String> params) throws InvalidArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to getWorkbaskets(params= {})\", params);\n-    }\n-\n-    WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n-    query = applySortingParams(query, params);\n-    applyFilterParams(query, params);\n-\n-    PageMetadata pageMetadata = getPageMetadata(params, query);\n-    List<WorkbasketSummary> workbasketSummaries = getQueryList(query, pageMetadata);\n-    TaskanaPagedModel<WorkbasketSummaryRepresentationModel> pagedModels =\n-        workbasketSummaryRepresentationModelAssembler.toPageModel(\n-            workbasketSummaries, pageMetadata);\n-\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        ResponseEntity.ok(pagedModels);\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getWorkbaskets(), returning {}\", response);\n+@RequestMapping(path = \"/v1/workbaskets\", produces = {MediaType.APPLICATION_JSON_VALUE})\n+public class WorkbasketController {\n+\n+    private static final String LIKE = \"%\";\n+    private static final String NAME = \"name\";\n+    private static final String KEY = \"key\";\n+    private static final String DESCRIPTION = \"description\";\n+    private static final String OWNER = \"owner\";\n+    private static final String TYPE = \"type\";\n+    private static final String DESC = \"desc\";\n+\n+    @Autowired\n+    private WorkbasketService workbasketService;\n+\n+    @Autowired\n+    private WorkbasketSummaryMapper workbasketSummaryMapper;\n+\n+    @Autowired\n+    private WorkbasketMapper workbasketMapper;\n+\n+    @Autowired\n+    private WorkbasketAccessItemMapper workbasketAccessItemMapper;\n+\n+    @GetMapping\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<List<WorkbasketSummaryResource>> getWorkbaskets(\n+        @RequestParam(value = \"sortBy\", defaultValue = \"name\", required = false) String sortBy,\n+        @RequestParam(value = \"order\", defaultValue = \"asc\", required = false) String order,\n+        @RequestParam(value = \"name\", required = false) String name,\n+        @RequestParam(value = \"nameLike\", required = false) String nameLike,\n+        @RequestParam(value = \"key\", required = false) String key,\n+        @RequestParam(value = \"keyLike\", required = false) String keyLike,\n+        @RequestParam(value = \"descLike\", required = false) String descLike,\n+        @RequestParam(value = \"owner\", required = false) String owner,\n+        @RequestParam(value = \"ownerLike\", required = false) String ownerLike,\n+        @RequestParam(value = \"type\", required = false) String type,\n+        @RequestParam(value = \"requiredPermission\", required = false) String requiredPermission) {\n+        ResponseEntity<List<WorkbasketSummaryResource>> result;\n+        List<WorkbasketSummary> workbasketsSummary;\n+        WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n+        addSortingToQuery(query, sortBy, order);\n+        addAttributeFilter(query, name, nameLike, key, keyLike, descLike, owner, ownerLike, type);\n+        addAuthorizationFilter(query, requiredPermission);\n+        workbasketsSummary = query.list();\n+        result = new ResponseEntity<>(workbasketsSummary.stream()\n+            .map(workbasket -> workbasketSummaryMapper.toResource(workbasket))\n+            .collect(Collectors.toList()), HttpStatus.OK);\n+        return result;\n     }\n \n-    return response;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET_ID, produces = MediaTypes.HAL_JSON_VALUE)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<WorkbasketRepresentationModel> getWorkbasket(\n-      @PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-    LOGGER.debug(\"Entry to getWorkbasket(workbasketId= {})\", workbasketId);\n-    ResponseEntity<WorkbasketRepresentationModel> result;\n-    Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n-    result = ResponseEntity.ok(workbasketRepresentationModelAssembler.toModel(workbasket));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getWorkbasket(), returning {}\", result);\n-    }\n-\n-    return result;\n-  }\n-\n-  @DeleteMapping(path = Mapping.URL_WORKBASKET_ID)\n-  @Transactional(rollbackFor = Exception.class, noRollbackFor = WorkbasketNotFoundException.class)\n-  public ResponseEntity<?> deleteWorkbasket(\n-      @PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException,\n-          WorkbasketInUseException {\n-    LOGGER.debug(\"Entry to markWorkbasketForDeletion(workbasketId= {})\", workbasketId);\n-    ResponseEntity<?> response;\n-\n-    boolean workbasketDeleted = workbasketService.deleteWorkbasket(workbasketId);\n-\n-    if (workbasketDeleted) {\n-      LOGGER.debug(\"Workbasket successfully deleted.\");\n-      response = ResponseEntity.noContent().build();\n-    } else {\n-      LOGGER.debug(\n-          \"Workbasket was only marked for deletion and will be physically deleted later on.\");\n-      response = ResponseEntity.accepted().build();\n+    @GetMapping(path = \"/{workbasketId}\")\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketResource> getWorkbasket(@PathVariable(value = \"workbasketId\") String workbasketId) {\n+        ResponseEntity<WorkbasketResource> result;\n+        try {\n+            Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n+            result = new ResponseEntity<>(workbasketMapper.toResource(workbasket), HttpStatus.OK);\n+        } catch (WorkbasketNotFoundException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.NOT_FOUND);\n+        } catch (NotAuthorizedException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n+        }\n+        return result;\n     }\n \n-    LOGGER.debug(\"Exit from markWorkbasketForDeletion(), returning {}\", response);\n-    return response;\n-  }\n-\n-  @PostMapping(path = Mapping.URL_WORKBASKET)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<WorkbasketRepresentationModel> createWorkbasket(\n-      @RequestBody WorkbasketRepresentationModel workbasketRepresentationModel)\n-      throws InvalidWorkbasketException, NotAuthorizedException, WorkbasketAlreadyExistException,\n-          DomainNotFoundException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\n-          \"Entry to createWorkbasket(workbasketResource= {})\", workbasketRepresentationModel);\n+    @DeleteMapping(path = \"/{workbasketId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<?> deleteWorkbasket(@PathVariable(value = \"workbasketId\") String workbasketId) {\n+        ResponseEntity<?> result = ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n+        try {\n+            workbasketService.deleteWorkbasket(workbasketId);\n+        } catch (WorkbasketNotFoundException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n+        } catch (NotAuthorizedException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n+        } catch (WorkbasketInUseException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.LOCKED).build();\n+        } catch (InvalidArgumentException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.PRECONDITION_FAILED).build();\n+        }\n+        return result;\n     }\n \n-    Workbasket workbasket =\n-        workbasketRepresentationModelAssembler.toEntityModel(workbasketRepresentationModel);\n-    workbasket = workbasketService.createWorkbasket(workbasket);\n-    ResponseEntity<WorkbasketRepresentationModel> response =\n-        ResponseEntity.status(HttpStatus.CREATED)\n-            .body(workbasketRepresentationModelAssembler.toModel(workbasket));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from createWorkbasket(), returning {}\", response);\n+    @PostMapping\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketResource> createWorkbasket(@RequestBody WorkbasketResource workbasketResource)\n+        throws NotAuthorizedException {\n+        try {\n+            Workbasket workbasket = workbasketMapper.toModel(workbasketResource);\n+            workbasket = workbasketService.createWorkbasket(workbasket);\n+            return new ResponseEntity<>(workbasketMapper.toResource(workbasket), HttpStatus.CREATED);\n+        } catch (InvalidWorkbasketException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);\n+        }\n     }\n \n-    return response;\n-  }\n-\n-  @PutMapping(path = Mapping.URL_WORKBASKET_ID)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<WorkbasketRepresentationModel> updateWorkbasket(\n-      @PathVariable(value = \"workbasketId\") String workbasketId,\n-      @RequestBody WorkbasketRepresentationModel workbasketRepresentationModel)\n-      throws InvalidWorkbasketException, WorkbasketNotFoundException, NotAuthorizedException,\n-          ConcurrencyException {\n-    LOGGER.debug(\"Entry to updateWorkbasket(workbasketId= {})\", workbasketId);\n-    ResponseEntity<WorkbasketRepresentationModel> result;\n-    if (workbasketId.equals(workbasketRepresentationModel.getWorkbasketId())) {\n-      Workbasket workbasket =\n-          workbasketRepresentationModelAssembler.toEntityModel(workbasketRepresentationModel);\n-      workbasket = workbasketService.updateWorkbasket(workbasket);\n-      result = ResponseEntity.ok(workbasketRepresentationModelAssembler.toModel(workbasket));\n-    } else {\n-      throw new InvalidWorkbasketException(\n-          \"Target-WB-ID('\"\n-              + workbasketId\n-              + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n-              + workbasketRepresentationModel.getWorkbasketId()\n-              + \"')\");\n-    }\n+    @PutMapping(path = \"/{workbasketId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketResource> updateWorkbasket(\n+        @PathVariable(value = \"workbasketId\") String workbasketId,\n+        @RequestBody WorkbasketResource workbasketResource) {\n+        ResponseEntity<WorkbasketResource> result;\n+        try {\n+            if (workbasketId.equals(workbasketResource.workbasketId)) {\n+                Workbasket workbasket = workbasketMapper.toModel(workbasketResource);\n+                workbasket = workbasketService.updateWorkbasket(workbasket);\n+                result = ResponseEntity.ok(workbasketMapper.toResource(workbasket));\n+            } else {\n+                throw new InvalidWorkbasketException(\n+                    \"Target-WB-ID('\" + workbasketId\n+                        + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n+                        + workbasketResource.getId() + \"')\");\n+            }\n+        } catch (InvalidWorkbasketException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.BAD_REQUEST);\n+        } catch (WorkbasketNotFoundException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.NOT_FOUND);\n+        } catch (NotAuthorizedException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n+        }\n \n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from updateWorkbasket(), returning {}\", result);\n+        return result;\n     }\n \n-    return result;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS, produces = MediaTypes.HAL_JSON_VALUE)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n-      getWorkbasketAccessItems(@PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws NotAuthorizedException, WorkbasketNotFoundException {\n-    LOGGER.debug(\"Entry to getWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-    ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> result;\n-\n-    List<WorkbasketAccessItem> accessItems =\n-        workbasketService.getWorkbasketAccessItems(workbasketId);\n-    result =\n-        ResponseEntity.ok(\n-            workbasketAccessItemRepresentationModelAssembler.toPageModel(\n-                workbasketId, accessItems, null));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getWorkbasketAccessItems(), returning {}\", result);\n+    @GetMapping(path = \"/{workbasketId}/workbasketAccessItems\")\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<List<WorkbasketAccessItemResource>> getWorkbasketAccessItems(\n+        @PathVariable(value = \"workbasketId\") String workbasketId) {\n+        List<WorkbasketAccessItem> wbAuthorizations = workbasketService.getWorkbasketAccessItems(workbasketId);\n+        List<WorkbasketAccessItemResource> result = new ArrayList<>();\n+        wbAuthorizations.stream()\n+            .forEach(accItem -> {\n+                try {\n+                    result.add(workbasketAccessItemMapper.toResource(accItem));\n+                } catch (NotAuthorizedException e) {\n+                    e.printStackTrace();\n+                }\n+            });\n+        return new ResponseEntity<>(result, HttpStatus.OK);\n     }\n \n-    return result;\n-  }\n-\n-  @PutMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n-      setWorkbasketAccessItems(\n-      @PathVariable(value = \"workbasketId\") String workbasketId,\n-      @RequestBody List<WorkbasketAccessItemRepresentationModel> workbasketAccessResourceItems)\n-      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException,\n-                 WorkbasketAccessItemAlreadyExistException {\n-    LOGGER.debug(\"Entry to setWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-    if (workbasketAccessResourceItems == null) {\n-      throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n+    @PostMapping(path = \"/workbasketAccessItems\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketAccessItemResource> createWorkbasketAccessItem(\n+        @RequestBody WorkbasketAccessItemResource workbasketAccessItemResource) throws NotAuthorizedException {\n+        try {\n+            WorkbasketAccessItem workbasketAccessItem = workbasketAccessItemMapper\n+                .toModel(workbasketAccessItemResource);\n+            workbasketAccessItem = workbasketService.createWorkbasketAccessItem(workbasketAccessItem);\n+            return new ResponseEntity<>(workbasketAccessItemMapper.toResource(workbasketAccessItem), HttpStatus.OK);\n+        } catch (InvalidArgumentException e) {\n+            return new ResponseEntity<>(HttpStatus.PRECONDITION_FAILED);\n+        }\n     }\n \n-    List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n-    workbasketAccessResourceItems.forEach(\n-        item -> wbAccessItems\n-                    .add(workbasketAccessItemRepresentationModelAssembler.toEntityModel(item)));\n-    workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n-    List<WorkbasketAccessItem> updatedWbAccessItems =\n-        workbasketService.getWorkbasketAccessItems(workbasketId);\n-\n-    ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> response =\n-        ResponseEntity.ok(\n-            workbasketAccessItemRepresentationModelAssembler.toPageModel(\n-                workbasketId, updatedWbAccessItems, null));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from setWorkbasketAccessItems(), returning {}\", response);\n+    @PutMapping(path = \"/workbasketAccessItems/{workbasketAccessItemId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketAccessItemResource> updateWorkbasketAccessItem(\n+        @PathVariable(value = \"authId\") String authId,\n+        @RequestBody WorkbasketAccessItemResource workbasketAccessItemResource) {\n+        try {\n+            WorkbasketAccessItem workbasketAccessItem = workbasketAccessItemMapper\n+                .toModel(workbasketAccessItemResource);\n+            workbasketAccessItem = workbasketService.updateWorkbasketAccessItem(workbasketAccessItem);\n+            return new ResponseEntity<>(workbasketAccessItemMapper.toResource(workbasketAccessItem), HttpStatus.OK);\n+        } catch (InvalidArgumentException | NotAuthorizedException e) {\n+            return new ResponseEntity<>(HttpStatus.PRECONDITION_FAILED);\n+        }\n     }\n \n-    return response;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION, produces = MediaTypes.HAL_JSON_VALUE)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n-      getDistributionTargets(@PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-\n-    LOGGER.debug(\"Entry to getDistributionTargets(workbasketId= {})\", workbasketId);\n-    List<WorkbasketSummary> distributionTargets =\n-        workbasketService.getDistributionTargets(workbasketId);\n-    TaskanaPagedModel<WorkbasketSummaryRepresentationModel> distributionTargetListResource =\n-        distributionTargetRepresentationModelAssembler.toPageModel(distributionTargets, null);\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> result =\n-        ResponseEntity.ok(distributionTargetListResource);\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getDistributionTargets(), returning {}\", result);\n+    @PutMapping(value = \"/{workbasketId}/workbasketAccessItems/\")\n+    public ResponseEntity<?> setWorkbasketAccessItems(@PathVariable(value = \"workbasketId\") String workbasketId,\n+        @RequestBody List<WorkbasketAccessItemResource> workbasketAccessResourceItems) {\n+        try {\n+            if (workbasketAccessResourceItems == null) {\n+                throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n+            }\n+            List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n+            workbasketAccessResourceItems.stream()\n+                .forEach(item -> wbAccessItems.add(workbasketAccessItemMapper.toModel(item)));\n+            workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n+            return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n+        } catch (InvalidArgumentException | NullPointerException e) {\n+            return new ResponseEntity<>(HttpStatus.PRECONDITION_FAILED);\n+        }\n     }\n \n-    return result;\n-  }\n-\n-  @PutMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n-      setDistributionTargetsForWorkbasketId(\n-      @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n-      @RequestBody List<String> targetWorkbasketIds)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\n-          \"Entry to getTasksStatusReport(workbasketId= {}, targetWorkbasketIds\u00b4= {})\",\n-          sourceWorkbasketId,\n-          LoggerUtils.listToString(targetWorkbasketIds));\n+    @DeleteMapping(path = \"/workbasketAccessItems/{workbasketAccessItemId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<?> deleteWorkbasketAccessItem(@PathVariable(value = \"authId\") String authId)\n+        throws NotAuthorizedException {\n+        workbasketService.deleteWorkbasketAccessItem(authId);\n+        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n     }\n \n-    workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n-\n-    List<WorkbasketSummary> distributionTargets =\n-        workbasketService.getDistributionTargets(sourceWorkbasketId);\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        ResponseEntity.ok(\n-            distributionTargetRepresentationModelAssembler.toPageModel(distributionTargets, null));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getTasksStatusReport(), returning {}\", response);\n+    @GetMapping(path = \"/{workbasketId}/distributiontargets\")\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<List<WorkbasketSummaryResource>> getDistributionTargetsForWorkbasketId(\n+        @PathVariable(value = \"workbasketId\") String workbasketId) {\n+\n+        ResponseEntity<List<WorkbasketSummaryResource>> result;\n+        List<WorkbasketSummary> distributionTargets;\n+        try {\n+            distributionTargets = workbasketService.getDistributionTargets(workbasketId);\n+            result = new ResponseEntity<>(distributionTargets.stream()\n+                .map(workbasket -> workbasketSummaryMapper.toResource(workbasket))\n+                .collect(Collectors.toList()), HttpStatus.OK);\n+        } catch (WorkbasketNotFoundException e) {\n+            result = new ResponseEntity<>(HttpStatus.NOT_FOUND);\n+        } catch (NotAuthorizedException e) {\n+            result = new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n+        }\n+        return result;\n     }\n \n-    return response;\n-  }\n-\n-  @DeleteMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n-      removeDistributionTargetForWorkbasketId(\n-      @PathVariable(value = \"workbasketId\") String targetWorkbasketId)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-    LOGGER.debug(\n-        \"Entry to removeDistributionTargetForWorkbasketId(workbasketId= {})\", targetWorkbasketId);\n-\n-    List<WorkbasketSummary> sourceWorkbaskets =\n-        workbasketService.getDistributionSources(targetWorkbasketId);\n-    for (WorkbasketSummary source : sourceWorkbaskets) {\n-      workbasketService.removeDistributionTarget(source.getId(), targetWorkbasketId);\n+    @PutMapping(path = \"/{workbasketId}/distributiontargets\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<?> setDistributionTargetsForWorkbasketId(\n+        @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n+        @RequestBody List<String> targetWorkbasketIds) {\n+        ResponseEntity<?> result;\n+        try {\n+            workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n+            result = ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n+        } catch (WorkbasketNotFoundException e) {\n+            result = ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n+        } catch (NotAuthorizedException e) {\n+            result = ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n+        }\n+        return result;\n     }\n \n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        ResponseEntity.noContent().build();\n-    LOGGER.debug(\"Exit from removeDistributionTargetForWorkbasketId(), returning {}\", response);\n-    return response;\n-  }\n+    private void addAuthorizationFilter(WorkbasketQuery query, String requiredPermission) {\n+        if (requiredPermission == null) {\n+            return;\n+        }\n \n-  private WorkbasketQuery applySortingParams(\n-      WorkbasketQuery query, MultiValueMap<String, String> params) throws IllegalArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to applySortingParams(query= {}, params={})\", query, params);\n+        for (String authorization : Arrays.asList(requiredPermission.split(\",\"))) {\n+            try {\n+                switch (authorization.trim()) {\n+                    case \"READ\":\n+                        query.callerHasPermission(WorkbasketPermission.READ);\n+                        break;\n+                    case \"OPEN\":\n+                        query.callerHasPermission(WorkbasketPermission.OPEN);\n+                        break;\n+                    case \"APPEND\":\n+                        query.callerHasPermission(WorkbasketPermission.APPEND);\n+                        break;\n+                    case \"TRANSFER\":\n+                        query.callerHasPermission(WorkbasketPermission.TRANSFER);\n+                        break;\n+                    case \"DISTRIBUTE\":\n+                        query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n+                        break;\n+                    case \"CUSTOM_1\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n+                        break;\n+                    case \"CUSTOM_2\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n+                        break;\n+                    case \"CUSTOM_3\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n+                        break;\n+                    case \"CUSTOM_4\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n+                        break;\n+                    case \"CUSTOM_5\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n+                        break;\n+                    case \"CUSTOM_6\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n+                        break;\n+                    case \"CUSTOM_7\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n+                        break;\n+                    case \"CUSTOM_8\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n+                        break;\n+                    case \"CUSTOM_9\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n+                        break;\n+                    case \"CUSTOM_10\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n+                        break;\n+                    case \"CUSTOM_11\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n+                        break;\n+                    case \"CUSTOM_12\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n+                        break;\n+                }\n+            } catch (InvalidArgumentException e) {\n+                e.printStackTrace();\n+            }\n+        }\n     }\n \n-    // sorting\n-    String sortBy = params.getFirst(SORT_BY);\n-    if (sortBy != null) {\n-      SortDirection sortDirection;\n-      if (params.getFirst(SORT_DIRECTION) != null\n-          && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n-        sortDirection = SortDirection.DESCENDING;\n-      } else {\n-        sortDirection = SortDirection.ASCENDING;\n-      }\n-      switch (sortBy) {\n-        case (NAME):\n-          query = query.orderByName(sortDirection);\n-          break;\n-        case (KEY):\n-          query = query.orderByKey(sortDirection);\n-          break;\n-        case (OWNER):\n-          query = query.orderByOwner(sortDirection);\n-          break;\n-        case (TYPE):\n-          query = query.orderByType(sortDirection);\n-          break;\n-        case (DESCRIPTION):\n-          query = query.orderByDescription(sortDirection);\n-          break;\n-        default:\n-          throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n-      }\n-    }\n-    params.remove(SORT_BY);\n-    params.remove(SORT_DIRECTION);\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n+    private void addSortingToQuery(WorkbasketQuery query, String sortBy, String order) {\n+        BaseQuery.SortDirection sortDirection = getSortDirection(order);\n+\n+        switch (sortBy) {\n+            case NAME:\n+                query.orderByName(sortDirection);\n+                break;\n+            case KEY:\n+                query.orderByKey(sortDirection);\n+                break;\n+            case DESCRIPTION:\n+                query.orderByDescription(sortDirection);\n+                break;\n+            case OWNER:\n+                query.orderByOwner(sortDirection);\n+                break;\n+            case TYPE:\n+                query.orderByType(sortDirection);\n+                break;\n+        }\n     }\n \n-    return query;\n-  }\n-\n-  private void applyFilterParams(\n-      WorkbasketQuery query, MultiValueMap<String, String> params) throws InvalidArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", query, params);\n+    private BaseQuery.SortDirection getSortDirection(String order) {\n+        if (order.equals(DESC)) {\n+            return BaseQuery.SortDirection.DESCENDING;\n+        }\n+        return BaseQuery.SortDirection.ASCENDING;\n     }\n \n-    if (params.containsKey(NAME)) {\n-      String[] names = extractCommaSeparatedFields(params.get(NAME));\n-      query.nameIn(names);\n-      params.remove(NAME);\n-    }\n-    if (params.containsKey(NAME_LIKE)) {\n-      query.nameLike(LIKE + params.get(NAME_LIKE).get(0) + LIKE);\n-      params.remove(NAME_LIKE);\n-    }\n-    if (params.containsKey(KEY)) {\n-      String[] names = extractCommaSeparatedFields(params.get(KEY));\n-      query.keyIn(names);\n-      params.remove(KEY);\n-    }\n-    if (params.containsKey(KEY_LIKE)) {\n-      query.keyLike(LIKE + params.get(KEY_LIKE).get(0) + LIKE);\n-      params.remove(KEY_LIKE);\n-    }\n-    if (params.containsKey(OWNER)) {\n-      String[] names = extractCommaSeparatedFields(params.get(OWNER));\n-      query.ownerIn(names);\n-      params.remove(OWNER);\n-    }\n-    if (params.containsKey(OWNER_LIKE)) {\n-      query.ownerLike(LIKE + params.get(OWNER_LIKE).get(0) + LIKE);\n-      params.remove(OWNER_LIKE);\n-    }\n-    if (params.containsKey(DESCRIPTION_LIKE)) {\n-      query.descriptionLike(LIKE + params.get(DESCRIPTION_LIKE).get(0) + LIKE);\n-      params.remove(DESCRIPTION_LIKE);\n-    }\n-    if (params.containsKey(DOMAIN)) {\n-      query.domainIn(extractCommaSeparatedFields(params.get(DOMAIN)));\n-      params.remove(DOMAIN);\n-    }\n-    if (params.containsKey(TYPE)) {\n-      switch (params.getFirst(TYPE)) {\n-        case \"PERSONAL\":\n-          query.typeIn(WorkbasketType.PERSONAL);\n-          break;\n-        case \"GROUP\":\n-          query.typeIn(WorkbasketType.GROUP);\n-          break;\n-        case \"CLEARANCE\":\n-          query.typeIn(WorkbasketType.CLEARANCE);\n-          break;\n-        case \"TOPIC\":\n-          query.typeIn(WorkbasketType.TOPIC);\n-          break;\n-        default:\n-          throw new InvalidArgumentException(\n-              \"Unknown Workbasket type '\" + params.getFirst(TYPE) + \"'\");\n-      }\n-      params.remove(TYPE);\n-    }\n-    if (params.containsKey(REQUIRED_PERMISSION)) {\n-      for (String authorization : params.getFirst(REQUIRED_PERMISSION).split(\",\")) {\n-        switch (authorization.trim()) {\n-          case \"READ\":\n-            query.callerHasPermission(WorkbasketPermission.READ);\n-            break;\n-          case \"OPEN\":\n-            query.callerHasPermission(WorkbasketPermission.OPEN);\n-            break;\n-          case \"APPEND\":\n-            query.callerHasPermission(WorkbasketPermission.APPEND);\n-            break;\n-          case \"TRANSFER\":\n-            query.callerHasPermission(WorkbasketPermission.TRANSFER);\n-            break;\n-          case \"DISTRIBUTE\":\n-            query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n-            break;\n-          case \"CUSTOM_1\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n-            break;\n-          case \"CUSTOM_2\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n-            break;\n-          case \"CUSTOM_3\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n-            break;\n-          case \"CUSTOM_4\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n-            break;\n-          case \"CUSTOM_5\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n-            break;\n-          case \"CUSTOM_6\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n-            break;\n-          case \"CUSTOM_7\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n-            break;\n-          case \"CUSTOM_8\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n-            break;\n-          case \"CUSTOM_9\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n-            break;\n-          case \"CUSTOM_10\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n-            break;\n-          case \"CUSTOM_11\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n-            break;\n-          case \"CUSTOM_12\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n-            break;\n-          default:\n-            throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n+    private void addAttributeFilter(WorkbasketQuery query,\n+        String name, String nameLike,\n+        String key, String keyLike,\n+        String descLike, String owner,\n+        String ownerLike, String type) {\n+        if (name != null)\n+            query.nameIn(name);\n+        if (nameLike != null)\n+            query.nameLike(LIKE + nameLike + LIKE);\n+        if (key != null)\n+            query.keyIn(key);\n+        if (keyLike != null)\n+            query.keyLike(LIKE + keyLike + LIKE);\n+        if (owner != null)\n+            query.ownerIn(owner);\n+        if (ownerLike != null)\n+            query.ownerLike(LIKE + ownerLike + LIKE);\n+        if (descLike != null)\n+            query.descriptionLike(LIKE + descLike + LIKE);\n+        if (type != null) {\n+            switch (type) {\n+                case \"PERSONAL\":\n+                    query.typeIn(WorkbasketType.PERSONAL);\n+                    break;\n+                case \"GROUP\":\n+                    query.typeIn(WorkbasketType.GROUP);\n+                    break;\n+                case \"CLEARANCE\":\n+                    query.typeIn(WorkbasketType.CLEARANCE);\n+                    break;\n+                case \"TOPIC\":\n+                    query.typeIn(WorkbasketType.TOPIC);\n+                    break;\n+            }\n         }\n-      }\n-      params.remove(REQUIRED_PERMISSION);\n-    }\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n     }\n-\n-  }\n }\n", "next_change": {"commit": "eaf15fd19c0b34abc699c6feedb1a216eeaade45", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 509fef84a..93f7f77be 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -412,6 +426,8 @@ public class WorkbasketController {\n                 case \"TOPIC\":\n                     query.typeIn(WorkbasketType.TOPIC);\n                     break;\n+                    default:\n+                        throw new RuntimeException(\"should never occur\");\n             }\n         }\n     }\n", "next_change": {"commit": "43a226f26d53d3e7ec1842b4de28c2d0ab1e6b37", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 93f7f77be..d31c828e4 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -426,8 +424,8 @@ public class WorkbasketController {\n                 case \"TOPIC\":\n                     query.typeIn(WorkbasketType.TOPIC);\n                     break;\n-                    default:\n-                        throw new RuntimeException(\"should never occur\");\n+                default:\n+                    throw new InvalidArgumentException(\"Unknown Workbaskettype '\" + type + \"'\");\n             }\n         }\n     }\n", "next_change": {"commit": "4765fc242ac1934ac0e681a691e10a7afd055059", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex d31c828e4..58f52582a 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -429,4 +386,19 @@ public class WorkbasketController {\n             }\n         }\n     }\n+\n+    private PageMetadata initPageMetadata(String pagesizeParam, String pageParam, long totalElements)\n+        throws InvalidArgumentException {\n+        long pagesize;\n+        long page;\n+        try {\n+            pagesize = Long.valueOf(pagesizeParam);\n+            page = Long.valueOf(pageParam);\n+        } catch (NumberFormatException e) {\n+            throw new InvalidArgumentException(\"page and pagesize must be a integer value.\");\n+        }\n+        PageMetadata pageMetadata = new PageMetadata(pagesize, page, totalElements, (totalElements / pagesize) + 1);\n+        return pageMetadata;\n+    }\n+\n }\n", "next_change": {"commit": "106df46a69a9fbebad2795ad53474f8cf91944c1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 58f52582a..990b5b64c 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -387,18 +388,4 @@ public class WorkbasketController {\n         }\n     }\n \n-    private PageMetadata initPageMetadata(String pagesizeParam, String pageParam, long totalElements)\n-        throws InvalidArgumentException {\n-        long pagesize;\n-        long page;\n-        try {\n-            pagesize = Long.valueOf(pagesizeParam);\n-            page = Long.valueOf(pageParam);\n-        } catch (NumberFormatException e) {\n-            throw new InvalidArgumentException(\"page and pagesize must be a integer value.\");\n-        }\n-        PageMetadata pageMetadata = new PageMetadata(pagesize, page, totalElements, (totalElements / pagesize) + 1);\n-        return pageMetadata;\n-    }\n-\n }\n", "next_change": {"commit": "dc8b0dbc54b4a715cea84d8644da78ebb6778314", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 990b5b64c..1ce35ed49 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -383,9 +320,71 @@ public class WorkbasketController extends AbstractPagingController {\n                     query.typeIn(WorkbasketType.TOPIC);\n                     break;\n                 default:\n-                    throw new InvalidArgumentException(\"Unknown Workbaskettype '\" + type + \"'\");\n+                    throw new InvalidArgumentException(\"Unknown Workbaskettype '\" + params.getFirst(TYPE) + \"'\");\n+            }\n+            params.remove(TYPE);\n+        }\n+        if (params.containsKey(REQUIRED_PERMISSION)) {\n+            for (String authorization : Arrays.asList(params.getFirst(REQUIRED_PERMISSION).split(\",\"))) {\n+                switch (authorization.trim()) {\n+                    case \"READ\":\n+                        query.callerHasPermission(WorkbasketPermission.READ);\n+                        break;\n+                    case \"OPEN\":\n+                        query.callerHasPermission(WorkbasketPermission.OPEN);\n+                        break;\n+                    case \"APPEND\":\n+                        query.callerHasPermission(WorkbasketPermission.APPEND);\n+                        break;\n+                    case \"TRANSFER\":\n+                        query.callerHasPermission(WorkbasketPermission.TRANSFER);\n+                        break;\n+                    case \"DISTRIBUTE\":\n+                        query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n+                        break;\n+                    case \"CUSTOM_1\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n+                        break;\n+                    case \"CUSTOM_2\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n+                        break;\n+                    case \"CUSTOM_3\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n+                        break;\n+                    case \"CUSTOM_4\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n+                        break;\n+                    case \"CUSTOM_5\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n+                        break;\n+                    case \"CUSTOM_6\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n+                        break;\n+                    case \"CUSTOM_7\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n+                        break;\n+                    case \"CUSTOM_8\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n+                        break;\n+                    case \"CUSTOM_9\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n+                        break;\n+                    case \"CUSTOM_10\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n+                        break;\n+                    case \"CUSTOM_11\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n+                        break;\n+                    case \"CUSTOM_12\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n+                        break;\n+                    default:\n+                        throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n+                }\n             }\n+            params.remove(REQUIRED_PERMISSION);\n         }\n+        return query;\n     }\n \n }\n", "next_change": {"commit": "24a700b81dd383fd606785af81f37d2670bb84fe", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 1ce35ed49..683864185 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -384,6 +476,10 @@ public class WorkbasketController extends AbstractPagingController {\n             }\n             params.remove(REQUIRED_PERMISSION);\n         }\n+        if(LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n+        }\n+\n         return query;\n     }\n \n", "next_change": {"commit": "8789dd5bf53e7f3712deb0fb85b68829e78724aa", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 683864185..bc1b82904 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -476,7 +476,7 @@ public class WorkbasketController extends AbstractPagingController {\n             }\n             params.remove(REQUIRED_PERMISSION);\n         }\n-        if(LOGGER.isDebugEnabled()) {\n+        if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n         }\n \n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex bc1b82904..86d6b11e9 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -43,444 +37,455 @@ import pro.taskana.exceptions.WorkbasketAlreadyExistException;\n import pro.taskana.exceptions.WorkbasketInUseException;\n import pro.taskana.exceptions.WorkbasketNotFoundException;\n import pro.taskana.impl.util.LoggerUtils;\n+import pro.taskana.rest.resource.DistributionTargetListResource;\n import pro.taskana.rest.resource.DistributionTargetResource;\n+import pro.taskana.rest.resource.DistributionTargetResourceAssembler;\n+import pro.taskana.rest.resource.PagedResources.PageMetadata;\n+import pro.taskana.rest.resource.WorkbasketAccessItemListResource;\n import pro.taskana.rest.resource.WorkbasketAccessItemResource;\n+import pro.taskana.rest.resource.WorkbasketAccessItemResourceAssembler;\n import pro.taskana.rest.resource.WorkbasketResource;\n-import pro.taskana.rest.resource.WorkbasketSummaryResource;\n-import pro.taskana.rest.resource.DistributionTargetListAssembler;\n-import pro.taskana.rest.resource.WorkbasketAccessItemAssembler;\n-import pro.taskana.rest.resource.WorkbasketAccessItemListAssembler;\n import pro.taskana.rest.resource.WorkbasketResourceAssembler;\n-import pro.taskana.rest.resource.WorkbasketSummaryResourcesAssembler;\n+import pro.taskana.rest.resource.WorkbasketSummaryListResource;\n+import pro.taskana.rest.resource.WorkbasketSummaryResourceAssembler;\n \n-/**\n- * Controller for all {@link Workbasket} related endpoints.\n- */\n+/** Controller for all {@link Workbasket} related endpoints. */\n @RestController\n @EnableHypermediaSupport(type = HypermediaType.HAL)\n-@RequestMapping(path = \"/v1/workbaskets\", produces = \"application/hal+json\")\n public class WorkbasketController extends AbstractPagingController {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(WorkbasketController.class);\n-\n-    private static final String LIKE = \"%\";\n-    private static final String NAME = \"name\";\n-    private static final String NAME_LIKE = \"name-like\";\n-    private static final String KEY = \"key\";\n-    private static final String KEY_LIKE = \"key-like\";\n-    private static final String OWNER = \"owner\";\n-    private static final String OWNER_LIKE = \"owner-like\";\n-    private static final String DESCRIPTION_LIKE = \"description-like\";\n-    private static final String DOMAIN = \"domain\";\n-    private static final String REQUIRED_PERMISSION = \"required-permission\";\n-    private static final String TYPE = \"type\";\n-    private static final String DESCRIPTION = \"description\";\n-\n-    private static final String SORT_BY = \"sort-by\";\n-    private static final String SORT_DIRECTION = \"order\";\n-\n-    private static final String PAGING_PAGE = \"page\";\n-    private static final String PAGING_PAGE_SIZE = \"page-size\";\n-\n-    @Autowired\n-    private WorkbasketService workbasketService;\n-\n-    @Autowired\n-    private TaskService taskService;\n-\n-    @Autowired\n-    private WorkbasketResourceAssembler workbasketResourceAssembler;\n-\n-    @Autowired\n-    private DistributionTargetListAssembler distributionTargetListAssembler;\n-\n-    @Autowired\n-    private WorkbasketAccessItemListAssembler accessItemListAssembler;\n-\n-    @Autowired\n-    private WorkbasketAccessItemAssembler workbasketAccessItemAssembler;\n-\n-    @GetMapping\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<PagedResources<WorkbasketSummaryResource>> getWorkbaskets(\n-        @RequestParam MultiValueMap<String, String> params) throws InvalidArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to getWorkbaskets(params= {})\", params);\n-        }\n \n-        WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n-        query = applySortingParams(query, params);\n-        query = applyFilterParams(query, params);\n-\n-        PageMetadata pageMetadata = null;\n-        List<WorkbasketSummary> workbasketSummaries = null;\n-        String page = params.getFirst(PAGING_PAGE);\n-        String pageSize = params.getFirst(PAGING_PAGE_SIZE);\n-        params.remove(PAGING_PAGE);\n-        params.remove(PAGING_PAGE_SIZE);\n-        validateNoInvalidParameterIsLeft(params);\n-        if (page != null && pageSize != null) {\n-            // paging\n-            long totalElements = query.count();\n-            pageMetadata = initPageMetadata(pageSize, page, totalElements);\n-            workbasketSummaries = query.listPage((int) pageMetadata.getNumber(),\n-                (int) pageMetadata.getSize());\n-        } else if (page == null && pageSize == null) {\n-            // not paging\n-            workbasketSummaries = query.list();\n-        } else {\n-            throw new InvalidArgumentException(\"Paging information is incomplete.\");\n-        }\n+  private static final Logger LOGGER = LoggerFactory.getLogger(WorkbasketController.class);\n+\n+  private static final String LIKE = \"%\";\n+  private static final String NAME = \"name\";\n+  private static final String NAME_LIKE = \"name-like\";\n+  private static final String KEY = \"key\";\n+  private static final String KEY_LIKE = \"key-like\";\n+  private static final String OWNER = \"owner\";\n+  private static final String OWNER_LIKE = \"owner-like\";\n+  private static final String DESCRIPTION_LIKE = \"description-like\";\n+  private static final String DOMAIN = \"domain\";\n+  private static final String REQUIRED_PERMISSION = \"required-permission\";\n+  private static final String TYPE = \"type\";\n+  private static final String DESCRIPTION = \"description\";\n+\n+  private static final String SORT_BY = \"sort-by\";\n+  private static final String SORT_DIRECTION = \"order\";\n+\n+  private WorkbasketService workbasketService;\n+\n+  private WorkbasketResourceAssembler workbasketResourceAssembler;\n+\n+  private WorkbasketSummaryResourceAssembler workbasketSummaryResourceAssembler;\n+\n+  private DistributionTargetResourceAssembler distributionTargetResourceAssembler;\n+\n+  private WorkbasketAccessItemResourceAssembler workbasketAccessItemResourceAssembler;\n+\n+  WorkbasketController(\n+      WorkbasketService workbasketService,\n+      WorkbasketResourceAssembler workbasketResourceAssembler,\n+      WorkbasketSummaryResourceAssembler workbasketSummaryResourceAssembler,\n+      DistributionTargetResourceAssembler distributionTargetResourceAssembler,\n+      WorkbasketAccessItemResourceAssembler workbasketAccessItemResourceAssembler) {\n+    this.workbasketService = workbasketService;\n+    this.workbasketResourceAssembler = workbasketResourceAssembler;\n+    this.workbasketSummaryResourceAssembler = workbasketSummaryResourceAssembler;\n+    this.distributionTargetResourceAssembler = distributionTargetResourceAssembler;\n+    this.workbasketAccessItemResourceAssembler = workbasketAccessItemResourceAssembler;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketSummaryListResource> getWorkbaskets(\n+      @RequestParam MultiValueMap<String, String> params) throws InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to getWorkbaskets(params= {})\", params);\n+    }\n \n-        WorkbasketSummaryResourcesAssembler assembler = new WorkbasketSummaryResourcesAssembler();\n-        PagedResources<WorkbasketSummaryResource> pagedResources = assembler.toResources(workbasketSummaries,\n-            pageMetadata);\n+    WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n+    query = applySortingParams(query, params);\n+    query = applyFilterParams(query, params);\n \n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getWorkbaskets(), returning {}\", new ResponseEntity<>(pagedResources, HttpStatus.OK));\n-        }\n+    PageMetadata pageMetadata = getPageMetadata(params, query);\n+    List<WorkbasketSummary> workbasketSummaries = getQueryList(query, pageMetadata);\n+    WorkbasketSummaryListResource pagedResources =\n+        workbasketSummaryResourceAssembler.toResources(workbasketSummaries, pageMetadata);\n \n-        return new ResponseEntity<>(pagedResources, HttpStatus.OK);\n+    ResponseEntity<WorkbasketSummaryListResource> response = ResponseEntity.ok(pagedResources);\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getWorkbaskets(), returning {}\", response);\n     }\n \n-    @GetMapping(path = \"/{workbasketId}\")\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<WorkbasketResource> getWorkbasket(@PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to getWorkbasket(workbasketId= {})\", workbasketId);\n-        ResponseEntity<WorkbasketResource> result;\n-        Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n-        result = new ResponseEntity<>(workbasketResourceAssembler.toResource(workbasket), HttpStatus.OK);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getWorkbasket(), returning {}\", result);\n-        }\n-\n-        return result;\n+    return response;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET_ID)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketResource> getWorkbasket(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws WorkbasketNotFoundException, NotAuthorizedException {\n+    LOGGER.debug(\"Entry to getWorkbasket(workbasketId= {})\", workbasketId);\n+    ResponseEntity<WorkbasketResource> result;\n+    Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n+    result = ResponseEntity.ok(workbasketResourceAssembler.toResource(workbasket));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getWorkbasket(), returning {}\", result);\n     }\n \n-    @DeleteMapping(path = \"/{workbasketId}\")\n-    @Transactional(rollbackFor = Exception.class, noRollbackFor = WorkbasketNotFoundException.class)\n-    public ResponseEntity<?> markWorkbasketForDeletion(@PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws NotAuthorizedException, InvalidArgumentException,\n-        WorkbasketNotFoundException, WorkbasketInUseException {\n-        LOGGER.debug(\"Entry to markWorkbasketForDeletion(workbasketId= {})\", workbasketId);\n-        LOGGER.debug(\"Exit from markWorkbasketForDeletion(), returning {}\", new ResponseEntity<>(workbasketService.deleteWorkbasket(workbasketId), HttpStatus.ACCEPTED));\n-            return new ResponseEntity<>(workbasketService.deleteWorkbasket(workbasketId), HttpStatus.ACCEPTED);\n+    return result;\n+  }\n+\n+  @DeleteMapping(path = Mapping.URL_WORKBASKET_ID)\n+  @Transactional(rollbackFor = Exception.class, noRollbackFor = WorkbasketNotFoundException.class)\n+  public ResponseEntity<?> markWorkbasketForDeletion(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException,\n+          WorkbasketInUseException {\n+    LOGGER.debug(\"Entry to markWorkbasketForDeletion(workbasketId= {})\", workbasketId);\n+    ResponseEntity<?> response =\n+        ResponseEntity.accepted().body(workbasketService.deleteWorkbasket(workbasketId));\n+    LOGGER.debug(\"Exit from markWorkbasketForDeletion(), returning {}\", response);\n+    return response;\n+  }\n+\n+  @PostMapping(path = Mapping.URL_WORKBASKET)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketResource> createWorkbasket(\n+      @RequestBody WorkbasketResource workbasketResource)\n+      throws InvalidWorkbasketException, NotAuthorizedException, WorkbasketAlreadyExistException,\n+          WorkbasketNotFoundException, DomainNotFoundException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to createWorkbasket(workbasketResource= {})\", workbasketResource);\n     }\n \n-    @PostMapping\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<WorkbasketResource> createWorkbasket(@RequestBody WorkbasketResource workbasketResource)\n-        throws InvalidWorkbasketException, NotAuthorizedException, WorkbasketAlreadyExistException,\n-        WorkbasketNotFoundException, DomainNotFoundException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to createWorkbasket(workbasketResource= {})\", workbasketResource);\n-        }\n-\n-        Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n-        workbasket = workbasketService.createWorkbasket(workbasket);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from createWorkbasket(), returning {}\", new ResponseEntity<>(workbasketResourceAssembler.toResource(workbasket), HttpStatus.CREATED));\n-        }\n-\n-        return new ResponseEntity<>(workbasketResourceAssembler.toResource(workbasket), HttpStatus.CREATED);\n+    Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n+    workbasket = workbasketService.createWorkbasket(workbasket);\n+    ResponseEntity<WorkbasketResource> response =\n+        ResponseEntity.status(HttpStatus.CREATED)\n+            .body(workbasketResourceAssembler.toResource(workbasket));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from createWorkbasket(), returning {}\", response);\n     }\n \n-    @PutMapping(path = \"/{workbasketId}\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<WorkbasketResource> updateWorkbasket(\n-        @PathVariable(value = \"workbasketId\") String workbasketId,\n-        @RequestBody WorkbasketResource workbasketResource)\n-        throws InvalidWorkbasketException, WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to updateWorkbasket(workbasketId= {})\", workbasketId);\n-        ResponseEntity<WorkbasketResource> result;\n-        if (workbasketId.equals(workbasketResource.workbasketId)) {\n-            Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n-            workbasket = workbasketService.updateWorkbasket(workbasket);\n-            result = ResponseEntity.ok(workbasketResourceAssembler.toResource(workbasket));\n-        } else {\n-            throw new InvalidWorkbasketException(\n-                \"Target-WB-ID('\" + workbasketId\n-                    + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n-                    + workbasketResource.getId() + \"')\");\n-        }\n-\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from updateWorkbasket(), returning {}\", result);\n-        }\n-\n-        return result;\n+    return response;\n+  }\n+\n+  @PutMapping(path = Mapping.URL_WORKBASKET_ID)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketResource> updateWorkbasket(\n+      @PathVariable(value = \"workbasketId\") String workbasketId,\n+      @RequestBody WorkbasketResource workbasketResource)\n+      throws InvalidWorkbasketException, WorkbasketNotFoundException, NotAuthorizedException {\n+    LOGGER.debug(\"Entry to updateWorkbasket(workbasketId= {})\", workbasketId);\n+    ResponseEntity<WorkbasketResource> result;\n+    if (workbasketId.equals(workbasketResource.workbasketId)) {\n+      Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n+      workbasket = workbasketService.updateWorkbasket(workbasket);\n+      result = ResponseEntity.ok(workbasketResourceAssembler.toResource(workbasket));\n+    } else {\n+      throw new InvalidWorkbasketException(\n+          \"Target-WB-ID('\"\n+              + workbasketId\n+              + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n+              + workbasketResource.getId()\n+              + \"')\");\n     }\n \n-    @GetMapping(path = \"/{workbasketId}/workbasketAccessItems\")\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<WorkbasketAccessItemResource>> getWorkbasketAccessItems(\n-        @PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws NotAuthorizedException, WorkbasketNotFoundException {\n-        LOGGER.debug(\"Entry to getWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-        ResponseEntity<Resources<WorkbasketAccessItemResource>> result;\n-\n-        List<WorkbasketAccessItem> accessItems = workbasketService.getWorkbasketAccessItems(workbasketId);\n-        Resources<WorkbasketAccessItemResource> accessItemListResource = accessItemListAssembler\n-            .toResource(workbasketId, accessItems);\n-        result = new ResponseEntity<>(accessItemListResource, HttpStatus.OK);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getWorkbasketAccessItems(), returning {}\", result);\n-        }\n-\n-        return result;\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from updateWorkbasket(), returning {}\", result);\n     }\n \n-    @PutMapping(value = \"/{workbasketId}/workbasketAccessItems\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<WorkbasketAccessItemResource>> setWorkbasketAccessItems(\n-        @PathVariable(value = \"workbasketId\") String workbasketId,\n-        @RequestBody List<WorkbasketAccessItemResource> workbasketAccessResourceItems)\n-        throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException {\n-        LOGGER.debug(\"Entry to setWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-        if (workbasketAccessResourceItems == null) {\n-            throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n-        }\n-\n-        List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n-        workbasketAccessResourceItems.forEach(item -> wbAccessItems.add(workbasketAccessItemAssembler.toModel(item)));\n-        workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n-\n-        List<WorkbasketAccessItem> updatedWbAccessItems = workbasketService.getWorkbasketAccessItems(workbasketId);\n-        Resources<WorkbasketAccessItemResource> accessItemListResource = accessItemListAssembler\n-            .toResource(workbasketId, updatedWbAccessItems);\n-\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from setWorkbasketAccessItems(), returning {}\", new ResponseEntity<>(accessItemListResource, HttpStatus.OK));\n-        }\n-\n-        return new ResponseEntity<>(accessItemListResource, HttpStatus.OK);\n+    return result;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketAccessItemListResource> getWorkbasketAccessItems(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws NotAuthorizedException, WorkbasketNotFoundException {\n+    LOGGER.debug(\"Entry to getWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n+    ResponseEntity<WorkbasketAccessItemListResource> result;\n+\n+    List<WorkbasketAccessItem> accessItems =\n+        workbasketService.getWorkbasketAccessItems(workbasketId);\n+    result =\n+        ResponseEntity.ok(\n+            workbasketAccessItemResourceAssembler.toResources(workbasketId, accessItems));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getWorkbasketAccessItems(), returning {}\", result);\n     }\n \n-    @GetMapping(path = \"/{workbasketId}/distribution-targets\")\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<DistributionTargetResource>> getDistributionTargets(\n-        @PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to getDistributionTargets(workbasketId= {})\", workbasketId);\n-        ResponseEntity<Resources<DistributionTargetResource>> result;\n-        List<WorkbasketSummary> distributionTargets = workbasketService.getDistributionTargets(workbasketId);\n-        Resources<DistributionTargetResource> distributionTargetListResource = distributionTargetListAssembler\n-            .toResource(workbasketId, distributionTargets);\n-        result = new ResponseEntity<>(distributionTargetListResource, HttpStatus.OK);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getDistributionTargets(), returning {}\", result);\n-        }\n+    return result;\n+  }\n+\n+  @PutMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketAccessItemListResource> setWorkbasketAccessItems(\n+      @PathVariable(value = \"workbasketId\") String workbasketId,\n+      @RequestBody List<WorkbasketAccessItemResource> workbasketAccessResourceItems)\n+      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException {\n+    LOGGER.debug(\"Entry to setWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n+    if (workbasketAccessResourceItems == null) {\n+      throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n+    }\n \n-        return result;\n+    List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n+    workbasketAccessResourceItems.forEach(\n+        item -> wbAccessItems.add(workbasketAccessItemResourceAssembler.toModel(item)));\n+    workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n+    List<WorkbasketAccessItem> updatedWbAccessItems =\n+        workbasketService.getWorkbasketAccessItems(workbasketId);\n+\n+    ResponseEntity<WorkbasketAccessItemListResource> response =\n+        ResponseEntity.ok(\n+            workbasketAccessItemResourceAssembler.toResources(workbasketId, updatedWbAccessItems));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from setWorkbasketAccessItems(), returning {}\", response);\n     }\n \n-    @PutMapping(path = \"/{workbasketId}/distribution-targets\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<DistributionTargetResource>> setDistributionTargetsForWorkbasketId(\n-        @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n-        @RequestBody List<String> targetWorkbasketIds) throws WorkbasketNotFoundException, NotAuthorizedException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to getTasksStatusReport(workbasketId= {}, targetWorkbasketIds\u00b4= {})\", sourceWorkbasketId,\n-                LoggerUtils.listToString(targetWorkbasketIds));\n-        }\n+    return response;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<DistributionTargetListResource> getDistributionTargets(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws WorkbasketNotFoundException, NotAuthorizedException {\n+\n+    LOGGER.debug(\"Entry to getDistributionTargets(workbasketId= {})\", workbasketId);\n+    List<WorkbasketSummary> distributionTargets =\n+        workbasketService.getDistributionTargets(workbasketId);\n+    DistributionTargetListResource distributionTargetListResource =\n+        distributionTargetResourceAssembler.toResources(workbasketId, distributionTargets);\n+    ResponseEntity<DistributionTargetListResource> result =\n+        ResponseEntity.ok(distributionTargetListResource);\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getDistributionTargets(), returning {}\", result);\n+    }\n \n-        workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n+    return result;\n+  }\n+\n+  @PutMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<DistributionTargetListResource> setDistributionTargetsForWorkbasketId(\n+      @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n+      @RequestBody List<String> targetWorkbasketIds)\n+      throws WorkbasketNotFoundException, NotAuthorizedException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\n+          \"Entry to getTasksStatusReport(workbasketId= {}, targetWorkbasketIds\u00b4= {})\",\n+          sourceWorkbasketId,\n+          LoggerUtils.listToString(targetWorkbasketIds));\n+    }\n \n-        List<WorkbasketSummary> distributionTargets = workbasketService.getDistributionTargets(sourceWorkbasketId);\n-        Resources<DistributionTargetResource> distributionTargetListResource = distributionTargetListAssembler\n-            .toResource(sourceWorkbasketId, distributionTargets);\n+    workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n \n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getTasksStatusReport(), returning {}\", new ResponseEntity<>(distributionTargetListResource, HttpStatus.OK));\n-        }\n+    List<WorkbasketSummary> distributionTargets =\n+        workbasketService.getDistributionTargets(sourceWorkbasketId);\n+    ResponseEntity<DistributionTargetListResource> response =\n+        ResponseEntity.ok(\n+            distributionTargetResourceAssembler.toResources(\n+                sourceWorkbasketId, distributionTargets));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getTasksStatusReport(), returning {}\", response);\n+    }\n \n-        return new ResponseEntity<>(distributionTargetListResource, HttpStatus.OK);\n+    return response;\n+  }\n+\n+  // TODO - schema inconsistent with PUT and GET\n+  @DeleteMapping(path = Mapping.URL_WORKBASKET_DISTRIBUTION_ID)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<Resources<DistributionTargetResource>>\n+      removeDistributionTargetForWorkbasketId(\n+          @PathVariable(value = \"workbasketId\") String targetWorkbasketId)\n+          throws WorkbasketNotFoundException, NotAuthorizedException {\n+    LOGGER.debug(\n+        \"Entry to removeDistributionTargetForWorkbasketId(workbasketId= {})\", targetWorkbasketId);\n+    List<WorkbasketSummary> sourceWorkbaskets =\n+        workbasketService.getDistributionSources(targetWorkbasketId);\n+    for (WorkbasketSummary source : sourceWorkbaskets) {\n+      workbasketService.removeDistributionTarget(source.getId(), targetWorkbasketId);\n     }\n \n-    @DeleteMapping(path = \"/distribution-targets/{workbasketId}\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<DistributionTargetResource>> removeDistributionTargetForWorkbasketId(\n-        @PathVariable(value = \"workbasketId\") String targetWorkbasketId)\n-        throws WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to removeDistributionTargetForWorkbasketId(workbasketId= {})\", targetWorkbasketId);\n-        List<WorkbasketSummary> sourceWorkbaskets = workbasketService.getDistributionSources(targetWorkbasketId);\n-        for (WorkbasketSummary source : sourceWorkbaskets) {\n-            workbasketService.removeDistributionTarget(source.getId(), targetWorkbasketId);\n-        }\n+    ResponseEntity<Resources<DistributionTargetResource>> response =\n+        ResponseEntity.noContent().build();\n+    LOGGER.debug(\"Exit from removeDistributionTargetForWorkbasketId(), returning {}\", response);\n+    return response;\n+  }\n \n-        LOGGER.debug(\"Exit from removeDistributionTargetForWorkbasketId(), returning {}\", new ResponseEntity<>(HttpStatus.NO_CONTENT));\n-        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n+  private WorkbasketQuery applySortingParams(\n+      WorkbasketQuery query, MultiValueMap<String, String> params) throws IllegalArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to applySortingParams(query= {}, params={})\", query, params);\n     }\n \n-    private WorkbasketQuery applySortingParams(WorkbasketQuery query, MultiValueMap<String, String> params)\n-        throws IllegalArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to applySortingParams(query= {}, params={})\", query, params);\n-        }\n+    // sorting\n+    String sortBy = params.getFirst(SORT_BY);\n+    if (sortBy != null) {\n+      SortDirection sortDirection;\n+      if (params.getFirst(SORT_DIRECTION) != null\n+          && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n+        sortDirection = SortDirection.DESCENDING;\n+      } else {\n+        sortDirection = SortDirection.ASCENDING;\n+      }\n+      switch (sortBy) {\n+        case (NAME):\n+          query = query.orderByName(sortDirection);\n+          break;\n+        case (KEY):\n+          query = query.orderByKey(sortDirection);\n+          break;\n+        case (OWNER):\n+          query = query.orderByOwner(sortDirection);\n+          break;\n+        case (TYPE):\n+          query = query.orderByType(sortDirection);\n+          break;\n+        case (DESCRIPTION):\n+          query = query.orderByDescription(sortDirection);\n+          break;\n+        default:\n+          throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n+      }\n+    }\n+    params.remove(SORT_BY);\n+    params.remove(SORT_DIRECTION);\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n+    }\n \n-        // sorting\n-        String sortBy = params.getFirst(SORT_BY);\n-        if (sortBy != null) {\n-            SortDirection sortDirection;\n-            if (params.getFirst(SORT_DIRECTION) != null && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n-                sortDirection = SortDirection.DESCENDING;\n-            } else {\n-                sortDirection = SortDirection.ASCENDING;\n-            }\n-            switch (sortBy) {\n-                case (NAME):\n-                    query = query.orderByName(sortDirection);\n-                    break;\n-                case (KEY):\n-                    query = query.orderByKey(sortDirection);\n-                    break;\n-                case (OWNER):\n-                    query = query.orderByOwner(sortDirection);\n-                    break;\n-                case (TYPE):\n-                    query = query.orderByType(sortDirection);\n-                    break;\n-                case (DESCRIPTION):\n-                    query = query.orderByDescription(sortDirection);\n-                    break;\n-                default:\n-                    throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n-            }\n-        }\n-        params.remove(SORT_BY);\n-        params.remove(SORT_DIRECTION);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n-        }\n+    return query;\n+  }\n \n-        return query;\n+  private WorkbasketQuery applyFilterParams(\n+      WorkbasketQuery query, MultiValueMap<String, String> params) throws InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", query, params);\n     }\n \n-    private WorkbasketQuery applyFilterParams(WorkbasketQuery query,\n-        MultiValueMap<String, String> params) throws InvalidArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", query, params);\n-        }\n-\n-        if (params.containsKey(NAME)) {\n-            String[] names = extractCommaSeparatedFields(params.get(NAME));\n-            query.nameIn(names);\n-            params.remove(NAME);\n-        }\n-        if (params.containsKey(NAME_LIKE)) {\n-            query.nameLike(LIKE + params.get(NAME_LIKE).get(0) + LIKE);\n-            params.remove(NAME_LIKE);\n-        }\n-        if (params.containsKey(KEY)) {\n-            String[] names = extractCommaSeparatedFields(params.get(KEY));\n-            query.keyIn(names);\n-            params.remove(KEY);\n-        }\n-        if (params.containsKey(KEY_LIKE)) {\n-            query.keyLike(LIKE + params.get(KEY_LIKE).get(0) + LIKE);\n-            params.remove(KEY_LIKE);\n-        }\n-        if (params.containsKey(OWNER)) {\n-            String[] names = extractCommaSeparatedFields(params.get(OWNER));\n-            query.ownerIn(names);\n-            params.remove(OWNER);\n-        }\n-        if (params.containsKey(OWNER_LIKE)) {\n-            query.ownerLike(LIKE + params.get(OWNER_LIKE).get(0) + LIKE);\n-            params.remove(OWNER_LIKE);\n-        }\n-        if (params.containsKey(DESCRIPTION_LIKE)) {\n-            query.descriptionLike(LIKE + params.get(DESCRIPTION_LIKE).get(0) + LIKE);\n-            params.remove(DESCRIPTION_LIKE);\n-        }\n-        if (params.containsKey(DOMAIN)) {\n-            query.domainIn(extractCommaSeparatedFields(params.get(DOMAIN)));\n-            params.remove(DOMAIN);\n-        }\n-        if (params.containsKey(TYPE)) {\n-            switch (params.getFirst(TYPE)) {\n-                case \"PERSONAL\":\n-                    query.typeIn(WorkbasketType.PERSONAL);\n-                    break;\n-                case \"GROUP\":\n-                    query.typeIn(WorkbasketType.GROUP);\n-                    break;\n-                case \"CLEARANCE\":\n-                    query.typeIn(WorkbasketType.CLEARANCE);\n-                    break;\n-                case \"TOPIC\":\n-                    query.typeIn(WorkbasketType.TOPIC);\n-                    break;\n-                default:\n-                    throw new InvalidArgumentException(\"Unknown Workbasket type '\" + params.getFirst(TYPE) + \"'\");\n-            }\n-            params.remove(TYPE);\n-        }\n-        if (params.containsKey(REQUIRED_PERMISSION)) {\n-            for (String authorization : Arrays.asList(params.getFirst(REQUIRED_PERMISSION).split(\",\"))) {\n-                switch (authorization.trim()) {\n-                    case \"READ\":\n-                        query.callerHasPermission(WorkbasketPermission.READ);\n-                        break;\n-                    case \"OPEN\":\n-                        query.callerHasPermission(WorkbasketPermission.OPEN);\n-                        break;\n-                    case \"APPEND\":\n-                        query.callerHasPermission(WorkbasketPermission.APPEND);\n-                        break;\n-                    case \"TRANSFER\":\n-                        query.callerHasPermission(WorkbasketPermission.TRANSFER);\n-                        break;\n-                    case \"DISTRIBUTE\":\n-                        query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n-                        break;\n-                    case \"CUSTOM_1\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n-                        break;\n-                    case \"CUSTOM_2\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n-                        break;\n-                    case \"CUSTOM_3\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n-                        break;\n-                    case \"CUSTOM_4\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n-                        break;\n-                    case \"CUSTOM_5\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n-                        break;\n-                    case \"CUSTOM_6\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n-                        break;\n-                    case \"CUSTOM_7\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n-                        break;\n-                    case \"CUSTOM_8\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n-                        break;\n-                    case \"CUSTOM_9\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n-                        break;\n-                    case \"CUSTOM_10\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n-                        break;\n-                    case \"CUSTOM_11\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n-                        break;\n-                    case \"CUSTOM_12\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n-                        break;\n-                    default:\n-                        throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n-                }\n-            }\n-            params.remove(REQUIRED_PERMISSION);\n-        }\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n+    if (params.containsKey(NAME)) {\n+      String[] names = extractCommaSeparatedFields(params.get(NAME));\n+      query.nameIn(names);\n+      params.remove(NAME);\n+    }\n+    if (params.containsKey(NAME_LIKE)) {\n+      query.nameLike(LIKE + params.get(NAME_LIKE).get(0) + LIKE);\n+      params.remove(NAME_LIKE);\n+    }\n+    if (params.containsKey(KEY)) {\n+      String[] names = extractCommaSeparatedFields(params.get(KEY));\n+      query.keyIn(names);\n+      params.remove(KEY);\n+    }\n+    if (params.containsKey(KEY_LIKE)) {\n+      query.keyLike(LIKE + params.get(KEY_LIKE).get(0) + LIKE);\n+      params.remove(KEY_LIKE);\n+    }\n+    if (params.containsKey(OWNER)) {\n+      String[] names = extractCommaSeparatedFields(params.get(OWNER));\n+      query.ownerIn(names);\n+      params.remove(OWNER);\n+    }\n+    if (params.containsKey(OWNER_LIKE)) {\n+      query.ownerLike(LIKE + params.get(OWNER_LIKE).get(0) + LIKE);\n+      params.remove(OWNER_LIKE);\n+    }\n+    if (params.containsKey(DESCRIPTION_LIKE)) {\n+      query.descriptionLike(LIKE + params.get(DESCRIPTION_LIKE).get(0) + LIKE);\n+      params.remove(DESCRIPTION_LIKE);\n+    }\n+    if (params.containsKey(DOMAIN)) {\n+      query.domainIn(extractCommaSeparatedFields(params.get(DOMAIN)));\n+      params.remove(DOMAIN);\n+    }\n+    if (params.containsKey(TYPE)) {\n+      switch (params.getFirst(TYPE)) {\n+        case \"PERSONAL\":\n+          query.typeIn(WorkbasketType.PERSONAL);\n+          break;\n+        case \"GROUP\":\n+          query.typeIn(WorkbasketType.GROUP);\n+          break;\n+        case \"CLEARANCE\":\n+          query.typeIn(WorkbasketType.CLEARANCE);\n+          break;\n+        case \"TOPIC\":\n+          query.typeIn(WorkbasketType.TOPIC);\n+          break;\n+        default:\n+          throw new InvalidArgumentException(\n+              \"Unknown Workbasket type '\" + params.getFirst(TYPE) + \"'\");\n+      }\n+      params.remove(TYPE);\n+    }\n+    if (params.containsKey(REQUIRED_PERMISSION)) {\n+      for (String authorization : Arrays.asList(params.getFirst(REQUIRED_PERMISSION).split(\",\"))) {\n+        switch (authorization.trim()) {\n+          case \"READ\":\n+            query.callerHasPermission(WorkbasketPermission.READ);\n+            break;\n+          case \"OPEN\":\n+            query.callerHasPermission(WorkbasketPermission.OPEN);\n+            break;\n+          case \"APPEND\":\n+            query.callerHasPermission(WorkbasketPermission.APPEND);\n+            break;\n+          case \"TRANSFER\":\n+            query.callerHasPermission(WorkbasketPermission.TRANSFER);\n+            break;\n+          case \"DISTRIBUTE\":\n+            query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n+            break;\n+          case \"CUSTOM_1\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n+            break;\n+          case \"CUSTOM_2\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n+            break;\n+          case \"CUSTOM_3\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n+            break;\n+          case \"CUSTOM_4\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n+            break;\n+          case \"CUSTOM_5\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n+            break;\n+          case \"CUSTOM_6\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n+            break;\n+          case \"CUSTOM_7\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n+            break;\n+          case \"CUSTOM_8\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n+            break;\n+          case \"CUSTOM_9\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n+            break;\n+          case \"CUSTOM_10\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n+            break;\n+          case \"CUSTOM_11\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n+            break;\n+          case \"CUSTOM_12\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n+            break;\n+          default:\n+            throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n         }\n-\n-        return query;\n+      }\n+      params.remove(REQUIRED_PERMISSION);\n+    }\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n     }\n \n+    return query;\n+  }\n }\n", "next_change": {"commit": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 86d6b11e9..090eef61c 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -486,6 +514,5 @@ public class WorkbasketController extends AbstractPagingController {\n       LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n     }\n \n-    return query;\n   }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "e872c39340c4755c0ea85ddbdee17229b7494bf8", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311 seperated rest service"}, {"oid": "eaf15fd19c0b34abc699c6feedb1a216eeaade45", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311 fixed checkstyle"}, {"oid": "798e160669500dabdd3486c788774dea5592d271", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311 refactoring"}, {"oid": "43a226f26d53d3e7ec1842b4de28c2d0ab1e6b37", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311: replaced RuntimeExceptions with more precise exceptions"}, {"oid": "d9bb89248b62e3724f5f56d6ab679af41a5f8aa7", "committedDate": "2018-03-01 13:31:27 +0100", "message": "TSK-327: Move Enums from impl to taskana package"}, {"oid": "bab3d9ff5ce3e2cf981a47bb5754e287e187416b", "committedDate": "2018-03-05 16:16:32 +0100", "message": "TSK-359 setWorkbasketAccessItems doesn't save access items"}, {"oid": "c958e8f1d4d4733ea79f489ae6a7480fa9bf5604", "committedDate": "2018-03-13 10:25:02 +0100", "message": "TSK-373: added HAL format to workbasket list."}, {"oid": "4c8b29bcec1c0b57536d63db31308526aeb8296a", "committedDate": "2018-03-13 10:25:02 +0100", "message": "TSK-373: list resources according to HAL format."}, {"oid": "3498df039ab4780c675b6635f3510255f13f2908", "committedDate": "2018-03-13 11:09:08 +0100", "message": "TSK-377 provide meaningful response for duplicate key exception"}, {"oid": "e581c8051b05ddbe065ae58d4f4effdf1b3525aa", "committedDate": "2018-03-14 08:15:28 +0100", "message": "TSK-378: PUT operations return updated entities and removed not required operations."}, {"oid": "aef0e987e9831452efdbc0a739a0670a89350490", "committedDate": "2018-03-15 10:06:43 +0100", "message": "TSK-385:"}, {"oid": "5de0cd5e09fd3599254ec441b0ae72b91b6db423", "committedDate": "2018-03-15 17:08:22 +0100", "message": "TSK-382 add errorhandling to controllers"}, {"oid": "2c62de91d79b6118fc999fdc714cc5ad5b738863", "committedDate": "2018-03-20 09:44:50 +0100", "message": "TSK-378: Add pagination to WorkbasketController."}, {"oid": "15dee0c2691fe78dd7cb9912da847aeacee906b1", "committedDate": "2018-03-20 09:44:50 +0100", "message": "TSK-378: introduced REST integration tests on WorkbasketController."}, {"oid": "4765fc242ac1934ac0e681a691e10a7afd055059", "committedDate": "2018-03-20 09:44:50 +0100", "message": "TSK-217: pagination support for WorkbasketController and first page to be number 1."}, {"oid": "9803de0502e11521b2c5d0d8816ccf8551c9ccf1", "committedDate": "2018-03-23 10:19:16 +0100", "message": "TSK-398: domain is checked for existance during workbasket creation."}, {"oid": "106df46a69a9fbebad2795ad53474f8cf91944c1", "committedDate": "2018-03-28 17:53:45 +0200", "message": "TSK-406: Added pagination for TaskController."}, {"oid": "a311a6030189d8b07e66fe4a6640b8a0329de9cb", "committedDate": "2018-04-02 08:32:29 +0200", "message": "TSK-426"}, {"oid": "dc8b0dbc54b4a715cea84d8644da78ebb6778314", "committedDate": "2018-04-18 12:30:58 +0200", "message": "TSK-421: invalid parameter lead to error message."}, {"oid": "ccf6f133ee4b9a171fe39da9bbeb409c2b34db3e", "committedDate": "2018-04-18 21:56:13 +0200", "message": "TSK-432 Domain switch and filtering for the application"}, {"oid": "87f44bd026132e2c5df92e14d13e5e5ee7f112b7", "committedDate": "2018-04-27 11:50:19 +0200", "message": "TSK-469: added endpoint to delete workbasket as distribution target."}, {"oid": "ec33a7a1ffe1c7353996c42a3c479f2b850ca54b", "committedDate": "2018-05-08 08:35:09 +0200", "message": "TSK-468 Add remove distribution target button and endpoint."}, {"oid": "30f72604c96b1312af763aa9d0bbfb38f875ec0a", "committedDate": "2018-05-14 08:29:39 +0200", "message": "TSK-482"}, {"oid": "712d8b435ba97b80ab723509e6fc1a3e913f7313", "committedDate": "2018-06-04 17:04:48 +0200", "message": "TSK-538 Bug order by description issue is now fixed."}, {"oid": "3f8dc3cf87cb36dd0eb10a0a43fac3b2d5995711", "committedDate": "2018-09-11 11:06:16 +0200", "message": "TSK-694 - Show list of all access items valid for a user (REST)"}, {"oid": "ef703b4a4025548faac4905ba488ae5777e791c0", "committedDate": "2018-09-11 11:06:16 +0200", "message": "TSK-694: refactored WorkbasketAccessItemQuery + Extended"}, {"oid": "66e25b4bd54adc2c71ca47f67a3bd9db8b044d08", "committedDate": "2018-09-11 13:09:40 +0200", "message": "TSK-682: redesigned task details and added custom Attributes"}, {"oid": "f74a70e0d5b87ed203622913ff9cb07ba0ad211d", "committedDate": "2018-10-09 10:38:40 +0200", "message": "TSK-680 - Mark workbasket for deletion"}, {"oid": "55e8135cc8a766a0869611f067490bec98a51d7c", "committedDate": "2018-10-17 10:14:27 +0200", "message": "TSK-733 - Modify response deleteWorkbasket"}, {"oid": "577ccaa648f52115c876706282d8434fe023f885", "committedDate": "2018-12-19 10:58:53 +0100", "message": "TSK-755 - Controller to get the simple history events"}, {"oid": "24a700b81dd383fd606785af81f37d2670bb84fe", "committedDate": "2019-01-22 13:22:01 +0100", "message": "TSK-769 - Improve the logger on both library and rest"}, {"oid": "8789dd5bf53e7f3712deb0fb85b68829e78724aa", "committedDate": "2019-02-01 13:50:43 +0100", "message": "TSK-775\t adapt code formatting to checkstyle template"}, {"oid": "cbc2ff16ac237bb923dbef4574b532bb20d90dcc", "committedDate": "2019-03-28 16:02:03 +0100", "message": "task/828: Unify and reduce the response and logger code in the controllers"}, {"oid": "aea64975dba98ebe04361ba7230f6bf186f2bcd8", "committedDate": "2019-05-07 08:24:49 +0200", "message": "feature/810 Add querying by planned date in monitor screen"}, {"oid": "aebd87b935fa739131d97336e5f3b6f3c6a99c5f", "committedDate": "2019-06-04 15:36:26 +0200", "message": "TSK-850: rebase cleanup"}, {"oid": "352d0d67cd3480f62eca33c4e5b3014c26c63394", "committedDate": "2019-09-26 10:38:29 +0200", "message": "TSK-881: Refactored REST-Api"}, {"oid": "f68e730a72cfba413fc2102ef84ac513ed194cee", "committedDate": "2019-10-04 22:12:52 +0200", "message": "TSK-896: Removed _embedded from History"}, {"oid": "f848bf4f4ecb62ca72b330bee2e1e47c9e53a829", "committedDate": "2019-11-30 12:21:18 +0100", "message": "TSK-947: Extract Url mappings"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "f06f87f41e08aea691512d53fe1087bd12e892b8", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Replace WorkbasketAccessItemListResource with equivalent PaginatedListResource"}, {"oid": "6a6dcb9c1e3984670c644f89c569eba3d20dcf3d", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Standardise paginated List behaviour and sub classes"}, {"oid": "fae9d1fb9bdec9a1ea1499e04575738044c03235", "committedDate": "2020-01-23 13:00:04 +0100", "message": "TSK-1029: Fix deletion of workbasket as business admin not possible"}, {"oid": "9b61abda37480fa9ba589c54f15bf6c0403a8184", "committedDate": "2020-01-28 12:27:37 +0100", "message": "TSK-1038: added WAIAlreadyExistsException to missing operations with access Items"}, {"oid": "3b13b9a95e4d7d1cf172f22fa0f2679ff1c5f79b", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 after initial refactoring"}, {"oid": "442385482236ad0c25830becbadddf30f6e7bf2d", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 fix dependent projects"}, {"oid": "e308578ced577706e1f6994473e0e6252f647b9e", "committedDate": "2020-02-06 17:26:05 +0100", "message": "TSK-991: refactored report structure to meet api -> internal agreement"}, {"oid": "dcc72d1781fffea923a9d4a2b0d568a1984f88bb", "committedDate": "2020-02-11 09:33:54 +0100", "message": "TSK-1088 optimistic locking on workbasket update"}, {"oid": "e6f8883e4911704f16404846fe4208ee3abb2adc", "committedDate": "2020-02-11 17:05:34 +0100", "message": "TSK-1031: removed unnecessary throws statements"}, {"oid": "007f268be599fda8b884e002b7b03bb260c7620f", "committedDate": "2020-02-11 17:05:34 +0100", "message": "TSK-1031: update Spring Boot to 2.2.4.RELEASE except Hateoas."}, {"oid": "fc812cb9ea2a94c50a4df6ca1d786e2a0306375d", "committedDate": "2020-02-13 09:25:08 +0100", "message": "TSK-1109 Make WorkbasketResource attributes private and convert tests to AssertJ"}, {"oid": "4c884819d5823f5bdede585a3ed347589c465c4d", "committedDate": "2020-02-13 14:20:17 +0100", "message": "TSK-1123: workbasketaccessitems now produce application/hal-json"}, {"oid": "5c7d38451ce7cbea2ad52d3b84be72d49c474c71", "committedDate": "2020-02-13 15:09:39 +0100", "message": "TSK-1094 introduce models package for */api and */internal"}, {"oid": "f64053ec4ecf4887deba1baf199a017e51ae42e0", "committedDate": "2020-02-13 16:12:39 +0100", "message": "TSK-1125: distributiontargets now produce application/hal-json"}, {"oid": "c9791b01b8b72b711025903276f2a1a30e3e85a2", "committedDate": "2020-03-19 09:53:54 +0100", "message": "TSK-1029: Proper distinction between delete and markForFeletion for workbaskets"}, {"oid": "a8e44dead343598b7266254616a7f8559ee941ba", "committedDate": "2020-04-23 09:49:16 +0200", "message": "TSK-1083: Updated HATEOAS from version 0.24.0 to version 1.0.4"}, {"oid": "75a340ccf32a72f2f45bdea73ace9ee3d33bf05c", "committedDate": "2020-05-11 14:48:36 +0200", "message": "TSK-1243: made rest url for workbasket distribution-targets consistent"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyNDcxMQ==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422624711", "body": "Please reformat", "bodyText": "Please reformat", "bodyHTML": "<p dir=\"auto\">Please reformat</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T10:34:46Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java", "diffHunk": "@@ -265,16 +276,16 @@\n \n   @GetMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION, produces = MediaTypes.HAL_JSON_VALUE)\n   @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<DistributionTargetListResource> getDistributionTargets(\n-      @PathVariable(value = \"workbasketId\") String workbasketId)\n+  @SuppressWarnings(\"checkstyle:LineLength\")", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 820e48f04..b48fc9c2e 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -276,8 +277,8 @@ public class WorkbasketController extends AbstractPagingController {\n \n   @GetMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION, produces = MediaTypes.HAL_JSON_VALUE)\n   @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  @SuppressWarnings(\"checkstyle:LineLength\")\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> getDistributionTargets(@PathVariable(value = \"workbasketId\") String workbasketId)\n+  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n+      getDistributionTargets(@PathVariable(value = \"workbasketId\") String workbasketId)\n       throws WorkbasketNotFoundException, NotAuthorizedException {\n \n     LOGGER.debug(\"Entry to getDistributionTargets(workbasketId= {})\", workbasketId);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 820e48f04..090eef61c 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -276,8 +277,8 @@ public class WorkbasketController extends AbstractPagingController {\n \n   @GetMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION, produces = MediaTypes.HAL_JSON_VALUE)\n   @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  @SuppressWarnings(\"checkstyle:LineLength\")\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> getDistributionTargets(@PathVariable(value = \"workbasketId\") String workbasketId)\n+  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n+      getDistributionTargets(@PathVariable(value = \"workbasketId\") String workbasketId)\n       throws WorkbasketNotFoundException, NotAuthorizedException {\n \n     LOGGER.debug(\"Entry to getDistributionTargets(workbasketId= {})\", workbasketId);\n", "next_change": {"commit": "e872c39340c4755c0ea85ddbdee17229b7494bf8", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 090eef61c..509fef84a 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -1,518 +1,418 @@\n package pro.taskana.rest;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.hateoas.MediaTypes;\n-import org.springframework.hateoas.PagedModel.PageMetadata;\n-import org.springframework.hateoas.config.EnableHypermediaSupport;\n-import org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.util.MultiValueMap;\n+import org.springframework.transaction.interceptor.TransactionInterceptor;\n import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.PutMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.RestController;\n \n-import pro.taskana.common.api.BaseQuery.SortDirection;\n-import pro.taskana.common.api.LoggerUtils;\n-import pro.taskana.common.api.exceptions.ConcurrencyException;\n-import pro.taskana.common.api.exceptions.DomainNotFoundException;\n-import pro.taskana.common.api.exceptions.InvalidArgumentException;\n-import pro.taskana.common.api.exceptions.NotAuthorizedException;\n-import pro.taskana.rest.resource.DistributionTargetRepresentationModelAssembler;\n-import pro.taskana.rest.resource.TaskanaPagedModel;\n-import pro.taskana.rest.resource.WorkbasketAccessItemRepresentationModel;\n-import pro.taskana.rest.resource.WorkbasketAccessItemRepresentationModelAssembler;\n-import pro.taskana.rest.resource.WorkbasketRepresentationModel;\n-import pro.taskana.rest.resource.WorkbasketRepresentationModelAssembler;\n-import pro.taskana.rest.resource.WorkbasketSummaryRepresentationModel;\n-import pro.taskana.rest.resource.WorkbasketSummaryRepresentationModelAssembler;\n-import pro.taskana.workbasket.api.WorkbasketPermission;\n-import pro.taskana.workbasket.api.WorkbasketQuery;\n-import pro.taskana.workbasket.api.WorkbasketService;\n-import pro.taskana.workbasket.api.WorkbasketType;\n-import pro.taskana.workbasket.api.exceptions.InvalidWorkbasketException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketAccessItemAlreadyExistException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketAlreadyExistException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketInUseException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketNotFoundException;\n-import pro.taskana.workbasket.api.models.Workbasket;\n-import pro.taskana.workbasket.api.models.WorkbasketAccessItem;\n-import pro.taskana.workbasket.api.models.WorkbasketSummary;\n+import pro.taskana.BaseQuery;\n+import pro.taskana.Workbasket;\n+import pro.taskana.WorkbasketAccessItem;\n+import pro.taskana.WorkbasketPermission;\n+import pro.taskana.WorkbasketQuery;\n+import pro.taskana.WorkbasketService;\n+import pro.taskana.WorkbasketSummary;\n+import pro.taskana.exceptions.InvalidArgumentException;\n+import pro.taskana.exceptions.InvalidWorkbasketException;\n+import pro.taskana.exceptions.NotAuthorizedException;\n+import pro.taskana.exceptions.WorkbasketInUseException;\n+import pro.taskana.exceptions.WorkbasketNotFoundException;\n+import pro.taskana.impl.WorkbasketType;\n+import pro.taskana.rest.resource.WorkbasketAccessItemResource;\n+import pro.taskana.rest.resource.WorkbasketResource;\n+import pro.taskana.rest.resource.WorkbasketSummaryResource;\n+import pro.taskana.rest.resource.mapper.WorkbasketAccessItemMapper;\n+import pro.taskana.rest.resource.mapper.WorkbasketMapper;\n+import pro.taskana.rest.resource.mapper.WorkbasketSummaryMapper;\n \n-/** Controller for all {@link Workbasket} related endpoints. */\n @RestController\n-@EnableHypermediaSupport(type = HypermediaType.HAL)\n-public class WorkbasketController extends AbstractPagingController {\n-\n-  private static final Logger LOGGER = LoggerFactory.getLogger(WorkbasketController.class);\n-\n-  private static final String LIKE = \"%\";\n-  private static final String NAME = \"name\";\n-  private static final String NAME_LIKE = \"name-like\";\n-  private static final String KEY = \"key\";\n-  private static final String KEY_LIKE = \"key-like\";\n-  private static final String OWNER = \"owner\";\n-  private static final String OWNER_LIKE = \"owner-like\";\n-  private static final String DESCRIPTION_LIKE = \"description-like\";\n-  private static final String DOMAIN = \"domain\";\n-  private static final String REQUIRED_PERMISSION = \"required-permission\";\n-  private static final String TYPE = \"type\";\n-  private static final String DESCRIPTION = \"description\";\n-\n-  private static final String SORT_BY = \"sort-by\";\n-  private static final String SORT_DIRECTION = \"order\";\n-\n-  private final WorkbasketService workbasketService;\n-\n-  private final WorkbasketRepresentationModelAssembler workbasketRepresentationModelAssembler;\n-\n-  private final WorkbasketSummaryRepresentationModelAssembler\n-      workbasketSummaryRepresentationModelAssembler;\n-\n-  private final DistributionTargetRepresentationModelAssembler\n-      distributionTargetRepresentationModelAssembler;\n-\n-  private final WorkbasketAccessItemRepresentationModelAssembler\n-      workbasketAccessItemRepresentationModelAssembler;\n-\n-  WorkbasketController(\n-      WorkbasketService workbasketService,\n-      WorkbasketRepresentationModelAssembler workbasketRepresentationModelAssembler,\n-      WorkbasketSummaryRepresentationModelAssembler workbasketSummaryRepresentationModelAssembler,\n-      DistributionTargetRepresentationModelAssembler distributionTargetRepresentationModelAssembler,\n-      WorkbasketAccessItemRepresentationModelAssembler\n-          workbasketAccessItemRepresentationModelAssembler) {\n-    this.workbasketService = workbasketService;\n-    this.workbasketRepresentationModelAssembler = workbasketRepresentationModelAssembler;\n-    this.workbasketSummaryRepresentationModelAssembler =\n-        workbasketSummaryRepresentationModelAssembler;\n-    this.distributionTargetRepresentationModelAssembler =\n-        distributionTargetRepresentationModelAssembler;\n-    this.workbasketAccessItemRepresentationModelAssembler =\n-        workbasketAccessItemRepresentationModelAssembler;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> getWorkbaskets(\n-      @RequestParam MultiValueMap<String, String> params) throws InvalidArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to getWorkbaskets(params= {})\", params);\n-    }\n-\n-    WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n-    query = applySortingParams(query, params);\n-    applyFilterParams(query, params);\n-\n-    PageMetadata pageMetadata = getPageMetadata(params, query);\n-    List<WorkbasketSummary> workbasketSummaries = getQueryList(query, pageMetadata);\n-    TaskanaPagedModel<WorkbasketSummaryRepresentationModel> pagedModels =\n-        workbasketSummaryRepresentationModelAssembler.toPageModel(\n-            workbasketSummaries, pageMetadata);\n-\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        ResponseEntity.ok(pagedModels);\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getWorkbaskets(), returning {}\", response);\n+@RequestMapping(path = \"/v1/workbaskets\", produces = {MediaType.APPLICATION_JSON_VALUE})\n+public class WorkbasketController {\n+\n+    private static final String LIKE = \"%\";\n+    private static final String NAME = \"name\";\n+    private static final String KEY = \"key\";\n+    private static final String DESCRIPTION = \"description\";\n+    private static final String OWNER = \"owner\";\n+    private static final String TYPE = \"type\";\n+    private static final String DESC = \"desc\";\n+\n+    @Autowired\n+    private WorkbasketService workbasketService;\n+\n+    @Autowired\n+    private WorkbasketSummaryMapper workbasketSummaryMapper;\n+\n+    @Autowired\n+    private WorkbasketMapper workbasketMapper;\n+\n+    @Autowired\n+    private WorkbasketAccessItemMapper workbasketAccessItemMapper;\n+\n+    @GetMapping\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<List<WorkbasketSummaryResource>> getWorkbaskets(\n+        @RequestParam(value = \"sortBy\", defaultValue = \"name\", required = false) String sortBy,\n+        @RequestParam(value = \"order\", defaultValue = \"asc\", required = false) String order,\n+        @RequestParam(value = \"name\", required = false) String name,\n+        @RequestParam(value = \"nameLike\", required = false) String nameLike,\n+        @RequestParam(value = \"key\", required = false) String key,\n+        @RequestParam(value = \"keyLike\", required = false) String keyLike,\n+        @RequestParam(value = \"descLike\", required = false) String descLike,\n+        @RequestParam(value = \"owner\", required = false) String owner,\n+        @RequestParam(value = \"ownerLike\", required = false) String ownerLike,\n+        @RequestParam(value = \"type\", required = false) String type,\n+        @RequestParam(value = \"requiredPermission\", required = false) String requiredPermission) {\n+        ResponseEntity<List<WorkbasketSummaryResource>> result;\n+        List<WorkbasketSummary> workbasketsSummary;\n+        WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n+        addSortingToQuery(query, sortBy, order);\n+        addAttributeFilter(query, name, nameLike, key, keyLike, descLike, owner, ownerLike, type);\n+        addAuthorizationFilter(query, requiredPermission);\n+        workbasketsSummary = query.list();\n+        result = new ResponseEntity<>(workbasketsSummary.stream()\n+            .map(workbasket -> workbasketSummaryMapper.toResource(workbasket))\n+            .collect(Collectors.toList()), HttpStatus.OK);\n+        return result;\n     }\n \n-    return response;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET_ID, produces = MediaTypes.HAL_JSON_VALUE)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<WorkbasketRepresentationModel> getWorkbasket(\n-      @PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-    LOGGER.debug(\"Entry to getWorkbasket(workbasketId= {})\", workbasketId);\n-    ResponseEntity<WorkbasketRepresentationModel> result;\n-    Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n-    result = ResponseEntity.ok(workbasketRepresentationModelAssembler.toModel(workbasket));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getWorkbasket(), returning {}\", result);\n-    }\n-\n-    return result;\n-  }\n-\n-  @DeleteMapping(path = Mapping.URL_WORKBASKET_ID)\n-  @Transactional(rollbackFor = Exception.class, noRollbackFor = WorkbasketNotFoundException.class)\n-  public ResponseEntity<?> deleteWorkbasket(\n-      @PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException,\n-          WorkbasketInUseException {\n-    LOGGER.debug(\"Entry to markWorkbasketForDeletion(workbasketId= {})\", workbasketId);\n-    ResponseEntity<?> response;\n-\n-    boolean workbasketDeleted = workbasketService.deleteWorkbasket(workbasketId);\n-\n-    if (workbasketDeleted) {\n-      LOGGER.debug(\"Workbasket successfully deleted.\");\n-      response = ResponseEntity.noContent().build();\n-    } else {\n-      LOGGER.debug(\n-          \"Workbasket was only marked for deletion and will be physically deleted later on.\");\n-      response = ResponseEntity.accepted().build();\n+    @GetMapping(path = \"/{workbasketId}\")\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketResource> getWorkbasket(@PathVariable(value = \"workbasketId\") String workbasketId) {\n+        ResponseEntity<WorkbasketResource> result;\n+        try {\n+            Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n+            result = new ResponseEntity<>(workbasketMapper.toResource(workbasket), HttpStatus.OK);\n+        } catch (WorkbasketNotFoundException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.NOT_FOUND);\n+        } catch (NotAuthorizedException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n+        }\n+        return result;\n     }\n \n-    LOGGER.debug(\"Exit from markWorkbasketForDeletion(), returning {}\", response);\n-    return response;\n-  }\n-\n-  @PostMapping(path = Mapping.URL_WORKBASKET)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<WorkbasketRepresentationModel> createWorkbasket(\n-      @RequestBody WorkbasketRepresentationModel workbasketRepresentationModel)\n-      throws InvalidWorkbasketException, NotAuthorizedException, WorkbasketAlreadyExistException,\n-          DomainNotFoundException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\n-          \"Entry to createWorkbasket(workbasketResource= {})\", workbasketRepresentationModel);\n+    @DeleteMapping(path = \"/{workbasketId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<?> deleteWorkbasket(@PathVariable(value = \"workbasketId\") String workbasketId) {\n+        ResponseEntity<?> result = ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n+        try {\n+            workbasketService.deleteWorkbasket(workbasketId);\n+        } catch (WorkbasketNotFoundException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n+        } catch (NotAuthorizedException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n+        } catch (WorkbasketInUseException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.LOCKED).build();\n+        } catch (InvalidArgumentException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.PRECONDITION_FAILED).build();\n+        }\n+        return result;\n     }\n \n-    Workbasket workbasket =\n-        workbasketRepresentationModelAssembler.toEntityModel(workbasketRepresentationModel);\n-    workbasket = workbasketService.createWorkbasket(workbasket);\n-    ResponseEntity<WorkbasketRepresentationModel> response =\n-        ResponseEntity.status(HttpStatus.CREATED)\n-            .body(workbasketRepresentationModelAssembler.toModel(workbasket));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from createWorkbasket(), returning {}\", response);\n+    @PostMapping\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketResource> createWorkbasket(@RequestBody WorkbasketResource workbasketResource)\n+        throws NotAuthorizedException {\n+        try {\n+            Workbasket workbasket = workbasketMapper.toModel(workbasketResource);\n+            workbasket = workbasketService.createWorkbasket(workbasket);\n+            return new ResponseEntity<>(workbasketMapper.toResource(workbasket), HttpStatus.CREATED);\n+        } catch (InvalidWorkbasketException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);\n+        }\n     }\n \n-    return response;\n-  }\n-\n-  @PutMapping(path = Mapping.URL_WORKBASKET_ID)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<WorkbasketRepresentationModel> updateWorkbasket(\n-      @PathVariable(value = \"workbasketId\") String workbasketId,\n-      @RequestBody WorkbasketRepresentationModel workbasketRepresentationModel)\n-      throws InvalidWorkbasketException, WorkbasketNotFoundException, NotAuthorizedException,\n-          ConcurrencyException {\n-    LOGGER.debug(\"Entry to updateWorkbasket(workbasketId= {})\", workbasketId);\n-    ResponseEntity<WorkbasketRepresentationModel> result;\n-    if (workbasketId.equals(workbasketRepresentationModel.getWorkbasketId())) {\n-      Workbasket workbasket =\n-          workbasketRepresentationModelAssembler.toEntityModel(workbasketRepresentationModel);\n-      workbasket = workbasketService.updateWorkbasket(workbasket);\n-      result = ResponseEntity.ok(workbasketRepresentationModelAssembler.toModel(workbasket));\n-    } else {\n-      throw new InvalidWorkbasketException(\n-          \"Target-WB-ID('\"\n-              + workbasketId\n-              + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n-              + workbasketRepresentationModel.getWorkbasketId()\n-              + \"')\");\n-    }\n+    @PutMapping(path = \"/{workbasketId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketResource> updateWorkbasket(\n+        @PathVariable(value = \"workbasketId\") String workbasketId,\n+        @RequestBody WorkbasketResource workbasketResource) {\n+        ResponseEntity<WorkbasketResource> result;\n+        try {\n+            if (workbasketId.equals(workbasketResource.workbasketId)) {\n+                Workbasket workbasket = workbasketMapper.toModel(workbasketResource);\n+                workbasket = workbasketService.updateWorkbasket(workbasket);\n+                result = ResponseEntity.ok(workbasketMapper.toResource(workbasket));\n+            } else {\n+                throw new InvalidWorkbasketException(\n+                    \"Target-WB-ID('\" + workbasketId\n+                        + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n+                        + workbasketResource.getId() + \"')\");\n+            }\n+        } catch (InvalidWorkbasketException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.BAD_REQUEST);\n+        } catch (WorkbasketNotFoundException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.NOT_FOUND);\n+        } catch (NotAuthorizedException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n+        }\n \n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from updateWorkbasket(), returning {}\", result);\n+        return result;\n     }\n \n-    return result;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS, produces = MediaTypes.HAL_JSON_VALUE)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n-      getWorkbasketAccessItems(@PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws NotAuthorizedException, WorkbasketNotFoundException {\n-    LOGGER.debug(\"Entry to getWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-    ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> result;\n-\n-    List<WorkbasketAccessItem> accessItems =\n-        workbasketService.getWorkbasketAccessItems(workbasketId);\n-    result =\n-        ResponseEntity.ok(\n-            workbasketAccessItemRepresentationModelAssembler.toPageModel(\n-                workbasketId, accessItems, null));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getWorkbasketAccessItems(), returning {}\", result);\n+    @GetMapping(path = \"/{workbasketId}/workbasketAccessItems\")\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<List<WorkbasketAccessItemResource>> getWorkbasketAccessItems(\n+        @PathVariable(value = \"workbasketId\") String workbasketId) {\n+        List<WorkbasketAccessItem> wbAuthorizations = workbasketService.getWorkbasketAccessItems(workbasketId);\n+        List<WorkbasketAccessItemResource> result = new ArrayList<>();\n+        wbAuthorizations.stream()\n+            .forEach(accItem -> {\n+                try {\n+                    result.add(workbasketAccessItemMapper.toResource(accItem));\n+                } catch (NotAuthorizedException e) {\n+                    e.printStackTrace();\n+                }\n+            });\n+        return new ResponseEntity<>(result, HttpStatus.OK);\n     }\n \n-    return result;\n-  }\n-\n-  @PutMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n-      setWorkbasketAccessItems(\n-      @PathVariable(value = \"workbasketId\") String workbasketId,\n-      @RequestBody List<WorkbasketAccessItemRepresentationModel> workbasketAccessResourceItems)\n-      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException,\n-                 WorkbasketAccessItemAlreadyExistException {\n-    LOGGER.debug(\"Entry to setWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-    if (workbasketAccessResourceItems == null) {\n-      throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n+    @PostMapping(path = \"/workbasketAccessItems\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketAccessItemResource> createWorkbasketAccessItem(\n+        @RequestBody WorkbasketAccessItemResource workbasketAccessItemResource) throws NotAuthorizedException {\n+        try {\n+            WorkbasketAccessItem workbasketAccessItem = workbasketAccessItemMapper\n+                .toModel(workbasketAccessItemResource);\n+            workbasketAccessItem = workbasketService.createWorkbasketAccessItem(workbasketAccessItem);\n+            return new ResponseEntity<>(workbasketAccessItemMapper.toResource(workbasketAccessItem), HttpStatus.OK);\n+        } catch (InvalidArgumentException e) {\n+            return new ResponseEntity<>(HttpStatus.PRECONDITION_FAILED);\n+        }\n     }\n \n-    List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n-    workbasketAccessResourceItems.forEach(\n-        item -> wbAccessItems\n-                    .add(workbasketAccessItemRepresentationModelAssembler.toEntityModel(item)));\n-    workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n-    List<WorkbasketAccessItem> updatedWbAccessItems =\n-        workbasketService.getWorkbasketAccessItems(workbasketId);\n-\n-    ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> response =\n-        ResponseEntity.ok(\n-            workbasketAccessItemRepresentationModelAssembler.toPageModel(\n-                workbasketId, updatedWbAccessItems, null));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from setWorkbasketAccessItems(), returning {}\", response);\n+    @PutMapping(path = \"/workbasketAccessItems/{workbasketAccessItemId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketAccessItemResource> updateWorkbasketAccessItem(\n+        @PathVariable(value = \"authId\") String authId,\n+        @RequestBody WorkbasketAccessItemResource workbasketAccessItemResource) {\n+        try {\n+            WorkbasketAccessItem workbasketAccessItem = workbasketAccessItemMapper\n+                .toModel(workbasketAccessItemResource);\n+            workbasketAccessItem = workbasketService.updateWorkbasketAccessItem(workbasketAccessItem);\n+            return new ResponseEntity<>(workbasketAccessItemMapper.toResource(workbasketAccessItem), HttpStatus.OK);\n+        } catch (InvalidArgumentException | NotAuthorizedException e) {\n+            return new ResponseEntity<>(HttpStatus.PRECONDITION_FAILED);\n+        }\n     }\n \n-    return response;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION, produces = MediaTypes.HAL_JSON_VALUE)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n-      getDistributionTargets(@PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-\n-    LOGGER.debug(\"Entry to getDistributionTargets(workbasketId= {})\", workbasketId);\n-    List<WorkbasketSummary> distributionTargets =\n-        workbasketService.getDistributionTargets(workbasketId);\n-    TaskanaPagedModel<WorkbasketSummaryRepresentationModel> distributionTargetListResource =\n-        distributionTargetRepresentationModelAssembler.toPageModel(distributionTargets, null);\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> result =\n-        ResponseEntity.ok(distributionTargetListResource);\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getDistributionTargets(), returning {}\", result);\n+    @PutMapping(value = \"/{workbasketId}/workbasketAccessItems/\")\n+    public ResponseEntity<?> setWorkbasketAccessItems(@PathVariable(value = \"workbasketId\") String workbasketId,\n+        @RequestBody List<WorkbasketAccessItemResource> workbasketAccessResourceItems) {\n+        try {\n+            if (workbasketAccessResourceItems == null) {\n+                throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n+            }\n+            List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n+            workbasketAccessResourceItems.stream()\n+                .forEach(item -> wbAccessItems.add(workbasketAccessItemMapper.toModel(item)));\n+            workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n+            return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n+        } catch (InvalidArgumentException | NullPointerException e) {\n+            return new ResponseEntity<>(HttpStatus.PRECONDITION_FAILED);\n+        }\n     }\n \n-    return result;\n-  }\n-\n-  @PutMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n-      setDistributionTargetsForWorkbasketId(\n-      @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n-      @RequestBody List<String> targetWorkbasketIds)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\n-          \"Entry to getTasksStatusReport(workbasketId= {}, targetWorkbasketIds\u00b4= {})\",\n-          sourceWorkbasketId,\n-          LoggerUtils.listToString(targetWorkbasketIds));\n+    @DeleteMapping(path = \"/workbasketAccessItems/{workbasketAccessItemId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<?> deleteWorkbasketAccessItem(@PathVariable(value = \"authId\") String authId)\n+        throws NotAuthorizedException {\n+        workbasketService.deleteWorkbasketAccessItem(authId);\n+        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n     }\n \n-    workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n-\n-    List<WorkbasketSummary> distributionTargets =\n-        workbasketService.getDistributionTargets(sourceWorkbasketId);\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        ResponseEntity.ok(\n-            distributionTargetRepresentationModelAssembler.toPageModel(distributionTargets, null));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getTasksStatusReport(), returning {}\", response);\n+    @GetMapping(path = \"/{workbasketId}/distributiontargets\")\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<List<WorkbasketSummaryResource>> getDistributionTargetsForWorkbasketId(\n+        @PathVariable(value = \"workbasketId\") String workbasketId) {\n+\n+        ResponseEntity<List<WorkbasketSummaryResource>> result;\n+        List<WorkbasketSummary> distributionTargets;\n+        try {\n+            distributionTargets = workbasketService.getDistributionTargets(workbasketId);\n+            result = new ResponseEntity<>(distributionTargets.stream()\n+                .map(workbasket -> workbasketSummaryMapper.toResource(workbasket))\n+                .collect(Collectors.toList()), HttpStatus.OK);\n+        } catch (WorkbasketNotFoundException e) {\n+            result = new ResponseEntity<>(HttpStatus.NOT_FOUND);\n+        } catch (NotAuthorizedException e) {\n+            result = new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n+        }\n+        return result;\n     }\n \n-    return response;\n-  }\n-\n-  @DeleteMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n-      removeDistributionTargetForWorkbasketId(\n-      @PathVariable(value = \"workbasketId\") String targetWorkbasketId)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-    LOGGER.debug(\n-        \"Entry to removeDistributionTargetForWorkbasketId(workbasketId= {})\", targetWorkbasketId);\n-\n-    List<WorkbasketSummary> sourceWorkbaskets =\n-        workbasketService.getDistributionSources(targetWorkbasketId);\n-    for (WorkbasketSummary source : sourceWorkbaskets) {\n-      workbasketService.removeDistributionTarget(source.getId(), targetWorkbasketId);\n+    @PutMapping(path = \"/{workbasketId}/distributiontargets\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<?> setDistributionTargetsForWorkbasketId(\n+        @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n+        @RequestBody List<String> targetWorkbasketIds) {\n+        ResponseEntity<?> result;\n+        try {\n+            workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n+            result = ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n+        } catch (WorkbasketNotFoundException e) {\n+            result = ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n+        } catch (NotAuthorizedException e) {\n+            result = ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n+        }\n+        return result;\n     }\n \n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        ResponseEntity.noContent().build();\n-    LOGGER.debug(\"Exit from removeDistributionTargetForWorkbasketId(), returning {}\", response);\n-    return response;\n-  }\n+    private void addAuthorizationFilter(WorkbasketQuery query, String requiredPermission) {\n+        if (requiredPermission == null) {\n+            return;\n+        }\n \n-  private WorkbasketQuery applySortingParams(\n-      WorkbasketQuery query, MultiValueMap<String, String> params) throws IllegalArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to applySortingParams(query= {}, params={})\", query, params);\n+        for (String authorization : Arrays.asList(requiredPermission.split(\",\"))) {\n+            try {\n+                switch (authorization.trim()) {\n+                    case \"READ\":\n+                        query.callerHasPermission(WorkbasketPermission.READ);\n+                        break;\n+                    case \"OPEN\":\n+                        query.callerHasPermission(WorkbasketPermission.OPEN);\n+                        break;\n+                    case \"APPEND\":\n+                        query.callerHasPermission(WorkbasketPermission.APPEND);\n+                        break;\n+                    case \"TRANSFER\":\n+                        query.callerHasPermission(WorkbasketPermission.TRANSFER);\n+                        break;\n+                    case \"DISTRIBUTE\":\n+                        query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n+                        break;\n+                    case \"CUSTOM_1\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n+                        break;\n+                    case \"CUSTOM_2\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n+                        break;\n+                    case \"CUSTOM_3\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n+                        break;\n+                    case \"CUSTOM_4\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n+                        break;\n+                    case \"CUSTOM_5\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n+                        break;\n+                    case \"CUSTOM_6\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n+                        break;\n+                    case \"CUSTOM_7\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n+                        break;\n+                    case \"CUSTOM_8\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n+                        break;\n+                    case \"CUSTOM_9\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n+                        break;\n+                    case \"CUSTOM_10\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n+                        break;\n+                    case \"CUSTOM_11\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n+                        break;\n+                    case \"CUSTOM_12\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n+                        break;\n+                }\n+            } catch (InvalidArgumentException e) {\n+                e.printStackTrace();\n+            }\n+        }\n     }\n \n-    // sorting\n-    String sortBy = params.getFirst(SORT_BY);\n-    if (sortBy != null) {\n-      SortDirection sortDirection;\n-      if (params.getFirst(SORT_DIRECTION) != null\n-          && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n-        sortDirection = SortDirection.DESCENDING;\n-      } else {\n-        sortDirection = SortDirection.ASCENDING;\n-      }\n-      switch (sortBy) {\n-        case (NAME):\n-          query = query.orderByName(sortDirection);\n-          break;\n-        case (KEY):\n-          query = query.orderByKey(sortDirection);\n-          break;\n-        case (OWNER):\n-          query = query.orderByOwner(sortDirection);\n-          break;\n-        case (TYPE):\n-          query = query.orderByType(sortDirection);\n-          break;\n-        case (DESCRIPTION):\n-          query = query.orderByDescription(sortDirection);\n-          break;\n-        default:\n-          throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n-      }\n-    }\n-    params.remove(SORT_BY);\n-    params.remove(SORT_DIRECTION);\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n+    private void addSortingToQuery(WorkbasketQuery query, String sortBy, String order) {\n+        BaseQuery.SortDirection sortDirection = getSortDirection(order);\n+\n+        switch (sortBy) {\n+            case NAME:\n+                query.orderByName(sortDirection);\n+                break;\n+            case KEY:\n+                query.orderByKey(sortDirection);\n+                break;\n+            case DESCRIPTION:\n+                query.orderByDescription(sortDirection);\n+                break;\n+            case OWNER:\n+                query.orderByOwner(sortDirection);\n+                break;\n+            case TYPE:\n+                query.orderByType(sortDirection);\n+                break;\n+        }\n     }\n \n-    return query;\n-  }\n-\n-  private void applyFilterParams(\n-      WorkbasketQuery query, MultiValueMap<String, String> params) throws InvalidArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", query, params);\n+    private BaseQuery.SortDirection getSortDirection(String order) {\n+        if (order.equals(DESC)) {\n+            return BaseQuery.SortDirection.DESCENDING;\n+        }\n+        return BaseQuery.SortDirection.ASCENDING;\n     }\n \n-    if (params.containsKey(NAME)) {\n-      String[] names = extractCommaSeparatedFields(params.get(NAME));\n-      query.nameIn(names);\n-      params.remove(NAME);\n-    }\n-    if (params.containsKey(NAME_LIKE)) {\n-      query.nameLike(LIKE + params.get(NAME_LIKE).get(0) + LIKE);\n-      params.remove(NAME_LIKE);\n-    }\n-    if (params.containsKey(KEY)) {\n-      String[] names = extractCommaSeparatedFields(params.get(KEY));\n-      query.keyIn(names);\n-      params.remove(KEY);\n-    }\n-    if (params.containsKey(KEY_LIKE)) {\n-      query.keyLike(LIKE + params.get(KEY_LIKE).get(0) + LIKE);\n-      params.remove(KEY_LIKE);\n-    }\n-    if (params.containsKey(OWNER)) {\n-      String[] names = extractCommaSeparatedFields(params.get(OWNER));\n-      query.ownerIn(names);\n-      params.remove(OWNER);\n-    }\n-    if (params.containsKey(OWNER_LIKE)) {\n-      query.ownerLike(LIKE + params.get(OWNER_LIKE).get(0) + LIKE);\n-      params.remove(OWNER_LIKE);\n-    }\n-    if (params.containsKey(DESCRIPTION_LIKE)) {\n-      query.descriptionLike(LIKE + params.get(DESCRIPTION_LIKE).get(0) + LIKE);\n-      params.remove(DESCRIPTION_LIKE);\n-    }\n-    if (params.containsKey(DOMAIN)) {\n-      query.domainIn(extractCommaSeparatedFields(params.get(DOMAIN)));\n-      params.remove(DOMAIN);\n-    }\n-    if (params.containsKey(TYPE)) {\n-      switch (params.getFirst(TYPE)) {\n-        case \"PERSONAL\":\n-          query.typeIn(WorkbasketType.PERSONAL);\n-          break;\n-        case \"GROUP\":\n-          query.typeIn(WorkbasketType.GROUP);\n-          break;\n-        case \"CLEARANCE\":\n-          query.typeIn(WorkbasketType.CLEARANCE);\n-          break;\n-        case \"TOPIC\":\n-          query.typeIn(WorkbasketType.TOPIC);\n-          break;\n-        default:\n-          throw new InvalidArgumentException(\n-              \"Unknown Workbasket type '\" + params.getFirst(TYPE) + \"'\");\n-      }\n-      params.remove(TYPE);\n-    }\n-    if (params.containsKey(REQUIRED_PERMISSION)) {\n-      for (String authorization : params.getFirst(REQUIRED_PERMISSION).split(\",\")) {\n-        switch (authorization.trim()) {\n-          case \"READ\":\n-            query.callerHasPermission(WorkbasketPermission.READ);\n-            break;\n-          case \"OPEN\":\n-            query.callerHasPermission(WorkbasketPermission.OPEN);\n-            break;\n-          case \"APPEND\":\n-            query.callerHasPermission(WorkbasketPermission.APPEND);\n-            break;\n-          case \"TRANSFER\":\n-            query.callerHasPermission(WorkbasketPermission.TRANSFER);\n-            break;\n-          case \"DISTRIBUTE\":\n-            query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n-            break;\n-          case \"CUSTOM_1\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n-            break;\n-          case \"CUSTOM_2\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n-            break;\n-          case \"CUSTOM_3\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n-            break;\n-          case \"CUSTOM_4\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n-            break;\n-          case \"CUSTOM_5\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n-            break;\n-          case \"CUSTOM_6\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n-            break;\n-          case \"CUSTOM_7\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n-            break;\n-          case \"CUSTOM_8\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n-            break;\n-          case \"CUSTOM_9\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n-            break;\n-          case \"CUSTOM_10\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n-            break;\n-          case \"CUSTOM_11\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n-            break;\n-          case \"CUSTOM_12\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n-            break;\n-          default:\n-            throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n+    private void addAttributeFilter(WorkbasketQuery query,\n+        String name, String nameLike,\n+        String key, String keyLike,\n+        String descLike, String owner,\n+        String ownerLike, String type) {\n+        if (name != null)\n+            query.nameIn(name);\n+        if (nameLike != null)\n+            query.nameLike(LIKE + nameLike + LIKE);\n+        if (key != null)\n+            query.keyIn(key);\n+        if (keyLike != null)\n+            query.keyLike(LIKE + keyLike + LIKE);\n+        if (owner != null)\n+            query.ownerIn(owner);\n+        if (ownerLike != null)\n+            query.ownerLike(LIKE + ownerLike + LIKE);\n+        if (descLike != null)\n+            query.descriptionLike(LIKE + descLike + LIKE);\n+        if (type != null) {\n+            switch (type) {\n+                case \"PERSONAL\":\n+                    query.typeIn(WorkbasketType.PERSONAL);\n+                    break;\n+                case \"GROUP\":\n+                    query.typeIn(WorkbasketType.GROUP);\n+                    break;\n+                case \"CLEARANCE\":\n+                    query.typeIn(WorkbasketType.CLEARANCE);\n+                    break;\n+                case \"TOPIC\":\n+                    query.typeIn(WorkbasketType.TOPIC);\n+                    break;\n+            }\n         }\n-      }\n-      params.remove(REQUIRED_PERMISSION);\n-    }\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n     }\n-\n-  }\n }\n", "next_change": {"commit": "eaf15fd19c0b34abc699c6feedb1a216eeaade45", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 509fef84a..93f7f77be 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -412,6 +426,8 @@ public class WorkbasketController {\n                 case \"TOPIC\":\n                     query.typeIn(WorkbasketType.TOPIC);\n                     break;\n+                    default:\n+                        throw new RuntimeException(\"should never occur\");\n             }\n         }\n     }\n", "next_change": {"commit": "43a226f26d53d3e7ec1842b4de28c2d0ab1e6b37", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 93f7f77be..d31c828e4 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -426,8 +424,8 @@ public class WorkbasketController {\n                 case \"TOPIC\":\n                     query.typeIn(WorkbasketType.TOPIC);\n                     break;\n-                    default:\n-                        throw new RuntimeException(\"should never occur\");\n+                default:\n+                    throw new InvalidArgumentException(\"Unknown Workbaskettype '\" + type + \"'\");\n             }\n         }\n     }\n", "next_change": {"commit": "4765fc242ac1934ac0e681a691e10a7afd055059", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex d31c828e4..58f52582a 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -429,4 +386,19 @@ public class WorkbasketController {\n             }\n         }\n     }\n+\n+    private PageMetadata initPageMetadata(String pagesizeParam, String pageParam, long totalElements)\n+        throws InvalidArgumentException {\n+        long pagesize;\n+        long page;\n+        try {\n+            pagesize = Long.valueOf(pagesizeParam);\n+            page = Long.valueOf(pageParam);\n+        } catch (NumberFormatException e) {\n+            throw new InvalidArgumentException(\"page and pagesize must be a integer value.\");\n+        }\n+        PageMetadata pageMetadata = new PageMetadata(pagesize, page, totalElements, (totalElements / pagesize) + 1);\n+        return pageMetadata;\n+    }\n+\n }\n", "next_change": {"commit": "106df46a69a9fbebad2795ad53474f8cf91944c1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 58f52582a..990b5b64c 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -387,18 +388,4 @@ public class WorkbasketController {\n         }\n     }\n \n-    private PageMetadata initPageMetadata(String pagesizeParam, String pageParam, long totalElements)\n-        throws InvalidArgumentException {\n-        long pagesize;\n-        long page;\n-        try {\n-            pagesize = Long.valueOf(pagesizeParam);\n-            page = Long.valueOf(pageParam);\n-        } catch (NumberFormatException e) {\n-            throw new InvalidArgumentException(\"page and pagesize must be a integer value.\");\n-        }\n-        PageMetadata pageMetadata = new PageMetadata(pagesize, page, totalElements, (totalElements / pagesize) + 1);\n-        return pageMetadata;\n-    }\n-\n }\n", "next_change": {"commit": "dc8b0dbc54b4a715cea84d8644da78ebb6778314", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 990b5b64c..1ce35ed49 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -383,9 +320,71 @@ public class WorkbasketController extends AbstractPagingController {\n                     query.typeIn(WorkbasketType.TOPIC);\n                     break;\n                 default:\n-                    throw new InvalidArgumentException(\"Unknown Workbaskettype '\" + type + \"'\");\n+                    throw new InvalidArgumentException(\"Unknown Workbaskettype '\" + params.getFirst(TYPE) + \"'\");\n+            }\n+            params.remove(TYPE);\n+        }\n+        if (params.containsKey(REQUIRED_PERMISSION)) {\n+            for (String authorization : Arrays.asList(params.getFirst(REQUIRED_PERMISSION).split(\",\"))) {\n+                switch (authorization.trim()) {\n+                    case \"READ\":\n+                        query.callerHasPermission(WorkbasketPermission.READ);\n+                        break;\n+                    case \"OPEN\":\n+                        query.callerHasPermission(WorkbasketPermission.OPEN);\n+                        break;\n+                    case \"APPEND\":\n+                        query.callerHasPermission(WorkbasketPermission.APPEND);\n+                        break;\n+                    case \"TRANSFER\":\n+                        query.callerHasPermission(WorkbasketPermission.TRANSFER);\n+                        break;\n+                    case \"DISTRIBUTE\":\n+                        query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n+                        break;\n+                    case \"CUSTOM_1\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n+                        break;\n+                    case \"CUSTOM_2\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n+                        break;\n+                    case \"CUSTOM_3\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n+                        break;\n+                    case \"CUSTOM_4\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n+                        break;\n+                    case \"CUSTOM_5\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n+                        break;\n+                    case \"CUSTOM_6\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n+                        break;\n+                    case \"CUSTOM_7\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n+                        break;\n+                    case \"CUSTOM_8\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n+                        break;\n+                    case \"CUSTOM_9\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n+                        break;\n+                    case \"CUSTOM_10\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n+                        break;\n+                    case \"CUSTOM_11\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n+                        break;\n+                    case \"CUSTOM_12\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n+                        break;\n+                    default:\n+                        throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n+                }\n             }\n+            params.remove(REQUIRED_PERMISSION);\n         }\n+        return query;\n     }\n \n }\n", "next_change": {"commit": "24a700b81dd383fd606785af81f37d2670bb84fe", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 1ce35ed49..683864185 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -384,6 +476,10 @@ public class WorkbasketController extends AbstractPagingController {\n             }\n             params.remove(REQUIRED_PERMISSION);\n         }\n+        if(LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n+        }\n+\n         return query;\n     }\n \n", "next_change": {"commit": "8789dd5bf53e7f3712deb0fb85b68829e78724aa", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 683864185..bc1b82904 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -476,7 +476,7 @@ public class WorkbasketController extends AbstractPagingController {\n             }\n             params.remove(REQUIRED_PERMISSION);\n         }\n-        if(LOGGER.isDebugEnabled()) {\n+        if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n         }\n \n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex bc1b82904..86d6b11e9 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -43,444 +37,455 @@ import pro.taskana.exceptions.WorkbasketAlreadyExistException;\n import pro.taskana.exceptions.WorkbasketInUseException;\n import pro.taskana.exceptions.WorkbasketNotFoundException;\n import pro.taskana.impl.util.LoggerUtils;\n+import pro.taskana.rest.resource.DistributionTargetListResource;\n import pro.taskana.rest.resource.DistributionTargetResource;\n+import pro.taskana.rest.resource.DistributionTargetResourceAssembler;\n+import pro.taskana.rest.resource.PagedResources.PageMetadata;\n+import pro.taskana.rest.resource.WorkbasketAccessItemListResource;\n import pro.taskana.rest.resource.WorkbasketAccessItemResource;\n+import pro.taskana.rest.resource.WorkbasketAccessItemResourceAssembler;\n import pro.taskana.rest.resource.WorkbasketResource;\n-import pro.taskana.rest.resource.WorkbasketSummaryResource;\n-import pro.taskana.rest.resource.DistributionTargetListAssembler;\n-import pro.taskana.rest.resource.WorkbasketAccessItemAssembler;\n-import pro.taskana.rest.resource.WorkbasketAccessItemListAssembler;\n import pro.taskana.rest.resource.WorkbasketResourceAssembler;\n-import pro.taskana.rest.resource.WorkbasketSummaryResourcesAssembler;\n+import pro.taskana.rest.resource.WorkbasketSummaryListResource;\n+import pro.taskana.rest.resource.WorkbasketSummaryResourceAssembler;\n \n-/**\n- * Controller for all {@link Workbasket} related endpoints.\n- */\n+/** Controller for all {@link Workbasket} related endpoints. */\n @RestController\n @EnableHypermediaSupport(type = HypermediaType.HAL)\n-@RequestMapping(path = \"/v1/workbaskets\", produces = \"application/hal+json\")\n public class WorkbasketController extends AbstractPagingController {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(WorkbasketController.class);\n-\n-    private static final String LIKE = \"%\";\n-    private static final String NAME = \"name\";\n-    private static final String NAME_LIKE = \"name-like\";\n-    private static final String KEY = \"key\";\n-    private static final String KEY_LIKE = \"key-like\";\n-    private static final String OWNER = \"owner\";\n-    private static final String OWNER_LIKE = \"owner-like\";\n-    private static final String DESCRIPTION_LIKE = \"description-like\";\n-    private static final String DOMAIN = \"domain\";\n-    private static final String REQUIRED_PERMISSION = \"required-permission\";\n-    private static final String TYPE = \"type\";\n-    private static final String DESCRIPTION = \"description\";\n-\n-    private static final String SORT_BY = \"sort-by\";\n-    private static final String SORT_DIRECTION = \"order\";\n-\n-    private static final String PAGING_PAGE = \"page\";\n-    private static final String PAGING_PAGE_SIZE = \"page-size\";\n-\n-    @Autowired\n-    private WorkbasketService workbasketService;\n-\n-    @Autowired\n-    private TaskService taskService;\n-\n-    @Autowired\n-    private WorkbasketResourceAssembler workbasketResourceAssembler;\n-\n-    @Autowired\n-    private DistributionTargetListAssembler distributionTargetListAssembler;\n-\n-    @Autowired\n-    private WorkbasketAccessItemListAssembler accessItemListAssembler;\n-\n-    @Autowired\n-    private WorkbasketAccessItemAssembler workbasketAccessItemAssembler;\n-\n-    @GetMapping\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<PagedResources<WorkbasketSummaryResource>> getWorkbaskets(\n-        @RequestParam MultiValueMap<String, String> params) throws InvalidArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to getWorkbaskets(params= {})\", params);\n-        }\n \n-        WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n-        query = applySortingParams(query, params);\n-        query = applyFilterParams(query, params);\n-\n-        PageMetadata pageMetadata = null;\n-        List<WorkbasketSummary> workbasketSummaries = null;\n-        String page = params.getFirst(PAGING_PAGE);\n-        String pageSize = params.getFirst(PAGING_PAGE_SIZE);\n-        params.remove(PAGING_PAGE);\n-        params.remove(PAGING_PAGE_SIZE);\n-        validateNoInvalidParameterIsLeft(params);\n-        if (page != null && pageSize != null) {\n-            // paging\n-            long totalElements = query.count();\n-            pageMetadata = initPageMetadata(pageSize, page, totalElements);\n-            workbasketSummaries = query.listPage((int) pageMetadata.getNumber(),\n-                (int) pageMetadata.getSize());\n-        } else if (page == null && pageSize == null) {\n-            // not paging\n-            workbasketSummaries = query.list();\n-        } else {\n-            throw new InvalidArgumentException(\"Paging information is incomplete.\");\n-        }\n+  private static final Logger LOGGER = LoggerFactory.getLogger(WorkbasketController.class);\n+\n+  private static final String LIKE = \"%\";\n+  private static final String NAME = \"name\";\n+  private static final String NAME_LIKE = \"name-like\";\n+  private static final String KEY = \"key\";\n+  private static final String KEY_LIKE = \"key-like\";\n+  private static final String OWNER = \"owner\";\n+  private static final String OWNER_LIKE = \"owner-like\";\n+  private static final String DESCRIPTION_LIKE = \"description-like\";\n+  private static final String DOMAIN = \"domain\";\n+  private static final String REQUIRED_PERMISSION = \"required-permission\";\n+  private static final String TYPE = \"type\";\n+  private static final String DESCRIPTION = \"description\";\n+\n+  private static final String SORT_BY = \"sort-by\";\n+  private static final String SORT_DIRECTION = \"order\";\n+\n+  private WorkbasketService workbasketService;\n+\n+  private WorkbasketResourceAssembler workbasketResourceAssembler;\n+\n+  private WorkbasketSummaryResourceAssembler workbasketSummaryResourceAssembler;\n+\n+  private DistributionTargetResourceAssembler distributionTargetResourceAssembler;\n+\n+  private WorkbasketAccessItemResourceAssembler workbasketAccessItemResourceAssembler;\n+\n+  WorkbasketController(\n+      WorkbasketService workbasketService,\n+      WorkbasketResourceAssembler workbasketResourceAssembler,\n+      WorkbasketSummaryResourceAssembler workbasketSummaryResourceAssembler,\n+      DistributionTargetResourceAssembler distributionTargetResourceAssembler,\n+      WorkbasketAccessItemResourceAssembler workbasketAccessItemResourceAssembler) {\n+    this.workbasketService = workbasketService;\n+    this.workbasketResourceAssembler = workbasketResourceAssembler;\n+    this.workbasketSummaryResourceAssembler = workbasketSummaryResourceAssembler;\n+    this.distributionTargetResourceAssembler = distributionTargetResourceAssembler;\n+    this.workbasketAccessItemResourceAssembler = workbasketAccessItemResourceAssembler;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketSummaryListResource> getWorkbaskets(\n+      @RequestParam MultiValueMap<String, String> params) throws InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to getWorkbaskets(params= {})\", params);\n+    }\n \n-        WorkbasketSummaryResourcesAssembler assembler = new WorkbasketSummaryResourcesAssembler();\n-        PagedResources<WorkbasketSummaryResource> pagedResources = assembler.toResources(workbasketSummaries,\n-            pageMetadata);\n+    WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n+    query = applySortingParams(query, params);\n+    query = applyFilterParams(query, params);\n \n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getWorkbaskets(), returning {}\", new ResponseEntity<>(pagedResources, HttpStatus.OK));\n-        }\n+    PageMetadata pageMetadata = getPageMetadata(params, query);\n+    List<WorkbasketSummary> workbasketSummaries = getQueryList(query, pageMetadata);\n+    WorkbasketSummaryListResource pagedResources =\n+        workbasketSummaryResourceAssembler.toResources(workbasketSummaries, pageMetadata);\n \n-        return new ResponseEntity<>(pagedResources, HttpStatus.OK);\n+    ResponseEntity<WorkbasketSummaryListResource> response = ResponseEntity.ok(pagedResources);\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getWorkbaskets(), returning {}\", response);\n     }\n \n-    @GetMapping(path = \"/{workbasketId}\")\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<WorkbasketResource> getWorkbasket(@PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to getWorkbasket(workbasketId= {})\", workbasketId);\n-        ResponseEntity<WorkbasketResource> result;\n-        Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n-        result = new ResponseEntity<>(workbasketResourceAssembler.toResource(workbasket), HttpStatus.OK);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getWorkbasket(), returning {}\", result);\n-        }\n-\n-        return result;\n+    return response;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET_ID)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketResource> getWorkbasket(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws WorkbasketNotFoundException, NotAuthorizedException {\n+    LOGGER.debug(\"Entry to getWorkbasket(workbasketId= {})\", workbasketId);\n+    ResponseEntity<WorkbasketResource> result;\n+    Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n+    result = ResponseEntity.ok(workbasketResourceAssembler.toResource(workbasket));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getWorkbasket(), returning {}\", result);\n     }\n \n-    @DeleteMapping(path = \"/{workbasketId}\")\n-    @Transactional(rollbackFor = Exception.class, noRollbackFor = WorkbasketNotFoundException.class)\n-    public ResponseEntity<?> markWorkbasketForDeletion(@PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws NotAuthorizedException, InvalidArgumentException,\n-        WorkbasketNotFoundException, WorkbasketInUseException {\n-        LOGGER.debug(\"Entry to markWorkbasketForDeletion(workbasketId= {})\", workbasketId);\n-        LOGGER.debug(\"Exit from markWorkbasketForDeletion(), returning {}\", new ResponseEntity<>(workbasketService.deleteWorkbasket(workbasketId), HttpStatus.ACCEPTED));\n-            return new ResponseEntity<>(workbasketService.deleteWorkbasket(workbasketId), HttpStatus.ACCEPTED);\n+    return result;\n+  }\n+\n+  @DeleteMapping(path = Mapping.URL_WORKBASKET_ID)\n+  @Transactional(rollbackFor = Exception.class, noRollbackFor = WorkbasketNotFoundException.class)\n+  public ResponseEntity<?> markWorkbasketForDeletion(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException,\n+          WorkbasketInUseException {\n+    LOGGER.debug(\"Entry to markWorkbasketForDeletion(workbasketId= {})\", workbasketId);\n+    ResponseEntity<?> response =\n+        ResponseEntity.accepted().body(workbasketService.deleteWorkbasket(workbasketId));\n+    LOGGER.debug(\"Exit from markWorkbasketForDeletion(), returning {}\", response);\n+    return response;\n+  }\n+\n+  @PostMapping(path = Mapping.URL_WORKBASKET)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketResource> createWorkbasket(\n+      @RequestBody WorkbasketResource workbasketResource)\n+      throws InvalidWorkbasketException, NotAuthorizedException, WorkbasketAlreadyExistException,\n+          WorkbasketNotFoundException, DomainNotFoundException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to createWorkbasket(workbasketResource= {})\", workbasketResource);\n     }\n \n-    @PostMapping\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<WorkbasketResource> createWorkbasket(@RequestBody WorkbasketResource workbasketResource)\n-        throws InvalidWorkbasketException, NotAuthorizedException, WorkbasketAlreadyExistException,\n-        WorkbasketNotFoundException, DomainNotFoundException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to createWorkbasket(workbasketResource= {})\", workbasketResource);\n-        }\n-\n-        Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n-        workbasket = workbasketService.createWorkbasket(workbasket);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from createWorkbasket(), returning {}\", new ResponseEntity<>(workbasketResourceAssembler.toResource(workbasket), HttpStatus.CREATED));\n-        }\n-\n-        return new ResponseEntity<>(workbasketResourceAssembler.toResource(workbasket), HttpStatus.CREATED);\n+    Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n+    workbasket = workbasketService.createWorkbasket(workbasket);\n+    ResponseEntity<WorkbasketResource> response =\n+        ResponseEntity.status(HttpStatus.CREATED)\n+            .body(workbasketResourceAssembler.toResource(workbasket));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from createWorkbasket(), returning {}\", response);\n     }\n \n-    @PutMapping(path = \"/{workbasketId}\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<WorkbasketResource> updateWorkbasket(\n-        @PathVariable(value = \"workbasketId\") String workbasketId,\n-        @RequestBody WorkbasketResource workbasketResource)\n-        throws InvalidWorkbasketException, WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to updateWorkbasket(workbasketId= {})\", workbasketId);\n-        ResponseEntity<WorkbasketResource> result;\n-        if (workbasketId.equals(workbasketResource.workbasketId)) {\n-            Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n-            workbasket = workbasketService.updateWorkbasket(workbasket);\n-            result = ResponseEntity.ok(workbasketResourceAssembler.toResource(workbasket));\n-        } else {\n-            throw new InvalidWorkbasketException(\n-                \"Target-WB-ID('\" + workbasketId\n-                    + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n-                    + workbasketResource.getId() + \"')\");\n-        }\n-\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from updateWorkbasket(), returning {}\", result);\n-        }\n-\n-        return result;\n+    return response;\n+  }\n+\n+  @PutMapping(path = Mapping.URL_WORKBASKET_ID)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketResource> updateWorkbasket(\n+      @PathVariable(value = \"workbasketId\") String workbasketId,\n+      @RequestBody WorkbasketResource workbasketResource)\n+      throws InvalidWorkbasketException, WorkbasketNotFoundException, NotAuthorizedException {\n+    LOGGER.debug(\"Entry to updateWorkbasket(workbasketId= {})\", workbasketId);\n+    ResponseEntity<WorkbasketResource> result;\n+    if (workbasketId.equals(workbasketResource.workbasketId)) {\n+      Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n+      workbasket = workbasketService.updateWorkbasket(workbasket);\n+      result = ResponseEntity.ok(workbasketResourceAssembler.toResource(workbasket));\n+    } else {\n+      throw new InvalidWorkbasketException(\n+          \"Target-WB-ID('\"\n+              + workbasketId\n+              + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n+              + workbasketResource.getId()\n+              + \"')\");\n     }\n \n-    @GetMapping(path = \"/{workbasketId}/workbasketAccessItems\")\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<WorkbasketAccessItemResource>> getWorkbasketAccessItems(\n-        @PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws NotAuthorizedException, WorkbasketNotFoundException {\n-        LOGGER.debug(\"Entry to getWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-        ResponseEntity<Resources<WorkbasketAccessItemResource>> result;\n-\n-        List<WorkbasketAccessItem> accessItems = workbasketService.getWorkbasketAccessItems(workbasketId);\n-        Resources<WorkbasketAccessItemResource> accessItemListResource = accessItemListAssembler\n-            .toResource(workbasketId, accessItems);\n-        result = new ResponseEntity<>(accessItemListResource, HttpStatus.OK);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getWorkbasketAccessItems(), returning {}\", result);\n-        }\n-\n-        return result;\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from updateWorkbasket(), returning {}\", result);\n     }\n \n-    @PutMapping(value = \"/{workbasketId}/workbasketAccessItems\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<WorkbasketAccessItemResource>> setWorkbasketAccessItems(\n-        @PathVariable(value = \"workbasketId\") String workbasketId,\n-        @RequestBody List<WorkbasketAccessItemResource> workbasketAccessResourceItems)\n-        throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException {\n-        LOGGER.debug(\"Entry to setWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-        if (workbasketAccessResourceItems == null) {\n-            throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n-        }\n-\n-        List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n-        workbasketAccessResourceItems.forEach(item -> wbAccessItems.add(workbasketAccessItemAssembler.toModel(item)));\n-        workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n-\n-        List<WorkbasketAccessItem> updatedWbAccessItems = workbasketService.getWorkbasketAccessItems(workbasketId);\n-        Resources<WorkbasketAccessItemResource> accessItemListResource = accessItemListAssembler\n-            .toResource(workbasketId, updatedWbAccessItems);\n-\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from setWorkbasketAccessItems(), returning {}\", new ResponseEntity<>(accessItemListResource, HttpStatus.OK));\n-        }\n-\n-        return new ResponseEntity<>(accessItemListResource, HttpStatus.OK);\n+    return result;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketAccessItemListResource> getWorkbasketAccessItems(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws NotAuthorizedException, WorkbasketNotFoundException {\n+    LOGGER.debug(\"Entry to getWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n+    ResponseEntity<WorkbasketAccessItemListResource> result;\n+\n+    List<WorkbasketAccessItem> accessItems =\n+        workbasketService.getWorkbasketAccessItems(workbasketId);\n+    result =\n+        ResponseEntity.ok(\n+            workbasketAccessItemResourceAssembler.toResources(workbasketId, accessItems));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getWorkbasketAccessItems(), returning {}\", result);\n     }\n \n-    @GetMapping(path = \"/{workbasketId}/distribution-targets\")\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<DistributionTargetResource>> getDistributionTargets(\n-        @PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to getDistributionTargets(workbasketId= {})\", workbasketId);\n-        ResponseEntity<Resources<DistributionTargetResource>> result;\n-        List<WorkbasketSummary> distributionTargets = workbasketService.getDistributionTargets(workbasketId);\n-        Resources<DistributionTargetResource> distributionTargetListResource = distributionTargetListAssembler\n-            .toResource(workbasketId, distributionTargets);\n-        result = new ResponseEntity<>(distributionTargetListResource, HttpStatus.OK);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getDistributionTargets(), returning {}\", result);\n-        }\n+    return result;\n+  }\n+\n+  @PutMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketAccessItemListResource> setWorkbasketAccessItems(\n+      @PathVariable(value = \"workbasketId\") String workbasketId,\n+      @RequestBody List<WorkbasketAccessItemResource> workbasketAccessResourceItems)\n+      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException {\n+    LOGGER.debug(\"Entry to setWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n+    if (workbasketAccessResourceItems == null) {\n+      throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n+    }\n \n-        return result;\n+    List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n+    workbasketAccessResourceItems.forEach(\n+        item -> wbAccessItems.add(workbasketAccessItemResourceAssembler.toModel(item)));\n+    workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n+    List<WorkbasketAccessItem> updatedWbAccessItems =\n+        workbasketService.getWorkbasketAccessItems(workbasketId);\n+\n+    ResponseEntity<WorkbasketAccessItemListResource> response =\n+        ResponseEntity.ok(\n+            workbasketAccessItemResourceAssembler.toResources(workbasketId, updatedWbAccessItems));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from setWorkbasketAccessItems(), returning {}\", response);\n     }\n \n-    @PutMapping(path = \"/{workbasketId}/distribution-targets\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<DistributionTargetResource>> setDistributionTargetsForWorkbasketId(\n-        @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n-        @RequestBody List<String> targetWorkbasketIds) throws WorkbasketNotFoundException, NotAuthorizedException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to getTasksStatusReport(workbasketId= {}, targetWorkbasketIds\u00b4= {})\", sourceWorkbasketId,\n-                LoggerUtils.listToString(targetWorkbasketIds));\n-        }\n+    return response;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<DistributionTargetListResource> getDistributionTargets(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws WorkbasketNotFoundException, NotAuthorizedException {\n+\n+    LOGGER.debug(\"Entry to getDistributionTargets(workbasketId= {})\", workbasketId);\n+    List<WorkbasketSummary> distributionTargets =\n+        workbasketService.getDistributionTargets(workbasketId);\n+    DistributionTargetListResource distributionTargetListResource =\n+        distributionTargetResourceAssembler.toResources(workbasketId, distributionTargets);\n+    ResponseEntity<DistributionTargetListResource> result =\n+        ResponseEntity.ok(distributionTargetListResource);\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getDistributionTargets(), returning {}\", result);\n+    }\n \n-        workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n+    return result;\n+  }\n+\n+  @PutMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<DistributionTargetListResource> setDistributionTargetsForWorkbasketId(\n+      @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n+      @RequestBody List<String> targetWorkbasketIds)\n+      throws WorkbasketNotFoundException, NotAuthorizedException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\n+          \"Entry to getTasksStatusReport(workbasketId= {}, targetWorkbasketIds\u00b4= {})\",\n+          sourceWorkbasketId,\n+          LoggerUtils.listToString(targetWorkbasketIds));\n+    }\n \n-        List<WorkbasketSummary> distributionTargets = workbasketService.getDistributionTargets(sourceWorkbasketId);\n-        Resources<DistributionTargetResource> distributionTargetListResource = distributionTargetListAssembler\n-            .toResource(sourceWorkbasketId, distributionTargets);\n+    workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n \n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getTasksStatusReport(), returning {}\", new ResponseEntity<>(distributionTargetListResource, HttpStatus.OK));\n-        }\n+    List<WorkbasketSummary> distributionTargets =\n+        workbasketService.getDistributionTargets(sourceWorkbasketId);\n+    ResponseEntity<DistributionTargetListResource> response =\n+        ResponseEntity.ok(\n+            distributionTargetResourceAssembler.toResources(\n+                sourceWorkbasketId, distributionTargets));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getTasksStatusReport(), returning {}\", response);\n+    }\n \n-        return new ResponseEntity<>(distributionTargetListResource, HttpStatus.OK);\n+    return response;\n+  }\n+\n+  // TODO - schema inconsistent with PUT and GET\n+  @DeleteMapping(path = Mapping.URL_WORKBASKET_DISTRIBUTION_ID)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<Resources<DistributionTargetResource>>\n+      removeDistributionTargetForWorkbasketId(\n+          @PathVariable(value = \"workbasketId\") String targetWorkbasketId)\n+          throws WorkbasketNotFoundException, NotAuthorizedException {\n+    LOGGER.debug(\n+        \"Entry to removeDistributionTargetForWorkbasketId(workbasketId= {})\", targetWorkbasketId);\n+    List<WorkbasketSummary> sourceWorkbaskets =\n+        workbasketService.getDistributionSources(targetWorkbasketId);\n+    for (WorkbasketSummary source : sourceWorkbaskets) {\n+      workbasketService.removeDistributionTarget(source.getId(), targetWorkbasketId);\n     }\n \n-    @DeleteMapping(path = \"/distribution-targets/{workbasketId}\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<DistributionTargetResource>> removeDistributionTargetForWorkbasketId(\n-        @PathVariable(value = \"workbasketId\") String targetWorkbasketId)\n-        throws WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to removeDistributionTargetForWorkbasketId(workbasketId= {})\", targetWorkbasketId);\n-        List<WorkbasketSummary> sourceWorkbaskets = workbasketService.getDistributionSources(targetWorkbasketId);\n-        for (WorkbasketSummary source : sourceWorkbaskets) {\n-            workbasketService.removeDistributionTarget(source.getId(), targetWorkbasketId);\n-        }\n+    ResponseEntity<Resources<DistributionTargetResource>> response =\n+        ResponseEntity.noContent().build();\n+    LOGGER.debug(\"Exit from removeDistributionTargetForWorkbasketId(), returning {}\", response);\n+    return response;\n+  }\n \n-        LOGGER.debug(\"Exit from removeDistributionTargetForWorkbasketId(), returning {}\", new ResponseEntity<>(HttpStatus.NO_CONTENT));\n-        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n+  private WorkbasketQuery applySortingParams(\n+      WorkbasketQuery query, MultiValueMap<String, String> params) throws IllegalArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to applySortingParams(query= {}, params={})\", query, params);\n     }\n \n-    private WorkbasketQuery applySortingParams(WorkbasketQuery query, MultiValueMap<String, String> params)\n-        throws IllegalArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to applySortingParams(query= {}, params={})\", query, params);\n-        }\n+    // sorting\n+    String sortBy = params.getFirst(SORT_BY);\n+    if (sortBy != null) {\n+      SortDirection sortDirection;\n+      if (params.getFirst(SORT_DIRECTION) != null\n+          && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n+        sortDirection = SortDirection.DESCENDING;\n+      } else {\n+        sortDirection = SortDirection.ASCENDING;\n+      }\n+      switch (sortBy) {\n+        case (NAME):\n+          query = query.orderByName(sortDirection);\n+          break;\n+        case (KEY):\n+          query = query.orderByKey(sortDirection);\n+          break;\n+        case (OWNER):\n+          query = query.orderByOwner(sortDirection);\n+          break;\n+        case (TYPE):\n+          query = query.orderByType(sortDirection);\n+          break;\n+        case (DESCRIPTION):\n+          query = query.orderByDescription(sortDirection);\n+          break;\n+        default:\n+          throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n+      }\n+    }\n+    params.remove(SORT_BY);\n+    params.remove(SORT_DIRECTION);\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n+    }\n \n-        // sorting\n-        String sortBy = params.getFirst(SORT_BY);\n-        if (sortBy != null) {\n-            SortDirection sortDirection;\n-            if (params.getFirst(SORT_DIRECTION) != null && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n-                sortDirection = SortDirection.DESCENDING;\n-            } else {\n-                sortDirection = SortDirection.ASCENDING;\n-            }\n-            switch (sortBy) {\n-                case (NAME):\n-                    query = query.orderByName(sortDirection);\n-                    break;\n-                case (KEY):\n-                    query = query.orderByKey(sortDirection);\n-                    break;\n-                case (OWNER):\n-                    query = query.orderByOwner(sortDirection);\n-                    break;\n-                case (TYPE):\n-                    query = query.orderByType(sortDirection);\n-                    break;\n-                case (DESCRIPTION):\n-                    query = query.orderByDescription(sortDirection);\n-                    break;\n-                default:\n-                    throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n-            }\n-        }\n-        params.remove(SORT_BY);\n-        params.remove(SORT_DIRECTION);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n-        }\n+    return query;\n+  }\n \n-        return query;\n+  private WorkbasketQuery applyFilterParams(\n+      WorkbasketQuery query, MultiValueMap<String, String> params) throws InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", query, params);\n     }\n \n-    private WorkbasketQuery applyFilterParams(WorkbasketQuery query,\n-        MultiValueMap<String, String> params) throws InvalidArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", query, params);\n-        }\n-\n-        if (params.containsKey(NAME)) {\n-            String[] names = extractCommaSeparatedFields(params.get(NAME));\n-            query.nameIn(names);\n-            params.remove(NAME);\n-        }\n-        if (params.containsKey(NAME_LIKE)) {\n-            query.nameLike(LIKE + params.get(NAME_LIKE).get(0) + LIKE);\n-            params.remove(NAME_LIKE);\n-        }\n-        if (params.containsKey(KEY)) {\n-            String[] names = extractCommaSeparatedFields(params.get(KEY));\n-            query.keyIn(names);\n-            params.remove(KEY);\n-        }\n-        if (params.containsKey(KEY_LIKE)) {\n-            query.keyLike(LIKE + params.get(KEY_LIKE).get(0) + LIKE);\n-            params.remove(KEY_LIKE);\n-        }\n-        if (params.containsKey(OWNER)) {\n-            String[] names = extractCommaSeparatedFields(params.get(OWNER));\n-            query.ownerIn(names);\n-            params.remove(OWNER);\n-        }\n-        if (params.containsKey(OWNER_LIKE)) {\n-            query.ownerLike(LIKE + params.get(OWNER_LIKE).get(0) + LIKE);\n-            params.remove(OWNER_LIKE);\n-        }\n-        if (params.containsKey(DESCRIPTION_LIKE)) {\n-            query.descriptionLike(LIKE + params.get(DESCRIPTION_LIKE).get(0) + LIKE);\n-            params.remove(DESCRIPTION_LIKE);\n-        }\n-        if (params.containsKey(DOMAIN)) {\n-            query.domainIn(extractCommaSeparatedFields(params.get(DOMAIN)));\n-            params.remove(DOMAIN);\n-        }\n-        if (params.containsKey(TYPE)) {\n-            switch (params.getFirst(TYPE)) {\n-                case \"PERSONAL\":\n-                    query.typeIn(WorkbasketType.PERSONAL);\n-                    break;\n-                case \"GROUP\":\n-                    query.typeIn(WorkbasketType.GROUP);\n-                    break;\n-                case \"CLEARANCE\":\n-                    query.typeIn(WorkbasketType.CLEARANCE);\n-                    break;\n-                case \"TOPIC\":\n-                    query.typeIn(WorkbasketType.TOPIC);\n-                    break;\n-                default:\n-                    throw new InvalidArgumentException(\"Unknown Workbasket type '\" + params.getFirst(TYPE) + \"'\");\n-            }\n-            params.remove(TYPE);\n-        }\n-        if (params.containsKey(REQUIRED_PERMISSION)) {\n-            for (String authorization : Arrays.asList(params.getFirst(REQUIRED_PERMISSION).split(\",\"))) {\n-                switch (authorization.trim()) {\n-                    case \"READ\":\n-                        query.callerHasPermission(WorkbasketPermission.READ);\n-                        break;\n-                    case \"OPEN\":\n-                        query.callerHasPermission(WorkbasketPermission.OPEN);\n-                        break;\n-                    case \"APPEND\":\n-                        query.callerHasPermission(WorkbasketPermission.APPEND);\n-                        break;\n-                    case \"TRANSFER\":\n-                        query.callerHasPermission(WorkbasketPermission.TRANSFER);\n-                        break;\n-                    case \"DISTRIBUTE\":\n-                        query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n-                        break;\n-                    case \"CUSTOM_1\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n-                        break;\n-                    case \"CUSTOM_2\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n-                        break;\n-                    case \"CUSTOM_3\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n-                        break;\n-                    case \"CUSTOM_4\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n-                        break;\n-                    case \"CUSTOM_5\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n-                        break;\n-                    case \"CUSTOM_6\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n-                        break;\n-                    case \"CUSTOM_7\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n-                        break;\n-                    case \"CUSTOM_8\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n-                        break;\n-                    case \"CUSTOM_9\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n-                        break;\n-                    case \"CUSTOM_10\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n-                        break;\n-                    case \"CUSTOM_11\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n-                        break;\n-                    case \"CUSTOM_12\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n-                        break;\n-                    default:\n-                        throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n-                }\n-            }\n-            params.remove(REQUIRED_PERMISSION);\n-        }\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n+    if (params.containsKey(NAME)) {\n+      String[] names = extractCommaSeparatedFields(params.get(NAME));\n+      query.nameIn(names);\n+      params.remove(NAME);\n+    }\n+    if (params.containsKey(NAME_LIKE)) {\n+      query.nameLike(LIKE + params.get(NAME_LIKE).get(0) + LIKE);\n+      params.remove(NAME_LIKE);\n+    }\n+    if (params.containsKey(KEY)) {\n+      String[] names = extractCommaSeparatedFields(params.get(KEY));\n+      query.keyIn(names);\n+      params.remove(KEY);\n+    }\n+    if (params.containsKey(KEY_LIKE)) {\n+      query.keyLike(LIKE + params.get(KEY_LIKE).get(0) + LIKE);\n+      params.remove(KEY_LIKE);\n+    }\n+    if (params.containsKey(OWNER)) {\n+      String[] names = extractCommaSeparatedFields(params.get(OWNER));\n+      query.ownerIn(names);\n+      params.remove(OWNER);\n+    }\n+    if (params.containsKey(OWNER_LIKE)) {\n+      query.ownerLike(LIKE + params.get(OWNER_LIKE).get(0) + LIKE);\n+      params.remove(OWNER_LIKE);\n+    }\n+    if (params.containsKey(DESCRIPTION_LIKE)) {\n+      query.descriptionLike(LIKE + params.get(DESCRIPTION_LIKE).get(0) + LIKE);\n+      params.remove(DESCRIPTION_LIKE);\n+    }\n+    if (params.containsKey(DOMAIN)) {\n+      query.domainIn(extractCommaSeparatedFields(params.get(DOMAIN)));\n+      params.remove(DOMAIN);\n+    }\n+    if (params.containsKey(TYPE)) {\n+      switch (params.getFirst(TYPE)) {\n+        case \"PERSONAL\":\n+          query.typeIn(WorkbasketType.PERSONAL);\n+          break;\n+        case \"GROUP\":\n+          query.typeIn(WorkbasketType.GROUP);\n+          break;\n+        case \"CLEARANCE\":\n+          query.typeIn(WorkbasketType.CLEARANCE);\n+          break;\n+        case \"TOPIC\":\n+          query.typeIn(WorkbasketType.TOPIC);\n+          break;\n+        default:\n+          throw new InvalidArgumentException(\n+              \"Unknown Workbasket type '\" + params.getFirst(TYPE) + \"'\");\n+      }\n+      params.remove(TYPE);\n+    }\n+    if (params.containsKey(REQUIRED_PERMISSION)) {\n+      for (String authorization : Arrays.asList(params.getFirst(REQUIRED_PERMISSION).split(\",\"))) {\n+        switch (authorization.trim()) {\n+          case \"READ\":\n+            query.callerHasPermission(WorkbasketPermission.READ);\n+            break;\n+          case \"OPEN\":\n+            query.callerHasPermission(WorkbasketPermission.OPEN);\n+            break;\n+          case \"APPEND\":\n+            query.callerHasPermission(WorkbasketPermission.APPEND);\n+            break;\n+          case \"TRANSFER\":\n+            query.callerHasPermission(WorkbasketPermission.TRANSFER);\n+            break;\n+          case \"DISTRIBUTE\":\n+            query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n+            break;\n+          case \"CUSTOM_1\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n+            break;\n+          case \"CUSTOM_2\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n+            break;\n+          case \"CUSTOM_3\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n+            break;\n+          case \"CUSTOM_4\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n+            break;\n+          case \"CUSTOM_5\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n+            break;\n+          case \"CUSTOM_6\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n+            break;\n+          case \"CUSTOM_7\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n+            break;\n+          case \"CUSTOM_8\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n+            break;\n+          case \"CUSTOM_9\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n+            break;\n+          case \"CUSTOM_10\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n+            break;\n+          case \"CUSTOM_11\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n+            break;\n+          case \"CUSTOM_12\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n+            break;\n+          default:\n+            throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n         }\n-\n-        return query;\n+      }\n+      params.remove(REQUIRED_PERMISSION);\n+    }\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n     }\n \n+    return query;\n+  }\n }\n", "next_change": {"commit": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 86d6b11e9..090eef61c 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -486,6 +514,5 @@ public class WorkbasketController extends AbstractPagingController {\n       LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n     }\n \n-    return query;\n   }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "e872c39340c4755c0ea85ddbdee17229b7494bf8", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311 seperated rest service"}, {"oid": "eaf15fd19c0b34abc699c6feedb1a216eeaade45", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311 fixed checkstyle"}, {"oid": "798e160669500dabdd3486c788774dea5592d271", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311 refactoring"}, {"oid": "43a226f26d53d3e7ec1842b4de28c2d0ab1e6b37", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311: replaced RuntimeExceptions with more precise exceptions"}, {"oid": "d9bb89248b62e3724f5f56d6ab679af41a5f8aa7", "committedDate": "2018-03-01 13:31:27 +0100", "message": "TSK-327: Move Enums from impl to taskana package"}, {"oid": "bab3d9ff5ce3e2cf981a47bb5754e287e187416b", "committedDate": "2018-03-05 16:16:32 +0100", "message": "TSK-359 setWorkbasketAccessItems doesn't save access items"}, {"oid": "c958e8f1d4d4733ea79f489ae6a7480fa9bf5604", "committedDate": "2018-03-13 10:25:02 +0100", "message": "TSK-373: added HAL format to workbasket list."}, {"oid": "4c8b29bcec1c0b57536d63db31308526aeb8296a", "committedDate": "2018-03-13 10:25:02 +0100", "message": "TSK-373: list resources according to HAL format."}, {"oid": "3498df039ab4780c675b6635f3510255f13f2908", "committedDate": "2018-03-13 11:09:08 +0100", "message": "TSK-377 provide meaningful response for duplicate key exception"}, {"oid": "e581c8051b05ddbe065ae58d4f4effdf1b3525aa", "committedDate": "2018-03-14 08:15:28 +0100", "message": "TSK-378: PUT operations return updated entities and removed not required operations."}, {"oid": "aef0e987e9831452efdbc0a739a0670a89350490", "committedDate": "2018-03-15 10:06:43 +0100", "message": "TSK-385:"}, {"oid": "5de0cd5e09fd3599254ec441b0ae72b91b6db423", "committedDate": "2018-03-15 17:08:22 +0100", "message": "TSK-382 add errorhandling to controllers"}, {"oid": "2c62de91d79b6118fc999fdc714cc5ad5b738863", "committedDate": "2018-03-20 09:44:50 +0100", "message": "TSK-378: Add pagination to WorkbasketController."}, {"oid": "15dee0c2691fe78dd7cb9912da847aeacee906b1", "committedDate": "2018-03-20 09:44:50 +0100", "message": "TSK-378: introduced REST integration tests on WorkbasketController."}, {"oid": "4765fc242ac1934ac0e681a691e10a7afd055059", "committedDate": "2018-03-20 09:44:50 +0100", "message": "TSK-217: pagination support for WorkbasketController and first page to be number 1."}, {"oid": "9803de0502e11521b2c5d0d8816ccf8551c9ccf1", "committedDate": "2018-03-23 10:19:16 +0100", "message": "TSK-398: domain is checked for existance during workbasket creation."}, {"oid": "106df46a69a9fbebad2795ad53474f8cf91944c1", "committedDate": "2018-03-28 17:53:45 +0200", "message": "TSK-406: Added pagination for TaskController."}, {"oid": "a311a6030189d8b07e66fe4a6640b8a0329de9cb", "committedDate": "2018-04-02 08:32:29 +0200", "message": "TSK-426"}, {"oid": "dc8b0dbc54b4a715cea84d8644da78ebb6778314", "committedDate": "2018-04-18 12:30:58 +0200", "message": "TSK-421: invalid parameter lead to error message."}, {"oid": "ccf6f133ee4b9a171fe39da9bbeb409c2b34db3e", "committedDate": "2018-04-18 21:56:13 +0200", "message": "TSK-432 Domain switch and filtering for the application"}, {"oid": "87f44bd026132e2c5df92e14d13e5e5ee7f112b7", "committedDate": "2018-04-27 11:50:19 +0200", "message": "TSK-469: added endpoint to delete workbasket as distribution target."}, {"oid": "ec33a7a1ffe1c7353996c42a3c479f2b850ca54b", "committedDate": "2018-05-08 08:35:09 +0200", "message": "TSK-468 Add remove distribution target button and endpoint."}, {"oid": "30f72604c96b1312af763aa9d0bbfb38f875ec0a", "committedDate": "2018-05-14 08:29:39 +0200", "message": "TSK-482"}, {"oid": "712d8b435ba97b80ab723509e6fc1a3e913f7313", "committedDate": "2018-06-04 17:04:48 +0200", "message": "TSK-538 Bug order by description issue is now fixed."}, {"oid": "3f8dc3cf87cb36dd0eb10a0a43fac3b2d5995711", "committedDate": "2018-09-11 11:06:16 +0200", "message": "TSK-694 - Show list of all access items valid for a user (REST)"}, {"oid": "ef703b4a4025548faac4905ba488ae5777e791c0", "committedDate": "2018-09-11 11:06:16 +0200", "message": "TSK-694: refactored WorkbasketAccessItemQuery + Extended"}, {"oid": "66e25b4bd54adc2c71ca47f67a3bd9db8b044d08", "committedDate": "2018-09-11 13:09:40 +0200", "message": "TSK-682: redesigned task details and added custom Attributes"}, {"oid": "f74a70e0d5b87ed203622913ff9cb07ba0ad211d", "committedDate": "2018-10-09 10:38:40 +0200", "message": "TSK-680 - Mark workbasket for deletion"}, {"oid": "55e8135cc8a766a0869611f067490bec98a51d7c", "committedDate": "2018-10-17 10:14:27 +0200", "message": "TSK-733 - Modify response deleteWorkbasket"}, {"oid": "577ccaa648f52115c876706282d8434fe023f885", "committedDate": "2018-12-19 10:58:53 +0100", "message": "TSK-755 - Controller to get the simple history events"}, {"oid": "24a700b81dd383fd606785af81f37d2670bb84fe", "committedDate": "2019-01-22 13:22:01 +0100", "message": "TSK-769 - Improve the logger on both library and rest"}, {"oid": "8789dd5bf53e7f3712deb0fb85b68829e78724aa", "committedDate": "2019-02-01 13:50:43 +0100", "message": "TSK-775\t adapt code formatting to checkstyle template"}, {"oid": "cbc2ff16ac237bb923dbef4574b532bb20d90dcc", "committedDate": "2019-03-28 16:02:03 +0100", "message": "task/828: Unify and reduce the response and logger code in the controllers"}, {"oid": "aea64975dba98ebe04361ba7230f6bf186f2bcd8", "committedDate": "2019-05-07 08:24:49 +0200", "message": "feature/810 Add querying by planned date in monitor screen"}, {"oid": "aebd87b935fa739131d97336e5f3b6f3c6a99c5f", "committedDate": "2019-06-04 15:36:26 +0200", "message": "TSK-850: rebase cleanup"}, {"oid": "352d0d67cd3480f62eca33c4e5b3014c26c63394", "committedDate": "2019-09-26 10:38:29 +0200", "message": "TSK-881: Refactored REST-Api"}, {"oid": "f68e730a72cfba413fc2102ef84ac513ed194cee", "committedDate": "2019-10-04 22:12:52 +0200", "message": "TSK-896: Removed _embedded from History"}, {"oid": "f848bf4f4ecb62ca72b330bee2e1e47c9e53a829", "committedDate": "2019-11-30 12:21:18 +0100", "message": "TSK-947: Extract Url mappings"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "f06f87f41e08aea691512d53fe1087bd12e892b8", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Replace WorkbasketAccessItemListResource with equivalent PaginatedListResource"}, {"oid": "6a6dcb9c1e3984670c644f89c569eba3d20dcf3d", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Standardise paginated List behaviour and sub classes"}, {"oid": "fae9d1fb9bdec9a1ea1499e04575738044c03235", "committedDate": "2020-01-23 13:00:04 +0100", "message": "TSK-1029: Fix deletion of workbasket as business admin not possible"}, {"oid": "9b61abda37480fa9ba589c54f15bf6c0403a8184", "committedDate": "2020-01-28 12:27:37 +0100", "message": "TSK-1038: added WAIAlreadyExistsException to missing operations with access Items"}, {"oid": "3b13b9a95e4d7d1cf172f22fa0f2679ff1c5f79b", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 after initial refactoring"}, {"oid": "442385482236ad0c25830becbadddf30f6e7bf2d", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 fix dependent projects"}, {"oid": "e308578ced577706e1f6994473e0e6252f647b9e", "committedDate": "2020-02-06 17:26:05 +0100", "message": "TSK-991: refactored report structure to meet api -> internal agreement"}, {"oid": "dcc72d1781fffea923a9d4a2b0d568a1984f88bb", "committedDate": "2020-02-11 09:33:54 +0100", "message": "TSK-1088 optimistic locking on workbasket update"}, {"oid": "e6f8883e4911704f16404846fe4208ee3abb2adc", "committedDate": "2020-02-11 17:05:34 +0100", "message": "TSK-1031: removed unnecessary throws statements"}, {"oid": "007f268be599fda8b884e002b7b03bb260c7620f", "committedDate": "2020-02-11 17:05:34 +0100", "message": "TSK-1031: update Spring Boot to 2.2.4.RELEASE except Hateoas."}, {"oid": "fc812cb9ea2a94c50a4df6ca1d786e2a0306375d", "committedDate": "2020-02-13 09:25:08 +0100", "message": "TSK-1109 Make WorkbasketResource attributes private and convert tests to AssertJ"}, {"oid": "4c884819d5823f5bdede585a3ed347589c465c4d", "committedDate": "2020-02-13 14:20:17 +0100", "message": "TSK-1123: workbasketaccessitems now produce application/hal-json"}, {"oid": "5c7d38451ce7cbea2ad52d3b84be72d49c474c71", "committedDate": "2020-02-13 15:09:39 +0100", "message": "TSK-1094 introduce models package for */api and */internal"}, {"oid": "f64053ec4ecf4887deba1baf199a017e51ae42e0", "committedDate": "2020-02-13 16:12:39 +0100", "message": "TSK-1125: distributiontargets now produce application/hal-json"}, {"oid": "c9791b01b8b72b711025903276f2a1a30e3e85a2", "committedDate": "2020-03-19 09:53:54 +0100", "message": "TSK-1029: Proper distinction between delete and markForFeletion for workbaskets"}, {"oid": "a8e44dead343598b7266254616a7f8559ee941ba", "committedDate": "2020-04-23 09:49:16 +0200", "message": "TSK-1083: Updated HATEOAS from version 0.24.0 to version 1.0.4"}, {"oid": "75a340ccf32a72f2f45bdea73ace9ee3d33bf05c", "committedDate": "2020-05-11 14:48:36 +0200", "message": "TSK-1243: made rest url for workbasket distribution-targets consistent"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyNDcyOQ==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422624729", "body": "Please reformat", "bodyText": "Please reformat", "bodyHTML": "<p dir=\"auto\">Please reformat</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T10:34:55Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java", "diffHunk": "@@ -285,7 +296,8 @@\n \n   @PutMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n   @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<DistributionTargetListResource> setDistributionTargetsForWorkbasketId(\n+  @SuppressWarnings(\"checkstyle:LineLength\")", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 820e48f04..b48fc9c2e 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -296,8 +297,8 @@ public class WorkbasketController extends AbstractPagingController {\n \n   @PutMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n   @Transactional(rollbackFor = Exception.class)\n-  @SuppressWarnings(\"checkstyle:LineLength\")\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> setDistributionTargetsForWorkbasketId(\n+  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n+      setDistributionTargetsForWorkbasketId(\n       @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n       @RequestBody List<String> targetWorkbasketIds)\n       throws WorkbasketNotFoundException, NotAuthorizedException {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 820e48f04..090eef61c 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -296,8 +297,8 @@ public class WorkbasketController extends AbstractPagingController {\n \n   @PutMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n   @Transactional(rollbackFor = Exception.class)\n-  @SuppressWarnings(\"checkstyle:LineLength\")\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> setDistributionTargetsForWorkbasketId(\n+  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n+      setDistributionTargetsForWorkbasketId(\n       @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n       @RequestBody List<String> targetWorkbasketIds)\n       throws WorkbasketNotFoundException, NotAuthorizedException {\n", "next_change": {"commit": "e872c39340c4755c0ea85ddbdee17229b7494bf8", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 090eef61c..509fef84a 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -1,518 +1,418 @@\n package pro.taskana.rest;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.hateoas.MediaTypes;\n-import org.springframework.hateoas.PagedModel.PageMetadata;\n-import org.springframework.hateoas.config.EnableHypermediaSupport;\n-import org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.util.MultiValueMap;\n+import org.springframework.transaction.interceptor.TransactionInterceptor;\n import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.PutMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.RestController;\n \n-import pro.taskana.common.api.BaseQuery.SortDirection;\n-import pro.taskana.common.api.LoggerUtils;\n-import pro.taskana.common.api.exceptions.ConcurrencyException;\n-import pro.taskana.common.api.exceptions.DomainNotFoundException;\n-import pro.taskana.common.api.exceptions.InvalidArgumentException;\n-import pro.taskana.common.api.exceptions.NotAuthorizedException;\n-import pro.taskana.rest.resource.DistributionTargetRepresentationModelAssembler;\n-import pro.taskana.rest.resource.TaskanaPagedModel;\n-import pro.taskana.rest.resource.WorkbasketAccessItemRepresentationModel;\n-import pro.taskana.rest.resource.WorkbasketAccessItemRepresentationModelAssembler;\n-import pro.taskana.rest.resource.WorkbasketRepresentationModel;\n-import pro.taskana.rest.resource.WorkbasketRepresentationModelAssembler;\n-import pro.taskana.rest.resource.WorkbasketSummaryRepresentationModel;\n-import pro.taskana.rest.resource.WorkbasketSummaryRepresentationModelAssembler;\n-import pro.taskana.workbasket.api.WorkbasketPermission;\n-import pro.taskana.workbasket.api.WorkbasketQuery;\n-import pro.taskana.workbasket.api.WorkbasketService;\n-import pro.taskana.workbasket.api.WorkbasketType;\n-import pro.taskana.workbasket.api.exceptions.InvalidWorkbasketException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketAccessItemAlreadyExistException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketAlreadyExistException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketInUseException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketNotFoundException;\n-import pro.taskana.workbasket.api.models.Workbasket;\n-import pro.taskana.workbasket.api.models.WorkbasketAccessItem;\n-import pro.taskana.workbasket.api.models.WorkbasketSummary;\n+import pro.taskana.BaseQuery;\n+import pro.taskana.Workbasket;\n+import pro.taskana.WorkbasketAccessItem;\n+import pro.taskana.WorkbasketPermission;\n+import pro.taskana.WorkbasketQuery;\n+import pro.taskana.WorkbasketService;\n+import pro.taskana.WorkbasketSummary;\n+import pro.taskana.exceptions.InvalidArgumentException;\n+import pro.taskana.exceptions.InvalidWorkbasketException;\n+import pro.taskana.exceptions.NotAuthorizedException;\n+import pro.taskana.exceptions.WorkbasketInUseException;\n+import pro.taskana.exceptions.WorkbasketNotFoundException;\n+import pro.taskana.impl.WorkbasketType;\n+import pro.taskana.rest.resource.WorkbasketAccessItemResource;\n+import pro.taskana.rest.resource.WorkbasketResource;\n+import pro.taskana.rest.resource.WorkbasketSummaryResource;\n+import pro.taskana.rest.resource.mapper.WorkbasketAccessItemMapper;\n+import pro.taskana.rest.resource.mapper.WorkbasketMapper;\n+import pro.taskana.rest.resource.mapper.WorkbasketSummaryMapper;\n \n-/** Controller for all {@link Workbasket} related endpoints. */\n @RestController\n-@EnableHypermediaSupport(type = HypermediaType.HAL)\n-public class WorkbasketController extends AbstractPagingController {\n-\n-  private static final Logger LOGGER = LoggerFactory.getLogger(WorkbasketController.class);\n-\n-  private static final String LIKE = \"%\";\n-  private static final String NAME = \"name\";\n-  private static final String NAME_LIKE = \"name-like\";\n-  private static final String KEY = \"key\";\n-  private static final String KEY_LIKE = \"key-like\";\n-  private static final String OWNER = \"owner\";\n-  private static final String OWNER_LIKE = \"owner-like\";\n-  private static final String DESCRIPTION_LIKE = \"description-like\";\n-  private static final String DOMAIN = \"domain\";\n-  private static final String REQUIRED_PERMISSION = \"required-permission\";\n-  private static final String TYPE = \"type\";\n-  private static final String DESCRIPTION = \"description\";\n-\n-  private static final String SORT_BY = \"sort-by\";\n-  private static final String SORT_DIRECTION = \"order\";\n-\n-  private final WorkbasketService workbasketService;\n-\n-  private final WorkbasketRepresentationModelAssembler workbasketRepresentationModelAssembler;\n-\n-  private final WorkbasketSummaryRepresentationModelAssembler\n-      workbasketSummaryRepresentationModelAssembler;\n-\n-  private final DistributionTargetRepresentationModelAssembler\n-      distributionTargetRepresentationModelAssembler;\n-\n-  private final WorkbasketAccessItemRepresentationModelAssembler\n-      workbasketAccessItemRepresentationModelAssembler;\n-\n-  WorkbasketController(\n-      WorkbasketService workbasketService,\n-      WorkbasketRepresentationModelAssembler workbasketRepresentationModelAssembler,\n-      WorkbasketSummaryRepresentationModelAssembler workbasketSummaryRepresentationModelAssembler,\n-      DistributionTargetRepresentationModelAssembler distributionTargetRepresentationModelAssembler,\n-      WorkbasketAccessItemRepresentationModelAssembler\n-          workbasketAccessItemRepresentationModelAssembler) {\n-    this.workbasketService = workbasketService;\n-    this.workbasketRepresentationModelAssembler = workbasketRepresentationModelAssembler;\n-    this.workbasketSummaryRepresentationModelAssembler =\n-        workbasketSummaryRepresentationModelAssembler;\n-    this.distributionTargetRepresentationModelAssembler =\n-        distributionTargetRepresentationModelAssembler;\n-    this.workbasketAccessItemRepresentationModelAssembler =\n-        workbasketAccessItemRepresentationModelAssembler;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> getWorkbaskets(\n-      @RequestParam MultiValueMap<String, String> params) throws InvalidArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to getWorkbaskets(params= {})\", params);\n-    }\n-\n-    WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n-    query = applySortingParams(query, params);\n-    applyFilterParams(query, params);\n-\n-    PageMetadata pageMetadata = getPageMetadata(params, query);\n-    List<WorkbasketSummary> workbasketSummaries = getQueryList(query, pageMetadata);\n-    TaskanaPagedModel<WorkbasketSummaryRepresentationModel> pagedModels =\n-        workbasketSummaryRepresentationModelAssembler.toPageModel(\n-            workbasketSummaries, pageMetadata);\n-\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        ResponseEntity.ok(pagedModels);\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getWorkbaskets(), returning {}\", response);\n+@RequestMapping(path = \"/v1/workbaskets\", produces = {MediaType.APPLICATION_JSON_VALUE})\n+public class WorkbasketController {\n+\n+    private static final String LIKE = \"%\";\n+    private static final String NAME = \"name\";\n+    private static final String KEY = \"key\";\n+    private static final String DESCRIPTION = \"description\";\n+    private static final String OWNER = \"owner\";\n+    private static final String TYPE = \"type\";\n+    private static final String DESC = \"desc\";\n+\n+    @Autowired\n+    private WorkbasketService workbasketService;\n+\n+    @Autowired\n+    private WorkbasketSummaryMapper workbasketSummaryMapper;\n+\n+    @Autowired\n+    private WorkbasketMapper workbasketMapper;\n+\n+    @Autowired\n+    private WorkbasketAccessItemMapper workbasketAccessItemMapper;\n+\n+    @GetMapping\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<List<WorkbasketSummaryResource>> getWorkbaskets(\n+        @RequestParam(value = \"sortBy\", defaultValue = \"name\", required = false) String sortBy,\n+        @RequestParam(value = \"order\", defaultValue = \"asc\", required = false) String order,\n+        @RequestParam(value = \"name\", required = false) String name,\n+        @RequestParam(value = \"nameLike\", required = false) String nameLike,\n+        @RequestParam(value = \"key\", required = false) String key,\n+        @RequestParam(value = \"keyLike\", required = false) String keyLike,\n+        @RequestParam(value = \"descLike\", required = false) String descLike,\n+        @RequestParam(value = \"owner\", required = false) String owner,\n+        @RequestParam(value = \"ownerLike\", required = false) String ownerLike,\n+        @RequestParam(value = \"type\", required = false) String type,\n+        @RequestParam(value = \"requiredPermission\", required = false) String requiredPermission) {\n+        ResponseEntity<List<WorkbasketSummaryResource>> result;\n+        List<WorkbasketSummary> workbasketsSummary;\n+        WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n+        addSortingToQuery(query, sortBy, order);\n+        addAttributeFilter(query, name, nameLike, key, keyLike, descLike, owner, ownerLike, type);\n+        addAuthorizationFilter(query, requiredPermission);\n+        workbasketsSummary = query.list();\n+        result = new ResponseEntity<>(workbasketsSummary.stream()\n+            .map(workbasket -> workbasketSummaryMapper.toResource(workbasket))\n+            .collect(Collectors.toList()), HttpStatus.OK);\n+        return result;\n     }\n \n-    return response;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET_ID, produces = MediaTypes.HAL_JSON_VALUE)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<WorkbasketRepresentationModel> getWorkbasket(\n-      @PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-    LOGGER.debug(\"Entry to getWorkbasket(workbasketId= {})\", workbasketId);\n-    ResponseEntity<WorkbasketRepresentationModel> result;\n-    Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n-    result = ResponseEntity.ok(workbasketRepresentationModelAssembler.toModel(workbasket));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getWorkbasket(), returning {}\", result);\n-    }\n-\n-    return result;\n-  }\n-\n-  @DeleteMapping(path = Mapping.URL_WORKBASKET_ID)\n-  @Transactional(rollbackFor = Exception.class, noRollbackFor = WorkbasketNotFoundException.class)\n-  public ResponseEntity<?> deleteWorkbasket(\n-      @PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException,\n-          WorkbasketInUseException {\n-    LOGGER.debug(\"Entry to markWorkbasketForDeletion(workbasketId= {})\", workbasketId);\n-    ResponseEntity<?> response;\n-\n-    boolean workbasketDeleted = workbasketService.deleteWorkbasket(workbasketId);\n-\n-    if (workbasketDeleted) {\n-      LOGGER.debug(\"Workbasket successfully deleted.\");\n-      response = ResponseEntity.noContent().build();\n-    } else {\n-      LOGGER.debug(\n-          \"Workbasket was only marked for deletion and will be physically deleted later on.\");\n-      response = ResponseEntity.accepted().build();\n+    @GetMapping(path = \"/{workbasketId}\")\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketResource> getWorkbasket(@PathVariable(value = \"workbasketId\") String workbasketId) {\n+        ResponseEntity<WorkbasketResource> result;\n+        try {\n+            Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n+            result = new ResponseEntity<>(workbasketMapper.toResource(workbasket), HttpStatus.OK);\n+        } catch (WorkbasketNotFoundException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.NOT_FOUND);\n+        } catch (NotAuthorizedException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n+        }\n+        return result;\n     }\n \n-    LOGGER.debug(\"Exit from markWorkbasketForDeletion(), returning {}\", response);\n-    return response;\n-  }\n-\n-  @PostMapping(path = Mapping.URL_WORKBASKET)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<WorkbasketRepresentationModel> createWorkbasket(\n-      @RequestBody WorkbasketRepresentationModel workbasketRepresentationModel)\n-      throws InvalidWorkbasketException, NotAuthorizedException, WorkbasketAlreadyExistException,\n-          DomainNotFoundException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\n-          \"Entry to createWorkbasket(workbasketResource= {})\", workbasketRepresentationModel);\n+    @DeleteMapping(path = \"/{workbasketId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<?> deleteWorkbasket(@PathVariable(value = \"workbasketId\") String workbasketId) {\n+        ResponseEntity<?> result = ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n+        try {\n+            workbasketService.deleteWorkbasket(workbasketId);\n+        } catch (WorkbasketNotFoundException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n+        } catch (NotAuthorizedException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n+        } catch (WorkbasketInUseException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.LOCKED).build();\n+        } catch (InvalidArgumentException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.PRECONDITION_FAILED).build();\n+        }\n+        return result;\n     }\n \n-    Workbasket workbasket =\n-        workbasketRepresentationModelAssembler.toEntityModel(workbasketRepresentationModel);\n-    workbasket = workbasketService.createWorkbasket(workbasket);\n-    ResponseEntity<WorkbasketRepresentationModel> response =\n-        ResponseEntity.status(HttpStatus.CREATED)\n-            .body(workbasketRepresentationModelAssembler.toModel(workbasket));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from createWorkbasket(), returning {}\", response);\n+    @PostMapping\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketResource> createWorkbasket(@RequestBody WorkbasketResource workbasketResource)\n+        throws NotAuthorizedException {\n+        try {\n+            Workbasket workbasket = workbasketMapper.toModel(workbasketResource);\n+            workbasket = workbasketService.createWorkbasket(workbasket);\n+            return new ResponseEntity<>(workbasketMapper.toResource(workbasket), HttpStatus.CREATED);\n+        } catch (InvalidWorkbasketException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);\n+        }\n     }\n \n-    return response;\n-  }\n-\n-  @PutMapping(path = Mapping.URL_WORKBASKET_ID)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<WorkbasketRepresentationModel> updateWorkbasket(\n-      @PathVariable(value = \"workbasketId\") String workbasketId,\n-      @RequestBody WorkbasketRepresentationModel workbasketRepresentationModel)\n-      throws InvalidWorkbasketException, WorkbasketNotFoundException, NotAuthorizedException,\n-          ConcurrencyException {\n-    LOGGER.debug(\"Entry to updateWorkbasket(workbasketId= {})\", workbasketId);\n-    ResponseEntity<WorkbasketRepresentationModel> result;\n-    if (workbasketId.equals(workbasketRepresentationModel.getWorkbasketId())) {\n-      Workbasket workbasket =\n-          workbasketRepresentationModelAssembler.toEntityModel(workbasketRepresentationModel);\n-      workbasket = workbasketService.updateWorkbasket(workbasket);\n-      result = ResponseEntity.ok(workbasketRepresentationModelAssembler.toModel(workbasket));\n-    } else {\n-      throw new InvalidWorkbasketException(\n-          \"Target-WB-ID('\"\n-              + workbasketId\n-              + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n-              + workbasketRepresentationModel.getWorkbasketId()\n-              + \"')\");\n-    }\n+    @PutMapping(path = \"/{workbasketId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketResource> updateWorkbasket(\n+        @PathVariable(value = \"workbasketId\") String workbasketId,\n+        @RequestBody WorkbasketResource workbasketResource) {\n+        ResponseEntity<WorkbasketResource> result;\n+        try {\n+            if (workbasketId.equals(workbasketResource.workbasketId)) {\n+                Workbasket workbasket = workbasketMapper.toModel(workbasketResource);\n+                workbasket = workbasketService.updateWorkbasket(workbasket);\n+                result = ResponseEntity.ok(workbasketMapper.toResource(workbasket));\n+            } else {\n+                throw new InvalidWorkbasketException(\n+                    \"Target-WB-ID('\" + workbasketId\n+                        + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n+                        + workbasketResource.getId() + \"')\");\n+            }\n+        } catch (InvalidWorkbasketException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.BAD_REQUEST);\n+        } catch (WorkbasketNotFoundException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.NOT_FOUND);\n+        } catch (NotAuthorizedException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n+        }\n \n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from updateWorkbasket(), returning {}\", result);\n+        return result;\n     }\n \n-    return result;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS, produces = MediaTypes.HAL_JSON_VALUE)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n-      getWorkbasketAccessItems(@PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws NotAuthorizedException, WorkbasketNotFoundException {\n-    LOGGER.debug(\"Entry to getWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-    ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> result;\n-\n-    List<WorkbasketAccessItem> accessItems =\n-        workbasketService.getWorkbasketAccessItems(workbasketId);\n-    result =\n-        ResponseEntity.ok(\n-            workbasketAccessItemRepresentationModelAssembler.toPageModel(\n-                workbasketId, accessItems, null));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getWorkbasketAccessItems(), returning {}\", result);\n+    @GetMapping(path = \"/{workbasketId}/workbasketAccessItems\")\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<List<WorkbasketAccessItemResource>> getWorkbasketAccessItems(\n+        @PathVariable(value = \"workbasketId\") String workbasketId) {\n+        List<WorkbasketAccessItem> wbAuthorizations = workbasketService.getWorkbasketAccessItems(workbasketId);\n+        List<WorkbasketAccessItemResource> result = new ArrayList<>();\n+        wbAuthorizations.stream()\n+            .forEach(accItem -> {\n+                try {\n+                    result.add(workbasketAccessItemMapper.toResource(accItem));\n+                } catch (NotAuthorizedException e) {\n+                    e.printStackTrace();\n+                }\n+            });\n+        return new ResponseEntity<>(result, HttpStatus.OK);\n     }\n \n-    return result;\n-  }\n-\n-  @PutMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n-      setWorkbasketAccessItems(\n-      @PathVariable(value = \"workbasketId\") String workbasketId,\n-      @RequestBody List<WorkbasketAccessItemRepresentationModel> workbasketAccessResourceItems)\n-      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException,\n-                 WorkbasketAccessItemAlreadyExistException {\n-    LOGGER.debug(\"Entry to setWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-    if (workbasketAccessResourceItems == null) {\n-      throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n+    @PostMapping(path = \"/workbasketAccessItems\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketAccessItemResource> createWorkbasketAccessItem(\n+        @RequestBody WorkbasketAccessItemResource workbasketAccessItemResource) throws NotAuthorizedException {\n+        try {\n+            WorkbasketAccessItem workbasketAccessItem = workbasketAccessItemMapper\n+                .toModel(workbasketAccessItemResource);\n+            workbasketAccessItem = workbasketService.createWorkbasketAccessItem(workbasketAccessItem);\n+            return new ResponseEntity<>(workbasketAccessItemMapper.toResource(workbasketAccessItem), HttpStatus.OK);\n+        } catch (InvalidArgumentException e) {\n+            return new ResponseEntity<>(HttpStatus.PRECONDITION_FAILED);\n+        }\n     }\n \n-    List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n-    workbasketAccessResourceItems.forEach(\n-        item -> wbAccessItems\n-                    .add(workbasketAccessItemRepresentationModelAssembler.toEntityModel(item)));\n-    workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n-    List<WorkbasketAccessItem> updatedWbAccessItems =\n-        workbasketService.getWorkbasketAccessItems(workbasketId);\n-\n-    ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> response =\n-        ResponseEntity.ok(\n-            workbasketAccessItemRepresentationModelAssembler.toPageModel(\n-                workbasketId, updatedWbAccessItems, null));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from setWorkbasketAccessItems(), returning {}\", response);\n+    @PutMapping(path = \"/workbasketAccessItems/{workbasketAccessItemId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketAccessItemResource> updateWorkbasketAccessItem(\n+        @PathVariable(value = \"authId\") String authId,\n+        @RequestBody WorkbasketAccessItemResource workbasketAccessItemResource) {\n+        try {\n+            WorkbasketAccessItem workbasketAccessItem = workbasketAccessItemMapper\n+                .toModel(workbasketAccessItemResource);\n+            workbasketAccessItem = workbasketService.updateWorkbasketAccessItem(workbasketAccessItem);\n+            return new ResponseEntity<>(workbasketAccessItemMapper.toResource(workbasketAccessItem), HttpStatus.OK);\n+        } catch (InvalidArgumentException | NotAuthorizedException e) {\n+            return new ResponseEntity<>(HttpStatus.PRECONDITION_FAILED);\n+        }\n     }\n \n-    return response;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION, produces = MediaTypes.HAL_JSON_VALUE)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n-      getDistributionTargets(@PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-\n-    LOGGER.debug(\"Entry to getDistributionTargets(workbasketId= {})\", workbasketId);\n-    List<WorkbasketSummary> distributionTargets =\n-        workbasketService.getDistributionTargets(workbasketId);\n-    TaskanaPagedModel<WorkbasketSummaryRepresentationModel> distributionTargetListResource =\n-        distributionTargetRepresentationModelAssembler.toPageModel(distributionTargets, null);\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> result =\n-        ResponseEntity.ok(distributionTargetListResource);\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getDistributionTargets(), returning {}\", result);\n+    @PutMapping(value = \"/{workbasketId}/workbasketAccessItems/\")\n+    public ResponseEntity<?> setWorkbasketAccessItems(@PathVariable(value = \"workbasketId\") String workbasketId,\n+        @RequestBody List<WorkbasketAccessItemResource> workbasketAccessResourceItems) {\n+        try {\n+            if (workbasketAccessResourceItems == null) {\n+                throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n+            }\n+            List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n+            workbasketAccessResourceItems.stream()\n+                .forEach(item -> wbAccessItems.add(workbasketAccessItemMapper.toModel(item)));\n+            workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n+            return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n+        } catch (InvalidArgumentException | NullPointerException e) {\n+            return new ResponseEntity<>(HttpStatus.PRECONDITION_FAILED);\n+        }\n     }\n \n-    return result;\n-  }\n-\n-  @PutMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n-      setDistributionTargetsForWorkbasketId(\n-      @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n-      @RequestBody List<String> targetWorkbasketIds)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\n-          \"Entry to getTasksStatusReport(workbasketId= {}, targetWorkbasketIds\u00b4= {})\",\n-          sourceWorkbasketId,\n-          LoggerUtils.listToString(targetWorkbasketIds));\n+    @DeleteMapping(path = \"/workbasketAccessItems/{workbasketAccessItemId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<?> deleteWorkbasketAccessItem(@PathVariable(value = \"authId\") String authId)\n+        throws NotAuthorizedException {\n+        workbasketService.deleteWorkbasketAccessItem(authId);\n+        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n     }\n \n-    workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n-\n-    List<WorkbasketSummary> distributionTargets =\n-        workbasketService.getDistributionTargets(sourceWorkbasketId);\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        ResponseEntity.ok(\n-            distributionTargetRepresentationModelAssembler.toPageModel(distributionTargets, null));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getTasksStatusReport(), returning {}\", response);\n+    @GetMapping(path = \"/{workbasketId}/distributiontargets\")\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<List<WorkbasketSummaryResource>> getDistributionTargetsForWorkbasketId(\n+        @PathVariable(value = \"workbasketId\") String workbasketId) {\n+\n+        ResponseEntity<List<WorkbasketSummaryResource>> result;\n+        List<WorkbasketSummary> distributionTargets;\n+        try {\n+            distributionTargets = workbasketService.getDistributionTargets(workbasketId);\n+            result = new ResponseEntity<>(distributionTargets.stream()\n+                .map(workbasket -> workbasketSummaryMapper.toResource(workbasket))\n+                .collect(Collectors.toList()), HttpStatus.OK);\n+        } catch (WorkbasketNotFoundException e) {\n+            result = new ResponseEntity<>(HttpStatus.NOT_FOUND);\n+        } catch (NotAuthorizedException e) {\n+            result = new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n+        }\n+        return result;\n     }\n \n-    return response;\n-  }\n-\n-  @DeleteMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n-      removeDistributionTargetForWorkbasketId(\n-      @PathVariable(value = \"workbasketId\") String targetWorkbasketId)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-    LOGGER.debug(\n-        \"Entry to removeDistributionTargetForWorkbasketId(workbasketId= {})\", targetWorkbasketId);\n-\n-    List<WorkbasketSummary> sourceWorkbaskets =\n-        workbasketService.getDistributionSources(targetWorkbasketId);\n-    for (WorkbasketSummary source : sourceWorkbaskets) {\n-      workbasketService.removeDistributionTarget(source.getId(), targetWorkbasketId);\n+    @PutMapping(path = \"/{workbasketId}/distributiontargets\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<?> setDistributionTargetsForWorkbasketId(\n+        @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n+        @RequestBody List<String> targetWorkbasketIds) {\n+        ResponseEntity<?> result;\n+        try {\n+            workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n+            result = ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n+        } catch (WorkbasketNotFoundException e) {\n+            result = ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n+        } catch (NotAuthorizedException e) {\n+            result = ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n+        }\n+        return result;\n     }\n \n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        ResponseEntity.noContent().build();\n-    LOGGER.debug(\"Exit from removeDistributionTargetForWorkbasketId(), returning {}\", response);\n-    return response;\n-  }\n+    private void addAuthorizationFilter(WorkbasketQuery query, String requiredPermission) {\n+        if (requiredPermission == null) {\n+            return;\n+        }\n \n-  private WorkbasketQuery applySortingParams(\n-      WorkbasketQuery query, MultiValueMap<String, String> params) throws IllegalArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to applySortingParams(query= {}, params={})\", query, params);\n+        for (String authorization : Arrays.asList(requiredPermission.split(\",\"))) {\n+            try {\n+                switch (authorization.trim()) {\n+                    case \"READ\":\n+                        query.callerHasPermission(WorkbasketPermission.READ);\n+                        break;\n+                    case \"OPEN\":\n+                        query.callerHasPermission(WorkbasketPermission.OPEN);\n+                        break;\n+                    case \"APPEND\":\n+                        query.callerHasPermission(WorkbasketPermission.APPEND);\n+                        break;\n+                    case \"TRANSFER\":\n+                        query.callerHasPermission(WorkbasketPermission.TRANSFER);\n+                        break;\n+                    case \"DISTRIBUTE\":\n+                        query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n+                        break;\n+                    case \"CUSTOM_1\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n+                        break;\n+                    case \"CUSTOM_2\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n+                        break;\n+                    case \"CUSTOM_3\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n+                        break;\n+                    case \"CUSTOM_4\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n+                        break;\n+                    case \"CUSTOM_5\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n+                        break;\n+                    case \"CUSTOM_6\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n+                        break;\n+                    case \"CUSTOM_7\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n+                        break;\n+                    case \"CUSTOM_8\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n+                        break;\n+                    case \"CUSTOM_9\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n+                        break;\n+                    case \"CUSTOM_10\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n+                        break;\n+                    case \"CUSTOM_11\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n+                        break;\n+                    case \"CUSTOM_12\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n+                        break;\n+                }\n+            } catch (InvalidArgumentException e) {\n+                e.printStackTrace();\n+            }\n+        }\n     }\n \n-    // sorting\n-    String sortBy = params.getFirst(SORT_BY);\n-    if (sortBy != null) {\n-      SortDirection sortDirection;\n-      if (params.getFirst(SORT_DIRECTION) != null\n-          && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n-        sortDirection = SortDirection.DESCENDING;\n-      } else {\n-        sortDirection = SortDirection.ASCENDING;\n-      }\n-      switch (sortBy) {\n-        case (NAME):\n-          query = query.orderByName(sortDirection);\n-          break;\n-        case (KEY):\n-          query = query.orderByKey(sortDirection);\n-          break;\n-        case (OWNER):\n-          query = query.orderByOwner(sortDirection);\n-          break;\n-        case (TYPE):\n-          query = query.orderByType(sortDirection);\n-          break;\n-        case (DESCRIPTION):\n-          query = query.orderByDescription(sortDirection);\n-          break;\n-        default:\n-          throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n-      }\n-    }\n-    params.remove(SORT_BY);\n-    params.remove(SORT_DIRECTION);\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n+    private void addSortingToQuery(WorkbasketQuery query, String sortBy, String order) {\n+        BaseQuery.SortDirection sortDirection = getSortDirection(order);\n+\n+        switch (sortBy) {\n+            case NAME:\n+                query.orderByName(sortDirection);\n+                break;\n+            case KEY:\n+                query.orderByKey(sortDirection);\n+                break;\n+            case DESCRIPTION:\n+                query.orderByDescription(sortDirection);\n+                break;\n+            case OWNER:\n+                query.orderByOwner(sortDirection);\n+                break;\n+            case TYPE:\n+                query.orderByType(sortDirection);\n+                break;\n+        }\n     }\n \n-    return query;\n-  }\n-\n-  private void applyFilterParams(\n-      WorkbasketQuery query, MultiValueMap<String, String> params) throws InvalidArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", query, params);\n+    private BaseQuery.SortDirection getSortDirection(String order) {\n+        if (order.equals(DESC)) {\n+            return BaseQuery.SortDirection.DESCENDING;\n+        }\n+        return BaseQuery.SortDirection.ASCENDING;\n     }\n \n-    if (params.containsKey(NAME)) {\n-      String[] names = extractCommaSeparatedFields(params.get(NAME));\n-      query.nameIn(names);\n-      params.remove(NAME);\n-    }\n-    if (params.containsKey(NAME_LIKE)) {\n-      query.nameLike(LIKE + params.get(NAME_LIKE).get(0) + LIKE);\n-      params.remove(NAME_LIKE);\n-    }\n-    if (params.containsKey(KEY)) {\n-      String[] names = extractCommaSeparatedFields(params.get(KEY));\n-      query.keyIn(names);\n-      params.remove(KEY);\n-    }\n-    if (params.containsKey(KEY_LIKE)) {\n-      query.keyLike(LIKE + params.get(KEY_LIKE).get(0) + LIKE);\n-      params.remove(KEY_LIKE);\n-    }\n-    if (params.containsKey(OWNER)) {\n-      String[] names = extractCommaSeparatedFields(params.get(OWNER));\n-      query.ownerIn(names);\n-      params.remove(OWNER);\n-    }\n-    if (params.containsKey(OWNER_LIKE)) {\n-      query.ownerLike(LIKE + params.get(OWNER_LIKE).get(0) + LIKE);\n-      params.remove(OWNER_LIKE);\n-    }\n-    if (params.containsKey(DESCRIPTION_LIKE)) {\n-      query.descriptionLike(LIKE + params.get(DESCRIPTION_LIKE).get(0) + LIKE);\n-      params.remove(DESCRIPTION_LIKE);\n-    }\n-    if (params.containsKey(DOMAIN)) {\n-      query.domainIn(extractCommaSeparatedFields(params.get(DOMAIN)));\n-      params.remove(DOMAIN);\n-    }\n-    if (params.containsKey(TYPE)) {\n-      switch (params.getFirst(TYPE)) {\n-        case \"PERSONAL\":\n-          query.typeIn(WorkbasketType.PERSONAL);\n-          break;\n-        case \"GROUP\":\n-          query.typeIn(WorkbasketType.GROUP);\n-          break;\n-        case \"CLEARANCE\":\n-          query.typeIn(WorkbasketType.CLEARANCE);\n-          break;\n-        case \"TOPIC\":\n-          query.typeIn(WorkbasketType.TOPIC);\n-          break;\n-        default:\n-          throw new InvalidArgumentException(\n-              \"Unknown Workbasket type '\" + params.getFirst(TYPE) + \"'\");\n-      }\n-      params.remove(TYPE);\n-    }\n-    if (params.containsKey(REQUIRED_PERMISSION)) {\n-      for (String authorization : params.getFirst(REQUIRED_PERMISSION).split(\",\")) {\n-        switch (authorization.trim()) {\n-          case \"READ\":\n-            query.callerHasPermission(WorkbasketPermission.READ);\n-            break;\n-          case \"OPEN\":\n-            query.callerHasPermission(WorkbasketPermission.OPEN);\n-            break;\n-          case \"APPEND\":\n-            query.callerHasPermission(WorkbasketPermission.APPEND);\n-            break;\n-          case \"TRANSFER\":\n-            query.callerHasPermission(WorkbasketPermission.TRANSFER);\n-            break;\n-          case \"DISTRIBUTE\":\n-            query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n-            break;\n-          case \"CUSTOM_1\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n-            break;\n-          case \"CUSTOM_2\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n-            break;\n-          case \"CUSTOM_3\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n-            break;\n-          case \"CUSTOM_4\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n-            break;\n-          case \"CUSTOM_5\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n-            break;\n-          case \"CUSTOM_6\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n-            break;\n-          case \"CUSTOM_7\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n-            break;\n-          case \"CUSTOM_8\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n-            break;\n-          case \"CUSTOM_9\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n-            break;\n-          case \"CUSTOM_10\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n-            break;\n-          case \"CUSTOM_11\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n-            break;\n-          case \"CUSTOM_12\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n-            break;\n-          default:\n-            throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n+    private void addAttributeFilter(WorkbasketQuery query,\n+        String name, String nameLike,\n+        String key, String keyLike,\n+        String descLike, String owner,\n+        String ownerLike, String type) {\n+        if (name != null)\n+            query.nameIn(name);\n+        if (nameLike != null)\n+            query.nameLike(LIKE + nameLike + LIKE);\n+        if (key != null)\n+            query.keyIn(key);\n+        if (keyLike != null)\n+            query.keyLike(LIKE + keyLike + LIKE);\n+        if (owner != null)\n+            query.ownerIn(owner);\n+        if (ownerLike != null)\n+            query.ownerLike(LIKE + ownerLike + LIKE);\n+        if (descLike != null)\n+            query.descriptionLike(LIKE + descLike + LIKE);\n+        if (type != null) {\n+            switch (type) {\n+                case \"PERSONAL\":\n+                    query.typeIn(WorkbasketType.PERSONAL);\n+                    break;\n+                case \"GROUP\":\n+                    query.typeIn(WorkbasketType.GROUP);\n+                    break;\n+                case \"CLEARANCE\":\n+                    query.typeIn(WorkbasketType.CLEARANCE);\n+                    break;\n+                case \"TOPIC\":\n+                    query.typeIn(WorkbasketType.TOPIC);\n+                    break;\n+            }\n         }\n-      }\n-      params.remove(REQUIRED_PERMISSION);\n-    }\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n     }\n-\n-  }\n }\n", "next_change": {"commit": "eaf15fd19c0b34abc699c6feedb1a216eeaade45", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 509fef84a..93f7f77be 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -412,6 +426,8 @@ public class WorkbasketController {\n                 case \"TOPIC\":\n                     query.typeIn(WorkbasketType.TOPIC);\n                     break;\n+                    default:\n+                        throw new RuntimeException(\"should never occur\");\n             }\n         }\n     }\n", "next_change": {"commit": "43a226f26d53d3e7ec1842b4de28c2d0ab1e6b37", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 93f7f77be..d31c828e4 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -426,8 +424,8 @@ public class WorkbasketController {\n                 case \"TOPIC\":\n                     query.typeIn(WorkbasketType.TOPIC);\n                     break;\n-                    default:\n-                        throw new RuntimeException(\"should never occur\");\n+                default:\n+                    throw new InvalidArgumentException(\"Unknown Workbaskettype '\" + type + \"'\");\n             }\n         }\n     }\n", "next_change": {"commit": "4765fc242ac1934ac0e681a691e10a7afd055059", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex d31c828e4..58f52582a 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -429,4 +386,19 @@ public class WorkbasketController {\n             }\n         }\n     }\n+\n+    private PageMetadata initPageMetadata(String pagesizeParam, String pageParam, long totalElements)\n+        throws InvalidArgumentException {\n+        long pagesize;\n+        long page;\n+        try {\n+            pagesize = Long.valueOf(pagesizeParam);\n+            page = Long.valueOf(pageParam);\n+        } catch (NumberFormatException e) {\n+            throw new InvalidArgumentException(\"page and pagesize must be a integer value.\");\n+        }\n+        PageMetadata pageMetadata = new PageMetadata(pagesize, page, totalElements, (totalElements / pagesize) + 1);\n+        return pageMetadata;\n+    }\n+\n }\n", "next_change": {"commit": "106df46a69a9fbebad2795ad53474f8cf91944c1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 58f52582a..990b5b64c 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -387,18 +388,4 @@ public class WorkbasketController {\n         }\n     }\n \n-    private PageMetadata initPageMetadata(String pagesizeParam, String pageParam, long totalElements)\n-        throws InvalidArgumentException {\n-        long pagesize;\n-        long page;\n-        try {\n-            pagesize = Long.valueOf(pagesizeParam);\n-            page = Long.valueOf(pageParam);\n-        } catch (NumberFormatException e) {\n-            throw new InvalidArgumentException(\"page and pagesize must be a integer value.\");\n-        }\n-        PageMetadata pageMetadata = new PageMetadata(pagesize, page, totalElements, (totalElements / pagesize) + 1);\n-        return pageMetadata;\n-    }\n-\n }\n", "next_change": {"commit": "dc8b0dbc54b4a715cea84d8644da78ebb6778314", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 990b5b64c..1ce35ed49 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -383,9 +320,71 @@ public class WorkbasketController extends AbstractPagingController {\n                     query.typeIn(WorkbasketType.TOPIC);\n                     break;\n                 default:\n-                    throw new InvalidArgumentException(\"Unknown Workbaskettype '\" + type + \"'\");\n+                    throw new InvalidArgumentException(\"Unknown Workbaskettype '\" + params.getFirst(TYPE) + \"'\");\n+            }\n+            params.remove(TYPE);\n+        }\n+        if (params.containsKey(REQUIRED_PERMISSION)) {\n+            for (String authorization : Arrays.asList(params.getFirst(REQUIRED_PERMISSION).split(\",\"))) {\n+                switch (authorization.trim()) {\n+                    case \"READ\":\n+                        query.callerHasPermission(WorkbasketPermission.READ);\n+                        break;\n+                    case \"OPEN\":\n+                        query.callerHasPermission(WorkbasketPermission.OPEN);\n+                        break;\n+                    case \"APPEND\":\n+                        query.callerHasPermission(WorkbasketPermission.APPEND);\n+                        break;\n+                    case \"TRANSFER\":\n+                        query.callerHasPermission(WorkbasketPermission.TRANSFER);\n+                        break;\n+                    case \"DISTRIBUTE\":\n+                        query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n+                        break;\n+                    case \"CUSTOM_1\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n+                        break;\n+                    case \"CUSTOM_2\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n+                        break;\n+                    case \"CUSTOM_3\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n+                        break;\n+                    case \"CUSTOM_4\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n+                        break;\n+                    case \"CUSTOM_5\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n+                        break;\n+                    case \"CUSTOM_6\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n+                        break;\n+                    case \"CUSTOM_7\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n+                        break;\n+                    case \"CUSTOM_8\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n+                        break;\n+                    case \"CUSTOM_9\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n+                        break;\n+                    case \"CUSTOM_10\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n+                        break;\n+                    case \"CUSTOM_11\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n+                        break;\n+                    case \"CUSTOM_12\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n+                        break;\n+                    default:\n+                        throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n+                }\n             }\n+            params.remove(REQUIRED_PERMISSION);\n         }\n+        return query;\n     }\n \n }\n", "next_change": {"commit": "24a700b81dd383fd606785af81f37d2670bb84fe", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 1ce35ed49..683864185 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -384,6 +476,10 @@ public class WorkbasketController extends AbstractPagingController {\n             }\n             params.remove(REQUIRED_PERMISSION);\n         }\n+        if(LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n+        }\n+\n         return query;\n     }\n \n", "next_change": {"commit": "8789dd5bf53e7f3712deb0fb85b68829e78724aa", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 683864185..bc1b82904 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -476,7 +476,7 @@ public class WorkbasketController extends AbstractPagingController {\n             }\n             params.remove(REQUIRED_PERMISSION);\n         }\n-        if(LOGGER.isDebugEnabled()) {\n+        if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n         }\n \n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex bc1b82904..86d6b11e9 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -43,444 +37,455 @@ import pro.taskana.exceptions.WorkbasketAlreadyExistException;\n import pro.taskana.exceptions.WorkbasketInUseException;\n import pro.taskana.exceptions.WorkbasketNotFoundException;\n import pro.taskana.impl.util.LoggerUtils;\n+import pro.taskana.rest.resource.DistributionTargetListResource;\n import pro.taskana.rest.resource.DistributionTargetResource;\n+import pro.taskana.rest.resource.DistributionTargetResourceAssembler;\n+import pro.taskana.rest.resource.PagedResources.PageMetadata;\n+import pro.taskana.rest.resource.WorkbasketAccessItemListResource;\n import pro.taskana.rest.resource.WorkbasketAccessItemResource;\n+import pro.taskana.rest.resource.WorkbasketAccessItemResourceAssembler;\n import pro.taskana.rest.resource.WorkbasketResource;\n-import pro.taskana.rest.resource.WorkbasketSummaryResource;\n-import pro.taskana.rest.resource.DistributionTargetListAssembler;\n-import pro.taskana.rest.resource.WorkbasketAccessItemAssembler;\n-import pro.taskana.rest.resource.WorkbasketAccessItemListAssembler;\n import pro.taskana.rest.resource.WorkbasketResourceAssembler;\n-import pro.taskana.rest.resource.WorkbasketSummaryResourcesAssembler;\n+import pro.taskana.rest.resource.WorkbasketSummaryListResource;\n+import pro.taskana.rest.resource.WorkbasketSummaryResourceAssembler;\n \n-/**\n- * Controller for all {@link Workbasket} related endpoints.\n- */\n+/** Controller for all {@link Workbasket} related endpoints. */\n @RestController\n @EnableHypermediaSupport(type = HypermediaType.HAL)\n-@RequestMapping(path = \"/v1/workbaskets\", produces = \"application/hal+json\")\n public class WorkbasketController extends AbstractPagingController {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(WorkbasketController.class);\n-\n-    private static final String LIKE = \"%\";\n-    private static final String NAME = \"name\";\n-    private static final String NAME_LIKE = \"name-like\";\n-    private static final String KEY = \"key\";\n-    private static final String KEY_LIKE = \"key-like\";\n-    private static final String OWNER = \"owner\";\n-    private static final String OWNER_LIKE = \"owner-like\";\n-    private static final String DESCRIPTION_LIKE = \"description-like\";\n-    private static final String DOMAIN = \"domain\";\n-    private static final String REQUIRED_PERMISSION = \"required-permission\";\n-    private static final String TYPE = \"type\";\n-    private static final String DESCRIPTION = \"description\";\n-\n-    private static final String SORT_BY = \"sort-by\";\n-    private static final String SORT_DIRECTION = \"order\";\n-\n-    private static final String PAGING_PAGE = \"page\";\n-    private static final String PAGING_PAGE_SIZE = \"page-size\";\n-\n-    @Autowired\n-    private WorkbasketService workbasketService;\n-\n-    @Autowired\n-    private TaskService taskService;\n-\n-    @Autowired\n-    private WorkbasketResourceAssembler workbasketResourceAssembler;\n-\n-    @Autowired\n-    private DistributionTargetListAssembler distributionTargetListAssembler;\n-\n-    @Autowired\n-    private WorkbasketAccessItemListAssembler accessItemListAssembler;\n-\n-    @Autowired\n-    private WorkbasketAccessItemAssembler workbasketAccessItemAssembler;\n-\n-    @GetMapping\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<PagedResources<WorkbasketSummaryResource>> getWorkbaskets(\n-        @RequestParam MultiValueMap<String, String> params) throws InvalidArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to getWorkbaskets(params= {})\", params);\n-        }\n \n-        WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n-        query = applySortingParams(query, params);\n-        query = applyFilterParams(query, params);\n-\n-        PageMetadata pageMetadata = null;\n-        List<WorkbasketSummary> workbasketSummaries = null;\n-        String page = params.getFirst(PAGING_PAGE);\n-        String pageSize = params.getFirst(PAGING_PAGE_SIZE);\n-        params.remove(PAGING_PAGE);\n-        params.remove(PAGING_PAGE_SIZE);\n-        validateNoInvalidParameterIsLeft(params);\n-        if (page != null && pageSize != null) {\n-            // paging\n-            long totalElements = query.count();\n-            pageMetadata = initPageMetadata(pageSize, page, totalElements);\n-            workbasketSummaries = query.listPage((int) pageMetadata.getNumber(),\n-                (int) pageMetadata.getSize());\n-        } else if (page == null && pageSize == null) {\n-            // not paging\n-            workbasketSummaries = query.list();\n-        } else {\n-            throw new InvalidArgumentException(\"Paging information is incomplete.\");\n-        }\n+  private static final Logger LOGGER = LoggerFactory.getLogger(WorkbasketController.class);\n+\n+  private static final String LIKE = \"%\";\n+  private static final String NAME = \"name\";\n+  private static final String NAME_LIKE = \"name-like\";\n+  private static final String KEY = \"key\";\n+  private static final String KEY_LIKE = \"key-like\";\n+  private static final String OWNER = \"owner\";\n+  private static final String OWNER_LIKE = \"owner-like\";\n+  private static final String DESCRIPTION_LIKE = \"description-like\";\n+  private static final String DOMAIN = \"domain\";\n+  private static final String REQUIRED_PERMISSION = \"required-permission\";\n+  private static final String TYPE = \"type\";\n+  private static final String DESCRIPTION = \"description\";\n+\n+  private static final String SORT_BY = \"sort-by\";\n+  private static final String SORT_DIRECTION = \"order\";\n+\n+  private WorkbasketService workbasketService;\n+\n+  private WorkbasketResourceAssembler workbasketResourceAssembler;\n+\n+  private WorkbasketSummaryResourceAssembler workbasketSummaryResourceAssembler;\n+\n+  private DistributionTargetResourceAssembler distributionTargetResourceAssembler;\n+\n+  private WorkbasketAccessItemResourceAssembler workbasketAccessItemResourceAssembler;\n+\n+  WorkbasketController(\n+      WorkbasketService workbasketService,\n+      WorkbasketResourceAssembler workbasketResourceAssembler,\n+      WorkbasketSummaryResourceAssembler workbasketSummaryResourceAssembler,\n+      DistributionTargetResourceAssembler distributionTargetResourceAssembler,\n+      WorkbasketAccessItemResourceAssembler workbasketAccessItemResourceAssembler) {\n+    this.workbasketService = workbasketService;\n+    this.workbasketResourceAssembler = workbasketResourceAssembler;\n+    this.workbasketSummaryResourceAssembler = workbasketSummaryResourceAssembler;\n+    this.distributionTargetResourceAssembler = distributionTargetResourceAssembler;\n+    this.workbasketAccessItemResourceAssembler = workbasketAccessItemResourceAssembler;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketSummaryListResource> getWorkbaskets(\n+      @RequestParam MultiValueMap<String, String> params) throws InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to getWorkbaskets(params= {})\", params);\n+    }\n \n-        WorkbasketSummaryResourcesAssembler assembler = new WorkbasketSummaryResourcesAssembler();\n-        PagedResources<WorkbasketSummaryResource> pagedResources = assembler.toResources(workbasketSummaries,\n-            pageMetadata);\n+    WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n+    query = applySortingParams(query, params);\n+    query = applyFilterParams(query, params);\n \n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getWorkbaskets(), returning {}\", new ResponseEntity<>(pagedResources, HttpStatus.OK));\n-        }\n+    PageMetadata pageMetadata = getPageMetadata(params, query);\n+    List<WorkbasketSummary> workbasketSummaries = getQueryList(query, pageMetadata);\n+    WorkbasketSummaryListResource pagedResources =\n+        workbasketSummaryResourceAssembler.toResources(workbasketSummaries, pageMetadata);\n \n-        return new ResponseEntity<>(pagedResources, HttpStatus.OK);\n+    ResponseEntity<WorkbasketSummaryListResource> response = ResponseEntity.ok(pagedResources);\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getWorkbaskets(), returning {}\", response);\n     }\n \n-    @GetMapping(path = \"/{workbasketId}\")\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<WorkbasketResource> getWorkbasket(@PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to getWorkbasket(workbasketId= {})\", workbasketId);\n-        ResponseEntity<WorkbasketResource> result;\n-        Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n-        result = new ResponseEntity<>(workbasketResourceAssembler.toResource(workbasket), HttpStatus.OK);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getWorkbasket(), returning {}\", result);\n-        }\n-\n-        return result;\n+    return response;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET_ID)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketResource> getWorkbasket(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws WorkbasketNotFoundException, NotAuthorizedException {\n+    LOGGER.debug(\"Entry to getWorkbasket(workbasketId= {})\", workbasketId);\n+    ResponseEntity<WorkbasketResource> result;\n+    Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n+    result = ResponseEntity.ok(workbasketResourceAssembler.toResource(workbasket));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getWorkbasket(), returning {}\", result);\n     }\n \n-    @DeleteMapping(path = \"/{workbasketId}\")\n-    @Transactional(rollbackFor = Exception.class, noRollbackFor = WorkbasketNotFoundException.class)\n-    public ResponseEntity<?> markWorkbasketForDeletion(@PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws NotAuthorizedException, InvalidArgumentException,\n-        WorkbasketNotFoundException, WorkbasketInUseException {\n-        LOGGER.debug(\"Entry to markWorkbasketForDeletion(workbasketId= {})\", workbasketId);\n-        LOGGER.debug(\"Exit from markWorkbasketForDeletion(), returning {}\", new ResponseEntity<>(workbasketService.deleteWorkbasket(workbasketId), HttpStatus.ACCEPTED));\n-            return new ResponseEntity<>(workbasketService.deleteWorkbasket(workbasketId), HttpStatus.ACCEPTED);\n+    return result;\n+  }\n+\n+  @DeleteMapping(path = Mapping.URL_WORKBASKET_ID)\n+  @Transactional(rollbackFor = Exception.class, noRollbackFor = WorkbasketNotFoundException.class)\n+  public ResponseEntity<?> markWorkbasketForDeletion(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException,\n+          WorkbasketInUseException {\n+    LOGGER.debug(\"Entry to markWorkbasketForDeletion(workbasketId= {})\", workbasketId);\n+    ResponseEntity<?> response =\n+        ResponseEntity.accepted().body(workbasketService.deleteWorkbasket(workbasketId));\n+    LOGGER.debug(\"Exit from markWorkbasketForDeletion(), returning {}\", response);\n+    return response;\n+  }\n+\n+  @PostMapping(path = Mapping.URL_WORKBASKET)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketResource> createWorkbasket(\n+      @RequestBody WorkbasketResource workbasketResource)\n+      throws InvalidWorkbasketException, NotAuthorizedException, WorkbasketAlreadyExistException,\n+          WorkbasketNotFoundException, DomainNotFoundException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to createWorkbasket(workbasketResource= {})\", workbasketResource);\n     }\n \n-    @PostMapping\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<WorkbasketResource> createWorkbasket(@RequestBody WorkbasketResource workbasketResource)\n-        throws InvalidWorkbasketException, NotAuthorizedException, WorkbasketAlreadyExistException,\n-        WorkbasketNotFoundException, DomainNotFoundException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to createWorkbasket(workbasketResource= {})\", workbasketResource);\n-        }\n-\n-        Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n-        workbasket = workbasketService.createWorkbasket(workbasket);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from createWorkbasket(), returning {}\", new ResponseEntity<>(workbasketResourceAssembler.toResource(workbasket), HttpStatus.CREATED));\n-        }\n-\n-        return new ResponseEntity<>(workbasketResourceAssembler.toResource(workbasket), HttpStatus.CREATED);\n+    Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n+    workbasket = workbasketService.createWorkbasket(workbasket);\n+    ResponseEntity<WorkbasketResource> response =\n+        ResponseEntity.status(HttpStatus.CREATED)\n+            .body(workbasketResourceAssembler.toResource(workbasket));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from createWorkbasket(), returning {}\", response);\n     }\n \n-    @PutMapping(path = \"/{workbasketId}\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<WorkbasketResource> updateWorkbasket(\n-        @PathVariable(value = \"workbasketId\") String workbasketId,\n-        @RequestBody WorkbasketResource workbasketResource)\n-        throws InvalidWorkbasketException, WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to updateWorkbasket(workbasketId= {})\", workbasketId);\n-        ResponseEntity<WorkbasketResource> result;\n-        if (workbasketId.equals(workbasketResource.workbasketId)) {\n-            Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n-            workbasket = workbasketService.updateWorkbasket(workbasket);\n-            result = ResponseEntity.ok(workbasketResourceAssembler.toResource(workbasket));\n-        } else {\n-            throw new InvalidWorkbasketException(\n-                \"Target-WB-ID('\" + workbasketId\n-                    + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n-                    + workbasketResource.getId() + \"')\");\n-        }\n-\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from updateWorkbasket(), returning {}\", result);\n-        }\n-\n-        return result;\n+    return response;\n+  }\n+\n+  @PutMapping(path = Mapping.URL_WORKBASKET_ID)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketResource> updateWorkbasket(\n+      @PathVariable(value = \"workbasketId\") String workbasketId,\n+      @RequestBody WorkbasketResource workbasketResource)\n+      throws InvalidWorkbasketException, WorkbasketNotFoundException, NotAuthorizedException {\n+    LOGGER.debug(\"Entry to updateWorkbasket(workbasketId= {})\", workbasketId);\n+    ResponseEntity<WorkbasketResource> result;\n+    if (workbasketId.equals(workbasketResource.workbasketId)) {\n+      Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n+      workbasket = workbasketService.updateWorkbasket(workbasket);\n+      result = ResponseEntity.ok(workbasketResourceAssembler.toResource(workbasket));\n+    } else {\n+      throw new InvalidWorkbasketException(\n+          \"Target-WB-ID('\"\n+              + workbasketId\n+              + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n+              + workbasketResource.getId()\n+              + \"')\");\n     }\n \n-    @GetMapping(path = \"/{workbasketId}/workbasketAccessItems\")\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<WorkbasketAccessItemResource>> getWorkbasketAccessItems(\n-        @PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws NotAuthorizedException, WorkbasketNotFoundException {\n-        LOGGER.debug(\"Entry to getWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-        ResponseEntity<Resources<WorkbasketAccessItemResource>> result;\n-\n-        List<WorkbasketAccessItem> accessItems = workbasketService.getWorkbasketAccessItems(workbasketId);\n-        Resources<WorkbasketAccessItemResource> accessItemListResource = accessItemListAssembler\n-            .toResource(workbasketId, accessItems);\n-        result = new ResponseEntity<>(accessItemListResource, HttpStatus.OK);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getWorkbasketAccessItems(), returning {}\", result);\n-        }\n-\n-        return result;\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from updateWorkbasket(), returning {}\", result);\n     }\n \n-    @PutMapping(value = \"/{workbasketId}/workbasketAccessItems\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<WorkbasketAccessItemResource>> setWorkbasketAccessItems(\n-        @PathVariable(value = \"workbasketId\") String workbasketId,\n-        @RequestBody List<WorkbasketAccessItemResource> workbasketAccessResourceItems)\n-        throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException {\n-        LOGGER.debug(\"Entry to setWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-        if (workbasketAccessResourceItems == null) {\n-            throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n-        }\n-\n-        List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n-        workbasketAccessResourceItems.forEach(item -> wbAccessItems.add(workbasketAccessItemAssembler.toModel(item)));\n-        workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n-\n-        List<WorkbasketAccessItem> updatedWbAccessItems = workbasketService.getWorkbasketAccessItems(workbasketId);\n-        Resources<WorkbasketAccessItemResource> accessItemListResource = accessItemListAssembler\n-            .toResource(workbasketId, updatedWbAccessItems);\n-\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from setWorkbasketAccessItems(), returning {}\", new ResponseEntity<>(accessItemListResource, HttpStatus.OK));\n-        }\n-\n-        return new ResponseEntity<>(accessItemListResource, HttpStatus.OK);\n+    return result;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketAccessItemListResource> getWorkbasketAccessItems(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws NotAuthorizedException, WorkbasketNotFoundException {\n+    LOGGER.debug(\"Entry to getWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n+    ResponseEntity<WorkbasketAccessItemListResource> result;\n+\n+    List<WorkbasketAccessItem> accessItems =\n+        workbasketService.getWorkbasketAccessItems(workbasketId);\n+    result =\n+        ResponseEntity.ok(\n+            workbasketAccessItemResourceAssembler.toResources(workbasketId, accessItems));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getWorkbasketAccessItems(), returning {}\", result);\n     }\n \n-    @GetMapping(path = \"/{workbasketId}/distribution-targets\")\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<DistributionTargetResource>> getDistributionTargets(\n-        @PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to getDistributionTargets(workbasketId= {})\", workbasketId);\n-        ResponseEntity<Resources<DistributionTargetResource>> result;\n-        List<WorkbasketSummary> distributionTargets = workbasketService.getDistributionTargets(workbasketId);\n-        Resources<DistributionTargetResource> distributionTargetListResource = distributionTargetListAssembler\n-            .toResource(workbasketId, distributionTargets);\n-        result = new ResponseEntity<>(distributionTargetListResource, HttpStatus.OK);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getDistributionTargets(), returning {}\", result);\n-        }\n+    return result;\n+  }\n+\n+  @PutMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketAccessItemListResource> setWorkbasketAccessItems(\n+      @PathVariable(value = \"workbasketId\") String workbasketId,\n+      @RequestBody List<WorkbasketAccessItemResource> workbasketAccessResourceItems)\n+      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException {\n+    LOGGER.debug(\"Entry to setWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n+    if (workbasketAccessResourceItems == null) {\n+      throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n+    }\n \n-        return result;\n+    List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n+    workbasketAccessResourceItems.forEach(\n+        item -> wbAccessItems.add(workbasketAccessItemResourceAssembler.toModel(item)));\n+    workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n+    List<WorkbasketAccessItem> updatedWbAccessItems =\n+        workbasketService.getWorkbasketAccessItems(workbasketId);\n+\n+    ResponseEntity<WorkbasketAccessItemListResource> response =\n+        ResponseEntity.ok(\n+            workbasketAccessItemResourceAssembler.toResources(workbasketId, updatedWbAccessItems));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from setWorkbasketAccessItems(), returning {}\", response);\n     }\n \n-    @PutMapping(path = \"/{workbasketId}/distribution-targets\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<DistributionTargetResource>> setDistributionTargetsForWorkbasketId(\n-        @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n-        @RequestBody List<String> targetWorkbasketIds) throws WorkbasketNotFoundException, NotAuthorizedException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to getTasksStatusReport(workbasketId= {}, targetWorkbasketIds\u00b4= {})\", sourceWorkbasketId,\n-                LoggerUtils.listToString(targetWorkbasketIds));\n-        }\n+    return response;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<DistributionTargetListResource> getDistributionTargets(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws WorkbasketNotFoundException, NotAuthorizedException {\n+\n+    LOGGER.debug(\"Entry to getDistributionTargets(workbasketId= {})\", workbasketId);\n+    List<WorkbasketSummary> distributionTargets =\n+        workbasketService.getDistributionTargets(workbasketId);\n+    DistributionTargetListResource distributionTargetListResource =\n+        distributionTargetResourceAssembler.toResources(workbasketId, distributionTargets);\n+    ResponseEntity<DistributionTargetListResource> result =\n+        ResponseEntity.ok(distributionTargetListResource);\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getDistributionTargets(), returning {}\", result);\n+    }\n \n-        workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n+    return result;\n+  }\n+\n+  @PutMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<DistributionTargetListResource> setDistributionTargetsForWorkbasketId(\n+      @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n+      @RequestBody List<String> targetWorkbasketIds)\n+      throws WorkbasketNotFoundException, NotAuthorizedException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\n+          \"Entry to getTasksStatusReport(workbasketId= {}, targetWorkbasketIds\u00b4= {})\",\n+          sourceWorkbasketId,\n+          LoggerUtils.listToString(targetWorkbasketIds));\n+    }\n \n-        List<WorkbasketSummary> distributionTargets = workbasketService.getDistributionTargets(sourceWorkbasketId);\n-        Resources<DistributionTargetResource> distributionTargetListResource = distributionTargetListAssembler\n-            .toResource(sourceWorkbasketId, distributionTargets);\n+    workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n \n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getTasksStatusReport(), returning {}\", new ResponseEntity<>(distributionTargetListResource, HttpStatus.OK));\n-        }\n+    List<WorkbasketSummary> distributionTargets =\n+        workbasketService.getDistributionTargets(sourceWorkbasketId);\n+    ResponseEntity<DistributionTargetListResource> response =\n+        ResponseEntity.ok(\n+            distributionTargetResourceAssembler.toResources(\n+                sourceWorkbasketId, distributionTargets));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getTasksStatusReport(), returning {}\", response);\n+    }\n \n-        return new ResponseEntity<>(distributionTargetListResource, HttpStatus.OK);\n+    return response;\n+  }\n+\n+  // TODO - schema inconsistent with PUT and GET\n+  @DeleteMapping(path = Mapping.URL_WORKBASKET_DISTRIBUTION_ID)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<Resources<DistributionTargetResource>>\n+      removeDistributionTargetForWorkbasketId(\n+          @PathVariable(value = \"workbasketId\") String targetWorkbasketId)\n+          throws WorkbasketNotFoundException, NotAuthorizedException {\n+    LOGGER.debug(\n+        \"Entry to removeDistributionTargetForWorkbasketId(workbasketId= {})\", targetWorkbasketId);\n+    List<WorkbasketSummary> sourceWorkbaskets =\n+        workbasketService.getDistributionSources(targetWorkbasketId);\n+    for (WorkbasketSummary source : sourceWorkbaskets) {\n+      workbasketService.removeDistributionTarget(source.getId(), targetWorkbasketId);\n     }\n \n-    @DeleteMapping(path = \"/distribution-targets/{workbasketId}\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<DistributionTargetResource>> removeDistributionTargetForWorkbasketId(\n-        @PathVariable(value = \"workbasketId\") String targetWorkbasketId)\n-        throws WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to removeDistributionTargetForWorkbasketId(workbasketId= {})\", targetWorkbasketId);\n-        List<WorkbasketSummary> sourceWorkbaskets = workbasketService.getDistributionSources(targetWorkbasketId);\n-        for (WorkbasketSummary source : sourceWorkbaskets) {\n-            workbasketService.removeDistributionTarget(source.getId(), targetWorkbasketId);\n-        }\n+    ResponseEntity<Resources<DistributionTargetResource>> response =\n+        ResponseEntity.noContent().build();\n+    LOGGER.debug(\"Exit from removeDistributionTargetForWorkbasketId(), returning {}\", response);\n+    return response;\n+  }\n \n-        LOGGER.debug(\"Exit from removeDistributionTargetForWorkbasketId(), returning {}\", new ResponseEntity<>(HttpStatus.NO_CONTENT));\n-        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n+  private WorkbasketQuery applySortingParams(\n+      WorkbasketQuery query, MultiValueMap<String, String> params) throws IllegalArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to applySortingParams(query= {}, params={})\", query, params);\n     }\n \n-    private WorkbasketQuery applySortingParams(WorkbasketQuery query, MultiValueMap<String, String> params)\n-        throws IllegalArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to applySortingParams(query= {}, params={})\", query, params);\n-        }\n+    // sorting\n+    String sortBy = params.getFirst(SORT_BY);\n+    if (sortBy != null) {\n+      SortDirection sortDirection;\n+      if (params.getFirst(SORT_DIRECTION) != null\n+          && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n+        sortDirection = SortDirection.DESCENDING;\n+      } else {\n+        sortDirection = SortDirection.ASCENDING;\n+      }\n+      switch (sortBy) {\n+        case (NAME):\n+          query = query.orderByName(sortDirection);\n+          break;\n+        case (KEY):\n+          query = query.orderByKey(sortDirection);\n+          break;\n+        case (OWNER):\n+          query = query.orderByOwner(sortDirection);\n+          break;\n+        case (TYPE):\n+          query = query.orderByType(sortDirection);\n+          break;\n+        case (DESCRIPTION):\n+          query = query.orderByDescription(sortDirection);\n+          break;\n+        default:\n+          throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n+      }\n+    }\n+    params.remove(SORT_BY);\n+    params.remove(SORT_DIRECTION);\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n+    }\n \n-        // sorting\n-        String sortBy = params.getFirst(SORT_BY);\n-        if (sortBy != null) {\n-            SortDirection sortDirection;\n-            if (params.getFirst(SORT_DIRECTION) != null && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n-                sortDirection = SortDirection.DESCENDING;\n-            } else {\n-                sortDirection = SortDirection.ASCENDING;\n-            }\n-            switch (sortBy) {\n-                case (NAME):\n-                    query = query.orderByName(sortDirection);\n-                    break;\n-                case (KEY):\n-                    query = query.orderByKey(sortDirection);\n-                    break;\n-                case (OWNER):\n-                    query = query.orderByOwner(sortDirection);\n-                    break;\n-                case (TYPE):\n-                    query = query.orderByType(sortDirection);\n-                    break;\n-                case (DESCRIPTION):\n-                    query = query.orderByDescription(sortDirection);\n-                    break;\n-                default:\n-                    throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n-            }\n-        }\n-        params.remove(SORT_BY);\n-        params.remove(SORT_DIRECTION);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n-        }\n+    return query;\n+  }\n \n-        return query;\n+  private WorkbasketQuery applyFilterParams(\n+      WorkbasketQuery query, MultiValueMap<String, String> params) throws InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", query, params);\n     }\n \n-    private WorkbasketQuery applyFilterParams(WorkbasketQuery query,\n-        MultiValueMap<String, String> params) throws InvalidArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", query, params);\n-        }\n-\n-        if (params.containsKey(NAME)) {\n-            String[] names = extractCommaSeparatedFields(params.get(NAME));\n-            query.nameIn(names);\n-            params.remove(NAME);\n-        }\n-        if (params.containsKey(NAME_LIKE)) {\n-            query.nameLike(LIKE + params.get(NAME_LIKE).get(0) + LIKE);\n-            params.remove(NAME_LIKE);\n-        }\n-        if (params.containsKey(KEY)) {\n-            String[] names = extractCommaSeparatedFields(params.get(KEY));\n-            query.keyIn(names);\n-            params.remove(KEY);\n-        }\n-        if (params.containsKey(KEY_LIKE)) {\n-            query.keyLike(LIKE + params.get(KEY_LIKE).get(0) + LIKE);\n-            params.remove(KEY_LIKE);\n-        }\n-        if (params.containsKey(OWNER)) {\n-            String[] names = extractCommaSeparatedFields(params.get(OWNER));\n-            query.ownerIn(names);\n-            params.remove(OWNER);\n-        }\n-        if (params.containsKey(OWNER_LIKE)) {\n-            query.ownerLike(LIKE + params.get(OWNER_LIKE).get(0) + LIKE);\n-            params.remove(OWNER_LIKE);\n-        }\n-        if (params.containsKey(DESCRIPTION_LIKE)) {\n-            query.descriptionLike(LIKE + params.get(DESCRIPTION_LIKE).get(0) + LIKE);\n-            params.remove(DESCRIPTION_LIKE);\n-        }\n-        if (params.containsKey(DOMAIN)) {\n-            query.domainIn(extractCommaSeparatedFields(params.get(DOMAIN)));\n-            params.remove(DOMAIN);\n-        }\n-        if (params.containsKey(TYPE)) {\n-            switch (params.getFirst(TYPE)) {\n-                case \"PERSONAL\":\n-                    query.typeIn(WorkbasketType.PERSONAL);\n-                    break;\n-                case \"GROUP\":\n-                    query.typeIn(WorkbasketType.GROUP);\n-                    break;\n-                case \"CLEARANCE\":\n-                    query.typeIn(WorkbasketType.CLEARANCE);\n-                    break;\n-                case \"TOPIC\":\n-                    query.typeIn(WorkbasketType.TOPIC);\n-                    break;\n-                default:\n-                    throw new InvalidArgumentException(\"Unknown Workbasket type '\" + params.getFirst(TYPE) + \"'\");\n-            }\n-            params.remove(TYPE);\n-        }\n-        if (params.containsKey(REQUIRED_PERMISSION)) {\n-            for (String authorization : Arrays.asList(params.getFirst(REQUIRED_PERMISSION).split(\",\"))) {\n-                switch (authorization.trim()) {\n-                    case \"READ\":\n-                        query.callerHasPermission(WorkbasketPermission.READ);\n-                        break;\n-                    case \"OPEN\":\n-                        query.callerHasPermission(WorkbasketPermission.OPEN);\n-                        break;\n-                    case \"APPEND\":\n-                        query.callerHasPermission(WorkbasketPermission.APPEND);\n-                        break;\n-                    case \"TRANSFER\":\n-                        query.callerHasPermission(WorkbasketPermission.TRANSFER);\n-                        break;\n-                    case \"DISTRIBUTE\":\n-                        query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n-                        break;\n-                    case \"CUSTOM_1\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n-                        break;\n-                    case \"CUSTOM_2\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n-                        break;\n-                    case \"CUSTOM_3\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n-                        break;\n-                    case \"CUSTOM_4\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n-                        break;\n-                    case \"CUSTOM_5\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n-                        break;\n-                    case \"CUSTOM_6\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n-                        break;\n-                    case \"CUSTOM_7\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n-                        break;\n-                    case \"CUSTOM_8\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n-                        break;\n-                    case \"CUSTOM_9\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n-                        break;\n-                    case \"CUSTOM_10\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n-                        break;\n-                    case \"CUSTOM_11\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n-                        break;\n-                    case \"CUSTOM_12\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n-                        break;\n-                    default:\n-                        throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n-                }\n-            }\n-            params.remove(REQUIRED_PERMISSION);\n-        }\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n+    if (params.containsKey(NAME)) {\n+      String[] names = extractCommaSeparatedFields(params.get(NAME));\n+      query.nameIn(names);\n+      params.remove(NAME);\n+    }\n+    if (params.containsKey(NAME_LIKE)) {\n+      query.nameLike(LIKE + params.get(NAME_LIKE).get(0) + LIKE);\n+      params.remove(NAME_LIKE);\n+    }\n+    if (params.containsKey(KEY)) {\n+      String[] names = extractCommaSeparatedFields(params.get(KEY));\n+      query.keyIn(names);\n+      params.remove(KEY);\n+    }\n+    if (params.containsKey(KEY_LIKE)) {\n+      query.keyLike(LIKE + params.get(KEY_LIKE).get(0) + LIKE);\n+      params.remove(KEY_LIKE);\n+    }\n+    if (params.containsKey(OWNER)) {\n+      String[] names = extractCommaSeparatedFields(params.get(OWNER));\n+      query.ownerIn(names);\n+      params.remove(OWNER);\n+    }\n+    if (params.containsKey(OWNER_LIKE)) {\n+      query.ownerLike(LIKE + params.get(OWNER_LIKE).get(0) + LIKE);\n+      params.remove(OWNER_LIKE);\n+    }\n+    if (params.containsKey(DESCRIPTION_LIKE)) {\n+      query.descriptionLike(LIKE + params.get(DESCRIPTION_LIKE).get(0) + LIKE);\n+      params.remove(DESCRIPTION_LIKE);\n+    }\n+    if (params.containsKey(DOMAIN)) {\n+      query.domainIn(extractCommaSeparatedFields(params.get(DOMAIN)));\n+      params.remove(DOMAIN);\n+    }\n+    if (params.containsKey(TYPE)) {\n+      switch (params.getFirst(TYPE)) {\n+        case \"PERSONAL\":\n+          query.typeIn(WorkbasketType.PERSONAL);\n+          break;\n+        case \"GROUP\":\n+          query.typeIn(WorkbasketType.GROUP);\n+          break;\n+        case \"CLEARANCE\":\n+          query.typeIn(WorkbasketType.CLEARANCE);\n+          break;\n+        case \"TOPIC\":\n+          query.typeIn(WorkbasketType.TOPIC);\n+          break;\n+        default:\n+          throw new InvalidArgumentException(\n+              \"Unknown Workbasket type '\" + params.getFirst(TYPE) + \"'\");\n+      }\n+      params.remove(TYPE);\n+    }\n+    if (params.containsKey(REQUIRED_PERMISSION)) {\n+      for (String authorization : Arrays.asList(params.getFirst(REQUIRED_PERMISSION).split(\",\"))) {\n+        switch (authorization.trim()) {\n+          case \"READ\":\n+            query.callerHasPermission(WorkbasketPermission.READ);\n+            break;\n+          case \"OPEN\":\n+            query.callerHasPermission(WorkbasketPermission.OPEN);\n+            break;\n+          case \"APPEND\":\n+            query.callerHasPermission(WorkbasketPermission.APPEND);\n+            break;\n+          case \"TRANSFER\":\n+            query.callerHasPermission(WorkbasketPermission.TRANSFER);\n+            break;\n+          case \"DISTRIBUTE\":\n+            query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n+            break;\n+          case \"CUSTOM_1\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n+            break;\n+          case \"CUSTOM_2\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n+            break;\n+          case \"CUSTOM_3\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n+            break;\n+          case \"CUSTOM_4\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n+            break;\n+          case \"CUSTOM_5\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n+            break;\n+          case \"CUSTOM_6\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n+            break;\n+          case \"CUSTOM_7\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n+            break;\n+          case \"CUSTOM_8\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n+            break;\n+          case \"CUSTOM_9\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n+            break;\n+          case \"CUSTOM_10\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n+            break;\n+          case \"CUSTOM_11\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n+            break;\n+          case \"CUSTOM_12\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n+            break;\n+          default:\n+            throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n         }\n-\n-        return query;\n+      }\n+      params.remove(REQUIRED_PERMISSION);\n+    }\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n     }\n \n+    return query;\n+  }\n }\n", "next_change": {"commit": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 86d6b11e9..090eef61c 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -486,6 +514,5 @@ public class WorkbasketController extends AbstractPagingController {\n       LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n     }\n \n-    return query;\n   }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "e872c39340c4755c0ea85ddbdee17229b7494bf8", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311 seperated rest service"}, {"oid": "eaf15fd19c0b34abc699c6feedb1a216eeaade45", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311 fixed checkstyle"}, {"oid": "798e160669500dabdd3486c788774dea5592d271", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311 refactoring"}, {"oid": "43a226f26d53d3e7ec1842b4de28c2d0ab1e6b37", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311: replaced RuntimeExceptions with more precise exceptions"}, {"oid": "d9bb89248b62e3724f5f56d6ab679af41a5f8aa7", "committedDate": "2018-03-01 13:31:27 +0100", "message": "TSK-327: Move Enums from impl to taskana package"}, {"oid": "bab3d9ff5ce3e2cf981a47bb5754e287e187416b", "committedDate": "2018-03-05 16:16:32 +0100", "message": "TSK-359 setWorkbasketAccessItems doesn't save access items"}, {"oid": "c958e8f1d4d4733ea79f489ae6a7480fa9bf5604", "committedDate": "2018-03-13 10:25:02 +0100", "message": "TSK-373: added HAL format to workbasket list."}, {"oid": "4c8b29bcec1c0b57536d63db31308526aeb8296a", "committedDate": "2018-03-13 10:25:02 +0100", "message": "TSK-373: list resources according to HAL format."}, {"oid": "3498df039ab4780c675b6635f3510255f13f2908", "committedDate": "2018-03-13 11:09:08 +0100", "message": "TSK-377 provide meaningful response for duplicate key exception"}, {"oid": "e581c8051b05ddbe065ae58d4f4effdf1b3525aa", "committedDate": "2018-03-14 08:15:28 +0100", "message": "TSK-378: PUT operations return updated entities and removed not required operations."}, {"oid": "aef0e987e9831452efdbc0a739a0670a89350490", "committedDate": "2018-03-15 10:06:43 +0100", "message": "TSK-385:"}, {"oid": "5de0cd5e09fd3599254ec441b0ae72b91b6db423", "committedDate": "2018-03-15 17:08:22 +0100", "message": "TSK-382 add errorhandling to controllers"}, {"oid": "2c62de91d79b6118fc999fdc714cc5ad5b738863", "committedDate": "2018-03-20 09:44:50 +0100", "message": "TSK-378: Add pagination to WorkbasketController."}, {"oid": "15dee0c2691fe78dd7cb9912da847aeacee906b1", "committedDate": "2018-03-20 09:44:50 +0100", "message": "TSK-378: introduced REST integration tests on WorkbasketController."}, {"oid": "4765fc242ac1934ac0e681a691e10a7afd055059", "committedDate": "2018-03-20 09:44:50 +0100", "message": "TSK-217: pagination support for WorkbasketController and first page to be number 1."}, {"oid": "9803de0502e11521b2c5d0d8816ccf8551c9ccf1", "committedDate": "2018-03-23 10:19:16 +0100", "message": "TSK-398: domain is checked for existance during workbasket creation."}, {"oid": "106df46a69a9fbebad2795ad53474f8cf91944c1", "committedDate": "2018-03-28 17:53:45 +0200", "message": "TSK-406: Added pagination for TaskController."}, {"oid": "a311a6030189d8b07e66fe4a6640b8a0329de9cb", "committedDate": "2018-04-02 08:32:29 +0200", "message": "TSK-426"}, {"oid": "dc8b0dbc54b4a715cea84d8644da78ebb6778314", "committedDate": "2018-04-18 12:30:58 +0200", "message": "TSK-421: invalid parameter lead to error message."}, {"oid": "ccf6f133ee4b9a171fe39da9bbeb409c2b34db3e", "committedDate": "2018-04-18 21:56:13 +0200", "message": "TSK-432 Domain switch and filtering for the application"}, {"oid": "87f44bd026132e2c5df92e14d13e5e5ee7f112b7", "committedDate": "2018-04-27 11:50:19 +0200", "message": "TSK-469: added endpoint to delete workbasket as distribution target."}, {"oid": "ec33a7a1ffe1c7353996c42a3c479f2b850ca54b", "committedDate": "2018-05-08 08:35:09 +0200", "message": "TSK-468 Add remove distribution target button and endpoint."}, {"oid": "30f72604c96b1312af763aa9d0bbfb38f875ec0a", "committedDate": "2018-05-14 08:29:39 +0200", "message": "TSK-482"}, {"oid": "712d8b435ba97b80ab723509e6fc1a3e913f7313", "committedDate": "2018-06-04 17:04:48 +0200", "message": "TSK-538 Bug order by description issue is now fixed."}, {"oid": "3f8dc3cf87cb36dd0eb10a0a43fac3b2d5995711", "committedDate": "2018-09-11 11:06:16 +0200", "message": "TSK-694 - Show list of all access items valid for a user (REST)"}, {"oid": "ef703b4a4025548faac4905ba488ae5777e791c0", "committedDate": "2018-09-11 11:06:16 +0200", "message": "TSK-694: refactored WorkbasketAccessItemQuery + Extended"}, {"oid": "66e25b4bd54adc2c71ca47f67a3bd9db8b044d08", "committedDate": "2018-09-11 13:09:40 +0200", "message": "TSK-682: redesigned task details and added custom Attributes"}, {"oid": "f74a70e0d5b87ed203622913ff9cb07ba0ad211d", "committedDate": "2018-10-09 10:38:40 +0200", "message": "TSK-680 - Mark workbasket for deletion"}, {"oid": "55e8135cc8a766a0869611f067490bec98a51d7c", "committedDate": "2018-10-17 10:14:27 +0200", "message": "TSK-733 - Modify response deleteWorkbasket"}, {"oid": "577ccaa648f52115c876706282d8434fe023f885", "committedDate": "2018-12-19 10:58:53 +0100", "message": "TSK-755 - Controller to get the simple history events"}, {"oid": "24a700b81dd383fd606785af81f37d2670bb84fe", "committedDate": "2019-01-22 13:22:01 +0100", "message": "TSK-769 - Improve the logger on both library and rest"}, {"oid": "8789dd5bf53e7f3712deb0fb85b68829e78724aa", "committedDate": "2019-02-01 13:50:43 +0100", "message": "TSK-775\t adapt code formatting to checkstyle template"}, {"oid": "cbc2ff16ac237bb923dbef4574b532bb20d90dcc", "committedDate": "2019-03-28 16:02:03 +0100", "message": "task/828: Unify and reduce the response and logger code in the controllers"}, {"oid": "aea64975dba98ebe04361ba7230f6bf186f2bcd8", "committedDate": "2019-05-07 08:24:49 +0200", "message": "feature/810 Add querying by planned date in monitor screen"}, {"oid": "aebd87b935fa739131d97336e5f3b6f3c6a99c5f", "committedDate": "2019-06-04 15:36:26 +0200", "message": "TSK-850: rebase cleanup"}, {"oid": "352d0d67cd3480f62eca33c4e5b3014c26c63394", "committedDate": "2019-09-26 10:38:29 +0200", "message": "TSK-881: Refactored REST-Api"}, {"oid": "f68e730a72cfba413fc2102ef84ac513ed194cee", "committedDate": "2019-10-04 22:12:52 +0200", "message": "TSK-896: Removed _embedded from History"}, {"oid": "f848bf4f4ecb62ca72b330bee2e1e47c9e53a829", "committedDate": "2019-11-30 12:21:18 +0100", "message": "TSK-947: Extract Url mappings"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "f06f87f41e08aea691512d53fe1087bd12e892b8", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Replace WorkbasketAccessItemListResource with equivalent PaginatedListResource"}, {"oid": "6a6dcb9c1e3984670c644f89c569eba3d20dcf3d", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Standardise paginated List behaviour and sub classes"}, {"oid": "fae9d1fb9bdec9a1ea1499e04575738044c03235", "committedDate": "2020-01-23 13:00:04 +0100", "message": "TSK-1029: Fix deletion of workbasket as business admin not possible"}, {"oid": "9b61abda37480fa9ba589c54f15bf6c0403a8184", "committedDate": "2020-01-28 12:27:37 +0100", "message": "TSK-1038: added WAIAlreadyExistsException to missing operations with access Items"}, {"oid": "3b13b9a95e4d7d1cf172f22fa0f2679ff1c5f79b", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 after initial refactoring"}, {"oid": "442385482236ad0c25830becbadddf30f6e7bf2d", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 fix dependent projects"}, {"oid": "e308578ced577706e1f6994473e0e6252f647b9e", "committedDate": "2020-02-06 17:26:05 +0100", "message": "TSK-991: refactored report structure to meet api -> internal agreement"}, {"oid": "dcc72d1781fffea923a9d4a2b0d568a1984f88bb", "committedDate": "2020-02-11 09:33:54 +0100", "message": "TSK-1088 optimistic locking on workbasket update"}, {"oid": "e6f8883e4911704f16404846fe4208ee3abb2adc", "committedDate": "2020-02-11 17:05:34 +0100", "message": "TSK-1031: removed unnecessary throws statements"}, {"oid": "007f268be599fda8b884e002b7b03bb260c7620f", "committedDate": "2020-02-11 17:05:34 +0100", "message": "TSK-1031: update Spring Boot to 2.2.4.RELEASE except Hateoas."}, {"oid": "fc812cb9ea2a94c50a4df6ca1d786e2a0306375d", "committedDate": "2020-02-13 09:25:08 +0100", "message": "TSK-1109 Make WorkbasketResource attributes private and convert tests to AssertJ"}, {"oid": "4c884819d5823f5bdede585a3ed347589c465c4d", "committedDate": "2020-02-13 14:20:17 +0100", "message": "TSK-1123: workbasketaccessitems now produce application/hal-json"}, {"oid": "5c7d38451ce7cbea2ad52d3b84be72d49c474c71", "committedDate": "2020-02-13 15:09:39 +0100", "message": "TSK-1094 introduce models package for */api and */internal"}, {"oid": "f64053ec4ecf4887deba1baf199a017e51ae42e0", "committedDate": "2020-02-13 16:12:39 +0100", "message": "TSK-1125: distributiontargets now produce application/hal-json"}, {"oid": "c9791b01b8b72b711025903276f2a1a30e3e85a2", "committedDate": "2020-03-19 09:53:54 +0100", "message": "TSK-1029: Proper distinction between delete and markForFeletion for workbaskets"}, {"oid": "a8e44dead343598b7266254616a7f8559ee941ba", "committedDate": "2020-04-23 09:49:16 +0200", "message": "TSK-1083: Updated HATEOAS from version 0.24.0 to version 1.0.4"}, {"oid": "75a340ccf32a72f2f45bdea73ace9ee3d33bf05c", "committedDate": "2020-05-11 14:48:36 +0200", "message": "TSK-1243: made rest url for workbasket distribution-targets consistent"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyNDc1MQ==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422624751", "body": "Please reformat", "bodyText": "Please reformat", "bodyHTML": "<p dir=\"auto\">Please reformat</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T10:35:04Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java", "diffHunk": "@@ -314,10 +325,10 @@\n   // TODO - schema inconsistent with PUT and GET\n   @DeleteMapping(path = Mapping.URL_WORKBASKET_DISTRIBUTION_ID)\n   @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<CollectionModel<DistributionTargetResource>>\n-      removeDistributionTargetForWorkbasketId(\n-          @PathVariable(value = \"workbasketId\") String targetWorkbasketId)\n-          throws WorkbasketNotFoundException, NotAuthorizedException {\n+  @SuppressWarnings(\"checkstyle:LineLength\")", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 820e48f04..b48fc9c2e 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -325,8 +326,8 @@ public class WorkbasketController extends AbstractPagingController {\n   // TODO - schema inconsistent with PUT and GET\n   @DeleteMapping(path = Mapping.URL_WORKBASKET_DISTRIBUTION_ID)\n   @Transactional(rollbackFor = Exception.class)\n-  @SuppressWarnings(\"checkstyle:LineLength\")\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> removeDistributionTargetForWorkbasketId(\n+  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n+      removeDistributionTargetForWorkbasketId(\n       @PathVariable(value = \"workbasketId\") String targetWorkbasketId)\n       throws WorkbasketNotFoundException, NotAuthorizedException {\n     LOGGER.debug(\n", "next_change": {"commit": "57ea66b8a9c3b528ed02f0090c009071e60eb870", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex b48fc9c2e..090eef61c 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -323,8 +323,7 @@ public class WorkbasketController extends AbstractPagingController {\n     return response;\n   }\n \n-  // TODO - schema inconsistent with PUT and GET\n-  @DeleteMapping(path = Mapping.URL_WORKBASKET_DISTRIBUTION_ID)\n+  @DeleteMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n   @Transactional(rollbackFor = Exception.class)\n   public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n       removeDistributionTargetForWorkbasketId(\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 820e48f04..090eef61c 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -322,11 +323,10 @@ public class WorkbasketController extends AbstractPagingController {\n     return response;\n   }\n \n-  // TODO - schema inconsistent with PUT and GET\n-  @DeleteMapping(path = Mapping.URL_WORKBASKET_DISTRIBUTION_ID)\n+  @DeleteMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n   @Transactional(rollbackFor = Exception.class)\n-  @SuppressWarnings(\"checkstyle:LineLength\")\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> removeDistributionTargetForWorkbasketId(\n+  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n+      removeDistributionTargetForWorkbasketId(\n       @PathVariable(value = \"workbasketId\") String targetWorkbasketId)\n       throws WorkbasketNotFoundException, NotAuthorizedException {\n     LOGGER.debug(\n", "next_change": {"commit": "e872c39340c4755c0ea85ddbdee17229b7494bf8", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 090eef61c..509fef84a 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -1,518 +1,418 @@\n package pro.taskana.rest;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.hateoas.MediaTypes;\n-import org.springframework.hateoas.PagedModel.PageMetadata;\n-import org.springframework.hateoas.config.EnableHypermediaSupport;\n-import org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.util.MultiValueMap;\n+import org.springframework.transaction.interceptor.TransactionInterceptor;\n import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.PutMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.RestController;\n \n-import pro.taskana.common.api.BaseQuery.SortDirection;\n-import pro.taskana.common.api.LoggerUtils;\n-import pro.taskana.common.api.exceptions.ConcurrencyException;\n-import pro.taskana.common.api.exceptions.DomainNotFoundException;\n-import pro.taskana.common.api.exceptions.InvalidArgumentException;\n-import pro.taskana.common.api.exceptions.NotAuthorizedException;\n-import pro.taskana.rest.resource.DistributionTargetRepresentationModelAssembler;\n-import pro.taskana.rest.resource.TaskanaPagedModel;\n-import pro.taskana.rest.resource.WorkbasketAccessItemRepresentationModel;\n-import pro.taskana.rest.resource.WorkbasketAccessItemRepresentationModelAssembler;\n-import pro.taskana.rest.resource.WorkbasketRepresentationModel;\n-import pro.taskana.rest.resource.WorkbasketRepresentationModelAssembler;\n-import pro.taskana.rest.resource.WorkbasketSummaryRepresentationModel;\n-import pro.taskana.rest.resource.WorkbasketSummaryRepresentationModelAssembler;\n-import pro.taskana.workbasket.api.WorkbasketPermission;\n-import pro.taskana.workbasket.api.WorkbasketQuery;\n-import pro.taskana.workbasket.api.WorkbasketService;\n-import pro.taskana.workbasket.api.WorkbasketType;\n-import pro.taskana.workbasket.api.exceptions.InvalidWorkbasketException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketAccessItemAlreadyExistException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketAlreadyExistException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketInUseException;\n-import pro.taskana.workbasket.api.exceptions.WorkbasketNotFoundException;\n-import pro.taskana.workbasket.api.models.Workbasket;\n-import pro.taskana.workbasket.api.models.WorkbasketAccessItem;\n-import pro.taskana.workbasket.api.models.WorkbasketSummary;\n+import pro.taskana.BaseQuery;\n+import pro.taskana.Workbasket;\n+import pro.taskana.WorkbasketAccessItem;\n+import pro.taskana.WorkbasketPermission;\n+import pro.taskana.WorkbasketQuery;\n+import pro.taskana.WorkbasketService;\n+import pro.taskana.WorkbasketSummary;\n+import pro.taskana.exceptions.InvalidArgumentException;\n+import pro.taskana.exceptions.InvalidWorkbasketException;\n+import pro.taskana.exceptions.NotAuthorizedException;\n+import pro.taskana.exceptions.WorkbasketInUseException;\n+import pro.taskana.exceptions.WorkbasketNotFoundException;\n+import pro.taskana.impl.WorkbasketType;\n+import pro.taskana.rest.resource.WorkbasketAccessItemResource;\n+import pro.taskana.rest.resource.WorkbasketResource;\n+import pro.taskana.rest.resource.WorkbasketSummaryResource;\n+import pro.taskana.rest.resource.mapper.WorkbasketAccessItemMapper;\n+import pro.taskana.rest.resource.mapper.WorkbasketMapper;\n+import pro.taskana.rest.resource.mapper.WorkbasketSummaryMapper;\n \n-/** Controller for all {@link Workbasket} related endpoints. */\n @RestController\n-@EnableHypermediaSupport(type = HypermediaType.HAL)\n-public class WorkbasketController extends AbstractPagingController {\n-\n-  private static final Logger LOGGER = LoggerFactory.getLogger(WorkbasketController.class);\n-\n-  private static final String LIKE = \"%\";\n-  private static final String NAME = \"name\";\n-  private static final String NAME_LIKE = \"name-like\";\n-  private static final String KEY = \"key\";\n-  private static final String KEY_LIKE = \"key-like\";\n-  private static final String OWNER = \"owner\";\n-  private static final String OWNER_LIKE = \"owner-like\";\n-  private static final String DESCRIPTION_LIKE = \"description-like\";\n-  private static final String DOMAIN = \"domain\";\n-  private static final String REQUIRED_PERMISSION = \"required-permission\";\n-  private static final String TYPE = \"type\";\n-  private static final String DESCRIPTION = \"description\";\n-\n-  private static final String SORT_BY = \"sort-by\";\n-  private static final String SORT_DIRECTION = \"order\";\n-\n-  private final WorkbasketService workbasketService;\n-\n-  private final WorkbasketRepresentationModelAssembler workbasketRepresentationModelAssembler;\n-\n-  private final WorkbasketSummaryRepresentationModelAssembler\n-      workbasketSummaryRepresentationModelAssembler;\n-\n-  private final DistributionTargetRepresentationModelAssembler\n-      distributionTargetRepresentationModelAssembler;\n-\n-  private final WorkbasketAccessItemRepresentationModelAssembler\n-      workbasketAccessItemRepresentationModelAssembler;\n-\n-  WorkbasketController(\n-      WorkbasketService workbasketService,\n-      WorkbasketRepresentationModelAssembler workbasketRepresentationModelAssembler,\n-      WorkbasketSummaryRepresentationModelAssembler workbasketSummaryRepresentationModelAssembler,\n-      DistributionTargetRepresentationModelAssembler distributionTargetRepresentationModelAssembler,\n-      WorkbasketAccessItemRepresentationModelAssembler\n-          workbasketAccessItemRepresentationModelAssembler) {\n-    this.workbasketService = workbasketService;\n-    this.workbasketRepresentationModelAssembler = workbasketRepresentationModelAssembler;\n-    this.workbasketSummaryRepresentationModelAssembler =\n-        workbasketSummaryRepresentationModelAssembler;\n-    this.distributionTargetRepresentationModelAssembler =\n-        distributionTargetRepresentationModelAssembler;\n-    this.workbasketAccessItemRepresentationModelAssembler =\n-        workbasketAccessItemRepresentationModelAssembler;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> getWorkbaskets(\n-      @RequestParam MultiValueMap<String, String> params) throws InvalidArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to getWorkbaskets(params= {})\", params);\n-    }\n-\n-    WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n-    query = applySortingParams(query, params);\n-    applyFilterParams(query, params);\n-\n-    PageMetadata pageMetadata = getPageMetadata(params, query);\n-    List<WorkbasketSummary> workbasketSummaries = getQueryList(query, pageMetadata);\n-    TaskanaPagedModel<WorkbasketSummaryRepresentationModel> pagedModels =\n-        workbasketSummaryRepresentationModelAssembler.toPageModel(\n-            workbasketSummaries, pageMetadata);\n-\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        ResponseEntity.ok(pagedModels);\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getWorkbaskets(), returning {}\", response);\n+@RequestMapping(path = \"/v1/workbaskets\", produces = {MediaType.APPLICATION_JSON_VALUE})\n+public class WorkbasketController {\n+\n+    private static final String LIKE = \"%\";\n+    private static final String NAME = \"name\";\n+    private static final String KEY = \"key\";\n+    private static final String DESCRIPTION = \"description\";\n+    private static final String OWNER = \"owner\";\n+    private static final String TYPE = \"type\";\n+    private static final String DESC = \"desc\";\n+\n+    @Autowired\n+    private WorkbasketService workbasketService;\n+\n+    @Autowired\n+    private WorkbasketSummaryMapper workbasketSummaryMapper;\n+\n+    @Autowired\n+    private WorkbasketMapper workbasketMapper;\n+\n+    @Autowired\n+    private WorkbasketAccessItemMapper workbasketAccessItemMapper;\n+\n+    @GetMapping\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<List<WorkbasketSummaryResource>> getWorkbaskets(\n+        @RequestParam(value = \"sortBy\", defaultValue = \"name\", required = false) String sortBy,\n+        @RequestParam(value = \"order\", defaultValue = \"asc\", required = false) String order,\n+        @RequestParam(value = \"name\", required = false) String name,\n+        @RequestParam(value = \"nameLike\", required = false) String nameLike,\n+        @RequestParam(value = \"key\", required = false) String key,\n+        @RequestParam(value = \"keyLike\", required = false) String keyLike,\n+        @RequestParam(value = \"descLike\", required = false) String descLike,\n+        @RequestParam(value = \"owner\", required = false) String owner,\n+        @RequestParam(value = \"ownerLike\", required = false) String ownerLike,\n+        @RequestParam(value = \"type\", required = false) String type,\n+        @RequestParam(value = \"requiredPermission\", required = false) String requiredPermission) {\n+        ResponseEntity<List<WorkbasketSummaryResource>> result;\n+        List<WorkbasketSummary> workbasketsSummary;\n+        WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n+        addSortingToQuery(query, sortBy, order);\n+        addAttributeFilter(query, name, nameLike, key, keyLike, descLike, owner, ownerLike, type);\n+        addAuthorizationFilter(query, requiredPermission);\n+        workbasketsSummary = query.list();\n+        result = new ResponseEntity<>(workbasketsSummary.stream()\n+            .map(workbasket -> workbasketSummaryMapper.toResource(workbasket))\n+            .collect(Collectors.toList()), HttpStatus.OK);\n+        return result;\n     }\n \n-    return response;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET_ID, produces = MediaTypes.HAL_JSON_VALUE)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<WorkbasketRepresentationModel> getWorkbasket(\n-      @PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-    LOGGER.debug(\"Entry to getWorkbasket(workbasketId= {})\", workbasketId);\n-    ResponseEntity<WorkbasketRepresentationModel> result;\n-    Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n-    result = ResponseEntity.ok(workbasketRepresentationModelAssembler.toModel(workbasket));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getWorkbasket(), returning {}\", result);\n-    }\n-\n-    return result;\n-  }\n-\n-  @DeleteMapping(path = Mapping.URL_WORKBASKET_ID)\n-  @Transactional(rollbackFor = Exception.class, noRollbackFor = WorkbasketNotFoundException.class)\n-  public ResponseEntity<?> deleteWorkbasket(\n-      @PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException,\n-          WorkbasketInUseException {\n-    LOGGER.debug(\"Entry to markWorkbasketForDeletion(workbasketId= {})\", workbasketId);\n-    ResponseEntity<?> response;\n-\n-    boolean workbasketDeleted = workbasketService.deleteWorkbasket(workbasketId);\n-\n-    if (workbasketDeleted) {\n-      LOGGER.debug(\"Workbasket successfully deleted.\");\n-      response = ResponseEntity.noContent().build();\n-    } else {\n-      LOGGER.debug(\n-          \"Workbasket was only marked for deletion and will be physically deleted later on.\");\n-      response = ResponseEntity.accepted().build();\n+    @GetMapping(path = \"/{workbasketId}\")\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketResource> getWorkbasket(@PathVariable(value = \"workbasketId\") String workbasketId) {\n+        ResponseEntity<WorkbasketResource> result;\n+        try {\n+            Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n+            result = new ResponseEntity<>(workbasketMapper.toResource(workbasket), HttpStatus.OK);\n+        } catch (WorkbasketNotFoundException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.NOT_FOUND);\n+        } catch (NotAuthorizedException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n+        }\n+        return result;\n     }\n \n-    LOGGER.debug(\"Exit from markWorkbasketForDeletion(), returning {}\", response);\n-    return response;\n-  }\n-\n-  @PostMapping(path = Mapping.URL_WORKBASKET)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<WorkbasketRepresentationModel> createWorkbasket(\n-      @RequestBody WorkbasketRepresentationModel workbasketRepresentationModel)\n-      throws InvalidWorkbasketException, NotAuthorizedException, WorkbasketAlreadyExistException,\n-          DomainNotFoundException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\n-          \"Entry to createWorkbasket(workbasketResource= {})\", workbasketRepresentationModel);\n+    @DeleteMapping(path = \"/{workbasketId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<?> deleteWorkbasket(@PathVariable(value = \"workbasketId\") String workbasketId) {\n+        ResponseEntity<?> result = ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n+        try {\n+            workbasketService.deleteWorkbasket(workbasketId);\n+        } catch (WorkbasketNotFoundException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n+        } catch (NotAuthorizedException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n+        } catch (WorkbasketInUseException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.LOCKED).build();\n+        } catch (InvalidArgumentException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = ResponseEntity.status(HttpStatus.PRECONDITION_FAILED).build();\n+        }\n+        return result;\n     }\n \n-    Workbasket workbasket =\n-        workbasketRepresentationModelAssembler.toEntityModel(workbasketRepresentationModel);\n-    workbasket = workbasketService.createWorkbasket(workbasket);\n-    ResponseEntity<WorkbasketRepresentationModel> response =\n-        ResponseEntity.status(HttpStatus.CREATED)\n-            .body(workbasketRepresentationModelAssembler.toModel(workbasket));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from createWorkbasket(), returning {}\", response);\n+    @PostMapping\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketResource> createWorkbasket(@RequestBody WorkbasketResource workbasketResource)\n+        throws NotAuthorizedException {\n+        try {\n+            Workbasket workbasket = workbasketMapper.toModel(workbasketResource);\n+            workbasket = workbasketService.createWorkbasket(workbasket);\n+            return new ResponseEntity<>(workbasketMapper.toResource(workbasket), HttpStatus.CREATED);\n+        } catch (InvalidWorkbasketException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);\n+        }\n     }\n \n-    return response;\n-  }\n-\n-  @PutMapping(path = Mapping.URL_WORKBASKET_ID)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<WorkbasketRepresentationModel> updateWorkbasket(\n-      @PathVariable(value = \"workbasketId\") String workbasketId,\n-      @RequestBody WorkbasketRepresentationModel workbasketRepresentationModel)\n-      throws InvalidWorkbasketException, WorkbasketNotFoundException, NotAuthorizedException,\n-          ConcurrencyException {\n-    LOGGER.debug(\"Entry to updateWorkbasket(workbasketId= {})\", workbasketId);\n-    ResponseEntity<WorkbasketRepresentationModel> result;\n-    if (workbasketId.equals(workbasketRepresentationModel.getWorkbasketId())) {\n-      Workbasket workbasket =\n-          workbasketRepresentationModelAssembler.toEntityModel(workbasketRepresentationModel);\n-      workbasket = workbasketService.updateWorkbasket(workbasket);\n-      result = ResponseEntity.ok(workbasketRepresentationModelAssembler.toModel(workbasket));\n-    } else {\n-      throw new InvalidWorkbasketException(\n-          \"Target-WB-ID('\"\n-              + workbasketId\n-              + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n-              + workbasketRepresentationModel.getWorkbasketId()\n-              + \"')\");\n-    }\n+    @PutMapping(path = \"/{workbasketId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketResource> updateWorkbasket(\n+        @PathVariable(value = \"workbasketId\") String workbasketId,\n+        @RequestBody WorkbasketResource workbasketResource) {\n+        ResponseEntity<WorkbasketResource> result;\n+        try {\n+            if (workbasketId.equals(workbasketResource.workbasketId)) {\n+                Workbasket workbasket = workbasketMapper.toModel(workbasketResource);\n+                workbasket = workbasketService.updateWorkbasket(workbasket);\n+                result = ResponseEntity.ok(workbasketMapper.toResource(workbasket));\n+            } else {\n+                throw new InvalidWorkbasketException(\n+                    \"Target-WB-ID('\" + workbasketId\n+                        + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n+                        + workbasketResource.getId() + \"')\");\n+            }\n+        } catch (InvalidWorkbasketException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.BAD_REQUEST);\n+        } catch (WorkbasketNotFoundException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.NOT_FOUND);\n+        } catch (NotAuthorizedException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            result = new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n+        }\n \n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from updateWorkbasket(), returning {}\", result);\n+        return result;\n     }\n \n-    return result;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS, produces = MediaTypes.HAL_JSON_VALUE)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n-      getWorkbasketAccessItems(@PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws NotAuthorizedException, WorkbasketNotFoundException {\n-    LOGGER.debug(\"Entry to getWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-    ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> result;\n-\n-    List<WorkbasketAccessItem> accessItems =\n-        workbasketService.getWorkbasketAccessItems(workbasketId);\n-    result =\n-        ResponseEntity.ok(\n-            workbasketAccessItemRepresentationModelAssembler.toPageModel(\n-                workbasketId, accessItems, null));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getWorkbasketAccessItems(), returning {}\", result);\n+    @GetMapping(path = \"/{workbasketId}/workbasketAccessItems\")\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<List<WorkbasketAccessItemResource>> getWorkbasketAccessItems(\n+        @PathVariable(value = \"workbasketId\") String workbasketId) {\n+        List<WorkbasketAccessItem> wbAuthorizations = workbasketService.getWorkbasketAccessItems(workbasketId);\n+        List<WorkbasketAccessItemResource> result = new ArrayList<>();\n+        wbAuthorizations.stream()\n+            .forEach(accItem -> {\n+                try {\n+                    result.add(workbasketAccessItemMapper.toResource(accItem));\n+                } catch (NotAuthorizedException e) {\n+                    e.printStackTrace();\n+                }\n+            });\n+        return new ResponseEntity<>(result, HttpStatus.OK);\n     }\n \n-    return result;\n-  }\n-\n-  @PutMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n-      setWorkbasketAccessItems(\n-      @PathVariable(value = \"workbasketId\") String workbasketId,\n-      @RequestBody List<WorkbasketAccessItemRepresentationModel> workbasketAccessResourceItems)\n-      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException,\n-                 WorkbasketAccessItemAlreadyExistException {\n-    LOGGER.debug(\"Entry to setWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-    if (workbasketAccessResourceItems == null) {\n-      throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n+    @PostMapping(path = \"/workbasketAccessItems\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketAccessItemResource> createWorkbasketAccessItem(\n+        @RequestBody WorkbasketAccessItemResource workbasketAccessItemResource) throws NotAuthorizedException {\n+        try {\n+            WorkbasketAccessItem workbasketAccessItem = workbasketAccessItemMapper\n+                .toModel(workbasketAccessItemResource);\n+            workbasketAccessItem = workbasketService.createWorkbasketAccessItem(workbasketAccessItem);\n+            return new ResponseEntity<>(workbasketAccessItemMapper.toResource(workbasketAccessItem), HttpStatus.OK);\n+        } catch (InvalidArgumentException e) {\n+            return new ResponseEntity<>(HttpStatus.PRECONDITION_FAILED);\n+        }\n     }\n \n-    List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n-    workbasketAccessResourceItems.forEach(\n-        item -> wbAccessItems\n-                    .add(workbasketAccessItemRepresentationModelAssembler.toEntityModel(item)));\n-    workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n-    List<WorkbasketAccessItem> updatedWbAccessItems =\n-        workbasketService.getWorkbasketAccessItems(workbasketId);\n-\n-    ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> response =\n-        ResponseEntity.ok(\n-            workbasketAccessItemRepresentationModelAssembler.toPageModel(\n-                workbasketId, updatedWbAccessItems, null));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from setWorkbasketAccessItems(), returning {}\", response);\n+    @PutMapping(path = \"/workbasketAccessItems/{workbasketAccessItemId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<WorkbasketAccessItemResource> updateWorkbasketAccessItem(\n+        @PathVariable(value = \"authId\") String authId,\n+        @RequestBody WorkbasketAccessItemResource workbasketAccessItemResource) {\n+        try {\n+            WorkbasketAccessItem workbasketAccessItem = workbasketAccessItemMapper\n+                .toModel(workbasketAccessItemResource);\n+            workbasketAccessItem = workbasketService.updateWorkbasketAccessItem(workbasketAccessItem);\n+            return new ResponseEntity<>(workbasketAccessItemMapper.toResource(workbasketAccessItem), HttpStatus.OK);\n+        } catch (InvalidArgumentException | NotAuthorizedException e) {\n+            return new ResponseEntity<>(HttpStatus.PRECONDITION_FAILED);\n+        }\n     }\n \n-    return response;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION, produces = MediaTypes.HAL_JSON_VALUE)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n-      getDistributionTargets(@PathVariable(value = \"workbasketId\") String workbasketId)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-\n-    LOGGER.debug(\"Entry to getDistributionTargets(workbasketId= {})\", workbasketId);\n-    List<WorkbasketSummary> distributionTargets =\n-        workbasketService.getDistributionTargets(workbasketId);\n-    TaskanaPagedModel<WorkbasketSummaryRepresentationModel> distributionTargetListResource =\n-        distributionTargetRepresentationModelAssembler.toPageModel(distributionTargets, null);\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> result =\n-        ResponseEntity.ok(distributionTargetListResource);\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getDistributionTargets(), returning {}\", result);\n+    @PutMapping(value = \"/{workbasketId}/workbasketAccessItems/\")\n+    public ResponseEntity<?> setWorkbasketAccessItems(@PathVariable(value = \"workbasketId\") String workbasketId,\n+        @RequestBody List<WorkbasketAccessItemResource> workbasketAccessResourceItems) {\n+        try {\n+            if (workbasketAccessResourceItems == null) {\n+                throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n+            }\n+            List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n+            workbasketAccessResourceItems.stream()\n+                .forEach(item -> wbAccessItems.add(workbasketAccessItemMapper.toModel(item)));\n+            workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n+            return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n+        } catch (InvalidArgumentException | NullPointerException e) {\n+            return new ResponseEntity<>(HttpStatus.PRECONDITION_FAILED);\n+        }\n     }\n \n-    return result;\n-  }\n-\n-  @PutMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n-      setDistributionTargetsForWorkbasketId(\n-      @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n-      @RequestBody List<String> targetWorkbasketIds)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\n-          \"Entry to getTasksStatusReport(workbasketId= {}, targetWorkbasketIds\u00b4= {})\",\n-          sourceWorkbasketId,\n-          LoggerUtils.listToString(targetWorkbasketIds));\n+    @DeleteMapping(path = \"/workbasketAccessItems/{workbasketAccessItemId}\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<?> deleteWorkbasketAccessItem(@PathVariable(value = \"authId\") String authId)\n+        throws NotAuthorizedException {\n+        workbasketService.deleteWorkbasketAccessItem(authId);\n+        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n     }\n \n-    workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n-\n-    List<WorkbasketSummary> distributionTargets =\n-        workbasketService.getDistributionTargets(sourceWorkbasketId);\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        ResponseEntity.ok(\n-            distributionTargetRepresentationModelAssembler.toPageModel(distributionTargets, null));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getTasksStatusReport(), returning {}\", response);\n+    @GetMapping(path = \"/{workbasketId}/distributiontargets\")\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<List<WorkbasketSummaryResource>> getDistributionTargetsForWorkbasketId(\n+        @PathVariable(value = \"workbasketId\") String workbasketId) {\n+\n+        ResponseEntity<List<WorkbasketSummaryResource>> result;\n+        List<WorkbasketSummary> distributionTargets;\n+        try {\n+            distributionTargets = workbasketService.getDistributionTargets(workbasketId);\n+            result = new ResponseEntity<>(distributionTargets.stream()\n+                .map(workbasket -> workbasketSummaryMapper.toResource(workbasket))\n+                .collect(Collectors.toList()), HttpStatus.OK);\n+        } catch (WorkbasketNotFoundException e) {\n+            result = new ResponseEntity<>(HttpStatus.NOT_FOUND);\n+        } catch (NotAuthorizedException e) {\n+            result = new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n+        }\n+        return result;\n     }\n \n-    return response;\n-  }\n-\n-  @DeleteMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n-      removeDistributionTargetForWorkbasketId(\n-      @PathVariable(value = \"workbasketId\") String targetWorkbasketId)\n-      throws WorkbasketNotFoundException, NotAuthorizedException {\n-    LOGGER.debug(\n-        \"Entry to removeDistributionTargetForWorkbasketId(workbasketId= {})\", targetWorkbasketId);\n-\n-    List<WorkbasketSummary> sourceWorkbaskets =\n-        workbasketService.getDistributionSources(targetWorkbasketId);\n-    for (WorkbasketSummary source : sourceWorkbaskets) {\n-      workbasketService.removeDistributionTarget(source.getId(), targetWorkbasketId);\n+    @PutMapping(path = \"/{workbasketId}/distributiontargets\")\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<?> setDistributionTargetsForWorkbasketId(\n+        @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n+        @RequestBody List<String> targetWorkbasketIds) {\n+        ResponseEntity<?> result;\n+        try {\n+            workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n+            result = ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n+        } catch (WorkbasketNotFoundException e) {\n+            result = ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n+        } catch (NotAuthorizedException e) {\n+            result = ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n+        }\n+        return result;\n     }\n \n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        ResponseEntity.noContent().build();\n-    LOGGER.debug(\"Exit from removeDistributionTargetForWorkbasketId(), returning {}\", response);\n-    return response;\n-  }\n+    private void addAuthorizationFilter(WorkbasketQuery query, String requiredPermission) {\n+        if (requiredPermission == null) {\n+            return;\n+        }\n \n-  private WorkbasketQuery applySortingParams(\n-      WorkbasketQuery query, MultiValueMap<String, String> params) throws IllegalArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to applySortingParams(query= {}, params={})\", query, params);\n+        for (String authorization : Arrays.asList(requiredPermission.split(\",\"))) {\n+            try {\n+                switch (authorization.trim()) {\n+                    case \"READ\":\n+                        query.callerHasPermission(WorkbasketPermission.READ);\n+                        break;\n+                    case \"OPEN\":\n+                        query.callerHasPermission(WorkbasketPermission.OPEN);\n+                        break;\n+                    case \"APPEND\":\n+                        query.callerHasPermission(WorkbasketPermission.APPEND);\n+                        break;\n+                    case \"TRANSFER\":\n+                        query.callerHasPermission(WorkbasketPermission.TRANSFER);\n+                        break;\n+                    case \"DISTRIBUTE\":\n+                        query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n+                        break;\n+                    case \"CUSTOM_1\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n+                        break;\n+                    case \"CUSTOM_2\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n+                        break;\n+                    case \"CUSTOM_3\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n+                        break;\n+                    case \"CUSTOM_4\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n+                        break;\n+                    case \"CUSTOM_5\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n+                        break;\n+                    case \"CUSTOM_6\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n+                        break;\n+                    case \"CUSTOM_7\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n+                        break;\n+                    case \"CUSTOM_8\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n+                        break;\n+                    case \"CUSTOM_9\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n+                        break;\n+                    case \"CUSTOM_10\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n+                        break;\n+                    case \"CUSTOM_11\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n+                        break;\n+                    case \"CUSTOM_12\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n+                        break;\n+                }\n+            } catch (InvalidArgumentException e) {\n+                e.printStackTrace();\n+            }\n+        }\n     }\n \n-    // sorting\n-    String sortBy = params.getFirst(SORT_BY);\n-    if (sortBy != null) {\n-      SortDirection sortDirection;\n-      if (params.getFirst(SORT_DIRECTION) != null\n-          && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n-        sortDirection = SortDirection.DESCENDING;\n-      } else {\n-        sortDirection = SortDirection.ASCENDING;\n-      }\n-      switch (sortBy) {\n-        case (NAME):\n-          query = query.orderByName(sortDirection);\n-          break;\n-        case (KEY):\n-          query = query.orderByKey(sortDirection);\n-          break;\n-        case (OWNER):\n-          query = query.orderByOwner(sortDirection);\n-          break;\n-        case (TYPE):\n-          query = query.orderByType(sortDirection);\n-          break;\n-        case (DESCRIPTION):\n-          query = query.orderByDescription(sortDirection);\n-          break;\n-        default:\n-          throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n-      }\n-    }\n-    params.remove(SORT_BY);\n-    params.remove(SORT_DIRECTION);\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n+    private void addSortingToQuery(WorkbasketQuery query, String sortBy, String order) {\n+        BaseQuery.SortDirection sortDirection = getSortDirection(order);\n+\n+        switch (sortBy) {\n+            case NAME:\n+                query.orderByName(sortDirection);\n+                break;\n+            case KEY:\n+                query.orderByKey(sortDirection);\n+                break;\n+            case DESCRIPTION:\n+                query.orderByDescription(sortDirection);\n+                break;\n+            case OWNER:\n+                query.orderByOwner(sortDirection);\n+                break;\n+            case TYPE:\n+                query.orderByType(sortDirection);\n+                break;\n+        }\n     }\n \n-    return query;\n-  }\n-\n-  private void applyFilterParams(\n-      WorkbasketQuery query, MultiValueMap<String, String> params) throws InvalidArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", query, params);\n+    private BaseQuery.SortDirection getSortDirection(String order) {\n+        if (order.equals(DESC)) {\n+            return BaseQuery.SortDirection.DESCENDING;\n+        }\n+        return BaseQuery.SortDirection.ASCENDING;\n     }\n \n-    if (params.containsKey(NAME)) {\n-      String[] names = extractCommaSeparatedFields(params.get(NAME));\n-      query.nameIn(names);\n-      params.remove(NAME);\n-    }\n-    if (params.containsKey(NAME_LIKE)) {\n-      query.nameLike(LIKE + params.get(NAME_LIKE).get(0) + LIKE);\n-      params.remove(NAME_LIKE);\n-    }\n-    if (params.containsKey(KEY)) {\n-      String[] names = extractCommaSeparatedFields(params.get(KEY));\n-      query.keyIn(names);\n-      params.remove(KEY);\n-    }\n-    if (params.containsKey(KEY_LIKE)) {\n-      query.keyLike(LIKE + params.get(KEY_LIKE).get(0) + LIKE);\n-      params.remove(KEY_LIKE);\n-    }\n-    if (params.containsKey(OWNER)) {\n-      String[] names = extractCommaSeparatedFields(params.get(OWNER));\n-      query.ownerIn(names);\n-      params.remove(OWNER);\n-    }\n-    if (params.containsKey(OWNER_LIKE)) {\n-      query.ownerLike(LIKE + params.get(OWNER_LIKE).get(0) + LIKE);\n-      params.remove(OWNER_LIKE);\n-    }\n-    if (params.containsKey(DESCRIPTION_LIKE)) {\n-      query.descriptionLike(LIKE + params.get(DESCRIPTION_LIKE).get(0) + LIKE);\n-      params.remove(DESCRIPTION_LIKE);\n-    }\n-    if (params.containsKey(DOMAIN)) {\n-      query.domainIn(extractCommaSeparatedFields(params.get(DOMAIN)));\n-      params.remove(DOMAIN);\n-    }\n-    if (params.containsKey(TYPE)) {\n-      switch (params.getFirst(TYPE)) {\n-        case \"PERSONAL\":\n-          query.typeIn(WorkbasketType.PERSONAL);\n-          break;\n-        case \"GROUP\":\n-          query.typeIn(WorkbasketType.GROUP);\n-          break;\n-        case \"CLEARANCE\":\n-          query.typeIn(WorkbasketType.CLEARANCE);\n-          break;\n-        case \"TOPIC\":\n-          query.typeIn(WorkbasketType.TOPIC);\n-          break;\n-        default:\n-          throw new InvalidArgumentException(\n-              \"Unknown Workbasket type '\" + params.getFirst(TYPE) + \"'\");\n-      }\n-      params.remove(TYPE);\n-    }\n-    if (params.containsKey(REQUIRED_PERMISSION)) {\n-      for (String authorization : params.getFirst(REQUIRED_PERMISSION).split(\",\")) {\n-        switch (authorization.trim()) {\n-          case \"READ\":\n-            query.callerHasPermission(WorkbasketPermission.READ);\n-            break;\n-          case \"OPEN\":\n-            query.callerHasPermission(WorkbasketPermission.OPEN);\n-            break;\n-          case \"APPEND\":\n-            query.callerHasPermission(WorkbasketPermission.APPEND);\n-            break;\n-          case \"TRANSFER\":\n-            query.callerHasPermission(WorkbasketPermission.TRANSFER);\n-            break;\n-          case \"DISTRIBUTE\":\n-            query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n-            break;\n-          case \"CUSTOM_1\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n-            break;\n-          case \"CUSTOM_2\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n-            break;\n-          case \"CUSTOM_3\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n-            break;\n-          case \"CUSTOM_4\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n-            break;\n-          case \"CUSTOM_5\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n-            break;\n-          case \"CUSTOM_6\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n-            break;\n-          case \"CUSTOM_7\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n-            break;\n-          case \"CUSTOM_8\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n-            break;\n-          case \"CUSTOM_9\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n-            break;\n-          case \"CUSTOM_10\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n-            break;\n-          case \"CUSTOM_11\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n-            break;\n-          case \"CUSTOM_12\":\n-            query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n-            break;\n-          default:\n-            throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n+    private void addAttributeFilter(WorkbasketQuery query,\n+        String name, String nameLike,\n+        String key, String keyLike,\n+        String descLike, String owner,\n+        String ownerLike, String type) {\n+        if (name != null)\n+            query.nameIn(name);\n+        if (nameLike != null)\n+            query.nameLike(LIKE + nameLike + LIKE);\n+        if (key != null)\n+            query.keyIn(key);\n+        if (keyLike != null)\n+            query.keyLike(LIKE + keyLike + LIKE);\n+        if (owner != null)\n+            query.ownerIn(owner);\n+        if (ownerLike != null)\n+            query.ownerLike(LIKE + ownerLike + LIKE);\n+        if (descLike != null)\n+            query.descriptionLike(LIKE + descLike + LIKE);\n+        if (type != null) {\n+            switch (type) {\n+                case \"PERSONAL\":\n+                    query.typeIn(WorkbasketType.PERSONAL);\n+                    break;\n+                case \"GROUP\":\n+                    query.typeIn(WorkbasketType.GROUP);\n+                    break;\n+                case \"CLEARANCE\":\n+                    query.typeIn(WorkbasketType.CLEARANCE);\n+                    break;\n+                case \"TOPIC\":\n+                    query.typeIn(WorkbasketType.TOPIC);\n+                    break;\n+            }\n         }\n-      }\n-      params.remove(REQUIRED_PERMISSION);\n-    }\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n     }\n-\n-  }\n }\n", "next_change": {"commit": "eaf15fd19c0b34abc699c6feedb1a216eeaade45", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 509fef84a..93f7f77be 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -412,6 +426,8 @@ public class WorkbasketController {\n                 case \"TOPIC\":\n                     query.typeIn(WorkbasketType.TOPIC);\n                     break;\n+                    default:\n+                        throw new RuntimeException(\"should never occur\");\n             }\n         }\n     }\n", "next_change": {"commit": "43a226f26d53d3e7ec1842b4de28c2d0ab1e6b37", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 93f7f77be..d31c828e4 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -426,8 +424,8 @@ public class WorkbasketController {\n                 case \"TOPIC\":\n                     query.typeIn(WorkbasketType.TOPIC);\n                     break;\n-                    default:\n-                        throw new RuntimeException(\"should never occur\");\n+                default:\n+                    throw new InvalidArgumentException(\"Unknown Workbaskettype '\" + type + \"'\");\n             }\n         }\n     }\n", "next_change": {"commit": "4765fc242ac1934ac0e681a691e10a7afd055059", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex d31c828e4..58f52582a 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -429,4 +386,19 @@ public class WorkbasketController {\n             }\n         }\n     }\n+\n+    private PageMetadata initPageMetadata(String pagesizeParam, String pageParam, long totalElements)\n+        throws InvalidArgumentException {\n+        long pagesize;\n+        long page;\n+        try {\n+            pagesize = Long.valueOf(pagesizeParam);\n+            page = Long.valueOf(pageParam);\n+        } catch (NumberFormatException e) {\n+            throw new InvalidArgumentException(\"page and pagesize must be a integer value.\");\n+        }\n+        PageMetadata pageMetadata = new PageMetadata(pagesize, page, totalElements, (totalElements / pagesize) + 1);\n+        return pageMetadata;\n+    }\n+\n }\n", "next_change": {"commit": "106df46a69a9fbebad2795ad53474f8cf91944c1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 58f52582a..990b5b64c 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -387,18 +388,4 @@ public class WorkbasketController {\n         }\n     }\n \n-    private PageMetadata initPageMetadata(String pagesizeParam, String pageParam, long totalElements)\n-        throws InvalidArgumentException {\n-        long pagesize;\n-        long page;\n-        try {\n-            pagesize = Long.valueOf(pagesizeParam);\n-            page = Long.valueOf(pageParam);\n-        } catch (NumberFormatException e) {\n-            throw new InvalidArgumentException(\"page and pagesize must be a integer value.\");\n-        }\n-        PageMetadata pageMetadata = new PageMetadata(pagesize, page, totalElements, (totalElements / pagesize) + 1);\n-        return pageMetadata;\n-    }\n-\n }\n", "next_change": {"commit": "dc8b0dbc54b4a715cea84d8644da78ebb6778314", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 990b5b64c..1ce35ed49 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -383,9 +320,71 @@ public class WorkbasketController extends AbstractPagingController {\n                     query.typeIn(WorkbasketType.TOPIC);\n                     break;\n                 default:\n-                    throw new InvalidArgumentException(\"Unknown Workbaskettype '\" + type + \"'\");\n+                    throw new InvalidArgumentException(\"Unknown Workbaskettype '\" + params.getFirst(TYPE) + \"'\");\n+            }\n+            params.remove(TYPE);\n+        }\n+        if (params.containsKey(REQUIRED_PERMISSION)) {\n+            for (String authorization : Arrays.asList(params.getFirst(REQUIRED_PERMISSION).split(\",\"))) {\n+                switch (authorization.trim()) {\n+                    case \"READ\":\n+                        query.callerHasPermission(WorkbasketPermission.READ);\n+                        break;\n+                    case \"OPEN\":\n+                        query.callerHasPermission(WorkbasketPermission.OPEN);\n+                        break;\n+                    case \"APPEND\":\n+                        query.callerHasPermission(WorkbasketPermission.APPEND);\n+                        break;\n+                    case \"TRANSFER\":\n+                        query.callerHasPermission(WorkbasketPermission.TRANSFER);\n+                        break;\n+                    case \"DISTRIBUTE\":\n+                        query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n+                        break;\n+                    case \"CUSTOM_1\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n+                        break;\n+                    case \"CUSTOM_2\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n+                        break;\n+                    case \"CUSTOM_3\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n+                        break;\n+                    case \"CUSTOM_4\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n+                        break;\n+                    case \"CUSTOM_5\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n+                        break;\n+                    case \"CUSTOM_6\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n+                        break;\n+                    case \"CUSTOM_7\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n+                        break;\n+                    case \"CUSTOM_8\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n+                        break;\n+                    case \"CUSTOM_9\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n+                        break;\n+                    case \"CUSTOM_10\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n+                        break;\n+                    case \"CUSTOM_11\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n+                        break;\n+                    case \"CUSTOM_12\":\n+                        query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n+                        break;\n+                    default:\n+                        throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n+                }\n             }\n+            params.remove(REQUIRED_PERMISSION);\n         }\n+        return query;\n     }\n \n }\n", "next_change": {"commit": "24a700b81dd383fd606785af81f37d2670bb84fe", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 1ce35ed49..683864185 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -384,6 +476,10 @@ public class WorkbasketController extends AbstractPagingController {\n             }\n             params.remove(REQUIRED_PERMISSION);\n         }\n+        if(LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n+        }\n+\n         return query;\n     }\n \n", "next_change": {"commit": "8789dd5bf53e7f3712deb0fb85b68829e78724aa", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 683864185..bc1b82904 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -476,7 +476,7 @@ public class WorkbasketController extends AbstractPagingController {\n             }\n             params.remove(REQUIRED_PERMISSION);\n         }\n-        if(LOGGER.isDebugEnabled()) {\n+        if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n         }\n \n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex bc1b82904..86d6b11e9 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -43,444 +37,455 @@ import pro.taskana.exceptions.WorkbasketAlreadyExistException;\n import pro.taskana.exceptions.WorkbasketInUseException;\n import pro.taskana.exceptions.WorkbasketNotFoundException;\n import pro.taskana.impl.util.LoggerUtils;\n+import pro.taskana.rest.resource.DistributionTargetListResource;\n import pro.taskana.rest.resource.DistributionTargetResource;\n+import pro.taskana.rest.resource.DistributionTargetResourceAssembler;\n+import pro.taskana.rest.resource.PagedResources.PageMetadata;\n+import pro.taskana.rest.resource.WorkbasketAccessItemListResource;\n import pro.taskana.rest.resource.WorkbasketAccessItemResource;\n+import pro.taskana.rest.resource.WorkbasketAccessItemResourceAssembler;\n import pro.taskana.rest.resource.WorkbasketResource;\n-import pro.taskana.rest.resource.WorkbasketSummaryResource;\n-import pro.taskana.rest.resource.DistributionTargetListAssembler;\n-import pro.taskana.rest.resource.WorkbasketAccessItemAssembler;\n-import pro.taskana.rest.resource.WorkbasketAccessItemListAssembler;\n import pro.taskana.rest.resource.WorkbasketResourceAssembler;\n-import pro.taskana.rest.resource.WorkbasketSummaryResourcesAssembler;\n+import pro.taskana.rest.resource.WorkbasketSummaryListResource;\n+import pro.taskana.rest.resource.WorkbasketSummaryResourceAssembler;\n \n-/**\n- * Controller for all {@link Workbasket} related endpoints.\n- */\n+/** Controller for all {@link Workbasket} related endpoints. */\n @RestController\n @EnableHypermediaSupport(type = HypermediaType.HAL)\n-@RequestMapping(path = \"/v1/workbaskets\", produces = \"application/hal+json\")\n public class WorkbasketController extends AbstractPagingController {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(WorkbasketController.class);\n-\n-    private static final String LIKE = \"%\";\n-    private static final String NAME = \"name\";\n-    private static final String NAME_LIKE = \"name-like\";\n-    private static final String KEY = \"key\";\n-    private static final String KEY_LIKE = \"key-like\";\n-    private static final String OWNER = \"owner\";\n-    private static final String OWNER_LIKE = \"owner-like\";\n-    private static final String DESCRIPTION_LIKE = \"description-like\";\n-    private static final String DOMAIN = \"domain\";\n-    private static final String REQUIRED_PERMISSION = \"required-permission\";\n-    private static final String TYPE = \"type\";\n-    private static final String DESCRIPTION = \"description\";\n-\n-    private static final String SORT_BY = \"sort-by\";\n-    private static final String SORT_DIRECTION = \"order\";\n-\n-    private static final String PAGING_PAGE = \"page\";\n-    private static final String PAGING_PAGE_SIZE = \"page-size\";\n-\n-    @Autowired\n-    private WorkbasketService workbasketService;\n-\n-    @Autowired\n-    private TaskService taskService;\n-\n-    @Autowired\n-    private WorkbasketResourceAssembler workbasketResourceAssembler;\n-\n-    @Autowired\n-    private DistributionTargetListAssembler distributionTargetListAssembler;\n-\n-    @Autowired\n-    private WorkbasketAccessItemListAssembler accessItemListAssembler;\n-\n-    @Autowired\n-    private WorkbasketAccessItemAssembler workbasketAccessItemAssembler;\n-\n-    @GetMapping\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<PagedResources<WorkbasketSummaryResource>> getWorkbaskets(\n-        @RequestParam MultiValueMap<String, String> params) throws InvalidArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to getWorkbaskets(params= {})\", params);\n-        }\n \n-        WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n-        query = applySortingParams(query, params);\n-        query = applyFilterParams(query, params);\n-\n-        PageMetadata pageMetadata = null;\n-        List<WorkbasketSummary> workbasketSummaries = null;\n-        String page = params.getFirst(PAGING_PAGE);\n-        String pageSize = params.getFirst(PAGING_PAGE_SIZE);\n-        params.remove(PAGING_PAGE);\n-        params.remove(PAGING_PAGE_SIZE);\n-        validateNoInvalidParameterIsLeft(params);\n-        if (page != null && pageSize != null) {\n-            // paging\n-            long totalElements = query.count();\n-            pageMetadata = initPageMetadata(pageSize, page, totalElements);\n-            workbasketSummaries = query.listPage((int) pageMetadata.getNumber(),\n-                (int) pageMetadata.getSize());\n-        } else if (page == null && pageSize == null) {\n-            // not paging\n-            workbasketSummaries = query.list();\n-        } else {\n-            throw new InvalidArgumentException(\"Paging information is incomplete.\");\n-        }\n+  private static final Logger LOGGER = LoggerFactory.getLogger(WorkbasketController.class);\n+\n+  private static final String LIKE = \"%\";\n+  private static final String NAME = \"name\";\n+  private static final String NAME_LIKE = \"name-like\";\n+  private static final String KEY = \"key\";\n+  private static final String KEY_LIKE = \"key-like\";\n+  private static final String OWNER = \"owner\";\n+  private static final String OWNER_LIKE = \"owner-like\";\n+  private static final String DESCRIPTION_LIKE = \"description-like\";\n+  private static final String DOMAIN = \"domain\";\n+  private static final String REQUIRED_PERMISSION = \"required-permission\";\n+  private static final String TYPE = \"type\";\n+  private static final String DESCRIPTION = \"description\";\n+\n+  private static final String SORT_BY = \"sort-by\";\n+  private static final String SORT_DIRECTION = \"order\";\n+\n+  private WorkbasketService workbasketService;\n+\n+  private WorkbasketResourceAssembler workbasketResourceAssembler;\n+\n+  private WorkbasketSummaryResourceAssembler workbasketSummaryResourceAssembler;\n+\n+  private DistributionTargetResourceAssembler distributionTargetResourceAssembler;\n+\n+  private WorkbasketAccessItemResourceAssembler workbasketAccessItemResourceAssembler;\n+\n+  WorkbasketController(\n+      WorkbasketService workbasketService,\n+      WorkbasketResourceAssembler workbasketResourceAssembler,\n+      WorkbasketSummaryResourceAssembler workbasketSummaryResourceAssembler,\n+      DistributionTargetResourceAssembler distributionTargetResourceAssembler,\n+      WorkbasketAccessItemResourceAssembler workbasketAccessItemResourceAssembler) {\n+    this.workbasketService = workbasketService;\n+    this.workbasketResourceAssembler = workbasketResourceAssembler;\n+    this.workbasketSummaryResourceAssembler = workbasketSummaryResourceAssembler;\n+    this.distributionTargetResourceAssembler = distributionTargetResourceAssembler;\n+    this.workbasketAccessItemResourceAssembler = workbasketAccessItemResourceAssembler;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketSummaryListResource> getWorkbaskets(\n+      @RequestParam MultiValueMap<String, String> params) throws InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to getWorkbaskets(params= {})\", params);\n+    }\n \n-        WorkbasketSummaryResourcesAssembler assembler = new WorkbasketSummaryResourcesAssembler();\n-        PagedResources<WorkbasketSummaryResource> pagedResources = assembler.toResources(workbasketSummaries,\n-            pageMetadata);\n+    WorkbasketQuery query = workbasketService.createWorkbasketQuery();\n+    query = applySortingParams(query, params);\n+    query = applyFilterParams(query, params);\n \n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getWorkbaskets(), returning {}\", new ResponseEntity<>(pagedResources, HttpStatus.OK));\n-        }\n+    PageMetadata pageMetadata = getPageMetadata(params, query);\n+    List<WorkbasketSummary> workbasketSummaries = getQueryList(query, pageMetadata);\n+    WorkbasketSummaryListResource pagedResources =\n+        workbasketSummaryResourceAssembler.toResources(workbasketSummaries, pageMetadata);\n \n-        return new ResponseEntity<>(pagedResources, HttpStatus.OK);\n+    ResponseEntity<WorkbasketSummaryListResource> response = ResponseEntity.ok(pagedResources);\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getWorkbaskets(), returning {}\", response);\n     }\n \n-    @GetMapping(path = \"/{workbasketId}\")\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<WorkbasketResource> getWorkbasket(@PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to getWorkbasket(workbasketId= {})\", workbasketId);\n-        ResponseEntity<WorkbasketResource> result;\n-        Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n-        result = new ResponseEntity<>(workbasketResourceAssembler.toResource(workbasket), HttpStatus.OK);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getWorkbasket(), returning {}\", result);\n-        }\n-\n-        return result;\n+    return response;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET_ID)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketResource> getWorkbasket(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws WorkbasketNotFoundException, NotAuthorizedException {\n+    LOGGER.debug(\"Entry to getWorkbasket(workbasketId= {})\", workbasketId);\n+    ResponseEntity<WorkbasketResource> result;\n+    Workbasket workbasket = workbasketService.getWorkbasket(workbasketId);\n+    result = ResponseEntity.ok(workbasketResourceAssembler.toResource(workbasket));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getWorkbasket(), returning {}\", result);\n     }\n \n-    @DeleteMapping(path = \"/{workbasketId}\")\n-    @Transactional(rollbackFor = Exception.class, noRollbackFor = WorkbasketNotFoundException.class)\n-    public ResponseEntity<?> markWorkbasketForDeletion(@PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws NotAuthorizedException, InvalidArgumentException,\n-        WorkbasketNotFoundException, WorkbasketInUseException {\n-        LOGGER.debug(\"Entry to markWorkbasketForDeletion(workbasketId= {})\", workbasketId);\n-        LOGGER.debug(\"Exit from markWorkbasketForDeletion(), returning {}\", new ResponseEntity<>(workbasketService.deleteWorkbasket(workbasketId), HttpStatus.ACCEPTED));\n-            return new ResponseEntity<>(workbasketService.deleteWorkbasket(workbasketId), HttpStatus.ACCEPTED);\n+    return result;\n+  }\n+\n+  @DeleteMapping(path = Mapping.URL_WORKBASKET_ID)\n+  @Transactional(rollbackFor = Exception.class, noRollbackFor = WorkbasketNotFoundException.class)\n+  public ResponseEntity<?> markWorkbasketForDeletion(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException,\n+          WorkbasketInUseException {\n+    LOGGER.debug(\"Entry to markWorkbasketForDeletion(workbasketId= {})\", workbasketId);\n+    ResponseEntity<?> response =\n+        ResponseEntity.accepted().body(workbasketService.deleteWorkbasket(workbasketId));\n+    LOGGER.debug(\"Exit from markWorkbasketForDeletion(), returning {}\", response);\n+    return response;\n+  }\n+\n+  @PostMapping(path = Mapping.URL_WORKBASKET)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketResource> createWorkbasket(\n+      @RequestBody WorkbasketResource workbasketResource)\n+      throws InvalidWorkbasketException, NotAuthorizedException, WorkbasketAlreadyExistException,\n+          WorkbasketNotFoundException, DomainNotFoundException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to createWorkbasket(workbasketResource= {})\", workbasketResource);\n     }\n \n-    @PostMapping\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<WorkbasketResource> createWorkbasket(@RequestBody WorkbasketResource workbasketResource)\n-        throws InvalidWorkbasketException, NotAuthorizedException, WorkbasketAlreadyExistException,\n-        WorkbasketNotFoundException, DomainNotFoundException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to createWorkbasket(workbasketResource= {})\", workbasketResource);\n-        }\n-\n-        Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n-        workbasket = workbasketService.createWorkbasket(workbasket);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from createWorkbasket(), returning {}\", new ResponseEntity<>(workbasketResourceAssembler.toResource(workbasket), HttpStatus.CREATED));\n-        }\n-\n-        return new ResponseEntity<>(workbasketResourceAssembler.toResource(workbasket), HttpStatus.CREATED);\n+    Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n+    workbasket = workbasketService.createWorkbasket(workbasket);\n+    ResponseEntity<WorkbasketResource> response =\n+        ResponseEntity.status(HttpStatus.CREATED)\n+            .body(workbasketResourceAssembler.toResource(workbasket));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from createWorkbasket(), returning {}\", response);\n     }\n \n-    @PutMapping(path = \"/{workbasketId}\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<WorkbasketResource> updateWorkbasket(\n-        @PathVariable(value = \"workbasketId\") String workbasketId,\n-        @RequestBody WorkbasketResource workbasketResource)\n-        throws InvalidWorkbasketException, WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to updateWorkbasket(workbasketId= {})\", workbasketId);\n-        ResponseEntity<WorkbasketResource> result;\n-        if (workbasketId.equals(workbasketResource.workbasketId)) {\n-            Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n-            workbasket = workbasketService.updateWorkbasket(workbasket);\n-            result = ResponseEntity.ok(workbasketResourceAssembler.toResource(workbasket));\n-        } else {\n-            throw new InvalidWorkbasketException(\n-                \"Target-WB-ID('\" + workbasketId\n-                    + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n-                    + workbasketResource.getId() + \"')\");\n-        }\n-\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from updateWorkbasket(), returning {}\", result);\n-        }\n-\n-        return result;\n+    return response;\n+  }\n+\n+  @PutMapping(path = Mapping.URL_WORKBASKET_ID)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketResource> updateWorkbasket(\n+      @PathVariable(value = \"workbasketId\") String workbasketId,\n+      @RequestBody WorkbasketResource workbasketResource)\n+      throws InvalidWorkbasketException, WorkbasketNotFoundException, NotAuthorizedException {\n+    LOGGER.debug(\"Entry to updateWorkbasket(workbasketId= {})\", workbasketId);\n+    ResponseEntity<WorkbasketResource> result;\n+    if (workbasketId.equals(workbasketResource.workbasketId)) {\n+      Workbasket workbasket = workbasketResourceAssembler.toModel(workbasketResource);\n+      workbasket = workbasketService.updateWorkbasket(workbasket);\n+      result = ResponseEntity.ok(workbasketResourceAssembler.toResource(workbasket));\n+    } else {\n+      throw new InvalidWorkbasketException(\n+          \"Target-WB-ID('\"\n+              + workbasketId\n+              + \"') is not identical with the WB-ID of to object which should be updated. ID=('\"\n+              + workbasketResource.getId()\n+              + \"')\");\n     }\n \n-    @GetMapping(path = \"/{workbasketId}/workbasketAccessItems\")\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<WorkbasketAccessItemResource>> getWorkbasketAccessItems(\n-        @PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws NotAuthorizedException, WorkbasketNotFoundException {\n-        LOGGER.debug(\"Entry to getWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-        ResponseEntity<Resources<WorkbasketAccessItemResource>> result;\n-\n-        List<WorkbasketAccessItem> accessItems = workbasketService.getWorkbasketAccessItems(workbasketId);\n-        Resources<WorkbasketAccessItemResource> accessItemListResource = accessItemListAssembler\n-            .toResource(workbasketId, accessItems);\n-        result = new ResponseEntity<>(accessItemListResource, HttpStatus.OK);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getWorkbasketAccessItems(), returning {}\", result);\n-        }\n-\n-        return result;\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from updateWorkbasket(), returning {}\", result);\n     }\n \n-    @PutMapping(value = \"/{workbasketId}/workbasketAccessItems\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<WorkbasketAccessItemResource>> setWorkbasketAccessItems(\n-        @PathVariable(value = \"workbasketId\") String workbasketId,\n-        @RequestBody List<WorkbasketAccessItemResource> workbasketAccessResourceItems)\n-        throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException {\n-        LOGGER.debug(\"Entry to setWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n-        if (workbasketAccessResourceItems == null) {\n-            throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n-        }\n-\n-        List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n-        workbasketAccessResourceItems.forEach(item -> wbAccessItems.add(workbasketAccessItemAssembler.toModel(item)));\n-        workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n-\n-        List<WorkbasketAccessItem> updatedWbAccessItems = workbasketService.getWorkbasketAccessItems(workbasketId);\n-        Resources<WorkbasketAccessItemResource> accessItemListResource = accessItemListAssembler\n-            .toResource(workbasketId, updatedWbAccessItems);\n-\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from setWorkbasketAccessItems(), returning {}\", new ResponseEntity<>(accessItemListResource, HttpStatus.OK));\n-        }\n-\n-        return new ResponseEntity<>(accessItemListResource, HttpStatus.OK);\n+    return result;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketAccessItemListResource> getWorkbasketAccessItems(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws NotAuthorizedException, WorkbasketNotFoundException {\n+    LOGGER.debug(\"Entry to getWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n+    ResponseEntity<WorkbasketAccessItemListResource> result;\n+\n+    List<WorkbasketAccessItem> accessItems =\n+        workbasketService.getWorkbasketAccessItems(workbasketId);\n+    result =\n+        ResponseEntity.ok(\n+            workbasketAccessItemResourceAssembler.toResources(workbasketId, accessItems));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getWorkbasketAccessItems(), returning {}\", result);\n     }\n \n-    @GetMapping(path = \"/{workbasketId}/distribution-targets\")\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<DistributionTargetResource>> getDistributionTargets(\n-        @PathVariable(value = \"workbasketId\") String workbasketId)\n-        throws WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to getDistributionTargets(workbasketId= {})\", workbasketId);\n-        ResponseEntity<Resources<DistributionTargetResource>> result;\n-        List<WorkbasketSummary> distributionTargets = workbasketService.getDistributionTargets(workbasketId);\n-        Resources<DistributionTargetResource> distributionTargetListResource = distributionTargetListAssembler\n-            .toResource(workbasketId, distributionTargets);\n-        result = new ResponseEntity<>(distributionTargetListResource, HttpStatus.OK);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getDistributionTargets(), returning {}\", result);\n-        }\n+    return result;\n+  }\n+\n+  @PutMapping(path = Mapping.URL_WORKBASKET_ID_ACCESSITEMS)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<WorkbasketAccessItemListResource> setWorkbasketAccessItems(\n+      @PathVariable(value = \"workbasketId\") String workbasketId,\n+      @RequestBody List<WorkbasketAccessItemResource> workbasketAccessResourceItems)\n+      throws NotAuthorizedException, InvalidArgumentException, WorkbasketNotFoundException {\n+    LOGGER.debug(\"Entry to setWorkbasketAccessItems(workbasketId= {})\", workbasketId);\n+    if (workbasketAccessResourceItems == null) {\n+      throw new InvalidArgumentException(\"Can\u00b4t create something with NULL body-value.\");\n+    }\n \n-        return result;\n+    List<WorkbasketAccessItem> wbAccessItems = new ArrayList<>();\n+    workbasketAccessResourceItems.forEach(\n+        item -> wbAccessItems.add(workbasketAccessItemResourceAssembler.toModel(item)));\n+    workbasketService.setWorkbasketAccessItems(workbasketId, wbAccessItems);\n+    List<WorkbasketAccessItem> updatedWbAccessItems =\n+        workbasketService.getWorkbasketAccessItems(workbasketId);\n+\n+    ResponseEntity<WorkbasketAccessItemListResource> response =\n+        ResponseEntity.ok(\n+            workbasketAccessItemResourceAssembler.toResources(workbasketId, updatedWbAccessItems));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from setWorkbasketAccessItems(), returning {}\", response);\n     }\n \n-    @PutMapping(path = \"/{workbasketId}/distribution-targets\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<DistributionTargetResource>> setDistributionTargetsForWorkbasketId(\n-        @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n-        @RequestBody List<String> targetWorkbasketIds) throws WorkbasketNotFoundException, NotAuthorizedException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to getTasksStatusReport(workbasketId= {}, targetWorkbasketIds\u00b4= {})\", sourceWorkbasketId,\n-                LoggerUtils.listToString(targetWorkbasketIds));\n-        }\n+    return response;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<DistributionTargetListResource> getDistributionTargets(\n+      @PathVariable(value = \"workbasketId\") String workbasketId)\n+      throws WorkbasketNotFoundException, NotAuthorizedException {\n+\n+    LOGGER.debug(\"Entry to getDistributionTargets(workbasketId= {})\", workbasketId);\n+    List<WorkbasketSummary> distributionTargets =\n+        workbasketService.getDistributionTargets(workbasketId);\n+    DistributionTargetListResource distributionTargetListResource =\n+        distributionTargetResourceAssembler.toResources(workbasketId, distributionTargets);\n+    ResponseEntity<DistributionTargetListResource> result =\n+        ResponseEntity.ok(distributionTargetListResource);\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getDistributionTargets(), returning {}\", result);\n+    }\n \n-        workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n+    return result;\n+  }\n+\n+  @PutMapping(path = Mapping.URL_WORKBASKET_ID_DISTRIBUTION)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<DistributionTargetListResource> setDistributionTargetsForWorkbasketId(\n+      @PathVariable(value = \"workbasketId\") String sourceWorkbasketId,\n+      @RequestBody List<String> targetWorkbasketIds)\n+      throws WorkbasketNotFoundException, NotAuthorizedException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\n+          \"Entry to getTasksStatusReport(workbasketId= {}, targetWorkbasketIds\u00b4= {})\",\n+          sourceWorkbasketId,\n+          LoggerUtils.listToString(targetWorkbasketIds));\n+    }\n \n-        List<WorkbasketSummary> distributionTargets = workbasketService.getDistributionTargets(sourceWorkbasketId);\n-        Resources<DistributionTargetResource> distributionTargetListResource = distributionTargetListAssembler\n-            .toResource(sourceWorkbasketId, distributionTargets);\n+    workbasketService.setDistributionTargets(sourceWorkbasketId, targetWorkbasketIds);\n \n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getTasksStatusReport(), returning {}\", new ResponseEntity<>(distributionTargetListResource, HttpStatus.OK));\n-        }\n+    List<WorkbasketSummary> distributionTargets =\n+        workbasketService.getDistributionTargets(sourceWorkbasketId);\n+    ResponseEntity<DistributionTargetListResource> response =\n+        ResponseEntity.ok(\n+            distributionTargetResourceAssembler.toResources(\n+                sourceWorkbasketId, distributionTargets));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getTasksStatusReport(), returning {}\", response);\n+    }\n \n-        return new ResponseEntity<>(distributionTargetListResource, HttpStatus.OK);\n+    return response;\n+  }\n+\n+  // TODO - schema inconsistent with PUT and GET\n+  @DeleteMapping(path = Mapping.URL_WORKBASKET_DISTRIBUTION_ID)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<Resources<DistributionTargetResource>>\n+      removeDistributionTargetForWorkbasketId(\n+          @PathVariable(value = \"workbasketId\") String targetWorkbasketId)\n+          throws WorkbasketNotFoundException, NotAuthorizedException {\n+    LOGGER.debug(\n+        \"Entry to removeDistributionTargetForWorkbasketId(workbasketId= {})\", targetWorkbasketId);\n+    List<WorkbasketSummary> sourceWorkbaskets =\n+        workbasketService.getDistributionSources(targetWorkbasketId);\n+    for (WorkbasketSummary source : sourceWorkbaskets) {\n+      workbasketService.removeDistributionTarget(source.getId(), targetWorkbasketId);\n     }\n \n-    @DeleteMapping(path = \"/distribution-targets/{workbasketId}\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<Resources<DistributionTargetResource>> removeDistributionTargetForWorkbasketId(\n-        @PathVariable(value = \"workbasketId\") String targetWorkbasketId)\n-        throws WorkbasketNotFoundException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to removeDistributionTargetForWorkbasketId(workbasketId= {})\", targetWorkbasketId);\n-        List<WorkbasketSummary> sourceWorkbaskets = workbasketService.getDistributionSources(targetWorkbasketId);\n-        for (WorkbasketSummary source : sourceWorkbaskets) {\n-            workbasketService.removeDistributionTarget(source.getId(), targetWorkbasketId);\n-        }\n+    ResponseEntity<Resources<DistributionTargetResource>> response =\n+        ResponseEntity.noContent().build();\n+    LOGGER.debug(\"Exit from removeDistributionTargetForWorkbasketId(), returning {}\", response);\n+    return response;\n+  }\n \n-        LOGGER.debug(\"Exit from removeDistributionTargetForWorkbasketId(), returning {}\", new ResponseEntity<>(HttpStatus.NO_CONTENT));\n-        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n+  private WorkbasketQuery applySortingParams(\n+      WorkbasketQuery query, MultiValueMap<String, String> params) throws IllegalArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to applySortingParams(query= {}, params={})\", query, params);\n     }\n \n-    private WorkbasketQuery applySortingParams(WorkbasketQuery query, MultiValueMap<String, String> params)\n-        throws IllegalArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to applySortingParams(query= {}, params={})\", query, params);\n-        }\n+    // sorting\n+    String sortBy = params.getFirst(SORT_BY);\n+    if (sortBy != null) {\n+      SortDirection sortDirection;\n+      if (params.getFirst(SORT_DIRECTION) != null\n+          && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n+        sortDirection = SortDirection.DESCENDING;\n+      } else {\n+        sortDirection = SortDirection.ASCENDING;\n+      }\n+      switch (sortBy) {\n+        case (NAME):\n+          query = query.orderByName(sortDirection);\n+          break;\n+        case (KEY):\n+          query = query.orderByKey(sortDirection);\n+          break;\n+        case (OWNER):\n+          query = query.orderByOwner(sortDirection);\n+          break;\n+        case (TYPE):\n+          query = query.orderByType(sortDirection);\n+          break;\n+        case (DESCRIPTION):\n+          query = query.orderByDescription(sortDirection);\n+          break;\n+        default:\n+          throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n+      }\n+    }\n+    params.remove(SORT_BY);\n+    params.remove(SORT_DIRECTION);\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n+    }\n \n-        // sorting\n-        String sortBy = params.getFirst(SORT_BY);\n-        if (sortBy != null) {\n-            SortDirection sortDirection;\n-            if (params.getFirst(SORT_DIRECTION) != null && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n-                sortDirection = SortDirection.DESCENDING;\n-            } else {\n-                sortDirection = SortDirection.ASCENDING;\n-            }\n-            switch (sortBy) {\n-                case (NAME):\n-                    query = query.orderByName(sortDirection);\n-                    break;\n-                case (KEY):\n-                    query = query.orderByKey(sortDirection);\n-                    break;\n-                case (OWNER):\n-                    query = query.orderByOwner(sortDirection);\n-                    break;\n-                case (TYPE):\n-                    query = query.orderByType(sortDirection);\n-                    break;\n-                case (DESCRIPTION):\n-                    query = query.orderByDescription(sortDirection);\n-                    break;\n-                default:\n-                    throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n-            }\n-        }\n-        params.remove(SORT_BY);\n-        params.remove(SORT_DIRECTION);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n-        }\n+    return query;\n+  }\n \n-        return query;\n+  private WorkbasketQuery applyFilterParams(\n+      WorkbasketQuery query, MultiValueMap<String, String> params) throws InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", query, params);\n     }\n \n-    private WorkbasketQuery applyFilterParams(WorkbasketQuery query,\n-        MultiValueMap<String, String> params) throws InvalidArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", query, params);\n-        }\n-\n-        if (params.containsKey(NAME)) {\n-            String[] names = extractCommaSeparatedFields(params.get(NAME));\n-            query.nameIn(names);\n-            params.remove(NAME);\n-        }\n-        if (params.containsKey(NAME_LIKE)) {\n-            query.nameLike(LIKE + params.get(NAME_LIKE).get(0) + LIKE);\n-            params.remove(NAME_LIKE);\n-        }\n-        if (params.containsKey(KEY)) {\n-            String[] names = extractCommaSeparatedFields(params.get(KEY));\n-            query.keyIn(names);\n-            params.remove(KEY);\n-        }\n-        if (params.containsKey(KEY_LIKE)) {\n-            query.keyLike(LIKE + params.get(KEY_LIKE).get(0) + LIKE);\n-            params.remove(KEY_LIKE);\n-        }\n-        if (params.containsKey(OWNER)) {\n-            String[] names = extractCommaSeparatedFields(params.get(OWNER));\n-            query.ownerIn(names);\n-            params.remove(OWNER);\n-        }\n-        if (params.containsKey(OWNER_LIKE)) {\n-            query.ownerLike(LIKE + params.get(OWNER_LIKE).get(0) + LIKE);\n-            params.remove(OWNER_LIKE);\n-        }\n-        if (params.containsKey(DESCRIPTION_LIKE)) {\n-            query.descriptionLike(LIKE + params.get(DESCRIPTION_LIKE).get(0) + LIKE);\n-            params.remove(DESCRIPTION_LIKE);\n-        }\n-        if (params.containsKey(DOMAIN)) {\n-            query.domainIn(extractCommaSeparatedFields(params.get(DOMAIN)));\n-            params.remove(DOMAIN);\n-        }\n-        if (params.containsKey(TYPE)) {\n-            switch (params.getFirst(TYPE)) {\n-                case \"PERSONAL\":\n-                    query.typeIn(WorkbasketType.PERSONAL);\n-                    break;\n-                case \"GROUP\":\n-                    query.typeIn(WorkbasketType.GROUP);\n-                    break;\n-                case \"CLEARANCE\":\n-                    query.typeIn(WorkbasketType.CLEARANCE);\n-                    break;\n-                case \"TOPIC\":\n-                    query.typeIn(WorkbasketType.TOPIC);\n-                    break;\n-                default:\n-                    throw new InvalidArgumentException(\"Unknown Workbasket type '\" + params.getFirst(TYPE) + \"'\");\n-            }\n-            params.remove(TYPE);\n-        }\n-        if (params.containsKey(REQUIRED_PERMISSION)) {\n-            for (String authorization : Arrays.asList(params.getFirst(REQUIRED_PERMISSION).split(\",\"))) {\n-                switch (authorization.trim()) {\n-                    case \"READ\":\n-                        query.callerHasPermission(WorkbasketPermission.READ);\n-                        break;\n-                    case \"OPEN\":\n-                        query.callerHasPermission(WorkbasketPermission.OPEN);\n-                        break;\n-                    case \"APPEND\":\n-                        query.callerHasPermission(WorkbasketPermission.APPEND);\n-                        break;\n-                    case \"TRANSFER\":\n-                        query.callerHasPermission(WorkbasketPermission.TRANSFER);\n-                        break;\n-                    case \"DISTRIBUTE\":\n-                        query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n-                        break;\n-                    case \"CUSTOM_1\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n-                        break;\n-                    case \"CUSTOM_2\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n-                        break;\n-                    case \"CUSTOM_3\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n-                        break;\n-                    case \"CUSTOM_4\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n-                        break;\n-                    case \"CUSTOM_5\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n-                        break;\n-                    case \"CUSTOM_6\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n-                        break;\n-                    case \"CUSTOM_7\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n-                        break;\n-                    case \"CUSTOM_8\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n-                        break;\n-                    case \"CUSTOM_9\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n-                        break;\n-                    case \"CUSTOM_10\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n-                        break;\n-                    case \"CUSTOM_11\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n-                        break;\n-                    case \"CUSTOM_12\":\n-                        query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n-                        break;\n-                    default:\n-                        throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n-                }\n-            }\n-            params.remove(REQUIRED_PERMISSION);\n-        }\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n+    if (params.containsKey(NAME)) {\n+      String[] names = extractCommaSeparatedFields(params.get(NAME));\n+      query.nameIn(names);\n+      params.remove(NAME);\n+    }\n+    if (params.containsKey(NAME_LIKE)) {\n+      query.nameLike(LIKE + params.get(NAME_LIKE).get(0) + LIKE);\n+      params.remove(NAME_LIKE);\n+    }\n+    if (params.containsKey(KEY)) {\n+      String[] names = extractCommaSeparatedFields(params.get(KEY));\n+      query.keyIn(names);\n+      params.remove(KEY);\n+    }\n+    if (params.containsKey(KEY_LIKE)) {\n+      query.keyLike(LIKE + params.get(KEY_LIKE).get(0) + LIKE);\n+      params.remove(KEY_LIKE);\n+    }\n+    if (params.containsKey(OWNER)) {\n+      String[] names = extractCommaSeparatedFields(params.get(OWNER));\n+      query.ownerIn(names);\n+      params.remove(OWNER);\n+    }\n+    if (params.containsKey(OWNER_LIKE)) {\n+      query.ownerLike(LIKE + params.get(OWNER_LIKE).get(0) + LIKE);\n+      params.remove(OWNER_LIKE);\n+    }\n+    if (params.containsKey(DESCRIPTION_LIKE)) {\n+      query.descriptionLike(LIKE + params.get(DESCRIPTION_LIKE).get(0) + LIKE);\n+      params.remove(DESCRIPTION_LIKE);\n+    }\n+    if (params.containsKey(DOMAIN)) {\n+      query.domainIn(extractCommaSeparatedFields(params.get(DOMAIN)));\n+      params.remove(DOMAIN);\n+    }\n+    if (params.containsKey(TYPE)) {\n+      switch (params.getFirst(TYPE)) {\n+        case \"PERSONAL\":\n+          query.typeIn(WorkbasketType.PERSONAL);\n+          break;\n+        case \"GROUP\":\n+          query.typeIn(WorkbasketType.GROUP);\n+          break;\n+        case \"CLEARANCE\":\n+          query.typeIn(WorkbasketType.CLEARANCE);\n+          break;\n+        case \"TOPIC\":\n+          query.typeIn(WorkbasketType.TOPIC);\n+          break;\n+        default:\n+          throw new InvalidArgumentException(\n+              \"Unknown Workbasket type '\" + params.getFirst(TYPE) + \"'\");\n+      }\n+      params.remove(TYPE);\n+    }\n+    if (params.containsKey(REQUIRED_PERMISSION)) {\n+      for (String authorization : Arrays.asList(params.getFirst(REQUIRED_PERMISSION).split(\",\"))) {\n+        switch (authorization.trim()) {\n+          case \"READ\":\n+            query.callerHasPermission(WorkbasketPermission.READ);\n+            break;\n+          case \"OPEN\":\n+            query.callerHasPermission(WorkbasketPermission.OPEN);\n+            break;\n+          case \"APPEND\":\n+            query.callerHasPermission(WorkbasketPermission.APPEND);\n+            break;\n+          case \"TRANSFER\":\n+            query.callerHasPermission(WorkbasketPermission.TRANSFER);\n+            break;\n+          case \"DISTRIBUTE\":\n+            query.callerHasPermission(WorkbasketPermission.DISTRIBUTE);\n+            break;\n+          case \"CUSTOM_1\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_1);\n+            break;\n+          case \"CUSTOM_2\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_2);\n+            break;\n+          case \"CUSTOM_3\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_3);\n+            break;\n+          case \"CUSTOM_4\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_4);\n+            break;\n+          case \"CUSTOM_5\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_5);\n+            break;\n+          case \"CUSTOM_6\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_6);\n+            break;\n+          case \"CUSTOM_7\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_7);\n+            break;\n+          case \"CUSTOM_8\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_8);\n+            break;\n+          case \"CUSTOM_9\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_9);\n+            break;\n+          case \"CUSTOM_10\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_10);\n+            break;\n+          case \"CUSTOM_11\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_11);\n+            break;\n+          case \"CUSTOM_12\":\n+            query.callerHasPermission(WorkbasketPermission.CUSTOM_12);\n+            break;\n+          default:\n+            throw new InvalidArgumentException(\"Unknown authorization '\" + authorization + \"'\");\n         }\n-\n-        return query;\n+      }\n+      params.remove(REQUIRED_PERMISSION);\n+    }\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n     }\n \n+    return query;\n+  }\n }\n", "next_change": {"commit": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\nindex 86d6b11e9..090eef61c 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java\n", "chunk": "@@ -486,6 +514,5 @@ public class WorkbasketController extends AbstractPagingController {\n       LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n     }\n \n-    return query;\n   }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "e872c39340c4755c0ea85ddbdee17229b7494bf8", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311 seperated rest service"}, {"oid": "eaf15fd19c0b34abc699c6feedb1a216eeaade45", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311 fixed checkstyle"}, {"oid": "798e160669500dabdd3486c788774dea5592d271", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311 refactoring"}, {"oid": "43a226f26d53d3e7ec1842b4de28c2d0ab1e6b37", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311: replaced RuntimeExceptions with more precise exceptions"}, {"oid": "d9bb89248b62e3724f5f56d6ab679af41a5f8aa7", "committedDate": "2018-03-01 13:31:27 +0100", "message": "TSK-327: Move Enums from impl to taskana package"}, {"oid": "bab3d9ff5ce3e2cf981a47bb5754e287e187416b", "committedDate": "2018-03-05 16:16:32 +0100", "message": "TSK-359 setWorkbasketAccessItems doesn't save access items"}, {"oid": "c958e8f1d4d4733ea79f489ae6a7480fa9bf5604", "committedDate": "2018-03-13 10:25:02 +0100", "message": "TSK-373: added HAL format to workbasket list."}, {"oid": "4c8b29bcec1c0b57536d63db31308526aeb8296a", "committedDate": "2018-03-13 10:25:02 +0100", "message": "TSK-373: list resources according to HAL format."}, {"oid": "3498df039ab4780c675b6635f3510255f13f2908", "committedDate": "2018-03-13 11:09:08 +0100", "message": "TSK-377 provide meaningful response for duplicate key exception"}, {"oid": "e581c8051b05ddbe065ae58d4f4effdf1b3525aa", "committedDate": "2018-03-14 08:15:28 +0100", "message": "TSK-378: PUT operations return updated entities and removed not required operations."}, {"oid": "aef0e987e9831452efdbc0a739a0670a89350490", "committedDate": "2018-03-15 10:06:43 +0100", "message": "TSK-385:"}, {"oid": "5de0cd5e09fd3599254ec441b0ae72b91b6db423", "committedDate": "2018-03-15 17:08:22 +0100", "message": "TSK-382 add errorhandling to controllers"}, {"oid": "2c62de91d79b6118fc999fdc714cc5ad5b738863", "committedDate": "2018-03-20 09:44:50 +0100", "message": "TSK-378: Add pagination to WorkbasketController."}, {"oid": "15dee0c2691fe78dd7cb9912da847aeacee906b1", "committedDate": "2018-03-20 09:44:50 +0100", "message": "TSK-378: introduced REST integration tests on WorkbasketController."}, {"oid": "4765fc242ac1934ac0e681a691e10a7afd055059", "committedDate": "2018-03-20 09:44:50 +0100", "message": "TSK-217: pagination support for WorkbasketController and first page to be number 1."}, {"oid": "9803de0502e11521b2c5d0d8816ccf8551c9ccf1", "committedDate": "2018-03-23 10:19:16 +0100", "message": "TSK-398: domain is checked for existance during workbasket creation."}, {"oid": "106df46a69a9fbebad2795ad53474f8cf91944c1", "committedDate": "2018-03-28 17:53:45 +0200", "message": "TSK-406: Added pagination for TaskController."}, {"oid": "a311a6030189d8b07e66fe4a6640b8a0329de9cb", "committedDate": "2018-04-02 08:32:29 +0200", "message": "TSK-426"}, {"oid": "dc8b0dbc54b4a715cea84d8644da78ebb6778314", "committedDate": "2018-04-18 12:30:58 +0200", "message": "TSK-421: invalid parameter lead to error message."}, {"oid": "ccf6f133ee4b9a171fe39da9bbeb409c2b34db3e", "committedDate": "2018-04-18 21:56:13 +0200", "message": "TSK-432 Domain switch and filtering for the application"}, {"oid": "87f44bd026132e2c5df92e14d13e5e5ee7f112b7", "committedDate": "2018-04-27 11:50:19 +0200", "message": "TSK-469: added endpoint to delete workbasket as distribution target."}, {"oid": "ec33a7a1ffe1c7353996c42a3c479f2b850ca54b", "committedDate": "2018-05-08 08:35:09 +0200", "message": "TSK-468 Add remove distribution target button and endpoint."}, {"oid": "30f72604c96b1312af763aa9d0bbfb38f875ec0a", "committedDate": "2018-05-14 08:29:39 +0200", "message": "TSK-482"}, {"oid": "712d8b435ba97b80ab723509e6fc1a3e913f7313", "committedDate": "2018-06-04 17:04:48 +0200", "message": "TSK-538 Bug order by description issue is now fixed."}, {"oid": "3f8dc3cf87cb36dd0eb10a0a43fac3b2d5995711", "committedDate": "2018-09-11 11:06:16 +0200", "message": "TSK-694 - Show list of all access items valid for a user (REST)"}, {"oid": "ef703b4a4025548faac4905ba488ae5777e791c0", "committedDate": "2018-09-11 11:06:16 +0200", "message": "TSK-694: refactored WorkbasketAccessItemQuery + Extended"}, {"oid": "66e25b4bd54adc2c71ca47f67a3bd9db8b044d08", "committedDate": "2018-09-11 13:09:40 +0200", "message": "TSK-682: redesigned task details and added custom Attributes"}, {"oid": "f74a70e0d5b87ed203622913ff9cb07ba0ad211d", "committedDate": "2018-10-09 10:38:40 +0200", "message": "TSK-680 - Mark workbasket for deletion"}, {"oid": "55e8135cc8a766a0869611f067490bec98a51d7c", "committedDate": "2018-10-17 10:14:27 +0200", "message": "TSK-733 - Modify response deleteWorkbasket"}, {"oid": "577ccaa648f52115c876706282d8434fe023f885", "committedDate": "2018-12-19 10:58:53 +0100", "message": "TSK-755 - Controller to get the simple history events"}, {"oid": "24a700b81dd383fd606785af81f37d2670bb84fe", "committedDate": "2019-01-22 13:22:01 +0100", "message": "TSK-769 - Improve the logger on both library and rest"}, {"oid": "8789dd5bf53e7f3712deb0fb85b68829e78724aa", "committedDate": "2019-02-01 13:50:43 +0100", "message": "TSK-775\t adapt code formatting to checkstyle template"}, {"oid": "cbc2ff16ac237bb923dbef4574b532bb20d90dcc", "committedDate": "2019-03-28 16:02:03 +0100", "message": "task/828: Unify and reduce the response and logger code in the controllers"}, {"oid": "aea64975dba98ebe04361ba7230f6bf186f2bcd8", "committedDate": "2019-05-07 08:24:49 +0200", "message": "feature/810 Add querying by planned date in monitor screen"}, {"oid": "aebd87b935fa739131d97336e5f3b6f3c6a99c5f", "committedDate": "2019-06-04 15:36:26 +0200", "message": "TSK-850: rebase cleanup"}, {"oid": "352d0d67cd3480f62eca33c4e5b3014c26c63394", "committedDate": "2019-09-26 10:38:29 +0200", "message": "TSK-881: Refactored REST-Api"}, {"oid": "f68e730a72cfba413fc2102ef84ac513ed194cee", "committedDate": "2019-10-04 22:12:52 +0200", "message": "TSK-896: Removed _embedded from History"}, {"oid": "f848bf4f4ecb62ca72b330bee2e1e47c9e53a829", "committedDate": "2019-11-30 12:21:18 +0100", "message": "TSK-947: Extract Url mappings"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "f06f87f41e08aea691512d53fe1087bd12e892b8", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Replace WorkbasketAccessItemListResource with equivalent PaginatedListResource"}, {"oid": "6a6dcb9c1e3984670c644f89c569eba3d20dcf3d", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Standardise paginated List behaviour and sub classes"}, {"oid": "fae9d1fb9bdec9a1ea1499e04575738044c03235", "committedDate": "2020-01-23 13:00:04 +0100", "message": "TSK-1029: Fix deletion of workbasket as business admin not possible"}, {"oid": "9b61abda37480fa9ba589c54f15bf6c0403a8184", "committedDate": "2020-01-28 12:27:37 +0100", "message": "TSK-1038: added WAIAlreadyExistsException to missing operations with access Items"}, {"oid": "3b13b9a95e4d7d1cf172f22fa0f2679ff1c5f79b", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 after initial refactoring"}, {"oid": "442385482236ad0c25830becbadddf30f6e7bf2d", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 fix dependent projects"}, {"oid": "e308578ced577706e1f6994473e0e6252f647b9e", "committedDate": "2020-02-06 17:26:05 +0100", "message": "TSK-991: refactored report structure to meet api -> internal agreement"}, {"oid": "dcc72d1781fffea923a9d4a2b0d568a1984f88bb", "committedDate": "2020-02-11 09:33:54 +0100", "message": "TSK-1088 optimistic locking on workbasket update"}, {"oid": "e6f8883e4911704f16404846fe4208ee3abb2adc", "committedDate": "2020-02-11 17:05:34 +0100", "message": "TSK-1031: removed unnecessary throws statements"}, {"oid": "007f268be599fda8b884e002b7b03bb260c7620f", "committedDate": "2020-02-11 17:05:34 +0100", "message": "TSK-1031: update Spring Boot to 2.2.4.RELEASE except Hateoas."}, {"oid": "fc812cb9ea2a94c50a4df6ca1d786e2a0306375d", "committedDate": "2020-02-13 09:25:08 +0100", "message": "TSK-1109 Make WorkbasketResource attributes private and convert tests to AssertJ"}, {"oid": "4c884819d5823f5bdede585a3ed347589c465c4d", "committedDate": "2020-02-13 14:20:17 +0100", "message": "TSK-1123: workbasketaccessitems now produce application/hal-json"}, {"oid": "5c7d38451ce7cbea2ad52d3b84be72d49c474c71", "committedDate": "2020-02-13 15:09:39 +0100", "message": "TSK-1094 introduce models package for */api and */internal"}, {"oid": "f64053ec4ecf4887deba1baf199a017e51ae42e0", "committedDate": "2020-02-13 16:12:39 +0100", "message": "TSK-1125: distributiontargets now produce application/hal-json"}, {"oid": "c9791b01b8b72b711025903276f2a1a30e3e85a2", "committedDate": "2020-03-19 09:53:54 +0100", "message": "TSK-1029: Proper distinction between delete and markForFeletion for workbaskets"}, {"oid": "a8e44dead343598b7266254616a7f8559ee941ba", "committedDate": "2020-04-23 09:49:16 +0200", "message": "TSK-1083: Updated HATEOAS from version 0.24.0 to version 1.0.4"}, {"oid": "75a340ccf32a72f2f45bdea73ace9ee3d33bf05c", "committedDate": "2020-05-11 14:48:36 +0200", "message": "TSK-1243: made rest url for workbasket distribution-targets consistent"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1MDQxMQ==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422650411", "body": "This is for all `toModel` implementations:\r\nPlease add `@NonNull` to the Method and the parameter, so that the IntelliJ warning goes away", "bodyText": "This is for all toModel implementations:\nPlease add @NonNull to the Method and the parameter, so that the IntelliJ warning goes away", "bodyHTML": "<p dir=\"auto\">This is for all <code>toModel</code> implementations:<br>\nPlease add <code>@NonNull</code> to the Method and the parameter, so that the IntelliJ warning goes away</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T14:08:20Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentRepresentationModelAssembler.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package pro.taskana.rest.resource;\n+\n+import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.hateoas.server.RepresentationModelAssembler;\n+import org.springframework.stereotype.Component;\n+\n+import pro.taskana.rest.AttachmentController;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.Attachment;\n+import pro.taskana.task.internal.models.AttachmentImpl;\n+\n+/**\n+ * EntityModel assembler for {@link AttachmentRepresentationModel}.\n+ */\n+@Component\n+public class AttachmentRepresentationModelAssembler\n+    implements RepresentationModelAssembler<Attachment, AttachmentRepresentationModel> {\n+\n+  private final TaskService taskService;\n+\n+  private final ClassificationSummaryRepresentationModelAssembler classificationAssembler;\n+\n+  @Autowired\n+  public AttachmentRepresentationModelAssembler(TaskService taskService,\n+      ClassificationSummaryRepresentationModelAssembler classificationAssembler) {\n+    this.taskService = taskService;\n+    this.classificationAssembler = classificationAssembler;\n+  }\n+\n+\n+  @Override\n+  public AttachmentRepresentationModel toModel(Attachment attachment) {", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentRepresentationModelAssembler.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentRepresentationModelAssembler.java\nindex e1ac1a5fc..7eff6d8c9 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentRepresentationModelAssembler.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentRepresentationModelAssembler.java\n", "chunk": "@@ -32,15 +33,15 @@ public class AttachmentRepresentationModelAssembler\n     this.classificationAssembler = classificationAssembler;\n   }\n \n-\n+  @NonNull\n   @Override\n-  public AttachmentRepresentationModel toModel(Attachment attachment) {\n+  public AttachmentRepresentationModel toModel(@NonNull Attachment attachment) {\n     AttachmentRepresentationModel resource = new AttachmentRepresentationModel(attachment);\n     resource.add(linkTo(AttachmentController.class).slash(attachment.getId()).withSelfRel());\n     return resource;\n   }\n \n-  public List<Attachment> toModel(List<AttachmentRepresentationModel> resources) {\n+  public List<Attachment> toAttachmentList(List<AttachmentRepresentationModel> resources) {\n     return resources.stream().map(this::apply).collect(Collectors.toList());\n   }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentRepresentationModelAssembler.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentRepresentationModelAssembler.java\nindex e1ac1a5fc..7eff6d8c9 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentRepresentationModelAssembler.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentRepresentationModelAssembler.java\n", "chunk": "@@ -32,15 +33,15 @@ public class AttachmentRepresentationModelAssembler\n     this.classificationAssembler = classificationAssembler;\n   }\n \n-\n+  @NonNull\n   @Override\n-  public AttachmentRepresentationModel toModel(Attachment attachment) {\n+  public AttachmentRepresentationModel toModel(@NonNull Attachment attachment) {\n     AttachmentRepresentationModel resource = new AttachmentRepresentationModel(attachment);\n     resource.add(linkTo(AttachmentController.class).slash(attachment.getId()).withSelfRel());\n     return resource;\n   }\n \n-  public List<Attachment> toModel(List<AttachmentRepresentationModel> resources) {\n+  public List<Attachment> toAttachmentList(List<AttachmentRepresentationModel> resources) {\n     return resources.stream().map(this::apply).collect(Collectors.toList());\n   }\n \n", "next_change": {"commit": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentRepresentationModelAssembler.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/task/rest/assembler/AttachmentRepresentationModelAssembler.java\nsimilarity index 81%\nrename from rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentRepresentationModelAssembler.java\nrename to rest/taskana-rest-spring/src/main/java/pro/taskana/task/rest/assembler/AttachmentRepresentationModelAssembler.java\nindex 7eff6d8c9..dbc62e6a6 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentRepresentationModelAssembler.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/task/rest/assembler/AttachmentRepresentationModelAssembler.java\n", "chunk": "@@ -42,10 +44,11 @@ public class AttachmentRepresentationModelAssembler\n   }\n \n   public List<Attachment> toAttachmentList(List<AttachmentRepresentationModel> resources) {\n-    return resources.stream().map(this::apply).collect(Collectors.toList());\n+    return resources.stream().map(this::toEntityModel).collect(Collectors.toList());\n   }\n \n-  private AttachmentImpl apply(AttachmentRepresentationModel attachmentRepresentationModel) {\n+  private AttachmentImpl toEntityModel(\n+      AttachmentRepresentationModel attachmentRepresentationModel) {\n     AttachmentImpl attachment = (AttachmentImpl) taskService.newAttachment();\n     BeanUtils.copyProperties(attachmentRepresentationModel, attachment);\n     attachment.setId(attachmentRepresentationModel.getAttachmentId());\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1MTY4Mg==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422651682", "body": "Reformat pls", "bodyText": "Reformat pls", "bodyHTML": "<p dir=\"auto\">Reformat pls</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T14:19:07Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java", "diffHunk": "@@ -80,23 +81,28 @@\n \n   private ClassificationService classificationService;\n \n-  private ClassificationResourceAssembler classificationResourceAssembler;\n+  private ClassificationRepresentationModelAssembler classificationRepresentationModelAssembler;\n \n-  private ClassificationSummaryResourceAssembler classificationSummaryResourceAssembler;\n+  private ClassificationSummaryRepresentationModelAssembler\n+      classificationSummaryRepresentationModelAssembler;\n \n   ClassificationController(\n       ClassificationService classificationService,\n-      ClassificationResourceAssembler classificationResourceAssembler,\n-      ClassificationSummaryResourceAssembler classificationSummaryResourceAssembler) {\n+      ClassificationRepresentationModelAssembler classificationRepresentationModelAssembler,\n+      ClassificationSummaryRepresentationModelAssembler\n+          classificationSummaryRepresentationModelAssembler) {\n     this.classificationService = classificationService;\n-    this.classificationResourceAssembler = classificationResourceAssembler;\n-    this.classificationSummaryResourceAssembler = classificationSummaryResourceAssembler;\n+    this.classificationRepresentationModelAssembler = classificationRepresentationModelAssembler;\n+    this.classificationSummaryRepresentationModelAssembler =\n+        classificationSummaryRepresentationModelAssembler;\n   }\n \n   @GetMapping(path = Mapping.URL_CLASSIFICATIONS)\n   @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<ClassificationSummaryListResource> getClassifications(\n-      @RequestParam MultiValueMap<String, String> params) throws InvalidArgumentException {\n+  @SuppressWarnings(\"checkstyle:LineLength\")", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\nindex 50da51258..ab4ad5faf 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n", "chunk": "@@ -99,8 +100,8 @@ public class ClassificationController extends AbstractPagingController {\n \n   @GetMapping(path = Mapping.URL_CLASSIFICATIONS)\n   @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  @SuppressWarnings(\"checkstyle:LineLength\")\n-  public ResponseEntity<TaskanaPagedModel<ClassificationSummaryRepresentationModel>> getClassifications(\n+  public ResponseEntity<TaskanaPagedModel<ClassificationSummaryRepresentationModel>>\n+      getClassifications(\n       @RequestParam MultiValueMap<String, String> params)\n       throws InvalidArgumentException {\n     if (LOGGER.isDebugEnabled()) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\nindex 50da51258..ab4ad5faf 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n", "chunk": "@@ -99,8 +100,8 @@ public class ClassificationController extends AbstractPagingController {\n \n   @GetMapping(path = Mapping.URL_CLASSIFICATIONS)\n   @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  @SuppressWarnings(\"checkstyle:LineLength\")\n-  public ResponseEntity<TaskanaPagedModel<ClassificationSummaryRepresentationModel>> getClassifications(\n+  public ResponseEntity<TaskanaPagedModel<ClassificationSummaryRepresentationModel>>\n+      getClassifications(\n       @RequestParam MultiValueMap<String, String> params)\n       throws InvalidArgumentException {\n     if (LOGGER.isDebugEnabled()) {\n", "next_change": {"commit": "e872c39340c4755c0ea85ddbdee17229b7494bf8", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\nindex ab4ad5faf..396295fe5 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n", "chunk": "@@ -1,334 +1,110 @@\n+/**\n+ *\n+ */\n package pro.taskana.rest;\n \n import java.util.List;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.hateoas.MediaTypes;\n-import org.springframework.hateoas.PagedModel.PageMetadata;\n-import org.springframework.hateoas.config.EnableHypermediaSupport;\n-import org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.util.MultiValueMap;\n-import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.transaction.interceptor.TransactionInterceptor;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.PutMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n \n-import pro.taskana.classification.api.ClassificationQuery;\n-import pro.taskana.classification.api.ClassificationService;\n-import pro.taskana.classification.api.exceptions.ClassificationAlreadyExistException;\n-import pro.taskana.classification.api.exceptions.ClassificationInUseException;\n-import pro.taskana.classification.api.exceptions.ClassificationNotFoundException;\n-import pro.taskana.classification.api.models.Classification;\n-import pro.taskana.classification.api.models.ClassificationSummary;\n-import pro.taskana.common.api.BaseQuery.SortDirection;\n-import pro.taskana.common.api.exceptions.ConcurrencyException;\n-import pro.taskana.common.api.exceptions.DomainNotFoundException;\n-import pro.taskana.common.api.exceptions.InvalidArgumentException;\n-import pro.taskana.common.api.exceptions.NotAuthorizedException;\n-import pro.taskana.rest.resource.ClassificationRepresentationModel;\n-import pro.taskana.rest.resource.ClassificationRepresentationModelAssembler;\n-import pro.taskana.rest.resource.ClassificationSummaryRepresentationModel;\n-import pro.taskana.rest.resource.ClassificationSummaryRepresentationModelAssembler;\n-import pro.taskana.rest.resource.TaskanaPagedModel;\n+import pro.taskana.Classification;\n+import pro.taskana.ClassificationService;\n+import pro.taskana.ClassificationSummary;\n+import pro.taskana.exceptions.ClassificationAlreadyExistException;\n+import pro.taskana.exceptions.ClassificationNotFoundException;\n+import pro.taskana.exceptions.NotAuthorizedException;\n+import pro.taskana.rest.resource.ClassificationResource;\n+import pro.taskana.rest.resource.mapper.ClassificationMapper;\n \n-/** Controller for all {@link Classification} related endpoints. */\n @RestController\n-@EnableHypermediaSupport(type = HypermediaType.HAL)\n-public class ClassificationController extends AbstractPagingController {\n-\n-  private static final Logger LOGGER = LoggerFactory.getLogger(ClassificationController.class);\n-\n-  private static final String LIKE = \"%\";\n-\n-  private static final String NAME = \"name\";\n-\n-  private static final String NAME_LIKE = \"name-like\";\n-\n-  private static final String KEY = \"key\";\n-\n-  private static final String DOMAIN = \"domain\";\n-\n-  private static final String CATEGORY = \"category\";\n-\n-  private static final String TYPE = \"type\";\n-\n-  private static final String CUSTOM_1_LIKE = \"custom-1-like\";\n-\n-  private static final String CUSTOM_2_LIKE = \"custom-2-like\";\n-\n-  private static final String CUSTOM_3_LIKE = \"custom-3-like\";\n-\n-  private static final String CUSTOM_4_LIKE = \"custom-4-like\";\n-\n-  private static final String CUSTOM_5_LIKE = \"custom-5-like\";\n-\n-  private static final String CUSTOM_6_LIKE = \"custom-6-like\";\n-\n-  private static final String CUSTOM_7_LIKE = \"custom-7-like\";\n-\n-  private static final String CUSTOM_8_LIKE = \"custom-8-like\";\n-\n-  private static final String SORT_BY = \"sort-by\";\n-\n-  private static final String SORT_DIRECTION = \"order\";\n-\n-  private final ClassificationService classificationService;\n-\n-  private final ClassificationRepresentationModelAssembler\n-      classificationRepresentationModelAssembler;\n-\n-  private final ClassificationSummaryRepresentationModelAssembler\n-      classificationSummaryRepresentationModelAssembler;\n-\n-  ClassificationController(\n-      ClassificationService classificationService,\n-      ClassificationRepresentationModelAssembler classificationRepresentationModelAssembler,\n-      ClassificationSummaryRepresentationModelAssembler\n-          classificationSummaryRepresentationModelAssembler) {\n-    this.classificationService = classificationService;\n-    this.classificationRepresentationModelAssembler = classificationRepresentationModelAssembler;\n-    this.classificationSummaryRepresentationModelAssembler =\n-        classificationSummaryRepresentationModelAssembler;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_CLASSIFICATIONS)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<TaskanaPagedModel<ClassificationSummaryRepresentationModel>>\n-      getClassifications(\n-      @RequestParam MultiValueMap<String, String> params)\n-      throws InvalidArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to getClassifications(params= {})\", params);\n-    }\n-\n-    ClassificationQuery query = classificationService.createClassificationQuery();\n-    query = applySortingParams(query, params);\n-    applyFilterParams(query, params);\n-\n-    PageMetadata pageMetadata = getPageMetadata(params, query);\n-    List<ClassificationSummary> classificationSummaries = getQueryList(query, pageMetadata);\n-\n-    ResponseEntity<TaskanaPagedModel<ClassificationSummaryRepresentationModel>> response =\n-        ResponseEntity.ok(\n-            classificationSummaryRepresentationModelAssembler.toPageModel(\n-                classificationSummaries, pageMetadata));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getClassifications(), returning {}\", response);\n-    }\n-\n-    return response;\n-  }\n-\n-  @GetMapping(path = Mapping.URL_CLASSIFICATIONS_ID, produces = MediaTypes.HAL_JSON_VALUE)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<ClassificationRepresentationModel> getClassification(\n-      @PathVariable String classificationId) throws ClassificationNotFoundException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to getClassification(classificationId= {})\", classificationId);\n-    }\n-\n-    Classification classification = classificationService.getClassification(classificationId);\n-    ResponseEntity<ClassificationRepresentationModel> response =\n-        ResponseEntity.ok(classificationRepresentationModelAssembler.toModel(classification));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from getClassification(), returning {}\", response);\n-    }\n-\n-    return response;\n-  }\n-\n-  @PostMapping(path = Mapping.URL_CLASSIFICATIONS)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<ClassificationRepresentationModel> createClassification(\n-      @RequestBody ClassificationRepresentationModel resource)\n-      throws NotAuthorizedException, ClassificationAlreadyExistException, DomainNotFoundException,\n-          InvalidArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to createClassification(resource= {})\", resource);\n+@RequestMapping(path = \"/v1/classifications\", produces = {MediaType.APPLICATION_JSON_VALUE})\n+public class ClassificationController {\n+\n+    @Autowired\n+    private ClassificationService classificationService;\n+\n+    @Autowired\n+    private ClassificationMapper classificationMapper;\n+\n+    @GetMapping\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<List<ClassificationSummary>> getClassifications() {\n+        try {\n+            List<ClassificationSummary> classificationTree = classificationService.createClassificationQuery().list();\n+            return ResponseEntity.status(HttpStatus.OK).body(classificationTree);\n+        } catch (Exception e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();\n+        }\n+    }\n+\n+    @GetMapping(path = \"/{classificationId}\")\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<ClassificationResource> getClassification(@PathVariable String classificationId) {\n+        try {\n+            Classification classification = classificationService.getClassification(classificationId);\n+            return ResponseEntity.status(HttpStatus.OK).body(classificationMapper.toResource(classification));\n+        } catch (ClassificationNotFoundException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n+        }\n+    }\n+\n+    @GetMapping(path = \"/{classificationKey}/{domain}\")\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<ClassificationResource> getClassification(@PathVariable String classificationKey,\n+        @PathVariable String domain) {\n+        try {\n+            Classification classification = classificationService.getClassification(classificationKey, domain);\n+            return ResponseEntity.status(HttpStatus.OK).body(classificationMapper.toResource(classification));\n+        } catch (ClassificationNotFoundException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n+        }\n+    }\n+\n+    @PostMapping\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<ClassificationResource> createClassification(\n+        @RequestBody ClassificationResource resource) {\n+        try {\n+            Classification classification = classificationMapper.toModel(resource);\n+            classification = classificationService.createClassification(classification);\n+            return ResponseEntity.status(HttpStatus.CREATED).body(classificationMapper.toResource(classification));\n+        } catch (ClassificationAlreadyExistException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            return ResponseEntity.status(HttpStatus.CONFLICT).build();\n+        } catch (NotAuthorizedException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n+        }\n+    }\n+\n+    @PutMapping\n+    @Transactional(rollbackFor = Exception.class)\n+    public ResponseEntity<ClassificationResource> updateClassification(@RequestBody ClassificationResource resource) {\n+        try {\n+            Classification classification = classificationMapper.toModel(resource);\n+            classification = classificationService.updateClassification(classification);\n+            return ResponseEntity.status(HttpStatus.OK).body(classificationMapper.toResource(classification));\n+        } catch (ClassificationNotFoundException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n+        } catch (NotAuthorizedException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n+        }\n     }\n-    Classification classification = classificationRepresentationModelAssembler\n-                                        .toEntityModel(resource);\n-    classification = classificationService.createClassification(classification);\n-\n-    ResponseEntity<ClassificationRepresentationModel> response =\n-        ResponseEntity.status(HttpStatus.CREATED)\n-            .body(classificationRepresentationModelAssembler.toModel(classification));\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from createClassification(), returning {}\", response);\n-    }\n-\n-    return response;\n-  }\n-\n-  @PutMapping(path = Mapping.URL_CLASSIFICATIONS_ID)\n-  @Transactional(rollbackFor = Exception.class)\n-  public ResponseEntity<ClassificationRepresentationModel> updateClassification(\n-      @PathVariable(value = \"classificationId\") String classificationId,\n-      @RequestBody ClassificationRepresentationModel resource)\n-      throws NotAuthorizedException, ClassificationNotFoundException, ConcurrencyException,\n-          InvalidArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\n-          \"Entry to updateClassification(classificationId= {}, resource= {})\",\n-          classificationId,\n-          resource);\n-    }\n-\n-    ResponseEntity<ClassificationRepresentationModel> result;\n-    if (classificationId.equals(resource.getClassificationId())) {\n-      Classification classification = classificationRepresentationModelAssembler\n-                                          .toEntityModel(resource);\n-      classification = classificationService.updateClassification(classification);\n-      result =\n-          ResponseEntity.ok(classificationRepresentationModelAssembler.toModel(classification));\n-    } else {\n-      throw new InvalidArgumentException(\n-          \"ClassificationId ('\"\n-              + classificationId\n-              + \"') of the URI is not identical with the classificationId ('\"\n-              + resource.getClassificationId()\n-              + \"') of the object in the payload.\");\n-    }\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from updateClassification(), returning {}\", result);\n-    }\n-\n-    return result;\n-  }\n-\n-  @DeleteMapping(path = Mapping.URL_CLASSIFICATIONS_ID)\n-  @Transactional(readOnly = true, rollbackFor = Exception.class)\n-  public ResponseEntity<?> deleteClassification(@PathVariable String classificationId)\n-      throws ClassificationNotFoundException, ClassificationInUseException, NotAuthorizedException {\n-    LOGGER.debug(\"Entry to deleteClassification(classificationId= {})\", classificationId);\n-    classificationService.deleteClassification(classificationId);\n-    ResponseEntity<?> response = ResponseEntity.noContent().build();\n-    LOGGER.debug(\"Exit from deleteClassification(), returning {}\", response);\n-    return response;\n-  }\n-\n-  private ClassificationQuery applySortingParams(\n-      ClassificationQuery query, MultiValueMap<String, String> params)\n-      throws IllegalArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to applySortingParams(query= {}, params= {})\", query, params);\n-    }\n-\n-    // sorting\n-    String sortBy = params.getFirst(SORT_BY);\n-    if (sortBy != null) {\n-      SortDirection sortDirection;\n-      if (params.getFirst(SORT_DIRECTION) != null\n-          && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n-        sortDirection = SortDirection.DESCENDING;\n-      } else {\n-        sortDirection = SortDirection.ASCENDING;\n-      }\n-      switch (sortBy) {\n-        case (CATEGORY):\n-          query = query.orderByCategory(sortDirection);\n-          break;\n-        case (DOMAIN):\n-          query = query.orderByDomain(sortDirection);\n-          break;\n-        case (KEY):\n-          query = query.orderByKey(sortDirection);\n-          break;\n-        case (NAME):\n-          query = query.orderByName(sortDirection);\n-          break;\n-        default:\n-          throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n-      }\n-    }\n-    params.remove(SORT_BY);\n-    params.remove(SORT_DIRECTION);\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n-    }\n-\n-    return query;\n-  }\n-\n-  private void applyFilterParams(\n-      ClassificationQuery query, MultiValueMap<String, String> params)\n-      throws InvalidArgumentException {\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", query, params);\n-    }\n-\n-    if (params.containsKey(NAME)) {\n-      String[] names = extractCommaSeparatedFields(params.get(NAME));\n-      query.nameIn(names);\n-      params.remove(NAME);\n-    }\n-    if (params.containsKey(NAME_LIKE)) {\n-      query.nameLike(LIKE + params.get(NAME_LIKE).get(0) + LIKE);\n-      params.remove(NAME_LIKE);\n-    }\n-    if (params.containsKey(KEY)) {\n-      String[] names = extractCommaSeparatedFields(params.get(KEY));\n-      query.keyIn(names);\n-      params.remove(KEY);\n-    }\n-    if (params.containsKey(CATEGORY)) {\n-      String[] names = extractCommaSeparatedFields(params.get(CATEGORY));\n-      query.categoryIn(names);\n-      params.remove(CATEGORY);\n-    }\n-    if (params.containsKey(DOMAIN)) {\n-      String[] names = extractCommaSeparatedFields(params.get(DOMAIN));\n-      query.domainIn(names);\n-      params.remove(DOMAIN);\n-    }\n-    if (params.containsKey(TYPE)) {\n-      String[] names = extractCommaSeparatedFields(params.get(TYPE));\n-      query.typeIn(names);\n-      params.remove(TYPE);\n-    }\n-    if (params.containsKey(CUSTOM_1_LIKE)) {\n-      query.customAttributeLike(\"1\", LIKE + params.get(CUSTOM_1_LIKE).get(0) + LIKE);\n-      params.remove(CUSTOM_1_LIKE);\n-    }\n-    if (params.containsKey(CUSTOM_2_LIKE)) {\n-      query.customAttributeLike(\"2\", LIKE + params.get(CUSTOM_2_LIKE).get(0) + LIKE);\n-      params.remove(CUSTOM_2_LIKE);\n-    }\n-    if (params.containsKey(CUSTOM_3_LIKE)) {\n-      query.customAttributeLike(\"3\", LIKE + params.get(CUSTOM_3_LIKE).get(0) + LIKE);\n-      params.remove(CUSTOM_3_LIKE);\n-    }\n-    if (params.containsKey(CUSTOM_4_LIKE)) {\n-      query.customAttributeLike(\"4\", LIKE + params.get(CUSTOM_4_LIKE).get(0) + LIKE);\n-      params.remove(CUSTOM_4_LIKE);\n-    }\n-    if (params.containsKey(CUSTOM_5_LIKE)) {\n-      query.customAttributeLike(\"5\", LIKE + params.get(CUSTOM_5_LIKE).get(0) + LIKE);\n-      params.remove(CUSTOM_5_LIKE);\n-    }\n-    if (params.containsKey(CUSTOM_6_LIKE)) {\n-      query.customAttributeLike(\"6\", LIKE + params.get(CUSTOM_6_LIKE).get(0) + LIKE);\n-      params.remove(CUSTOM_6_LIKE);\n-    }\n-    if (params.containsKey(CUSTOM_7_LIKE)) {\n-      query.customAttributeLike(\"7\", LIKE + params.get(CUSTOM_7_LIKE).get(0) + LIKE);\n-      params.remove(CUSTOM_7_LIKE);\n-    }\n-    if (params.containsKey(CUSTOM_8_LIKE)) {\n-      query.customAttributeLike(\"8\", LIKE + params.get(CUSTOM_8_LIKE).get(0) + LIKE);\n-      params.remove(CUSTOM_8_LIKE);\n-    }\n-\n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n-    }\n-\n-  }\n }\n", "next_change": {"commit": "a89d9a194525cdb66d62095cc9785741bce942ef", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\nindex 396295fe5..9d2920e53 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n", "chunk": "@@ -105,6 +106,9 @@ public class ClassificationController {\n         } catch (NotAuthorizedException e) {\n             TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n             return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n+        } catch (ConcurrencyException e) {\n+            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+            return ResponseEntity.status(HttpStatus.LOCKED).build();\n         }\n     }\n }\n", "next_change": {"commit": "5de0cd5e09fd3599254ec441b0ae72b91b6db423", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\nindex 9d2920e53..319392406 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n", "chunk": "@@ -53,62 +56,49 @@ public class ClassificationController {\n \n     @GetMapping(path = \"/{classificationId}\")\n     @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<ClassificationResource> getClassification(@PathVariable String classificationId) {\n-        try {\n-            Classification classification = classificationService.getClassification(classificationId);\n-            return ResponseEntity.status(HttpStatus.OK).body(classificationMapper.toResource(classification));\n-        } catch (ClassificationNotFoundException e) {\n-            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n-            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n-        }\n+    public ResponseEntity<ClassificationResource> getClassification(@PathVariable String classificationId)\n+        throws ClassificationNotFoundException, NotAuthorizedException, ClassificationAlreadyExistException,\n+        ConcurrencyException {\n+        Classification classification = classificationService.getClassification(classificationId);\n+        return ResponseEntity.status(HttpStatus.OK).body(classificationMapper.toResource(classification));\n     }\n \n     @GetMapping(path = \"/{classificationKey}/{domain}\")\n     @Transactional(readOnly = true, rollbackFor = Exception.class)\n     public ResponseEntity<ClassificationResource> getClassification(@PathVariable String classificationKey,\n-        @PathVariable String domain) {\n-        try {\n-            Classification classification = classificationService.getClassification(classificationKey, domain);\n-            return ResponseEntity.status(HttpStatus.OK).body(classificationMapper.toResource(classification));\n-        } catch (ClassificationNotFoundException e) {\n-            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n-            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n-        }\n+        @PathVariable String domain) throws ClassificationNotFoundException, NotAuthorizedException,\n+        ClassificationAlreadyExistException, ConcurrencyException {\n+        Classification classification = classificationService.getClassification(classificationKey, domain);\n+        return ResponseEntity.status(HttpStatus.OK).body(classificationMapper.toResource(classification));\n+    }\n+\n+    @GetMapping(path = \"/domains\")\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<List<String>> getDomains() {\n+        List<String> domains = new ArrayList<>();\n+        ClassificationQuery classificationQuery = classificationService.createClassificationQuery();\n+        domains = classificationQuery.listValues(\"DOMAIN\", BaseQuery.SortDirection.ASCENDING);\n+        return new ResponseEntity<>(domains, HttpStatus.OK);\n     }\n \n     @PostMapping\n     @Transactional(rollbackFor = Exception.class)\n     public ResponseEntity<ClassificationResource> createClassification(\n-        @RequestBody ClassificationResource resource) {\n-        try {\n-            Classification classification = classificationMapper.toModel(resource);\n-            classification = classificationService.createClassification(classification);\n-            return ResponseEntity.status(HttpStatus.CREATED).body(classificationMapper.toResource(classification));\n-        } catch (ClassificationAlreadyExistException e) {\n-            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n-            return ResponseEntity.status(HttpStatus.CONFLICT).build();\n-        } catch (NotAuthorizedException e) {\n-            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n-            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n-        }\n+        @RequestBody ClassificationResource resource)\n+        throws NotAuthorizedException, ClassificationNotFoundException, ClassificationAlreadyExistException,\n+        ConcurrencyException {\n+        Classification classification = classificationMapper.toModel(resource);\n+        classification = classificationService.createClassification(classification);\n+        return ResponseEntity.status(HttpStatus.CREATED).body(classificationMapper.toResource(classification));\n     }\n \n     @PutMapping\n     @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<ClassificationResource> updateClassification(@RequestBody ClassificationResource resource) {\n-        try {\n-            Classification classification = classificationMapper.toModel(resource);\n-            classification = classificationService.updateClassification(classification);\n-            return ResponseEntity.status(HttpStatus.OK).body(classificationMapper.toResource(classification));\n-        } catch (ClassificationNotFoundException e) {\n-            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n-            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n-        } catch (NotAuthorizedException e) {\n-            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n-            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n-        } catch (ConcurrencyException e) {\n-            TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n-            return ResponseEntity.status(HttpStatus.LOCKED).build();\n-        }\n+    public ResponseEntity<ClassificationResource> updateClassification(@RequestBody ClassificationResource resource)\n+        throws NotAuthorizedException, ClassificationNotFoundException, ConcurrencyException,\n+        ClassificationAlreadyExistException {\n+        Classification classification = classificationMapper.toModel(resource);\n+        classification = classificationService.updateClassification(classification);\n+        return ResponseEntity.status(HttpStatus.OK).body(classificationMapper.toResource(classification));\n     }\n }\n", "next_change": {"commit": "fd0bc96b9ddf44039d0b8ba7b1207f11ece5dfa1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\nindex 319392406..30ed5d05b 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n", "chunk": "@@ -96,7 +97,7 @@ public class ClassificationController {\n     @Transactional(rollbackFor = Exception.class)\n     public ResponseEntity<ClassificationResource> updateClassification(@RequestBody ClassificationResource resource)\n         throws NotAuthorizedException, ClassificationNotFoundException, ConcurrencyException,\n-        ClassificationAlreadyExistException {\n+        ClassificationAlreadyExistException, DomainNotFoundException {\n         Classification classification = classificationMapper.toModel(resource);\n         classification = classificationService.updateClassification(classification);\n         return ResponseEntity.status(HttpStatus.OK).body(classificationMapper.toResource(classification));\n", "next_change": {"commit": "df4638f2fce97e6181573e2d0117edd12c0dae23", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\nindex 30ed5d05b..51ca5a44d 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n", "chunk": "@@ -97,7 +98,7 @@ public class ClassificationController {\n     @Transactional(rollbackFor = Exception.class)\n     public ResponseEntity<ClassificationResource> updateClassification(@RequestBody ClassificationResource resource)\n         throws NotAuthorizedException, ClassificationNotFoundException, ConcurrencyException,\n-        ClassificationAlreadyExistException, DomainNotFoundException {\n+        ClassificationAlreadyExistException, DomainNotFoundException, InvalidArgumentException {\n         Classification classification = classificationMapper.toModel(resource);\n         classification = classificationService.updateClassification(classification);\n         return ResponseEntity.status(HttpStatus.OK).body(classificationMapper.toResource(classification));\n", "next_change": {"commit": "1d58cb39e1739aa900771328ada56c2b4a270d9c", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\nindex 51ca5a44d..016ad5399 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n", "chunk": "@@ -89,18 +111,84 @@ public class ClassificationController {\n         @RequestBody ClassificationResource resource)\n         throws NotAuthorizedException, ClassificationNotFoundException, ClassificationAlreadyExistException,\n         ConcurrencyException, DomainNotFoundException, InvalidArgumentException {\n-        Classification classification = classificationMapper.toModel(resource);\n+        Classification classification = classificationResourceAssembler.toModel(resource);\n         classification = classificationService.createClassification(classification);\n-        return ResponseEntity.status(HttpStatus.CREATED).body(classificationMapper.toResource(classification));\n+        return ResponseEntity.status(HttpStatus.CREATED)\n+            .body(classificationResourceAssembler.toResource(classification));\n     }\n \n-    @PutMapping\n+    @PutMapping(path = \"/{classificationId}\")\n     @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<ClassificationResource> updateClassification(@RequestBody ClassificationResource resource)\n+    public ResponseEntity<ClassificationResource> updateClassification(\n+        @PathVariable(value = \"classificationId\") String classificationId, @RequestBody ClassificationResource resource)\n         throws NotAuthorizedException, ClassificationNotFoundException, ConcurrencyException,\n         ClassificationAlreadyExistException, DomainNotFoundException, InvalidArgumentException {\n-        Classification classification = classificationMapper.toModel(resource);\n-        classification = classificationService.updateClassification(classification);\n-        return ResponseEntity.status(HttpStatus.OK).body(classificationMapper.toResource(classification));\n+\n+        ResponseEntity<ClassificationResource> result;\n+        if (classificationId.equals(resource.classificationId)) {\n+            Classification classification = classificationResourceAssembler.toModel(resource);\n+            classification = classificationService.updateClassification(classification);\n+            result = ResponseEntity.ok(classificationResourceAssembler.toResource(classification));\n+        } else {\n+            throw new InvalidArgumentException(\n+                \"ClassificationId ('\" + classificationId\n+                    + \"') of the URI is not identical with the classificationId ('\"\n+                    + resource.getClassificationId() + \"') of the object in the payload.\");\n+        }\n+        return result;\n     }\n+\n+    private void addSortingToQuery(ClassificationQuery query, String sortBy, String order)\n+        throws IllegalArgumentException {\n+        BaseQuery.SortDirection sortDirection = getSortDirection(order);\n+\n+        switch (sortBy) {\n+            case CATEGORY:\n+                query.orderByCategory(sortDirection);\n+                break;\n+            case DOMAIN:\n+                query.orderByDomain(sortDirection);\n+                break;\n+            case KEY:\n+                query.orderByKey(sortDirection);\n+                break;\n+            case NAME:\n+                query.orderByName(sortDirection);\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n+        }\n+    }\n+\n+    private BaseQuery.SortDirection getSortDirection(String order) {\n+        if (order.equals(DESC)) {\n+            return BaseQuery.SortDirection.DESCENDING;\n+        }\n+        return BaseQuery.SortDirection.ASCENDING;\n+    }\n+\n+    private void addAttributeFilter(ClassificationQuery query,\n+        String name, String nameLike,\n+        String key, String category,\n+        String type, String domain) throws InvalidArgumentException {\n+        if (name != null) {\n+            query.nameIn(name);\n+        }\n+        if (nameLike != null) {\n+            query.nameLike(LIKE + nameLike + LIKE);\n+        }\n+        if (key != null) {\n+            query.keyIn(key);\n+        }\n+        if (category != null) {\n+            query.categoryIn(category);\n+        }\n+        if (type != null) {\n+            query.typeIn(type);\n+        }\n+        if (domain != null) {\n+            query.domainIn(domain);\n+        }\n+    }\n+\n }\n", "next_change": {"commit": "c2b0ba5daf49b95ea8f5ac565040bc74485eb97b", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\nindex 016ad5399..b0ebae56e 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n", "chunk": "@@ -138,57 +152,111 @@ public class ClassificationController extends AbstractPagingController {\n         return result;\n     }\n \n-    private void addSortingToQuery(ClassificationQuery query, String sortBy, String order)\n-        throws IllegalArgumentException {\n-        BaseQuery.SortDirection sortDirection = getSortDirection(order);\n-\n-        switch (sortBy) {\n-            case CATEGORY:\n-                query.orderByCategory(sortDirection);\n-                break;\n-            case DOMAIN:\n-                query.orderByDomain(sortDirection);\n-                break;\n-            case KEY:\n-                query.orderByKey(sortDirection);\n-                break;\n-            case NAME:\n-                query.orderByName(sortDirection);\n-                break;\n-            default:\n-                throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n-        }\n+    @DeleteMapping(path = \"/{classificationId}\")\n+    @Transactional(readOnly = true, rollbackFor = Exception.class)\n+    public ResponseEntity<?> deleteClassification(@PathVariable String classificationId)\n+        throws ClassificationNotFoundException, ClassificationInUseException, NotAuthorizedException {\n+        classificationService.deleteClassification(classificationId);\n+        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n     }\n \n-    private BaseQuery.SortDirection getSortDirection(String order) {\n-        if (order.equals(DESC)) {\n-            return BaseQuery.SortDirection.DESCENDING;\n+    private ClassificationQuery applySortingParams(ClassificationQuery query, MultiValueMap<String, String> params)\n+        throws IllegalArgumentException {\n+        // sorting\n+        String sortBy = params.getFirst(SORT_BY);\n+        if (sortBy != null) {\n+            SortDirection sortDirection;\n+            if (params.getFirst(SORT_DIRECTION) != null && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n+                sortDirection = SortDirection.DESCENDING;\n+            } else {\n+                sortDirection = SortDirection.ASCENDING;\n+            }\n+            switch (sortBy) {\n+                case (CATEGORY):\n+                    query = query.orderByCategory(sortDirection);\n+                    break;\n+                case (DOMAIN):\n+                    query = query.orderByDomain(sortDirection);\n+                    break;\n+                case (KEY):\n+                    query = query.orderByKey(sortDirection);\n+                    break;\n+                case (NAME):\n+                    query = query.orderByName(sortDirection);\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n+            }\n         }\n-        return BaseQuery.SortDirection.ASCENDING;\n+        params.remove(SORT_BY);\n+        params.remove(SORT_DIRECTION);\n+        return query;\n     }\n \n-    private void addAttributeFilter(ClassificationQuery query,\n-        String name, String nameLike,\n-        String key, String category,\n-        String type, String domain) throws InvalidArgumentException {\n-        if (name != null) {\n-            query.nameIn(name);\n+    private ClassificationQuery applyFilterParams(ClassificationQuery query,\n+        MultiValueMap<String, String> params) throws InvalidArgumentException {\n+        if (params.containsKey(NAME)) {\n+            String[] names = extractCommaSeparatedFields(params.get(NAME));\n+            query.nameIn(names);\n+            params.remove(NAME);\n+        }\n+        if (params.containsKey(NAME_LIKE)) {\n+            query.nameLike(LIKE + params.get(NAME_LIKE).get(0) + LIKE);\n+            params.remove(NAME_LIKE);\n+        }\n+        if (params.containsKey(KEY)) {\n+            String[] names = extractCommaSeparatedFields(params.get(KEY));\n+            query.keyIn(names);\n+            params.remove(KEY);\n+        }\n+        if (params.containsKey(CATEGORY)) {\n+            String[] names = extractCommaSeparatedFields(params.get(CATEGORY));\n+            query.categoryIn(names);\n+            params.remove(CATEGORY);\n+        }\n+        if (params.containsKey(DOMAIN)) {\n+            String[] names = extractCommaSeparatedFields(params.get(DOMAIN));\n+            query.domainIn(names);\n+            params.remove(DOMAIN);\n+        }\n+        if (params.containsKey(TYPE)) {\n+            String[] names = extractCommaSeparatedFields(params.get(TYPE));\n+            query.typeIn(names);\n+            params.remove(TYPE);\n+        }\n+        if (params.containsKey(CUSTOM_1_LIKE)) {\n+            query.custom1Like(LIKE + params.get(CUSTOM_1_LIKE).get(0) + LIKE);\n+            params.remove(CUSTOM_1_LIKE);\n+        }\n+        if (params.containsKey(CUSTOM_2_LIKE)) {\n+            query.custom2Like(LIKE + params.get(CUSTOM_2_LIKE).get(0) + LIKE);\n+            params.remove(CUSTOM_2_LIKE);\n+        }\n+        if (params.containsKey(CUSTOM_3_LIKE)) {\n+            query.custom3Like(LIKE + params.get(CUSTOM_3_LIKE).get(0) + LIKE);\n+            params.remove(CUSTOM_3_LIKE);\n         }\n-        if (nameLike != null) {\n-            query.nameLike(LIKE + nameLike + LIKE);\n+        if (params.containsKey(CUSTOM_4_LIKE)) {\n+            query.custom4Like(LIKE + params.get(CUSTOM_4_LIKE).get(0) + LIKE);\n+            params.remove(CUSTOM_4_LIKE);\n         }\n-        if (key != null) {\n-            query.keyIn(key);\n+        if (params.containsKey(CUSTOM_5_LIKE)) {\n+            query.custom5Like(LIKE + params.get(CUSTOM_5_LIKE).get(0) + LIKE);\n+            params.remove(CUSTOM_5_LIKE);\n         }\n-        if (category != null) {\n-            query.categoryIn(category);\n+        if (params.containsKey(CUSTOM_6_LIKE)) {\n+            query.custom6Like(LIKE + params.get(CUSTOM_6_LIKE).get(0) + LIKE);\n+            params.remove(CUSTOM_6_LIKE);\n         }\n-        if (type != null) {\n-            query.typeIn(type);\n+        if (params.containsKey(CUSTOM_7_LIKE)) {\n+            query.custom7Like(LIKE + params.get(CUSTOM_7_LIKE).get(0) + LIKE);\n+            params.remove(CUSTOM_7_LIKE);\n         }\n-        if (domain != null) {\n-            query.domainIn(domain);\n+        if (params.containsKey(CUSTOM_8_LIKE)) {\n+            query.custom8Like(LIKE + params.get(CUSTOM_8_LIKE).get(0) + LIKE);\n+            params.remove(CUSTOM_8_LIKE);\n         }\n+        return query;\n     }\n \n }\n", "next_change": {"commit": "6a122c5afd634c262281e625b9f1d5875b71f07c", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\nindex b0ebae56e..b4e4a1e1d 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n", "chunk": "@@ -225,35 +225,35 @@ public class ClassificationController extends AbstractPagingController {\n             params.remove(TYPE);\n         }\n         if (params.containsKey(CUSTOM_1_LIKE)) {\n-            query.custom1Like(LIKE + params.get(CUSTOM_1_LIKE).get(0) + LIKE);\n+            query.customAttributeLike(\"1\", LIKE + params.get(CUSTOM_1_LIKE).get(0) + LIKE);\n             params.remove(CUSTOM_1_LIKE);\n         }\n         if (params.containsKey(CUSTOM_2_LIKE)) {\n-            query.custom2Like(LIKE + params.get(CUSTOM_2_LIKE).get(0) + LIKE);\n+            query.customAttributeLike(\"2\", LIKE + params.get(CUSTOM_2_LIKE).get(0) + LIKE);\n             params.remove(CUSTOM_2_LIKE);\n         }\n         if (params.containsKey(CUSTOM_3_LIKE)) {\n-            query.custom3Like(LIKE + params.get(CUSTOM_3_LIKE).get(0) + LIKE);\n+            query.customAttributeLike(\"3\", LIKE + params.get(CUSTOM_3_LIKE).get(0) + LIKE);\n             params.remove(CUSTOM_3_LIKE);\n         }\n         if (params.containsKey(CUSTOM_4_LIKE)) {\n-            query.custom4Like(LIKE + params.get(CUSTOM_4_LIKE).get(0) + LIKE);\n+            query.customAttributeLike(\"4\", LIKE + params.get(CUSTOM_4_LIKE).get(0) + LIKE);\n             params.remove(CUSTOM_4_LIKE);\n         }\n         if (params.containsKey(CUSTOM_5_LIKE)) {\n-            query.custom5Like(LIKE + params.get(CUSTOM_5_LIKE).get(0) + LIKE);\n+            query.customAttributeLike(\"5\", LIKE + params.get(CUSTOM_5_LIKE).get(0) + LIKE);\n             params.remove(CUSTOM_5_LIKE);\n         }\n         if (params.containsKey(CUSTOM_6_LIKE)) {\n-            query.custom6Like(LIKE + params.get(CUSTOM_6_LIKE).get(0) + LIKE);\n+            query.customAttributeLike(\"6\", LIKE + params.get(CUSTOM_6_LIKE).get(0) + LIKE);\n             params.remove(CUSTOM_6_LIKE);\n         }\n         if (params.containsKey(CUSTOM_7_LIKE)) {\n-            query.custom7Like(LIKE + params.get(CUSTOM_7_LIKE).get(0) + LIKE);\n+            query.customAttributeLike(\"7\", LIKE + params.get(CUSTOM_7_LIKE).get(0) + LIKE);\n             params.remove(CUSTOM_7_LIKE);\n         }\n         if (params.containsKey(CUSTOM_8_LIKE)) {\n-            query.custom8Like(LIKE + params.get(CUSTOM_8_LIKE).get(0) + LIKE);\n+            query.customAttributeLike(\"8\", LIKE + params.get(CUSTOM_8_LIKE).get(0) + LIKE);\n             params.remove(CUSTOM_8_LIKE);\n         }\n         return query;\n", "next_change": {"commit": "24a700b81dd383fd606785af81f37d2670bb84fe", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\nindex b4e4a1e1d..6c1733030 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n", "chunk": "@@ -256,6 +302,11 @@ public class ClassificationController extends AbstractPagingController {\n             query.customAttributeLike(\"8\", LIKE + params.get(CUSTOM_8_LIKE).get(0) + LIKE);\n             params.remove(CUSTOM_8_LIKE);\n         }\n+\n+        if(LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n+        }\n+\n         return query;\n     }\n \n", "next_change": {"commit": "8789dd5bf53e7f3712deb0fb85b68829e78724aa", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\nindex 6c1733030..8ffccfd08 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n", "chunk": "@@ -303,7 +303,7 @@ public class ClassificationController extends AbstractPagingController {\n             params.remove(CUSTOM_8_LIKE);\n         }\n \n-        if(LOGGER.isDebugEnabled()) {\n+        if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n         }\n \n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\nindex 8ffccfd08..adeb1a1a4 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n", "chunk": "@@ -37,277 +32,293 @@ import pro.taskana.exceptions.InvalidArgumentException;\n import pro.taskana.exceptions.NotAuthorizedException;\n import pro.taskana.rest.resource.ClassificationResource;\n import pro.taskana.rest.resource.ClassificationResourceAssembler;\n-import pro.taskana.rest.resource.ClassificationSummaryResource;\n-import pro.taskana.rest.resource.ClassificationSummaryResourcesAssembler;\n+import pro.taskana.rest.resource.ClassificationSummaryListResource;\n+import pro.taskana.rest.resource.ClassificationSummaryResourceAssembler;\n+import pro.taskana.rest.resource.PagedResources.PageMetadata;\n \n-/**\n- * Controller for all {@link Classification} related endpoints.\n- */\n+/** Controller for all {@link Classification} related endpoints. */\n @RestController\n @EnableHypermediaSupport(type = HypermediaType.HAL)\n-@RequestMapping(path = \"/v1/classifications\", produces = \"application/hal+json\")\n public class ClassificationController extends AbstractPagingController {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(ClassificationController.class);\n-\n-    private static final String LIKE = \"%\";\n-    private static final String NAME = \"name\";\n-    private static final String NAME_LIKE = \"name-like\";\n-    private static final String KEY = \"key\";\n-    private static final String DOMAIN = \"domain\";\n-    private static final String CATEGORY = \"category\";\n-    private static final String TYPE = \"type\";\n-    private static final String CUSTOM_1_LIKE = \"custom-1-like\";\n-    private static final String CUSTOM_2_LIKE = \"custom-2-like\";\n-    private static final String CUSTOM_3_LIKE = \"custom-3-like\";\n-    private static final String CUSTOM_4_LIKE = \"custom-4-like\";\n-    private static final String CUSTOM_5_LIKE = \"custom-5-like\";\n-    private static final String CUSTOM_6_LIKE = \"custom-6-like\";\n-    private static final String CUSTOM_7_LIKE = \"custom-7-like\";\n-    private static final String CUSTOM_8_LIKE = \"custom-8-like\";\n-\n-    private static final String SORT_BY = \"sort-by\";\n-    private static final String SORT_DIRECTION = \"order\";\n-\n-    private static final String PAGING_PAGE = \"page\";\n-    private static final String PAGING_PAGE_SIZE = \"page-size\";\n-\n-    @Autowired\n-    private ClassificationService classificationService;\n-\n-    @Autowired\n-    private ClassificationResourceAssembler classificationResourceAssembler;\n-\n-    @GetMapping\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<PagedResources<ClassificationSummaryResource>> getClassifications(\n-        @RequestParam MultiValueMap<String, String> params) throws InvalidArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to getClassifications(params= {})\", params);\n-        }\n-\n-        ClassificationQuery query = classificationService.createClassificationQuery();\n-        query = applySortingParams(query, params);\n-        query = applyFilterParams(query, params);\n-\n-        PageMetadata pageMetadata = null;\n-        List<ClassificationSummary> classificationSummaries = null;\n-        String page = params.getFirst(PAGING_PAGE);\n-        String pageSize = params.getFirst(PAGING_PAGE_SIZE);\n-        params.remove(PAGING_PAGE);\n-        params.remove(PAGING_PAGE_SIZE);\n-        validateNoInvalidParameterIsLeft(params);\n-        if (page != null && pageSize != null) {\n-            // paging\n-            long totalElements = query.count();\n-            pageMetadata = initPageMetadata(pageSize, page, totalElements);\n-            classificationSummaries = query.listPage((int) pageMetadata.getNumber(),\n-                (int) pageMetadata.getSize());\n-        } else if (page == null && pageSize == null) {\n-            // not paging\n-            classificationSummaries = query.list();\n-        } else {\n-            throw new InvalidArgumentException(\"Paging information is incomplete.\");\n-        }\n-\n-        ClassificationSummaryResourcesAssembler assembler = new ClassificationSummaryResourcesAssembler();\n-        PagedResources<ClassificationSummaryResource> pagedResources = assembler.toResources(classificationSummaries,\n-            pageMetadata);\n-\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getClassifications(), returning {}\", new ResponseEntity<>(pagedResources, HttpStatus.OK));\n-        }\n-\n-        return new ResponseEntity<>(pagedResources, HttpStatus.OK);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ClassificationController.class);\n+\n+  private static final String LIKE = \"%\";\n+\n+  private static final String NAME = \"name\";\n+\n+  private static final String NAME_LIKE = \"name-like\";\n+\n+  private static final String KEY = \"key\";\n+\n+  private static final String DOMAIN = \"domain\";\n+\n+  private static final String CATEGORY = \"category\";\n+\n+  private static final String TYPE = \"type\";\n+\n+  private static final String CUSTOM_1_LIKE = \"custom-1-like\";\n+\n+  private static final String CUSTOM_2_LIKE = \"custom-2-like\";\n+\n+  private static final String CUSTOM_3_LIKE = \"custom-3-like\";\n+\n+  private static final String CUSTOM_4_LIKE = \"custom-4-like\";\n+\n+  private static final String CUSTOM_5_LIKE = \"custom-5-like\";\n+\n+  private static final String CUSTOM_6_LIKE = \"custom-6-like\";\n+\n+  private static final String CUSTOM_7_LIKE = \"custom-7-like\";\n+\n+  private static final String CUSTOM_8_LIKE = \"custom-8-like\";\n+\n+  private static final String SORT_BY = \"sort-by\";\n+\n+  private static final String SORT_DIRECTION = \"order\";\n+\n+  private ClassificationService classificationService;\n+\n+  private ClassificationResourceAssembler classificationResourceAssembler;\n+\n+  private ClassificationSummaryResourceAssembler classificationSummaryResourceAssembler;\n+\n+  ClassificationController(\n+      ClassificationService classificationService,\n+      ClassificationResourceAssembler classificationResourceAssembler,\n+      ClassificationSummaryResourceAssembler classificationSummaryResourceAssembler) {\n+    this.classificationService = classificationService;\n+    this.classificationResourceAssembler = classificationResourceAssembler;\n+    this.classificationSummaryResourceAssembler = classificationSummaryResourceAssembler;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_CLASSIFICATIONS)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<ClassificationSummaryListResource> getClassifications(\n+      @RequestParam MultiValueMap<String, String> params) throws InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to getClassifications(params= {})\", params);\n+    }\n+\n+    ClassificationQuery query = classificationService.createClassificationQuery();\n+    query = applySortingParams(query, params);\n+    query = applyFilterParams(query, params);\n+\n+    PageMetadata pageMetadata = getPageMetadata(params, query);\n+    List<ClassificationSummary> classificationSummaries = getQueryList(query, pageMetadata);\n+\n+    ResponseEntity<ClassificationSummaryListResource> response =\n+        ResponseEntity.ok(\n+            classificationSummaryResourceAssembler.toResources(\n+                classificationSummaries, pageMetadata));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getClassifications(), returning {}\", response);\n     }\n \n-    @GetMapping(path = \"/{classificationId}\")\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<ClassificationResource> getClassification(@PathVariable String classificationId)\n-        throws ClassificationNotFoundException, NotAuthorizedException, ClassificationAlreadyExistException,\n-        ConcurrencyException, DomainNotFoundException, InvalidArgumentException {\n-        LOGGER.debug(\"Entry to getClassification(classificationId= {})\", classificationId);\n-        Classification classification = classificationService.getClassification(classificationId);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from getClassification(), returning {}\", ResponseEntity.status(HttpStatus.OK).body(classificationResourceAssembler.toResource(classification)));\n-        }\n-\n-        return ResponseEntity.status(HttpStatus.OK).body(classificationResourceAssembler.toResource(classification));\n+    return response;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_CLASSIFICATIONS_ID)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<ClassificationResource> getClassification(\n+      @PathVariable String classificationId) throws ClassificationNotFoundException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to getClassification(classificationId= {})\", classificationId);\n+    }\n+\n+    Classification classification = classificationService.getClassification(classificationId);\n+    ResponseEntity<ClassificationResource> response =\n+        ResponseEntity.ok(classificationResourceAssembler.toResource(classification));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getClassification(), returning {}\", response);\n     }\n \n-    @PostMapping\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<ClassificationResource> createClassification(\n-        @RequestBody ClassificationResource resource)\n-        throws NotAuthorizedException, ClassificationNotFoundException, ClassificationAlreadyExistException,\n-        ConcurrencyException, DomainNotFoundException, InvalidArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to createClassification(resource= {})\", resource);\n-        }\n-\n-        Classification classification = classificationResourceAssembler.toModel(resource);\n-        classification = classificationService.createClassification(classification);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from createClassification(), returning {}\", ResponseEntity.status(HttpStatus.CREATED)\n-                .body(classificationResourceAssembler.toResource(classification)));\n-        }\n-\n-        return ResponseEntity.status(HttpStatus.CREATED)\n+    return response;\n+  }\n+\n+  @PostMapping(path = Mapping.URL_CLASSIFICATIONS)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<ClassificationResource> createClassification(\n+      @RequestBody ClassificationResource resource)\n+      throws NotAuthorizedException, ClassificationAlreadyExistException, DomainNotFoundException,\n+          InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to createClassification(resource= {})\", resource);\n+    }\n+    Classification classification = classificationResourceAssembler.toModel(resource);\n+    classification = classificationService.createClassification(classification);\n+\n+    ResponseEntity<ClassificationResource> response =\n+        ResponseEntity.status(HttpStatus.CREATED)\n             .body(classificationResourceAssembler.toResource(classification));\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from createClassification(), returning {}\", response);\n+    }\n+\n+    return response;\n+  }\n+\n+  @PutMapping(path = Mapping.URL_CLASSIFICATIONS_ID)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<ClassificationResource> updateClassification(\n+      @PathVariable(value = \"classificationId\") String classificationId,\n+      @RequestBody ClassificationResource resource)\n+      throws NotAuthorizedException, ClassificationNotFoundException, ConcurrencyException,\n+          InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\n+          \"Entry to updateClassification(classificationId= {}, resource= {})\",\n+          classificationId,\n+          resource);\n     }\n \n-    @PutMapping(path = \"/{classificationId}\")\n-    @Transactional(rollbackFor = Exception.class)\n-    public ResponseEntity<ClassificationResource> updateClassification(\n-        @PathVariable(value = \"classificationId\") String classificationId, @RequestBody ClassificationResource resource)\n-        throws NotAuthorizedException, ClassificationNotFoundException, ConcurrencyException,\n-        ClassificationAlreadyExistException, DomainNotFoundException, InvalidArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to updateClassification(classificationId= {}, resource= {})\", classificationId, resource);\n-        }\n-\n-        ResponseEntity<ClassificationResource> result;\n-        if (classificationId.equals(resource.classificationId)) {\n-            Classification classification = classificationResourceAssembler.toModel(resource);\n-            classification = classificationService.updateClassification(classification);\n-            result = ResponseEntity.ok(classificationResourceAssembler.toResource(classification));\n-        } else {\n-            throw new InvalidArgumentException(\n-                \"ClassificationId ('\" + classificationId\n-                    + \"') of the URI is not identical with the classificationId ('\"\n-                    + resource.getClassificationId() + \"') of the object in the payload.\");\n-        }\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from updateClassification(), returning {}\", result);\n-        }\n-\n-        return result;\n+    ResponseEntity<ClassificationResource> result;\n+    if (classificationId.equals(resource.classificationId)) {\n+      Classification classification = classificationResourceAssembler.toModel(resource);\n+      classification = classificationService.updateClassification(classification);\n+      result = ResponseEntity.ok(classificationResourceAssembler.toResource(classification));\n+    } else {\n+      throw new InvalidArgumentException(\n+          \"ClassificationId ('\"\n+              + classificationId\n+              + \"') of the URI is not identical with the classificationId ('\"\n+              + resource.getClassificationId()\n+              + \"') of the object in the payload.\");\n     }\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from updateClassification(), returning {}\", result);\n+    }\n+\n+    return result;\n+  }\n+\n+  @DeleteMapping(path = Mapping.URL_CLASSIFICATIONS_ID)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<?> deleteClassification(@PathVariable String classificationId)\n+      throws ClassificationNotFoundException, ClassificationInUseException, NotAuthorizedException {\n+    LOGGER.debug(\"Entry to deleteClassification(classificationId= {})\", classificationId);\n+    classificationService.deleteClassification(classificationId);\n+    ResponseEntity<?> response = ResponseEntity.noContent().build();\n+    LOGGER.debug(\"Exit from deleteClassification(), returning {}\", response);\n+    return response;\n+  }\n+\n+  private ClassificationQuery applySortingParams(\n+      ClassificationQuery query, MultiValueMap<String, String> params)\n+      throws IllegalArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to applySortingParams(query= {}, params= {})\", query, params);\n+    }\n+\n+    // sorting\n+    String sortBy = params.getFirst(SORT_BY);\n+    if (sortBy != null) {\n+      SortDirection sortDirection;\n+      if (params.getFirst(SORT_DIRECTION) != null\n+          && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n+        sortDirection = SortDirection.DESCENDING;\n+      } else {\n+        sortDirection = SortDirection.ASCENDING;\n+      }\n+      switch (sortBy) {\n+        case (CATEGORY):\n+          query = query.orderByCategory(sortDirection);\n+          break;\n+        case (DOMAIN):\n+          query = query.orderByDomain(sortDirection);\n+          break;\n+        case (KEY):\n+          query = query.orderByKey(sortDirection);\n+          break;\n+        case (NAME):\n+          query = query.orderByName(sortDirection);\n+          break;\n+        default:\n+          throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n+      }\n+    }\n+    params.remove(SORT_BY);\n+    params.remove(SORT_DIRECTION);\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n+    }\n+\n+    return query;\n+  }\n \n-    @DeleteMapping(path = \"/{classificationId}\")\n-    @Transactional(readOnly = true, rollbackFor = Exception.class)\n-    public ResponseEntity<?> deleteClassification(@PathVariable String classificationId)\n-        throws ClassificationNotFoundException, ClassificationInUseException, NotAuthorizedException {\n-        LOGGER.debug(\"Entry to deleteClassification(classificationId= {})\", classificationId);\n-        classificationService.deleteClassification(classificationId);\n-        LOGGER.debug(\"Exit from deleteClassification(), returning {}\", ResponseEntity.status(HttpStatus.NO_CONTENT).build());\n-        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n+  private ClassificationQuery applyFilterParams(\n+      ClassificationQuery query, MultiValueMap<String, String> params)\n+      throws InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", query, params);\n     }\n \n-    private ClassificationQuery applySortingParams(ClassificationQuery query, MultiValueMap<String, String> params)\n-        throws IllegalArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to applySortingParams(query= {}, params= {})\", query, params);\n-        }\n-\n-        // sorting\n-        String sortBy = params.getFirst(SORT_BY);\n-        if (sortBy != null) {\n-            SortDirection sortDirection;\n-            if (params.getFirst(SORT_DIRECTION) != null && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n-                sortDirection = SortDirection.DESCENDING;\n-            } else {\n-                sortDirection = SortDirection.ASCENDING;\n-            }\n-            switch (sortBy) {\n-                case (CATEGORY):\n-                    query = query.orderByCategory(sortDirection);\n-                    break;\n-                case (DOMAIN):\n-                    query = query.orderByDomain(sortDirection);\n-                    break;\n-                case (KEY):\n-                    query = query.orderByKey(sortDirection);\n-                    break;\n-                case (NAME):\n-                    query = query.orderByName(sortDirection);\n-                    break;\n-                default:\n-                    throw new IllegalArgumentException(\"Unknown order '\" + sortBy + \"'\");\n-            }\n-        }\n-        params.remove(SORT_BY);\n-        params.remove(SORT_DIRECTION);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from applySortingParams(), returning {}\", query);\n-        }\n-\n-        return query;\n+    if (params.containsKey(NAME)) {\n+      String[] names = extractCommaSeparatedFields(params.get(NAME));\n+      query.nameIn(names);\n+      params.remove(NAME);\n+    }\n+    if (params.containsKey(NAME_LIKE)) {\n+      query.nameLike(LIKE + params.get(NAME_LIKE).get(0) + LIKE);\n+      params.remove(NAME_LIKE);\n+    }\n+    if (params.containsKey(KEY)) {\n+      String[] names = extractCommaSeparatedFields(params.get(KEY));\n+      query.keyIn(names);\n+      params.remove(KEY);\n+    }\n+    if (params.containsKey(CATEGORY)) {\n+      String[] names = extractCommaSeparatedFields(params.get(CATEGORY));\n+      query.categoryIn(names);\n+      params.remove(CATEGORY);\n+    }\n+    if (params.containsKey(DOMAIN)) {\n+      String[] names = extractCommaSeparatedFields(params.get(DOMAIN));\n+      query.domainIn(names);\n+      params.remove(DOMAIN);\n+    }\n+    if (params.containsKey(TYPE)) {\n+      String[] names = extractCommaSeparatedFields(params.get(TYPE));\n+      query.typeIn(names);\n+      params.remove(TYPE);\n+    }\n+    if (params.containsKey(CUSTOM_1_LIKE)) {\n+      query.customAttributeLike(\"1\", LIKE + params.get(CUSTOM_1_LIKE).get(0) + LIKE);\n+      params.remove(CUSTOM_1_LIKE);\n+    }\n+    if (params.containsKey(CUSTOM_2_LIKE)) {\n+      query.customAttributeLike(\"2\", LIKE + params.get(CUSTOM_2_LIKE).get(0) + LIKE);\n+      params.remove(CUSTOM_2_LIKE);\n+    }\n+    if (params.containsKey(CUSTOM_3_LIKE)) {\n+      query.customAttributeLike(\"3\", LIKE + params.get(CUSTOM_3_LIKE).get(0) + LIKE);\n+      params.remove(CUSTOM_3_LIKE);\n+    }\n+    if (params.containsKey(CUSTOM_4_LIKE)) {\n+      query.customAttributeLike(\"4\", LIKE + params.get(CUSTOM_4_LIKE).get(0) + LIKE);\n+      params.remove(CUSTOM_4_LIKE);\n+    }\n+    if (params.containsKey(CUSTOM_5_LIKE)) {\n+      query.customAttributeLike(\"5\", LIKE + params.get(CUSTOM_5_LIKE).get(0) + LIKE);\n+      params.remove(CUSTOM_5_LIKE);\n+    }\n+    if (params.containsKey(CUSTOM_6_LIKE)) {\n+      query.customAttributeLike(\"6\", LIKE + params.get(CUSTOM_6_LIKE).get(0) + LIKE);\n+      params.remove(CUSTOM_6_LIKE);\n+    }\n+    if (params.containsKey(CUSTOM_7_LIKE)) {\n+      query.customAttributeLike(\"7\", LIKE + params.get(CUSTOM_7_LIKE).get(0) + LIKE);\n+      params.remove(CUSTOM_7_LIKE);\n+    }\n+    if (params.containsKey(CUSTOM_8_LIKE)) {\n+      query.customAttributeLike(\"8\", LIKE + params.get(CUSTOM_8_LIKE).get(0) + LIKE);\n+      params.remove(CUSTOM_8_LIKE);\n     }\n \n-    private ClassificationQuery applyFilterParams(ClassificationQuery query,\n-        MultiValueMap<String, String> params) throws InvalidArgumentException {\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Entry to applyFilterParams(query= {}, params= {})\", query, params);\n-        }\n-\n-        if (params.containsKey(NAME)) {\n-            String[] names = extractCommaSeparatedFields(params.get(NAME));\n-            query.nameIn(names);\n-            params.remove(NAME);\n-        }\n-        if (params.containsKey(NAME_LIKE)) {\n-            query.nameLike(LIKE + params.get(NAME_LIKE).get(0) + LIKE);\n-            params.remove(NAME_LIKE);\n-        }\n-        if (params.containsKey(KEY)) {\n-            String[] names = extractCommaSeparatedFields(params.get(KEY));\n-            query.keyIn(names);\n-            params.remove(KEY);\n-        }\n-        if (params.containsKey(CATEGORY)) {\n-            String[] names = extractCommaSeparatedFields(params.get(CATEGORY));\n-            query.categoryIn(names);\n-            params.remove(CATEGORY);\n-        }\n-        if (params.containsKey(DOMAIN)) {\n-            String[] names = extractCommaSeparatedFields(params.get(DOMAIN));\n-            query.domainIn(names);\n-            params.remove(DOMAIN);\n-        }\n-        if (params.containsKey(TYPE)) {\n-            String[] names = extractCommaSeparatedFields(params.get(TYPE));\n-            query.typeIn(names);\n-            params.remove(TYPE);\n-        }\n-        if (params.containsKey(CUSTOM_1_LIKE)) {\n-            query.customAttributeLike(\"1\", LIKE + params.get(CUSTOM_1_LIKE).get(0) + LIKE);\n-            params.remove(CUSTOM_1_LIKE);\n-        }\n-        if (params.containsKey(CUSTOM_2_LIKE)) {\n-            query.customAttributeLike(\"2\", LIKE + params.get(CUSTOM_2_LIKE).get(0) + LIKE);\n-            params.remove(CUSTOM_2_LIKE);\n-        }\n-        if (params.containsKey(CUSTOM_3_LIKE)) {\n-            query.customAttributeLike(\"3\", LIKE + params.get(CUSTOM_3_LIKE).get(0) + LIKE);\n-            params.remove(CUSTOM_3_LIKE);\n-        }\n-        if (params.containsKey(CUSTOM_4_LIKE)) {\n-            query.customAttributeLike(\"4\", LIKE + params.get(CUSTOM_4_LIKE).get(0) + LIKE);\n-            params.remove(CUSTOM_4_LIKE);\n-        }\n-        if (params.containsKey(CUSTOM_5_LIKE)) {\n-            query.customAttributeLike(\"5\", LIKE + params.get(CUSTOM_5_LIKE).get(0) + LIKE);\n-            params.remove(CUSTOM_5_LIKE);\n-        }\n-        if (params.containsKey(CUSTOM_6_LIKE)) {\n-            query.customAttributeLike(\"6\", LIKE + params.get(CUSTOM_6_LIKE).get(0) + LIKE);\n-            params.remove(CUSTOM_6_LIKE);\n-        }\n-        if (params.containsKey(CUSTOM_7_LIKE)) {\n-            query.customAttributeLike(\"7\", LIKE + params.get(CUSTOM_7_LIKE).get(0) + LIKE);\n-            params.remove(CUSTOM_7_LIKE);\n-        }\n-        if (params.containsKey(CUSTOM_8_LIKE)) {\n-            query.customAttributeLike(\"8\", LIKE + params.get(CUSTOM_8_LIKE).get(0) + LIKE);\n-            params.remove(CUSTOM_8_LIKE);\n-        }\n-\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n-        }\n-\n-        return query;\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n     }\n \n+    return query;\n+  }\n }\n", "next_change": {"commit": "007f268be599fda8b884e002b7b03bb260c7620f", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\nindex adeb1a1a4..0c7e27808 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n", "chunk": "@@ -322,3 +322,4 @@ public class ClassificationController extends AbstractPagingController {\n     return query;\n   }\n }\n+\n", "next_change": {"commit": "5c7d38451ce7cbea2ad52d3b84be72d49c474c71", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\nindex 0c7e27808..f3903746f 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n", "chunk": "@@ -322,4 +323,3 @@ public class ClassificationController extends AbstractPagingController {\n     return query;\n   }\n }\n-\n", "next_change": {"commit": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\nindex f3903746f..ab4ad5faf 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java\n", "chunk": "@@ -320,6 +330,5 @@ public class ClassificationController extends AbstractPagingController {\n       LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", query);\n     }\n \n-    return query;\n   }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "e872c39340c4755c0ea85ddbdee17229b7494bf8", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311 seperated rest service"}, {"oid": "eaf15fd19c0b34abc699c6feedb1a216eeaade45", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311 fixed checkstyle"}, {"oid": "798e160669500dabdd3486c788774dea5592d271", "committedDate": "2018-02-28 17:05:56 +0100", "message": "TSK-311 refactoring"}, {"oid": "f4c29855d846b47fe161019b3ce7ec550527bc49", "committedDate": "2018-03-01 11:28:19 +0100", "message": "TSK-328: Add userId to NotAuthorizedException"}, {"oid": "a89d9a194525cdb66d62095cc9785741bce942ef", "committedDate": "2018-03-01 13:28:51 +0100", "message": "TSK-346: Add MODIFIED timestamp to Classification"}, {"oid": "e32a1acbc69755c99ee550ca7bd7457d3b04a248", "committedDate": "2018-03-01 14:41:10 +0100", "message": "TSK-341: No Exception when Classification-parent for ID does not exist"}, {"oid": "aef0e987e9831452efdbc0a739a0670a89350490", "committedDate": "2018-03-15 10:06:43 +0100", "message": "TSK-385:"}, {"oid": "5de0cd5e09fd3599254ec441b0ae72b91b6db423", "committedDate": "2018-03-15 17:08:22 +0100", "message": "TSK-382 add errorhandling to controllers"}, {"oid": "fd0bc96b9ddf44039d0b8ba7b1207f11ece5dfa1", "committedDate": "2018-03-23 10:19:16 +0100", "message": "TSK-398: domain is checked for existance during classification creation."}, {"oid": "df4638f2fce97e6181573e2d0117edd12c0dae23", "committedDate": "2018-03-29 16:31:45 +0200", "message": "TSK-400: added configuration of classification types."}, {"oid": "a311a6030189d8b07e66fe4a6640b8a0329de9cb", "committedDate": "2018-04-02 08:32:29 +0200", "message": "TSK-426"}, {"oid": "1d58cb39e1739aa900771328ada56c2b4a270d9c", "committedDate": "2018-04-06 13:25:05 +0200", "message": "TSK-422: HATEOAS support for ClassificationController."}, {"oid": "1dd6dcddf128d49988da639c4318f09818b4250e", "committedDate": "2018-04-12 12:42:07 +0200", "message": "TSK-433: Delete classification by id using REST API."}, {"oid": "c2b0ba5daf49b95ea8f5ac565040bc74485eb97b", "committedDate": "2018-05-09 10:39:25 +0200", "message": "TSK-478: custom field filter in classification REST service."}, {"oid": "30f72604c96b1312af763aa9d0bbfb38f875ec0a", "committedDate": "2018-05-14 08:29:39 +0200", "message": "TSK-482"}, {"oid": "3230e35c2cac340dde88a7c5e94853e5d580a6a6", "committedDate": "2018-06-11 11:25:31 +0200", "message": "TSK-512: Improve general exception handling"}, {"oid": "6a122c5afd634c262281e625b9f1d5875b71f07c", "committedDate": "2018-07-26 21:02:35 +0200", "message": "TSK-643: Summarize all custom-querys in task and classification"}, {"oid": "577ccaa648f52115c876706282d8434fe023f885", "committedDate": "2018-12-19 10:58:53 +0100", "message": "TSK-755 - Controller to get the simple history events"}, {"oid": "24a700b81dd383fd606785af81f37d2670bb84fe", "committedDate": "2019-01-22 13:22:01 +0100", "message": "TSK-769 - Improve the logger on both library and rest"}, {"oid": "8789dd5bf53e7f3712deb0fb85b68829e78724aa", "committedDate": "2019-02-01 13:50:43 +0100", "message": "TSK-775\t adapt code formatting to checkstyle template"}, {"oid": "cbc2ff16ac237bb923dbef4574b532bb20d90dcc", "committedDate": "2019-03-28 16:02:03 +0100", "message": "task/828: Unify and reduce the response and logger code in the controllers"}, {"oid": "aea64975dba98ebe04361ba7230f6bf186f2bcd8", "committedDate": "2019-05-07 08:24:49 +0200", "message": "feature/810 Add querying by planned date in monitor screen"}, {"oid": "1f3bd122b85018d28d8c9f53b8b439420dc380e1", "committedDate": "2019-06-04 15:36:26 +0200", "message": "TSK-850: reconfigrued taskana-rest-parent and taskana-rest-spring"}, {"oid": "aebd87b935fa739131d97336e5f3b6f3c6a99c5f", "committedDate": "2019-06-04 15:36:26 +0200", "message": "TSK-850: rebase cleanup"}, {"oid": "c216c4c3804c2c0d278515bf1d3817cd86badd5f", "committedDate": "2019-08-14 09:22:40 +0200", "message": "TSK-858: removed unnecessary throws declarations"}, {"oid": "352d0d67cd3480f62eca33c4e5b3014c26c63394", "committedDate": "2019-09-26 10:38:29 +0200", "message": "TSK-881: Refactored REST-Api"}, {"oid": "f68e730a72cfba413fc2102ef84ac513ed194cee", "committedDate": "2019-10-04 22:12:52 +0200", "message": "TSK-896: Removed _embedded from History"}, {"oid": "f848bf4f4ecb62ca72b330bee2e1e47c9e53a829", "committedDate": "2019-11-30 12:21:18 +0100", "message": "TSK-947: Extract Url mappings"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "3b13b9a95e4d7d1cf172f22fa0f2679ff1c5f79b", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 after initial refactoring"}, {"oid": "442385482236ad0c25830becbadddf30f6e7bf2d", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 fix dependent projects"}, {"oid": "38d5c8535c71f6929fda0a67e0a89e64c6f1bf16", "committedDate": "2020-02-11 14:07:00 +0100", "message": "TSK-1105 Make attributes in ClassificationResource private"}, {"oid": "007f268be599fda8b884e002b7b03bb260c7620f", "committedDate": "2020-02-11 17:05:34 +0100", "message": "TSK-1031: update Spring Boot to 2.2.4.RELEASE except Hateoas."}, {"oid": "95495e4894ee6a18f7561fa9965638131d51643c", "committedDate": "2020-02-12 15:31:34 +0100", "message": "TSK-1110: Enforce application/hal+json MediaType for classification and workbasket"}, {"oid": "5c7d38451ce7cbea2ad52d3b84be72d49c474c71", "committedDate": "2020-02-13 15:09:39 +0100", "message": "TSK-1094 introduce models package for */api and */internal"}, {"oid": "a8e44dead343598b7266254616a7f8559ee941ba", "committedDate": "2020-04-23 09:49:16 +0200", "message": "TSK-1083: Updated HATEOAS from version 0.24.0 to version 1.0.4"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1NjcwNQ==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422656705", "body": "please rename this property to `classificationSummary`", "bodyText": "please rename this property to classificationSummary", "bodyHTML": "<p dir=\"auto\">please rename this property to <code>classificationSummary</code></p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T14:59:13Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentSummaryRepresentationModel.java", "diffHunk": "@@ -5,29 +5,33 @@\n import pro.taskana.task.api.models.AttachmentSummary;\n import pro.taskana.task.api.models.ObjectReference;\n \n-/** EntityModel class for {@link AttachmentSummary}. */\n-public class AttachmentSummaryResource extends RepresentationModel<AttachmentSummaryResource> {\n+/**\n+ * EntityModel class for {@link AttachmentSummary}.\n+ */\n+public class AttachmentSummaryRepresentationModel\n+    extends RepresentationModel<AttachmentSummaryRepresentationModel> {\n \n-  private String attachmentId;\n-  private String taskId;\n-  private String created;\n-  private String modified;\n-  private ClassificationSummaryResource classificationSummaryResource;\n-  private ObjectReference objectReference;\n-  private String channel;\n-  private String received;\n+  protected String attachmentId;\n+  protected String taskId;\n+  protected String created;\n+  protected String modified;\n+  protected ClassificationSummaryRepresentationModel classificationSummaryRepresentationModel;", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentSummaryRepresentationModel.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentSummaryRepresentationModel.java\nindex 76caeedaf..040222224 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentSummaryRepresentationModel.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentSummaryRepresentationModel.java\n", "chunk": "@@ -15,7 +15,7 @@ public class AttachmentSummaryRepresentationModel\n   protected String taskId;\n   protected String created;\n   protected String modified;\n-  protected ClassificationSummaryRepresentationModel classificationSummaryRepresentationModel;\n+  protected ClassificationSummaryRepresentationModel classificationSummary;\n   protected ObjectReference objectReference;\n   protected String channel;\n   protected String received;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentSummaryRepresentationModel.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentSummaryRepresentationModel.java\nindex 76caeedaf..040222224 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentSummaryRepresentationModel.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/AttachmentSummaryRepresentationModel.java\n", "chunk": "@@ -15,7 +15,7 @@ public class AttachmentSummaryRepresentationModel\n   protected String taskId;\n   protected String created;\n   protected String modified;\n-  protected ClassificationSummaryRepresentationModel classificationSummaryRepresentationModel;\n+  protected ClassificationSummaryRepresentationModel classificationSummary;\n   protected ObjectReference objectReference;\n   protected String channel;\n   protected String received;\n", "next_change": null}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1NzQxMw==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422657413", "body": "This is a duplicate of `toModel` Please replace its usage with a `toModel` call", "bodyText": "This is a duplicate of toModel Please replace its usage with a toModel call", "bodyHTML": "<p dir=\"auto\">This is a duplicate of <code>toModel</code> Please replace its usage with a <code>toModel</code> call</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:04:52Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/ClassificationRepresentationModelAssembler.java", "diffHunk": "@@ -17,30 +17,32 @@\n import pro.taskana.rest.ClassificationController;\n \n /**\n- * Transforms {@link Classification} to its resource counterpart {@link ClassificationResource} and\n- * vice versa.\n+ * Transforms {@link Classification} to its resource counterpart {@link\n+ * ClassificationRepresentationModel} and vice versa.\n  */\n @Component\n-public class ClassificationResourceAssembler\n-    extends RepresentationModelAssemblerSupport<Classification, ClassificationResource> {\n+public class ClassificationRepresentationModelAssembler\n+    implements RepresentationModelAssembler<Classification, ClassificationRepresentationModel> {\n \n   final ClassificationService classificationService;\n \n   @Autowired\n-  public ClassificationResourceAssembler(ClassificationService classificationService) {\n-    super(ClassificationController.class, ClassificationResource.class);\n+  public ClassificationRepresentationModelAssembler(\n+      ClassificationService classificationService) {\n     this.classificationService = classificationService;\n   }\n \n-  public ClassificationResource toDefinition(Classification classification) {\n-    ClassificationResource resource = new ClassificationResource(classification);\n+  public ClassificationRepresentationModel toDefinition(Classification classification) {", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/ClassificationRepresentationModelAssembler.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/ClassificationRepresentationModelAssembler.java\nindex dd5d406a7..bad9966ae 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/ClassificationRepresentationModelAssembler.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/ClassificationRepresentationModelAssembler.java\n", "chunk": "@@ -32,15 +33,9 @@ public class ClassificationRepresentationModelAssembler\n     this.classificationService = classificationService;\n   }\n \n-  public ClassificationRepresentationModel toDefinition(Classification classification) {\n-    ClassificationRepresentationModel resource =\n-        new ClassificationRepresentationModel(classification);\n-    resource.add(\n-        linkTo(ClassificationController.class).slash(classification.getId()).withSelfRel());\n-    return resource;\n-  }\n-\n-  public ClassificationRepresentationModel toModel(Classification classification) {\n+  @NonNull\n+  @Override\n+  public ClassificationRepresentationModel toModel(@NonNull Classification classification) {\n     ClassificationRepresentationModel resource =\n         new ClassificationRepresentationModel(classification);\n     try {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/ClassificationRepresentationModelAssembler.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/ClassificationRepresentationModelAssembler.java\nindex dd5d406a7..bad9966ae 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/ClassificationRepresentationModelAssembler.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/ClassificationRepresentationModelAssembler.java\n", "chunk": "@@ -32,15 +33,9 @@ public class ClassificationRepresentationModelAssembler\n     this.classificationService = classificationService;\n   }\n \n-  public ClassificationRepresentationModel toDefinition(Classification classification) {\n-    ClassificationRepresentationModel resource =\n-        new ClassificationRepresentationModel(classification);\n-    resource.add(\n-        linkTo(ClassificationController.class).slash(classification.getId()).withSelfRel());\n-    return resource;\n-  }\n-\n-  public ClassificationRepresentationModel toModel(Classification classification) {\n+  @NonNull\n+  @Override\n+  public ClassificationRepresentationModel toModel(@NonNull Classification classification) {\n     ClassificationRepresentationModel resource =\n         new ClassificationRepresentationModel(classification);\n     try {\n", "next_change": {"commit": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/ClassificationRepresentationModelAssembler.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/classification/rest/assembler/ClassificationRepresentationModelAssembler.java\nsimilarity index 87%\nrename from rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/ClassificationRepresentationModelAssembler.java\nrename to rest/taskana-rest-spring/src/main/java/pro/taskana/classification/rest/assembler/ClassificationRepresentationModelAssembler.java\nindex bad9966ae..71ce8ab96 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/ClassificationRepresentationModelAssembler.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/classification/rest/assembler/ClassificationRepresentationModelAssembler.java\n", "chunk": "@@ -40,7 +41,8 @@ public class ClassificationRepresentationModelAssembler\n         new ClassificationRepresentationModel(classification);\n     try {\n       resource.add(\n-          linkTo(methodOn(ClassificationController.class).getClassification(classification.getId()))\n+          WebMvcLinkBuilder.linkTo(\n+              methodOn(ClassificationController.class).getClassification(classification.getId()))\n               .withSelfRel());\n     } catch (ClassificationNotFoundException e) {\n       throw new SystemException(\"caught unexpected Exception.\", e.getCause());\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1ODIwMg==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422658202", "body": "I think It's a lot cooler to catch a generic Exception. What do you think?", "bodyText": "I think It's a lot cooler to catch a generic Exception. What do you think?", "bodyHTML": "<p dir=\"auto\">I think It's a lot cooler to catch a generic Exception. What do you think?</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:11:25Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package pro.taskana.rest.resource;\n+\n+import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;\n+import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;\n+import static pro.taskana.rest.resource.TaskanaPagedModelKeys.TASK_COMMENTS;\n+\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.hateoas.PagedModel.PageMetadata;\n+import org.springframework.hateoas.server.RepresentationModelAssembler;\n+import org.springframework.stereotype.Component;\n+\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.rest.Mapping;\n+import pro.taskana.rest.TaskCommentController;\n+import pro.taskana.rest.resource.links.PageLinks;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+/** EntityModel assembler for {@link TaskCommentRepresentationModel}. */\n+@Component\n+public class TaskCommentRepresentationModelAssembler\n+    implements RepresentationModelAssembler<TaskComment, TaskCommentRepresentationModel> {\n+\n+  private final TaskService taskService;\n+\n+  @Autowired\n+  public TaskCommentRepresentationModelAssembler(TaskService taskService) {\n+    this.taskService = taskService;\n+  }\n+\n+  @Override\n+  public TaskCommentRepresentationModel toModel(TaskComment taskComment) {\n+    TaskCommentRepresentationModel taskCommentRepresentationModel =\n+        new TaskCommentRepresentationModel(taskComment);\n+    try {\n+      taskCommentRepresentationModel.add(\n+          linkTo(methodOn(TaskCommentController.class).getTaskComment(taskComment.getId()))\n+              .withSelfRel());\n+    } catch (TaskCommentNotFoundException", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5NTc0NQ==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r423495745", "bodyText": "As in correspondance with @gitgoodjhe:\nin cases in which there are several exceptions that all get treated the same, there is a case to be made for an allencompassing generic exception. however in other cases this is a bad practice and the more specific exception should be caught.", "author": "krozzus", "createdAt": "2020-05-12T06:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1ODIwMg=="}], "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java\nindex 230ba981e..f30cff93e 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java\n", "chunk": "@@ -37,8 +38,9 @@ public class TaskCommentRepresentationModelAssembler\n     this.taskService = taskService;\n   }\n \n+  @NonNull\n   @Override\n-  public TaskCommentRepresentationModel toModel(TaskComment taskComment) {\n+  public TaskCommentRepresentationModel toModel(@NonNull TaskComment taskComment) {\n     TaskCommentRepresentationModel taskCommentRepresentationModel =\n         new TaskCommentRepresentationModel(taskComment);\n     try {\n", "next_change": {"commit": "1c2ecd9dbc424646f26ac3e4174ee913b470d45f", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java\nindex f30cff93e..0f62162e9 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java\n", "chunk": "@@ -47,10 +43,7 @@ public class TaskCommentRepresentationModelAssembler\n       taskCommentRepresentationModel.add(\n           linkTo(methodOn(TaskCommentController.class).getTaskComment(taskComment.getId()))\n               .withSelfRel());\n-    } catch (TaskCommentNotFoundException\n-        | TaskNotFoundException\n-        | NotAuthorizedException\n-        | InvalidArgumentException e) {\n+    } catch (Exception e) {\n       throw new SystemException(\"caught unexpected Exception.\", e.getCause());\n     }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java\nindex 230ba981e..767e9fe74 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java\n", "chunk": "@@ -37,18 +34,16 @@ public class TaskCommentRepresentationModelAssembler\n     this.taskService = taskService;\n   }\n \n+  @NonNull\n   @Override\n-  public TaskCommentRepresentationModel toModel(TaskComment taskComment) {\n+  public TaskCommentRepresentationModel toModel(@NonNull TaskComment taskComment) {\n     TaskCommentRepresentationModel taskCommentRepresentationModel =\n         new TaskCommentRepresentationModel(taskComment);\n     try {\n       taskCommentRepresentationModel.add(\n           linkTo(methodOn(TaskCommentController.class).getTaskComment(taskComment.getId()))\n               .withSelfRel());\n-    } catch (TaskCommentNotFoundException\n-        | TaskNotFoundException\n-        | NotAuthorizedException\n-        | InvalidArgumentException e) {\n+    } catch (Exception e) {\n       throw new SystemException(\"caught unexpected Exception.\", e.getCause());\n     }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1OTE0NQ==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422659145", "body": "Please rename field to `classificationSummary`\r\n", "bodyText": "Please rename field to classificationSummary", "bodyHTML": "<p dir=\"auto\">Please rename field to <code>classificationSummary</code></p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:19:09Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskSummaryRepresentationModel.java", "diffHunk": "@@ -4,61 +4,64 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.springframework.hateoas.RepresentationModel;\n-import org.springframework.hateoas.server.core.Relation;\n \n import pro.taskana.common.api.exceptions.InvalidArgumentException;\n import pro.taskana.task.api.TaskState;\n import pro.taskana.task.api.models.ObjectReference;\n import pro.taskana.task.api.models.TaskSummary;\n import pro.taskana.workbasket.api.models.WorkbasketSummary;\n \n-/** EntityModel class for {@link WorkbasketSummary}. */\n-@Relation(collectionRelation = \"tasks\")\n-public class TaskSummaryResource extends RepresentationModel<TaskSummaryResource> {\n-\n-  private String taskId;\n-  private String externalId;\n-  private String created; // ISO-8601\n-  private String claimed; // ISO-8601\n-  private String completed; // ISO-8601\n-  private String modified; // ISO-8601\n-  private String planned; // ISO-8601\n-  private String due; // ISO-8601\n-  private String name;\n-  private String creator;\n-  private String note;\n-  private String description;\n-  private int priority;\n-  private TaskState state;\n-  private ClassificationSummaryResource classificationSummaryResource;\n-  private WorkbasketSummaryResource workbasketSummaryResource;\n-  private String businessProcessId;\n-  private String parentBusinessProcessId;\n-  private String owner;\n-  private ObjectReference primaryObjRef;\n-  private boolean isRead;\n-  private boolean isTransferred;\n-  private List<AttachmentSummaryResource> attachmentSummaryResources = new ArrayList<>();\n-  private String custom1;\n-  private String custom2;\n-  private String custom3;\n-  private String custom4;\n-  private String custom5;\n-  private String custom6;\n-  private String custom7;\n-  private String custom8;\n-  private String custom9;\n-  private String custom10;\n-  private String custom11;\n-  private String custom12;\n-  private String custom13;\n-  private String custom14;\n-  private String custom15;\n-  private String custom16;\n-\n-  TaskSummaryResource() {}\n-\n-  public TaskSummaryResource(TaskSummary taskSummary) throws InvalidArgumentException {\n+/**\n+ * EntityModel class for {@link WorkbasketSummary}.\n+ */\n+public class TaskSummaryRepresentationModel\n+    extends RepresentationModel<TaskSummaryRepresentationModel> {\n+\n+  protected String taskId;\n+  protected String externalId;\n+  protected String created; // ISO-8601\n+  protected String claimed; // ISO-8601\n+  protected String completed; // ISO-8601\n+  protected String modified; // ISO-8601\n+  protected String planned; // ISO-8601\n+  protected String due; // ISO-8601\n+  protected String name;\n+  protected String creator;\n+  protected String note;\n+  protected String description;\n+  protected int priority;\n+  protected TaskState state;\n+  protected ClassificationSummaryRepresentationModel classificationSummaryRepresentationModel;", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskSummaryRepresentationModel.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskSummaryRepresentationModel.java\nindex fe11387b7..ce4598e1f 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskSummaryRepresentationModel.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskSummaryRepresentationModel.java\n", "chunk": "@@ -31,8 +31,8 @@ public class TaskSummaryRepresentationModel\n   protected String description;\n   protected int priority;\n   protected TaskState state;\n-  protected ClassificationSummaryRepresentationModel classificationSummaryRepresentationModel;\n-  protected WorkbasketSummaryRepresentationModel workbasketSummaryRepresentationModel;\n+  protected ClassificationSummaryRepresentationModel classificationSummary;\n+  protected WorkbasketSummaryRepresentationModel workbasketSummary;\n   protected String businessProcessId;\n   protected String parentBusinessProcessId;\n   protected String owner;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskSummaryRepresentationModel.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskSummaryRepresentationModel.java\nindex fe11387b7..ce4598e1f 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskSummaryRepresentationModel.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskSummaryRepresentationModel.java\n", "chunk": "@@ -31,8 +31,8 @@ public class TaskSummaryRepresentationModel\n   protected String description;\n   protected int priority;\n   protected TaskState state;\n-  protected ClassificationSummaryRepresentationModel classificationSummaryRepresentationModel;\n-  protected WorkbasketSummaryRepresentationModel workbasketSummaryRepresentationModel;\n+  protected ClassificationSummaryRepresentationModel classificationSummary;\n+  protected WorkbasketSummaryRepresentationModel workbasketSummary;\n   protected String businessProcessId;\n   protected String parentBusinessProcessId;\n   protected String owner;\n", "next_change": null}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1OTE2Mg==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422659162", "body": "Please rename field to `workbasketSummary`", "bodyText": "Please rename field to workbasketSummary", "bodyHTML": "<p dir=\"auto\">Please rename field to <code>workbasketSummary</code></p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:19:23Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskSummaryRepresentationModel.java", "diffHunk": "@@ -4,61 +4,64 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.springframework.hateoas.RepresentationModel;\n-import org.springframework.hateoas.server.core.Relation;\n \n import pro.taskana.common.api.exceptions.InvalidArgumentException;\n import pro.taskana.task.api.TaskState;\n import pro.taskana.task.api.models.ObjectReference;\n import pro.taskana.task.api.models.TaskSummary;\n import pro.taskana.workbasket.api.models.WorkbasketSummary;\n \n-/** EntityModel class for {@link WorkbasketSummary}. */\n-@Relation(collectionRelation = \"tasks\")\n-public class TaskSummaryResource extends RepresentationModel<TaskSummaryResource> {\n-\n-  private String taskId;\n-  private String externalId;\n-  private String created; // ISO-8601\n-  private String claimed; // ISO-8601\n-  private String completed; // ISO-8601\n-  private String modified; // ISO-8601\n-  private String planned; // ISO-8601\n-  private String due; // ISO-8601\n-  private String name;\n-  private String creator;\n-  private String note;\n-  private String description;\n-  private int priority;\n-  private TaskState state;\n-  private ClassificationSummaryResource classificationSummaryResource;\n-  private WorkbasketSummaryResource workbasketSummaryResource;\n-  private String businessProcessId;\n-  private String parentBusinessProcessId;\n-  private String owner;\n-  private ObjectReference primaryObjRef;\n-  private boolean isRead;\n-  private boolean isTransferred;\n-  private List<AttachmentSummaryResource> attachmentSummaryResources = new ArrayList<>();\n-  private String custom1;\n-  private String custom2;\n-  private String custom3;\n-  private String custom4;\n-  private String custom5;\n-  private String custom6;\n-  private String custom7;\n-  private String custom8;\n-  private String custom9;\n-  private String custom10;\n-  private String custom11;\n-  private String custom12;\n-  private String custom13;\n-  private String custom14;\n-  private String custom15;\n-  private String custom16;\n-\n-  TaskSummaryResource() {}\n-\n-  public TaskSummaryResource(TaskSummary taskSummary) throws InvalidArgumentException {\n+/**\n+ * EntityModel class for {@link WorkbasketSummary}.\n+ */\n+public class TaskSummaryRepresentationModel\n+    extends RepresentationModel<TaskSummaryRepresentationModel> {\n+\n+  protected String taskId;\n+  protected String externalId;\n+  protected String created; // ISO-8601\n+  protected String claimed; // ISO-8601\n+  protected String completed; // ISO-8601\n+  protected String modified; // ISO-8601\n+  protected String planned; // ISO-8601\n+  protected String due; // ISO-8601\n+  protected String name;\n+  protected String creator;\n+  protected String note;\n+  protected String description;\n+  protected int priority;\n+  protected TaskState state;\n+  protected ClassificationSummaryRepresentationModel classificationSummaryRepresentationModel;\n+  protected WorkbasketSummaryRepresentationModel workbasketSummaryRepresentationModel;", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskSummaryRepresentationModel.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskSummaryRepresentationModel.java\nindex fe11387b7..ce4598e1f 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskSummaryRepresentationModel.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskSummaryRepresentationModel.java\n", "chunk": "@@ -31,8 +31,8 @@ public class TaskSummaryRepresentationModel\n   protected String description;\n   protected int priority;\n   protected TaskState state;\n-  protected ClassificationSummaryRepresentationModel classificationSummaryRepresentationModel;\n-  protected WorkbasketSummaryRepresentationModel workbasketSummaryRepresentationModel;\n+  protected ClassificationSummaryRepresentationModel classificationSummary;\n+  protected WorkbasketSummaryRepresentationModel workbasketSummary;\n   protected String businessProcessId;\n   protected String parentBusinessProcessId;\n   protected String owner;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskSummaryRepresentationModel.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskSummaryRepresentationModel.java\nindex fe11387b7..ce4598e1f 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskSummaryRepresentationModel.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskSummaryRepresentationModel.java\n", "chunk": "@@ -31,8 +31,8 @@ public class TaskSummaryRepresentationModel\n   protected String description;\n   protected int priority;\n   protected TaskState state;\n-  protected ClassificationSummaryRepresentationModel classificationSummaryRepresentationModel;\n-  protected WorkbasketSummaryRepresentationModel workbasketSummaryRepresentationModel;\n+  protected ClassificationSummaryRepresentationModel classificationSummary;\n+  protected WorkbasketSummaryRepresentationModel workbasketSummary;\n   protected String businessProcessId;\n   protected String parentBusinessProcessId;\n   protected String owner;\n", "next_change": null}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1OTcyMQ==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422659721", "body": "We are using camelCase everywhere. Can we replace this with `taskComments`. @gitgoodjhe we need your input here", "bodyText": "We are using camelCase everywhere. Can we replace this with taskComments. @gitgoodjhe we need your input here", "bodyHTML": "<p dir=\"auto\">We are using camelCase everywhere. Can we replace this with <code>taskComments</code>. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/gitgoodjhe/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gitgoodjhe\">@gitgoodjhe</a> we need your input here</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:23:41Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package pro.taskana.rest.resource;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+public enum TaskanaPagedModelKeys {\n+  ACCESSITEMS(\"accessItems\"),\n+  CLASSIFICATIONS(\"classifications\"),\n+  DISTRIBUTIONTARGETS(\"distributionTargets\"),\n+  TASKS(\"tasks\"),\n+  TASK_COMMENTS(\"task_comments\"),", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\nindex d106257ec..c78867835 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\n", "chunk": "@@ -11,7 +11,7 @@ public enum TaskanaPagedModelKeys {\n   CLASSIFICATIONS(\"classifications\"),\n   DISTRIBUTIONTARGETS(\"distributionTargets\"),\n   TASKS(\"tasks\"),\n-  TASK_COMMENTS(\"task_comments\"),\n+  TASKCOMMENTS(\"taskComments\"),\n   WORKBASKETS(\"workbaskets\");\n \n   private static final Map<String, TaskanaPagedModelKeys> PROPERTY_MAP =\n", "next_change": {"commit": "917535fbc017b6e7d19dfc57d60466e404d57c33", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\nindex c78867835..35c4a2089 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\n", "chunk": "@@ -9,9 +9,9 @@ import java.util.stream.Collectors;\n public enum TaskanaPagedModelKeys {\n   ACCESSITEMS(\"accessItems\"),\n   CLASSIFICATIONS(\"classifications\"),\n-  DISTRIBUTIONTARGETS(\"distributionTargets\"),\n+  DISTRIBUTION_TARGETS(\"distributionTargets\"),\n   TASKS(\"tasks\"),\n-  TASKCOMMENTS(\"taskComments\"),\n+  TASK_COMMENTS(\"taskComments\"),\n   WORKBASKETS(\"workbaskets\");\n \n   private static final Map<String, TaskanaPagedModelKeys> PROPERTY_MAP =\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\nindex d106257ec..35c4a2089 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\n", "chunk": "@@ -9,9 +9,9 @@ import java.util.stream.Collectors;\n public enum TaskanaPagedModelKeys {\n   ACCESSITEMS(\"accessItems\"),\n   CLASSIFICATIONS(\"classifications\"),\n-  DISTRIBUTIONTARGETS(\"distributionTargets\"),\n+  DISTRIBUTION_TARGETS(\"distributionTargets\"),\n   TASKS(\"tasks\"),\n-  TASK_COMMENTS(\"task_comments\"),\n+  TASK_COMMENTS(\"taskComments\"),\n   WORKBASKETS(\"workbaskets\");\n \n   private static final Map<String, TaskanaPagedModelKeys> PROPERTY_MAP =\n", "next_change": null}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDIwOA==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422660208", "body": "Why are we ignoring markedForDeletion?", "bodyText": "Why are we ignoring markedForDeletion?", "bodyHTML": "<p dir=\"auto\">Why are we ignoring markedForDeletion?</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:27:13Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package pro.taskana.rest.resource;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+\n+import pro.taskana.workbasket.api.models.Workbasket;\n+\n+/**\n+ * EntityModel class for {@link Workbasket}.\n+ */\n+@JsonIgnoreProperties(\"markedForDeletion\")", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDM4OQ==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422660389", "bodyText": "@holgerhagen Is there a reason why the markedForDeletion is only shown in the summary?", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:28:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyOTE3Mg==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r423529172", "bodyText": "this is a bug and has been fixed as part of the latest commit", "author": "krozzus", "createdAt": "2020-05-12T07:46:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDIwOA=="}], "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\nindex 10f5498dd..efd3abd5d 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n", "chunk": "@@ -1,13 +1,10 @@\n package pro.taskana.rest.resource;\n \n-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n-\n import pro.taskana.workbasket.api.models.Workbasket;\n \n /**\n  * EntityModel class for {@link Workbasket}.\n  */\n-@JsonIgnoreProperties(\"markedForDeletion\")\n public class WorkbasketRepresentationModel\n     extends WorkbasketSummaryRepresentationModel {\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\nindex 10f5498dd..efd3abd5d 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n", "chunk": "@@ -1,13 +1,10 @@\n package pro.taskana.rest.resource;\n \n-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n-\n import pro.taskana.workbasket.api.models.Workbasket;\n \n /**\n  * EntityModel class for {@link Workbasket}.\n  */\n-@JsonIgnoreProperties(\"markedForDeletion\")\n public class WorkbasketRepresentationModel\n     extends WorkbasketSummaryRepresentationModel {\n \n", "next_change": {"commit": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/models/WorkbasketRepresentationModel.java\nsimilarity index 90%\nrename from rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\nrename to rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/models/WorkbasketRepresentationModel.java\nindex efd3abd5d..0355805c9 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/models/WorkbasketRepresentationModel.java\n", "chunk": "@@ -12,8 +12,7 @@ public class WorkbasketRepresentationModel\n   private String created; // ISO-8601\n   private String modified; // ISO-8601\n \n-  @SuppressWarnings(\"unused\") //Mandatory for Jackson\n-  protected WorkbasketRepresentationModel() {\n+  public WorkbasketRepresentationModel() {\n   }\n \n   public WorkbasketRepresentationModel(Workbasket workbasket) {\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MTE4NA==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422661184", "body": "- please make this constructor private\r\n- please use the `@Supresswarnings(\"unused\")` annotation\r\n- please comment that this constructor exists for jackson", "bodyText": "please make this constructor private\nplease use the @Supresswarnings(\"unused\") annotation\nplease comment that this constructor exists for jackson", "bodyHTML": "<ul dir=\"auto\">\n<li>please make this constructor private</li>\n<li>please use the <code>@Supresswarnings(\"unused\")</code> annotation</li>\n<li>please comment that this constructor exists for jackson</li>\n</ul>", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:35:06Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package pro.taskana.rest.resource;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+\n+import pro.taskana.workbasket.api.models.Workbasket;\n+\n+/**\n+ * EntityModel class for {@link Workbasket}.\n+ */\n+@JsonIgnoreProperties(\"markedForDeletion\")\n+public class WorkbasketRepresentationModel\n+    extends WorkbasketSummaryRepresentationModel {\n+\n+\n+  private String created; // ISO-8601\n+  private String modified; // ISO-8601\n+\n+\n+  public WorkbasketRepresentationModel() {", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5ODY4Mw==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422898683", "bodyText": "will be implemented as protected, else the tests and WorkbasketRepresentationModelWithoutLinks cause issues", "author": "krozzus", "createdAt": "2020-05-11T09:13:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MTE4NA=="}], "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\nindex 10f5498dd..efd3abd5d 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n", "chunk": "@@ -15,8 +12,8 @@ public class WorkbasketRepresentationModel\n   private String created; // ISO-8601\n   private String modified; // ISO-8601\n \n-\n-  public WorkbasketRepresentationModel() {\n+  @SuppressWarnings(\"unused\") //Mandatory for Jackson\n+  protected WorkbasketRepresentationModel() {\n   }\n \n   public WorkbasketRepresentationModel(Workbasket workbasket) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\nindex 10f5498dd..efd3abd5d 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n", "chunk": "@@ -15,8 +12,8 @@ public class WorkbasketRepresentationModel\n   private String created; // ISO-8601\n   private String modified; // ISO-8601\n \n-\n-  public WorkbasketRepresentationModel() {\n+  @SuppressWarnings(\"unused\") //Mandatory for Jackson\n+  protected WorkbasketRepresentationModel() {\n   }\n \n   public WorkbasketRepresentationModel(Workbasket workbasket) {\n", "next_change": {"commit": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/models/WorkbasketRepresentationModel.java\nsimilarity index 90%\nrename from rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\nrename to rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/models/WorkbasketRepresentationModel.java\nindex efd3abd5d..0355805c9 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/models/WorkbasketRepresentationModel.java\n", "chunk": "@@ -12,8 +12,7 @@ public class WorkbasketRepresentationModel\n   private String created; // ISO-8601\n   private String modified; // ISO-8601\n \n-  @SuppressWarnings(\"unused\") //Mandatory for Jackson\n-  protected WorkbasketRepresentationModel() {\n+  public WorkbasketRepresentationModel() {\n   }\n \n   public WorkbasketRepresentationModel(Workbasket workbasket) {\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MTM4MQ==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422661381", "body": "We can configure jackson to serialize Instant data types. Can you write this down in our list of TODO's?\r\nPersonally I think having a String here is somewhat bad.", "bodyText": "We can configure jackson to serialize Instant data types. Can you write this down in our list of TODO's?\nPersonally I think having a String here is somewhat bad.", "bodyHTML": "<p dir=\"auto\">We can configure jackson to serialize Instant data types. Can you write this down in our list of TODO's?<br>\nPersonally I think having a String here is somewhat bad.</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:36:48Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package pro.taskana.rest.resource;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+\n+import pro.taskana.workbasket.api.models.Workbasket;\n+\n+/**\n+ * EntityModel class for {@link Workbasket}.\n+ */\n+@JsonIgnoreProperties(\"markedForDeletion\")\n+public class WorkbasketRepresentationModel\n+    extends WorkbasketSummaryRepresentationModel {\n+\n+\n+  private String created; // ISO-8601", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\nindex 10f5498dd..efd3abd5d 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n", "chunk": "@@ -1,13 +1,10 @@\n package pro.taskana.rest.resource;\n \n-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n-\n import pro.taskana.workbasket.api.models.Workbasket;\n \n /**\n  * EntityModel class for {@link Workbasket}.\n  */\n-@JsonIgnoreProperties(\"markedForDeletion\")\n public class WorkbasketRepresentationModel\n     extends WorkbasketSummaryRepresentationModel {\n \n", "next_change": null}, {"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\nindex 10f5498dd..efd3abd5d 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n", "chunk": "@@ -15,8 +12,8 @@ public class WorkbasketRepresentationModel\n   private String created; // ISO-8601\n   private String modified; // ISO-8601\n \n-\n-  public WorkbasketRepresentationModel() {\n+  @SuppressWarnings(\"unused\") //Mandatory for Jackson\n+  protected WorkbasketRepresentationModel() {\n   }\n \n   public WorkbasketRepresentationModel(Workbasket workbasket) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\nindex 10f5498dd..efd3abd5d 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n", "chunk": "@@ -1,13 +1,10 @@\n package pro.taskana.rest.resource;\n \n-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n-\n import pro.taskana.workbasket.api.models.Workbasket;\n \n /**\n  * EntityModel class for {@link Workbasket}.\n  */\n-@JsonIgnoreProperties(\"markedForDeletion\")\n public class WorkbasketRepresentationModel\n     extends WorkbasketSummaryRepresentationModel {\n \n", "next_change": {"commit": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/models/WorkbasketRepresentationModel.java\nsimilarity index 90%\nrename from rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\nrename to rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/models/WorkbasketRepresentationModel.java\nindex efd3abd5d..0355805c9 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/models/WorkbasketRepresentationModel.java\n", "chunk": "@@ -12,8 +12,7 @@ public class WorkbasketRepresentationModel\n   private String created; // ISO-8601\n   private String modified; // ISO-8601\n \n-  @SuppressWarnings(\"unused\") //Mandatory for Jackson\n-  protected WorkbasketRepresentationModel() {\n+  public WorkbasketRepresentationModel() {\n   }\n \n   public WorkbasketRepresentationModel(Workbasket workbasket) {\n", "next_change": null}]}}, {"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\nindex 10f5498dd..efd3abd5d 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n", "chunk": "@@ -15,8 +12,8 @@ public class WorkbasketRepresentationModel\n   private String created; // ISO-8601\n   private String modified; // ISO-8601\n \n-\n-  public WorkbasketRepresentationModel() {\n+  @SuppressWarnings(\"unused\") //Mandatory for Jackson\n+  protected WorkbasketRepresentationModel() {\n   }\n \n   public WorkbasketRepresentationModel(Workbasket workbasket) {\n", "next_change": {"commit": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/models/WorkbasketRepresentationModel.java\nsimilarity index 90%\nrename from rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\nrename to rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/models/WorkbasketRepresentationModel.java\nindex efd3abd5d..0355805c9 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModel.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/models/WorkbasketRepresentationModel.java\n", "chunk": "@@ -12,8 +12,7 @@ public class WorkbasketRepresentationModel\n   private String created; // ISO-8601\n   private String modified; // ISO-8601\n \n-  @SuppressWarnings(\"unused\") //Mandatory for Jackson\n-  protected WorkbasketRepresentationModel() {\n+  public WorkbasketRepresentationModel() {\n   }\n \n   public WorkbasketRepresentationModel(Workbasket workbasket) {\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MjA1Nw==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422662057", "body": "Can you please write down that we don't have this for classification (or create a bug ticket for this?)", "bodyText": "Can you please write down that we don't have this for classification (or create a bug ticket for this?)", "bodyHTML": "<p dir=\"auto\">Can you please write down that we don't have this for classification (or create a bug ticket for this?)</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:42:32Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModelWithoutLinks.java", "diffHunk": "@@ -6,11 +6,11 @@\n \n /** EntityModel class for {@link Workbasket} but without links property. */\n @JsonIgnoreProperties(value = {\"links\"})\n-public class WorkbasketResourceWithoutLinks extends WorkbasketResource {\n+public class WorkbasketRepresentationModelWithoutLinks extends WorkbasketRepresentationModel {", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModelWithoutLinks.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/models/WorkbasketRepresentationModelWithoutLinks.java\nsimilarity index 77%\nrename from rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModelWithoutLinks.java\nrename to rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/models/WorkbasketRepresentationModelWithoutLinks.java\nindex 2843049d0..04e608352 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModelWithoutLinks.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/models/WorkbasketRepresentationModelWithoutLinks.java\n", "chunk": "@@ -1,4 +1,4 @@\n-package pro.taskana.rest.resource;\n+package pro.taskana.workbasket.rest.models;\n \n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n \n", "next_change": null}, {"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModelWithoutLinks.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/models/WorkbasketRepresentationModelWithoutLinks.java\nsimilarity index 77%\nrename from rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModelWithoutLinks.java\nrename to rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/models/WorkbasketRepresentationModelWithoutLinks.java\nindex 2843049d0..04e608352 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketRepresentationModelWithoutLinks.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/models/WorkbasketRepresentationModelWithoutLinks.java\n", "chunk": "@@ -10,7 +10,7 @@ public class WorkbasketRepresentationModelWithoutLinks extends WorkbasketReprese\n \n   WorkbasketRepresentationModelWithoutLinks() {}\n \n-  WorkbasketRepresentationModelWithoutLinks(Workbasket workbasket) {\n+  public WorkbasketRepresentationModelWithoutLinks(Workbasket workbasket) {\n     super(workbasket);\n   }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MjE3MA==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422662170", "body": "Please remove this and format", "bodyText": "Please remove this and format", "bodyHTML": "<p dir=\"auto\">Please remove this and format</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:43:28Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketSummaryRepresentationModelAssembler.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package pro.taskana.rest.resource;\n+\n+import static pro.taskana.rest.resource.TaskanaPagedModelKeys.WORKBASKETS;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.hateoas.PagedModel.PageMetadata;\n+import org.springframework.hateoas.server.RepresentationModelAssembler;\n+import org.springframework.stereotype.Component;\n+\n+import pro.taskana.rest.Mapping;\n+import pro.taskana.rest.resource.links.PageLinks;\n+import pro.taskana.workbasket.api.WorkbasketService;\n+import pro.taskana.workbasket.api.models.WorkbasketSummary;\n+import pro.taskana.workbasket.internal.models.WorkbasketImpl;\n+\n+/**\n+ * EntityModel assembler for {@link WorkbasketSummaryRepresentationModel}.\n+ */\n+@SuppressWarnings(\"checkstyle:LineLength\")", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketSummaryRepresentationModelAssembler.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketSummaryRepresentationModelAssembler.java\nindex 5f52928c3..406f8bc2b 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketSummaryRepresentationModelAssembler.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketSummaryRepresentationModelAssembler.java\n", "chunk": "@@ -20,20 +20,24 @@ import pro.taskana.workbasket.internal.models.WorkbasketImpl;\n /**\n  * EntityModel assembler for {@link WorkbasketSummaryRepresentationModel}.\n  */\n-@SuppressWarnings(\"checkstyle:LineLength\")\n @Component\n-@Primary\n public class WorkbasketSummaryRepresentationModelAssembler implements\n     RepresentationModelAssembler<WorkbasketSummary, WorkbasketSummaryRepresentationModel> {\n \n-  @Autowired\n   private WorkbasketService workbasketService;\n \n   public WorkbasketSummaryRepresentationModelAssembler() {\n   }\n \n+  @Autowired\n+  public WorkbasketSummaryRepresentationModelAssembler(WorkbasketService workbasketService) {\n+    this.workbasketService = workbasketService;\n+  }\n+\n+  @NonNull\n   @Override\n-  public WorkbasketSummaryRepresentationModel toModel(WorkbasketSummary workbasketSummary) {\n+  public WorkbasketSummaryRepresentationModel toModel(\n+      @NonNull WorkbasketSummary workbasketSummary) {\n     return new WorkbasketSummaryRepresentationModel(workbasketSummary);\n   }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketSummaryRepresentationModelAssembler.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketSummaryRepresentationModelAssembler.java\nindex 5f52928c3..406f8bc2b 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketSummaryRepresentationModelAssembler.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketSummaryRepresentationModelAssembler.java\n", "chunk": "@@ -20,20 +20,24 @@ import pro.taskana.workbasket.internal.models.WorkbasketImpl;\n /**\n  * EntityModel assembler for {@link WorkbasketSummaryRepresentationModel}.\n  */\n-@SuppressWarnings(\"checkstyle:LineLength\")\n @Component\n-@Primary\n public class WorkbasketSummaryRepresentationModelAssembler implements\n     RepresentationModelAssembler<WorkbasketSummary, WorkbasketSummaryRepresentationModel> {\n \n-  @Autowired\n   private WorkbasketService workbasketService;\n \n   public WorkbasketSummaryRepresentationModelAssembler() {\n   }\n \n+  @Autowired\n+  public WorkbasketSummaryRepresentationModelAssembler(WorkbasketService workbasketService) {\n+    this.workbasketService = workbasketService;\n+  }\n+\n+  @NonNull\n   @Override\n-  public WorkbasketSummaryRepresentationModel toModel(WorkbasketSummary workbasketSummary) {\n+  public WorkbasketSummaryRepresentationModel toModel(\n+      @NonNull WorkbasketSummary workbasketSummary) {\n     return new WorkbasketSummaryRepresentationModel(workbasketSummary);\n   }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MjMzMw==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422662333", "body": "Do you remember why we marked this component as primary? I'm missing a comment here.\r\nOr better: Can you replace this annotation with a qualifier", "bodyText": "Do you remember why we marked this component as primary? I'm missing a comment here.\nOr better: Can you replace this annotation with a qualifier", "bodyHTML": "<p dir=\"auto\">Do you remember why we marked this component as primary? I'm missing a comment here.<br>\nOr better: Can you replace this annotation with a qualifier</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:44:43Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketSummaryRepresentationModelAssembler.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package pro.taskana.rest.resource;\n+\n+import static pro.taskana.rest.resource.TaskanaPagedModelKeys.WORKBASKETS;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.hateoas.PagedModel.PageMetadata;\n+import org.springframework.hateoas.server.RepresentationModelAssembler;\n+import org.springframework.stereotype.Component;\n+\n+import pro.taskana.rest.Mapping;\n+import pro.taskana.rest.resource.links.PageLinks;\n+import pro.taskana.workbasket.api.WorkbasketService;\n+import pro.taskana.workbasket.api.models.WorkbasketSummary;\n+import pro.taskana.workbasket.internal.models.WorkbasketImpl;\n+\n+/**\n+ * EntityModel assembler for {@link WorkbasketSummaryRepresentationModel}.\n+ */\n+@SuppressWarnings(\"checkstyle:LineLength\")\n+@Component\n+@Primary", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketSummaryRepresentationModelAssembler.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketSummaryRepresentationModelAssembler.java\nindex 5f52928c3..406f8bc2b 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketSummaryRepresentationModelAssembler.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketSummaryRepresentationModelAssembler.java\n", "chunk": "@@ -20,20 +20,24 @@ import pro.taskana.workbasket.internal.models.WorkbasketImpl;\n /**\n  * EntityModel assembler for {@link WorkbasketSummaryRepresentationModel}.\n  */\n-@SuppressWarnings(\"checkstyle:LineLength\")\n @Component\n-@Primary\n public class WorkbasketSummaryRepresentationModelAssembler implements\n     RepresentationModelAssembler<WorkbasketSummary, WorkbasketSummaryRepresentationModel> {\n \n-  @Autowired\n   private WorkbasketService workbasketService;\n \n   public WorkbasketSummaryRepresentationModelAssembler() {\n   }\n \n+  @Autowired\n+  public WorkbasketSummaryRepresentationModelAssembler(WorkbasketService workbasketService) {\n+    this.workbasketService = workbasketService;\n+  }\n+\n+  @NonNull\n   @Override\n-  public WorkbasketSummaryRepresentationModel toModel(WorkbasketSummary workbasketSummary) {\n+  public WorkbasketSummaryRepresentationModel toModel(\n+      @NonNull WorkbasketSummary workbasketSummary) {\n     return new WorkbasketSummaryRepresentationModel(workbasketSummary);\n   }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketSummaryRepresentationModelAssembler.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketSummaryRepresentationModelAssembler.java\nindex 5f52928c3..406f8bc2b 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketSummaryRepresentationModelAssembler.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/WorkbasketSummaryRepresentationModelAssembler.java\n", "chunk": "@@ -20,20 +20,24 @@ import pro.taskana.workbasket.internal.models.WorkbasketImpl;\n /**\n  * EntityModel assembler for {@link WorkbasketSummaryRepresentationModel}.\n  */\n-@SuppressWarnings(\"checkstyle:LineLength\")\n @Component\n-@Primary\n public class WorkbasketSummaryRepresentationModelAssembler implements\n     RepresentationModelAssembler<WorkbasketSummary, WorkbasketSummaryRepresentationModel> {\n \n-  @Autowired\n   private WorkbasketService workbasketService;\n \n   public WorkbasketSummaryRepresentationModelAssembler() {\n   }\n \n+  @Autowired\n+  public WorkbasketSummaryRepresentationModelAssembler(WorkbasketService workbasketService) {\n+    this.workbasketService = workbasketService;\n+  }\n+\n+  @NonNull\n   @Override\n-  public WorkbasketSummaryRepresentationModel toModel(WorkbasketSummary workbasketSummary) {\n+  public WorkbasketSummaryRepresentationModel toModel(\n+      @NonNull WorkbasketSummary workbasketSummary) {\n     return new WorkbasketSummaryRepresentationModel(workbasketSummary);\n   }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2Mjk0NQ==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422662945", "body": "Do we have a test verifying that our paging get's deserialized properly?", "bodyText": "Do we have a test verifying that our paging get's deserialized properly?", "bodyHTML": "<p dir=\"auto\">Do we have a test verifying that our paging get's deserialized properly?</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:49:24Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java", "diffHunk": "@@ -87,11 +87,6 @@ void setUp() {\n           subsectionWithPath(\"classifications\")\n               .description(\"An Array of <<classification-subset, Classification-Subsets>>\"),\n           fieldWithPath(\"_links.self.href\").ignored(),\n-          fieldWithPath(\"page\").ignored(),", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\nindex 365d6eb83..335b4741b 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n", "chunk": "@@ -22,338 +22,266 @@ import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n \n import pro.taskana.rest.Mapping;\n \n-/** Generate REST Dokumentation for ClassificationController. */\n+/**\n+ * Generate REST Dokumentation for ClassificationController.\n+ */\n class ClassificationControllerRestDocumentation extends BaseRestDocumentation {\n \n-  private HashMap<String, String> classificationFieldDescriptionsMap =\n-      new HashMap<String, String>();\n+    private HashMap<String, String> classificationFieldDescriptionsMap = new HashMap<String, String>();\n+\n+    private FieldDescriptor[] allClassificationsFieldDescriptors;\n+    private FieldDescriptor[] classificationFieldDescriptors;\n+    private FieldDescriptor[] classificationSubsetFieldDescriptors;\n+    private FieldDescriptor[] createClassificationFieldDescriptors;\n \n-  private FieldDescriptor[] allClassificationsFieldDescriptors;\n-  private FieldDescriptor[] classificationFieldDescriptors;\n-  private FieldDescriptor[] classificationSubsetFieldDescriptors;\n-  private FieldDescriptor[] createClassificationFieldDescriptors;\n+    @BeforeEach\n+    void setUp() {\n \n-  @BeforeEach\n-  void setUp() {\n+        classificationFieldDescriptionsMap.put(\"classificationId\", \"Unique Id\");\n+        classificationFieldDescriptionsMap.put(\"key\",\n+            \"The key of the classification. This is typically an externally known code or abbreviation of the classification\");\n+        classificationFieldDescriptionsMap.put(\"parentId\",\n+            \"The id of the parent classification. Empty string (\\\"\\\") if this is a root classification.\");\n+        classificationFieldDescriptionsMap.put(\"parentKey\",\n+            \"The key of the parent classification. Empty string (\\\"\\\") if this is a root classification.\");\n+        classificationFieldDescriptionsMap.put(\"category\",\n+            \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\");\n+        classificationFieldDescriptionsMap.put(\"type\", \"The type of classification (TASK, DOCUMENT)\");\n+        classificationFieldDescriptionsMap.put(\"domain\", \"The domain for which this classification is specified\");\n+        classificationFieldDescriptionsMap.put(\"isValidInDomain\",\n+            \"True, if this classification to objects in this domain\");\n+        classificationFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the classification in the system\");\n+        classificationFieldDescriptionsMap.put(\"modified\", \"The timestamp of the last modification date\");\n+        classificationFieldDescriptionsMap.put(\"name\", \"The name of the classification\");\n+        classificationFieldDescriptionsMap.put(\"description\", \"The description of the classification\");\n+        classificationFieldDescriptionsMap.put(\"priority\", \"The priority of the classification\");\n+        classificationFieldDescriptionsMap.put(\"serviceLevel\",\n+            \"The service level of the classification. This is stated according to ISO 8601\");\n+        classificationFieldDescriptionsMap.put(\"applicationEntryPoint\",\n+            \"The logical name of the entry point, the task list application should redirect to work on a task of this classification\");\n+        classificationFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n+        classificationFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n+        classificationFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n+        classificationFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n+        classificationFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n+        classificationFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n+        classificationFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n+        classificationFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n+        classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.href\", \"Link to all classifications\");\n+        classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.templated\", \"\");\n \n-    classificationFieldDescriptionsMap.put(\"classificationId\", \"Unique Id\");\n-    classificationFieldDescriptionsMap.put(\n-        \"key\",\n-        \"The key of the classification. This is typically an externally \"\n-            + \"known code or abbreviation of the classification\");\n-    classificationFieldDescriptionsMap.put(\n-        \"parentId\",\n-        \"The id of the parent classification. Empty string (\\\"\\\") \"\n-            + \"if this is a root classification.\");\n-    classificationFieldDescriptionsMap.put(\n-        \"parentKey\",\n-        \"The key of the parent classification. Empty string (\\\"\\\") \"\n-            + \"if this is a root classification.\");\n-    classificationFieldDescriptionsMap.put(\n-        \"category\", \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\");\n-    classificationFieldDescriptionsMap.put(\"type\", \"The type of classification (TASK, DOCUMENT)\");\n-    classificationFieldDescriptionsMap.put(\n-        \"domain\", \"The domain for which this classification is specified\");\n-    classificationFieldDescriptionsMap.put(\n-        \"isValidInDomain\", \"True, if this classification to objects in this domain\");\n-    classificationFieldDescriptionsMap.put(\n-        \"created\", \"The creation timestamp of the classification in the system\");\n-    classificationFieldDescriptionsMap.put(\n-        \"modified\", \"The timestamp of the last modification date\");\n-    classificationFieldDescriptionsMap.put(\"name\", \"The name of the classification\");\n-    classificationFieldDescriptionsMap.put(\"description\", \"The description of the classification\");\n-    classificationFieldDescriptionsMap.put(\"priority\", \"The priority of the classification\");\n-    classificationFieldDescriptionsMap.put(\n-        \"serviceLevel\",\n-        \"The service level of the classification. This is stated according to ISO 8601\");\n-    classificationFieldDescriptionsMap.put(\n-        \"applicationEntryPoint\",\n-        \"The logical name of the entry point, the task list application \"\n-            + \"should redirect to work on a task of this classification\");\n-    classificationFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-    classificationFieldDescriptionsMap.put(\n-        \"_links.getAllClassifications.href\", \"Link to all classifications\");\n-    classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.templated\", \"\");\n+        allClassificationsFieldDescriptors = new FieldDescriptor[] {\n \n-    allClassificationsFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"classifications\")\n-              .description(\"An Array of <<classification-subset, Classification-Subsets>>\"),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n+            subsectionWithPath(\"classifications\")\n+                .description(\"An Array of <<classification-subset, Classification-Subsets>>\"),\n+            fieldWithPath(\"_links.self.href\").ignored(),\n+            fieldWithPath(\"page\").ignored()\n         };\n \n-    classificationFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"classificationId\")\n-              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-          fieldWithPath(\"parentKey\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"isValidInDomain\")\n-              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\")),\n-          fieldWithPath(\"created\").description(classificationFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"modified\").description(classificationFieldDescriptionsMap.get(\"modified\")),\n-          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"description\")\n-              .description(classificationFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"serviceLevel\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-          fieldWithPath(\"applicationEntryPoint\")\n-              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\")),\n-          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n+        classificationFieldDescriptors = new FieldDescriptor[] {\n+\n+            fieldWithPath(\"classificationId\").description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n+            fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n+            fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n+            fieldWithPath(\"parentKey\").description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n+            fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n+            fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n+            fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n+            fieldWithPath(\"isValidInDomain\").description(classificationFieldDescriptionsMap.get(\"isValidInDomain\")),\n+            fieldWithPath(\"created\").description(classificationFieldDescriptionsMap.get(\"created\")),\n+            fieldWithPath(\"modified\").description(classificationFieldDescriptionsMap.get(\"modified\")),\n+            fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n+            fieldWithPath(\"description\").description(classificationFieldDescriptionsMap.get(\"description\")),\n+            fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n+            fieldWithPath(\"serviceLevel\").description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n+            fieldWithPath(\"applicationEntryPoint\")\n+                .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\")),\n+            fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n+            fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n+            fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n+            fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n+            fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n+            fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n+            fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n+            fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n+            fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-    classificationSubsetFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"classificationId\")\n-              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"isValidInDomain\").ignored(),\n-          fieldWithPath(\"created\").ignored(),\n-          fieldWithPath(\"modified\").ignored(),\n-          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-          fieldWithPath(\"parentKey\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-          fieldWithPath(\"description\").ignored(),\n-          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"serviceLevel\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-          fieldWithPath(\"applicationEntryPoint\").ignored(),\n-          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n+        classificationSubsetFieldDescriptors = new FieldDescriptor[] {\n+\n+            fieldWithPath(\"classificationId\").description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n+            fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n+            fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n+            fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n+            fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n+            fieldWithPath(\"isValidInDomain\").ignored(),\n+            fieldWithPath(\"created\").ignored(),\n+            fieldWithPath(\"modified\").ignored(),\n+            fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n+            fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n+            fieldWithPath(\"parentKey\").description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n+            fieldWithPath(\"description\").ignored(),\n+            fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n+            fieldWithPath(\"serviceLevel\").description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n+            fieldWithPath(\"applicationEntryPoint\").ignored(),\n+            fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n+            fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n+            fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n+            fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n+            fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n+            fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n+            fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n+            fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n+            fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-    createClassificationFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"category\")\n-              .type(\"String\")\n-              .description(\n-                  \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\")\n-              .optional(),\n-          fieldWithPath(\"domain\")\n-              .description(\"The domain for which this classification is specified\"),\n-          fieldWithPath(\"key\")\n-              .description(\n-                  \"The key of the classification. This is typically an externally \"\n-                      + \"known code or abbreviation of the classification\"),\n-          fieldWithPath(\"name\")\n-              .type(\"String\")\n-              .description(\"The name of the classification\")\n-              .optional(),\n-          fieldWithPath(\"type\")\n-              .type(\"String\")\n-              .description(\"The type of classification (TASK, DOCUMENT)\")\n-              .optional(),\n-          fieldWithPath(\"parentId\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentId\"))\n-              .optional(),\n-          fieldWithPath(\"parentKey\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\"))\n-              .optional(),\n-          fieldWithPath(\"isValidInDomain\")\n-              .type(\"Boolean\")\n-              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\"))\n-              .optional(),\n-          fieldWithPath(\"created\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"created\"))\n-              .optional(),\n-          fieldWithPath(\"modified\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"modified\"))\n-              .optional(),\n-          fieldWithPath(\"description\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"description\"))\n-              .optional(),\n-          fieldWithPath(\"priority\")\n-              .type(\"Number\")\n-              .description(classificationFieldDescriptionsMap.get(\"priority\"))\n-              .optional(),\n-          fieldWithPath(\"serviceLevel\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\"))\n-              .optional(),\n-          fieldWithPath(\"applicationEntryPoint\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\"))\n-              .optional(),\n-          fieldWithPath(\"custom1\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom1\"))\n-              .optional(),\n-          fieldWithPath(\"custom2\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom2\"))\n-              .optional(),\n-          fieldWithPath(\"custom3\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom3\"))\n-              .optional(),\n-          fieldWithPath(\"custom4\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom4\"))\n-              .optional(),\n-          fieldWithPath(\"custom5\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom5\"))\n-              .optional(),\n-          fieldWithPath(\"custom6\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom6\"))\n-              .optional(),\n-          fieldWithPath(\"custom7\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom7\"))\n-              .optional(),\n-          fieldWithPath(\"custom8\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom8\"))\n-              .optional()\n+        createClassificationFieldDescriptors = new FieldDescriptor[] {\n+\n+            fieldWithPath(\"category\").type(\"String\")\n+                .description(\"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\")\n+                .optional(),\n+            fieldWithPath(\"domain\").description(\"The domain for which this classification is specified\"),\n+            fieldWithPath(\"key\").description(\n+                \"The key of the classification. This is typically an externally known code or abbreviation of the classification\"),\n+            fieldWithPath(\"name\").type(\"String\").description(\"The name of the classification\").optional(),\n+            fieldWithPath(\"type\").type(\"String\").description(\"The type of classification (TASK, DOCUMENT)\").optional(),\n+            fieldWithPath(\"parentId\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"parentId\"))\n+                .optional(),\n+            fieldWithPath(\"parentKey\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"parentKey\"))\n+                .optional(),\n+            fieldWithPath(\"isValidInDomain\").type(\"Boolean\")\n+                .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\"))\n+                .optional(),\n+            fieldWithPath(\"created\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"created\"))\n+                .optional(),\n+            fieldWithPath(\"modified\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"modified\"))\n+                .optional(),\n+            fieldWithPath(\"description\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"description\"))\n+                .optional(),\n+            fieldWithPath(\"priority\").type(\"Number\")\n+                .description(classificationFieldDescriptionsMap.get(\"priority\"))\n+                .optional(),\n+            fieldWithPath(\"serviceLevel\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"serviceLevel\"))\n+                .optional(),\n+            fieldWithPath(\"applicationEntryPoint\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\"))\n+                .optional(),\n+            fieldWithPath(\"custom1\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"custom1\"))\n+                .optional(),\n+            fieldWithPath(\"custom2\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"custom2\"))\n+                .optional(),\n+            fieldWithPath(\"custom3\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"custom3\"))\n+                .optional(),\n+            fieldWithPath(\"custom4\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"custom4\"))\n+                .optional(),\n+            fieldWithPath(\"custom5\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"custom5\"))\n+                .optional(),\n+            fieldWithPath(\"custom6\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"custom6\"))\n+                .optional(),\n+            fieldWithPath(\"custom7\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"custom7\"))\n+                .optional(),\n+            fieldWithPath(\"custom8\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"custom8\"))\n+                .optional()\n         };\n-  }\n+    }\n \n-  @Test\n-  void getAllClassificationsDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS) + \"?domain=DOMAIN_B\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllClassificationsDocTest\",\n+    @Test\n+    void getAllClassificationsDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .get(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS) + \"?domain=DOMAIN_B\")\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"GetAllClassificationsDocTest\",\n                 responseFields(allClassificationsFieldDescriptors)));\n-  }\n+    }\n \n-  @Test\n-  void getSpecificClassificationDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetSpecificClassificationDocTest\",\n+    @Test\n+    void getSpecificClassificationDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .get(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"GetSpecificClassificationDocTest\",\n                 responseFields(classificationFieldDescriptors)));\n-  }\n+    }\n \n-  @Test\n-  void classificationSubsetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"ClassificationSubset\", responseFields(classificationSubsetFieldDescriptors)));\n-  }\n+    @Test\n+    void classificationSubsetDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .get(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"ClassificationSubset\",\n+                responseFields(classificationSubsetFieldDescriptors)));\n+    }\n \n-  @Test\n-  void createAndDeleteClassificationDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\"{\\\"key\\\":\\\"Key0815casdgdgh\\\", \\\"domain\\\":\\\"DOMAIN_B\\\"}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+    @Test\n+    void createAndDeleteClassificationDocTest() throws Exception {\n+        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS))\n+            .contentType(\"application/hal+json\")\n+            .content(\"{\\\"key\\\":\\\"Key0815casdgdgh\\\", \\\"domain\\\":\\\"DOMAIN_B\\\"}\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"CreateClassificationDocTest\",\n-                    requestFields(createClassificationFieldDescriptors),\n-                    responseFields(classificationFieldDescriptors)))\n+            .andDo(MockMvcRestDocumentation.document(\"CreateClassificationDocTest\",\n+                requestFields(createClassificationFieldDescriptors),\n+                responseFields(classificationFieldDescriptors)))\n             .andReturn();\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"CLI:\"), content.indexOf(\"CLI:\") + 40);\n+        String content = result.getResponse().getContentAsString();\n+        String newId = content.substring(content.indexOf(\"CLI:\"), content.indexOf(\"CLI:\") + 40);\n \n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, newId))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"DeleteClassificationDocTest\"));\n-  }\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .delete(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, newId))\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isNoContent())\n+            .andDo(MockMvcRestDocumentation.document(\"DeleteClassificationDocTest\"));\n+    }\n \n-  @Test\n-  void updateClassificationDocTest() throws Exception {\n-    URL url =\n-        new URL(\n-            restHelper.toUrl(\n-                Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    assertEquals(200, con.getResponseCode());\n+    @Test\n+    void updateClassificationDocTest() throws Exception {\n+        URL url = new URL(\n+            restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"));\n+        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+        con.setRequestMethod(\"GET\");\n+        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+        assertEquals(200, con.getResponseCode());\n \n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuffer content = new StringBuffer();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n-    }\n-    in.close();\n-    con.disconnect();\n-    String originalTask = content.toString();\n-    String modifiedTask = originalTask;\n+        BufferedReader in = new BufferedReader(\n+            new InputStreamReader(con.getInputStream()));\n+        String inputLine;\n+        StringBuffer content = new StringBuffer();\n+        while ((inputLine = in.readLine()) != null) {\n+            content.append(inputLine);\n+        }\n+        in.close();\n+        con.disconnect();\n+        String originalTask = content.toString();\n+        String modifiedTask = new String(originalTask.toString());\n \n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.put(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .contentType(\"application/json\")\n-                .content(modifiedTask))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"UpdateClassificationDocTest\",\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .put(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+            .contentType(\"application/json\")\n+            .content(modifiedTask))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"UpdateClassificationDocTest\",\n                 requestFields(classificationFieldDescriptors),\n                 responseFields(classificationFieldDescriptors)));\n-  }\n+    }\n }\n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\nindex 335b4741b..2df11e025 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n", "chunk": "@@ -22,266 +21,334 @@ import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n \n import pro.taskana.rest.Mapping;\n \n-/**\n- * Generate REST Dokumentation for ClassificationController.\n- */\n+/** Generate REST Dokumentation for ClassificationController. */\n class ClassificationControllerRestDocumentation extends BaseRestDocumentation {\n \n-    private HashMap<String, String> classificationFieldDescriptionsMap = new HashMap<String, String>();\n-\n-    private FieldDescriptor[] allClassificationsFieldDescriptors;\n-    private FieldDescriptor[] classificationFieldDescriptors;\n-    private FieldDescriptor[] classificationSubsetFieldDescriptors;\n-    private FieldDescriptor[] createClassificationFieldDescriptors;\n+  private HashMap<String, String> classificationFieldDescriptionsMap =\n+      new HashMap<String, String>();\n \n-    @BeforeEach\n-    void setUp() {\n+  private FieldDescriptor[] allClassificationsFieldDescriptors;\n+  private FieldDescriptor[] classificationFieldDescriptors;\n+  private FieldDescriptor[] classificationSubsetFieldDescriptors;\n+  private FieldDescriptor[] createClassificationFieldDescriptors;\n \n-        classificationFieldDescriptionsMap.put(\"classificationId\", \"Unique Id\");\n-        classificationFieldDescriptionsMap.put(\"key\",\n-            \"The key of the classification. This is typically an externally known code or abbreviation of the classification\");\n-        classificationFieldDescriptionsMap.put(\"parentId\",\n-            \"The id of the parent classification. Empty string (\\\"\\\") if this is a root classification.\");\n-        classificationFieldDescriptionsMap.put(\"parentKey\",\n-            \"The key of the parent classification. Empty string (\\\"\\\") if this is a root classification.\");\n-        classificationFieldDescriptionsMap.put(\"category\",\n-            \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\");\n-        classificationFieldDescriptionsMap.put(\"type\", \"The type of classification (TASK, DOCUMENT)\");\n-        classificationFieldDescriptionsMap.put(\"domain\", \"The domain for which this classification is specified\");\n-        classificationFieldDescriptionsMap.put(\"isValidInDomain\",\n-            \"True, if this classification to objects in this domain\");\n-        classificationFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the classification in the system\");\n-        classificationFieldDescriptionsMap.put(\"modified\", \"The timestamp of the last modification date\");\n-        classificationFieldDescriptionsMap.put(\"name\", \"The name of the classification\");\n-        classificationFieldDescriptionsMap.put(\"description\", \"The description of the classification\");\n-        classificationFieldDescriptionsMap.put(\"priority\", \"The priority of the classification\");\n-        classificationFieldDescriptionsMap.put(\"serviceLevel\",\n-            \"The service level of the classification. This is stated according to ISO 8601\");\n-        classificationFieldDescriptionsMap.put(\"applicationEntryPoint\",\n-            \"The logical name of the entry point, the task list application should redirect to work on a task of this classification\");\n-        classificationFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-        classificationFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-        classificationFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-        classificationFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-        classificationFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-        classificationFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-        classificationFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-        classificationFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-        classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.href\", \"Link to all classifications\");\n-        classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.templated\", \"\");\n+  @BeforeEach\n+  void setUp() {\n \n-        allClassificationsFieldDescriptors = new FieldDescriptor[] {\n+    classificationFieldDescriptionsMap.put(\"classificationId\", \"Unique Id\");\n+    classificationFieldDescriptionsMap.put(\n+        \"key\",\n+        \"The key of the classification. This is typically an externally known code or abbreviation of the classification\");\n+    classificationFieldDescriptionsMap.put(\n+        \"parentId\",\n+        \"The id of the parent classification. Empty string (\\\"\\\") if this is a root classification.\");\n+    classificationFieldDescriptionsMap.put(\n+        \"parentKey\",\n+        \"The key of the parent classification. Empty string (\\\"\\\") if this is a root classification.\");\n+    classificationFieldDescriptionsMap.put(\n+        \"category\", \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\");\n+    classificationFieldDescriptionsMap.put(\"type\", \"The type of classification (TASK, DOCUMENT)\");\n+    classificationFieldDescriptionsMap.put(\n+        \"domain\", \"The domain for which this classification is specified\");\n+    classificationFieldDescriptionsMap.put(\n+        \"isValidInDomain\", \"True, if this classification to objects in this domain\");\n+    classificationFieldDescriptionsMap.put(\n+        \"created\", \"The creation timestamp of the classification in the system\");\n+    classificationFieldDescriptionsMap.put(\n+        \"modified\", \"The timestamp of the last modification date\");\n+    classificationFieldDescriptionsMap.put(\"name\", \"The name of the classification\");\n+    classificationFieldDescriptionsMap.put(\"description\", \"The description of the classification\");\n+    classificationFieldDescriptionsMap.put(\"priority\", \"The priority of the classification\");\n+    classificationFieldDescriptionsMap.put(\n+        \"serviceLevel\",\n+        \"The service level of the classification. This is stated according to ISO 8601\");\n+    classificationFieldDescriptionsMap.put(\n+        \"applicationEntryPoint\",\n+        \"The logical name of the entry point, the task list application should redirect to work on a task of this classification\");\n+    classificationFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n+    classificationFieldDescriptionsMap.put(\n+        \"_links.getAllClassifications.href\", \"Link to all classifications\");\n+    classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.templated\", \"\");\n \n-            subsectionWithPath(\"classifications\")\n-                .description(\"An Array of <<classification-subset, Classification-Subsets>>\"),\n-            fieldWithPath(\"_links.self.href\").ignored(),\n-            fieldWithPath(\"page\").ignored()\n+    allClassificationsFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"classifications\")\n+              .description(\"An Array of <<classification-subset, Classification-Subsets>>\"),\n+          fieldWithPath(\"_links.self.href\").ignored(),\n+          fieldWithPath(\"page\").ignored()\n         };\n \n-        classificationFieldDescriptors = new FieldDescriptor[] {\n-\n-            fieldWithPath(\"classificationId\").description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-            fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-            fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-            fieldWithPath(\"parentKey\").description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-            fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-            fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-            fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-            fieldWithPath(\"isValidInDomain\").description(classificationFieldDescriptionsMap.get(\"isValidInDomain\")),\n-            fieldWithPath(\"created\").description(classificationFieldDescriptionsMap.get(\"created\")),\n-            fieldWithPath(\"modified\").description(classificationFieldDescriptionsMap.get(\"modified\")),\n-            fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-            fieldWithPath(\"description\").description(classificationFieldDescriptionsMap.get(\"description\")),\n-            fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-            fieldWithPath(\"serviceLevel\").description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-            fieldWithPath(\"applicationEntryPoint\")\n-                .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\")),\n-            fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-            fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-            fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-            fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-            fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-            fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-            fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-            fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-            fieldWithPath(\"_links.self.href\").ignored()\n+    classificationFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"classificationId\")\n+              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n+          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n+          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n+          fieldWithPath(\"parentKey\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n+          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n+          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n+          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n+          fieldWithPath(\"isValidInDomain\")\n+              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\")),\n+          fieldWithPath(\"created\").description(classificationFieldDescriptionsMap.get(\"created\")),\n+          fieldWithPath(\"modified\").description(classificationFieldDescriptionsMap.get(\"modified\")),\n+          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"description\")\n+              .description(classificationFieldDescriptionsMap.get(\"description\")),\n+          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"serviceLevel\")\n+              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n+          fieldWithPath(\"applicationEntryPoint\")\n+              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\")),\n+          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n+          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n+          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n+          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n+          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n+          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n+          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n+          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n+          fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-        classificationSubsetFieldDescriptors = new FieldDescriptor[] {\n-\n-            fieldWithPath(\"classificationId\").description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-            fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-            fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-            fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-            fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-            fieldWithPath(\"isValidInDomain\").ignored(),\n-            fieldWithPath(\"created\").ignored(),\n-            fieldWithPath(\"modified\").ignored(),\n-            fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-            fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-            fieldWithPath(\"parentKey\").description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-            fieldWithPath(\"description\").ignored(),\n-            fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-            fieldWithPath(\"serviceLevel\").description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-            fieldWithPath(\"applicationEntryPoint\").ignored(),\n-            fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-            fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-            fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-            fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-            fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-            fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-            fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-            fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-            fieldWithPath(\"_links.self.href\").ignored()\n+    classificationSubsetFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"classificationId\")\n+              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n+          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n+          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n+          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n+          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n+          fieldWithPath(\"isValidInDomain\").ignored(),\n+          fieldWithPath(\"created\").ignored(),\n+          fieldWithPath(\"modified\").ignored(),\n+          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n+          fieldWithPath(\"parentKey\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n+          fieldWithPath(\"description\").ignored(),\n+          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"serviceLevel\")\n+              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n+          fieldWithPath(\"applicationEntryPoint\").ignored(),\n+          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n+          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n+          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n+          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n+          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n+          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n+          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n+          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n+          fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-        createClassificationFieldDescriptors = new FieldDescriptor[] {\n-\n-            fieldWithPath(\"category\").type(\"String\")\n-                .description(\"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\")\n-                .optional(),\n-            fieldWithPath(\"domain\").description(\"The domain for which this classification is specified\"),\n-            fieldWithPath(\"key\").description(\n-                \"The key of the classification. This is typically an externally known code or abbreviation of the classification\"),\n-            fieldWithPath(\"name\").type(\"String\").description(\"The name of the classification\").optional(),\n-            fieldWithPath(\"type\").type(\"String\").description(\"The type of classification (TASK, DOCUMENT)\").optional(),\n-            fieldWithPath(\"parentId\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"parentId\"))\n-                .optional(),\n-            fieldWithPath(\"parentKey\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"parentKey\"))\n-                .optional(),\n-            fieldWithPath(\"isValidInDomain\").type(\"Boolean\")\n-                .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\"))\n-                .optional(),\n-            fieldWithPath(\"created\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"created\"))\n-                .optional(),\n-            fieldWithPath(\"modified\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"modified\"))\n-                .optional(),\n-            fieldWithPath(\"description\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"description\"))\n-                .optional(),\n-            fieldWithPath(\"priority\").type(\"Number\")\n-                .description(classificationFieldDescriptionsMap.get(\"priority\"))\n-                .optional(),\n-            fieldWithPath(\"serviceLevel\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"serviceLevel\"))\n-                .optional(),\n-            fieldWithPath(\"applicationEntryPoint\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\"))\n-                .optional(),\n-            fieldWithPath(\"custom1\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"custom1\"))\n-                .optional(),\n-            fieldWithPath(\"custom2\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"custom2\"))\n-                .optional(),\n-            fieldWithPath(\"custom3\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"custom3\"))\n-                .optional(),\n-            fieldWithPath(\"custom4\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"custom4\"))\n-                .optional(),\n-            fieldWithPath(\"custom5\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"custom5\"))\n-                .optional(),\n-            fieldWithPath(\"custom6\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"custom6\"))\n-                .optional(),\n-            fieldWithPath(\"custom7\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"custom7\"))\n-                .optional(),\n-            fieldWithPath(\"custom8\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"custom8\"))\n-                .optional()\n+    createClassificationFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"category\")\n+              .type(\"String\")\n+              .description(\n+                  \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\")\n+              .optional(),\n+          fieldWithPath(\"domain\")\n+              .description(\"The domain for which this classification is specified\"),\n+          fieldWithPath(\"key\")\n+              .description(\n+                  \"The key of the classification. This is typically an externally known code or abbreviation of the classification\"),\n+          fieldWithPath(\"name\")\n+              .type(\"String\")\n+              .description(\"The name of the classification\")\n+              .optional(),\n+          fieldWithPath(\"type\")\n+              .type(\"String\")\n+              .description(\"The type of classification (TASK, DOCUMENT)\")\n+              .optional(),\n+          fieldWithPath(\"parentId\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentId\"))\n+              .optional(),\n+          fieldWithPath(\"parentKey\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentKey\"))\n+              .optional(),\n+          fieldWithPath(\"isValidInDomain\")\n+              .type(\"Boolean\")\n+              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\"))\n+              .optional(),\n+          fieldWithPath(\"created\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"created\"))\n+              .optional(),\n+          fieldWithPath(\"modified\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"modified\"))\n+              .optional(),\n+          fieldWithPath(\"description\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"description\"))\n+              .optional(),\n+          fieldWithPath(\"priority\")\n+              .type(\"Number\")\n+              .description(classificationFieldDescriptionsMap.get(\"priority\"))\n+              .optional(),\n+          fieldWithPath(\"serviceLevel\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\"))\n+              .optional(),\n+          fieldWithPath(\"applicationEntryPoint\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\"))\n+              .optional(),\n+          fieldWithPath(\"custom1\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom1\"))\n+              .optional(),\n+          fieldWithPath(\"custom2\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom2\"))\n+              .optional(),\n+          fieldWithPath(\"custom3\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom3\"))\n+              .optional(),\n+          fieldWithPath(\"custom4\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom4\"))\n+              .optional(),\n+          fieldWithPath(\"custom5\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom5\"))\n+              .optional(),\n+          fieldWithPath(\"custom6\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom6\"))\n+              .optional(),\n+          fieldWithPath(\"custom7\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom7\"))\n+              .optional(),\n+          fieldWithPath(\"custom8\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom8\"))\n+              .optional()\n         };\n-    }\n+  }\n \n-    @Test\n-    void getAllClassificationsDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .get(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS) + \"?domain=DOMAIN_B\")\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"GetAllClassificationsDocTest\",\n+  @Test\n+  void getAllClassificationsDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS) + \"?domain=DOMAIN_B\")\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetAllClassificationsDocTest\",\n                 responseFields(allClassificationsFieldDescriptors)));\n-    }\n+  }\n \n-    @Test\n-    void getSpecificClassificationDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .get(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"GetSpecificClassificationDocTest\",\n+  @Test\n+  void getSpecificClassificationDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetSpecificClassificationDocTest\",\n                 responseFields(classificationFieldDescriptors)));\n-    }\n+  }\n \n-    @Test\n-    void classificationSubsetDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .get(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"ClassificationSubset\",\n-                responseFields(classificationSubsetFieldDescriptors)));\n-    }\n+  @Test\n+  void classificationSubsetDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"ClassificationSubset\", responseFields(classificationSubsetFieldDescriptors)));\n+  }\n \n-    @Test\n-    void createAndDeleteClassificationDocTest() throws Exception {\n-        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS))\n-            .contentType(\"application/hal+json\")\n-            .content(\"{\\\"key\\\":\\\"Key0815casdgdgh\\\", \\\"domain\\\":\\\"DOMAIN_B\\\"}\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+  @Test\n+  void createAndDeleteClassificationDocTest() throws Exception {\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\"{\\\"key\\\":\\\"Key0815casdgdgh\\\", \\\"domain\\\":\\\"DOMAIN_B\\\"}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"CreateClassificationDocTest\",\n-                requestFields(createClassificationFieldDescriptors),\n-                responseFields(classificationFieldDescriptors)))\n+            .andDo(\n+                MockMvcRestDocumentation.document(\n+                    \"CreateClassificationDocTest\",\n+                    requestFields(createClassificationFieldDescriptors),\n+                    responseFields(classificationFieldDescriptors)))\n             .andReturn();\n \n-        String content = result.getResponse().getContentAsString();\n-        String newId = content.substring(content.indexOf(\"CLI:\"), content.indexOf(\"CLI:\") + 40);\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"CLI:\"), content.indexOf(\"CLI:\") + 40);\n \n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .delete(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, newId))\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isNoContent())\n-            .andDo(MockMvcRestDocumentation.document(\"DeleteClassificationDocTest\"));\n-    }\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(\n+                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, newId))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isNoContent())\n+        .andDo(MockMvcRestDocumentation.document(\"DeleteClassificationDocTest\"));\n+  }\n \n-    @Test\n-    void updateClassificationDocTest() throws Exception {\n-        URL url = new URL(\n-            restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"));\n-        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-        con.setRequestMethod(\"GET\");\n-        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-        assertEquals(200, con.getResponseCode());\n+  @Test\n+  void updateClassificationDocTest() throws Exception {\n+    URL url =\n+        new URL(\n+            restHelper.toUrl(\n+                Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"));\n+    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"GET\");\n+    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+    assertEquals(200, con.getResponseCode());\n \n-        BufferedReader in = new BufferedReader(\n-            new InputStreamReader(con.getInputStream()));\n-        String inputLine;\n-        StringBuffer content = new StringBuffer();\n-        while ((inputLine = in.readLine()) != null) {\n-            content.append(inputLine);\n-        }\n-        in.close();\n-        con.disconnect();\n-        String originalTask = content.toString();\n-        String modifiedTask = new String(originalTask.toString());\n+    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n+    String inputLine;\n+    StringBuffer content = new StringBuffer();\n+    while ((inputLine = in.readLine()) != null) {\n+      content.append(inputLine);\n+    }\n+    in.close();\n+    con.disconnect();\n+    String originalTask = content.toString();\n+    String modifiedTask = new String(originalTask.toString());\n \n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .put(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-            .contentType(\"application/json\")\n-            .content(modifiedTask))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"UpdateClassificationDocTest\",\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.put(\n+                    restHelper.toUrl(\n+                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .contentType(\"application/json\")\n+                .content(modifiedTask))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"UpdateClassificationDocTest\",\n                 requestFields(classificationFieldDescriptors),\n                 responseFields(classificationFieldDescriptors)));\n-    }\n+  }\n }\n", "next_change": {"commit": "007f268be599fda8b884e002b7b03bb260c7620f", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\nindex 2df11e025..394f2f458 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n", "chunk": "@@ -1,354 +1,364 @@\n-package pro.taskana.doc.api;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n-\n-import java.io.BufferedReader;\n-import java.io.InputStreamReader;\n-import java.net.HttpURLConnection;\n-import java.net.URL;\n-import java.util.HashMap;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n-import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n-import org.springframework.restdocs.payload.FieldDescriptor;\n-import org.springframework.test.web.servlet.MvcResult;\n-import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n-\n-import pro.taskana.rest.Mapping;\n-\n-/** Generate REST Dokumentation for ClassificationController. */\n-class ClassificationControllerRestDocumentation extends BaseRestDocumentation {\n-\n-  private HashMap<String, String> classificationFieldDescriptionsMap =\n-      new HashMap<String, String>();\n-\n-  private FieldDescriptor[] allClassificationsFieldDescriptors;\n-  private FieldDescriptor[] classificationFieldDescriptors;\n-  private FieldDescriptor[] classificationSubsetFieldDescriptors;\n-  private FieldDescriptor[] createClassificationFieldDescriptors;\n-\n-  @BeforeEach\n-  void setUp() {\n-\n-    classificationFieldDescriptionsMap.put(\"classificationId\", \"Unique Id\");\n-    classificationFieldDescriptionsMap.put(\n-        \"key\",\n-        \"The key of the classification. This is typically an externally known code or abbreviation of the classification\");\n-    classificationFieldDescriptionsMap.put(\n-        \"parentId\",\n-        \"The id of the parent classification. Empty string (\\\"\\\") if this is a root classification.\");\n-    classificationFieldDescriptionsMap.put(\n-        \"parentKey\",\n-        \"The key of the parent classification. Empty string (\\\"\\\") if this is a root classification.\");\n-    classificationFieldDescriptionsMap.put(\n-        \"category\", \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\");\n-    classificationFieldDescriptionsMap.put(\"type\", \"The type of classification (TASK, DOCUMENT)\");\n-    classificationFieldDescriptionsMap.put(\n-        \"domain\", \"The domain for which this classification is specified\");\n-    classificationFieldDescriptionsMap.put(\n-        \"isValidInDomain\", \"True, if this classification to objects in this domain\");\n-    classificationFieldDescriptionsMap.put(\n-        \"created\", \"The creation timestamp of the classification in the system\");\n-    classificationFieldDescriptionsMap.put(\n-        \"modified\", \"The timestamp of the last modification date\");\n-    classificationFieldDescriptionsMap.put(\"name\", \"The name of the classification\");\n-    classificationFieldDescriptionsMap.put(\"description\", \"The description of the classification\");\n-    classificationFieldDescriptionsMap.put(\"priority\", \"The priority of the classification\");\n-    classificationFieldDescriptionsMap.put(\n-        \"serviceLevel\",\n-        \"The service level of the classification. This is stated according to ISO 8601\");\n-    classificationFieldDescriptionsMap.put(\n-        \"applicationEntryPoint\",\n-        \"The logical name of the entry point, the task list application should redirect to work on a task of this classification\");\n-    classificationFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-    classificationFieldDescriptionsMap.put(\n-        \"_links.getAllClassifications.href\", \"Link to all classifications\");\n-    classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.templated\", \"\");\n-\n-    allClassificationsFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"classifications\")\n-              .description(\"An Array of <<classification-subset, Classification-Subsets>>\"),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n-          fieldWithPath(\"page\").ignored()\n-        };\n-\n-    classificationFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"classificationId\")\n-              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-          fieldWithPath(\"parentKey\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"isValidInDomain\")\n-              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\")),\n-          fieldWithPath(\"created\").description(classificationFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"modified\").description(classificationFieldDescriptionsMap.get(\"modified\")),\n-          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"description\")\n-              .description(classificationFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"serviceLevel\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-          fieldWithPath(\"applicationEntryPoint\")\n-              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\")),\n-          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    classificationSubsetFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"classificationId\")\n-              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"isValidInDomain\").ignored(),\n-          fieldWithPath(\"created\").ignored(),\n-          fieldWithPath(\"modified\").ignored(),\n-          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-          fieldWithPath(\"parentKey\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-          fieldWithPath(\"description\").ignored(),\n-          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"serviceLevel\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-          fieldWithPath(\"applicationEntryPoint\").ignored(),\n-          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    createClassificationFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"category\")\n-              .type(\"String\")\n-              .description(\n-                  \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\")\n-              .optional(),\n-          fieldWithPath(\"domain\")\n-              .description(\"The domain for which this classification is specified\"),\n-          fieldWithPath(\"key\")\n-              .description(\n-                  \"The key of the classification. This is typically an externally known code or abbreviation of the classification\"),\n-          fieldWithPath(\"name\")\n-              .type(\"String\")\n-              .description(\"The name of the classification\")\n-              .optional(),\n-          fieldWithPath(\"type\")\n-              .type(\"String\")\n-              .description(\"The type of classification (TASK, DOCUMENT)\")\n-              .optional(),\n-          fieldWithPath(\"parentId\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentId\"))\n-              .optional(),\n-          fieldWithPath(\"parentKey\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\"))\n-              .optional(),\n-          fieldWithPath(\"isValidInDomain\")\n-              .type(\"Boolean\")\n-              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\"))\n-              .optional(),\n-          fieldWithPath(\"created\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"created\"))\n-              .optional(),\n-          fieldWithPath(\"modified\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"modified\"))\n-              .optional(),\n-          fieldWithPath(\"description\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"description\"))\n-              .optional(),\n-          fieldWithPath(\"priority\")\n-              .type(\"Number\")\n-              .description(classificationFieldDescriptionsMap.get(\"priority\"))\n-              .optional(),\n-          fieldWithPath(\"serviceLevel\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\"))\n-              .optional(),\n-          fieldWithPath(\"applicationEntryPoint\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\"))\n-              .optional(),\n-          fieldWithPath(\"custom1\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom1\"))\n-              .optional(),\n-          fieldWithPath(\"custom2\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom2\"))\n-              .optional(),\n-          fieldWithPath(\"custom3\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom3\"))\n-              .optional(),\n-          fieldWithPath(\"custom4\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom4\"))\n-              .optional(),\n-          fieldWithPath(\"custom5\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom5\"))\n-              .optional(),\n-          fieldWithPath(\"custom6\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom6\"))\n-              .optional(),\n-          fieldWithPath(\"custom7\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom7\"))\n-              .optional(),\n-          fieldWithPath(\"custom8\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom8\"))\n-              .optional()\n-        };\n-  }\n-\n-  @Test\n-  void getAllClassificationsDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS) + \"?domain=DOMAIN_B\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllClassificationsDocTest\",\n-                responseFields(allClassificationsFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void getSpecificClassificationDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetSpecificClassificationDocTest\",\n-                responseFields(classificationFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void classificationSubsetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"ClassificationSubset\", responseFields(classificationSubsetFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void createAndDeleteClassificationDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\"{\\\"key\\\":\\\"Key0815casdgdgh\\\", \\\"domain\\\":\\\"DOMAIN_B\\\"}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"CreateClassificationDocTest\",\n-                    requestFields(createClassificationFieldDescriptors),\n-                    responseFields(classificationFieldDescriptors)))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"CLI:\"), content.indexOf(\"CLI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, newId))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"DeleteClassificationDocTest\"));\n-  }\n-\n-  @Test\n-  void updateClassificationDocTest() throws Exception {\n-    URL url =\n-        new URL(\n-            restHelper.toUrl(\n-                Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    assertEquals(200, con.getResponseCode());\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n-    String inputLine;\n-    StringBuffer content = new StringBuffer();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n-    }\n-    in.close();\n-    con.disconnect();\n-    String originalTask = content.toString();\n-    String modifiedTask = new String(originalTask.toString());\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.put(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .contentType(\"application/json\")\n-                .content(modifiedTask))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"UpdateClassificationDocTest\",\n-                requestFields(classificationFieldDescriptors),\n-                responseFields(classificationFieldDescriptors)));\n-  }\n-}\n+package pro.taskana.doc.api;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.HashMap;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n+import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n+import org.springframework.restdocs.payload.FieldDescriptor;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+\n+import pro.taskana.rest.Mapping;\n+\n+/** Generate REST Dokumentation for ClassificationController. */\n+class ClassificationControllerRestDocumentation extends BaseRestDocumentation {\n+\n+  private HashMap<String, String> classificationFieldDescriptionsMap =\n+      new HashMap<String, String>();\n+\n+  private FieldDescriptor[] allClassificationsFieldDescriptors;\n+  private FieldDescriptor[] classificationFieldDescriptors;\n+  private FieldDescriptor[] classificationSubsetFieldDescriptors;\n+  private FieldDescriptor[] createClassificationFieldDescriptors;\n+\n+  @BeforeEach\n+  void setUp() {\n+\n+    classificationFieldDescriptionsMap.put(\"classificationId\", \"Unique Id\");\n+    classificationFieldDescriptionsMap.put(\n+        \"key\",\n+        \"The key of the classification. This is typically an externally \"\n+            + \"known code or abbreviation of the classification\");\n+    classificationFieldDescriptionsMap.put(\n+        \"parentId\",\n+        \"The id of the parent classification. Empty string (\\\"\\\") \"\n+            + \"if this is a root classification.\");\n+    classificationFieldDescriptionsMap.put(\n+        \"parentKey\",\n+        \"The key of the parent classification. Empty string (\\\"\\\") \"\n+            + \"if this is a root classification.\");\n+    classificationFieldDescriptionsMap.put(\n+        \"category\", \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\");\n+    classificationFieldDescriptionsMap.put(\"type\", \"The type of classification (TASK, DOCUMENT)\");\n+    classificationFieldDescriptionsMap.put(\n+        \"domain\", \"The domain for which this classification is specified\");\n+    classificationFieldDescriptionsMap.put(\n+        \"isValidInDomain\", \"True, if this classification to objects in this domain\");\n+    classificationFieldDescriptionsMap.put(\n+        \"created\", \"The creation timestamp of the classification in the system\");\n+    classificationFieldDescriptionsMap.put(\n+        \"modified\", \"The timestamp of the last modification date\");\n+    classificationFieldDescriptionsMap.put(\"name\", \"The name of the classification\");\n+    classificationFieldDescriptionsMap.put(\"description\", \"The description of the classification\");\n+    classificationFieldDescriptionsMap.put(\"priority\", \"The priority of the classification\");\n+    classificationFieldDescriptionsMap.put(\n+        \"serviceLevel\",\n+        \"The service level of the classification. This is stated according to ISO 8601\");\n+    classificationFieldDescriptionsMap.put(\n+        \"applicationEntryPoint\",\n+        \"The logical name of the entry point, the task list application \"\n+            + \"should redirect to work on a task of this classification\");\n+    classificationFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n+    classificationFieldDescriptionsMap.put(\n+        \"_links.getAllClassifications.href\", \"Link to all classifications\");\n+    classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.templated\", \"\");\n+\n+    allClassificationsFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"classifications\")\n+              .description(\"An Array of <<classification-subset, Classification-Subsets>>\"),\n+          fieldWithPath(\"_links.self.href\").ignored(),\n+          fieldWithPath(\"page\").ignored(),\n+          fieldWithPath(\"page.size\").ignored(),\n+          fieldWithPath(\"page.totalElements\").ignored(),\n+          fieldWithPath(\"page.totalPages\").ignored(),\n+          fieldWithPath(\"page.number\").ignored()\n+        };\n+\n+    classificationFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"classificationId\")\n+              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n+          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n+          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n+          fieldWithPath(\"parentKey\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n+          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n+          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n+          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n+          fieldWithPath(\"isValidInDomain\")\n+              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\")),\n+          fieldWithPath(\"created\").description(classificationFieldDescriptionsMap.get(\"created\")),\n+          fieldWithPath(\"modified\").description(classificationFieldDescriptionsMap.get(\"modified\")),\n+          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"description\")\n+              .description(classificationFieldDescriptionsMap.get(\"description\")),\n+          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"serviceLevel\")\n+              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n+          fieldWithPath(\"applicationEntryPoint\")\n+              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\")),\n+          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n+          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n+          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n+          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n+          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n+          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n+          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n+          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n+          fieldWithPath(\"_links.self.href\").ignored()\n+        };\n+\n+    classificationSubsetFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"classificationId\")\n+              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n+          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n+          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n+          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n+          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n+          fieldWithPath(\"isValidInDomain\").ignored(),\n+          fieldWithPath(\"created\").ignored(),\n+          fieldWithPath(\"modified\").ignored(),\n+          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n+          fieldWithPath(\"parentKey\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n+          fieldWithPath(\"description\").ignored(),\n+          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"serviceLevel\")\n+              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n+          fieldWithPath(\"applicationEntryPoint\").ignored(),\n+          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n+          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n+          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n+          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n+          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n+          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n+          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n+          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n+          fieldWithPath(\"_links.self.href\").ignored()\n+        };\n+\n+    createClassificationFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"category\")\n+              .type(\"String\")\n+              .description(\n+                  \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\")\n+              .optional(),\n+          fieldWithPath(\"domain\")\n+              .description(\"The domain for which this classification is specified\"),\n+          fieldWithPath(\"key\")\n+              .description(\n+                  \"The key of the classification. This is typically an externally \"\n+                      + \"known code or abbreviation of the classification\"),\n+          fieldWithPath(\"name\")\n+              .type(\"String\")\n+              .description(\"The name of the classification\")\n+              .optional(),\n+          fieldWithPath(\"type\")\n+              .type(\"String\")\n+              .description(\"The type of classification (TASK, DOCUMENT)\")\n+              .optional(),\n+          fieldWithPath(\"parentId\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentId\"))\n+              .optional(),\n+          fieldWithPath(\"parentKey\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentKey\"))\n+              .optional(),\n+          fieldWithPath(\"isValidInDomain\")\n+              .type(\"Boolean\")\n+              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\"))\n+              .optional(),\n+          fieldWithPath(\"created\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"created\"))\n+              .optional(),\n+          fieldWithPath(\"modified\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"modified\"))\n+              .optional(),\n+          fieldWithPath(\"description\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"description\"))\n+              .optional(),\n+          fieldWithPath(\"priority\")\n+              .type(\"Number\")\n+              .description(classificationFieldDescriptionsMap.get(\"priority\"))\n+              .optional(),\n+          fieldWithPath(\"serviceLevel\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\"))\n+              .optional(),\n+          fieldWithPath(\"applicationEntryPoint\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\"))\n+              .optional(),\n+          fieldWithPath(\"custom1\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom1\"))\n+              .optional(),\n+          fieldWithPath(\"custom2\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom2\"))\n+              .optional(),\n+          fieldWithPath(\"custom3\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom3\"))\n+              .optional(),\n+          fieldWithPath(\"custom4\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom4\"))\n+              .optional(),\n+          fieldWithPath(\"custom5\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom5\"))\n+              .optional(),\n+          fieldWithPath(\"custom6\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom6\"))\n+              .optional(),\n+          fieldWithPath(\"custom7\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom7\"))\n+              .optional(),\n+          fieldWithPath(\"custom8\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom8\"))\n+              .optional()\n+        };\n+  }\n+\n+  @Test\n+  void getAllClassificationsDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS) + \"?domain=DOMAIN_B\")\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetAllClassificationsDocTest\",\n+                responseFields(allClassificationsFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void getSpecificClassificationDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetSpecificClassificationDocTest\",\n+                responseFields(classificationFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void classificationSubsetDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"ClassificationSubset\", responseFields(classificationSubsetFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void createAndDeleteClassificationDocTest() throws Exception {\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\"{\\\"key\\\":\\\"Key0815casdgdgh\\\", \\\"domain\\\":\\\"DOMAIN_B\\\"}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isCreated())\n+            .andDo(\n+                MockMvcRestDocumentation.document(\n+                    \"CreateClassificationDocTest\",\n+                    requestFields(createClassificationFieldDescriptors),\n+                    responseFields(classificationFieldDescriptors)))\n+            .andReturn();\n+\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"CLI:\"), content.indexOf(\"CLI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(\n+                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, newId))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isNoContent())\n+        .andDo(MockMvcRestDocumentation.document(\"DeleteClassificationDocTest\"));\n+  }\n+\n+  @Test\n+  void updateClassificationDocTest() throws Exception {\n+    URL url =\n+        new URL(\n+            restHelper.toUrl(\n+                Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"));\n+    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"GET\");\n+    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+    assertEquals(200, con.getResponseCode());\n+\n+    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n+    String inputLine;\n+    StringBuffer content = new StringBuffer();\n+    while ((inputLine = in.readLine()) != null) {\n+      content.append(inputLine);\n+    }\n+    in.close();\n+    con.disconnect();\n+    String originalTask = content.toString();\n+    String modifiedTask = originalTask;\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.put(\n+                    restHelper.toUrl(\n+                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .contentType(\"application/json\")\n+                .content(modifiedTask))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"UpdateClassificationDocTest\",\n+                requestFields(classificationFieldDescriptors),\n+                responseFields(classificationFieldDescriptors)));\n+  }\n+}\n", "next_change": {"commit": "60d4b29015cb128e4d4c03e90ff244a0cf13710a", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\nindex 394f2f458..d2068bdb4 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n", "chunk": "@@ -1,364 +1,364 @@\n-package pro.taskana.doc.api;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-import static org.junit.Assert.assertEquals;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n-\n-import java.io.BufferedReader;\n-import java.io.InputStreamReader;\n-import java.net.HttpURLConnection;\n-import java.net.URL;\n-import java.util.HashMap;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n-import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n-import org.springframework.restdocs.payload.FieldDescriptor;\n-import org.springframework.test.web.servlet.MvcResult;\n-import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n-\n-import pro.taskana.rest.Mapping;\n-\n-/** Generate REST Dokumentation for ClassificationController. */\n-class ClassificationControllerRestDocumentation extends BaseRestDocumentation {\n-\n-  private HashMap<String, String> classificationFieldDescriptionsMap =\n-      new HashMap<String, String>();\n-\n-  private FieldDescriptor[] allClassificationsFieldDescriptors;\n-  private FieldDescriptor[] classificationFieldDescriptors;\n-  private FieldDescriptor[] classificationSubsetFieldDescriptors;\n-  private FieldDescriptor[] createClassificationFieldDescriptors;\n-\n-  @BeforeEach\n-  void setUp() {\n-\n-    classificationFieldDescriptionsMap.put(\"classificationId\", \"Unique Id\");\n-    classificationFieldDescriptionsMap.put(\n-        \"key\",\n-        \"The key of the classification. This is typically an externally \"\n-            + \"known code or abbreviation of the classification\");\n-    classificationFieldDescriptionsMap.put(\n-        \"parentId\",\n-        \"The id of the parent classification. Empty string (\\\"\\\") \"\n-            + \"if this is a root classification.\");\n-    classificationFieldDescriptionsMap.put(\n-        \"parentKey\",\n-        \"The key of the parent classification. Empty string (\\\"\\\") \"\n-            + \"if this is a root classification.\");\n-    classificationFieldDescriptionsMap.put(\n-        \"category\", \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\");\n-    classificationFieldDescriptionsMap.put(\"type\", \"The type of classification (TASK, DOCUMENT)\");\n-    classificationFieldDescriptionsMap.put(\n-        \"domain\", \"The domain for which this classification is specified\");\n-    classificationFieldDescriptionsMap.put(\n-        \"isValidInDomain\", \"True, if this classification to objects in this domain\");\n-    classificationFieldDescriptionsMap.put(\n-        \"created\", \"The creation timestamp of the classification in the system\");\n-    classificationFieldDescriptionsMap.put(\n-        \"modified\", \"The timestamp of the last modification date\");\n-    classificationFieldDescriptionsMap.put(\"name\", \"The name of the classification\");\n-    classificationFieldDescriptionsMap.put(\"description\", \"The description of the classification\");\n-    classificationFieldDescriptionsMap.put(\"priority\", \"The priority of the classification\");\n-    classificationFieldDescriptionsMap.put(\n-        \"serviceLevel\",\n-        \"The service level of the classification. This is stated according to ISO 8601\");\n-    classificationFieldDescriptionsMap.put(\n-        \"applicationEntryPoint\",\n-        \"The logical name of the entry point, the task list application \"\n-            + \"should redirect to work on a task of this classification\");\n-    classificationFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-    classificationFieldDescriptionsMap.put(\n-        \"_links.getAllClassifications.href\", \"Link to all classifications\");\n-    classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.templated\", \"\");\n-\n-    allClassificationsFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"classifications\")\n-              .description(\"An Array of <<classification-subset, Classification-Subsets>>\"),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n-          fieldWithPath(\"page\").ignored(),\n-          fieldWithPath(\"page.size\").ignored(),\n-          fieldWithPath(\"page.totalElements\").ignored(),\n-          fieldWithPath(\"page.totalPages\").ignored(),\n-          fieldWithPath(\"page.number\").ignored()\n-        };\n-\n-    classificationFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"classificationId\")\n-              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-          fieldWithPath(\"parentKey\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"isValidInDomain\")\n-              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\")),\n-          fieldWithPath(\"created\").description(classificationFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"modified\").description(classificationFieldDescriptionsMap.get(\"modified\")),\n-          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"description\")\n-              .description(classificationFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"serviceLevel\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-          fieldWithPath(\"applicationEntryPoint\")\n-              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\")),\n-          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    classificationSubsetFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"classificationId\")\n-              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"isValidInDomain\").ignored(),\n-          fieldWithPath(\"created\").ignored(),\n-          fieldWithPath(\"modified\").ignored(),\n-          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-          fieldWithPath(\"parentKey\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-          fieldWithPath(\"description\").ignored(),\n-          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"serviceLevel\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-          fieldWithPath(\"applicationEntryPoint\").ignored(),\n-          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    createClassificationFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"category\")\n-              .type(\"String\")\n-              .description(\n-                  \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\")\n-              .optional(),\n-          fieldWithPath(\"domain\")\n-              .description(\"The domain for which this classification is specified\"),\n-          fieldWithPath(\"key\")\n-              .description(\n-                  \"The key of the classification. This is typically an externally \"\n-                      + \"known code or abbreviation of the classification\"),\n-          fieldWithPath(\"name\")\n-              .type(\"String\")\n-              .description(\"The name of the classification\")\n-              .optional(),\n-          fieldWithPath(\"type\")\n-              .type(\"String\")\n-              .description(\"The type of classification (TASK, DOCUMENT)\")\n-              .optional(),\n-          fieldWithPath(\"parentId\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentId\"))\n-              .optional(),\n-          fieldWithPath(\"parentKey\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\"))\n-              .optional(),\n-          fieldWithPath(\"isValidInDomain\")\n-              .type(\"Boolean\")\n-              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\"))\n-              .optional(),\n-          fieldWithPath(\"created\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"created\"))\n-              .optional(),\n-          fieldWithPath(\"modified\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"modified\"))\n-              .optional(),\n-          fieldWithPath(\"description\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"description\"))\n-              .optional(),\n-          fieldWithPath(\"priority\")\n-              .type(\"Number\")\n-              .description(classificationFieldDescriptionsMap.get(\"priority\"))\n-              .optional(),\n-          fieldWithPath(\"serviceLevel\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\"))\n-              .optional(),\n-          fieldWithPath(\"applicationEntryPoint\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\"))\n-              .optional(),\n-          fieldWithPath(\"custom1\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom1\"))\n-              .optional(),\n-          fieldWithPath(\"custom2\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom2\"))\n-              .optional(),\n-          fieldWithPath(\"custom3\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom3\"))\n-              .optional(),\n-          fieldWithPath(\"custom4\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom4\"))\n-              .optional(),\n-          fieldWithPath(\"custom5\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom5\"))\n-              .optional(),\n-          fieldWithPath(\"custom6\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom6\"))\n-              .optional(),\n-          fieldWithPath(\"custom7\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom7\"))\n-              .optional(),\n-          fieldWithPath(\"custom8\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom8\"))\n-              .optional()\n-        };\n-  }\n-\n-  @Test\n-  void getAllClassificationsDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS) + \"?domain=DOMAIN_B\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllClassificationsDocTest\",\n-                responseFields(allClassificationsFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void getSpecificClassificationDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetSpecificClassificationDocTest\",\n-                responseFields(classificationFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void classificationSubsetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"ClassificationSubset\", responseFields(classificationSubsetFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void createAndDeleteClassificationDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\"{\\\"key\\\":\\\"Key0815casdgdgh\\\", \\\"domain\\\":\\\"DOMAIN_B\\\"}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"CreateClassificationDocTest\",\n-                    requestFields(createClassificationFieldDescriptors),\n-                    responseFields(classificationFieldDescriptors)))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"CLI:\"), content.indexOf(\"CLI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, newId))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"DeleteClassificationDocTest\"));\n-  }\n-\n-  @Test\n-  void updateClassificationDocTest() throws Exception {\n-    URL url =\n-        new URL(\n-            restHelper.toUrl(\n-                Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    assertEquals(200, con.getResponseCode());\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuffer content = new StringBuffer();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n-    }\n-    in.close();\n-    con.disconnect();\n-    String originalTask = content.toString();\n-    String modifiedTask = originalTask;\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.put(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .contentType(\"application/json\")\n-                .content(modifiedTask))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"UpdateClassificationDocTest\",\n-                requestFields(classificationFieldDescriptors),\n-                responseFields(classificationFieldDescriptors)));\n-  }\n-}\n+package pro.taskana.doc.api;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.HashMap;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n+import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n+import org.springframework.restdocs.payload.FieldDescriptor;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+\n+import pro.taskana.rest.Mapping;\n+\n+/** Generate REST Dokumentation for ClassificationController. */\n+class ClassificationControllerRestDocumentation extends BaseRestDocumentation {\n+\n+  private HashMap<String, String> classificationFieldDescriptionsMap =\n+      new HashMap<String, String>();\n+\n+  private FieldDescriptor[] allClassificationsFieldDescriptors;\n+  private FieldDescriptor[] classificationFieldDescriptors;\n+  private FieldDescriptor[] classificationSubsetFieldDescriptors;\n+  private FieldDescriptor[] createClassificationFieldDescriptors;\n+\n+  @BeforeEach\n+  void setUp() {\n+\n+    classificationFieldDescriptionsMap.put(\"classificationId\", \"Unique Id\");\n+    classificationFieldDescriptionsMap.put(\n+        \"key\",\n+        \"The key of the classification. This is typically an externally \"\n+            + \"known code or abbreviation of the classification\");\n+    classificationFieldDescriptionsMap.put(\n+        \"parentId\",\n+        \"The id of the parent classification. Empty string (\\\"\\\") \"\n+            + \"if this is a root classification.\");\n+    classificationFieldDescriptionsMap.put(\n+        \"parentKey\",\n+        \"The key of the parent classification. Empty string (\\\"\\\") \"\n+            + \"if this is a root classification.\");\n+    classificationFieldDescriptionsMap.put(\n+        \"category\", \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\");\n+    classificationFieldDescriptionsMap.put(\"type\", \"The type of classification (TASK, DOCUMENT)\");\n+    classificationFieldDescriptionsMap.put(\n+        \"domain\", \"The domain for which this classification is specified\");\n+    classificationFieldDescriptionsMap.put(\n+        \"isValidInDomain\", \"True, if this classification to objects in this domain\");\n+    classificationFieldDescriptionsMap.put(\n+        \"created\", \"The creation timestamp of the classification in the system\");\n+    classificationFieldDescriptionsMap.put(\n+        \"modified\", \"The timestamp of the last modification date\");\n+    classificationFieldDescriptionsMap.put(\"name\", \"The name of the classification\");\n+    classificationFieldDescriptionsMap.put(\"description\", \"The description of the classification\");\n+    classificationFieldDescriptionsMap.put(\"priority\", \"The priority of the classification\");\n+    classificationFieldDescriptionsMap.put(\n+        \"serviceLevel\",\n+        \"The service level of the classification. This is stated according to ISO 8601\");\n+    classificationFieldDescriptionsMap.put(\n+        \"applicationEntryPoint\",\n+        \"The logical name of the entry point, the task list application \"\n+            + \"should redirect to work on a task of this classification\");\n+    classificationFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n+    classificationFieldDescriptionsMap.put(\n+        \"_links.getAllClassifications.href\", \"Link to all classifications\");\n+    classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.templated\", \"\");\n+\n+    allClassificationsFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"classifications\")\n+              .description(\"An Array of <<classification-subset, Classification-Subsets>>\"),\n+          fieldWithPath(\"_links.self.href\").ignored(),\n+          fieldWithPath(\"page\").ignored(),\n+          fieldWithPath(\"page.size\").ignored(),\n+          fieldWithPath(\"page.totalElements\").ignored(),\n+          fieldWithPath(\"page.totalPages\").ignored(),\n+          fieldWithPath(\"page.number\").ignored()\n+        };\n+\n+    classificationFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"classificationId\")\n+              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n+          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n+          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n+          fieldWithPath(\"parentKey\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n+          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n+          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n+          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n+          fieldWithPath(\"isValidInDomain\")\n+              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\")),\n+          fieldWithPath(\"created\").description(classificationFieldDescriptionsMap.get(\"created\")),\n+          fieldWithPath(\"modified\").description(classificationFieldDescriptionsMap.get(\"modified\")),\n+          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"description\")\n+              .description(classificationFieldDescriptionsMap.get(\"description\")),\n+          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"serviceLevel\")\n+              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n+          fieldWithPath(\"applicationEntryPoint\")\n+              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\")),\n+          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n+          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n+          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n+          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n+          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n+          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n+          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n+          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n+          fieldWithPath(\"_links.self.href\").ignored()\n+        };\n+\n+    classificationSubsetFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"classificationId\")\n+              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n+          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n+          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n+          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n+          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n+          fieldWithPath(\"isValidInDomain\").ignored(),\n+          fieldWithPath(\"created\").ignored(),\n+          fieldWithPath(\"modified\").ignored(),\n+          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n+          fieldWithPath(\"parentKey\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n+          fieldWithPath(\"description\").ignored(),\n+          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"serviceLevel\")\n+              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n+          fieldWithPath(\"applicationEntryPoint\").ignored(),\n+          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n+          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n+          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n+          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n+          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n+          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n+          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n+          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n+          fieldWithPath(\"_links.self.href\").ignored()\n+        };\n+\n+    createClassificationFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"category\")\n+              .type(\"String\")\n+              .description(\n+                  \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\")\n+              .optional(),\n+          fieldWithPath(\"domain\")\n+              .description(\"The domain for which this classification is specified\"),\n+          fieldWithPath(\"key\")\n+              .description(\n+                  \"The key of the classification. This is typically an externally \"\n+                      + \"known code or abbreviation of the classification\"),\n+          fieldWithPath(\"name\")\n+              .type(\"String\")\n+              .description(\"The name of the classification\")\n+              .optional(),\n+          fieldWithPath(\"type\")\n+              .type(\"String\")\n+              .description(\"The type of classification (TASK, DOCUMENT)\")\n+              .optional(),\n+          fieldWithPath(\"parentId\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentId\"))\n+              .optional(),\n+          fieldWithPath(\"parentKey\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentKey\"))\n+              .optional(),\n+          fieldWithPath(\"isValidInDomain\")\n+              .type(\"Boolean\")\n+              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\"))\n+              .optional(),\n+          fieldWithPath(\"created\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"created\"))\n+              .optional(),\n+          fieldWithPath(\"modified\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"modified\"))\n+              .optional(),\n+          fieldWithPath(\"description\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"description\"))\n+              .optional(),\n+          fieldWithPath(\"priority\")\n+              .type(\"Number\")\n+              .description(classificationFieldDescriptionsMap.get(\"priority\"))\n+              .optional(),\n+          fieldWithPath(\"serviceLevel\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\"))\n+              .optional(),\n+          fieldWithPath(\"applicationEntryPoint\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\"))\n+              .optional(),\n+          fieldWithPath(\"custom1\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom1\"))\n+              .optional(),\n+          fieldWithPath(\"custom2\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom2\"))\n+              .optional(),\n+          fieldWithPath(\"custom3\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom3\"))\n+              .optional(),\n+          fieldWithPath(\"custom4\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom4\"))\n+              .optional(),\n+          fieldWithPath(\"custom5\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom5\"))\n+              .optional(),\n+          fieldWithPath(\"custom6\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom6\"))\n+              .optional(),\n+          fieldWithPath(\"custom7\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom7\"))\n+              .optional(),\n+          fieldWithPath(\"custom8\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom8\"))\n+              .optional()\n+        };\n+  }\n+\n+  @Test\n+  void getAllClassificationsDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS) + \"?domain=DOMAIN_B\")\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetAllClassificationsDocTest\",\n+                responseFields(allClassificationsFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void getSpecificClassificationDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetSpecificClassificationDocTest\",\n+                responseFields(classificationFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void classificationSubsetDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"ClassificationSubset\", responseFields(classificationSubsetFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void createAndDeleteClassificationDocTest() throws Exception {\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\"{\\\"key\\\":\\\"Key0815casdgdgh\\\", \\\"domain\\\":\\\"DOMAIN_B\\\"}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isCreated())\n+            .andDo(\n+                MockMvcRestDocumentation.document(\n+                    \"CreateClassificationDocTest\",\n+                    requestFields(createClassificationFieldDescriptors),\n+                    responseFields(classificationFieldDescriptors)))\n+            .andReturn();\n+\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"CLI:\"), content.indexOf(\"CLI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(\n+                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, newId))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isNoContent())\n+        .andDo(MockMvcRestDocumentation.document(\"DeleteClassificationDocTest\"));\n+  }\n+\n+  @Test\n+  void updateClassificationDocTest() throws Exception {\n+    URL url =\n+        new URL(\n+            restHelper.toUrl(\n+                Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"));\n+    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"GET\");\n+    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+    assertEquals(200, con.getResponseCode());\n+\n+    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n+    String inputLine;\n+    StringBuffer content = new StringBuffer();\n+    while ((inputLine = in.readLine()) != null) {\n+      content.append(inputLine);\n+    }\n+    in.close();\n+    con.disconnect();\n+    String originalTask = content.toString();\n+    String modifiedTask = originalTask;\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.put(\n+                    restHelper.toUrl(\n+                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .contentType(\"application/json\")\n+                .content(modifiedTask))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"UpdateClassificationDocTest\",\n+                requestFields(classificationFieldDescriptors),\n+                responseFields(classificationFieldDescriptors)));\n+  }\n+}\n", "next_change": {"commit": "3967e2900e8b35329b3675844ca3a8e059916c7e", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\ndeleted file mode 100644\nindex d2068bdb4..000000000\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n+++ /dev/null\n", "chunk": "@@ -1,364 +0,0 @@\n-package pro.taskana.doc.api;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-import static org.junit.Assert.assertEquals;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n-\n-import java.io.BufferedReader;\n-import java.io.InputStreamReader;\n-import java.net.HttpURLConnection;\n-import java.net.URL;\n-import java.util.HashMap;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n-import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n-import org.springframework.restdocs.payload.FieldDescriptor;\n-import org.springframework.test.web.servlet.MvcResult;\n-import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n-\n-import pro.taskana.rest.Mapping;\n-\n-/** Generate REST Dokumentation for ClassificationController. */\n-class ClassificationControllerRestDocumentation extends BaseRestDocumentation {\n-\n-  private HashMap<String, String> classificationFieldDescriptionsMap =\n-      new HashMap<String, String>();\n-\n-  private FieldDescriptor[] allClassificationsFieldDescriptors;\n-  private FieldDescriptor[] classificationFieldDescriptors;\n-  private FieldDescriptor[] classificationSubsetFieldDescriptors;\n-  private FieldDescriptor[] createClassificationFieldDescriptors;\n-\n-  @BeforeEach\n-  void setUp() {\n-\n-    classificationFieldDescriptionsMap.put(\"classificationId\", \"Unique Id\");\n-    classificationFieldDescriptionsMap.put(\n-        \"key\",\n-        \"The key of the classification. This is typically an externally \"\n-            + \"known code or abbreviation of the classification\");\n-    classificationFieldDescriptionsMap.put(\n-        \"parentId\",\n-        \"The id of the parent classification. Empty string (\\\"\\\") \"\n-            + \"if this is a root classification.\");\n-    classificationFieldDescriptionsMap.put(\n-        \"parentKey\",\n-        \"The key of the parent classification. Empty string (\\\"\\\") \"\n-            + \"if this is a root classification.\");\n-    classificationFieldDescriptionsMap.put(\n-        \"category\", \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\");\n-    classificationFieldDescriptionsMap.put(\"type\", \"The type of classification (TASK, DOCUMENT)\");\n-    classificationFieldDescriptionsMap.put(\n-        \"domain\", \"The domain for which this classification is specified\");\n-    classificationFieldDescriptionsMap.put(\n-        \"isValidInDomain\", \"True, if this classification to objects in this domain\");\n-    classificationFieldDescriptionsMap.put(\n-        \"created\", \"The creation timestamp of the classification in the system\");\n-    classificationFieldDescriptionsMap.put(\n-        \"modified\", \"The timestamp of the last modification date\");\n-    classificationFieldDescriptionsMap.put(\"name\", \"The name of the classification\");\n-    classificationFieldDescriptionsMap.put(\"description\", \"The description of the classification\");\n-    classificationFieldDescriptionsMap.put(\"priority\", \"The priority of the classification\");\n-    classificationFieldDescriptionsMap.put(\n-        \"serviceLevel\",\n-        \"The service level of the classification. This is stated according to ISO 8601\");\n-    classificationFieldDescriptionsMap.put(\n-        \"applicationEntryPoint\",\n-        \"The logical name of the entry point, the task list application \"\n-            + \"should redirect to work on a task of this classification\");\n-    classificationFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-    classificationFieldDescriptionsMap.put(\n-        \"_links.getAllClassifications.href\", \"Link to all classifications\");\n-    classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.templated\", \"\");\n-\n-    allClassificationsFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"classifications\")\n-              .description(\"An Array of <<classification-subset, Classification-Subsets>>\"),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n-          fieldWithPath(\"page\").ignored(),\n-          fieldWithPath(\"page.size\").ignored(),\n-          fieldWithPath(\"page.totalElements\").ignored(),\n-          fieldWithPath(\"page.totalPages\").ignored(),\n-          fieldWithPath(\"page.number\").ignored()\n-        };\n-\n-    classificationFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"classificationId\")\n-              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-          fieldWithPath(\"parentKey\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"isValidInDomain\")\n-              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\")),\n-          fieldWithPath(\"created\").description(classificationFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"modified\").description(classificationFieldDescriptionsMap.get(\"modified\")),\n-          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"description\")\n-              .description(classificationFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"serviceLevel\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-          fieldWithPath(\"applicationEntryPoint\")\n-              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\")),\n-          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    classificationSubsetFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"classificationId\")\n-              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"isValidInDomain\").ignored(),\n-          fieldWithPath(\"created\").ignored(),\n-          fieldWithPath(\"modified\").ignored(),\n-          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-          fieldWithPath(\"parentKey\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-          fieldWithPath(\"description\").ignored(),\n-          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"serviceLevel\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-          fieldWithPath(\"applicationEntryPoint\").ignored(),\n-          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    createClassificationFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"category\")\n-              .type(\"String\")\n-              .description(\n-                  \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\")\n-              .optional(),\n-          fieldWithPath(\"domain\")\n-              .description(\"The domain for which this classification is specified\"),\n-          fieldWithPath(\"key\")\n-              .description(\n-                  \"The key of the classification. This is typically an externally \"\n-                      + \"known code or abbreviation of the classification\"),\n-          fieldWithPath(\"name\")\n-              .type(\"String\")\n-              .description(\"The name of the classification\")\n-              .optional(),\n-          fieldWithPath(\"type\")\n-              .type(\"String\")\n-              .description(\"The type of classification (TASK, DOCUMENT)\")\n-              .optional(),\n-          fieldWithPath(\"parentId\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentId\"))\n-              .optional(),\n-          fieldWithPath(\"parentKey\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\"))\n-              .optional(),\n-          fieldWithPath(\"isValidInDomain\")\n-              .type(\"Boolean\")\n-              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\"))\n-              .optional(),\n-          fieldWithPath(\"created\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"created\"))\n-              .optional(),\n-          fieldWithPath(\"modified\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"modified\"))\n-              .optional(),\n-          fieldWithPath(\"description\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"description\"))\n-              .optional(),\n-          fieldWithPath(\"priority\")\n-              .type(\"Number\")\n-              .description(classificationFieldDescriptionsMap.get(\"priority\"))\n-              .optional(),\n-          fieldWithPath(\"serviceLevel\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\"))\n-              .optional(),\n-          fieldWithPath(\"applicationEntryPoint\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\"))\n-              .optional(),\n-          fieldWithPath(\"custom1\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom1\"))\n-              .optional(),\n-          fieldWithPath(\"custom2\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom2\"))\n-              .optional(),\n-          fieldWithPath(\"custom3\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom3\"))\n-              .optional(),\n-          fieldWithPath(\"custom4\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom4\"))\n-              .optional(),\n-          fieldWithPath(\"custom5\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom5\"))\n-              .optional(),\n-          fieldWithPath(\"custom6\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom6\"))\n-              .optional(),\n-          fieldWithPath(\"custom7\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom7\"))\n-              .optional(),\n-          fieldWithPath(\"custom8\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom8\"))\n-              .optional()\n-        };\n-  }\n-\n-  @Test\n-  void getAllClassificationsDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS) + \"?domain=DOMAIN_B\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllClassificationsDocTest\",\n-                responseFields(allClassificationsFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void getSpecificClassificationDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetSpecificClassificationDocTest\",\n-                responseFields(classificationFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void classificationSubsetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"ClassificationSubset\", responseFields(classificationSubsetFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void createAndDeleteClassificationDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\"{\\\"key\\\":\\\"Key0815casdgdgh\\\", \\\"domain\\\":\\\"DOMAIN_B\\\"}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"CreateClassificationDocTest\",\n-                    requestFields(createClassificationFieldDescriptors),\n-                    responseFields(classificationFieldDescriptors)))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"CLI:\"), content.indexOf(\"CLI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, newId))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"DeleteClassificationDocTest\"));\n-  }\n-\n-  @Test\n-  void updateClassificationDocTest() throws Exception {\n-    URL url =\n-        new URL(\n-            restHelper.toUrl(\n-                Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    assertEquals(200, con.getResponseCode());\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuffer content = new StringBuffer();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n-    }\n-    in.close();\n-    con.disconnect();\n-    String originalTask = content.toString();\n-    String modifiedTask = originalTask;\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.put(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .contentType(\"application/json\")\n-                .content(modifiedTask))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"UpdateClassificationDocTest\",\n-                requestFields(classificationFieldDescriptors),\n-                responseFields(classificationFieldDescriptors)));\n-  }\n-}\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "committedDate": "2019-12-04 09:56:34 +0100", "message": "TSK-967: Merge module taskana-rest-spring and taskana-rest-spring-test"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "7509bb0f1c7cfb9e8bcc634fbd3f80c0b74b5ca6", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: Fix simple checkstyle warnings"}, {"oid": "c1d74b212648dad55f3d09e2c19868098ebbdb8a", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: automatic formatting number 2"}, {"oid": "6a6dcb9c1e3984670c644f89c569eba3d20dcf3d", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Standardise paginated List behaviour and sub classes"}, {"oid": "4d560532bd98ef3dfe573c40c00506fcef21f912", "committedDate": "2020-01-23 14:23:56 +0100", "message": "TSK-987: Fix Spotbugs - reliance on default encoding"}, {"oid": "007f268be599fda8b884e002b7b03bb260c7620f", "committedDate": "2020-02-11 17:05:34 +0100", "message": "TSK-1031: update Spring Boot to 2.2.4.RELEASE except Hateoas."}, {"oid": "60d4b29015cb128e4d4c03e90ff244a0cf13710a", "committedDate": "2020-02-11 17:05:34 +0100", "message": "TSK-1031: formatting issues fixed."}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}, {"oid": "cc4efaa1cdd708366adea79d631b8aa5ccc013a8", "committedDate": "2020-06-05 20:03:15 +0200", "message": "TSK-1210: Replaced LoginModule with Embedded Spring LDAP"}, {"oid": "a2318c267ea7f6d57cfffefc04c5285e66778fac", "committedDate": "2020-06-12 12:31:55 +0200", "message": "reformatted code"}, {"oid": "121a9c103fe9b04606635f8c132489504fe2d414", "committedDate": "2020-10-13 17:07:09 +0200", "message": "TSK-1407: adopted RestDocumentation tests to use taskana-common-test aswell"}, {"oid": "6dc782e37ac378b636daaef8d9134d17294845d2", "committedDate": "2020-10-30 01:36:27 +0100", "message": "TSK-1430: Rename Mapping to RestEndpoints, groups relevant endpoints together"}, {"oid": "6133b66059044789b777c561039ef87a2c9908f0", "committedDate": "2020-11-30 12:25:03 +0100", "message": "TSK-1419: Null check for Service Level in classification service"}, {"oid": "8c6beb6e9601d9eb98e7299d3f7743bf721678d3", "committedDate": "2020-12-03 12:53:29 +0100", "message": "TSK-1239: All tests now working with Assertj instead of junit Assertion. (#1346)"}, {"oid": "3967e2900e8b35329b3675844ca3a8e059916c7e", "committedDate": "2020-12-18 11:29:10 +0100", "message": "TSK-1436: rest api documentation is now build with spring-auto-restdocs"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MzAxNw==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422663017", "body": "please use `classificationSummary`", "bodyText": "please use classificationSummary", "bodyHTML": "<p dir=\"auto\">please use <code>classificationSummary</code></p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:49:59Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java", "diffHunk": "@@ -60,10 +60,11 @@ void setUp() {\n     taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n     taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n     taskFieldDescriptionsMap.put(\n-        \"classificationSummaryResource\",\n+        \"classificationSummaryRepresentationModel\",", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex 66e2340e4..a9ecfa5fe 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -60,10 +60,10 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n     taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n     taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n     taskFieldDescriptionsMap.put(\n-        \"classificationSummaryRepresentationModel\",\n+        \"classificationSummary\",\n         \"The <<classification-subset, Classification>> of the task\");\n     taskFieldDescriptionsMap.put(\n-        \"workbasketSummaryRepresentationModel\",\n+        \"workbasketSummary\",\n         \"The <<workbasket-subset, Workbasket>> of the task\");\n     taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n     taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex 66e2340e4..a9ecfa5fe 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -60,10 +60,10 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n     taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n     taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n     taskFieldDescriptionsMap.put(\n-        \"classificationSummaryRepresentationModel\",\n+        \"classificationSummary\",\n         \"The <<classification-subset, Classification>> of the task\");\n     taskFieldDescriptionsMap.put(\n-        \"workbasketSummaryRepresentationModel\",\n+        \"workbasketSummary\",\n         \"The <<workbasket-subset, Workbasket>> of the task\");\n     taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n     taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n", "next_change": {"commit": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex a9ecfa5fe..3958c3e96 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -22,704 +22,455 @@ import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n \n import pro.taskana.rest.Mapping;\n \n-/** Generate REST Documentation for the TaskController. */\n+/**\n+ * Generate REST Documentation for the TaskController.\n+ */\n class TaskControllerRestDocumentation extends BaseRestDocumentation {\n \n-  private final HashMap<String, String> taskFieldDescriptionsMap = new HashMap<>();\n-\n-  private FieldDescriptor[] allTasksFieldDescriptors;\n-  private FieldDescriptor[] taskFieldDescriptors;\n-  private FieldDescriptor[] taskSubsetFieldDescriptors;\n-  private FieldDescriptor[] createTaskFieldDescriptors;\n-\n-  @BeforeEach\n-  void setUp() {\n-\n-    taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n-    taskFieldDescriptionsMap.put(\n-        \"externalId\",\n-        \"External ID. Can be used to enforce idempotence at task creation. \"\n-            + \"Can identify an external task.\");\n-    taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n-    taskFieldDescriptionsMap.put(\n-        \"claimed\", \"The timestamp of the last claim-operation on the task\");\n-    taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n-    taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n-    taskFieldDescriptionsMap.put(\n-        \"planned\",\n-        \"Planned start of the task. The actual completion of the task \"\n-            + \"should be between PLANNED and DUE.\");\n-    taskFieldDescriptionsMap.put(\n-        \"due\",\n-        \"Timestamp when the task is due. The actual completion of the task \"\n-            + \"should be between PLANNED and DUE.\");\n-    taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n-    taskFieldDescriptionsMap.put(\"creator\", \"\");\n-    taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n-    taskFieldDescriptionsMap.put(\"note\", \"note\");\n-    taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n-    taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n-    taskFieldDescriptionsMap.put(\n-        \"classificationSummary\",\n-        \"The <<classification-subset, Classification>> of the task\");\n-    taskFieldDescriptionsMap.put(\n-        \"workbasketSummary\",\n-        \"The <<workbasket-subset, Workbasket>> of the task\");\n-    taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n-    taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n-    taskFieldDescriptionsMap.put(\n-        \"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n-    taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.system\",\n-        \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.systemInstance\", \"The instance of the system, the object resides in.\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.type\", \"The type of the reference (contract, claim, policy, customer, ...)\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.value\", \"The value of the primary object reference\");\n-    taskFieldDescriptionsMap.put(\n-        \"customAttributes\",\n-        \"A container for all additional information on the task in JSON representation\");\n-    taskFieldDescriptionsMap.put(\n-        \"callbackInfo\",\n-        \"A container for all callback information of the task in JSON representation\");\n-    taskFieldDescriptionsMap.put(\"attachments\", \"\");\n-    taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n-    taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n-    taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n-\n-    allTasksFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n-          fieldWithPath(\"_links\").ignored(),\n-          fieldWithPath(\"_links.self\").ignored(),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n+    private HashMap<String, String> taskFieldDescriptionsMap = new HashMap<String, String>();\n+\n+    private FieldDescriptor[] allTasksFieldDescriptors;\n+    private FieldDescriptor[] taskFieldDescriptors;\n+    private FieldDescriptor[] taskSubsetFieldDescriptors;\n+    private FieldDescriptor[] createTaskFieldDescriptors;\n+\n+    @BeforeEach\n+    void setUp() {\n+\n+        taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n+        taskFieldDescriptionsMap.put(\"externalId\",\n+            \"External ID. Can be used to enforce idempotency at task creation. Can identify an external task.\");\n+        taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n+        taskFieldDescriptionsMap.put(\"claimed\", \"The timestamp of the last claim-operation on the task\");\n+        taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n+        taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n+        taskFieldDescriptionsMap.put(\"planned\",\n+            \"Planned start of the task. The actual completion of the task should be between PLANNED and DUE.\");\n+        taskFieldDescriptionsMap.put(\"due\",\n+            \"Timestamp when the task is due. The actual completion of the task should be between PLANNED and DUE.\");\n+        taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n+        taskFieldDescriptionsMap.put(\"creator\", \"\");\n+        taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n+        taskFieldDescriptionsMap.put(\"note\", \"note\");\n+        taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n+        taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n+        taskFieldDescriptionsMap.put(\"classificationSummaryResource\",\n+            \"The <<classification-subset, Classification>> of the task\");\n+        taskFieldDescriptionsMap.put(\"workbasketSummaryResource\", \"The <<workbasket-subset, Workbasket>> of the task\");\n+        taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n+        taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n+        taskFieldDescriptionsMap.put(\"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.system\",\n+            \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.systemInstance\",\n+            \"The instance of the system, the object resides in.\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.type\",\n+            \"The type of the reference (contract, claim, policy, customer, ...)\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.value\", \"The value of the primary object reference\");\n+        taskFieldDescriptionsMap.put(\"customAttributes\",\n+            \"A container for all additional information on the task in JSON representation\");\n+        taskFieldDescriptionsMap.put(\"callbackInfo\",\n+            \"A container for all callback information of the task in JSON representation\");\n+        taskFieldDescriptionsMap.put(\"attachments\", \"\");\n+        taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n+        taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n+        taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n+\n+        allTasksFieldDescriptors = new FieldDescriptor[] {\n+\n+            subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n+            fieldWithPath(\"_links\").ignored(),\n+            fieldWithPath(\"_links.self\").ignored(),\n+            fieldWithPath(\"_links.self.href\").ignored(),\n+            fieldWithPath(\"page\").ignored()\n         };\n \n-    taskFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"claimed\")\n-              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n+        taskFieldDescriptors = new FieldDescriptor[] {\n+\n+            fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n+            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n+            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n+            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")).type(\"String\"),\n+            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\"),\n+            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\"),\n+            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\"),\n+            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n             fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n             fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n             fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n-            fieldWithPath(\"note\")\n-                .description(taskFieldDescriptionsMap.get(\"note\"))\n-                .description(\"Some custom Note\"),\n+            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\")).description(\"Some custom Note\"),\n             fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n             fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-            subsectionWithPath(\"classificationSummary\")\n-                .description(\n-                taskFieldDescriptionsMap.get(\"classificationSummary\")),\n-            subsectionWithPath(\"workbasketSummary\")\n-                .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n-            fieldWithPath(\"businessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+            subsectionWithPath(\"classificationSummaryResource\")\n+                .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n+            subsectionWithPath(\"workbasketSummaryResource\")\n+                .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n+            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n             fieldWithPath(\"parentBusinessProcessId\")\n                 .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\n-                \"String\"),\n-            fieldWithPath(\"primaryObjRef.id\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n+            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n                 .type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.company\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-          fieldWithPath(\"customAttributes\")\n-              .description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n-          fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n-          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-          fieldWithPath(\"custom1\")\n-              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom2\")\n-              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom3\")\n-              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom4\")\n-              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom5\")\n-              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom6\")\n-              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom7\")\n-              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom8\")\n-              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom9\")\n-              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom10\")\n-              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom11\")\n-              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom12\")\n-              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom13\")\n-              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom14\")\n-              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom15\")\n-              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom16\")\n-              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"_links.self.href\").ignored()\n+            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+            fieldWithPath(\"primaryObjRef.systemInstance\")\n+                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n+            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n+            fieldWithPath(\"customAttributes\").description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n+            fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n+            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n+            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")).type(\"String\"),\n+            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")).type(\"String\"),\n+            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")).type(\"String\"),\n+            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")).type(\"String\"),\n+            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")).type(\"String\"),\n+            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")).type(\"String\"),\n+            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")).type(\"String\"),\n+            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")).type(\"String\"),\n+            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")).type(\"String\"),\n+            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")).type(\"String\"),\n+            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")).type(\"String\"),\n+            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")).type(\"String\"),\n+            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")).type(\"String\"),\n+            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")).type(\"String\"),\n+            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")).type(\"String\"),\n+            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")).type(\"String\"),\n+            fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-    taskSubsetFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n+        taskSubsetFieldDescriptors = new FieldDescriptor[] {\n+\n+            fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n+            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n+            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n+            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n+            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\"),\n+            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\"),\n+            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\"),\n+            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n             fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n             fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n             fieldWithPath(\"description\").ignored(),\n-            fieldWithPath(\"note\")\n-                .description(taskFieldDescriptionsMap.get(\"note\"))\n-                .description(\"Some custom Note\"),\n+            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\")).description(\"Some custom Note\"),\n             fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n             fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-            subsectionWithPath(\"classificationSummary\")\n-                .description(\n-                taskFieldDescriptionsMap.get(\"classificationSummary\")),\n-            subsectionWithPath(\"workbasketSummary\")\n-                .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n-            fieldWithPath(\"businessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+            subsectionWithPath(\"classificationSummaryResource\")\n+                .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n+            subsectionWithPath(\"workbasketSummaryResource\")\n+                .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n+            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n             fieldWithPath(\"parentBusinessProcessId\")\n                 .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n             fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")),\n-            fieldWithPath(\"primaryObjRef.id\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n                 .type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.company\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-          fieldWithPath(\"customAttributes\").ignored(),\n-          fieldWithPath(\"callbackInfo\").ignored(),\n-          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-          fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n-          fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n-          fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n-          fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n-          fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n-          fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n-          fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n-          fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n+            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+            fieldWithPath(\"primaryObjRef.systemInstance\")\n+                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n+            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n+            fieldWithPath(\"customAttributes\").ignored(),\n+            fieldWithPath(\"callbackInfo\").ignored(),\n+            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n+            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n+            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n+            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n+            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n+            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n+            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n+            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n+            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n+            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n+            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n+            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n+            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n+            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n+            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n+            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n+            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n+            fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-    createTaskFieldDescriptors =\n-        new FieldDescriptor[]{\n-            subsectionWithPath(\"classificationSummary\")\n-                .description(\"The new classificationSummary for the task\"),\n-            subsectionWithPath(\"workbasketSummary\")\n-                .description(\"The new workbasketSummary for the task\"),\n-            fieldWithPath(\"externalId\")\n-                .description(taskFieldDescriptionsMap.get(\"externalId\"))\n+        createTaskFieldDescriptors = new FieldDescriptor[] {\n+\n+            subsectionWithPath(\"classificationSummaryResource\")\n+                .description(\"The new classificationSummaryResource for the task\"),\n+            subsectionWithPath(\"workbasketSummaryResource\")\n+                .description(\"The new workbasketSummaryResource for the task\"),\n+            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\"))\n                 .type(\"String\")\n                 .optional(),\n-            fieldWithPath(\"primaryObjRef.company\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-            fieldWithPath(\"primaryObjRef.system\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n             fieldWithPath(\"primaryObjRef.systemInstance\")\n                 .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"created\")\n-              .description(taskFieldDescriptionsMap.get(\"created\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"claimed\")\n-              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"due\")\n-              .description(taskFieldDescriptionsMap.get(\"due\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"name\")\n-              .description(taskFieldDescriptionsMap.get(\"name\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"creator\")\n-              .description(taskFieldDescriptionsMap.get(\"creator\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"description\")\n-              .description(taskFieldDescriptionsMap.get(\"description\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\")\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"priority\")\n-              .description(taskFieldDescriptionsMap.get(\"priority\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"state\")\n-              .description(taskFieldDescriptionsMap.get(\"state\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"owner\")\n-              .description(taskFieldDescriptionsMap.get(\"owner\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"customAttributes\")\n-              .description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n-              .type(\"Object\")\n-              .optional(),\n-          fieldWithPath(\"callbackInfo\")\n-              .description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n-              .type(\"Object\")\n-              .optional(),\n-          fieldWithPath(\"attachments\")\n-              .description(taskFieldDescriptionsMap.get(\"attachments\"))\n-              .type(\"Array\")\n-              .optional(),\n-          fieldWithPath(\"custom1\")\n-              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom2\")\n-              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom3\")\n-              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom4\")\n-              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom5\")\n-              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom6\")\n-              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom7\")\n-              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom8\")\n-              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom9\")\n-              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom10\")\n-              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom11\")\n-              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom12\")\n-              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom13\")\n-              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom14\")\n-              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom15\")\n-              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom16\")\n-              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"read\")\n-              .description(taskFieldDescriptionsMap.get(\"read\"))\n-              .type(\"Boolean\")\n-              .optional(),\n-          fieldWithPath(\"transferred\")\n-              .description(taskFieldDescriptionsMap.get(\"transferred\"))\n-              .type(\"Boolean\")\n-              .optional()\n+            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")).type(\"String\").optional(),\n+            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")).type(\"String\").optional(),\n+            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\").optional(),\n+            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\").optional(),\n+            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\").optional(),\n+            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\").optional(),\n+            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")).type(\"String\").optional(),\n+            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")).type(\"String\").optional(),\n+            fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\"))\n+                .description(\"Some custom Note\")\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")).type(\"String\").optional(),\n+            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")).type(\"String\").optional(),\n+            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"parentBusinessProcessId\")\n+                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\").optional(),\n+            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"customAttributes\").description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n+                .type(\"Object\")\n+                .optional(),\n+            fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n+                .type(\"Object\")\n+                .optional(),\n+            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\"))\n+                .type(\"Array\")\n+                .optional(),\n+            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")).type(\"String\").optional(),\n+            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")).type(\"Boolean\").optional(),\n+            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\"))\n+                .type(\"Boolean\")\n+                .optional()\n         };\n-  }\n-\n-  @Test\n-  void getAllTasksDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(Mapping.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllTasksDocTest\", responseFields(allTasksFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void getSpecificTaskDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetSpecificTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void taskSubSetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"TaskSubset\", responseFields(taskSubsetFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void updateTaskDocTest() throws Exception {\n-    URL url =\n-        new URL(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    assertEquals(200, con.getResponseCode());\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuilder content = new StringBuilder();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n     }\n-    in.close();\n-    con.disconnect();\n-    String originalTask = content.toString();\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.put(\n-                    restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .contentType(\"application/json\")\n-                .content(originalTask))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"UpdateTaskDocTest\",\n+\n+    @Test\n+    void getAllTasksDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .get(restHelper.toUrl(Mapping.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"GetAllTasksDocTest\",\n+                responseFields(allTasksFieldDescriptors)));\n+    }\n+\n+    @Test\n+    void getSpecificTaskDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .get(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"GetSpecificTaskDocTest\",\n+                responseFields(taskFieldDescriptors)));\n+    }\n+\n+    @Test\n+    void taskSubSetDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .get(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"TaskSubset\",\n+                responseFields(taskSubsetFieldDescriptors)));\n+    }\n+\n+    @Test\n+    void updateTaskDocTest() throws Exception {\n+        URL url = new URL(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n+        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+        con.setRequestMethod(\"GET\");\n+        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+        assertEquals(200, con.getResponseCode());\n+\n+        BufferedReader in = new BufferedReader(\n+            new InputStreamReader(con.getInputStream()));\n+        String inputLine;\n+        StringBuilder content = new StringBuilder();\n+        while ((inputLine = in.readLine()) != null) {\n+            content.append(inputLine);\n+        }\n+        in.close();\n+        con.disconnect();\n+        String originalTask = content.toString();\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .put(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+            .contentType(\"application/json\")\n+            .content(originalTask))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"UpdateTaskDocTest\",\n                 requestFields(taskFieldDescriptors),\n                 responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void createAndDeleteTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"CreateTaskDocTest\",\n-                    requestFields(createTaskFieldDescriptors),\n-                    responseFields(taskFieldDescriptors)))\n-            .andReturn();\n+    }\n+\n+    @Test\n+    void createAndDeleteTaskDocTest() throws Exception {\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-  }\n-\n-  @Test\n-  void claimTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS))\n+            .contentType(\"application/hal+json\")\n+            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"temp\"))\n+            .andDo(MockMvcRestDocumentation.document(\"CreateTaskDocTest\",\n+                requestFields(createTaskFieldDescriptors),\n+                responseFields(taskFieldDescriptors)))\n             .andReturn();\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"ClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void cancelClaimTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        String content = result.getResponse().getContentAsString();\n+        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+            .andExpect(MockMvcResultMatchers.status().isNoContent())\n+            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+    }\n+\n+    @Test\n+    void claimTaskDocTest() throws Exception {\n+\n+        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS))\n+            .contentType(\"application/hal+json\")\n+            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n             .andDo(MockMvcRestDocumentation.document(\"temp\"))\n             .andReturn();\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"CancelClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void completeTaskDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        String content = result.getResponse().getContentAsString();\n+        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+            .content(\"{}\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"ClaimTaskDocTest\",\n+                responseFields(taskFieldDescriptors)));\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+            .andExpect(MockMvcResultMatchers.status().isNoContent())\n+            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+    }\n+\n+    @Test\n+    void completeTaskDocTest() throws Exception {\n+        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS))\n+            .contentType(\"application/hal+json\")\n+            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n             .andDo(MockMvcRestDocumentation.document(\"temp\"))\n             .andReturn();\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(Mapping.URL_TASKS_ID_COMPLETE, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"CompleteTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void transferTaskDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        String content = result.getResponse().getContentAsString();\n+        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_COMPLETE, newId))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+            .content(\"{}\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"CompleteTaskDocTest\",\n+                responseFields(taskFieldDescriptors)));\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+            .andExpect(MockMvcResultMatchers.status().isNoContent())\n+            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+    }\n+\n+    @Test\n+    void transferTaskDocTest() throws Exception {\n+        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS))\n+            .contentType(\"application/hal+json\")\n+            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)))\n+            .andDo(MockMvcRestDocumentation.document(\"TransferTaskDocTest\",\n+                responseFields(taskFieldDescriptors)))\n             .andReturn();\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID,\n-                        newId,\n-                        \"WBI:100000000000000000000000000000000001\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n+        String content = result.getResponse().getContentAsString();\n+        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID, newId,\n+                \"WBI:100000000000000000000000000000000001\"))\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"TransferTaskDocTest\",\n+                responseFields(taskFieldDescriptors)));\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+            .andExpect(MockMvcResultMatchers.status().isNoContent());\n+    }\n }\n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex 3958c3e96..ced9f6533 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -22,455 +21,671 @@ import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n \n import pro.taskana.rest.Mapping;\n \n-/**\n- * Generate REST Documentation for the TaskController.\n- */\n+/** Generate REST Documentation for the TaskController. */\n class TaskControllerRestDocumentation extends BaseRestDocumentation {\n \n-    private HashMap<String, String> taskFieldDescriptionsMap = new HashMap<String, String>();\n-\n-    private FieldDescriptor[] allTasksFieldDescriptors;\n-    private FieldDescriptor[] taskFieldDescriptors;\n-    private FieldDescriptor[] taskSubsetFieldDescriptors;\n-    private FieldDescriptor[] createTaskFieldDescriptors;\n-\n-    @BeforeEach\n-    void setUp() {\n-\n-        taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n-        taskFieldDescriptionsMap.put(\"externalId\",\n-            \"External ID. Can be used to enforce idempotency at task creation. Can identify an external task.\");\n-        taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n-        taskFieldDescriptionsMap.put(\"claimed\", \"The timestamp of the last claim-operation on the task\");\n-        taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n-        taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n-        taskFieldDescriptionsMap.put(\"planned\",\n-            \"Planned start of the task. The actual completion of the task should be between PLANNED and DUE.\");\n-        taskFieldDescriptionsMap.put(\"due\",\n-            \"Timestamp when the task is due. The actual completion of the task should be between PLANNED and DUE.\");\n-        taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n-        taskFieldDescriptionsMap.put(\"creator\", \"\");\n-        taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n-        taskFieldDescriptionsMap.put(\"note\", \"note\");\n-        taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n-        taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n-        taskFieldDescriptionsMap.put(\"classificationSummaryResource\",\n-            \"The <<classification-subset, Classification>> of the task\");\n-        taskFieldDescriptionsMap.put(\"workbasketSummaryResource\", \"The <<workbasket-subset, Workbasket>> of the task\");\n-        taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n-        taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n-        taskFieldDescriptionsMap.put(\"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.system\",\n-            \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.systemInstance\",\n-            \"The instance of the system, the object resides in.\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.type\",\n-            \"The type of the reference (contract, claim, policy, customer, ...)\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.value\", \"The value of the primary object reference\");\n-        taskFieldDescriptionsMap.put(\"customAttributes\",\n-            \"A container for all additional information on the task in JSON representation\");\n-        taskFieldDescriptionsMap.put(\"callbackInfo\",\n-            \"A container for all callback information of the task in JSON representation\");\n-        taskFieldDescriptionsMap.put(\"attachments\", \"\");\n-        taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n-        taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n-        taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n-\n-        allTasksFieldDescriptors = new FieldDescriptor[] {\n-\n-            subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n-            fieldWithPath(\"_links\").ignored(),\n-            fieldWithPath(\"_links.self\").ignored(),\n-            fieldWithPath(\"_links.self.href\").ignored(),\n-            fieldWithPath(\"page\").ignored()\n+  private HashMap<String, String> taskFieldDescriptionsMap = new HashMap<String, String>();\n+\n+  private FieldDescriptor[] allTasksFieldDescriptors;\n+  private FieldDescriptor[] taskFieldDescriptors;\n+  private FieldDescriptor[] taskSubsetFieldDescriptors;\n+  private FieldDescriptor[] createTaskFieldDescriptors;\n+\n+  @BeforeEach\n+  void setUp() {\n+\n+    taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n+    taskFieldDescriptionsMap.put(\n+        \"externalId\",\n+        \"External ID. Can be used to enforce idempotency at task creation. Can identify an external task.\");\n+    taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n+    taskFieldDescriptionsMap.put(\n+        \"claimed\", \"The timestamp of the last claim-operation on the task\");\n+    taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n+    taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n+    taskFieldDescriptionsMap.put(\n+        \"planned\",\n+        \"Planned start of the task. The actual completion of the task should be between PLANNED and DUE.\");\n+    taskFieldDescriptionsMap.put(\n+        \"due\",\n+        \"Timestamp when the task is due. The actual completion of the task should be between PLANNED and DUE.\");\n+    taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n+    taskFieldDescriptionsMap.put(\"creator\", \"\");\n+    taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n+    taskFieldDescriptionsMap.put(\"note\", \"note\");\n+    taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n+    taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n+    taskFieldDescriptionsMap.put(\n+        \"classificationSummaryResource\",\n+        \"The <<classification-subset, Classification>> of the task\");\n+    taskFieldDescriptionsMap.put(\n+        \"workbasketSummaryResource\", \"The <<workbasket-subset, Workbasket>> of the task\");\n+    taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n+    taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n+    taskFieldDescriptionsMap.put(\n+        \"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n+    taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.system\",\n+        \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.systemInstance\", \"The instance of the system, the object resides in.\");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.type\", \"The type of the reference (contract, claim, policy, customer, ...)\");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.value\", \"The value of the primary object reference\");\n+    taskFieldDescriptionsMap.put(\n+        \"customAttributes\",\n+        \"A container for all additional information on the task in JSON representation\");\n+    taskFieldDescriptionsMap.put(\n+        \"callbackInfo\",\n+        \"A container for all callback information of the task in JSON representation\");\n+    taskFieldDescriptionsMap.put(\"attachments\", \"\");\n+    taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n+    taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n+    taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n+\n+    allTasksFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n+          fieldWithPath(\"_links\").ignored(),\n+          fieldWithPath(\"_links.self\").ignored(),\n+          fieldWithPath(\"_links.self.href\").ignored(),\n+          fieldWithPath(\"page\").ignored()\n         };\n \n-        taskFieldDescriptors = new FieldDescriptor[] {\n-\n-            fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")).type(\"String\"),\n-            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\"),\n-            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\"),\n-            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\"),\n-            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-            fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n-            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\")).description(\"Some custom Note\"),\n-            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-            subsectionWithPath(\"classificationSummaryResource\")\n-                .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n-            subsectionWithPath(\"workbasketSummaryResource\")\n-                .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n-            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-            fieldWithPath(\"parentBusinessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-                .type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-            fieldWithPath(\"primaryObjRef.systemInstance\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-            fieldWithPath(\"customAttributes\").description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n-            fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n-            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")).type(\"String\"),\n-            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")).type(\"String\"),\n-            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")).type(\"String\"),\n-            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")).type(\"String\"),\n-            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")).type(\"String\"),\n-            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")).type(\"String\"),\n-            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")).type(\"String\"),\n-            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")).type(\"String\"),\n-            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")).type(\"String\"),\n-            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")).type(\"String\"),\n-            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")).type(\"String\"),\n-            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")).type(\"String\"),\n-            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")).type(\"String\"),\n-            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")).type(\"String\"),\n-            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")).type(\"String\"),\n-            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")).type(\"String\"),\n-            fieldWithPath(\"_links.self.href\").ignored()\n+    taskFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n+          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n+          fieldWithPath(\"claimed\")\n+              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"completed\")\n+              .description(taskFieldDescriptionsMap.get(\"completed\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"modified\")\n+              .description(taskFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"planned\")\n+              .description(taskFieldDescriptionsMap.get(\"planned\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n+          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n+          fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n+          fieldWithPath(\"note\")\n+              .description(taskFieldDescriptionsMap.get(\"note\"))\n+              .description(\"Some custom Note\"),\n+          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n+          subsectionWithPath(\"classificationSummaryResource\")\n+              .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n+          subsectionWithPath(\"workbasketSummaryResource\")\n+              .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n+          fieldWithPath(\"businessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+          fieldWithPath(\"parentBusinessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n+          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n+          fieldWithPath(\"primaryObjRef.id\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"primaryObjRef.company\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+          fieldWithPath(\"primaryObjRef.system\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+          fieldWithPath(\"primaryObjRef.systemInstance\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+          fieldWithPath(\"primaryObjRef.type\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+          fieldWithPath(\"primaryObjRef.value\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n+          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n+          fieldWithPath(\"customAttributes\")\n+              .description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n+          fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n+          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n+          fieldWithPath(\"custom1\")\n+              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom2\")\n+              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom3\")\n+              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom4\")\n+              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom5\")\n+              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom6\")\n+              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom7\")\n+              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom8\")\n+              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom9\")\n+              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom10\")\n+              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom11\")\n+              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom12\")\n+              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom13\")\n+              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom14\")\n+              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom15\")\n+              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom16\")\n+              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-        taskSubsetFieldDescriptors = new FieldDescriptor[] {\n-\n-            fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n-            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\"),\n-            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\"),\n-            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\"),\n-            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-            fieldWithPath(\"description\").ignored(),\n-            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\")).description(\"Some custom Note\"),\n-            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-            subsectionWithPath(\"classificationSummaryResource\")\n-                .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n-            subsectionWithPath(\"workbasketSummaryResource\")\n-                .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n-            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-            fieldWithPath(\"parentBusinessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")),\n-            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-                .type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-            fieldWithPath(\"primaryObjRef.systemInstance\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-            fieldWithPath(\"customAttributes\").ignored(),\n-            fieldWithPath(\"callbackInfo\").ignored(),\n-            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n-            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n-            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n-            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n-            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n-            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n-            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n-            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n-            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n-            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n-            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n-            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n-            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n-            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n-            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n-            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n-            fieldWithPath(\"_links.self.href\").ignored()\n+    taskSubsetFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n+          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n+          fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n+          fieldWithPath(\"completed\")\n+              .description(taskFieldDescriptionsMap.get(\"completed\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"modified\")\n+              .description(taskFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"planned\")\n+              .description(taskFieldDescriptionsMap.get(\"planned\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n+          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n+          fieldWithPath(\"description\").ignored(),\n+          fieldWithPath(\"note\")\n+              .description(taskFieldDescriptionsMap.get(\"note\"))\n+              .description(\"Some custom Note\"),\n+          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n+          subsectionWithPath(\"classificationSummaryResource\")\n+              .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n+          subsectionWithPath(\"workbasketSummaryResource\")\n+              .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n+          fieldWithPath(\"businessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+          fieldWithPath(\"parentBusinessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n+          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")),\n+          fieldWithPath(\"primaryObjRef.id\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"primaryObjRef.company\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+          fieldWithPath(\"primaryObjRef.system\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+          fieldWithPath(\"primaryObjRef.systemInstance\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+          fieldWithPath(\"primaryObjRef.type\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+          fieldWithPath(\"primaryObjRef.value\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n+          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n+          fieldWithPath(\"customAttributes\").ignored(),\n+          fieldWithPath(\"callbackInfo\").ignored(),\n+          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n+          fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n+          fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n+          fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n+          fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n+          fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n+          fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n+          fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n+          fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n+          fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n+          fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n+          fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n+          fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n+          fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n+          fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n+          fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n+          fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n+          fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-        createTaskFieldDescriptors = new FieldDescriptor[] {\n-\n-            subsectionWithPath(\"classificationSummaryResource\")\n-                .description(\"The new classificationSummaryResource for the task\"),\n-            subsectionWithPath(\"workbasketSummaryResource\")\n-                .description(\"The new workbasketSummaryResource for the task\"),\n-            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-            fieldWithPath(\"primaryObjRef.systemInstance\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")).type(\"String\").optional(),\n-            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")).type(\"String\").optional(),\n-            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\").optional(),\n-            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\").optional(),\n-            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\").optional(),\n-            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\").optional(),\n-            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")).type(\"String\").optional(),\n-            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")).type(\"String\").optional(),\n-            fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\"))\n-                .description(\"Some custom Note\")\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")).type(\"String\").optional(),\n-            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")).type(\"String\").optional(),\n-            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"parentBusinessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\").optional(),\n-            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"customAttributes\").description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n-                .type(\"Object\")\n-                .optional(),\n-            fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n-                .type(\"Object\")\n-                .optional(),\n-            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\"))\n-                .type(\"Array\")\n-                .optional(),\n-            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")).type(\"String\").optional(),\n-            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")).type(\"Boolean\").optional(),\n-            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\"))\n-                .type(\"Boolean\")\n-                .optional()\n+    createTaskFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"classificationSummaryResource\")\n+              .description(\"The new classificationSummaryResource for the task\"),\n+          subsectionWithPath(\"workbasketSummaryResource\")\n+              .description(\"The new workbasketSummaryResource for the task\"),\n+          fieldWithPath(\"externalId\")\n+              .description(taskFieldDescriptionsMap.get(\"externalId\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"primaryObjRef.company\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+          fieldWithPath(\"primaryObjRef.system\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+          fieldWithPath(\"primaryObjRef.systemInstance\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+          fieldWithPath(\"primaryObjRef.type\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+          fieldWithPath(\"primaryObjRef.value\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+          fieldWithPath(\"created\")\n+              .description(taskFieldDescriptionsMap.get(\"created\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"claimed\")\n+              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"completed\")\n+              .description(taskFieldDescriptionsMap.get(\"completed\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"modified\")\n+              .description(taskFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"planned\")\n+              .description(taskFieldDescriptionsMap.get(\"planned\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"due\")\n+              .description(taskFieldDescriptionsMap.get(\"due\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"name\")\n+              .description(taskFieldDescriptionsMap.get(\"name\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"creator\")\n+              .description(taskFieldDescriptionsMap.get(\"creator\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"description\")\n+              .description(taskFieldDescriptionsMap.get(\"description\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"note\")\n+              .description(taskFieldDescriptionsMap.get(\"note\"))\n+              .description(\"Some custom Note\")\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"priority\")\n+              .description(taskFieldDescriptionsMap.get(\"priority\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"state\")\n+              .description(taskFieldDescriptionsMap.get(\"state\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"businessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"parentBusinessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"owner\")\n+              .description(taskFieldDescriptionsMap.get(\"owner\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"primaryObjRef.id\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"customAttributes\")\n+              .description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n+              .type(\"Object\")\n+              .optional(),\n+          fieldWithPath(\"callbackInfo\")\n+              .description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n+              .type(\"Object\")\n+              .optional(),\n+          fieldWithPath(\"attachments\")\n+              .description(taskFieldDescriptionsMap.get(\"attachments\"))\n+              .type(\"Array\")\n+              .optional(),\n+          fieldWithPath(\"custom1\")\n+              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom2\")\n+              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom3\")\n+              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom4\")\n+              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom5\")\n+              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom6\")\n+              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom7\")\n+              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom8\")\n+              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom9\")\n+              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom10\")\n+              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom11\")\n+              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom12\")\n+              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom13\")\n+              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom14\")\n+              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom15\")\n+              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom16\")\n+              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"read\")\n+              .description(taskFieldDescriptionsMap.get(\"read\"))\n+              .type(\"Boolean\")\n+              .optional(),\n+          fieldWithPath(\"transferred\")\n+              .description(taskFieldDescriptionsMap.get(\"transferred\"))\n+              .type(\"Boolean\")\n+              .optional()\n         };\n+  }\n+\n+  @Test\n+  void getAllTasksDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(Mapping.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetAllTasksDocTest\", responseFields(allTasksFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void getSpecificTaskDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetSpecificTaskDocTest\", responseFields(taskFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void taskSubSetDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"TaskSubset\", responseFields(taskSubsetFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void updateTaskDocTest() throws Exception {\n+    URL url =\n+        new URL(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n+    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"GET\");\n+    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+    assertEquals(200, con.getResponseCode());\n+\n+    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n+    String inputLine;\n+    StringBuilder content = new StringBuilder();\n+    while ((inputLine = in.readLine()) != null) {\n+      content.append(inputLine);\n     }\n-\n-    @Test\n-    void getAllTasksDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .get(restHelper.toUrl(Mapping.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"GetAllTasksDocTest\",\n-                responseFields(allTasksFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void getSpecificTaskDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .get(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"GetSpecificTaskDocTest\",\n-                responseFields(taskFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void taskSubSetDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .get(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"TaskSubset\",\n-                responseFields(taskSubsetFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void updateTaskDocTest() throws Exception {\n-        URL url = new URL(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n-        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-        con.setRequestMethod(\"GET\");\n-        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-        assertEquals(200, con.getResponseCode());\n-\n-        BufferedReader in = new BufferedReader(\n-            new InputStreamReader(con.getInputStream()));\n-        String inputLine;\n-        StringBuilder content = new StringBuilder();\n-        while ((inputLine = in.readLine()) != null) {\n-            content.append(inputLine);\n-        }\n-        in.close();\n-        con.disconnect();\n-        String originalTask = content.toString();\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .put(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-            .contentType(\"application/json\")\n-            .content(originalTask))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"UpdateTaskDocTest\",\n+    in.close();\n+    con.disconnect();\n+    String originalTask = content.toString();\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.put(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .contentType(\"application/json\")\n+                .content(originalTask))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"UpdateTaskDocTest\",\n                 requestFields(taskFieldDescriptors),\n                 responseFields(taskFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void createAndDeleteTaskDocTest() throws Exception {\n-\n-        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS))\n-            .contentType(\"application/hal+json\")\n-            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+  }\n+\n+  @Test\n+  void createAndDeleteTaskDocTest() throws Exception {\n+\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\n+                        \"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                            + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"CreateTaskDocTest\",\n-                requestFields(createTaskFieldDescriptors),\n-                responseFields(taskFieldDescriptors)))\n+            .andDo(\n+                MockMvcRestDocumentation.document(\n+                    \"CreateTaskDocTest\",\n+                    requestFields(createTaskFieldDescriptors),\n+                    responseFields(taskFieldDescriptors)))\n             .andReturn();\n \n-        String content = result.getResponse().getContentAsString();\n-        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-            .andExpect(MockMvcResultMatchers.status().isNoContent())\n-            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-    }\n-\n-    @Test\n-    void claimTaskDocTest() throws Exception {\n-\n-        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS))\n-            .contentType(\"application/hal+json\")\n-            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+        .andExpect(MockMvcResultMatchers.status().isNoContent())\n+        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+  }\n+\n+  @Test\n+  void claimTaskDocTest() throws Exception {\n+\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\n+                        \"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                            + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n             .andDo(MockMvcRestDocumentation.document(\"temp\"))\n             .andReturn();\n \n-        String content = result.getResponse().getContentAsString();\n-        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-            .content(\"{}\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"ClaimTaskDocTest\",\n-                responseFields(taskFieldDescriptors)));\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-            .andExpect(MockMvcResultMatchers.status().isNoContent())\n-            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-    }\n-\n-    @Test\n-    void completeTaskDocTest() throws Exception {\n-        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS))\n-            .contentType(\"application/hal+json\")\n-            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.post(\n+                    restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .content(\"{}\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"ClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+        .andExpect(MockMvcResultMatchers.status().isNoContent())\n+        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+  }\n+\n+  @Test\n+  void completeTaskDocTest() throws Exception {\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\n+                        \"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                            + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n             .andDo(MockMvcRestDocumentation.document(\"temp\"))\n             .andReturn();\n \n-        String content = result.getResponse().getContentAsString();\n-        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_COMPLETE, newId))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-            .content(\"{}\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"CompleteTaskDocTest\",\n-                responseFields(taskFieldDescriptors)));\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-            .andExpect(MockMvcResultMatchers.status().isNoContent())\n-            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-    }\n-\n-    @Test\n-    void transferTaskDocTest() throws Exception {\n-        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS))\n-            .contentType(\"application/hal+json\")\n-            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.post(\n+                    restHelper.toUrl(Mapping.URL_TASKS_ID_COMPLETE, newId))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .content(\"{}\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"CompleteTaskDocTest\", responseFields(taskFieldDescriptors)));\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+        .andExpect(MockMvcResultMatchers.status().isNoContent())\n+        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+  }\n+\n+  @Test\n+  void transferTaskDocTest() throws Exception {\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\n+                        \"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                            + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"TransferTaskDocTest\",\n-                responseFields(taskFieldDescriptors)))\n+            .andDo(\n+                MockMvcRestDocumentation.document(\n+                    \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)))\n             .andReturn();\n \n-        String content = result.getResponse().getContentAsString();\n-        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID, newId,\n-                \"WBI:100000000000000000000000000000000001\"))\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"TransferTaskDocTest\",\n-                responseFields(taskFieldDescriptors)));\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-            .andExpect(MockMvcResultMatchers.status().isNoContent());\n-    }\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.post(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID,\n+                        newId,\n+                        \"WBI:100000000000000000000000000000000001\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)));\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+        .andExpect(MockMvcResultMatchers.status().isNoContent());\n+  }\n }\n", "next_change": {"commit": "d34a44a32ab6762e4f53bfa9ea4f85741db57728", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex ced9f6533..576cff190 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -681,11 +723,5 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n         .andDo(\n             MockMvcRestDocumentation.document(\n                 \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)));\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-        .andExpect(MockMvcResultMatchers.status().isNoContent());\n   }\n }\n", "next_change": {"commit": "cc4efaa1cdd708366adea79d631b8aa5ccc013a8", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex 576cff190..b2b1234e5 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -718,7 +716,7 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n                         Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID,\n                         newId,\n                         \"WBI:100000000000000000000000000000000001\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+                .header(\"Authorization\", ADMIN_CREDENTIALS))\n         .andExpect(MockMvcResultMatchers.status().isOk())\n         .andDo(\n             MockMvcRestDocumentation.document(\n", "next_change": {"commit": "6dc782e37ac378b636daaef8d9134d17294845d2", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex b2b1234e5..18275d49c 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -713,7 +744,7 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n         .perform(\n             RestDocumentationRequestBuilders.post(\n                     restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID,\n+                        RestEndpoints.URL_TASKS_ID_TRANSFER_WORKBASKET_ID,\n                         newId,\n                         \"WBI:100000000000000000000000000000000001\"))\n                 .header(\"Authorization\", ADMIN_CREDENTIALS))\n", "next_change": {"commit": "3967e2900e8b35329b3675844ca3a8e059916c7e", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\ndeleted file mode 100644\nindex 18275d49c..000000000\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ /dev/null\n", "chunk": "@@ -1,756 +0,0 @@\n-package pro.taskana.doc.api;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-import static org.junit.Assert.assertEquals;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n-\n-import java.io.BufferedReader;\n-import java.io.InputStreamReader;\n-import java.net.HttpURLConnection;\n-import java.net.URL;\n-import java.util.HashMap;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n-import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n-import org.springframework.restdocs.payload.FieldDescriptor;\n-import org.springframework.test.web.servlet.MvcResult;\n-import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n-\n-import pro.taskana.common.rest.RestEndpoints;\n-import pro.taskana.common.test.doc.api.BaseRestDocumentation;\n-\n-/** Generate REST Documentation for the TaskController. */\n-class TaskControllerRestDocumentation extends BaseRestDocumentation {\n-\n-  private final HashMap<String, String> taskFieldDescriptionsMap = new HashMap<>();\n-\n-  private FieldDescriptor[] allTasksFieldDescriptors;\n-  private FieldDescriptor[] taskFieldDescriptors;\n-  private FieldDescriptor[] taskSubsetFieldDescriptors;\n-  private FieldDescriptor[] createTaskFieldDescriptors;\n-\n-  @BeforeEach\n-  void setUp() {\n-\n-    taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n-    taskFieldDescriptionsMap.put(\n-        \"externalId\",\n-        \"External ID. Can be used to enforce idempotence at task creation. \"\n-            + \"Can identify an external task.\");\n-    taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n-    taskFieldDescriptionsMap.put(\n-        \"claimed\", \"The timestamp of the last claim-operation on the task\");\n-    taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n-    taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n-    taskFieldDescriptionsMap.put(\n-        \"planned\",\n-        \"Planned start of the task. The actual completion of the task \"\n-            + \"should be between PLANNED and DUE.\");\n-    taskFieldDescriptionsMap.put(\n-        \"due\",\n-        \"Timestamp when the task is due. The actual completion of the task \"\n-            + \"should be between PLANNED and DUE.\");\n-    taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n-    taskFieldDescriptionsMap.put(\"creator\", \"\");\n-    taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n-    taskFieldDescriptionsMap.put(\"note\", \"note\");\n-    taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n-    taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n-    taskFieldDescriptionsMap.put(\n-        \"classificationSummary\", \"The <<classification-subset, Classification>> of the task\");\n-    taskFieldDescriptionsMap.put(\n-        \"workbasketSummary\", \"The <<workbasket-subset, Workbasket>> of the task\");\n-    taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n-    taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n-    taskFieldDescriptionsMap.put(\n-        \"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n-    taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.system\",\n-        \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.systemInstance\", \"The instance of the system, the object resides in.\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.type\", \"The type of the reference (contract, claim, policy, customer, ...)\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.value\", \"The value of the primary object reference\");\n-    taskFieldDescriptionsMap.put(\n-        \"customAttributes\",\n-        \"A container for all additional information on the task in JSON representation\");\n-    taskFieldDescriptionsMap.put(\n-        \"callbackInfo\",\n-        \"A container for all callback information of the task in JSON representation\");\n-    taskFieldDescriptionsMap.put(\"attachments\", \"\");\n-    taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n-    taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n-    taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n-\n-    allTasksFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n-          fieldWithPath(\"_links\").ignored(),\n-          fieldWithPath(\"_links.self\").ignored(),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n-        };\n-\n-    taskFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"claimed\")\n-              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-          fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\"),\n-          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-          subsectionWithPath(\"classificationSummary\")\n-              .description(taskFieldDescriptionsMap.get(\"classificationSummary\")),\n-          subsectionWithPath(\"workbasketSummary\")\n-              .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.company\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-          fieldWithPath(\"customAttributes\")\n-              .description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n-          fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n-          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-          fieldWithPath(\"custom1\")\n-              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom2\")\n-              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom3\")\n-              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom4\")\n-              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom5\")\n-              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom6\")\n-              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom7\")\n-              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom8\")\n-              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom9\")\n-              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom10\")\n-              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom11\")\n-              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom12\")\n-              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom13\")\n-              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom14\")\n-              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom15\")\n-              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom16\")\n-              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    taskSubsetFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-          fieldWithPath(\"description\").ignored(),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\"),\n-          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-          subsectionWithPath(\"classificationSummary\")\n-              .description(taskFieldDescriptionsMap.get(\"classificationSummary\")),\n-          subsectionWithPath(\"workbasketSummary\")\n-              .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.company\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-          fieldWithPath(\"customAttributes\").ignored(),\n-          fieldWithPath(\"callbackInfo\").ignored(),\n-          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-          fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n-          fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n-          fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n-          fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n-          fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n-          fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n-          fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n-          fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    createTaskFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"classificationSummary\")\n-              .description(\"The new classificationSummary for the task\"),\n-          subsectionWithPath(\"workbasketSummary\")\n-              .description(\"The new workbasketSummary for the task\"),\n-          fieldWithPath(\"externalId\")\n-              .description(taskFieldDescriptionsMap.get(\"externalId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"primaryObjRef.company\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"created\")\n-              .description(taskFieldDescriptionsMap.get(\"created\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"claimed\")\n-              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"due\")\n-              .description(taskFieldDescriptionsMap.get(\"due\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"name\")\n-              .description(taskFieldDescriptionsMap.get(\"name\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"creator\")\n-              .description(taskFieldDescriptionsMap.get(\"creator\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"description\")\n-              .description(taskFieldDescriptionsMap.get(\"description\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\")\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"priority\")\n-              .description(taskFieldDescriptionsMap.get(\"priority\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"state\")\n-              .description(taskFieldDescriptionsMap.get(\"state\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"owner\")\n-              .description(taskFieldDescriptionsMap.get(\"owner\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"customAttributes\")\n-              .description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n-              .type(\"Object\")\n-              .optional(),\n-          fieldWithPath(\"callbackInfo\")\n-              .description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n-              .type(\"Object\")\n-              .optional(),\n-          fieldWithPath(\"attachments\")\n-              .description(taskFieldDescriptionsMap.get(\"attachments\"))\n-              .type(\"Array\")\n-              .optional(),\n-          fieldWithPath(\"custom1\")\n-              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom2\")\n-              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom3\")\n-              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom4\")\n-              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom5\")\n-              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom6\")\n-              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom7\")\n-              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom8\")\n-              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom9\")\n-              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom10\")\n-              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom11\")\n-              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom12\")\n-              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom13\")\n-              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom14\")\n-              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom15\")\n-              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom16\")\n-              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"read\")\n-              .description(taskFieldDescriptionsMap.get(\"read\"))\n-              .type(\"Boolean\")\n-              .optional(),\n-          fieldWithPath(\"transferred\")\n-              .description(taskFieldDescriptionsMap.get(\"transferred\"))\n-              .type(\"Boolean\")\n-              .optional()\n-        };\n-  }\n-\n-  @Test\n-  void getAllTasksDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllTasksDocTest\", responseFields(allTasksFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void getSpecificTaskDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        RestEndpoints.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetSpecificTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void taskSubSetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        RestEndpoints.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"TaskSubset\", responseFields(taskSubsetFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void updateTaskDocTest() throws Exception {\n-    URL url =\n-        new URL(\n-            restHelper.toUrl(\n-                RestEndpoints.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", ADMIN_CREDENTIALS);\n-    assertEquals(200, con.getResponseCode());\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuilder content = new StringBuilder();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n-    }\n-    in.close();\n-    con.disconnect();\n-    String originalTask = content.toString();\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.put(\n-                    restHelper.toUrl(\n-                        RestEndpoints.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .header(\"Authorization\", ADMIN_CREDENTIALS)\n-                .contentType(\"application/json\")\n-                .content(originalTask))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"UpdateTaskDocTest\",\n-                requestFields(taskFieldDescriptors),\n-                responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void selectAndClaimTaskDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID_SELECT_AND_CLAIM) + \"?custom14=abc\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"SelectAndClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void createAndDeleteTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"CreateTaskDocTest\",\n-                    requestFields(createTaskFieldDescriptors),\n-                    responseFields(taskFieldDescriptors)))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID, newId))\n-                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-  }\n-\n-  @Test\n-  void deleteTasksDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS)\n-                        + \"?task-id=TKI:000000000000000000000000000000000036,\"\n-                        + \"TKI:000000000000000000000000000000000037,\"\n-                        + \"TKI:000000000000000000000000000000000038\"\n-                        + \"&custom14=abc\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"DeleteTasksDocTest\", responseFields(allTasksFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void claimTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"temp\"))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID_CLAIM, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS)\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"ClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void cancelClaimTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"temp\"))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID_CLAIM, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS)\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"CancelClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void completeTaskDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"temp\"))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID_COMPLETE, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS)\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"CompleteTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void transferTaskDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(\n-                        RestEndpoints.URL_TASKS_ID_TRANSFER_WORKBASKET_ID,\n-                        newId,\n-                        \"WBI:100000000000000000000000000000000001\"))\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "committedDate": "2019-12-04 09:56:34 +0100", "message": "TSK-967: Merge module taskana-rest-spring and taskana-rest-spring-test"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "7509bb0f1c7cfb9e8bcc634fbd3f80c0b74b5ca6", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: Fix simple checkstyle warnings"}, {"oid": "6a6dcb9c1e3984670c644f89c569eba3d20dcf3d", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Standardise paginated List behaviour and sub classes"}, {"oid": "4d560532bd98ef3dfe573c40c00506fcef21f912", "committedDate": "2020-01-23 14:23:56 +0100", "message": "TSK-987: Fix Spotbugs - reliance on default encoding"}, {"oid": "d34a44a32ab6762e4f53bfa9ea4f85741db57728", "committedDate": "2020-02-21 11:32:45 +0100", "message": "TSK-1137 Endpoint to cancel claim task for REST-API"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}, {"oid": "cc4efaa1cdd708366adea79d631b8aa5ccc013a8", "committedDate": "2020-06-05 20:03:15 +0200", "message": "TSK-1210: Replaced LoginModule with Embedded Spring LDAP"}, {"oid": "a2318c267ea7f6d57cfffefc04c5285e66778fac", "committedDate": "2020-06-12 12:31:55 +0200", "message": "reformatted code"}, {"oid": "1dfe54c0b6fb05c6811573e38feba9212fdb6a9f", "committedDate": "2020-06-30 14:50:26 +0200", "message": "TSK-1275: Support select and claim in one API call"}, {"oid": "4bba93c5a98dcbe22dc86144b12507abce4b2be4", "committedDate": "2020-07-10 13:13:42 +0200", "message": "Review findings"}, {"oid": "97443641af2378568d191fd64a11a48df0771b99", "committedDate": "2020-07-21 16:48:36 +0200", "message": "TSK-1267: All TimeIntervalReports are now based on any TaskTimestamp"}, {"oid": "121a9c103fe9b04606635f8c132489504fe2d414", "committedDate": "2020-10-13 17:07:09 +0200", "message": "TSK-1407: adopted RestDocumentation tests to use taskana-common-test aswell"}, {"oid": "6dc782e37ac378b636daaef8d9134d17294845d2", "committedDate": "2020-10-30 01:36:27 +0100", "message": "TSK-1430: Rename Mapping to RestEndpoints, groups relevant endpoints together"}, {"oid": "8c6beb6e9601d9eb98e7299d3f7743bf721678d3", "committedDate": "2020-12-03 12:53:29 +0100", "message": "TSK-1239: All tests now working with Assertj instead of junit Assertion. (#1346)"}, {"oid": "3967e2900e8b35329b3675844ca3a8e059916c7e", "committedDate": "2020-12-18 11:29:10 +0100", "message": "TSK-1436: rest api documentation is now build with spring-auto-restdocs"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MzA4MQ==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422663081", "body": "As mentioned above, please talk to @gitgoodjhe and find out if we can use `taskComments` in order to keep consistant with our field naming (which is camel case)", "bodyText": "As mentioned above, please talk to @gitgoodjhe and find out if we can use taskComments in order to keep consistant with our field naming (which is camel case)", "bodyHTML": "<p dir=\"auto\">As mentioned above, please talk to <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/gitgoodjhe/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gitgoodjhe\">@gitgoodjhe</a> and find out if we can use <code>taskComments</code> in order to keep consistant with our field naming (which is camel case)</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:50:31Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java", "diffHunk": "@@ -82,7 +82,8 @@ void setUp() {\n \n     allTaskCommentsFieldDescriptors =\n         new FieldDescriptor[] {\n-          subsectionWithPath(\"task comments\").description(\"An Array of task comments\")\n+          subsectionWithPath(\"task_comments\").description(\"An Array of task comments\"),", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\nindex b2e7a1190..cdcfa43ec 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\n", "chunk": "@@ -81,9 +82,10 @@ public class TaskCommentControllerRestDocumentation extends BaseRestDocumentatio\n         };\n \n     allTaskCommentsFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"task_comments\").description(\"An Array of task comments\"),\n-          fieldWithPath(\"_links.self.href\").ignored()\n+        new FieldDescriptor[]{\n+            subsectionWithPath(TaskanaPagedModelKeys.TASKCOMMENTS.getPropertyName()).description(\n+                \"An Array of task comments\"),\n+            fieldWithPath(\"_links.self.href\").ignored()\n         };\n   }\n \n", "next_change": {"commit": "917535fbc017b6e7d19dfc57d60466e404d57c33", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\nindex cdcfa43ec..f2ea09b9b 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\n", "chunk": "@@ -83,7 +83,7 @@ public class TaskCommentControllerRestDocumentation extends BaseRestDocumentatio\n \n     allTaskCommentsFieldDescriptors =\n         new FieldDescriptor[]{\n-            subsectionWithPath(TaskanaPagedModelKeys.TASKCOMMENTS.getPropertyName()).description(\n+            subsectionWithPath(TaskanaPagedModelKeys.TASK_COMMENTS.getPropertyName()).description(\n                 \"An Array of task comments\"),\n             fieldWithPath(\"_links.self.href\").ignored()\n         };\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\nindex b2e7a1190..f2ea09b9b 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\n", "chunk": "@@ -81,9 +82,10 @@ public class TaskCommentControllerRestDocumentation extends BaseRestDocumentatio\n         };\n \n     allTaskCommentsFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"task_comments\").description(\"An Array of task comments\"),\n-          fieldWithPath(\"_links.self.href\").ignored()\n+        new FieldDescriptor[]{\n+            subsectionWithPath(TaskanaPagedModelKeys.TASK_COMMENTS.getPropertyName()).description(\n+                \"An Array of task comments\"),\n+            fieldWithPath(\"_links.self.href\").ignored()\n         };\n   }\n \n", "next_change": {"commit": "ce571722d5727f51b1bc66efc7ce64b470b88266", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\nindex f2ea09b9b..f1668a24d 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\n", "chunk": "@@ -82,10 +81,9 @@ public class TaskCommentControllerRestDocumentation extends BaseRestDocumentatio\n         };\n \n     allTaskCommentsFieldDescriptors =\n-        new FieldDescriptor[]{\n-            subsectionWithPath(TaskanaPagedModelKeys.TASK_COMMENTS.getPropertyName()).description(\n-                \"An Array of task comments\"),\n-            fieldWithPath(\"_links.self.href\").ignored()\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"task comments\")\n+              .description(\"An Array of task comments\")\n         };\n   }\n \n", "next_change": {"commit": "636135bf1afbf336587cae6dd3aa5ec27ad84a05", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\nindex f1668a24d..2e4f005c2 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\n", "chunk": "@@ -82,8 +82,7 @@ public class TaskCommentControllerRestDocumentation extends BaseRestDocumentatio\n \n     allTaskCommentsFieldDescriptors =\n         new FieldDescriptor[] {\n-          subsectionWithPath(\"task comments\")\n-              .description(\"An Array of task comments\")\n+          subsectionWithPath(\"task comments\").description(\"An Array of task comments\")\n         };\n   }\n \n", "next_change": {"commit": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\nindex 2e4f005c2..f2ea09b9b 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\n", "chunk": "@@ -81,8 +82,10 @@ public class TaskCommentControllerRestDocumentation extends BaseRestDocumentatio\n         };\n \n     allTaskCommentsFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"task comments\").description(\"An Array of task comments\")\n+        new FieldDescriptor[]{\n+            subsectionWithPath(TaskanaPagedModelKeys.TASK_COMMENTS.getPropertyName()).description(\n+                \"An Array of task comments\"),\n+            fieldWithPath(\"_links.self.href\").ignored()\n         };\n   }\n \n", "next_change": {"commit": "a2318c267ea7f6d57cfffefc04c5285e66778fac", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\nindex f2ea09b9b..47b242433 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\n", "chunk": "@@ -82,10 +82,10 @@ public class TaskCommentControllerRestDocumentation extends BaseRestDocumentatio\n         };\n \n     allTaskCommentsFieldDescriptors =\n-        new FieldDescriptor[]{\n-            subsectionWithPath(TaskanaPagedModelKeys.TASK_COMMENTS.getPropertyName()).description(\n-                \"An Array of task comments\"),\n-            fieldWithPath(\"_links.self.href\").ignored()\n+        new FieldDescriptor[] {\n+          subsectionWithPath(TaskanaPagedModelKeys.TASK_COMMENTS.getPropertyName())\n+              .description(\"An Array of task comments\"),\n+          fieldWithPath(\"_links.self.href\").ignored()\n         };\n   }\n \n", "next_change": {"commit": "3967e2900e8b35329b3675844ca3a8e059916c7e", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\ndeleted file mode 100644\nindex 47b242433..000000000\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java\n+++ /dev/null\n", "chunk": "@@ -1,200 +0,0 @@\n-package pro.taskana.doc.api;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-import static org.junit.Assert.assertEquals;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n-\n-import java.io.BufferedReader;\n-import java.io.InputStreamReader;\n-import java.net.HttpURLConnection;\n-import java.net.URL;\n-import java.util.HashMap;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.springframework.hateoas.MediaTypes;\n-import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n-import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n-import org.springframework.restdocs.payload.FieldDescriptor;\n-import org.springframework.test.web.servlet.MvcResult;\n-import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n-\n-import pro.taskana.common.rest.Mapping;\n-import pro.taskana.common.rest.models.TaskanaPagedModelKeys;\n-\n-class TaskCommentControllerRestDocumentation extends BaseRestDocumentation {\n-\n-  private final HashMap<String, String> taskCommentFieldDescriptionsMap = new HashMap<>();\n-\n-  private FieldDescriptor[] allTaskCommentsFieldDescriptors;\n-  private FieldDescriptor[] taskCommentFieldDescriptors;\n-  private FieldDescriptor[] createTaskCommentFieldDescriptors;\n-\n-  @BeforeEach\n-  void setUp() {\n-\n-    taskCommentFieldDescriptionsMap.put(\"taskCommentId\", \"Unique ID\");\n-    taskCommentFieldDescriptionsMap.put(\n-        \"taskId\", \"Task ID. Can identify the task to which the comment belongs\");\n-    taskCommentFieldDescriptionsMap.put(\"textField\", \"The content of the actual comment\");\n-    taskCommentFieldDescriptionsMap.put(\"creator\", \"The creator of the task comment\");\n-    taskCommentFieldDescriptionsMap.put(\n-        \"created\", \"The creation timestamp of the task comment in the system.\");\n-    taskCommentFieldDescriptionsMap.put(\n-        \"modified\", \"Timestamp of the last modification of the task comment\");\n-\n-    taskCommentFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"taskCommentId\")\n-              .description(taskCommentFieldDescriptionsMap.get(\"taskCommentId\")),\n-          fieldWithPath(\"taskId\").description(taskCommentFieldDescriptionsMap.get(\"taskId\")),\n-          fieldWithPath(\"textField\").description(taskCommentFieldDescriptionsMap.get(\"textField\")),\n-          fieldWithPath(\"creator\").description(taskCommentFieldDescriptionsMap.get(\"creator\")),\n-          fieldWithPath(\"created\")\n-              .description(taskCommentFieldDescriptionsMap.get(\"created\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"modified\")\n-              .description(taskCommentFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"_links\").ignored(),\n-          fieldWithPath(\"_links.self\").ignored(),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    createTaskCommentFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"taskId\").description(taskCommentFieldDescriptionsMap.get(\"taskId\")),\n-          fieldWithPath(\"textField\").description(taskCommentFieldDescriptionsMap.get(\"textField\")),\n-          fieldWithPath(\"creator\")\n-              .description(taskCommentFieldDescriptionsMap.get(\"creator\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"created\")\n-              .description(taskCommentFieldDescriptionsMap.get(\"created\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"modified\")\n-              .description(taskCommentFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\")\n-              .optional(),\n-        };\n-\n-    allTaskCommentsFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(TaskanaPagedModelKeys.TASK_COMMENTS.getPropertyName())\n-              .description(\"An Array of task comments\"),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-  }\n-\n-  @Test\n-  void getAllTaskCommentsForSpecificTaskDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_TASK_GET_POST_COMMENTS,\n-                        \"TKI:000000000000000000000000000000000000\"))\n-                .accept(MediaTypes.HAL_JSON)\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllTaskCommentsForSpecificTaskDocTest\",\n-                responseFields(allTaskCommentsFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void getSpecificTaskCommentDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_TASK_COMMENT, \"TCI:000000000000000000000000000000000000\"))\n-                .accept(MediaTypes.HAL_JSON)\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetSpecificTaskCommentDocTest\", responseFields(taskCommentFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void updateTaskCommentDocTest() throws Exception {\n-    URL url =\n-        new URL(\n-            restHelper.toUrl(Mapping.URL_TASK_COMMENT, \"TCI:000000000000000000000000000000000000\"));\n-\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", ADMIN_CREDENTIALS);\n-    assertEquals(200, con.getResponseCode());\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuilder content = new StringBuilder();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n-    }\n-    in.close();\n-    con.disconnect();\n-    String originalTaskComment = content.toString();\n-    String modifiedTaskComment =\n-        originalTaskComment.replace(\"some text in textfield\", \"updated text in textfield\");\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.put(\n-                    restHelper.toUrl(\n-                        Mapping.URL_TASK_COMMENT, \"TCI:000000000000000000000000000000000000\"))\n-                .header(\"Authorization\", ADMIN_CREDENTIALS)\n-                .contentType(MediaTypes.HAL_JSON)\n-                .content(modifiedTaskComment))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"UpdateTaskCommentDocTest\",\n-                requestFields(taskCommentFieldDescriptors),\n-                responseFields(taskCommentFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void createAndDeleteTaskCommentDocTest() throws Exception {\n-\n-    String createTaskCommentContent =\n-        \"{ \\\"taskId\\\" : \\\"TKI:000000000000000000000000000000000000\\\",\\n\"\n-            + \"  \\\"textField\\\" : \\\"some text in textfield\\\"} \";\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(\n-                        restHelper.toUrl(\n-                            Mapping.URL_TASK_GET_POST_COMMENTS,\n-                            \"TKI:000000000000000000000000000000000000\"))\n-                    .contentType(MediaTypes.HAL_JSON)\n-                    .content(createTaskCommentContent)\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"CreateTaskCommentDocTest\",\n-                    requestFields(createTaskCommentFieldDescriptors),\n-                    responseFields(taskCommentFieldDescriptors)))\n-            .andReturn();\n-\n-    String resultContent = result.getResponse().getContentAsString();\n-    String newId =\n-        resultContent.substring(resultContent.indexOf(\"TCI:\"), resultContent.indexOf(\"TCI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(Mapping.URL_TASK_COMMENT, newId))\n-                .header(\"Authorization\", ADMIN_CREDENTIALS)) // admin\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskCommentDocTest\"));\n-  }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "ce571722d5727f51b1bc66efc7ce64b470b88266", "committedDate": "2020-03-31 11:56:59 +0200", "message": "TSK-1150: Added REST-API for task comments"}, {"oid": "93a94f0458979e35cb92ee682be312532d1e5210", "committedDate": "2020-03-31 11:56:59 +0200", "message": "TSK-1150: added taskId as pathvariable to getTaskComment and deleteTaskComment"}, {"oid": "636135bf1afbf336587cae6dd3aa5ec27ad84a05", "committedDate": "2020-03-31 11:56:59 +0200", "message": "Comments from Mustapha Zorgati"}, {"oid": "dffb139a822c55fcf12438e6e996fdef41b6f098", "committedDate": "2020-03-31 11:56:59 +0200", "message": "comments from Holger Hagen"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}, {"oid": "cc4efaa1cdd708366adea79d631b8aa5ccc013a8", "committedDate": "2020-06-05 20:03:15 +0200", "message": "TSK-1210: Replaced LoginModule with Embedded Spring LDAP"}, {"oid": "a2318c267ea7f6d57cfffefc04c5285e66778fac", "committedDate": "2020-06-12 12:31:55 +0200", "message": "reformatted code"}, {"oid": "8e5ab5d5b3620a15a2bbc6ed6c333bad184fc9e4", "committedDate": "2020-07-02 10:24:27 +0200", "message": "TSK-1317: Fixed task comment authorization tests."}, {"oid": "97443641af2378568d191fd64a11a48df0771b99", "committedDate": "2020-07-21 16:48:36 +0200", "message": "TSK-1267: All TimeIntervalReports are now based on any TaskTimestamp"}, {"oid": "121a9c103fe9b04606635f8c132489504fe2d414", "committedDate": "2020-10-13 17:07:09 +0200", "message": "TSK-1407: adopted RestDocumentation tests to use taskana-common-test aswell"}, {"oid": "6dc782e37ac378b636daaef8d9134d17294845d2", "committedDate": "2020-10-30 01:36:27 +0100", "message": "TSK-1430: Rename Mapping to RestEndpoints, groups relevant endpoints together"}, {"oid": "8c6beb6e9601d9eb98e7299d3f7743bf721678d3", "committedDate": "2020-12-03 12:53:29 +0100", "message": "TSK-1239: All tests now working with Assertj instead of junit Assertion. (#1346)"}, {"oid": "3967e2900e8b35329b3675844ca3a8e059916c7e", "committedDate": "2020-12-18 11:29:10 +0100", "message": "TSK-1436: rest api documentation is now build with spring-auto-restdocs"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MzExNg==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422663116", "body": "please use `workbasketSummary`", "bodyText": "please use workbasketSummary", "bodyHTML": "<p dir=\"auto\">please use <code>workbasketSummary</code></p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:50:46Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java", "diffHunk": "@@ -60,10 +60,11 @@ void setUp() {\n     taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n     taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n     taskFieldDescriptionsMap.put(\n-        \"classificationSummaryResource\",\n+        \"classificationSummaryRepresentationModel\",\n         \"The <<classification-subset, Classification>> of the task\");\n     taskFieldDescriptionsMap.put(\n-        \"workbasketSummaryResource\", \"The <<workbasket-subset, Workbasket>> of the task\");\n+        \"workbasketSummaryRepresentationModel\",", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex 66e2340e4..a9ecfa5fe 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -60,10 +60,10 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n     taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n     taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n     taskFieldDescriptionsMap.put(\n-        \"classificationSummaryRepresentationModel\",\n+        \"classificationSummary\",\n         \"The <<classification-subset, Classification>> of the task\");\n     taskFieldDescriptionsMap.put(\n-        \"workbasketSummaryRepresentationModel\",\n+        \"workbasketSummary\",\n         \"The <<workbasket-subset, Workbasket>> of the task\");\n     taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n     taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex 66e2340e4..a9ecfa5fe 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -60,10 +60,10 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n     taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n     taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n     taskFieldDescriptionsMap.put(\n-        \"classificationSummaryRepresentationModel\",\n+        \"classificationSummary\",\n         \"The <<classification-subset, Classification>> of the task\");\n     taskFieldDescriptionsMap.put(\n-        \"workbasketSummaryRepresentationModel\",\n+        \"workbasketSummary\",\n         \"The <<workbasket-subset, Workbasket>> of the task\");\n     taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n     taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n", "next_change": {"commit": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex a9ecfa5fe..3958c3e96 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -22,704 +22,455 @@ import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n \n import pro.taskana.rest.Mapping;\n \n-/** Generate REST Documentation for the TaskController. */\n+/**\n+ * Generate REST Documentation for the TaskController.\n+ */\n class TaskControllerRestDocumentation extends BaseRestDocumentation {\n \n-  private final HashMap<String, String> taskFieldDescriptionsMap = new HashMap<>();\n-\n-  private FieldDescriptor[] allTasksFieldDescriptors;\n-  private FieldDescriptor[] taskFieldDescriptors;\n-  private FieldDescriptor[] taskSubsetFieldDescriptors;\n-  private FieldDescriptor[] createTaskFieldDescriptors;\n-\n-  @BeforeEach\n-  void setUp() {\n-\n-    taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n-    taskFieldDescriptionsMap.put(\n-        \"externalId\",\n-        \"External ID. Can be used to enforce idempotence at task creation. \"\n-            + \"Can identify an external task.\");\n-    taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n-    taskFieldDescriptionsMap.put(\n-        \"claimed\", \"The timestamp of the last claim-operation on the task\");\n-    taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n-    taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n-    taskFieldDescriptionsMap.put(\n-        \"planned\",\n-        \"Planned start of the task. The actual completion of the task \"\n-            + \"should be between PLANNED and DUE.\");\n-    taskFieldDescriptionsMap.put(\n-        \"due\",\n-        \"Timestamp when the task is due. The actual completion of the task \"\n-            + \"should be between PLANNED and DUE.\");\n-    taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n-    taskFieldDescriptionsMap.put(\"creator\", \"\");\n-    taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n-    taskFieldDescriptionsMap.put(\"note\", \"note\");\n-    taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n-    taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n-    taskFieldDescriptionsMap.put(\n-        \"classificationSummary\",\n-        \"The <<classification-subset, Classification>> of the task\");\n-    taskFieldDescriptionsMap.put(\n-        \"workbasketSummary\",\n-        \"The <<workbasket-subset, Workbasket>> of the task\");\n-    taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n-    taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n-    taskFieldDescriptionsMap.put(\n-        \"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n-    taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.system\",\n-        \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.systemInstance\", \"The instance of the system, the object resides in.\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.type\", \"The type of the reference (contract, claim, policy, customer, ...)\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.value\", \"The value of the primary object reference\");\n-    taskFieldDescriptionsMap.put(\n-        \"customAttributes\",\n-        \"A container for all additional information on the task in JSON representation\");\n-    taskFieldDescriptionsMap.put(\n-        \"callbackInfo\",\n-        \"A container for all callback information of the task in JSON representation\");\n-    taskFieldDescriptionsMap.put(\"attachments\", \"\");\n-    taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n-    taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n-    taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n-\n-    allTasksFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n-          fieldWithPath(\"_links\").ignored(),\n-          fieldWithPath(\"_links.self\").ignored(),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n+    private HashMap<String, String> taskFieldDescriptionsMap = new HashMap<String, String>();\n+\n+    private FieldDescriptor[] allTasksFieldDescriptors;\n+    private FieldDescriptor[] taskFieldDescriptors;\n+    private FieldDescriptor[] taskSubsetFieldDescriptors;\n+    private FieldDescriptor[] createTaskFieldDescriptors;\n+\n+    @BeforeEach\n+    void setUp() {\n+\n+        taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n+        taskFieldDescriptionsMap.put(\"externalId\",\n+            \"External ID. Can be used to enforce idempotency at task creation. Can identify an external task.\");\n+        taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n+        taskFieldDescriptionsMap.put(\"claimed\", \"The timestamp of the last claim-operation on the task\");\n+        taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n+        taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n+        taskFieldDescriptionsMap.put(\"planned\",\n+            \"Planned start of the task. The actual completion of the task should be between PLANNED and DUE.\");\n+        taskFieldDescriptionsMap.put(\"due\",\n+            \"Timestamp when the task is due. The actual completion of the task should be between PLANNED and DUE.\");\n+        taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n+        taskFieldDescriptionsMap.put(\"creator\", \"\");\n+        taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n+        taskFieldDescriptionsMap.put(\"note\", \"note\");\n+        taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n+        taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n+        taskFieldDescriptionsMap.put(\"classificationSummaryResource\",\n+            \"The <<classification-subset, Classification>> of the task\");\n+        taskFieldDescriptionsMap.put(\"workbasketSummaryResource\", \"The <<workbasket-subset, Workbasket>> of the task\");\n+        taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n+        taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n+        taskFieldDescriptionsMap.put(\"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.system\",\n+            \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.systemInstance\",\n+            \"The instance of the system, the object resides in.\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.type\",\n+            \"The type of the reference (contract, claim, policy, customer, ...)\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.value\", \"The value of the primary object reference\");\n+        taskFieldDescriptionsMap.put(\"customAttributes\",\n+            \"A container for all additional information on the task in JSON representation\");\n+        taskFieldDescriptionsMap.put(\"callbackInfo\",\n+            \"A container for all callback information of the task in JSON representation\");\n+        taskFieldDescriptionsMap.put(\"attachments\", \"\");\n+        taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n+        taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n+        taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n+\n+        allTasksFieldDescriptors = new FieldDescriptor[] {\n+\n+            subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n+            fieldWithPath(\"_links\").ignored(),\n+            fieldWithPath(\"_links.self\").ignored(),\n+            fieldWithPath(\"_links.self.href\").ignored(),\n+            fieldWithPath(\"page\").ignored()\n         };\n \n-    taskFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"claimed\")\n-              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n+        taskFieldDescriptors = new FieldDescriptor[] {\n+\n+            fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n+            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n+            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n+            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")).type(\"String\"),\n+            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\"),\n+            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\"),\n+            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\"),\n+            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n             fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n             fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n             fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n-            fieldWithPath(\"note\")\n-                .description(taskFieldDescriptionsMap.get(\"note\"))\n-                .description(\"Some custom Note\"),\n+            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\")).description(\"Some custom Note\"),\n             fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n             fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-            subsectionWithPath(\"classificationSummary\")\n-                .description(\n-                taskFieldDescriptionsMap.get(\"classificationSummary\")),\n-            subsectionWithPath(\"workbasketSummary\")\n-                .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n-            fieldWithPath(\"businessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+            subsectionWithPath(\"classificationSummaryResource\")\n+                .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n+            subsectionWithPath(\"workbasketSummaryResource\")\n+                .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n+            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n             fieldWithPath(\"parentBusinessProcessId\")\n                 .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\n-                \"String\"),\n-            fieldWithPath(\"primaryObjRef.id\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n+            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n                 .type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.company\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-          fieldWithPath(\"customAttributes\")\n-              .description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n-          fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n-          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-          fieldWithPath(\"custom1\")\n-              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom2\")\n-              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom3\")\n-              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom4\")\n-              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom5\")\n-              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom6\")\n-              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom7\")\n-              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom8\")\n-              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom9\")\n-              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom10\")\n-              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom11\")\n-              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom12\")\n-              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom13\")\n-              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom14\")\n-              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom15\")\n-              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom16\")\n-              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"_links.self.href\").ignored()\n+            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+            fieldWithPath(\"primaryObjRef.systemInstance\")\n+                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n+            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n+            fieldWithPath(\"customAttributes\").description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n+            fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n+            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n+            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")).type(\"String\"),\n+            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")).type(\"String\"),\n+            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")).type(\"String\"),\n+            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")).type(\"String\"),\n+            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")).type(\"String\"),\n+            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")).type(\"String\"),\n+            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")).type(\"String\"),\n+            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")).type(\"String\"),\n+            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")).type(\"String\"),\n+            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")).type(\"String\"),\n+            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")).type(\"String\"),\n+            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")).type(\"String\"),\n+            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")).type(\"String\"),\n+            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")).type(\"String\"),\n+            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")).type(\"String\"),\n+            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")).type(\"String\"),\n+            fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-    taskSubsetFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n+        taskSubsetFieldDescriptors = new FieldDescriptor[] {\n+\n+            fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n+            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n+            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n+            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n+            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\"),\n+            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\"),\n+            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\"),\n+            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n             fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n             fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n             fieldWithPath(\"description\").ignored(),\n-            fieldWithPath(\"note\")\n-                .description(taskFieldDescriptionsMap.get(\"note\"))\n-                .description(\"Some custom Note\"),\n+            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\")).description(\"Some custom Note\"),\n             fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n             fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-            subsectionWithPath(\"classificationSummary\")\n-                .description(\n-                taskFieldDescriptionsMap.get(\"classificationSummary\")),\n-            subsectionWithPath(\"workbasketSummary\")\n-                .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n-            fieldWithPath(\"businessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+            subsectionWithPath(\"classificationSummaryResource\")\n+                .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n+            subsectionWithPath(\"workbasketSummaryResource\")\n+                .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n+            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n             fieldWithPath(\"parentBusinessProcessId\")\n                 .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n             fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")),\n-            fieldWithPath(\"primaryObjRef.id\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n                 .type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.company\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-          fieldWithPath(\"customAttributes\").ignored(),\n-          fieldWithPath(\"callbackInfo\").ignored(),\n-          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-          fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n-          fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n-          fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n-          fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n-          fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n-          fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n-          fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n-          fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n+            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+            fieldWithPath(\"primaryObjRef.systemInstance\")\n+                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n+            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n+            fieldWithPath(\"customAttributes\").ignored(),\n+            fieldWithPath(\"callbackInfo\").ignored(),\n+            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n+            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n+            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n+            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n+            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n+            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n+            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n+            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n+            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n+            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n+            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n+            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n+            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n+            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n+            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n+            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n+            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n+            fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-    createTaskFieldDescriptors =\n-        new FieldDescriptor[]{\n-            subsectionWithPath(\"classificationSummary\")\n-                .description(\"The new classificationSummary for the task\"),\n-            subsectionWithPath(\"workbasketSummary\")\n-                .description(\"The new workbasketSummary for the task\"),\n-            fieldWithPath(\"externalId\")\n-                .description(taskFieldDescriptionsMap.get(\"externalId\"))\n+        createTaskFieldDescriptors = new FieldDescriptor[] {\n+\n+            subsectionWithPath(\"classificationSummaryResource\")\n+                .description(\"The new classificationSummaryResource for the task\"),\n+            subsectionWithPath(\"workbasketSummaryResource\")\n+                .description(\"The new workbasketSummaryResource for the task\"),\n+            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\"))\n                 .type(\"String\")\n                 .optional(),\n-            fieldWithPath(\"primaryObjRef.company\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-            fieldWithPath(\"primaryObjRef.system\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n             fieldWithPath(\"primaryObjRef.systemInstance\")\n                 .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"created\")\n-              .description(taskFieldDescriptionsMap.get(\"created\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"claimed\")\n-              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"due\")\n-              .description(taskFieldDescriptionsMap.get(\"due\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"name\")\n-              .description(taskFieldDescriptionsMap.get(\"name\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"creator\")\n-              .description(taskFieldDescriptionsMap.get(\"creator\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"description\")\n-              .description(taskFieldDescriptionsMap.get(\"description\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\")\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"priority\")\n-              .description(taskFieldDescriptionsMap.get(\"priority\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"state\")\n-              .description(taskFieldDescriptionsMap.get(\"state\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"owner\")\n-              .description(taskFieldDescriptionsMap.get(\"owner\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"customAttributes\")\n-              .description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n-              .type(\"Object\")\n-              .optional(),\n-          fieldWithPath(\"callbackInfo\")\n-              .description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n-              .type(\"Object\")\n-              .optional(),\n-          fieldWithPath(\"attachments\")\n-              .description(taskFieldDescriptionsMap.get(\"attachments\"))\n-              .type(\"Array\")\n-              .optional(),\n-          fieldWithPath(\"custom1\")\n-              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom2\")\n-              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom3\")\n-              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom4\")\n-              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom5\")\n-              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom6\")\n-              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom7\")\n-              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom8\")\n-              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom9\")\n-              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom10\")\n-              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom11\")\n-              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom12\")\n-              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom13\")\n-              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom14\")\n-              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom15\")\n-              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom16\")\n-              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"read\")\n-              .description(taskFieldDescriptionsMap.get(\"read\"))\n-              .type(\"Boolean\")\n-              .optional(),\n-          fieldWithPath(\"transferred\")\n-              .description(taskFieldDescriptionsMap.get(\"transferred\"))\n-              .type(\"Boolean\")\n-              .optional()\n+            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")).type(\"String\").optional(),\n+            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")).type(\"String\").optional(),\n+            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\").optional(),\n+            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\").optional(),\n+            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\").optional(),\n+            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\").optional(),\n+            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")).type(\"String\").optional(),\n+            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")).type(\"String\").optional(),\n+            fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\"))\n+                .description(\"Some custom Note\")\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")).type(\"String\").optional(),\n+            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")).type(\"String\").optional(),\n+            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"parentBusinessProcessId\")\n+                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\").optional(),\n+            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"customAttributes\").description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n+                .type(\"Object\")\n+                .optional(),\n+            fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n+                .type(\"Object\")\n+                .optional(),\n+            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\"))\n+                .type(\"Array\")\n+                .optional(),\n+            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")).type(\"String\").optional(),\n+            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")).type(\"Boolean\").optional(),\n+            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\"))\n+                .type(\"Boolean\")\n+                .optional()\n         };\n-  }\n-\n-  @Test\n-  void getAllTasksDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(Mapping.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllTasksDocTest\", responseFields(allTasksFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void getSpecificTaskDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetSpecificTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void taskSubSetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"TaskSubset\", responseFields(taskSubsetFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void updateTaskDocTest() throws Exception {\n-    URL url =\n-        new URL(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    assertEquals(200, con.getResponseCode());\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuilder content = new StringBuilder();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n     }\n-    in.close();\n-    con.disconnect();\n-    String originalTask = content.toString();\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.put(\n-                    restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .contentType(\"application/json\")\n-                .content(originalTask))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"UpdateTaskDocTest\",\n+\n+    @Test\n+    void getAllTasksDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .get(restHelper.toUrl(Mapping.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"GetAllTasksDocTest\",\n+                responseFields(allTasksFieldDescriptors)));\n+    }\n+\n+    @Test\n+    void getSpecificTaskDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .get(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"GetSpecificTaskDocTest\",\n+                responseFields(taskFieldDescriptors)));\n+    }\n+\n+    @Test\n+    void taskSubSetDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .get(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"TaskSubset\",\n+                responseFields(taskSubsetFieldDescriptors)));\n+    }\n+\n+    @Test\n+    void updateTaskDocTest() throws Exception {\n+        URL url = new URL(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n+        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+        con.setRequestMethod(\"GET\");\n+        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+        assertEquals(200, con.getResponseCode());\n+\n+        BufferedReader in = new BufferedReader(\n+            new InputStreamReader(con.getInputStream()));\n+        String inputLine;\n+        StringBuilder content = new StringBuilder();\n+        while ((inputLine = in.readLine()) != null) {\n+            content.append(inputLine);\n+        }\n+        in.close();\n+        con.disconnect();\n+        String originalTask = content.toString();\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .put(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+            .contentType(\"application/json\")\n+            .content(originalTask))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"UpdateTaskDocTest\",\n                 requestFields(taskFieldDescriptors),\n                 responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void createAndDeleteTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"CreateTaskDocTest\",\n-                    requestFields(createTaskFieldDescriptors),\n-                    responseFields(taskFieldDescriptors)))\n-            .andReturn();\n+    }\n+\n+    @Test\n+    void createAndDeleteTaskDocTest() throws Exception {\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-  }\n-\n-  @Test\n-  void claimTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS))\n+            .contentType(\"application/hal+json\")\n+            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"temp\"))\n+            .andDo(MockMvcRestDocumentation.document(\"CreateTaskDocTest\",\n+                requestFields(createTaskFieldDescriptors),\n+                responseFields(taskFieldDescriptors)))\n             .andReturn();\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"ClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void cancelClaimTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        String content = result.getResponse().getContentAsString();\n+        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+            .andExpect(MockMvcResultMatchers.status().isNoContent())\n+            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+    }\n+\n+    @Test\n+    void claimTaskDocTest() throws Exception {\n+\n+        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS))\n+            .contentType(\"application/hal+json\")\n+            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n             .andDo(MockMvcRestDocumentation.document(\"temp\"))\n             .andReturn();\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"CancelClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void completeTaskDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        String content = result.getResponse().getContentAsString();\n+        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+            .content(\"{}\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"ClaimTaskDocTest\",\n+                responseFields(taskFieldDescriptors)));\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+            .andExpect(MockMvcResultMatchers.status().isNoContent())\n+            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+    }\n+\n+    @Test\n+    void completeTaskDocTest() throws Exception {\n+        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS))\n+            .contentType(\"application/hal+json\")\n+            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n             .andDo(MockMvcRestDocumentation.document(\"temp\"))\n             .andReturn();\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(Mapping.URL_TASKS_ID_COMPLETE, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"CompleteTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void transferTaskDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        String content = result.getResponse().getContentAsString();\n+        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_COMPLETE, newId))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+            .content(\"{}\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"CompleteTaskDocTest\",\n+                responseFields(taskFieldDescriptors)));\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+            .andExpect(MockMvcResultMatchers.status().isNoContent())\n+            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+    }\n+\n+    @Test\n+    void transferTaskDocTest() throws Exception {\n+        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS))\n+            .contentType(\"application/hal+json\")\n+            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)))\n+            .andDo(MockMvcRestDocumentation.document(\"TransferTaskDocTest\",\n+                responseFields(taskFieldDescriptors)))\n             .andReturn();\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID,\n-                        newId,\n-                        \"WBI:100000000000000000000000000000000001\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n+        String content = result.getResponse().getContentAsString();\n+        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID, newId,\n+                \"WBI:100000000000000000000000000000000001\"))\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"TransferTaskDocTest\",\n+                responseFields(taskFieldDescriptors)));\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+            .andExpect(MockMvcResultMatchers.status().isNoContent());\n+    }\n }\n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex 3958c3e96..ced9f6533 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -22,455 +21,671 @@ import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n \n import pro.taskana.rest.Mapping;\n \n-/**\n- * Generate REST Documentation for the TaskController.\n- */\n+/** Generate REST Documentation for the TaskController. */\n class TaskControllerRestDocumentation extends BaseRestDocumentation {\n \n-    private HashMap<String, String> taskFieldDescriptionsMap = new HashMap<String, String>();\n-\n-    private FieldDescriptor[] allTasksFieldDescriptors;\n-    private FieldDescriptor[] taskFieldDescriptors;\n-    private FieldDescriptor[] taskSubsetFieldDescriptors;\n-    private FieldDescriptor[] createTaskFieldDescriptors;\n-\n-    @BeforeEach\n-    void setUp() {\n-\n-        taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n-        taskFieldDescriptionsMap.put(\"externalId\",\n-            \"External ID. Can be used to enforce idempotency at task creation. Can identify an external task.\");\n-        taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n-        taskFieldDescriptionsMap.put(\"claimed\", \"The timestamp of the last claim-operation on the task\");\n-        taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n-        taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n-        taskFieldDescriptionsMap.put(\"planned\",\n-            \"Planned start of the task. The actual completion of the task should be between PLANNED and DUE.\");\n-        taskFieldDescriptionsMap.put(\"due\",\n-            \"Timestamp when the task is due. The actual completion of the task should be between PLANNED and DUE.\");\n-        taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n-        taskFieldDescriptionsMap.put(\"creator\", \"\");\n-        taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n-        taskFieldDescriptionsMap.put(\"note\", \"note\");\n-        taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n-        taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n-        taskFieldDescriptionsMap.put(\"classificationSummaryResource\",\n-            \"The <<classification-subset, Classification>> of the task\");\n-        taskFieldDescriptionsMap.put(\"workbasketSummaryResource\", \"The <<workbasket-subset, Workbasket>> of the task\");\n-        taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n-        taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n-        taskFieldDescriptionsMap.put(\"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.system\",\n-            \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.systemInstance\",\n-            \"The instance of the system, the object resides in.\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.type\",\n-            \"The type of the reference (contract, claim, policy, customer, ...)\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.value\", \"The value of the primary object reference\");\n-        taskFieldDescriptionsMap.put(\"customAttributes\",\n-            \"A container for all additional information on the task in JSON representation\");\n-        taskFieldDescriptionsMap.put(\"callbackInfo\",\n-            \"A container for all callback information of the task in JSON representation\");\n-        taskFieldDescriptionsMap.put(\"attachments\", \"\");\n-        taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n-        taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n-        taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n-\n-        allTasksFieldDescriptors = new FieldDescriptor[] {\n-\n-            subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n-            fieldWithPath(\"_links\").ignored(),\n-            fieldWithPath(\"_links.self\").ignored(),\n-            fieldWithPath(\"_links.self.href\").ignored(),\n-            fieldWithPath(\"page\").ignored()\n+  private HashMap<String, String> taskFieldDescriptionsMap = new HashMap<String, String>();\n+\n+  private FieldDescriptor[] allTasksFieldDescriptors;\n+  private FieldDescriptor[] taskFieldDescriptors;\n+  private FieldDescriptor[] taskSubsetFieldDescriptors;\n+  private FieldDescriptor[] createTaskFieldDescriptors;\n+\n+  @BeforeEach\n+  void setUp() {\n+\n+    taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n+    taskFieldDescriptionsMap.put(\n+        \"externalId\",\n+        \"External ID. Can be used to enforce idempotency at task creation. Can identify an external task.\");\n+    taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n+    taskFieldDescriptionsMap.put(\n+        \"claimed\", \"The timestamp of the last claim-operation on the task\");\n+    taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n+    taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n+    taskFieldDescriptionsMap.put(\n+        \"planned\",\n+        \"Planned start of the task. The actual completion of the task should be between PLANNED and DUE.\");\n+    taskFieldDescriptionsMap.put(\n+        \"due\",\n+        \"Timestamp when the task is due. The actual completion of the task should be between PLANNED and DUE.\");\n+    taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n+    taskFieldDescriptionsMap.put(\"creator\", \"\");\n+    taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n+    taskFieldDescriptionsMap.put(\"note\", \"note\");\n+    taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n+    taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n+    taskFieldDescriptionsMap.put(\n+        \"classificationSummaryResource\",\n+        \"The <<classification-subset, Classification>> of the task\");\n+    taskFieldDescriptionsMap.put(\n+        \"workbasketSummaryResource\", \"The <<workbasket-subset, Workbasket>> of the task\");\n+    taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n+    taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n+    taskFieldDescriptionsMap.put(\n+        \"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n+    taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.system\",\n+        \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.systemInstance\", \"The instance of the system, the object resides in.\");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.type\", \"The type of the reference (contract, claim, policy, customer, ...)\");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.value\", \"The value of the primary object reference\");\n+    taskFieldDescriptionsMap.put(\n+        \"customAttributes\",\n+        \"A container for all additional information on the task in JSON representation\");\n+    taskFieldDescriptionsMap.put(\n+        \"callbackInfo\",\n+        \"A container for all callback information of the task in JSON representation\");\n+    taskFieldDescriptionsMap.put(\"attachments\", \"\");\n+    taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n+    taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n+    taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n+\n+    allTasksFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n+          fieldWithPath(\"_links\").ignored(),\n+          fieldWithPath(\"_links.self\").ignored(),\n+          fieldWithPath(\"_links.self.href\").ignored(),\n+          fieldWithPath(\"page\").ignored()\n         };\n \n-        taskFieldDescriptors = new FieldDescriptor[] {\n-\n-            fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")).type(\"String\"),\n-            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\"),\n-            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\"),\n-            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\"),\n-            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-            fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n-            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\")).description(\"Some custom Note\"),\n-            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-            subsectionWithPath(\"classificationSummaryResource\")\n-                .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n-            subsectionWithPath(\"workbasketSummaryResource\")\n-                .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n-            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-            fieldWithPath(\"parentBusinessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-                .type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-            fieldWithPath(\"primaryObjRef.systemInstance\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-            fieldWithPath(\"customAttributes\").description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n-            fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n-            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")).type(\"String\"),\n-            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")).type(\"String\"),\n-            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")).type(\"String\"),\n-            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")).type(\"String\"),\n-            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")).type(\"String\"),\n-            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")).type(\"String\"),\n-            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")).type(\"String\"),\n-            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")).type(\"String\"),\n-            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")).type(\"String\"),\n-            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")).type(\"String\"),\n-            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")).type(\"String\"),\n-            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")).type(\"String\"),\n-            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")).type(\"String\"),\n-            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")).type(\"String\"),\n-            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")).type(\"String\"),\n-            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")).type(\"String\"),\n-            fieldWithPath(\"_links.self.href\").ignored()\n+    taskFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n+          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n+          fieldWithPath(\"claimed\")\n+              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"completed\")\n+              .description(taskFieldDescriptionsMap.get(\"completed\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"modified\")\n+              .description(taskFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"planned\")\n+              .description(taskFieldDescriptionsMap.get(\"planned\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n+          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n+          fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n+          fieldWithPath(\"note\")\n+              .description(taskFieldDescriptionsMap.get(\"note\"))\n+              .description(\"Some custom Note\"),\n+          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n+          subsectionWithPath(\"classificationSummaryResource\")\n+              .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n+          subsectionWithPath(\"workbasketSummaryResource\")\n+              .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n+          fieldWithPath(\"businessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+          fieldWithPath(\"parentBusinessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n+          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n+          fieldWithPath(\"primaryObjRef.id\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"primaryObjRef.company\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+          fieldWithPath(\"primaryObjRef.system\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+          fieldWithPath(\"primaryObjRef.systemInstance\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+          fieldWithPath(\"primaryObjRef.type\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+          fieldWithPath(\"primaryObjRef.value\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n+          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n+          fieldWithPath(\"customAttributes\")\n+              .description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n+          fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n+          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n+          fieldWithPath(\"custom1\")\n+              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom2\")\n+              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom3\")\n+              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom4\")\n+              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom5\")\n+              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom6\")\n+              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom7\")\n+              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom8\")\n+              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom9\")\n+              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom10\")\n+              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom11\")\n+              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom12\")\n+              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom13\")\n+              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom14\")\n+              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom15\")\n+              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom16\")\n+              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-        taskSubsetFieldDescriptors = new FieldDescriptor[] {\n-\n-            fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n-            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\"),\n-            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\"),\n-            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\"),\n-            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-            fieldWithPath(\"description\").ignored(),\n-            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\")).description(\"Some custom Note\"),\n-            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-            subsectionWithPath(\"classificationSummaryResource\")\n-                .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n-            subsectionWithPath(\"workbasketSummaryResource\")\n-                .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n-            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-            fieldWithPath(\"parentBusinessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")),\n-            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-                .type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-            fieldWithPath(\"primaryObjRef.systemInstance\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-            fieldWithPath(\"customAttributes\").ignored(),\n-            fieldWithPath(\"callbackInfo\").ignored(),\n-            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n-            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n-            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n-            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n-            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n-            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n-            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n-            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n-            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n-            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n-            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n-            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n-            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n-            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n-            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n-            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n-            fieldWithPath(\"_links.self.href\").ignored()\n+    taskSubsetFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n+          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n+          fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n+          fieldWithPath(\"completed\")\n+              .description(taskFieldDescriptionsMap.get(\"completed\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"modified\")\n+              .description(taskFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"planned\")\n+              .description(taskFieldDescriptionsMap.get(\"planned\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n+          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n+          fieldWithPath(\"description\").ignored(),\n+          fieldWithPath(\"note\")\n+              .description(taskFieldDescriptionsMap.get(\"note\"))\n+              .description(\"Some custom Note\"),\n+          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n+          subsectionWithPath(\"classificationSummaryResource\")\n+              .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n+          subsectionWithPath(\"workbasketSummaryResource\")\n+              .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n+          fieldWithPath(\"businessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+          fieldWithPath(\"parentBusinessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n+          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")),\n+          fieldWithPath(\"primaryObjRef.id\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"primaryObjRef.company\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+          fieldWithPath(\"primaryObjRef.system\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+          fieldWithPath(\"primaryObjRef.systemInstance\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+          fieldWithPath(\"primaryObjRef.type\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+          fieldWithPath(\"primaryObjRef.value\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n+          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n+          fieldWithPath(\"customAttributes\").ignored(),\n+          fieldWithPath(\"callbackInfo\").ignored(),\n+          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n+          fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n+          fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n+          fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n+          fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n+          fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n+          fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n+          fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n+          fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n+          fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n+          fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n+          fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n+          fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n+          fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n+          fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n+          fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n+          fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n+          fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-        createTaskFieldDescriptors = new FieldDescriptor[] {\n-\n-            subsectionWithPath(\"classificationSummaryResource\")\n-                .description(\"The new classificationSummaryResource for the task\"),\n-            subsectionWithPath(\"workbasketSummaryResource\")\n-                .description(\"The new workbasketSummaryResource for the task\"),\n-            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-            fieldWithPath(\"primaryObjRef.systemInstance\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")).type(\"String\").optional(),\n-            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")).type(\"String\").optional(),\n-            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\").optional(),\n-            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\").optional(),\n-            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\").optional(),\n-            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\").optional(),\n-            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")).type(\"String\").optional(),\n-            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")).type(\"String\").optional(),\n-            fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\"))\n-                .description(\"Some custom Note\")\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")).type(\"String\").optional(),\n-            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")).type(\"String\").optional(),\n-            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"parentBusinessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\").optional(),\n-            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"customAttributes\").description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n-                .type(\"Object\")\n-                .optional(),\n-            fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n-                .type(\"Object\")\n-                .optional(),\n-            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\"))\n-                .type(\"Array\")\n-                .optional(),\n-            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")).type(\"String\").optional(),\n-            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")).type(\"Boolean\").optional(),\n-            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\"))\n-                .type(\"Boolean\")\n-                .optional()\n+    createTaskFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"classificationSummaryResource\")\n+              .description(\"The new classificationSummaryResource for the task\"),\n+          subsectionWithPath(\"workbasketSummaryResource\")\n+              .description(\"The new workbasketSummaryResource for the task\"),\n+          fieldWithPath(\"externalId\")\n+              .description(taskFieldDescriptionsMap.get(\"externalId\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"primaryObjRef.company\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+          fieldWithPath(\"primaryObjRef.system\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+          fieldWithPath(\"primaryObjRef.systemInstance\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+          fieldWithPath(\"primaryObjRef.type\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+          fieldWithPath(\"primaryObjRef.value\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+          fieldWithPath(\"created\")\n+              .description(taskFieldDescriptionsMap.get(\"created\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"claimed\")\n+              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"completed\")\n+              .description(taskFieldDescriptionsMap.get(\"completed\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"modified\")\n+              .description(taskFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"planned\")\n+              .description(taskFieldDescriptionsMap.get(\"planned\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"due\")\n+              .description(taskFieldDescriptionsMap.get(\"due\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"name\")\n+              .description(taskFieldDescriptionsMap.get(\"name\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"creator\")\n+              .description(taskFieldDescriptionsMap.get(\"creator\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"description\")\n+              .description(taskFieldDescriptionsMap.get(\"description\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"note\")\n+              .description(taskFieldDescriptionsMap.get(\"note\"))\n+              .description(\"Some custom Note\")\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"priority\")\n+              .description(taskFieldDescriptionsMap.get(\"priority\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"state\")\n+              .description(taskFieldDescriptionsMap.get(\"state\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"businessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"parentBusinessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"owner\")\n+              .description(taskFieldDescriptionsMap.get(\"owner\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"primaryObjRef.id\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"customAttributes\")\n+              .description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n+              .type(\"Object\")\n+              .optional(),\n+          fieldWithPath(\"callbackInfo\")\n+              .description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n+              .type(\"Object\")\n+              .optional(),\n+          fieldWithPath(\"attachments\")\n+              .description(taskFieldDescriptionsMap.get(\"attachments\"))\n+              .type(\"Array\")\n+              .optional(),\n+          fieldWithPath(\"custom1\")\n+              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom2\")\n+              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom3\")\n+              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom4\")\n+              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom5\")\n+              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom6\")\n+              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom7\")\n+              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom8\")\n+              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom9\")\n+              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom10\")\n+              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom11\")\n+              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom12\")\n+              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom13\")\n+              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom14\")\n+              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom15\")\n+              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom16\")\n+              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"read\")\n+              .description(taskFieldDescriptionsMap.get(\"read\"))\n+              .type(\"Boolean\")\n+              .optional(),\n+          fieldWithPath(\"transferred\")\n+              .description(taskFieldDescriptionsMap.get(\"transferred\"))\n+              .type(\"Boolean\")\n+              .optional()\n         };\n+  }\n+\n+  @Test\n+  void getAllTasksDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(Mapping.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetAllTasksDocTest\", responseFields(allTasksFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void getSpecificTaskDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetSpecificTaskDocTest\", responseFields(taskFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void taskSubSetDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"TaskSubset\", responseFields(taskSubsetFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void updateTaskDocTest() throws Exception {\n+    URL url =\n+        new URL(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n+    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"GET\");\n+    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+    assertEquals(200, con.getResponseCode());\n+\n+    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n+    String inputLine;\n+    StringBuilder content = new StringBuilder();\n+    while ((inputLine = in.readLine()) != null) {\n+      content.append(inputLine);\n     }\n-\n-    @Test\n-    void getAllTasksDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .get(restHelper.toUrl(Mapping.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"GetAllTasksDocTest\",\n-                responseFields(allTasksFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void getSpecificTaskDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .get(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"GetSpecificTaskDocTest\",\n-                responseFields(taskFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void taskSubSetDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .get(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"TaskSubset\",\n-                responseFields(taskSubsetFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void updateTaskDocTest() throws Exception {\n-        URL url = new URL(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n-        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-        con.setRequestMethod(\"GET\");\n-        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-        assertEquals(200, con.getResponseCode());\n-\n-        BufferedReader in = new BufferedReader(\n-            new InputStreamReader(con.getInputStream()));\n-        String inputLine;\n-        StringBuilder content = new StringBuilder();\n-        while ((inputLine = in.readLine()) != null) {\n-            content.append(inputLine);\n-        }\n-        in.close();\n-        con.disconnect();\n-        String originalTask = content.toString();\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .put(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-            .contentType(\"application/json\")\n-            .content(originalTask))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"UpdateTaskDocTest\",\n+    in.close();\n+    con.disconnect();\n+    String originalTask = content.toString();\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.put(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .contentType(\"application/json\")\n+                .content(originalTask))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"UpdateTaskDocTest\",\n                 requestFields(taskFieldDescriptors),\n                 responseFields(taskFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void createAndDeleteTaskDocTest() throws Exception {\n-\n-        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS))\n-            .contentType(\"application/hal+json\")\n-            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+  }\n+\n+  @Test\n+  void createAndDeleteTaskDocTest() throws Exception {\n+\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\n+                        \"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                            + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"CreateTaskDocTest\",\n-                requestFields(createTaskFieldDescriptors),\n-                responseFields(taskFieldDescriptors)))\n+            .andDo(\n+                MockMvcRestDocumentation.document(\n+                    \"CreateTaskDocTest\",\n+                    requestFields(createTaskFieldDescriptors),\n+                    responseFields(taskFieldDescriptors)))\n             .andReturn();\n \n-        String content = result.getResponse().getContentAsString();\n-        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-            .andExpect(MockMvcResultMatchers.status().isNoContent())\n-            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-    }\n-\n-    @Test\n-    void claimTaskDocTest() throws Exception {\n-\n-        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS))\n-            .contentType(\"application/hal+json\")\n-            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+        .andExpect(MockMvcResultMatchers.status().isNoContent())\n+        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+  }\n+\n+  @Test\n+  void claimTaskDocTest() throws Exception {\n+\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\n+                        \"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                            + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n             .andDo(MockMvcRestDocumentation.document(\"temp\"))\n             .andReturn();\n \n-        String content = result.getResponse().getContentAsString();\n-        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-            .content(\"{}\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"ClaimTaskDocTest\",\n-                responseFields(taskFieldDescriptors)));\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-            .andExpect(MockMvcResultMatchers.status().isNoContent())\n-            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-    }\n-\n-    @Test\n-    void completeTaskDocTest() throws Exception {\n-        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS))\n-            .contentType(\"application/hal+json\")\n-            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.post(\n+                    restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .content(\"{}\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"ClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+        .andExpect(MockMvcResultMatchers.status().isNoContent())\n+        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+  }\n+\n+  @Test\n+  void completeTaskDocTest() throws Exception {\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\n+                        \"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                            + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n             .andDo(MockMvcRestDocumentation.document(\"temp\"))\n             .andReturn();\n \n-        String content = result.getResponse().getContentAsString();\n-        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_COMPLETE, newId))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-            .content(\"{}\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"CompleteTaskDocTest\",\n-                responseFields(taskFieldDescriptors)));\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-            .andExpect(MockMvcResultMatchers.status().isNoContent())\n-            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-    }\n-\n-    @Test\n-    void transferTaskDocTest() throws Exception {\n-        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS))\n-            .contentType(\"application/hal+json\")\n-            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.post(\n+                    restHelper.toUrl(Mapping.URL_TASKS_ID_COMPLETE, newId))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .content(\"{}\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"CompleteTaskDocTest\", responseFields(taskFieldDescriptors)));\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+        .andExpect(MockMvcResultMatchers.status().isNoContent())\n+        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+  }\n+\n+  @Test\n+  void transferTaskDocTest() throws Exception {\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\n+                        \"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                            + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"TransferTaskDocTest\",\n-                responseFields(taskFieldDescriptors)))\n+            .andDo(\n+                MockMvcRestDocumentation.document(\n+                    \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)))\n             .andReturn();\n \n-        String content = result.getResponse().getContentAsString();\n-        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID, newId,\n-                \"WBI:100000000000000000000000000000000001\"))\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"TransferTaskDocTest\",\n-                responseFields(taskFieldDescriptors)));\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-            .andExpect(MockMvcResultMatchers.status().isNoContent());\n-    }\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.post(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID,\n+                        newId,\n+                        \"WBI:100000000000000000000000000000000001\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)));\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+        .andExpect(MockMvcResultMatchers.status().isNoContent());\n+  }\n }\n", "next_change": {"commit": "d34a44a32ab6762e4f53bfa9ea4f85741db57728", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex ced9f6533..576cff190 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -681,11 +723,5 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n         .andDo(\n             MockMvcRestDocumentation.document(\n                 \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)));\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-        .andExpect(MockMvcResultMatchers.status().isNoContent());\n   }\n }\n", "next_change": {"commit": "cc4efaa1cdd708366adea79d631b8aa5ccc013a8", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex 576cff190..b2b1234e5 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -718,7 +716,7 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n                         Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID,\n                         newId,\n                         \"WBI:100000000000000000000000000000000001\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+                .header(\"Authorization\", ADMIN_CREDENTIALS))\n         .andExpect(MockMvcResultMatchers.status().isOk())\n         .andDo(\n             MockMvcRestDocumentation.document(\n", "next_change": {"commit": "6dc782e37ac378b636daaef8d9134d17294845d2", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex b2b1234e5..18275d49c 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -713,7 +744,7 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n         .perform(\n             RestDocumentationRequestBuilders.post(\n                     restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID,\n+                        RestEndpoints.URL_TASKS_ID_TRANSFER_WORKBASKET_ID,\n                         newId,\n                         \"WBI:100000000000000000000000000000000001\"))\n                 .header(\"Authorization\", ADMIN_CREDENTIALS))\n", "next_change": {"commit": "3967e2900e8b35329b3675844ca3a8e059916c7e", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\ndeleted file mode 100644\nindex 18275d49c..000000000\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ /dev/null\n", "chunk": "@@ -1,756 +0,0 @@\n-package pro.taskana.doc.api;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-import static org.junit.Assert.assertEquals;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n-\n-import java.io.BufferedReader;\n-import java.io.InputStreamReader;\n-import java.net.HttpURLConnection;\n-import java.net.URL;\n-import java.util.HashMap;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n-import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n-import org.springframework.restdocs.payload.FieldDescriptor;\n-import org.springframework.test.web.servlet.MvcResult;\n-import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n-\n-import pro.taskana.common.rest.RestEndpoints;\n-import pro.taskana.common.test.doc.api.BaseRestDocumentation;\n-\n-/** Generate REST Documentation for the TaskController. */\n-class TaskControllerRestDocumentation extends BaseRestDocumentation {\n-\n-  private final HashMap<String, String> taskFieldDescriptionsMap = new HashMap<>();\n-\n-  private FieldDescriptor[] allTasksFieldDescriptors;\n-  private FieldDescriptor[] taskFieldDescriptors;\n-  private FieldDescriptor[] taskSubsetFieldDescriptors;\n-  private FieldDescriptor[] createTaskFieldDescriptors;\n-\n-  @BeforeEach\n-  void setUp() {\n-\n-    taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n-    taskFieldDescriptionsMap.put(\n-        \"externalId\",\n-        \"External ID. Can be used to enforce idempotence at task creation. \"\n-            + \"Can identify an external task.\");\n-    taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n-    taskFieldDescriptionsMap.put(\n-        \"claimed\", \"The timestamp of the last claim-operation on the task\");\n-    taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n-    taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n-    taskFieldDescriptionsMap.put(\n-        \"planned\",\n-        \"Planned start of the task. The actual completion of the task \"\n-            + \"should be between PLANNED and DUE.\");\n-    taskFieldDescriptionsMap.put(\n-        \"due\",\n-        \"Timestamp when the task is due. The actual completion of the task \"\n-            + \"should be between PLANNED and DUE.\");\n-    taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n-    taskFieldDescriptionsMap.put(\"creator\", \"\");\n-    taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n-    taskFieldDescriptionsMap.put(\"note\", \"note\");\n-    taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n-    taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n-    taskFieldDescriptionsMap.put(\n-        \"classificationSummary\", \"The <<classification-subset, Classification>> of the task\");\n-    taskFieldDescriptionsMap.put(\n-        \"workbasketSummary\", \"The <<workbasket-subset, Workbasket>> of the task\");\n-    taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n-    taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n-    taskFieldDescriptionsMap.put(\n-        \"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n-    taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.system\",\n-        \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.systemInstance\", \"The instance of the system, the object resides in.\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.type\", \"The type of the reference (contract, claim, policy, customer, ...)\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.value\", \"The value of the primary object reference\");\n-    taskFieldDescriptionsMap.put(\n-        \"customAttributes\",\n-        \"A container for all additional information on the task in JSON representation\");\n-    taskFieldDescriptionsMap.put(\n-        \"callbackInfo\",\n-        \"A container for all callback information of the task in JSON representation\");\n-    taskFieldDescriptionsMap.put(\"attachments\", \"\");\n-    taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n-    taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n-    taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n-\n-    allTasksFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n-          fieldWithPath(\"_links\").ignored(),\n-          fieldWithPath(\"_links.self\").ignored(),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n-        };\n-\n-    taskFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"claimed\")\n-              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-          fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\"),\n-          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-          subsectionWithPath(\"classificationSummary\")\n-              .description(taskFieldDescriptionsMap.get(\"classificationSummary\")),\n-          subsectionWithPath(\"workbasketSummary\")\n-              .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.company\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-          fieldWithPath(\"customAttributes\")\n-              .description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n-          fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n-          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-          fieldWithPath(\"custom1\")\n-              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom2\")\n-              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom3\")\n-              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom4\")\n-              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom5\")\n-              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom6\")\n-              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom7\")\n-              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom8\")\n-              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom9\")\n-              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom10\")\n-              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom11\")\n-              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom12\")\n-              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom13\")\n-              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom14\")\n-              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom15\")\n-              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom16\")\n-              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    taskSubsetFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-          fieldWithPath(\"description\").ignored(),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\"),\n-          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-          subsectionWithPath(\"classificationSummary\")\n-              .description(taskFieldDescriptionsMap.get(\"classificationSummary\")),\n-          subsectionWithPath(\"workbasketSummary\")\n-              .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.company\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-          fieldWithPath(\"customAttributes\").ignored(),\n-          fieldWithPath(\"callbackInfo\").ignored(),\n-          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-          fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n-          fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n-          fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n-          fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n-          fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n-          fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n-          fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n-          fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    createTaskFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"classificationSummary\")\n-              .description(\"The new classificationSummary for the task\"),\n-          subsectionWithPath(\"workbasketSummary\")\n-              .description(\"The new workbasketSummary for the task\"),\n-          fieldWithPath(\"externalId\")\n-              .description(taskFieldDescriptionsMap.get(\"externalId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"primaryObjRef.company\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"created\")\n-              .description(taskFieldDescriptionsMap.get(\"created\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"claimed\")\n-              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"due\")\n-              .description(taskFieldDescriptionsMap.get(\"due\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"name\")\n-              .description(taskFieldDescriptionsMap.get(\"name\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"creator\")\n-              .description(taskFieldDescriptionsMap.get(\"creator\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"description\")\n-              .description(taskFieldDescriptionsMap.get(\"description\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\")\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"priority\")\n-              .description(taskFieldDescriptionsMap.get(\"priority\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"state\")\n-              .description(taskFieldDescriptionsMap.get(\"state\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"owner\")\n-              .description(taskFieldDescriptionsMap.get(\"owner\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"customAttributes\")\n-              .description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n-              .type(\"Object\")\n-              .optional(),\n-          fieldWithPath(\"callbackInfo\")\n-              .description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n-              .type(\"Object\")\n-              .optional(),\n-          fieldWithPath(\"attachments\")\n-              .description(taskFieldDescriptionsMap.get(\"attachments\"))\n-              .type(\"Array\")\n-              .optional(),\n-          fieldWithPath(\"custom1\")\n-              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom2\")\n-              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom3\")\n-              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom4\")\n-              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom5\")\n-              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom6\")\n-              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom7\")\n-              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom8\")\n-              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom9\")\n-              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom10\")\n-              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom11\")\n-              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom12\")\n-              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom13\")\n-              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom14\")\n-              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom15\")\n-              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom16\")\n-              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"read\")\n-              .description(taskFieldDescriptionsMap.get(\"read\"))\n-              .type(\"Boolean\")\n-              .optional(),\n-          fieldWithPath(\"transferred\")\n-              .description(taskFieldDescriptionsMap.get(\"transferred\"))\n-              .type(\"Boolean\")\n-              .optional()\n-        };\n-  }\n-\n-  @Test\n-  void getAllTasksDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllTasksDocTest\", responseFields(allTasksFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void getSpecificTaskDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        RestEndpoints.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetSpecificTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void taskSubSetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        RestEndpoints.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"TaskSubset\", responseFields(taskSubsetFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void updateTaskDocTest() throws Exception {\n-    URL url =\n-        new URL(\n-            restHelper.toUrl(\n-                RestEndpoints.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", ADMIN_CREDENTIALS);\n-    assertEquals(200, con.getResponseCode());\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuilder content = new StringBuilder();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n-    }\n-    in.close();\n-    con.disconnect();\n-    String originalTask = content.toString();\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.put(\n-                    restHelper.toUrl(\n-                        RestEndpoints.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .header(\"Authorization\", ADMIN_CREDENTIALS)\n-                .contentType(\"application/json\")\n-                .content(originalTask))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"UpdateTaskDocTest\",\n-                requestFields(taskFieldDescriptors),\n-                responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void selectAndClaimTaskDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID_SELECT_AND_CLAIM) + \"?custom14=abc\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"SelectAndClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void createAndDeleteTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"CreateTaskDocTest\",\n-                    requestFields(createTaskFieldDescriptors),\n-                    responseFields(taskFieldDescriptors)))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID, newId))\n-                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-  }\n-\n-  @Test\n-  void deleteTasksDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS)\n-                        + \"?task-id=TKI:000000000000000000000000000000000036,\"\n-                        + \"TKI:000000000000000000000000000000000037,\"\n-                        + \"TKI:000000000000000000000000000000000038\"\n-                        + \"&custom14=abc\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"DeleteTasksDocTest\", responseFields(allTasksFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void claimTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"temp\"))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID_CLAIM, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS)\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"ClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void cancelClaimTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"temp\"))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID_CLAIM, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS)\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"CancelClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void completeTaskDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"temp\"))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID_COMPLETE, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS)\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"CompleteTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void transferTaskDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(\n-                        RestEndpoints.URL_TASKS_ID_TRANSFER_WORKBASKET_ID,\n-                        newId,\n-                        \"WBI:100000000000000000000000000000000001\"))\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "committedDate": "2019-12-04 09:56:34 +0100", "message": "TSK-967: Merge module taskana-rest-spring and taskana-rest-spring-test"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "7509bb0f1c7cfb9e8bcc634fbd3f80c0b74b5ca6", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: Fix simple checkstyle warnings"}, {"oid": "6a6dcb9c1e3984670c644f89c569eba3d20dcf3d", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Standardise paginated List behaviour and sub classes"}, {"oid": "4d560532bd98ef3dfe573c40c00506fcef21f912", "committedDate": "2020-01-23 14:23:56 +0100", "message": "TSK-987: Fix Spotbugs - reliance on default encoding"}, {"oid": "d34a44a32ab6762e4f53bfa9ea4f85741db57728", "committedDate": "2020-02-21 11:32:45 +0100", "message": "TSK-1137 Endpoint to cancel claim task for REST-API"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}, {"oid": "cc4efaa1cdd708366adea79d631b8aa5ccc013a8", "committedDate": "2020-06-05 20:03:15 +0200", "message": "TSK-1210: Replaced LoginModule with Embedded Spring LDAP"}, {"oid": "a2318c267ea7f6d57cfffefc04c5285e66778fac", "committedDate": "2020-06-12 12:31:55 +0200", "message": "reformatted code"}, {"oid": "1dfe54c0b6fb05c6811573e38feba9212fdb6a9f", "committedDate": "2020-06-30 14:50:26 +0200", "message": "TSK-1275: Support select and claim in one API call"}, {"oid": "4bba93c5a98dcbe22dc86144b12507abce4b2be4", "committedDate": "2020-07-10 13:13:42 +0200", "message": "Review findings"}, {"oid": "97443641af2378568d191fd64a11a48df0771b99", "committedDate": "2020-07-21 16:48:36 +0200", "message": "TSK-1267: All TimeIntervalReports are now based on any TaskTimestamp"}, {"oid": "121a9c103fe9b04606635f8c132489504fe2d414", "committedDate": "2020-10-13 17:07:09 +0200", "message": "TSK-1407: adopted RestDocumentation tests to use taskana-common-test aswell"}, {"oid": "6dc782e37ac378b636daaef8d9134d17294845d2", "committedDate": "2020-10-30 01:36:27 +0100", "message": "TSK-1430: Rename Mapping to RestEndpoints, groups relevant endpoints together"}, {"oid": "8c6beb6e9601d9eb98e7299d3f7743bf721678d3", "committedDate": "2020-12-03 12:53:29 +0100", "message": "TSK-1239: All tests now working with Assertj instead of junit Assertion. (#1346)"}, {"oid": "3967e2900e8b35329b3675844ca3a8e059916c7e", "committedDate": "2020-12-18 11:29:10 +0100", "message": "TSK-1436: rest api documentation is now build with spring-auto-restdocs"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MzE2MA==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422663160", "body": "please use `classificationSummary`", "bodyText": "please use classificationSummary", "bodyHTML": "<p dir=\"auto\">please use <code>classificationSummary</code></p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:51:02Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java", "diffHunk": "@@ -145,10 +141,11 @@ void setUp() {\n               .description(\"Some custom Note\"),\n           fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n           fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-          subsectionWithPath(\"classificationSummaryResource\")\n-              .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n-          subsectionWithPath(\"workbasketSummaryResource\")\n-              .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n+          subsectionWithPath(\"classificationSummaryRepresentationModel\")", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex 66e2340e4..a9ecfa5fe 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -133,29 +133,30 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n               .description(taskFieldDescriptionsMap.get(\"planned\"))\n               .type(\"String\"),\n           fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-          fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\"),\n-          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-          subsectionWithPath(\"classificationSummaryRepresentationModel\")\n-              .description(\n-                  taskFieldDescriptionsMap.get(\"classificationSummaryRepresentationModel\")),\n-          subsectionWithPath(\"workbasketSummaryRepresentationModel\")\n-              .description(taskFieldDescriptionsMap.get(\"workbasketSummaryRepresentationModel\")),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.company\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n+            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n+            fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n+            fieldWithPath(\"note\")\n+                .description(taskFieldDescriptionsMap.get(\"note\"))\n+                .description(\"Some custom Note\"),\n+            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n+            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n+            subsectionWithPath(\"classificationSummary\")\n+                .description(\n+                taskFieldDescriptionsMap.get(\"classificationSummary\")),\n+            subsectionWithPath(\"workbasketSummary\")\n+                .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n+            fieldWithPath(\"businessProcessId\")\n+                .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+            fieldWithPath(\"parentBusinessProcessId\")\n+                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n+            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\n+                \"String\"),\n+            fieldWithPath(\"primaryObjRef.id\")\n+                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+                .type(\"String\"),\n+            fieldWithPath(\"primaryObjRef.company\")\n+                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n           fieldWithPath(\"primaryObjRef.system\")\n               .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n           fieldWithPath(\"primaryObjRef.systemInstance\")\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex 66e2340e4..a9ecfa5fe 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -133,29 +133,30 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n               .description(taskFieldDescriptionsMap.get(\"planned\"))\n               .type(\"String\"),\n           fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-          fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\"),\n-          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-          subsectionWithPath(\"classificationSummaryRepresentationModel\")\n-              .description(\n-                  taskFieldDescriptionsMap.get(\"classificationSummaryRepresentationModel\")),\n-          subsectionWithPath(\"workbasketSummaryRepresentationModel\")\n-              .description(taskFieldDescriptionsMap.get(\"workbasketSummaryRepresentationModel\")),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.company\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n+            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n+            fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n+            fieldWithPath(\"note\")\n+                .description(taskFieldDescriptionsMap.get(\"note\"))\n+                .description(\"Some custom Note\"),\n+            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n+            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n+            subsectionWithPath(\"classificationSummary\")\n+                .description(\n+                taskFieldDescriptionsMap.get(\"classificationSummary\")),\n+            subsectionWithPath(\"workbasketSummary\")\n+                .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n+            fieldWithPath(\"businessProcessId\")\n+                .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+            fieldWithPath(\"parentBusinessProcessId\")\n+                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n+            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\n+                \"String\"),\n+            fieldWithPath(\"primaryObjRef.id\")\n+                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+                .type(\"String\"),\n+            fieldWithPath(\"primaryObjRef.company\")\n+                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n           fieldWithPath(\"primaryObjRef.system\")\n               .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n           fieldWithPath(\"primaryObjRef.systemInstance\")\n", "next_change": {"commit": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex a9ecfa5fe..3958c3e96 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -22,704 +22,455 @@ import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n \n import pro.taskana.rest.Mapping;\n \n-/** Generate REST Documentation for the TaskController. */\n+/**\n+ * Generate REST Documentation for the TaskController.\n+ */\n class TaskControllerRestDocumentation extends BaseRestDocumentation {\n \n-  private final HashMap<String, String> taskFieldDescriptionsMap = new HashMap<>();\n-\n-  private FieldDescriptor[] allTasksFieldDescriptors;\n-  private FieldDescriptor[] taskFieldDescriptors;\n-  private FieldDescriptor[] taskSubsetFieldDescriptors;\n-  private FieldDescriptor[] createTaskFieldDescriptors;\n-\n-  @BeforeEach\n-  void setUp() {\n-\n-    taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n-    taskFieldDescriptionsMap.put(\n-        \"externalId\",\n-        \"External ID. Can be used to enforce idempotence at task creation. \"\n-            + \"Can identify an external task.\");\n-    taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n-    taskFieldDescriptionsMap.put(\n-        \"claimed\", \"The timestamp of the last claim-operation on the task\");\n-    taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n-    taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n-    taskFieldDescriptionsMap.put(\n-        \"planned\",\n-        \"Planned start of the task. The actual completion of the task \"\n-            + \"should be between PLANNED and DUE.\");\n-    taskFieldDescriptionsMap.put(\n-        \"due\",\n-        \"Timestamp when the task is due. The actual completion of the task \"\n-            + \"should be between PLANNED and DUE.\");\n-    taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n-    taskFieldDescriptionsMap.put(\"creator\", \"\");\n-    taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n-    taskFieldDescriptionsMap.put(\"note\", \"note\");\n-    taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n-    taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n-    taskFieldDescriptionsMap.put(\n-        \"classificationSummary\",\n-        \"The <<classification-subset, Classification>> of the task\");\n-    taskFieldDescriptionsMap.put(\n-        \"workbasketSummary\",\n-        \"The <<workbasket-subset, Workbasket>> of the task\");\n-    taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n-    taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n-    taskFieldDescriptionsMap.put(\n-        \"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n-    taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.system\",\n-        \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.systemInstance\", \"The instance of the system, the object resides in.\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.type\", \"The type of the reference (contract, claim, policy, customer, ...)\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.value\", \"The value of the primary object reference\");\n-    taskFieldDescriptionsMap.put(\n-        \"customAttributes\",\n-        \"A container for all additional information on the task in JSON representation\");\n-    taskFieldDescriptionsMap.put(\n-        \"callbackInfo\",\n-        \"A container for all callback information of the task in JSON representation\");\n-    taskFieldDescriptionsMap.put(\"attachments\", \"\");\n-    taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n-    taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n-    taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n-\n-    allTasksFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n-          fieldWithPath(\"_links\").ignored(),\n-          fieldWithPath(\"_links.self\").ignored(),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n+    private HashMap<String, String> taskFieldDescriptionsMap = new HashMap<String, String>();\n+\n+    private FieldDescriptor[] allTasksFieldDescriptors;\n+    private FieldDescriptor[] taskFieldDescriptors;\n+    private FieldDescriptor[] taskSubsetFieldDescriptors;\n+    private FieldDescriptor[] createTaskFieldDescriptors;\n+\n+    @BeforeEach\n+    void setUp() {\n+\n+        taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n+        taskFieldDescriptionsMap.put(\"externalId\",\n+            \"External ID. Can be used to enforce idempotency at task creation. Can identify an external task.\");\n+        taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n+        taskFieldDescriptionsMap.put(\"claimed\", \"The timestamp of the last claim-operation on the task\");\n+        taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n+        taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n+        taskFieldDescriptionsMap.put(\"planned\",\n+            \"Planned start of the task. The actual completion of the task should be between PLANNED and DUE.\");\n+        taskFieldDescriptionsMap.put(\"due\",\n+            \"Timestamp when the task is due. The actual completion of the task should be between PLANNED and DUE.\");\n+        taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n+        taskFieldDescriptionsMap.put(\"creator\", \"\");\n+        taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n+        taskFieldDescriptionsMap.put(\"note\", \"note\");\n+        taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n+        taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n+        taskFieldDescriptionsMap.put(\"classificationSummaryResource\",\n+            \"The <<classification-subset, Classification>> of the task\");\n+        taskFieldDescriptionsMap.put(\"workbasketSummaryResource\", \"The <<workbasket-subset, Workbasket>> of the task\");\n+        taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n+        taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n+        taskFieldDescriptionsMap.put(\"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.system\",\n+            \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.systemInstance\",\n+            \"The instance of the system, the object resides in.\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.type\",\n+            \"The type of the reference (contract, claim, policy, customer, ...)\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.value\", \"The value of the primary object reference\");\n+        taskFieldDescriptionsMap.put(\"customAttributes\",\n+            \"A container for all additional information on the task in JSON representation\");\n+        taskFieldDescriptionsMap.put(\"callbackInfo\",\n+            \"A container for all callback information of the task in JSON representation\");\n+        taskFieldDescriptionsMap.put(\"attachments\", \"\");\n+        taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n+        taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n+        taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n+\n+        allTasksFieldDescriptors = new FieldDescriptor[] {\n+\n+            subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n+            fieldWithPath(\"_links\").ignored(),\n+            fieldWithPath(\"_links.self\").ignored(),\n+            fieldWithPath(\"_links.self.href\").ignored(),\n+            fieldWithPath(\"page\").ignored()\n         };\n \n-    taskFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"claimed\")\n-              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n+        taskFieldDescriptors = new FieldDescriptor[] {\n+\n+            fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n+            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n+            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n+            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")).type(\"String\"),\n+            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\"),\n+            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\"),\n+            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\"),\n+            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n             fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n             fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n             fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n-            fieldWithPath(\"note\")\n-                .description(taskFieldDescriptionsMap.get(\"note\"))\n-                .description(\"Some custom Note\"),\n+            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\")).description(\"Some custom Note\"),\n             fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n             fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-            subsectionWithPath(\"classificationSummary\")\n-                .description(\n-                taskFieldDescriptionsMap.get(\"classificationSummary\")),\n-            subsectionWithPath(\"workbasketSummary\")\n-                .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n-            fieldWithPath(\"businessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+            subsectionWithPath(\"classificationSummaryResource\")\n+                .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n+            subsectionWithPath(\"workbasketSummaryResource\")\n+                .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n+            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n             fieldWithPath(\"parentBusinessProcessId\")\n                 .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\n-                \"String\"),\n-            fieldWithPath(\"primaryObjRef.id\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n+            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n                 .type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.company\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-          fieldWithPath(\"customAttributes\")\n-              .description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n-          fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n-          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-          fieldWithPath(\"custom1\")\n-              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom2\")\n-              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom3\")\n-              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom4\")\n-              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom5\")\n-              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom6\")\n-              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom7\")\n-              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom8\")\n-              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom9\")\n-              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom10\")\n-              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom11\")\n-              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom12\")\n-              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom13\")\n-              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom14\")\n-              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom15\")\n-              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom16\")\n-              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"_links.self.href\").ignored()\n+            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+            fieldWithPath(\"primaryObjRef.systemInstance\")\n+                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n+            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n+            fieldWithPath(\"customAttributes\").description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n+            fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n+            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n+            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")).type(\"String\"),\n+            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")).type(\"String\"),\n+            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")).type(\"String\"),\n+            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")).type(\"String\"),\n+            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")).type(\"String\"),\n+            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")).type(\"String\"),\n+            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")).type(\"String\"),\n+            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")).type(\"String\"),\n+            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")).type(\"String\"),\n+            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")).type(\"String\"),\n+            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")).type(\"String\"),\n+            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")).type(\"String\"),\n+            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")).type(\"String\"),\n+            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")).type(\"String\"),\n+            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")).type(\"String\"),\n+            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")).type(\"String\"),\n+            fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-    taskSubsetFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n+        taskSubsetFieldDescriptors = new FieldDescriptor[] {\n+\n+            fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n+            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n+            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n+            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n+            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\"),\n+            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\"),\n+            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\"),\n+            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n             fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n             fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n             fieldWithPath(\"description\").ignored(),\n-            fieldWithPath(\"note\")\n-                .description(taskFieldDescriptionsMap.get(\"note\"))\n-                .description(\"Some custom Note\"),\n+            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\")).description(\"Some custom Note\"),\n             fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n             fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-            subsectionWithPath(\"classificationSummary\")\n-                .description(\n-                taskFieldDescriptionsMap.get(\"classificationSummary\")),\n-            subsectionWithPath(\"workbasketSummary\")\n-                .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n-            fieldWithPath(\"businessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+            subsectionWithPath(\"classificationSummaryResource\")\n+                .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n+            subsectionWithPath(\"workbasketSummaryResource\")\n+                .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n+            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n             fieldWithPath(\"parentBusinessProcessId\")\n                 .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n             fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")),\n-            fieldWithPath(\"primaryObjRef.id\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n                 .type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.company\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-          fieldWithPath(\"customAttributes\").ignored(),\n-          fieldWithPath(\"callbackInfo\").ignored(),\n-          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-          fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n-          fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n-          fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n-          fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n-          fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n-          fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n-          fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n-          fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n+            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+            fieldWithPath(\"primaryObjRef.systemInstance\")\n+                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n+            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n+            fieldWithPath(\"customAttributes\").ignored(),\n+            fieldWithPath(\"callbackInfo\").ignored(),\n+            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n+            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n+            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n+            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n+            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n+            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n+            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n+            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n+            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n+            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n+            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n+            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n+            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n+            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n+            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n+            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n+            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n+            fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-    createTaskFieldDescriptors =\n-        new FieldDescriptor[]{\n-            subsectionWithPath(\"classificationSummary\")\n-                .description(\"The new classificationSummary for the task\"),\n-            subsectionWithPath(\"workbasketSummary\")\n-                .description(\"The new workbasketSummary for the task\"),\n-            fieldWithPath(\"externalId\")\n-                .description(taskFieldDescriptionsMap.get(\"externalId\"))\n+        createTaskFieldDescriptors = new FieldDescriptor[] {\n+\n+            subsectionWithPath(\"classificationSummaryResource\")\n+                .description(\"The new classificationSummaryResource for the task\"),\n+            subsectionWithPath(\"workbasketSummaryResource\")\n+                .description(\"The new workbasketSummaryResource for the task\"),\n+            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\"))\n                 .type(\"String\")\n                 .optional(),\n-            fieldWithPath(\"primaryObjRef.company\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-            fieldWithPath(\"primaryObjRef.system\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n             fieldWithPath(\"primaryObjRef.systemInstance\")\n                 .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"created\")\n-              .description(taskFieldDescriptionsMap.get(\"created\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"claimed\")\n-              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"due\")\n-              .description(taskFieldDescriptionsMap.get(\"due\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"name\")\n-              .description(taskFieldDescriptionsMap.get(\"name\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"creator\")\n-              .description(taskFieldDescriptionsMap.get(\"creator\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"description\")\n-              .description(taskFieldDescriptionsMap.get(\"description\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\")\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"priority\")\n-              .description(taskFieldDescriptionsMap.get(\"priority\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"state\")\n-              .description(taskFieldDescriptionsMap.get(\"state\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"owner\")\n-              .description(taskFieldDescriptionsMap.get(\"owner\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"customAttributes\")\n-              .description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n-              .type(\"Object\")\n-              .optional(),\n-          fieldWithPath(\"callbackInfo\")\n-              .description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n-              .type(\"Object\")\n-              .optional(),\n-          fieldWithPath(\"attachments\")\n-              .description(taskFieldDescriptionsMap.get(\"attachments\"))\n-              .type(\"Array\")\n-              .optional(),\n-          fieldWithPath(\"custom1\")\n-              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom2\")\n-              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom3\")\n-              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom4\")\n-              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom5\")\n-              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom6\")\n-              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom7\")\n-              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom8\")\n-              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom9\")\n-              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom10\")\n-              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom11\")\n-              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom12\")\n-              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom13\")\n-              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom14\")\n-              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom15\")\n-              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom16\")\n-              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"read\")\n-              .description(taskFieldDescriptionsMap.get(\"read\"))\n-              .type(\"Boolean\")\n-              .optional(),\n-          fieldWithPath(\"transferred\")\n-              .description(taskFieldDescriptionsMap.get(\"transferred\"))\n-              .type(\"Boolean\")\n-              .optional()\n+            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")).type(\"String\").optional(),\n+            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")).type(\"String\").optional(),\n+            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\").optional(),\n+            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\").optional(),\n+            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\").optional(),\n+            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\").optional(),\n+            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")).type(\"String\").optional(),\n+            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")).type(\"String\").optional(),\n+            fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\"))\n+                .description(\"Some custom Note\")\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")).type(\"String\").optional(),\n+            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")).type(\"String\").optional(),\n+            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"parentBusinessProcessId\")\n+                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\").optional(),\n+            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"customAttributes\").description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n+                .type(\"Object\")\n+                .optional(),\n+            fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n+                .type(\"Object\")\n+                .optional(),\n+            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\"))\n+                .type(\"Array\")\n+                .optional(),\n+            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")).type(\"String\").optional(),\n+            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")).type(\"Boolean\").optional(),\n+            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\"))\n+                .type(\"Boolean\")\n+                .optional()\n         };\n-  }\n-\n-  @Test\n-  void getAllTasksDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(Mapping.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllTasksDocTest\", responseFields(allTasksFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void getSpecificTaskDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetSpecificTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void taskSubSetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"TaskSubset\", responseFields(taskSubsetFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void updateTaskDocTest() throws Exception {\n-    URL url =\n-        new URL(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    assertEquals(200, con.getResponseCode());\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuilder content = new StringBuilder();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n     }\n-    in.close();\n-    con.disconnect();\n-    String originalTask = content.toString();\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.put(\n-                    restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .contentType(\"application/json\")\n-                .content(originalTask))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"UpdateTaskDocTest\",\n+\n+    @Test\n+    void getAllTasksDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .get(restHelper.toUrl(Mapping.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"GetAllTasksDocTest\",\n+                responseFields(allTasksFieldDescriptors)));\n+    }\n+\n+    @Test\n+    void getSpecificTaskDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .get(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"GetSpecificTaskDocTest\",\n+                responseFields(taskFieldDescriptors)));\n+    }\n+\n+    @Test\n+    void taskSubSetDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .get(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"TaskSubset\",\n+                responseFields(taskSubsetFieldDescriptors)));\n+    }\n+\n+    @Test\n+    void updateTaskDocTest() throws Exception {\n+        URL url = new URL(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n+        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+        con.setRequestMethod(\"GET\");\n+        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+        assertEquals(200, con.getResponseCode());\n+\n+        BufferedReader in = new BufferedReader(\n+            new InputStreamReader(con.getInputStream()));\n+        String inputLine;\n+        StringBuilder content = new StringBuilder();\n+        while ((inputLine = in.readLine()) != null) {\n+            content.append(inputLine);\n+        }\n+        in.close();\n+        con.disconnect();\n+        String originalTask = content.toString();\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .put(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+            .contentType(\"application/json\")\n+            .content(originalTask))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"UpdateTaskDocTest\",\n                 requestFields(taskFieldDescriptors),\n                 responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void createAndDeleteTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"CreateTaskDocTest\",\n-                    requestFields(createTaskFieldDescriptors),\n-                    responseFields(taskFieldDescriptors)))\n-            .andReturn();\n+    }\n+\n+    @Test\n+    void createAndDeleteTaskDocTest() throws Exception {\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-  }\n-\n-  @Test\n-  void claimTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS))\n+            .contentType(\"application/hal+json\")\n+            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"temp\"))\n+            .andDo(MockMvcRestDocumentation.document(\"CreateTaskDocTest\",\n+                requestFields(createTaskFieldDescriptors),\n+                responseFields(taskFieldDescriptors)))\n             .andReturn();\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"ClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void cancelClaimTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        String content = result.getResponse().getContentAsString();\n+        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+            .andExpect(MockMvcResultMatchers.status().isNoContent())\n+            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+    }\n+\n+    @Test\n+    void claimTaskDocTest() throws Exception {\n+\n+        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS))\n+            .contentType(\"application/hal+json\")\n+            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n             .andDo(MockMvcRestDocumentation.document(\"temp\"))\n             .andReturn();\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"CancelClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void completeTaskDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        String content = result.getResponse().getContentAsString();\n+        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+            .content(\"{}\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"ClaimTaskDocTest\",\n+                responseFields(taskFieldDescriptors)));\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+            .andExpect(MockMvcResultMatchers.status().isNoContent())\n+            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+    }\n+\n+    @Test\n+    void completeTaskDocTest() throws Exception {\n+        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS))\n+            .contentType(\"application/hal+json\")\n+            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n             .andDo(MockMvcRestDocumentation.document(\"temp\"))\n             .andReturn();\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(Mapping.URL_TASKS_ID_COMPLETE, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"CompleteTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void transferTaskDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        String content = result.getResponse().getContentAsString();\n+        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_COMPLETE, newId))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+            .content(\"{}\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"CompleteTaskDocTest\",\n+                responseFields(taskFieldDescriptors)));\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+            .andExpect(MockMvcResultMatchers.status().isNoContent())\n+            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+    }\n+\n+    @Test\n+    void transferTaskDocTest() throws Exception {\n+        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS))\n+            .contentType(\"application/hal+json\")\n+            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)))\n+            .andDo(MockMvcRestDocumentation.document(\"TransferTaskDocTest\",\n+                responseFields(taskFieldDescriptors)))\n             .andReturn();\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID,\n-                        newId,\n-                        \"WBI:100000000000000000000000000000000001\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n+        String content = result.getResponse().getContentAsString();\n+        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID, newId,\n+                \"WBI:100000000000000000000000000000000001\"))\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"TransferTaskDocTest\",\n+                responseFields(taskFieldDescriptors)));\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+            .andExpect(MockMvcResultMatchers.status().isNoContent());\n+    }\n }\n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex 3958c3e96..ced9f6533 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -22,455 +21,671 @@ import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n \n import pro.taskana.rest.Mapping;\n \n-/**\n- * Generate REST Documentation for the TaskController.\n- */\n+/** Generate REST Documentation for the TaskController. */\n class TaskControllerRestDocumentation extends BaseRestDocumentation {\n \n-    private HashMap<String, String> taskFieldDescriptionsMap = new HashMap<String, String>();\n-\n-    private FieldDescriptor[] allTasksFieldDescriptors;\n-    private FieldDescriptor[] taskFieldDescriptors;\n-    private FieldDescriptor[] taskSubsetFieldDescriptors;\n-    private FieldDescriptor[] createTaskFieldDescriptors;\n-\n-    @BeforeEach\n-    void setUp() {\n-\n-        taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n-        taskFieldDescriptionsMap.put(\"externalId\",\n-            \"External ID. Can be used to enforce idempotency at task creation. Can identify an external task.\");\n-        taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n-        taskFieldDescriptionsMap.put(\"claimed\", \"The timestamp of the last claim-operation on the task\");\n-        taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n-        taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n-        taskFieldDescriptionsMap.put(\"planned\",\n-            \"Planned start of the task. The actual completion of the task should be between PLANNED and DUE.\");\n-        taskFieldDescriptionsMap.put(\"due\",\n-            \"Timestamp when the task is due. The actual completion of the task should be between PLANNED and DUE.\");\n-        taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n-        taskFieldDescriptionsMap.put(\"creator\", \"\");\n-        taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n-        taskFieldDescriptionsMap.put(\"note\", \"note\");\n-        taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n-        taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n-        taskFieldDescriptionsMap.put(\"classificationSummaryResource\",\n-            \"The <<classification-subset, Classification>> of the task\");\n-        taskFieldDescriptionsMap.put(\"workbasketSummaryResource\", \"The <<workbasket-subset, Workbasket>> of the task\");\n-        taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n-        taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n-        taskFieldDescriptionsMap.put(\"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.system\",\n-            \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.systemInstance\",\n-            \"The instance of the system, the object resides in.\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.type\",\n-            \"The type of the reference (contract, claim, policy, customer, ...)\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.value\", \"The value of the primary object reference\");\n-        taskFieldDescriptionsMap.put(\"customAttributes\",\n-            \"A container for all additional information on the task in JSON representation\");\n-        taskFieldDescriptionsMap.put(\"callbackInfo\",\n-            \"A container for all callback information of the task in JSON representation\");\n-        taskFieldDescriptionsMap.put(\"attachments\", \"\");\n-        taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n-        taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n-        taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n-\n-        allTasksFieldDescriptors = new FieldDescriptor[] {\n-\n-            subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n-            fieldWithPath(\"_links\").ignored(),\n-            fieldWithPath(\"_links.self\").ignored(),\n-            fieldWithPath(\"_links.self.href\").ignored(),\n-            fieldWithPath(\"page\").ignored()\n+  private HashMap<String, String> taskFieldDescriptionsMap = new HashMap<String, String>();\n+\n+  private FieldDescriptor[] allTasksFieldDescriptors;\n+  private FieldDescriptor[] taskFieldDescriptors;\n+  private FieldDescriptor[] taskSubsetFieldDescriptors;\n+  private FieldDescriptor[] createTaskFieldDescriptors;\n+\n+  @BeforeEach\n+  void setUp() {\n+\n+    taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n+    taskFieldDescriptionsMap.put(\n+        \"externalId\",\n+        \"External ID. Can be used to enforce idempotency at task creation. Can identify an external task.\");\n+    taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n+    taskFieldDescriptionsMap.put(\n+        \"claimed\", \"The timestamp of the last claim-operation on the task\");\n+    taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n+    taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n+    taskFieldDescriptionsMap.put(\n+        \"planned\",\n+        \"Planned start of the task. The actual completion of the task should be between PLANNED and DUE.\");\n+    taskFieldDescriptionsMap.put(\n+        \"due\",\n+        \"Timestamp when the task is due. The actual completion of the task should be between PLANNED and DUE.\");\n+    taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n+    taskFieldDescriptionsMap.put(\"creator\", \"\");\n+    taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n+    taskFieldDescriptionsMap.put(\"note\", \"note\");\n+    taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n+    taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n+    taskFieldDescriptionsMap.put(\n+        \"classificationSummaryResource\",\n+        \"The <<classification-subset, Classification>> of the task\");\n+    taskFieldDescriptionsMap.put(\n+        \"workbasketSummaryResource\", \"The <<workbasket-subset, Workbasket>> of the task\");\n+    taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n+    taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n+    taskFieldDescriptionsMap.put(\n+        \"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n+    taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.system\",\n+        \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.systemInstance\", \"The instance of the system, the object resides in.\");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.type\", \"The type of the reference (contract, claim, policy, customer, ...)\");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.value\", \"The value of the primary object reference\");\n+    taskFieldDescriptionsMap.put(\n+        \"customAttributes\",\n+        \"A container for all additional information on the task in JSON representation\");\n+    taskFieldDescriptionsMap.put(\n+        \"callbackInfo\",\n+        \"A container for all callback information of the task in JSON representation\");\n+    taskFieldDescriptionsMap.put(\"attachments\", \"\");\n+    taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n+    taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n+    taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n+\n+    allTasksFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n+          fieldWithPath(\"_links\").ignored(),\n+          fieldWithPath(\"_links.self\").ignored(),\n+          fieldWithPath(\"_links.self.href\").ignored(),\n+          fieldWithPath(\"page\").ignored()\n         };\n \n-        taskFieldDescriptors = new FieldDescriptor[] {\n-\n-            fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")).type(\"String\"),\n-            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\"),\n-            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\"),\n-            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\"),\n-            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-            fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n-            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\")).description(\"Some custom Note\"),\n-            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-            subsectionWithPath(\"classificationSummaryResource\")\n-                .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n-            subsectionWithPath(\"workbasketSummaryResource\")\n-                .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n-            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-            fieldWithPath(\"parentBusinessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-                .type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-            fieldWithPath(\"primaryObjRef.systemInstance\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-            fieldWithPath(\"customAttributes\").description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n-            fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n-            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")).type(\"String\"),\n-            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")).type(\"String\"),\n-            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")).type(\"String\"),\n-            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")).type(\"String\"),\n-            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")).type(\"String\"),\n-            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")).type(\"String\"),\n-            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")).type(\"String\"),\n-            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")).type(\"String\"),\n-            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")).type(\"String\"),\n-            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")).type(\"String\"),\n-            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")).type(\"String\"),\n-            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")).type(\"String\"),\n-            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")).type(\"String\"),\n-            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")).type(\"String\"),\n-            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")).type(\"String\"),\n-            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")).type(\"String\"),\n-            fieldWithPath(\"_links.self.href\").ignored()\n+    taskFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n+          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n+          fieldWithPath(\"claimed\")\n+              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"completed\")\n+              .description(taskFieldDescriptionsMap.get(\"completed\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"modified\")\n+              .description(taskFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"planned\")\n+              .description(taskFieldDescriptionsMap.get(\"planned\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n+          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n+          fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n+          fieldWithPath(\"note\")\n+              .description(taskFieldDescriptionsMap.get(\"note\"))\n+              .description(\"Some custom Note\"),\n+          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n+          subsectionWithPath(\"classificationSummaryResource\")\n+              .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n+          subsectionWithPath(\"workbasketSummaryResource\")\n+              .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n+          fieldWithPath(\"businessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+          fieldWithPath(\"parentBusinessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n+          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n+          fieldWithPath(\"primaryObjRef.id\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"primaryObjRef.company\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+          fieldWithPath(\"primaryObjRef.system\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+          fieldWithPath(\"primaryObjRef.systemInstance\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+          fieldWithPath(\"primaryObjRef.type\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+          fieldWithPath(\"primaryObjRef.value\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n+          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n+          fieldWithPath(\"customAttributes\")\n+              .description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n+          fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n+          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n+          fieldWithPath(\"custom1\")\n+              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom2\")\n+              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom3\")\n+              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom4\")\n+              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom5\")\n+              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom6\")\n+              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom7\")\n+              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom8\")\n+              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom9\")\n+              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom10\")\n+              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom11\")\n+              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom12\")\n+              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom13\")\n+              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom14\")\n+              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom15\")\n+              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom16\")\n+              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-        taskSubsetFieldDescriptors = new FieldDescriptor[] {\n-\n-            fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n-            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\"),\n-            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\"),\n-            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\"),\n-            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-            fieldWithPath(\"description\").ignored(),\n-            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\")).description(\"Some custom Note\"),\n-            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-            subsectionWithPath(\"classificationSummaryResource\")\n-                .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n-            subsectionWithPath(\"workbasketSummaryResource\")\n-                .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n-            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-            fieldWithPath(\"parentBusinessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")),\n-            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-                .type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-            fieldWithPath(\"primaryObjRef.systemInstance\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-            fieldWithPath(\"customAttributes\").ignored(),\n-            fieldWithPath(\"callbackInfo\").ignored(),\n-            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n-            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n-            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n-            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n-            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n-            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n-            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n-            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n-            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n-            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n-            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n-            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n-            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n-            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n-            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n-            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n-            fieldWithPath(\"_links.self.href\").ignored()\n+    taskSubsetFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n+          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n+          fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n+          fieldWithPath(\"completed\")\n+              .description(taskFieldDescriptionsMap.get(\"completed\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"modified\")\n+              .description(taskFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"planned\")\n+              .description(taskFieldDescriptionsMap.get(\"planned\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n+          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n+          fieldWithPath(\"description\").ignored(),\n+          fieldWithPath(\"note\")\n+              .description(taskFieldDescriptionsMap.get(\"note\"))\n+              .description(\"Some custom Note\"),\n+          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n+          subsectionWithPath(\"classificationSummaryResource\")\n+              .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n+          subsectionWithPath(\"workbasketSummaryResource\")\n+              .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n+          fieldWithPath(\"businessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+          fieldWithPath(\"parentBusinessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n+          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")),\n+          fieldWithPath(\"primaryObjRef.id\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"primaryObjRef.company\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+          fieldWithPath(\"primaryObjRef.system\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+          fieldWithPath(\"primaryObjRef.systemInstance\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+          fieldWithPath(\"primaryObjRef.type\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+          fieldWithPath(\"primaryObjRef.value\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n+          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n+          fieldWithPath(\"customAttributes\").ignored(),\n+          fieldWithPath(\"callbackInfo\").ignored(),\n+          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n+          fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n+          fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n+          fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n+          fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n+          fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n+          fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n+          fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n+          fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n+          fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n+          fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n+          fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n+          fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n+          fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n+          fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n+          fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n+          fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n+          fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-        createTaskFieldDescriptors = new FieldDescriptor[] {\n-\n-            subsectionWithPath(\"classificationSummaryResource\")\n-                .description(\"The new classificationSummaryResource for the task\"),\n-            subsectionWithPath(\"workbasketSummaryResource\")\n-                .description(\"The new workbasketSummaryResource for the task\"),\n-            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-            fieldWithPath(\"primaryObjRef.systemInstance\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")).type(\"String\").optional(),\n-            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")).type(\"String\").optional(),\n-            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\").optional(),\n-            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\").optional(),\n-            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\").optional(),\n-            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\").optional(),\n-            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")).type(\"String\").optional(),\n-            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")).type(\"String\").optional(),\n-            fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\"))\n-                .description(\"Some custom Note\")\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")).type(\"String\").optional(),\n-            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")).type(\"String\").optional(),\n-            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"parentBusinessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\").optional(),\n-            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"customAttributes\").description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n-                .type(\"Object\")\n-                .optional(),\n-            fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n-                .type(\"Object\")\n-                .optional(),\n-            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\"))\n-                .type(\"Array\")\n-                .optional(),\n-            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")).type(\"String\").optional(),\n-            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")).type(\"Boolean\").optional(),\n-            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\"))\n-                .type(\"Boolean\")\n-                .optional()\n+    createTaskFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"classificationSummaryResource\")\n+              .description(\"The new classificationSummaryResource for the task\"),\n+          subsectionWithPath(\"workbasketSummaryResource\")\n+              .description(\"The new workbasketSummaryResource for the task\"),\n+          fieldWithPath(\"externalId\")\n+              .description(taskFieldDescriptionsMap.get(\"externalId\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"primaryObjRef.company\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+          fieldWithPath(\"primaryObjRef.system\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+          fieldWithPath(\"primaryObjRef.systemInstance\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+          fieldWithPath(\"primaryObjRef.type\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+          fieldWithPath(\"primaryObjRef.value\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+          fieldWithPath(\"created\")\n+              .description(taskFieldDescriptionsMap.get(\"created\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"claimed\")\n+              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"completed\")\n+              .description(taskFieldDescriptionsMap.get(\"completed\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"modified\")\n+              .description(taskFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"planned\")\n+              .description(taskFieldDescriptionsMap.get(\"planned\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"due\")\n+              .description(taskFieldDescriptionsMap.get(\"due\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"name\")\n+              .description(taskFieldDescriptionsMap.get(\"name\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"creator\")\n+              .description(taskFieldDescriptionsMap.get(\"creator\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"description\")\n+              .description(taskFieldDescriptionsMap.get(\"description\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"note\")\n+              .description(taskFieldDescriptionsMap.get(\"note\"))\n+              .description(\"Some custom Note\")\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"priority\")\n+              .description(taskFieldDescriptionsMap.get(\"priority\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"state\")\n+              .description(taskFieldDescriptionsMap.get(\"state\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"businessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"parentBusinessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"owner\")\n+              .description(taskFieldDescriptionsMap.get(\"owner\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"primaryObjRef.id\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"customAttributes\")\n+              .description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n+              .type(\"Object\")\n+              .optional(),\n+          fieldWithPath(\"callbackInfo\")\n+              .description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n+              .type(\"Object\")\n+              .optional(),\n+          fieldWithPath(\"attachments\")\n+              .description(taskFieldDescriptionsMap.get(\"attachments\"))\n+              .type(\"Array\")\n+              .optional(),\n+          fieldWithPath(\"custom1\")\n+              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom2\")\n+              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom3\")\n+              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom4\")\n+              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom5\")\n+              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom6\")\n+              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom7\")\n+              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom8\")\n+              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom9\")\n+              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom10\")\n+              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom11\")\n+              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom12\")\n+              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom13\")\n+              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom14\")\n+              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom15\")\n+              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom16\")\n+              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"read\")\n+              .description(taskFieldDescriptionsMap.get(\"read\"))\n+              .type(\"Boolean\")\n+              .optional(),\n+          fieldWithPath(\"transferred\")\n+              .description(taskFieldDescriptionsMap.get(\"transferred\"))\n+              .type(\"Boolean\")\n+              .optional()\n         };\n+  }\n+\n+  @Test\n+  void getAllTasksDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(Mapping.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetAllTasksDocTest\", responseFields(allTasksFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void getSpecificTaskDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetSpecificTaskDocTest\", responseFields(taskFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void taskSubSetDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"TaskSubset\", responseFields(taskSubsetFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void updateTaskDocTest() throws Exception {\n+    URL url =\n+        new URL(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n+    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"GET\");\n+    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+    assertEquals(200, con.getResponseCode());\n+\n+    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n+    String inputLine;\n+    StringBuilder content = new StringBuilder();\n+    while ((inputLine = in.readLine()) != null) {\n+      content.append(inputLine);\n     }\n-\n-    @Test\n-    void getAllTasksDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .get(restHelper.toUrl(Mapping.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"GetAllTasksDocTest\",\n-                responseFields(allTasksFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void getSpecificTaskDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .get(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"GetSpecificTaskDocTest\",\n-                responseFields(taskFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void taskSubSetDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .get(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"TaskSubset\",\n-                responseFields(taskSubsetFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void updateTaskDocTest() throws Exception {\n-        URL url = new URL(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n-        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-        con.setRequestMethod(\"GET\");\n-        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-        assertEquals(200, con.getResponseCode());\n-\n-        BufferedReader in = new BufferedReader(\n-            new InputStreamReader(con.getInputStream()));\n-        String inputLine;\n-        StringBuilder content = new StringBuilder();\n-        while ((inputLine = in.readLine()) != null) {\n-            content.append(inputLine);\n-        }\n-        in.close();\n-        con.disconnect();\n-        String originalTask = content.toString();\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .put(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-            .contentType(\"application/json\")\n-            .content(originalTask))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"UpdateTaskDocTest\",\n+    in.close();\n+    con.disconnect();\n+    String originalTask = content.toString();\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.put(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .contentType(\"application/json\")\n+                .content(originalTask))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"UpdateTaskDocTest\",\n                 requestFields(taskFieldDescriptors),\n                 responseFields(taskFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void createAndDeleteTaskDocTest() throws Exception {\n-\n-        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS))\n-            .contentType(\"application/hal+json\")\n-            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+  }\n+\n+  @Test\n+  void createAndDeleteTaskDocTest() throws Exception {\n+\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\n+                        \"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                            + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"CreateTaskDocTest\",\n-                requestFields(createTaskFieldDescriptors),\n-                responseFields(taskFieldDescriptors)))\n+            .andDo(\n+                MockMvcRestDocumentation.document(\n+                    \"CreateTaskDocTest\",\n+                    requestFields(createTaskFieldDescriptors),\n+                    responseFields(taskFieldDescriptors)))\n             .andReturn();\n \n-        String content = result.getResponse().getContentAsString();\n-        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-            .andExpect(MockMvcResultMatchers.status().isNoContent())\n-            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-    }\n-\n-    @Test\n-    void claimTaskDocTest() throws Exception {\n-\n-        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS))\n-            .contentType(\"application/hal+json\")\n-            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+        .andExpect(MockMvcResultMatchers.status().isNoContent())\n+        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+  }\n+\n+  @Test\n+  void claimTaskDocTest() throws Exception {\n+\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\n+                        \"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                            + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n             .andDo(MockMvcRestDocumentation.document(\"temp\"))\n             .andReturn();\n \n-        String content = result.getResponse().getContentAsString();\n-        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-            .content(\"{}\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"ClaimTaskDocTest\",\n-                responseFields(taskFieldDescriptors)));\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-            .andExpect(MockMvcResultMatchers.status().isNoContent())\n-            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-    }\n-\n-    @Test\n-    void completeTaskDocTest() throws Exception {\n-        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS))\n-            .contentType(\"application/hal+json\")\n-            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.post(\n+                    restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .content(\"{}\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"ClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+        .andExpect(MockMvcResultMatchers.status().isNoContent())\n+        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+  }\n+\n+  @Test\n+  void completeTaskDocTest() throws Exception {\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\n+                        \"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                            + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n             .andDo(MockMvcRestDocumentation.document(\"temp\"))\n             .andReturn();\n \n-        String content = result.getResponse().getContentAsString();\n-        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_COMPLETE, newId))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-            .content(\"{}\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"CompleteTaskDocTest\",\n-                responseFields(taskFieldDescriptors)));\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-            .andExpect(MockMvcResultMatchers.status().isNoContent())\n-            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-    }\n-\n-    @Test\n-    void transferTaskDocTest() throws Exception {\n-        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS))\n-            .contentType(\"application/hal+json\")\n-            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.post(\n+                    restHelper.toUrl(Mapping.URL_TASKS_ID_COMPLETE, newId))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .content(\"{}\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"CompleteTaskDocTest\", responseFields(taskFieldDescriptors)));\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+        .andExpect(MockMvcResultMatchers.status().isNoContent())\n+        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+  }\n+\n+  @Test\n+  void transferTaskDocTest() throws Exception {\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\n+                        \"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                            + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"TransferTaskDocTest\",\n-                responseFields(taskFieldDescriptors)))\n+            .andDo(\n+                MockMvcRestDocumentation.document(\n+                    \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)))\n             .andReturn();\n \n-        String content = result.getResponse().getContentAsString();\n-        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID, newId,\n-                \"WBI:100000000000000000000000000000000001\"))\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"TransferTaskDocTest\",\n-                responseFields(taskFieldDescriptors)));\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-            .andExpect(MockMvcResultMatchers.status().isNoContent());\n-    }\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.post(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID,\n+                        newId,\n+                        \"WBI:100000000000000000000000000000000001\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)));\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+        .andExpect(MockMvcResultMatchers.status().isNoContent());\n+  }\n }\n", "next_change": {"commit": "d34a44a32ab6762e4f53bfa9ea4f85741db57728", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex ced9f6533..576cff190 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -681,11 +723,5 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n         .andDo(\n             MockMvcRestDocumentation.document(\n                 \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)));\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-        .andExpect(MockMvcResultMatchers.status().isNoContent());\n   }\n }\n", "next_change": {"commit": "cc4efaa1cdd708366adea79d631b8aa5ccc013a8", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex 576cff190..b2b1234e5 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -718,7 +716,7 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n                         Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID,\n                         newId,\n                         \"WBI:100000000000000000000000000000000001\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+                .header(\"Authorization\", ADMIN_CREDENTIALS))\n         .andExpect(MockMvcResultMatchers.status().isOk())\n         .andDo(\n             MockMvcRestDocumentation.document(\n", "next_change": {"commit": "6dc782e37ac378b636daaef8d9134d17294845d2", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex b2b1234e5..18275d49c 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -713,7 +744,7 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n         .perform(\n             RestDocumentationRequestBuilders.post(\n                     restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID,\n+                        RestEndpoints.URL_TASKS_ID_TRANSFER_WORKBASKET_ID,\n                         newId,\n                         \"WBI:100000000000000000000000000000000001\"))\n                 .header(\"Authorization\", ADMIN_CREDENTIALS))\n", "next_change": {"commit": "3967e2900e8b35329b3675844ca3a8e059916c7e", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\ndeleted file mode 100644\nindex 18275d49c..000000000\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ /dev/null\n", "chunk": "@@ -1,756 +0,0 @@\n-package pro.taskana.doc.api;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-import static org.junit.Assert.assertEquals;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n-\n-import java.io.BufferedReader;\n-import java.io.InputStreamReader;\n-import java.net.HttpURLConnection;\n-import java.net.URL;\n-import java.util.HashMap;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n-import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n-import org.springframework.restdocs.payload.FieldDescriptor;\n-import org.springframework.test.web.servlet.MvcResult;\n-import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n-\n-import pro.taskana.common.rest.RestEndpoints;\n-import pro.taskana.common.test.doc.api.BaseRestDocumentation;\n-\n-/** Generate REST Documentation for the TaskController. */\n-class TaskControllerRestDocumentation extends BaseRestDocumentation {\n-\n-  private final HashMap<String, String> taskFieldDescriptionsMap = new HashMap<>();\n-\n-  private FieldDescriptor[] allTasksFieldDescriptors;\n-  private FieldDescriptor[] taskFieldDescriptors;\n-  private FieldDescriptor[] taskSubsetFieldDescriptors;\n-  private FieldDescriptor[] createTaskFieldDescriptors;\n-\n-  @BeforeEach\n-  void setUp() {\n-\n-    taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n-    taskFieldDescriptionsMap.put(\n-        \"externalId\",\n-        \"External ID. Can be used to enforce idempotence at task creation. \"\n-            + \"Can identify an external task.\");\n-    taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n-    taskFieldDescriptionsMap.put(\n-        \"claimed\", \"The timestamp of the last claim-operation on the task\");\n-    taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n-    taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n-    taskFieldDescriptionsMap.put(\n-        \"planned\",\n-        \"Planned start of the task. The actual completion of the task \"\n-            + \"should be between PLANNED and DUE.\");\n-    taskFieldDescriptionsMap.put(\n-        \"due\",\n-        \"Timestamp when the task is due. The actual completion of the task \"\n-            + \"should be between PLANNED and DUE.\");\n-    taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n-    taskFieldDescriptionsMap.put(\"creator\", \"\");\n-    taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n-    taskFieldDescriptionsMap.put(\"note\", \"note\");\n-    taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n-    taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n-    taskFieldDescriptionsMap.put(\n-        \"classificationSummary\", \"The <<classification-subset, Classification>> of the task\");\n-    taskFieldDescriptionsMap.put(\n-        \"workbasketSummary\", \"The <<workbasket-subset, Workbasket>> of the task\");\n-    taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n-    taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n-    taskFieldDescriptionsMap.put(\n-        \"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n-    taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.system\",\n-        \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.systemInstance\", \"The instance of the system, the object resides in.\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.type\", \"The type of the reference (contract, claim, policy, customer, ...)\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.value\", \"The value of the primary object reference\");\n-    taskFieldDescriptionsMap.put(\n-        \"customAttributes\",\n-        \"A container for all additional information on the task in JSON representation\");\n-    taskFieldDescriptionsMap.put(\n-        \"callbackInfo\",\n-        \"A container for all callback information of the task in JSON representation\");\n-    taskFieldDescriptionsMap.put(\"attachments\", \"\");\n-    taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n-    taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n-    taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n-\n-    allTasksFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n-          fieldWithPath(\"_links\").ignored(),\n-          fieldWithPath(\"_links.self\").ignored(),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n-        };\n-\n-    taskFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"claimed\")\n-              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-          fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\"),\n-          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-          subsectionWithPath(\"classificationSummary\")\n-              .description(taskFieldDescriptionsMap.get(\"classificationSummary\")),\n-          subsectionWithPath(\"workbasketSummary\")\n-              .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.company\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-          fieldWithPath(\"customAttributes\")\n-              .description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n-          fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n-          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-          fieldWithPath(\"custom1\")\n-              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom2\")\n-              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom3\")\n-              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom4\")\n-              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom5\")\n-              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom6\")\n-              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom7\")\n-              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom8\")\n-              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom9\")\n-              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom10\")\n-              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom11\")\n-              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom12\")\n-              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom13\")\n-              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom14\")\n-              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom15\")\n-              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom16\")\n-              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    taskSubsetFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-          fieldWithPath(\"description\").ignored(),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\"),\n-          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-          subsectionWithPath(\"classificationSummary\")\n-              .description(taskFieldDescriptionsMap.get(\"classificationSummary\")),\n-          subsectionWithPath(\"workbasketSummary\")\n-              .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.company\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-          fieldWithPath(\"customAttributes\").ignored(),\n-          fieldWithPath(\"callbackInfo\").ignored(),\n-          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-          fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n-          fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n-          fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n-          fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n-          fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n-          fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n-          fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n-          fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    createTaskFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"classificationSummary\")\n-              .description(\"The new classificationSummary for the task\"),\n-          subsectionWithPath(\"workbasketSummary\")\n-              .description(\"The new workbasketSummary for the task\"),\n-          fieldWithPath(\"externalId\")\n-              .description(taskFieldDescriptionsMap.get(\"externalId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"primaryObjRef.company\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"created\")\n-              .description(taskFieldDescriptionsMap.get(\"created\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"claimed\")\n-              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"due\")\n-              .description(taskFieldDescriptionsMap.get(\"due\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"name\")\n-              .description(taskFieldDescriptionsMap.get(\"name\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"creator\")\n-              .description(taskFieldDescriptionsMap.get(\"creator\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"description\")\n-              .description(taskFieldDescriptionsMap.get(\"description\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\")\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"priority\")\n-              .description(taskFieldDescriptionsMap.get(\"priority\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"state\")\n-              .description(taskFieldDescriptionsMap.get(\"state\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"owner\")\n-              .description(taskFieldDescriptionsMap.get(\"owner\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"customAttributes\")\n-              .description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n-              .type(\"Object\")\n-              .optional(),\n-          fieldWithPath(\"callbackInfo\")\n-              .description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n-              .type(\"Object\")\n-              .optional(),\n-          fieldWithPath(\"attachments\")\n-              .description(taskFieldDescriptionsMap.get(\"attachments\"))\n-              .type(\"Array\")\n-              .optional(),\n-          fieldWithPath(\"custom1\")\n-              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom2\")\n-              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom3\")\n-              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom4\")\n-              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom5\")\n-              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom6\")\n-              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom7\")\n-              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom8\")\n-              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom9\")\n-              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom10\")\n-              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom11\")\n-              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom12\")\n-              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom13\")\n-              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom14\")\n-              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom15\")\n-              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom16\")\n-              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"read\")\n-              .description(taskFieldDescriptionsMap.get(\"read\"))\n-              .type(\"Boolean\")\n-              .optional(),\n-          fieldWithPath(\"transferred\")\n-              .description(taskFieldDescriptionsMap.get(\"transferred\"))\n-              .type(\"Boolean\")\n-              .optional()\n-        };\n-  }\n-\n-  @Test\n-  void getAllTasksDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllTasksDocTest\", responseFields(allTasksFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void getSpecificTaskDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        RestEndpoints.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetSpecificTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void taskSubSetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        RestEndpoints.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"TaskSubset\", responseFields(taskSubsetFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void updateTaskDocTest() throws Exception {\n-    URL url =\n-        new URL(\n-            restHelper.toUrl(\n-                RestEndpoints.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", ADMIN_CREDENTIALS);\n-    assertEquals(200, con.getResponseCode());\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuilder content = new StringBuilder();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n-    }\n-    in.close();\n-    con.disconnect();\n-    String originalTask = content.toString();\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.put(\n-                    restHelper.toUrl(\n-                        RestEndpoints.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .header(\"Authorization\", ADMIN_CREDENTIALS)\n-                .contentType(\"application/json\")\n-                .content(originalTask))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"UpdateTaskDocTest\",\n-                requestFields(taskFieldDescriptors),\n-                responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void selectAndClaimTaskDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID_SELECT_AND_CLAIM) + \"?custom14=abc\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"SelectAndClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void createAndDeleteTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"CreateTaskDocTest\",\n-                    requestFields(createTaskFieldDescriptors),\n-                    responseFields(taskFieldDescriptors)))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID, newId))\n-                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-  }\n-\n-  @Test\n-  void deleteTasksDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS)\n-                        + \"?task-id=TKI:000000000000000000000000000000000036,\"\n-                        + \"TKI:000000000000000000000000000000000037,\"\n-                        + \"TKI:000000000000000000000000000000000038\"\n-                        + \"&custom14=abc\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"DeleteTasksDocTest\", responseFields(allTasksFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void claimTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"temp\"))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID_CLAIM, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS)\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"ClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void cancelClaimTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"temp\"))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID_CLAIM, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS)\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"CancelClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void completeTaskDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"temp\"))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID_COMPLETE, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS)\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"CompleteTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void transferTaskDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(\n-                        RestEndpoints.URL_TASKS_ID_TRANSFER_WORKBASKET_ID,\n-                        newId,\n-                        \"WBI:100000000000000000000000000000000001\"))\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "committedDate": "2019-12-04 09:56:34 +0100", "message": "TSK-967: Merge module taskana-rest-spring and taskana-rest-spring-test"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "7509bb0f1c7cfb9e8bcc634fbd3f80c0b74b5ca6", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: Fix simple checkstyle warnings"}, {"oid": "6a6dcb9c1e3984670c644f89c569eba3d20dcf3d", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Standardise paginated List behaviour and sub classes"}, {"oid": "4d560532bd98ef3dfe573c40c00506fcef21f912", "committedDate": "2020-01-23 14:23:56 +0100", "message": "TSK-987: Fix Spotbugs - reliance on default encoding"}, {"oid": "d34a44a32ab6762e4f53bfa9ea4f85741db57728", "committedDate": "2020-02-21 11:32:45 +0100", "message": "TSK-1137 Endpoint to cancel claim task for REST-API"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}, {"oid": "cc4efaa1cdd708366adea79d631b8aa5ccc013a8", "committedDate": "2020-06-05 20:03:15 +0200", "message": "TSK-1210: Replaced LoginModule with Embedded Spring LDAP"}, {"oid": "a2318c267ea7f6d57cfffefc04c5285e66778fac", "committedDate": "2020-06-12 12:31:55 +0200", "message": "reformatted code"}, {"oid": "1dfe54c0b6fb05c6811573e38feba9212fdb6a9f", "committedDate": "2020-06-30 14:50:26 +0200", "message": "TSK-1275: Support select and claim in one API call"}, {"oid": "4bba93c5a98dcbe22dc86144b12507abce4b2be4", "committedDate": "2020-07-10 13:13:42 +0200", "message": "Review findings"}, {"oid": "97443641af2378568d191fd64a11a48df0771b99", "committedDate": "2020-07-21 16:48:36 +0200", "message": "TSK-1267: All TimeIntervalReports are now based on any TaskTimestamp"}, {"oid": "121a9c103fe9b04606635f8c132489504fe2d414", "committedDate": "2020-10-13 17:07:09 +0200", "message": "TSK-1407: adopted RestDocumentation tests to use taskana-common-test aswell"}, {"oid": "6dc782e37ac378b636daaef8d9134d17294845d2", "committedDate": "2020-10-30 01:36:27 +0100", "message": "TSK-1430: Rename Mapping to RestEndpoints, groups relevant endpoints together"}, {"oid": "8c6beb6e9601d9eb98e7299d3f7743bf721678d3", "committedDate": "2020-12-03 12:53:29 +0100", "message": "TSK-1239: All tests now working with Assertj instead of junit Assertion. (#1346)"}, {"oid": "3967e2900e8b35329b3675844ca3a8e059916c7e", "committedDate": "2020-12-18 11:29:10 +0100", "message": "TSK-1436: rest api documentation is now build with spring-auto-restdocs"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MzIwMQ==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422663201", "body": "please use `workbasketSummary`", "bodyText": "please use workbasketSummary", "bodyHTML": "<p dir=\"auto\">please use <code>workbasketSummary</code></p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:51:26Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java", "diffHunk": "@@ -145,10 +141,11 @@ void setUp() {\n               .description(\"Some custom Note\"),\n           fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n           fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-          subsectionWithPath(\"classificationSummaryResource\")\n-              .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n-          subsectionWithPath(\"workbasketSummaryResource\")\n-              .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n+          subsectionWithPath(\"classificationSummaryRepresentationModel\")\n+              .description(\n+                  taskFieldDescriptionsMap.get(\"classificationSummaryRepresentationModel\")),\n+          subsectionWithPath(\"workbasketSummaryRepresentationModel\")", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex 66e2340e4..a9ecfa5fe 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -133,29 +133,30 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n               .description(taskFieldDescriptionsMap.get(\"planned\"))\n               .type(\"String\"),\n           fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-          fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\"),\n-          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-          subsectionWithPath(\"classificationSummaryRepresentationModel\")\n-              .description(\n-                  taskFieldDescriptionsMap.get(\"classificationSummaryRepresentationModel\")),\n-          subsectionWithPath(\"workbasketSummaryRepresentationModel\")\n-              .description(taskFieldDescriptionsMap.get(\"workbasketSummaryRepresentationModel\")),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.company\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n+            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n+            fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n+            fieldWithPath(\"note\")\n+                .description(taskFieldDescriptionsMap.get(\"note\"))\n+                .description(\"Some custom Note\"),\n+            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n+            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n+            subsectionWithPath(\"classificationSummary\")\n+                .description(\n+                taskFieldDescriptionsMap.get(\"classificationSummary\")),\n+            subsectionWithPath(\"workbasketSummary\")\n+                .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n+            fieldWithPath(\"businessProcessId\")\n+                .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+            fieldWithPath(\"parentBusinessProcessId\")\n+                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n+            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\n+                \"String\"),\n+            fieldWithPath(\"primaryObjRef.id\")\n+                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+                .type(\"String\"),\n+            fieldWithPath(\"primaryObjRef.company\")\n+                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n           fieldWithPath(\"primaryObjRef.system\")\n               .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n           fieldWithPath(\"primaryObjRef.systemInstance\")\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex 66e2340e4..a9ecfa5fe 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -133,29 +133,30 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n               .description(taskFieldDescriptionsMap.get(\"planned\"))\n               .type(\"String\"),\n           fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-          fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\"),\n-          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-          subsectionWithPath(\"classificationSummaryRepresentationModel\")\n-              .description(\n-                  taskFieldDescriptionsMap.get(\"classificationSummaryRepresentationModel\")),\n-          subsectionWithPath(\"workbasketSummaryRepresentationModel\")\n-              .description(taskFieldDescriptionsMap.get(\"workbasketSummaryRepresentationModel\")),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.company\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n+            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n+            fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n+            fieldWithPath(\"note\")\n+                .description(taskFieldDescriptionsMap.get(\"note\"))\n+                .description(\"Some custom Note\"),\n+            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n+            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n+            subsectionWithPath(\"classificationSummary\")\n+                .description(\n+                taskFieldDescriptionsMap.get(\"classificationSummary\")),\n+            subsectionWithPath(\"workbasketSummary\")\n+                .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n+            fieldWithPath(\"businessProcessId\")\n+                .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+            fieldWithPath(\"parentBusinessProcessId\")\n+                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n+            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\n+                \"String\"),\n+            fieldWithPath(\"primaryObjRef.id\")\n+                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+                .type(\"String\"),\n+            fieldWithPath(\"primaryObjRef.company\")\n+                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n           fieldWithPath(\"primaryObjRef.system\")\n               .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n           fieldWithPath(\"primaryObjRef.systemInstance\")\n", "next_change": {"commit": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex a9ecfa5fe..3958c3e96 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -22,704 +22,455 @@ import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n \n import pro.taskana.rest.Mapping;\n \n-/** Generate REST Documentation for the TaskController. */\n+/**\n+ * Generate REST Documentation for the TaskController.\n+ */\n class TaskControllerRestDocumentation extends BaseRestDocumentation {\n \n-  private final HashMap<String, String> taskFieldDescriptionsMap = new HashMap<>();\n-\n-  private FieldDescriptor[] allTasksFieldDescriptors;\n-  private FieldDescriptor[] taskFieldDescriptors;\n-  private FieldDescriptor[] taskSubsetFieldDescriptors;\n-  private FieldDescriptor[] createTaskFieldDescriptors;\n-\n-  @BeforeEach\n-  void setUp() {\n-\n-    taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n-    taskFieldDescriptionsMap.put(\n-        \"externalId\",\n-        \"External ID. Can be used to enforce idempotence at task creation. \"\n-            + \"Can identify an external task.\");\n-    taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n-    taskFieldDescriptionsMap.put(\n-        \"claimed\", \"The timestamp of the last claim-operation on the task\");\n-    taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n-    taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n-    taskFieldDescriptionsMap.put(\n-        \"planned\",\n-        \"Planned start of the task. The actual completion of the task \"\n-            + \"should be between PLANNED and DUE.\");\n-    taskFieldDescriptionsMap.put(\n-        \"due\",\n-        \"Timestamp when the task is due. The actual completion of the task \"\n-            + \"should be between PLANNED and DUE.\");\n-    taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n-    taskFieldDescriptionsMap.put(\"creator\", \"\");\n-    taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n-    taskFieldDescriptionsMap.put(\"note\", \"note\");\n-    taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n-    taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n-    taskFieldDescriptionsMap.put(\n-        \"classificationSummary\",\n-        \"The <<classification-subset, Classification>> of the task\");\n-    taskFieldDescriptionsMap.put(\n-        \"workbasketSummary\",\n-        \"The <<workbasket-subset, Workbasket>> of the task\");\n-    taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n-    taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n-    taskFieldDescriptionsMap.put(\n-        \"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n-    taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.system\",\n-        \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.systemInstance\", \"The instance of the system, the object resides in.\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.type\", \"The type of the reference (contract, claim, policy, customer, ...)\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.value\", \"The value of the primary object reference\");\n-    taskFieldDescriptionsMap.put(\n-        \"customAttributes\",\n-        \"A container for all additional information on the task in JSON representation\");\n-    taskFieldDescriptionsMap.put(\n-        \"callbackInfo\",\n-        \"A container for all callback information of the task in JSON representation\");\n-    taskFieldDescriptionsMap.put(\"attachments\", \"\");\n-    taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n-    taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n-    taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n-\n-    allTasksFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n-          fieldWithPath(\"_links\").ignored(),\n-          fieldWithPath(\"_links.self\").ignored(),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n+    private HashMap<String, String> taskFieldDescriptionsMap = new HashMap<String, String>();\n+\n+    private FieldDescriptor[] allTasksFieldDescriptors;\n+    private FieldDescriptor[] taskFieldDescriptors;\n+    private FieldDescriptor[] taskSubsetFieldDescriptors;\n+    private FieldDescriptor[] createTaskFieldDescriptors;\n+\n+    @BeforeEach\n+    void setUp() {\n+\n+        taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n+        taskFieldDescriptionsMap.put(\"externalId\",\n+            \"External ID. Can be used to enforce idempotency at task creation. Can identify an external task.\");\n+        taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n+        taskFieldDescriptionsMap.put(\"claimed\", \"The timestamp of the last claim-operation on the task\");\n+        taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n+        taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n+        taskFieldDescriptionsMap.put(\"planned\",\n+            \"Planned start of the task. The actual completion of the task should be between PLANNED and DUE.\");\n+        taskFieldDescriptionsMap.put(\"due\",\n+            \"Timestamp when the task is due. The actual completion of the task should be between PLANNED and DUE.\");\n+        taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n+        taskFieldDescriptionsMap.put(\"creator\", \"\");\n+        taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n+        taskFieldDescriptionsMap.put(\"note\", \"note\");\n+        taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n+        taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n+        taskFieldDescriptionsMap.put(\"classificationSummaryResource\",\n+            \"The <<classification-subset, Classification>> of the task\");\n+        taskFieldDescriptionsMap.put(\"workbasketSummaryResource\", \"The <<workbasket-subset, Workbasket>> of the task\");\n+        taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n+        taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n+        taskFieldDescriptionsMap.put(\"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.system\",\n+            \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.systemInstance\",\n+            \"The instance of the system, the object resides in.\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.type\",\n+            \"The type of the reference (contract, claim, policy, customer, ...)\");\n+        taskFieldDescriptionsMap.put(\"primaryObjRef.value\", \"The value of the primary object reference\");\n+        taskFieldDescriptionsMap.put(\"customAttributes\",\n+            \"A container for all additional information on the task in JSON representation\");\n+        taskFieldDescriptionsMap.put(\"callbackInfo\",\n+            \"A container for all callback information of the task in JSON representation\");\n+        taskFieldDescriptionsMap.put(\"attachments\", \"\");\n+        taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n+        taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n+        taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n+        taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n+\n+        allTasksFieldDescriptors = new FieldDescriptor[] {\n+\n+            subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n+            fieldWithPath(\"_links\").ignored(),\n+            fieldWithPath(\"_links.self\").ignored(),\n+            fieldWithPath(\"_links.self.href\").ignored(),\n+            fieldWithPath(\"page\").ignored()\n         };\n \n-    taskFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"claimed\")\n-              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n+        taskFieldDescriptors = new FieldDescriptor[] {\n+\n+            fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n+            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n+            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n+            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")).type(\"String\"),\n+            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\"),\n+            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\"),\n+            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\"),\n+            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n             fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n             fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n             fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n-            fieldWithPath(\"note\")\n-                .description(taskFieldDescriptionsMap.get(\"note\"))\n-                .description(\"Some custom Note\"),\n+            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\")).description(\"Some custom Note\"),\n             fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n             fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-            subsectionWithPath(\"classificationSummary\")\n-                .description(\n-                taskFieldDescriptionsMap.get(\"classificationSummary\")),\n-            subsectionWithPath(\"workbasketSummary\")\n-                .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n-            fieldWithPath(\"businessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+            subsectionWithPath(\"classificationSummaryResource\")\n+                .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n+            subsectionWithPath(\"workbasketSummaryResource\")\n+                .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n+            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n             fieldWithPath(\"parentBusinessProcessId\")\n                 .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\n-                \"String\"),\n-            fieldWithPath(\"primaryObjRef.id\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n+            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n                 .type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.company\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-          fieldWithPath(\"customAttributes\")\n-              .description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n-          fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n-          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-          fieldWithPath(\"custom1\")\n-              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom2\")\n-              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom3\")\n-              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom4\")\n-              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom5\")\n-              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom6\")\n-              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom7\")\n-              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom8\")\n-              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom9\")\n-              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom10\")\n-              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom11\")\n-              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom12\")\n-              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom13\")\n-              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom14\")\n-              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom15\")\n-              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom16\")\n-              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"_links.self.href\").ignored()\n+            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+            fieldWithPath(\"primaryObjRef.systemInstance\")\n+                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n+            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n+            fieldWithPath(\"customAttributes\").description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n+            fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n+            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n+            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")).type(\"String\"),\n+            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")).type(\"String\"),\n+            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")).type(\"String\"),\n+            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")).type(\"String\"),\n+            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")).type(\"String\"),\n+            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")).type(\"String\"),\n+            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")).type(\"String\"),\n+            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")).type(\"String\"),\n+            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")).type(\"String\"),\n+            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")).type(\"String\"),\n+            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")).type(\"String\"),\n+            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")).type(\"String\"),\n+            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")).type(\"String\"),\n+            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")).type(\"String\"),\n+            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")).type(\"String\"),\n+            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")).type(\"String\"),\n+            fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-    taskSubsetFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n+        taskSubsetFieldDescriptors = new FieldDescriptor[] {\n+\n+            fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n+            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n+            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n+            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n+            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\"),\n+            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\"),\n+            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\"),\n+            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n             fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n             fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n             fieldWithPath(\"description\").ignored(),\n-            fieldWithPath(\"note\")\n-                .description(taskFieldDescriptionsMap.get(\"note\"))\n-                .description(\"Some custom Note\"),\n+            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\")).description(\"Some custom Note\"),\n             fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n             fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-            subsectionWithPath(\"classificationSummary\")\n-                .description(\n-                taskFieldDescriptionsMap.get(\"classificationSummary\")),\n-            subsectionWithPath(\"workbasketSummary\")\n-                .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n-            fieldWithPath(\"businessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+            subsectionWithPath(\"classificationSummaryResource\")\n+                .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n+            subsectionWithPath(\"workbasketSummaryResource\")\n+                .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n+            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n             fieldWithPath(\"parentBusinessProcessId\")\n                 .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n             fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")),\n-            fieldWithPath(\"primaryObjRef.id\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n                 .type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.company\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-          fieldWithPath(\"customAttributes\").ignored(),\n-          fieldWithPath(\"callbackInfo\").ignored(),\n-          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-          fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n-          fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n-          fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n-          fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n-          fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n-          fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n-          fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n-          fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n+            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+            fieldWithPath(\"primaryObjRef.systemInstance\")\n+                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n+            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n+            fieldWithPath(\"customAttributes\").ignored(),\n+            fieldWithPath(\"callbackInfo\").ignored(),\n+            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n+            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n+            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n+            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n+            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n+            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n+            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n+            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n+            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n+            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n+            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n+            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n+            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n+            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n+            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n+            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n+            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n+            fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-    createTaskFieldDescriptors =\n-        new FieldDescriptor[]{\n-            subsectionWithPath(\"classificationSummary\")\n-                .description(\"The new classificationSummary for the task\"),\n-            subsectionWithPath(\"workbasketSummary\")\n-                .description(\"The new workbasketSummary for the task\"),\n-            fieldWithPath(\"externalId\")\n-                .description(taskFieldDescriptionsMap.get(\"externalId\"))\n+        createTaskFieldDescriptors = new FieldDescriptor[] {\n+\n+            subsectionWithPath(\"classificationSummaryResource\")\n+                .description(\"The new classificationSummaryResource for the task\"),\n+            subsectionWithPath(\"workbasketSummaryResource\")\n+                .description(\"The new workbasketSummaryResource for the task\"),\n+            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\"))\n                 .type(\"String\")\n                 .optional(),\n-            fieldWithPath(\"primaryObjRef.company\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-            fieldWithPath(\"primaryObjRef.system\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n             fieldWithPath(\"primaryObjRef.systemInstance\")\n                 .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"created\")\n-              .description(taskFieldDescriptionsMap.get(\"created\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"claimed\")\n-              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"due\")\n-              .description(taskFieldDescriptionsMap.get(\"due\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"name\")\n-              .description(taskFieldDescriptionsMap.get(\"name\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"creator\")\n-              .description(taskFieldDescriptionsMap.get(\"creator\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"description\")\n-              .description(taskFieldDescriptionsMap.get(\"description\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\")\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"priority\")\n-              .description(taskFieldDescriptionsMap.get(\"priority\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"state\")\n-              .description(taskFieldDescriptionsMap.get(\"state\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"owner\")\n-              .description(taskFieldDescriptionsMap.get(\"owner\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"customAttributes\")\n-              .description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n-              .type(\"Object\")\n-              .optional(),\n-          fieldWithPath(\"callbackInfo\")\n-              .description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n-              .type(\"Object\")\n-              .optional(),\n-          fieldWithPath(\"attachments\")\n-              .description(taskFieldDescriptionsMap.get(\"attachments\"))\n-              .type(\"Array\")\n-              .optional(),\n-          fieldWithPath(\"custom1\")\n-              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom2\")\n-              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom3\")\n-              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom4\")\n-              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom5\")\n-              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom6\")\n-              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom7\")\n-              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom8\")\n-              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom9\")\n-              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom10\")\n-              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom11\")\n-              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom12\")\n-              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom13\")\n-              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom14\")\n-              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom15\")\n-              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom16\")\n-              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"read\")\n-              .description(taskFieldDescriptionsMap.get(\"read\"))\n-              .type(\"Boolean\")\n-              .optional(),\n-          fieldWithPath(\"transferred\")\n-              .description(taskFieldDescriptionsMap.get(\"transferred\"))\n-              .type(\"Boolean\")\n-              .optional()\n+            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")).type(\"String\").optional(),\n+            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")).type(\"String\").optional(),\n+            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\").optional(),\n+            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\").optional(),\n+            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\").optional(),\n+            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\").optional(),\n+            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")).type(\"String\").optional(),\n+            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")).type(\"String\").optional(),\n+            fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\"))\n+                .description(\"Some custom Note\")\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")).type(\"String\").optional(),\n+            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")).type(\"String\").optional(),\n+            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"parentBusinessProcessId\")\n+                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\").optional(),\n+            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"customAttributes\").description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n+                .type(\"Object\")\n+                .optional(),\n+            fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n+                .type(\"Object\")\n+                .optional(),\n+            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\"))\n+                .type(\"Array\")\n+                .optional(),\n+            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")).type(\"String\").optional(),\n+            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")).type(\"String\").optional(),\n+            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")).type(\"Boolean\").optional(),\n+            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\"))\n+                .type(\"Boolean\")\n+                .optional()\n         };\n-  }\n-\n-  @Test\n-  void getAllTasksDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(Mapping.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllTasksDocTest\", responseFields(allTasksFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void getSpecificTaskDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetSpecificTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void taskSubSetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"TaskSubset\", responseFields(taskSubsetFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void updateTaskDocTest() throws Exception {\n-    URL url =\n-        new URL(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    assertEquals(200, con.getResponseCode());\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuilder content = new StringBuilder();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n     }\n-    in.close();\n-    con.disconnect();\n-    String originalTask = content.toString();\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.put(\n-                    restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .contentType(\"application/json\")\n-                .content(originalTask))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"UpdateTaskDocTest\",\n+\n+    @Test\n+    void getAllTasksDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .get(restHelper.toUrl(Mapping.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"GetAllTasksDocTest\",\n+                responseFields(allTasksFieldDescriptors)));\n+    }\n+\n+    @Test\n+    void getSpecificTaskDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .get(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"GetSpecificTaskDocTest\",\n+                responseFields(taskFieldDescriptors)));\n+    }\n+\n+    @Test\n+    void taskSubSetDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .get(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"TaskSubset\",\n+                responseFields(taskSubsetFieldDescriptors)));\n+    }\n+\n+    @Test\n+    void updateTaskDocTest() throws Exception {\n+        URL url = new URL(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n+        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+        con.setRequestMethod(\"GET\");\n+        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+        assertEquals(200, con.getResponseCode());\n+\n+        BufferedReader in = new BufferedReader(\n+            new InputStreamReader(con.getInputStream()));\n+        String inputLine;\n+        StringBuilder content = new StringBuilder();\n+        while ((inputLine = in.readLine()) != null) {\n+            content.append(inputLine);\n+        }\n+        in.close();\n+        con.disconnect();\n+        String originalTask = content.toString();\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .put(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+            .contentType(\"application/json\")\n+            .content(originalTask))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"UpdateTaskDocTest\",\n                 requestFields(taskFieldDescriptors),\n                 responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void createAndDeleteTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"CreateTaskDocTest\",\n-                    requestFields(createTaskFieldDescriptors),\n-                    responseFields(taskFieldDescriptors)))\n-            .andReturn();\n+    }\n+\n+    @Test\n+    void createAndDeleteTaskDocTest() throws Exception {\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-  }\n-\n-  @Test\n-  void claimTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS))\n+            .contentType(\"application/hal+json\")\n+            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"temp\"))\n+            .andDo(MockMvcRestDocumentation.document(\"CreateTaskDocTest\",\n+                requestFields(createTaskFieldDescriptors),\n+                responseFields(taskFieldDescriptors)))\n             .andReturn();\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"ClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void cancelClaimTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        String content = result.getResponse().getContentAsString();\n+        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+            .andExpect(MockMvcResultMatchers.status().isNoContent())\n+            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+    }\n+\n+    @Test\n+    void claimTaskDocTest() throws Exception {\n+\n+        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS))\n+            .contentType(\"application/hal+json\")\n+            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n             .andDo(MockMvcRestDocumentation.document(\"temp\"))\n             .andReturn();\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"CancelClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void completeTaskDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        String content = result.getResponse().getContentAsString();\n+        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+            .content(\"{}\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"ClaimTaskDocTest\",\n+                responseFields(taskFieldDescriptors)));\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+            .andExpect(MockMvcResultMatchers.status().isNoContent())\n+            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+    }\n+\n+    @Test\n+    void completeTaskDocTest() throws Exception {\n+        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS))\n+            .contentType(\"application/hal+json\")\n+            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n             .andDo(MockMvcRestDocumentation.document(\"temp\"))\n             .andReturn();\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(Mapping.URL_TASKS_ID_COMPLETE, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"CompleteTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void transferTaskDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        String content = result.getResponse().getContentAsString();\n+        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_COMPLETE, newId))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+            .content(\"{}\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"CompleteTaskDocTest\",\n+                responseFields(taskFieldDescriptors)));\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+            .andExpect(MockMvcResultMatchers.status().isNoContent())\n+            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+    }\n+\n+    @Test\n+    void transferTaskDocTest() throws Exception {\n+        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS))\n+            .contentType(\"application/hal+json\")\n+            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)))\n+            .andDo(MockMvcRestDocumentation.document(\"TransferTaskDocTest\",\n+                responseFields(taskFieldDescriptors)))\n             .andReturn();\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID,\n-                        newId,\n-                        \"WBI:100000000000000000000000000000000001\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n+        String content = result.getResponse().getContentAsString();\n+        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID, newId,\n+                \"WBI:100000000000000000000000000000000001\"))\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"TransferTaskDocTest\",\n+                responseFields(taskFieldDescriptors)));\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+            .andExpect(MockMvcResultMatchers.status().isNoContent());\n+    }\n }\n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex 3958c3e96..ced9f6533 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -22,455 +21,671 @@ import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n \n import pro.taskana.rest.Mapping;\n \n-/**\n- * Generate REST Documentation for the TaskController.\n- */\n+/** Generate REST Documentation for the TaskController. */\n class TaskControllerRestDocumentation extends BaseRestDocumentation {\n \n-    private HashMap<String, String> taskFieldDescriptionsMap = new HashMap<String, String>();\n-\n-    private FieldDescriptor[] allTasksFieldDescriptors;\n-    private FieldDescriptor[] taskFieldDescriptors;\n-    private FieldDescriptor[] taskSubsetFieldDescriptors;\n-    private FieldDescriptor[] createTaskFieldDescriptors;\n-\n-    @BeforeEach\n-    void setUp() {\n-\n-        taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n-        taskFieldDescriptionsMap.put(\"externalId\",\n-            \"External ID. Can be used to enforce idempotency at task creation. Can identify an external task.\");\n-        taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n-        taskFieldDescriptionsMap.put(\"claimed\", \"The timestamp of the last claim-operation on the task\");\n-        taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n-        taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n-        taskFieldDescriptionsMap.put(\"planned\",\n-            \"Planned start of the task. The actual completion of the task should be between PLANNED and DUE.\");\n-        taskFieldDescriptionsMap.put(\"due\",\n-            \"Timestamp when the task is due. The actual completion of the task should be between PLANNED and DUE.\");\n-        taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n-        taskFieldDescriptionsMap.put(\"creator\", \"\");\n-        taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n-        taskFieldDescriptionsMap.put(\"note\", \"note\");\n-        taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n-        taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n-        taskFieldDescriptionsMap.put(\"classificationSummaryResource\",\n-            \"The <<classification-subset, Classification>> of the task\");\n-        taskFieldDescriptionsMap.put(\"workbasketSummaryResource\", \"The <<workbasket-subset, Workbasket>> of the task\");\n-        taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n-        taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n-        taskFieldDescriptionsMap.put(\"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.system\",\n-            \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.systemInstance\",\n-            \"The instance of the system, the object resides in.\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.type\",\n-            \"The type of the reference (contract, claim, policy, customer, ...)\");\n-        taskFieldDescriptionsMap.put(\"primaryObjRef.value\", \"The value of the primary object reference\");\n-        taskFieldDescriptionsMap.put(\"customAttributes\",\n-            \"A container for all additional information on the task in JSON representation\");\n-        taskFieldDescriptionsMap.put(\"callbackInfo\",\n-            \"A container for all callback information of the task in JSON representation\");\n-        taskFieldDescriptionsMap.put(\"attachments\", \"\");\n-        taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n-        taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n-        taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n-        taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n-\n-        allTasksFieldDescriptors = new FieldDescriptor[] {\n-\n-            subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n-            fieldWithPath(\"_links\").ignored(),\n-            fieldWithPath(\"_links.self\").ignored(),\n-            fieldWithPath(\"_links.self.href\").ignored(),\n-            fieldWithPath(\"page\").ignored()\n+  private HashMap<String, String> taskFieldDescriptionsMap = new HashMap<String, String>();\n+\n+  private FieldDescriptor[] allTasksFieldDescriptors;\n+  private FieldDescriptor[] taskFieldDescriptors;\n+  private FieldDescriptor[] taskSubsetFieldDescriptors;\n+  private FieldDescriptor[] createTaskFieldDescriptors;\n+\n+  @BeforeEach\n+  void setUp() {\n+\n+    taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n+    taskFieldDescriptionsMap.put(\n+        \"externalId\",\n+        \"External ID. Can be used to enforce idempotency at task creation. Can identify an external task.\");\n+    taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n+    taskFieldDescriptionsMap.put(\n+        \"claimed\", \"The timestamp of the last claim-operation on the task\");\n+    taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n+    taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n+    taskFieldDescriptionsMap.put(\n+        \"planned\",\n+        \"Planned start of the task. The actual completion of the task should be between PLANNED and DUE.\");\n+    taskFieldDescriptionsMap.put(\n+        \"due\",\n+        \"Timestamp when the task is due. The actual completion of the task should be between PLANNED and DUE.\");\n+    taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n+    taskFieldDescriptionsMap.put(\"creator\", \"\");\n+    taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n+    taskFieldDescriptionsMap.put(\"note\", \"note\");\n+    taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n+    taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n+    taskFieldDescriptionsMap.put(\n+        \"classificationSummaryResource\",\n+        \"The <<classification-subset, Classification>> of the task\");\n+    taskFieldDescriptionsMap.put(\n+        \"workbasketSummaryResource\", \"The <<workbasket-subset, Workbasket>> of the task\");\n+    taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n+    taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n+    taskFieldDescriptionsMap.put(\n+        \"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n+    taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.system\",\n+        \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.systemInstance\", \"The instance of the system, the object resides in.\");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.type\", \"The type of the reference (contract, claim, policy, customer, ...)\");\n+    taskFieldDescriptionsMap.put(\n+        \"primaryObjRef.value\", \"The value of the primary object reference\");\n+    taskFieldDescriptionsMap.put(\n+        \"customAttributes\",\n+        \"A container for all additional information on the task in JSON representation\");\n+    taskFieldDescriptionsMap.put(\n+        \"callbackInfo\",\n+        \"A container for all callback information of the task in JSON representation\");\n+    taskFieldDescriptionsMap.put(\"attachments\", \"\");\n+    taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n+    taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n+    taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n+    taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n+\n+    allTasksFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n+          fieldWithPath(\"_links\").ignored(),\n+          fieldWithPath(\"_links.self\").ignored(),\n+          fieldWithPath(\"_links.self.href\").ignored(),\n+          fieldWithPath(\"page\").ignored()\n         };\n \n-        taskFieldDescriptors = new FieldDescriptor[] {\n-\n-            fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")).type(\"String\"),\n-            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\"),\n-            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\"),\n-            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\"),\n-            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-            fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n-            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\")).description(\"Some custom Note\"),\n-            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-            subsectionWithPath(\"classificationSummaryResource\")\n-                .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n-            subsectionWithPath(\"workbasketSummaryResource\")\n-                .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n-            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-            fieldWithPath(\"parentBusinessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-                .type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-            fieldWithPath(\"primaryObjRef.systemInstance\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-            fieldWithPath(\"customAttributes\").description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n-            fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n-            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")).type(\"String\"),\n-            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")).type(\"String\"),\n-            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")).type(\"String\"),\n-            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")).type(\"String\"),\n-            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")).type(\"String\"),\n-            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")).type(\"String\"),\n-            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")).type(\"String\"),\n-            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")).type(\"String\"),\n-            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")).type(\"String\"),\n-            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")).type(\"String\"),\n-            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")).type(\"String\"),\n-            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")).type(\"String\"),\n-            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")).type(\"String\"),\n-            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")).type(\"String\"),\n-            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")).type(\"String\"),\n-            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")).type(\"String\"),\n-            fieldWithPath(\"_links.self.href\").ignored()\n+    taskFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n+          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n+          fieldWithPath(\"claimed\")\n+              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"completed\")\n+              .description(taskFieldDescriptionsMap.get(\"completed\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"modified\")\n+              .description(taskFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"planned\")\n+              .description(taskFieldDescriptionsMap.get(\"planned\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n+          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n+          fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n+          fieldWithPath(\"note\")\n+              .description(taskFieldDescriptionsMap.get(\"note\"))\n+              .description(\"Some custom Note\"),\n+          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n+          subsectionWithPath(\"classificationSummaryResource\")\n+              .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n+          subsectionWithPath(\"workbasketSummaryResource\")\n+              .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n+          fieldWithPath(\"businessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+          fieldWithPath(\"parentBusinessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n+          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n+          fieldWithPath(\"primaryObjRef.id\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"primaryObjRef.company\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+          fieldWithPath(\"primaryObjRef.system\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+          fieldWithPath(\"primaryObjRef.systemInstance\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+          fieldWithPath(\"primaryObjRef.type\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+          fieldWithPath(\"primaryObjRef.value\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n+          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n+          fieldWithPath(\"customAttributes\")\n+              .description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n+          fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n+          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n+          fieldWithPath(\"custom1\")\n+              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom2\")\n+              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom3\")\n+              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom4\")\n+              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom5\")\n+              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom6\")\n+              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom7\")\n+              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom8\")\n+              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom9\")\n+              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom10\")\n+              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom11\")\n+              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom12\")\n+              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom13\")\n+              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom14\")\n+              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom15\")\n+              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"custom16\")\n+              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-        taskSubsetFieldDescriptors = new FieldDescriptor[] {\n-\n-            fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n-            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\"),\n-            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\"),\n-            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\"),\n-            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-            fieldWithPath(\"description\").ignored(),\n-            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\")).description(\"Some custom Note\"),\n-            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-            subsectionWithPath(\"classificationSummaryResource\")\n-                .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n-            subsectionWithPath(\"workbasketSummaryResource\")\n-                .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n-            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-            fieldWithPath(\"parentBusinessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")),\n-            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-                .type(\"String\"),\n-            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-            fieldWithPath(\"primaryObjRef.systemInstance\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-            fieldWithPath(\"customAttributes\").ignored(),\n-            fieldWithPath(\"callbackInfo\").ignored(),\n-            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n-            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n-            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n-            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n-            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n-            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n-            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n-            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n-            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n-            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n-            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n-            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n-            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n-            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n-            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n-            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n-            fieldWithPath(\"_links.self.href\").ignored()\n+    taskSubsetFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n+          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n+          fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n+          fieldWithPath(\"completed\")\n+              .description(taskFieldDescriptionsMap.get(\"completed\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"modified\")\n+              .description(taskFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"planned\")\n+              .description(taskFieldDescriptionsMap.get(\"planned\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n+          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n+          fieldWithPath(\"description\").ignored(),\n+          fieldWithPath(\"note\")\n+              .description(taskFieldDescriptionsMap.get(\"note\"))\n+              .description(\"Some custom Note\"),\n+          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n+          subsectionWithPath(\"classificationSummaryResource\")\n+              .description(taskFieldDescriptionsMap.get(\"classificationSummaryResource\")),\n+          subsectionWithPath(\"workbasketSummaryResource\")\n+              .description(taskFieldDescriptionsMap.get(\"workbasketSummaryResource\")),\n+          fieldWithPath(\"businessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n+          fieldWithPath(\"parentBusinessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n+          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")),\n+          fieldWithPath(\"primaryObjRef.id\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"primaryObjRef.company\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+          fieldWithPath(\"primaryObjRef.system\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+          fieldWithPath(\"primaryObjRef.systemInstance\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+          fieldWithPath(\"primaryObjRef.type\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+          fieldWithPath(\"primaryObjRef.value\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n+          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n+          fieldWithPath(\"customAttributes\").ignored(),\n+          fieldWithPath(\"callbackInfo\").ignored(),\n+          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n+          fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n+          fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n+          fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n+          fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n+          fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n+          fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n+          fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n+          fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n+          fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n+          fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n+          fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n+          fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n+          fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n+          fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n+          fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n+          fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n+          fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-        createTaskFieldDescriptors = new FieldDescriptor[] {\n-\n-            subsectionWithPath(\"classificationSummaryResource\")\n-                .description(\"The new classificationSummaryResource for the task\"),\n-            subsectionWithPath(\"workbasketSummaryResource\")\n-                .description(\"The new workbasketSummaryResource for the task\"),\n-            fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"primaryObjRef.company\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-            fieldWithPath(\"primaryObjRef.system\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-            fieldWithPath(\"primaryObjRef.systemInstance\")\n-                .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-            fieldWithPath(\"primaryObjRef.type\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-            fieldWithPath(\"primaryObjRef.value\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-            fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")).type(\"String\").optional(),\n-            fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")).type(\"String\").optional(),\n-            fieldWithPath(\"completed\").description(taskFieldDescriptionsMap.get(\"completed\")).type(\"String\").optional(),\n-            fieldWithPath(\"modified\").description(taskFieldDescriptionsMap.get(\"modified\")).type(\"String\").optional(),\n-            fieldWithPath(\"planned\").description(taskFieldDescriptionsMap.get(\"planned\")).type(\"String\").optional(),\n-            fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\").optional(),\n-            fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")).type(\"String\").optional(),\n-            fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")).type(\"String\").optional(),\n-            fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"note\").description(taskFieldDescriptionsMap.get(\"note\"))\n-                .description(\"Some custom Note\")\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")).type(\"String\").optional(),\n-            fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")).type(\"String\").optional(),\n-            fieldWithPath(\"businessProcessId\").description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"parentBusinessProcessId\")\n-                .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\").optional(),\n-            fieldWithPath(\"primaryObjRef.id\").description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"customAttributes\").description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n-                .type(\"Object\")\n-                .optional(),\n-            fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n-                .type(\"Object\")\n-                .optional(),\n-            fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\"))\n-                .type(\"Array\")\n-                .optional(),\n-            fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")).type(\"String\").optional(),\n-            fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")).type(\"String\").optional(),\n-            fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")).type(\"Boolean\").optional(),\n-            fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\"))\n-                .type(\"Boolean\")\n-                .optional()\n+    createTaskFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"classificationSummaryResource\")\n+              .description(\"The new classificationSummaryResource for the task\"),\n+          subsectionWithPath(\"workbasketSummaryResource\")\n+              .description(\"The new workbasketSummaryResource for the task\"),\n+          fieldWithPath(\"externalId\")\n+              .description(taskFieldDescriptionsMap.get(\"externalId\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"primaryObjRef.company\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n+          fieldWithPath(\"primaryObjRef.system\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n+          fieldWithPath(\"primaryObjRef.systemInstance\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n+          fieldWithPath(\"primaryObjRef.type\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n+          fieldWithPath(\"primaryObjRef.value\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n+          fieldWithPath(\"created\")\n+              .description(taskFieldDescriptionsMap.get(\"created\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"claimed\")\n+              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"completed\")\n+              .description(taskFieldDescriptionsMap.get(\"completed\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"modified\")\n+              .description(taskFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"planned\")\n+              .description(taskFieldDescriptionsMap.get(\"planned\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"due\")\n+              .description(taskFieldDescriptionsMap.get(\"due\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"name\")\n+              .description(taskFieldDescriptionsMap.get(\"name\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"creator\")\n+              .description(taskFieldDescriptionsMap.get(\"creator\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"description\")\n+              .description(taskFieldDescriptionsMap.get(\"description\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"note\")\n+              .description(taskFieldDescriptionsMap.get(\"note\"))\n+              .description(\"Some custom Note\")\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"priority\")\n+              .description(taskFieldDescriptionsMap.get(\"priority\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"state\")\n+              .description(taskFieldDescriptionsMap.get(\"state\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"businessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"parentBusinessProcessId\")\n+              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"owner\")\n+              .description(taskFieldDescriptionsMap.get(\"owner\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"primaryObjRef.id\")\n+              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"customAttributes\")\n+              .description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n+              .type(\"Object\")\n+              .optional(),\n+          fieldWithPath(\"callbackInfo\")\n+              .description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n+              .type(\"Object\")\n+              .optional(),\n+          fieldWithPath(\"attachments\")\n+              .description(taskFieldDescriptionsMap.get(\"attachments\"))\n+              .type(\"Array\")\n+              .optional(),\n+          fieldWithPath(\"custom1\")\n+              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom2\")\n+              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom3\")\n+              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom4\")\n+              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom5\")\n+              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom6\")\n+              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom7\")\n+              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom8\")\n+              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom9\")\n+              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom10\")\n+              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom11\")\n+              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom12\")\n+              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom13\")\n+              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom14\")\n+              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom15\")\n+              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom16\")\n+              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"read\")\n+              .description(taskFieldDescriptionsMap.get(\"read\"))\n+              .type(\"Boolean\")\n+              .optional(),\n+          fieldWithPath(\"transferred\")\n+              .description(taskFieldDescriptionsMap.get(\"transferred\"))\n+              .type(\"Boolean\")\n+              .optional()\n         };\n+  }\n+\n+  @Test\n+  void getAllTasksDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(Mapping.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetAllTasksDocTest\", responseFields(allTasksFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void getSpecificTaskDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetSpecificTaskDocTest\", responseFields(taskFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void taskSubSetDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"TaskSubset\", responseFields(taskSubsetFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void updateTaskDocTest() throws Exception {\n+    URL url =\n+        new URL(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n+    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"GET\");\n+    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+    assertEquals(200, con.getResponseCode());\n+\n+    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n+    String inputLine;\n+    StringBuilder content = new StringBuilder();\n+    while ((inputLine = in.readLine()) != null) {\n+      content.append(inputLine);\n     }\n-\n-    @Test\n-    void getAllTasksDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .get(restHelper.toUrl(Mapping.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"GetAllTasksDocTest\",\n-                responseFields(allTasksFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void getSpecificTaskDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .get(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"GetSpecificTaskDocTest\",\n-                responseFields(taskFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void taskSubSetDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .get(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"TaskSubset\",\n-                responseFields(taskSubsetFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void updateTaskDocTest() throws Exception {\n-        URL url = new URL(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n-        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-        con.setRequestMethod(\"GET\");\n-        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-        assertEquals(200, con.getResponseCode());\n-\n-        BufferedReader in = new BufferedReader(\n-            new InputStreamReader(con.getInputStream()));\n-        String inputLine;\n-        StringBuilder content = new StringBuilder();\n-        while ((inputLine = in.readLine()) != null) {\n-            content.append(inputLine);\n-        }\n-        in.close();\n-        con.disconnect();\n-        String originalTask = content.toString();\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .put(restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-            .contentType(\"application/json\")\n-            .content(originalTask))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"UpdateTaskDocTest\",\n+    in.close();\n+    con.disconnect();\n+    String originalTask = content.toString();\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.put(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .contentType(\"application/json\")\n+                .content(originalTask))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"UpdateTaskDocTest\",\n                 requestFields(taskFieldDescriptors),\n                 responseFields(taskFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void createAndDeleteTaskDocTest() throws Exception {\n-\n-        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS))\n-            .contentType(\"application/hal+json\")\n-            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+  }\n+\n+  @Test\n+  void createAndDeleteTaskDocTest() throws Exception {\n+\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\n+                        \"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                            + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"CreateTaskDocTest\",\n-                requestFields(createTaskFieldDescriptors),\n-                responseFields(taskFieldDescriptors)))\n+            .andDo(\n+                MockMvcRestDocumentation.document(\n+                    \"CreateTaskDocTest\",\n+                    requestFields(createTaskFieldDescriptors),\n+                    responseFields(taskFieldDescriptors)))\n             .andReturn();\n \n-        String content = result.getResponse().getContentAsString();\n-        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-            .andExpect(MockMvcResultMatchers.status().isNoContent())\n-            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-    }\n-\n-    @Test\n-    void claimTaskDocTest() throws Exception {\n-\n-        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS))\n-            .contentType(\"application/hal+json\")\n-            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+        .andExpect(MockMvcResultMatchers.status().isNoContent())\n+        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+  }\n+\n+  @Test\n+  void claimTaskDocTest() throws Exception {\n+\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\n+                        \"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                            + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n             .andDo(MockMvcRestDocumentation.document(\"temp\"))\n             .andReturn();\n \n-        String content = result.getResponse().getContentAsString();\n-        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-            .content(\"{}\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"ClaimTaskDocTest\",\n-                responseFields(taskFieldDescriptors)));\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-            .andExpect(MockMvcResultMatchers.status().isNoContent())\n-            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-    }\n-\n-    @Test\n-    void completeTaskDocTest() throws Exception {\n-        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS))\n-            .contentType(\"application/hal+json\")\n-            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.post(\n+                    restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, newId))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .content(\"{}\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"ClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+        .andExpect(MockMvcResultMatchers.status().isNoContent())\n+        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+  }\n+\n+  @Test\n+  void completeTaskDocTest() throws Exception {\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\n+                        \"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                            + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n             .andDo(MockMvcRestDocumentation.document(\"temp\"))\n             .andReturn();\n \n-        String content = result.getResponse().getContentAsString();\n-        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_COMPLETE, newId))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-            .content(\"{}\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"CompleteTaskDocTest\",\n-                responseFields(taskFieldDescriptors)));\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-            .andExpect(MockMvcResultMatchers.status().isNoContent())\n-            .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-    }\n-\n-    @Test\n-    void transferTaskDocTest() throws Exception {\n-        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS))\n-            .contentType(\"application/hal+json\")\n-            .content(\"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.post(\n+                    restHelper.toUrl(Mapping.URL_TASKS_ID_COMPLETE, newId))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .content(\"{}\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"CompleteTaskDocTest\", responseFields(taskFieldDescriptors)));\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+        .andExpect(MockMvcResultMatchers.status().isNoContent())\n+        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n+  }\n+\n+  @Test\n+  void transferTaskDocTest() throws Exception {\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_TASKS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\n+                        \"{\\\"classificationSummaryResource\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n+                            + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"TransferTaskDocTest\",\n-                responseFields(taskFieldDescriptors)))\n+            .andDo(\n+                MockMvcRestDocumentation.document(\n+                    \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)))\n             .andReturn();\n \n-        String content = result.getResponse().getContentAsString();\n-        String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID, newId,\n-                \"WBI:100000000000000000000000000000000001\"))\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"TransferTaskDocTest\",\n-                responseFields(taskFieldDescriptors)));\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-            .andExpect(MockMvcResultMatchers.status().isNoContent());\n-    }\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.post(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID,\n+                        newId,\n+                        \"WBI:100000000000000000000000000000000001\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)));\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n+        .andExpect(MockMvcResultMatchers.status().isNoContent());\n+  }\n }\n", "next_change": {"commit": "d34a44a32ab6762e4f53bfa9ea4f85741db57728", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex ced9f6533..576cff190 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -681,11 +723,5 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n         .andDo(\n             MockMvcRestDocumentation.document(\n                 \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)));\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(restHelper.toUrl(Mapping.URL_TASKS_ID, newId))\n-                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-        .andExpect(MockMvcResultMatchers.status().isNoContent());\n   }\n }\n", "next_change": {"commit": "cc4efaa1cdd708366adea79d631b8aa5ccc013a8", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex 576cff190..b2b1234e5 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -718,7 +716,7 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n                         Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID,\n                         newId,\n                         \"WBI:100000000000000000000000000000000001\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+                .header(\"Authorization\", ADMIN_CREDENTIALS))\n         .andExpect(MockMvcResultMatchers.status().isOk())\n         .andDo(\n             MockMvcRestDocumentation.document(\n", "next_change": {"commit": "6dc782e37ac378b636daaef8d9134d17294845d2", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\nindex b2b1234e5..18275d49c 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n", "chunk": "@@ -713,7 +744,7 @@ class TaskControllerRestDocumentation extends BaseRestDocumentation {\n         .perform(\n             RestDocumentationRequestBuilders.post(\n                     restHelper.toUrl(\n-                        Mapping.URL_TASKS_ID_TRANSFER_WORKBASKETID,\n+                        RestEndpoints.URL_TASKS_ID_TRANSFER_WORKBASKET_ID,\n                         newId,\n                         \"WBI:100000000000000000000000000000000001\"))\n                 .header(\"Authorization\", ADMIN_CREDENTIALS))\n", "next_change": {"commit": "3967e2900e8b35329b3675844ca3a8e059916c7e", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\ndeleted file mode 100644\nindex 18275d49c..000000000\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskControllerRestDocumentation.java\n+++ /dev/null\n", "chunk": "@@ -1,756 +0,0 @@\n-package pro.taskana.doc.api;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-import static org.junit.Assert.assertEquals;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n-\n-import java.io.BufferedReader;\n-import java.io.InputStreamReader;\n-import java.net.HttpURLConnection;\n-import java.net.URL;\n-import java.util.HashMap;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n-import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n-import org.springframework.restdocs.payload.FieldDescriptor;\n-import org.springframework.test.web.servlet.MvcResult;\n-import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n-\n-import pro.taskana.common.rest.RestEndpoints;\n-import pro.taskana.common.test.doc.api.BaseRestDocumentation;\n-\n-/** Generate REST Documentation for the TaskController. */\n-class TaskControllerRestDocumentation extends BaseRestDocumentation {\n-\n-  private final HashMap<String, String> taskFieldDescriptionsMap = new HashMap<>();\n-\n-  private FieldDescriptor[] allTasksFieldDescriptors;\n-  private FieldDescriptor[] taskFieldDescriptors;\n-  private FieldDescriptor[] taskSubsetFieldDescriptors;\n-  private FieldDescriptor[] createTaskFieldDescriptors;\n-\n-  @BeforeEach\n-  void setUp() {\n-\n-    taskFieldDescriptionsMap.put(\"taskId\", \"Unique ID\");\n-    taskFieldDescriptionsMap.put(\n-        \"externalId\",\n-        \"External ID. Can be used to enforce idempotence at task creation. \"\n-            + \"Can identify an external task.\");\n-    taskFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the task in the system.\");\n-    taskFieldDescriptionsMap.put(\n-        \"claimed\", \"The timestamp of the last claim-operation on the task\");\n-    taskFieldDescriptionsMap.put(\"completed\", \"The timestamp of the completion of the task\");\n-    taskFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the task\");\n-    taskFieldDescriptionsMap.put(\n-        \"planned\",\n-        \"Planned start of the task. The actual completion of the task \"\n-            + \"should be between PLANNED and DUE.\");\n-    taskFieldDescriptionsMap.put(\n-        \"due\",\n-        \"Timestamp when the task is due. The actual completion of the task \"\n-            + \"should be between PLANNED and DUE.\");\n-    taskFieldDescriptionsMap.put(\"name\", \"The name of the task\");\n-    taskFieldDescriptionsMap.put(\"creator\", \"\");\n-    taskFieldDescriptionsMap.put(\"description\", \"The description of the task\");\n-    taskFieldDescriptionsMap.put(\"note\", \"note\");\n-    taskFieldDescriptionsMap.put(\"priority\", \"The priority of the task\");\n-    taskFieldDescriptionsMap.put(\"state\", \"he state of the task. See (...)\");\n-    taskFieldDescriptionsMap.put(\n-        \"classificationSummary\", \"The <<classification-subset, Classification>> of the task\");\n-    taskFieldDescriptionsMap.put(\n-        \"workbasketSummary\", \"The <<workbasket-subset, Workbasket>> of the task\");\n-    taskFieldDescriptionsMap.put(\"businessProcessId\", \"\");\n-    taskFieldDescriptionsMap.put(\"parentBusinessProcessId\", \"\");\n-    taskFieldDescriptionsMap.put(\n-        \"owner\", \"The owner of the tasks. The owner is set upon claiming of the task.\");\n-    taskFieldDescriptionsMap.put(\"primaryObjRef.id\", \"\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.company\", \"The company referenced primary object belongs to.\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.system\",\n-        \"The (kind of) system, the object resides in (e.g. SAP, MySystem A, ...) \");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.systemInstance\", \"The instance of the system, the object resides in.\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.type\", \"The type of the reference (contract, claim, policy, customer, ...)\");\n-    taskFieldDescriptionsMap.put(\n-        \"primaryObjRef.value\", \"The value of the primary object reference\");\n-    taskFieldDescriptionsMap.put(\n-        \"customAttributes\",\n-        \"A container for all additional information on the task in JSON representation\");\n-    taskFieldDescriptionsMap.put(\n-        \"callbackInfo\",\n-        \"A container for all callback information of the task in JSON representation\");\n-    taskFieldDescriptionsMap.put(\"attachments\", \"\");\n-    taskFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom9\", \"A custom property with name \\\"9\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom10\", \"A custom property with name \\\"10\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom11\", \"A custom property with name \\\"11\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom12\", \"A custom property with name \\\"12\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom13\", \"A custom property with name \\\"13\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom14\", \"A custom property with name \\\"14\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom15\", \"A custom property with name \\\"15\\\"\");\n-    taskFieldDescriptionsMap.put(\"custom16\", \"A custom property with name \\\"16\\\"\");\n-    taskFieldDescriptionsMap.put(\"read\", \"Indicator if the task has been read\");\n-    taskFieldDescriptionsMap.put(\"transferred\", \"Indicator if the task has been transferred\");\n-\n-    allTasksFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"tasks\").description(\"An Array of <<task-subset, Task-Subsets>>\"),\n-          fieldWithPath(\"_links\").ignored(),\n-          fieldWithPath(\"_links.self\").ignored(),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n-        };\n-\n-    taskFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"claimed\")\n-              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-          fieldWithPath(\"description\").description(taskFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\"),\n-          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-          subsectionWithPath(\"classificationSummary\")\n-              .description(taskFieldDescriptionsMap.get(\"classificationSummary\")),\n-          subsectionWithPath(\"workbasketSummary\")\n-              .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")).type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.company\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-          fieldWithPath(\"customAttributes\")\n-              .description(taskFieldDescriptionsMap.get(\"customAttributes\")),\n-          fieldWithPath(\"callbackInfo\").description(taskFieldDescriptionsMap.get(\"callbackInfo\")),\n-          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-          fieldWithPath(\"custom1\")\n-              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom2\")\n-              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom3\")\n-              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom4\")\n-              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom5\")\n-              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom6\")\n-              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom7\")\n-              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom8\")\n-              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom9\")\n-              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom10\")\n-              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom11\")\n-              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom12\")\n-              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom13\")\n-              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom14\")\n-              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom15\")\n-              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"custom16\")\n-              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    taskSubsetFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"taskId\").description(taskFieldDescriptionsMap.get(\"taskId\")),\n-          fieldWithPath(\"externalId\").description(taskFieldDescriptionsMap.get(\"externalId\")),\n-          fieldWithPath(\"created\").description(taskFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"claimed\").description(taskFieldDescriptionsMap.get(\"claimed\")),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"due\").description(taskFieldDescriptionsMap.get(\"due\")).type(\"String\"),\n-          fieldWithPath(\"name\").description(taskFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"creator\").description(taskFieldDescriptionsMap.get(\"creator\")),\n-          fieldWithPath(\"description\").ignored(),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\"),\n-          fieldWithPath(\"priority\").description(taskFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"state\").description(taskFieldDescriptionsMap.get(\"state\")),\n-          subsectionWithPath(\"classificationSummary\")\n-              .description(taskFieldDescriptionsMap.get(\"classificationSummary\")),\n-          subsectionWithPath(\"workbasketSummary\")\n-              .description(taskFieldDescriptionsMap.get(\"workbasketSummary\")),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\")),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\")),\n-          fieldWithPath(\"owner\").description(taskFieldDescriptionsMap.get(\"owner\")),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\"),\n-          fieldWithPath(\"primaryObjRef.company\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"read\").description(taskFieldDescriptionsMap.get(\"read\")),\n-          fieldWithPath(\"transferred\").description(taskFieldDescriptionsMap.get(\"transferred\")),\n-          fieldWithPath(\"customAttributes\").ignored(),\n-          fieldWithPath(\"callbackInfo\").ignored(),\n-          fieldWithPath(\"attachments\").description(taskFieldDescriptionsMap.get(\"attachments\")),\n-          fieldWithPath(\"custom1\").description(taskFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(taskFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(taskFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(taskFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(taskFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(taskFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(taskFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(taskFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"custom9\").description(taskFieldDescriptionsMap.get(\"custom9\")),\n-          fieldWithPath(\"custom10\").description(taskFieldDescriptionsMap.get(\"custom10\")),\n-          fieldWithPath(\"custom11\").description(taskFieldDescriptionsMap.get(\"custom11\")),\n-          fieldWithPath(\"custom12\").description(taskFieldDescriptionsMap.get(\"custom12\")),\n-          fieldWithPath(\"custom13\").description(taskFieldDescriptionsMap.get(\"custom13\")),\n-          fieldWithPath(\"custom14\").description(taskFieldDescriptionsMap.get(\"custom14\")),\n-          fieldWithPath(\"custom15\").description(taskFieldDescriptionsMap.get(\"custom15\")),\n-          fieldWithPath(\"custom16\").description(taskFieldDescriptionsMap.get(\"custom16\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    createTaskFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"classificationSummary\")\n-              .description(\"The new classificationSummary for the task\"),\n-          subsectionWithPath(\"workbasketSummary\")\n-              .description(\"The new workbasketSummary for the task\"),\n-          fieldWithPath(\"externalId\")\n-              .description(taskFieldDescriptionsMap.get(\"externalId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"primaryObjRef.company\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.company\")),\n-          fieldWithPath(\"primaryObjRef.system\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.system\")),\n-          fieldWithPath(\"primaryObjRef.systemInstance\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.systemInstance\")),\n-          fieldWithPath(\"primaryObjRef.type\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.type\")),\n-          fieldWithPath(\"primaryObjRef.value\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.value\")),\n-          fieldWithPath(\"created\")\n-              .description(taskFieldDescriptionsMap.get(\"created\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"claimed\")\n-              .description(taskFieldDescriptionsMap.get(\"claimed\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"completed\")\n-              .description(taskFieldDescriptionsMap.get(\"completed\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"modified\")\n-              .description(taskFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"planned\")\n-              .description(taskFieldDescriptionsMap.get(\"planned\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"due\")\n-              .description(taskFieldDescriptionsMap.get(\"due\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"name\")\n-              .description(taskFieldDescriptionsMap.get(\"name\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"creator\")\n-              .description(taskFieldDescriptionsMap.get(\"creator\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"description\")\n-              .description(taskFieldDescriptionsMap.get(\"description\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"note\")\n-              .description(taskFieldDescriptionsMap.get(\"note\"))\n-              .description(\"Some custom Note\")\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"priority\")\n-              .description(taskFieldDescriptionsMap.get(\"priority\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"state\")\n-              .description(taskFieldDescriptionsMap.get(\"state\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"businessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"businessProcessId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"parentBusinessProcessId\")\n-              .description(taskFieldDescriptionsMap.get(\"parentBusinessProcessId\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"owner\")\n-              .description(taskFieldDescriptionsMap.get(\"owner\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"primaryObjRef.id\")\n-              .description(taskFieldDescriptionsMap.get(\"primaryObjRef.id\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"customAttributes\")\n-              .description(taskFieldDescriptionsMap.get(\"customAttributes\"))\n-              .type(\"Object\")\n-              .optional(),\n-          fieldWithPath(\"callbackInfo\")\n-              .description(taskFieldDescriptionsMap.get(\"callbackInfo\"))\n-              .type(\"Object\")\n-              .optional(),\n-          fieldWithPath(\"attachments\")\n-              .description(taskFieldDescriptionsMap.get(\"attachments\"))\n-              .type(\"Array\")\n-              .optional(),\n-          fieldWithPath(\"custom1\")\n-              .description(taskFieldDescriptionsMap.get(\"custom1\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom2\")\n-              .description(taskFieldDescriptionsMap.get(\"custom2\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom3\")\n-              .description(taskFieldDescriptionsMap.get(\"custom3\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom4\")\n-              .description(taskFieldDescriptionsMap.get(\"custom4\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom5\")\n-              .description(taskFieldDescriptionsMap.get(\"custom5\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom6\")\n-              .description(taskFieldDescriptionsMap.get(\"custom6\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom7\")\n-              .description(taskFieldDescriptionsMap.get(\"custom7\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom8\")\n-              .description(taskFieldDescriptionsMap.get(\"custom8\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom9\")\n-              .description(taskFieldDescriptionsMap.get(\"custom9\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom10\")\n-              .description(taskFieldDescriptionsMap.get(\"custom10\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom11\")\n-              .description(taskFieldDescriptionsMap.get(\"custom11\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom12\")\n-              .description(taskFieldDescriptionsMap.get(\"custom12\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom13\")\n-              .description(taskFieldDescriptionsMap.get(\"custom13\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom14\")\n-              .description(taskFieldDescriptionsMap.get(\"custom14\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom15\")\n-              .description(taskFieldDescriptionsMap.get(\"custom15\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom16\")\n-              .description(taskFieldDescriptionsMap.get(\"custom16\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"read\")\n-              .description(taskFieldDescriptionsMap.get(\"read\"))\n-              .type(\"Boolean\")\n-              .optional(),\n-          fieldWithPath(\"transferred\")\n-              .description(taskFieldDescriptionsMap.get(\"transferred\"))\n-              .type(\"Boolean\")\n-              .optional()\n-        };\n-  }\n-\n-  @Test\n-  void getAllTasksDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS) + \"?por.type=VNR&por.value=22334455\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllTasksDocTest\", responseFields(allTasksFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void getSpecificTaskDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        RestEndpoints.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetSpecificTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void taskSubSetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        RestEndpoints.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"TaskSubset\", responseFields(taskSubsetFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void updateTaskDocTest() throws Exception {\n-    URL url =\n-        new URL(\n-            restHelper.toUrl(\n-                RestEndpoints.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", ADMIN_CREDENTIALS);\n-    assertEquals(200, con.getResponseCode());\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuilder content = new StringBuilder();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n-    }\n-    in.close();\n-    con.disconnect();\n-    String originalTask = content.toString();\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.put(\n-                    restHelper.toUrl(\n-                        RestEndpoints.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"))\n-                .header(\"Authorization\", ADMIN_CREDENTIALS)\n-                .contentType(\"application/json\")\n-                .content(originalTask))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"UpdateTaskDocTest\",\n-                requestFields(taskFieldDescriptors),\n-                responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void selectAndClaimTaskDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID_SELECT_AND_CLAIM) + \"?custom14=abc\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"SelectAndClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void createAndDeleteTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"CreateTaskDocTest\",\n-                    requestFields(createTaskFieldDescriptors),\n-                    responseFields(taskFieldDescriptors)))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID, newId))\n-                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")) // admin\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"DeleteTaskDocTest\"));\n-  }\n-\n-  @Test\n-  void deleteTasksDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS)\n-                        + \"?task-id=TKI:000000000000000000000000000000000036,\"\n-                        + \"TKI:000000000000000000000000000000000037,\"\n-                        + \"TKI:000000000000000000000000000000000038\"\n-                        + \"&custom14=abc\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"DeleteTasksDocTest\", responseFields(allTasksFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void claimTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"temp\"))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID_CLAIM, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS)\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"ClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void cancelClaimTaskDocTest() throws Exception {\n-\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"temp\"))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID_CLAIM, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS)\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"CancelClaimTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void completeTaskDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"temp\"))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(RestEndpoints.URL_TASKS_ID_COMPLETE, newId))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", ADMIN_CREDENTIALS)\n-                .content(\"{}\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"CompleteTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void transferTaskDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(RestEndpoints.URL_TASKS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\n-                        \"{\\\"classificationSummary\\\":{\\\"key\\\":\\\"L11010\\\"},\"\n-                            + \"\\\"workbasketSummary\\\":\"\n-                            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-                            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\"\n-                            + \"\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\"\n-                            + \"\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\")\n-                    .header(\"Authorization\", ADMIN_CREDENTIALS))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"TKI:\"), content.indexOf(\"TKI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(\n-                    restHelper.toUrl(\n-                        RestEndpoints.URL_TASKS_ID_TRANSFER_WORKBASKET_ID,\n-                        newId,\n-                        \"WBI:100000000000000000000000000000000001\"))\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"TransferTaskDocTest\", responseFields(taskFieldDescriptors)));\n-  }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "committedDate": "2019-12-04 09:56:34 +0100", "message": "TSK-967: Merge module taskana-rest-spring and taskana-rest-spring-test"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "7509bb0f1c7cfb9e8bcc634fbd3f80c0b74b5ca6", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: Fix simple checkstyle warnings"}, {"oid": "6a6dcb9c1e3984670c644f89c569eba3d20dcf3d", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Standardise paginated List behaviour and sub classes"}, {"oid": "4d560532bd98ef3dfe573c40c00506fcef21f912", "committedDate": "2020-01-23 14:23:56 +0100", "message": "TSK-987: Fix Spotbugs - reliance on default encoding"}, {"oid": "d34a44a32ab6762e4f53bfa9ea4f85741db57728", "committedDate": "2020-02-21 11:32:45 +0100", "message": "TSK-1137 Endpoint to cancel claim task for REST-API"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}, {"oid": "cc4efaa1cdd708366adea79d631b8aa5ccc013a8", "committedDate": "2020-06-05 20:03:15 +0200", "message": "TSK-1210: Replaced LoginModule with Embedded Spring LDAP"}, {"oid": "a2318c267ea7f6d57cfffefc04c5285e66778fac", "committedDate": "2020-06-12 12:31:55 +0200", "message": "reformatted code"}, {"oid": "1dfe54c0b6fb05c6811573e38feba9212fdb6a9f", "committedDate": "2020-06-30 14:50:26 +0200", "message": "TSK-1275: Support select and claim in one API call"}, {"oid": "4bba93c5a98dcbe22dc86144b12507abce4b2be4", "committedDate": "2020-07-10 13:13:42 +0200", "message": "Review findings"}, {"oid": "97443641af2378568d191fd64a11a48df0771b99", "committedDate": "2020-07-21 16:48:36 +0200", "message": "TSK-1267: All TimeIntervalReports are now based on any TaskTimestamp"}, {"oid": "121a9c103fe9b04606635f8c132489504fe2d414", "committedDate": "2020-10-13 17:07:09 +0200", "message": "TSK-1407: adopted RestDocumentation tests to use taskana-common-test aswell"}, {"oid": "6dc782e37ac378b636daaef8d9134d17294845d2", "committedDate": "2020-10-30 01:36:27 +0100", "message": "TSK-1430: Rename Mapping to RestEndpoints, groups relevant endpoints together"}, {"oid": "8c6beb6e9601d9eb98e7299d3f7743bf721678d3", "committedDate": "2020-12-03 12:53:29 +0100", "message": "TSK-1239: All tests now working with Assertj instead of junit Assertion. (#1346)"}, {"oid": "3967e2900e8b35329b3675844ca3a8e059916c7e", "committedDate": "2020-12-18 11:29:10 +0100", "message": "TSK-1436: rest api documentation is now build with spring-auto-restdocs"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MzMyOQ==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422663329", "body": "I am still not sure weather I like this change or not ..", "bodyText": "I am still not sure weather I like this change or not ..", "bodyHTML": "<p dir=\"auto\">I am still not sure weather I like this change or not ..</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:52:39Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java", "diffHunk": "@@ -72,55 +74,52 @@ void setUp() {\n         \"_links.removeDistributionTargets.href\",\n         \"Link to remove all distribution-targets from the workbasket\");\n     workbasketFieldDescriptionsMap.put(\n-        \"_links.accessItems.href\", \"The Access-Items of the workbasket\");\n+        \"_links.\" + PROPERTY_NAME + \".href\", \"The Access-Items of the workbasket\");", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MzM1Nw==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422663357", "bodyText": "Let's keep it for now", "author": "mustaphazorgati", "createdAt": "2020-05-10T15:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MzMyOQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java\nindex b853459ac..e8de1315a 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java\n", "chunk": "@@ -20,482 +20,386 @@ import org.springframework.restdocs.payload.FieldDescriptor;\n import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n \n import pro.taskana.rest.Mapping;\n-import pro.taskana.rest.resource.TaskanaPagedModelKeys;\n \n-/** Generate REST Documentatioon for the WorkbasketController. */\n+/**\n+ * Generate REST Documentatioon for the WorkbasketController.\n+ */\n class WorkbasketControllerRestDocumentation extends BaseRestDocumentation {\n \n-  public static final String PROPERTY_NAME = TaskanaPagedModelKeys.ACCESSITEMS.getPropertyName();\n-  // HashMaps to store the field descriptions centrally for multiple uses\n-  private final HashMap<String, String> workbasketFieldDescriptionsMap = new HashMap<>();\n-  private final HashMap<String, String> accessItemFieldDescriptionsMap = new HashMap<>();\n-\n-  private FieldDescriptor[] allWorkbasketsFieldDescriptors;\n-  private FieldDescriptor[] workbasketFieldDescriptors;\n-  private FieldDescriptor[] workbasketSubsetFieldDescriptors;\n-  private FieldDescriptor[] allWorkbasketAccessItemsFieldDescriptors;\n-  private FieldDescriptor[] accessItemFieldDescriptors;\n-  private FieldDescriptor[] allDistributionTargetsFieldDescriptors;\n-  private FieldDescriptor[] createWorkbasketFieldDescriptors;\n-\n-  @BeforeEach\n-  void setUp() {\n-\n-    workbasketFieldDescriptionsMap.put(\"workbasketId\", \"Unique ID\");\n-    workbasketFieldDescriptionsMap.put(\"key\", \"\");\n-    workbasketFieldDescriptionsMap.put(\"name\", \"The name of the workbasket\");\n-    workbasketFieldDescriptionsMap.put(\"domain\", \"\");\n-    workbasketFieldDescriptionsMap.put(\"type\", \"\");\n-    workbasketFieldDescriptionsMap.put(\"description\", \"The description of the workbasket\");\n-    workbasketFieldDescriptionsMap.put(\n-        \"owner\",\n-        \"The owner of the workbasket. The owner is responsible for the on-time completion \"\n-            + \"of all tasks in the workbasket.\");\n-    workbasketFieldDescriptionsMap.put(\n-        \"orgLevel1\",\n-        \"The first Org Level (the top one)\\nThe Org Level is an association with an org \"\n-            + \"hierarchie level in the organization. The values are used for monitoring \"\n-            + \"and statistical purposes and should reflect the responsibility of the \"\n-            + \"tasks in the workbasket.\");\n-    workbasketFieldDescriptionsMap.put(\"orgLevel2\", \"The second Org Level\");\n-    workbasketFieldDescriptionsMap.put(\"orgLevel3\", \"The third Org Level\");\n-    workbasketFieldDescriptionsMap.put(\"orgLevel4\", \"The fourth Org Level (the lowest one).\");\n-    workbasketFieldDescriptionsMap.put(\n-        \"created\", \"The creation timestamp of the workbasket in the system.\");\n-    workbasketFieldDescriptionsMap.put(\n-        \"modified\", \"Timestamp of the last modification of the workbasket\");\n-    workbasketFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-    workbasketFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-    workbasketFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-    workbasketFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-    workbasketFieldDescriptionsMap.put(\n-        \"_links.distributionTargets.href\", \"The Distribution-Targets of the workbasket\");\n-    workbasketFieldDescriptionsMap.put(\n-        \"_links.removeDistributionTargets.href\",\n-        \"Link to remove all distribution-targets from the workbasket\");\n-    workbasketFieldDescriptionsMap.put(\n-        \"_links.\" + PROPERTY_NAME + \".href\", \"The Access-Items of the workbasket\");\n-    workbasketFieldDescriptionsMap.put(\"_links.allWorkbaskets.href\", \"Link to all workbaskets\");\n-\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".accessItemId\", \"Unique ID\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".workbasketId\", \"The workbasket\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".workbasketKey\", \"The workbasket key\");\n-    accessItemFieldDescriptionsMap.put(\n-        PROPERTY_NAME + \".accessId\",\n-        \"The access id, this ACL entry refers to. This could be either a userid or a \"\n-            + \"full qualified group id (both lower case)\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".accessName\", \"\");\n-    accessItemFieldDescriptionsMap.put(\n-        PROPERTY_NAME + \".permRead\", \"The permission to read the information about the workbasket\");\n-    accessItemFieldDescriptionsMap.put(\n-        PROPERTY_NAME + \".permOpen\",\n-        \"The permission to view the content (the tasks) of a workbasket\");\n-    accessItemFieldDescriptionsMap.put(\n-        PROPERTY_NAME + \".permAppend\",\n-        \"The permission to add tasks to the workbasket (required for creation \"\n-            + \"and transferring of tasks)\");\n-    accessItemFieldDescriptionsMap.put(\n-        PROPERTY_NAME + \".permTransfer\",\n-        \"The permission to transfer tasks (out of the current workbasket)\");\n-    accessItemFieldDescriptionsMap.put(\n-        PROPERTY_NAME + \".permDistribute\",\n-        \"The permission to distribute tasks from the workbasket\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom1\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom2\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom3\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom4\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom5\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom6\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom7\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom8\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom9\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom10\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom11\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom12\", \"\");\n-    accessItemFieldDescriptionsMap.put(\n-        PROPERTY_NAME + \"._links.workbasket.href\", \"Link to the workbasket\");\n-\n-    allWorkbasketsFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"workbaskets\")\n-              .description(\"An Array of <<workbasket-subset, Workbasket-Subsets>>\"),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n+    // HashMaps to store the field descriptions centrally for multiple uses\n+    private HashMap<String, String> workbasketFieldDescriptionsMap = new HashMap<String, String>();\n+    private HashMap<String, String> accessItemFieldDescriptionsMap = new HashMap<String, String>();\n+\n+    private FieldDescriptor[] allWorkbasketsFieldDescriptors;\n+    private FieldDescriptor[] workbasketFieldDescriptors;\n+    private FieldDescriptor[] workbasketSubsetFieldDescriptors;\n+    private FieldDescriptor[] allWorkbasketAccessItemsFieldDescriptors;\n+    private FieldDescriptor[] accessItemFieldDescriptors;\n+    private FieldDescriptor[] allDistributionTargetsFieldDescriptors;\n+    private FieldDescriptor[] createWorkbasketFieldDescriptors;\n+\n+    @BeforeEach\n+    void setUp() {\n+\n+        workbasketFieldDescriptionsMap.put(\"workbasketId\", \"Unique ID\");\n+        workbasketFieldDescriptionsMap.put(\"key\", \"\");\n+        workbasketFieldDescriptionsMap.put(\"name\", \"The name of the workbasket\");\n+        workbasketFieldDescriptionsMap.put(\"domain\", \"\");\n+        workbasketFieldDescriptionsMap.put(\"type\", \"\");\n+        workbasketFieldDescriptionsMap.put(\"description\", \"The description of the workbasket\");\n+        workbasketFieldDescriptionsMap.put(\"owner\",\n+            \"The owner of the workbasket. The owner is responsible for the on-time completion of all tasks in the workbasket.\");\n+        workbasketFieldDescriptionsMap.put(\"orgLevel1\",\n+            \"The first Org Level (the top one)\\nThe Org Level is an association with an org hierarchie level in the organization. The values are used for monitoring and statistical purposes and should reflect the responsibility of the tasks in the workbasket.\");\n+        workbasketFieldDescriptionsMap.put(\"orgLevel2\", \"The second Org Level\");\n+        workbasketFieldDescriptionsMap.put(\"orgLevel3\", \"The third Org Level\");\n+        workbasketFieldDescriptionsMap.put(\"orgLevel4\", \"The fourth Org Level (the lowest one).\");\n+        workbasketFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the workbasket in the system.\");\n+        workbasketFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the workbasket\");\n+        workbasketFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n+        workbasketFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n+        workbasketFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n+        workbasketFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n+        workbasketFieldDescriptionsMap.put(\"_links.distributionTargets.href\",\n+            \"The Distribution-Targets of the workbasket\");\n+        workbasketFieldDescriptionsMap.put(\"_links.removeDistributionTargets.href\",\n+            \"Link to remove all distribution-targets from the workbasket\");\n+        workbasketFieldDescriptionsMap.put(\"_links.accessItems.href\", \"The Access-Items of the workbasket\");\n+        workbasketFieldDescriptionsMap.put(\"_links.allWorkbaskets.href\", \"Link to all workbaskets\");\n+\n+        accessItemFieldDescriptionsMap.put(\"accessItems.accessItemId\", \"Unique ID\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.workbasketId\", \"The workbasket\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.workbasketKey\", \"The workbasket key\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.accessId\",\n+            \"The access id, this ACL entry refers to. This could be either a userid or a full qualified group id (both lower case)\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.accessName\", \"\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.permRead\",\n+            \"The permission to read the information about the workbasket\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.permOpen\",\n+            \"The permission to view the content (the tasks) of a workbasket\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.permAppend\",\n+            \"The permission to add tasks to the workbasket (required for creation and transferring of tasks)\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.permTransfer\",\n+            \"The permission to transfer tasks (out of the current workbasket)\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.permDistribute\",\n+            \"The permission to distribute tasks from the workbasket\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom1\", \"\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom2\", \"\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom3\", \"\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom4\", \"\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom5\", \"\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom6\", \"\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom7\", \"\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom8\", \"\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom9\", \"\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom10\", \"\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom11\", \"\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom12\", \"\");\n+        accessItemFieldDescriptionsMap.put(\"accessItems._links.workbasket.href\", \"Link to the workbasket\");\n+\n+        allWorkbasketsFieldDescriptors = new FieldDescriptor[] {\n+\n+            subsectionWithPath(\"workbaskets\").description(\n+                \"An Array of <<workbasket-subset, Workbasket-Subsets>>\"),\n+            fieldWithPath(\"_links.self.href\").ignored(),\n+            fieldWithPath(\"page\").ignored()\n         };\n \n-    workbasketFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"workbasketId\")\n-              .description(workbasketFieldDescriptionsMap.get(\"workbasketId\")),\n-          fieldWithPath(\"key\").description(workbasketFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"created\").description(workbasketFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"modified\").description(workbasketFieldDescriptionsMap.get(\"modified\")),\n-          fieldWithPath(\"name\").description(workbasketFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"description\")\n-              .description(workbasketFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"owner\").description(workbasketFieldDescriptionsMap.get(\"owner\")),\n-          fieldWithPath(\"domain\").description(workbasketFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"type\").description(workbasketFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"custom1\").description(workbasketFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(workbasketFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(workbasketFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(workbasketFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"orgLevel1\").description(workbasketFieldDescriptionsMap.get(\"orgLevel1\")),\n-          fieldWithPath(\"orgLevel2\").description(workbasketFieldDescriptionsMap.get(\"orgLevel2\")),\n-          fieldWithPath(\"orgLevel3\").description(workbasketFieldDescriptionsMap.get(\"orgLevel3\")),\n-          fieldWithPath(\"orgLevel4\").description(workbasketFieldDescriptionsMap.get(\"orgLevel4\")),\n-          fieldWithPath(\"_links.distributionTargets.href\")\n-              .description(workbasketFieldDescriptionsMap.get(\"_links.distributionTargets.href\")),\n-          fieldWithPath(\"_links.removeDistributionTargets.href\")\n-              .description(\n-                  workbasketFieldDescriptionsMap.get(\"_links.removeDistributionTargets.href\")),\n-          fieldWithPath(\"_links.\" + PROPERTY_NAME + \".href\")\n-              .description(workbasketFieldDescriptionsMap.get(\"_links.\" + PROPERTY_NAME + \".href\")),\n-          fieldWithPath(\"_links.allWorkbaskets.href\")\n-              .description(workbasketFieldDescriptionsMap.get(\"_links.allWorkbaskets.href\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n+        workbasketFieldDescriptors = new FieldDescriptor[] {\n+\n+            fieldWithPath(\"workbasketId\").description(workbasketFieldDescriptionsMap.get(\"workbasketId\")),\n+            fieldWithPath(\"key\").description(workbasketFieldDescriptionsMap.get(\"key\")),\n+            fieldWithPath(\"created\").description(workbasketFieldDescriptionsMap.get(\"created\")),\n+            fieldWithPath(\"modified\").description(workbasketFieldDescriptionsMap.get(\"modified\")),\n+            fieldWithPath(\"name\").description(workbasketFieldDescriptionsMap.get(\"name\")),\n+            fieldWithPath(\"description\").description(workbasketFieldDescriptionsMap.get(\"description\")),\n+            fieldWithPath(\"owner\").description(workbasketFieldDescriptionsMap.get(\"owner\")),\n+            fieldWithPath(\"domain\").description(workbasketFieldDescriptionsMap.get(\"domain\")),\n+            fieldWithPath(\"type\").description(workbasketFieldDescriptionsMap.get(\"type\")),\n+            fieldWithPath(\"custom1\").description(workbasketFieldDescriptionsMap.get(\"custom1\")),\n+            fieldWithPath(\"custom2\").description(workbasketFieldDescriptionsMap.get(\"custom2\")),\n+            fieldWithPath(\"custom3\").description(workbasketFieldDescriptionsMap.get(\"custom3\")),\n+            fieldWithPath(\"custom4\").description(workbasketFieldDescriptionsMap.get(\"custom4\")),\n+            fieldWithPath(\"orgLevel1\").description(workbasketFieldDescriptionsMap.get(\"orgLevel1\")),\n+            fieldWithPath(\"orgLevel2\").description(workbasketFieldDescriptionsMap.get(\"orgLevel2\")),\n+            fieldWithPath(\"orgLevel3\").description(workbasketFieldDescriptionsMap.get(\"orgLevel3\")),\n+            fieldWithPath(\"orgLevel4\").description(workbasketFieldDescriptionsMap.get(\"orgLevel4\")),\n+            fieldWithPath(\"_links.distributionTargets.href\").description(\n+                workbasketFieldDescriptionsMap.get(\"_links.distributionTargets.href\")),\n+            fieldWithPath(\"_links.removeDistributionTargets.href\").description(\n+                workbasketFieldDescriptionsMap.get(\"_links.removeDistributionTargets.href\")),\n+            fieldWithPath(\"_links.accessItems.href\").description(\n+                workbasketFieldDescriptionsMap.get(\"_links.accessItems.href\")),\n+            fieldWithPath(\"_links.allWorkbaskets.href\").description(\n+                workbasketFieldDescriptionsMap.get(\"_links.allWorkbaskets.href\")),\n+            fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-    workbasketSubsetFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"workbasketId\")\n-              .description(workbasketFieldDescriptionsMap.get(\"workbasketId\")),\n-          fieldWithPath(\"key\").description(workbasketFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"name\").description(workbasketFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"description\")\n-              .description(workbasketFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"owner\").description(workbasketFieldDescriptionsMap.get(\"owner\")),\n-          fieldWithPath(\"domain\").description(workbasketFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"type\").description(workbasketFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"custom1\").description(workbasketFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(workbasketFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(workbasketFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(workbasketFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"orgLevel1\").description(workbasketFieldDescriptionsMap.get(\"orgLevel1\")),\n-          fieldWithPath(\"orgLevel2\").description(workbasketFieldDescriptionsMap.get(\"orgLevel2\")),\n-          fieldWithPath(\"orgLevel3\").description(workbasketFieldDescriptionsMap.get(\"orgLevel3\")),\n-          fieldWithPath(\"orgLevel4\").description(workbasketFieldDescriptionsMap.get(\"orgLevel4\")),\n-          fieldWithPath(\"created\").ignored(),\n-          fieldWithPath(\"modified\").ignored(),\n-          fieldWithPath(\"_links.distributionTargets.href\").ignored(),\n-          fieldWithPath(\"_links.removeDistributionTargets.href\").ignored(),\n-          fieldWithPath(\"_links.\" + PROPERTY_NAME + \".href\").ignored(),\n-          fieldWithPath(\"_links.allWorkbaskets.href\").ignored(),\n-          fieldWithPath(\"_links.self.href\").ignored()\n+        workbasketSubsetFieldDescriptors = new FieldDescriptor[] {\n+\n+            fieldWithPath(\"workbasketId\").description(workbasketFieldDescriptionsMap.get(\"workbasketId\")),\n+            fieldWithPath(\"key\").description(workbasketFieldDescriptionsMap.get(\"key\")),\n+            fieldWithPath(\"name\").description(workbasketFieldDescriptionsMap.get(\"name\")),\n+            fieldWithPath(\"description\").description(workbasketFieldDescriptionsMap.get(\"description\")),\n+            fieldWithPath(\"owner\").description(workbasketFieldDescriptionsMap.get(\"owner\")),\n+            fieldWithPath(\"domain\").description(workbasketFieldDescriptionsMap.get(\"domain\")),\n+            fieldWithPath(\"type\").description(workbasketFieldDescriptionsMap.get(\"type\")),\n+            fieldWithPath(\"custom1\").description(workbasketFieldDescriptionsMap.get(\"custom1\")),\n+            fieldWithPath(\"custom2\").description(workbasketFieldDescriptionsMap.get(\"custom2\")),\n+            fieldWithPath(\"custom3\").description(workbasketFieldDescriptionsMap.get(\"custom3\")),\n+            fieldWithPath(\"custom4\").description(workbasketFieldDescriptionsMap.get(\"custom4\")),\n+            fieldWithPath(\"orgLevel1\").description(workbasketFieldDescriptionsMap.get(\"orgLevel1\")),\n+            fieldWithPath(\"orgLevel2\").description(workbasketFieldDescriptionsMap.get(\"orgLevel2\")),\n+            fieldWithPath(\"orgLevel3\").description(workbasketFieldDescriptionsMap.get(\"orgLevel3\")),\n+            fieldWithPath(\"orgLevel4\").description(workbasketFieldDescriptionsMap.get(\"orgLevel4\")),\n+            fieldWithPath(\"created\").ignored(),\n+            fieldWithPath(\"modified\").ignored(),\n+            fieldWithPath(\"_links.distributionTargets.href\").ignored(),\n+            fieldWithPath(\"_links.removeDistributionTargets.href\").ignored(),\n+            fieldWithPath(\"_links.accessItems.href\").ignored(),\n+            fieldWithPath(\"_links.allWorkbaskets.href\").ignored(),\n+            fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-    accessItemFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(PROPERTY_NAME + \"[].accessItemId\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".accessItemId\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].workbasketId\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".workbasketId\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].workbasketKey\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".workbasketKey\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].accessId\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".accessId\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].accessName\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".accessName\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permRead\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permRead\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permOpen\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permOpen\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permAppend\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permAppend\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permTransfer\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permTransfer\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permDistribute\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permDistribute\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom1\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom1\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom2\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom2\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom3\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom3\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom4\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom4\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom5\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom5\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom6\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom6\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom7\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom7\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom8\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom8\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom9\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom9\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom10\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom10\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom11\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom11\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom12\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom12\")),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n-          fieldWithPath(\"_links.workbasket.href\").ignored()\n+        accessItemFieldDescriptors = new FieldDescriptor[] {\n+            fieldWithPath(\"accessItems[].accessItemId\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.accessItemId\")),\n+            fieldWithPath(\"accessItems[].workbasketId\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.workbasketId\")),\n+            fieldWithPath(\"accessItems[].workbasketKey\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.workbasketKey\")),\n+            fieldWithPath(\"accessItems[].accessId\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.accessId\")),\n+            fieldWithPath(\"accessItems[].accessName\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.accessName\")),\n+            fieldWithPath(\"accessItems[].permRead\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.permRead\")),\n+            fieldWithPath(\"accessItems[].permOpen\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.permOpen\")),\n+            fieldWithPath(\"accessItems[].permAppend\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.permAppend\")),\n+            fieldWithPath(\"accessItems[].permTransfer\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.permTransfer\")),\n+            fieldWithPath(\"accessItems[].permDistribute\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.permDistribute\")),\n+            fieldWithPath(\"accessItems[].permCustom1\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom1\")),\n+            fieldWithPath(\"accessItems[].permCustom2\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom2\")),\n+            fieldWithPath(\"accessItems[].permCustom3\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom3\")),\n+            fieldWithPath(\"accessItems[].permCustom4\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom4\")),\n+            fieldWithPath(\"accessItems[].permCustom5\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom5\")),\n+            fieldWithPath(\"accessItems[].permCustom6\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom6\")),\n+            fieldWithPath(\"accessItems[].permCustom7\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom7\")),\n+            fieldWithPath(\"accessItems[].permCustom8\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom8\")),\n+            fieldWithPath(\"accessItems[].permCustom9\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom9\")),\n+            fieldWithPath(\"accessItems[].permCustom10\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom10\")),\n+            fieldWithPath(\"accessItems[].permCustom11\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom11\")),\n+            fieldWithPath(\"accessItems[].permCustom12\").description(\n+                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom12\")),\n+            fieldWithPath(\"_links.self.href\").ignored(),\n+            fieldWithPath(\"_links.workbasket.href\").ignored()\n         };\n \n-    allWorkbasketAccessItemsFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(PROPERTY_NAME)\n-              .description(\"An array of <<access-item, Access Items>>\"),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n-          fieldWithPath(\"_links.workbasket.href\").ignored()\n+        allWorkbasketAccessItemsFieldDescriptors = new FieldDescriptor[] {\n+            subsectionWithPath(\"accessItems\").description(\"An array of <<access-item, Access Items>>\"),\n+            fieldWithPath(\"_links.self.href\").ignored(),\n+            fieldWithPath(\"_links.workbasket.href\").ignored()\n         };\n \n-    allDistributionTargetsFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"distributionTargets\")\n-              .description(\"An array of <<workbasket-subset, workbasket subsets>>\"),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n+        allDistributionTargetsFieldDescriptors = new FieldDescriptor[] {\n+            subsectionWithPath(\"distributionTargets\").description(\n+                \"An array of <<workbasket-subset, workbasket subsets>>\"),\n+            fieldWithPath(\"_links.self.href\").ignored(),\n+            fieldWithPath(\"_links.workbasket.href\").ignored()\n         };\n \n-    createWorkbasketFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"key\").description(workbasketFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"name\").description(workbasketFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"domain\").description(workbasketFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"type\").description(workbasketFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"description\")\n-              .description(workbasketFieldDescriptionsMap.get(\"description\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"owner\")\n-              .description(workbasketFieldDescriptionsMap.get(\"owner\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"orgLevel1\")\n-              .description(workbasketFieldDescriptionsMap.get(\"orgLevel1\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"orgLevel2\")\n-              .description(workbasketFieldDescriptionsMap.get(\"orgLevel2\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"orgLevel3\")\n-              .description(workbasketFieldDescriptionsMap.get(\"orgLevel3\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"orgLevel4\")\n-              .description(workbasketFieldDescriptionsMap.get(\"orgLevel4\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"created\")\n-              .description(workbasketFieldDescriptionsMap.get(\"created\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"modified\")\n-              .description(workbasketFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom1\")\n-              .description(workbasketFieldDescriptionsMap.get(\"custom1\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom2\")\n-              .description(workbasketFieldDescriptionsMap.get(\"custom2\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom3\")\n-              .description(workbasketFieldDescriptionsMap.get(\"custom3\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom4\")\n-              .description(workbasketFieldDescriptionsMap.get(\"custom4\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"_links.distributionTargets.href\")\n-              .description(workbasketFieldDescriptionsMap.get(\"_links.distributionTargets.href\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"_links.removeDistributionTargets.href\")\n-              .description(\n-                  workbasketFieldDescriptionsMap.get(\"_links.removeDistributionTargets.href\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"_links.\" + PROPERTY_NAME + \".href\")\n-              .description(workbasketFieldDescriptionsMap.get(\"_links.\" + PROPERTY_NAME + \".href\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"_links.allWorkbaskets.href\")\n-              .description(workbasketFieldDescriptionsMap.get(\"_links.allWorkbaskets.href\"))\n-              .type(\"String\")\n-              .optional()\n+        createWorkbasketFieldDescriptors = new FieldDescriptor[] {\n+            fieldWithPath(\"key\").description(workbasketFieldDescriptionsMap.get(\"key\")),\n+            fieldWithPath(\"name\").description(workbasketFieldDescriptionsMap.get(\"name\")),\n+            fieldWithPath(\"domain\").description(workbasketFieldDescriptionsMap.get(\"domain\")),\n+            fieldWithPath(\"type\").description(workbasketFieldDescriptionsMap.get(\"type\")),\n+            fieldWithPath(\"description\").description(workbasketFieldDescriptionsMap.get(\"description\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"owner\").description(workbasketFieldDescriptionsMap.get(\"owner\")).type(\"String\").optional(),\n+            fieldWithPath(\"orgLevel1\").description(workbasketFieldDescriptionsMap.get(\"orgLevel1\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"orgLevel2\").description(workbasketFieldDescriptionsMap.get(\"orgLevel2\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"orgLevel3\").description(workbasketFieldDescriptionsMap.get(\"orgLevel3\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"orgLevel4\").description(workbasketFieldDescriptionsMap.get(\"orgLevel4\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"created\").description(workbasketFieldDescriptionsMap.get(\"created\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"modified\").description(workbasketFieldDescriptionsMap.get(\"modified\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"custom1\").description(workbasketFieldDescriptionsMap.get(\"custom1\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"custom2\").description(workbasketFieldDescriptionsMap.get(\"custom2\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"custom3\").description(workbasketFieldDescriptionsMap.get(\"custom3\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"custom4\").description(workbasketFieldDescriptionsMap.get(\"custom4\"))\n+                .type(\"String\")\n+                .optional(),\n+            fieldWithPath(\"_links.distributionTargets.href\").description(\n+                workbasketFieldDescriptionsMap.get(\"_links.distributionTargets.href\")).type(\"String\").optional(),\n+            fieldWithPath(\"_links.removeDistributionTargets.href\").description(\n+                workbasketFieldDescriptionsMap.get(\"_links.removeDistributionTargets.href\")).type(\"String\").optional(),\n+            fieldWithPath(\"_links.accessItems.href\").description(\n+                workbasketFieldDescriptionsMap.get(\"_links.accessItems.href\")).type(\"String\").optional(),\n+            fieldWithPath(\"_links.allWorkbaskets.href\").description(\n+                workbasketFieldDescriptionsMap.get(\"_links.allWorkbaskets.href\")).type(\"String\").optional()\n         };\n-  }\n-\n-  @Test\n-  void getAllWorkbasketsDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(Mapping.URL_WORKBASKET) + \"?type=PERSONAL\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllWorkbasketsDocTest\", responseFields(allWorkbasketsFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void getSpecificWorkbasketDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000001\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetSpecificWorkbasketDocTest\", responseFields(workbasketFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void getAllWorkbasketAccessItemsDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_WORKBASKET_ID_ACCESSITEMS,\n-                        \"WBI:100000000000000000000000000000000001\"))\n+    }\n+\n+    @Test\n+    void getAllWorkbasketsDocTest() throws Exception {\n+        this.mockMvc.perform(\n+            RestDocumentationRequestBuilders.get(restHelper.toUrl(Mapping.URL_WORKBASKET) + \"?type=PERSONAL\")\n                 .accept(\"application/hal+json\")\n                 .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllWorkbasketAccessItemsDocTest\",\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"GetAllWorkbasketsDocTest\",\n+                responseFields(allWorkbasketsFieldDescriptors)));\n+    }\n+\n+    @Test\n+    void getSpecificWorkbasketDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders.get(\n+            restHelper.toUrl(Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000001\"))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"GetSpecificWorkbasketDocTest\",\n+                responseFields(workbasketFieldDescriptors)));\n+    }\n+\n+    @Test\n+    void getAllWorkbasketAccessItemsDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders.get(\n+            restHelper.toUrl(Mapping.URL_WORKBASKET_ID_ACCESSITEMS, \"WBI:100000000000000000000000000000000001\"))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"GetAllWorkbasketAccessItemsDocTest\",\n                 responseFields(allWorkbasketAccessItemsFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void workbasketSubsetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000001\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"WorkbasketSubset\", responseFields(workbasketSubsetFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void removeWorkbasketAsDistributionTargetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(\n-                        Mapping.URL_WORKBASKET_DISTRIBUTION_ID,\n-                        \"WBI:100000000000000000000000000000000007\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"RemoveWorkbasketAsDistributionTargetDocTest\"));\n-  }\n-\n-  @Test\n-  void getAllWorkbasketDistributionTargets() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_WORKBASKET_ID_DISTRIBUTION,\n-                        \"WBI:100000000000000000000000000000000002\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllWorkbasketDistributionTargets\",\n+    }\n+\n+    @Test\n+    void workbasketSubsetDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders.get(\n+            restHelper.toUrl(Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000001\"))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"WorkbasketSubset\",\n+                responseFields(workbasketSubsetFieldDescriptors)));\n+    }\n+\n+    @Test\n+    void removeWorkbasketAsDistributionTargetDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders.delete(\n+            restHelper.toUrl(Mapping.URL_WORKBASKET_DISTRIBUTION_ID, \"WBI:100000000000000000000000000000000007\"))\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isNoContent())\n+            .andDo(MockMvcRestDocumentation.document(\"RemoveWorkbasketAsDistributionTargetDocTest\"));\n+    }\n+\n+    @Test\n+    void getAllWorkbasketDistributionTargets() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders.get(\n+            restHelper.toUrl(Mapping.URL_WORKBASKET_ID_DISTRIBUTION, \"WBI:100000000000000000000000000000000002\"))\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"GetAllWorkbasketDistributionTargets\",\n                 responseFields(allDistributionTargetsFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void createWorkbasketDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_WORKBASKET))\n-                .contentType(\"application/json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .content(\n-                    \"{\\\"key\\\" : \\\"asdasdasd\\\", \\\"name\\\" : \\\"Gruppenpostkorb KSC\\\", \"\n-                        + \"\\\"domain\\\" : \\\"DOMAIN_A\\\", \\\"type\\\" : \\\"GROUP\\\",   \"\n-                        + \"\\\"created\\\" : \\\"2018-02-01T11:00:00Z\\\",\\r\\n\"\n-                        + \"  \\\"modified\\\" : \\\"2018-02-01T11:00:00Z\\\"}\"))\n-        .andExpect(MockMvcResultMatchers.status().isCreated())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"CreateWorkbasketDocTest\",\n+    }\n+\n+    @Test\n+    void createWorkbasketDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_WORKBASKET))\n+            .contentType(\"application/json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+            .content(\n+                \"{\\\"key\\\" : \\\"asdasdasd\\\", \\\"name\\\" : \\\"Gruppenpostkorb KSC\\\", \\\"domain\\\" : \\\"DOMAIN_A\\\", \\\"type\\\" : \\\"GROUP\\\",   \\\"created\\\" : \\\"2018-02-01T11:00:00Z\\\",\\r\\n\"\n+                    +\n+                    \"  \\\"modified\\\" : \\\"2018-02-01T11:00:00Z\\\"}\"))\n+            .andExpect(MockMvcResultMatchers.status().isCreated())\n+            .andDo(MockMvcRestDocumentation.document(\"CreateWorkbasketDocTest\",\n                 requestFields(createWorkbasketFieldDescriptors),\n                 responseFields(workbasketFieldDescriptors)))\n-        .andReturn();\n-  }\n-\n-  @Test\n-  void updateWorkbasketDocTest() throws Exception {\n-    URL url =\n-        new URL(\n-            restHelper.toUrl(\n-                Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000002\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\");\n-    assertEquals(200, con.getResponseCode());\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuffer content = new StringBuffer();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n+            .andReturn();\n     }\n-    in.close();\n-    con.disconnect();\n-    String originalWorkbasket = content.toString();\n-    String modifiedWorkbasket = originalWorkbasket;\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.put(\n-                    restHelper.toUrl(\n-                        Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000002\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .contentType(\"application/json\")\n-                .content(modifiedWorkbasket))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"UpdateWorkbasketDocTest\",\n+\n+    @Test\n+    void updateWorkbasketDocTest() throws Exception {\n+        URL url = new URL(restHelper.toUrl(Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000002\"));\n+        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+        con.setRequestMethod(\"GET\");\n+        con.setRequestProperty(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\");\n+        assertEquals(200, con.getResponseCode());\n+\n+        BufferedReader in = new BufferedReader(\n+            new InputStreamReader(con.getInputStream()));\n+        String inputLine;\n+        StringBuffer content = new StringBuffer();\n+        while ((inputLine = in.readLine()) != null) {\n+            content.append(inputLine);\n+        }\n+        in.close();\n+        con.disconnect();\n+        String originalWorkbasket = content.toString();\n+        String modifiedWorkbasket = new String(originalWorkbasket.toString());\n+\n+        this.mockMvc.perform(RestDocumentationRequestBuilders.put(\n+            restHelper.toUrl(Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000002\"))\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+            .contentType(\"application/json\")\n+            .content(modifiedWorkbasket))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"UpdateWorkbasketDocTest\",\n                 requestFields(workbasketFieldDescriptors),\n                 responseFields(workbasketFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void deleteWorkbasketDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(\n-                        Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000008\"))\n-                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\"))\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"DeleteWorkbasketDocTest\"));\n-  }\n-\n-  @Test\n-  void accessItemDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_WORKBASKET_ID_ACCESSITEMS,\n-                        \"WBI:100000000000000000000000000000000001\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"AccessItemsDocTest\", responseFields(accessItemFieldDescriptors)));\n-  }\n+    }\n+\n+    @Test\n+    void markWorkbasketForDeletionDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders.delete(\n+            restHelper.toUrl(Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000005\"))\n+            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\"))\n+            .andExpect(MockMvcResultMatchers.status().isAccepted())\n+            .andDo(MockMvcRestDocumentation.document(\"MarkWorkbasketForDeletionDocTest\"));\n+    }\n+\n+    @Test\n+    void accessItemDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders.get(\n+            restHelper.toUrl(Mapping.URL_WORKBASKET_ID_ACCESSITEMS, \"WBI:100000000000000000000000000000000001\"))\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"AccessItemsDocTest\",\n+                responseFields(accessItemFieldDescriptors)));\n+    }\n }\n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java\nindex e8de1315a..ab4bb117a 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java\n", "chunk": "@@ -21,385 +20,471 @@ import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n \n import pro.taskana.rest.Mapping;\n \n-/**\n- * Generate REST Documentatioon for the WorkbasketController.\n- */\n+/** Generate REST Documentatioon for the WorkbasketController. */\n class WorkbasketControllerRestDocumentation extends BaseRestDocumentation {\n \n-    // HashMaps to store the field descriptions centrally for multiple uses\n-    private HashMap<String, String> workbasketFieldDescriptionsMap = new HashMap<String, String>();\n-    private HashMap<String, String> accessItemFieldDescriptionsMap = new HashMap<String, String>();\n-\n-    private FieldDescriptor[] allWorkbasketsFieldDescriptors;\n-    private FieldDescriptor[] workbasketFieldDescriptors;\n-    private FieldDescriptor[] workbasketSubsetFieldDescriptors;\n-    private FieldDescriptor[] allWorkbasketAccessItemsFieldDescriptors;\n-    private FieldDescriptor[] accessItemFieldDescriptors;\n-    private FieldDescriptor[] allDistributionTargetsFieldDescriptors;\n-    private FieldDescriptor[] createWorkbasketFieldDescriptors;\n-\n-    @BeforeEach\n-    void setUp() {\n-\n-        workbasketFieldDescriptionsMap.put(\"workbasketId\", \"Unique ID\");\n-        workbasketFieldDescriptionsMap.put(\"key\", \"\");\n-        workbasketFieldDescriptionsMap.put(\"name\", \"The name of the workbasket\");\n-        workbasketFieldDescriptionsMap.put(\"domain\", \"\");\n-        workbasketFieldDescriptionsMap.put(\"type\", \"\");\n-        workbasketFieldDescriptionsMap.put(\"description\", \"The description of the workbasket\");\n-        workbasketFieldDescriptionsMap.put(\"owner\",\n-            \"The owner of the workbasket. The owner is responsible for the on-time completion of all tasks in the workbasket.\");\n-        workbasketFieldDescriptionsMap.put(\"orgLevel1\",\n-            \"The first Org Level (the top one)\\nThe Org Level is an association with an org hierarchie level in the organization. The values are used for monitoring and statistical purposes and should reflect the responsibility of the tasks in the workbasket.\");\n-        workbasketFieldDescriptionsMap.put(\"orgLevel2\", \"The second Org Level\");\n-        workbasketFieldDescriptionsMap.put(\"orgLevel3\", \"The third Org Level\");\n-        workbasketFieldDescriptionsMap.put(\"orgLevel4\", \"The fourth Org Level (the lowest one).\");\n-        workbasketFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the workbasket in the system.\");\n-        workbasketFieldDescriptionsMap.put(\"modified\", \"Timestamp of the last modification of the workbasket\");\n-        workbasketFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-        workbasketFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-        workbasketFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-        workbasketFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-        workbasketFieldDescriptionsMap.put(\"_links.distributionTargets.href\",\n-            \"The Distribution-Targets of the workbasket\");\n-        workbasketFieldDescriptionsMap.put(\"_links.removeDistributionTargets.href\",\n-            \"Link to remove all distribution-targets from the workbasket\");\n-        workbasketFieldDescriptionsMap.put(\"_links.accessItems.href\", \"The Access-Items of the workbasket\");\n-        workbasketFieldDescriptionsMap.put(\"_links.allWorkbaskets.href\", \"Link to all workbaskets\");\n-\n-        accessItemFieldDescriptionsMap.put(\"accessItems.accessItemId\", \"Unique ID\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.workbasketId\", \"The workbasket\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.workbasketKey\", \"The workbasket key\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.accessId\",\n-            \"The access id, this ACL entry refers to. This could be either a userid or a full qualified group id (both lower case)\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.accessName\", \"\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.permRead\",\n-            \"The permission to read the information about the workbasket\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.permOpen\",\n-            \"The permission to view the content (the tasks) of a workbasket\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.permAppend\",\n-            \"The permission to add tasks to the workbasket (required for creation and transferring of tasks)\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.permTransfer\",\n-            \"The permission to transfer tasks (out of the current workbasket)\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.permDistribute\",\n-            \"The permission to distribute tasks from the workbasket\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom1\", \"\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom2\", \"\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom3\", \"\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom4\", \"\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom5\", \"\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom6\", \"\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom7\", \"\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom8\", \"\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom9\", \"\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom10\", \"\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom11\", \"\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems.permCustom12\", \"\");\n-        accessItemFieldDescriptionsMap.put(\"accessItems._links.workbasket.href\", \"Link to the workbasket\");\n-\n-        allWorkbasketsFieldDescriptors = new FieldDescriptor[] {\n-\n-            subsectionWithPath(\"workbaskets\").description(\n-                \"An Array of <<workbasket-subset, Workbasket-Subsets>>\"),\n-            fieldWithPath(\"_links.self.href\").ignored(),\n-            fieldWithPath(\"page\").ignored()\n+  // HashMaps to store the field descriptions centrally for multiple uses\n+  private HashMap<String, String> workbasketFieldDescriptionsMap = new HashMap<String, String>();\n+  private HashMap<String, String> accessItemFieldDescriptionsMap = new HashMap<String, String>();\n+\n+  private FieldDescriptor[] allWorkbasketsFieldDescriptors;\n+  private FieldDescriptor[] workbasketFieldDescriptors;\n+  private FieldDescriptor[] workbasketSubsetFieldDescriptors;\n+  private FieldDescriptor[] allWorkbasketAccessItemsFieldDescriptors;\n+  private FieldDescriptor[] accessItemFieldDescriptors;\n+  private FieldDescriptor[] allDistributionTargetsFieldDescriptors;\n+  private FieldDescriptor[] createWorkbasketFieldDescriptors;\n+\n+  @BeforeEach\n+  void setUp() {\n+\n+    workbasketFieldDescriptionsMap.put(\"workbasketId\", \"Unique ID\");\n+    workbasketFieldDescriptionsMap.put(\"key\", \"\");\n+    workbasketFieldDescriptionsMap.put(\"name\", \"The name of the workbasket\");\n+    workbasketFieldDescriptionsMap.put(\"domain\", \"\");\n+    workbasketFieldDescriptionsMap.put(\"type\", \"\");\n+    workbasketFieldDescriptionsMap.put(\"description\", \"The description of the workbasket\");\n+    workbasketFieldDescriptionsMap.put(\n+        \"owner\",\n+        \"The owner of the workbasket. The owner is responsible for the on-time completion of all tasks in the workbasket.\");\n+    workbasketFieldDescriptionsMap.put(\n+        \"orgLevel1\",\n+        \"The first Org Level (the top one)\\nThe Org Level is an association with an org hierarchie level in the organization. The values are used for monitoring and statistical purposes and should reflect the responsibility of the tasks in the workbasket.\");\n+    workbasketFieldDescriptionsMap.put(\"orgLevel2\", \"The second Org Level\");\n+    workbasketFieldDescriptionsMap.put(\"orgLevel3\", \"The third Org Level\");\n+    workbasketFieldDescriptionsMap.put(\"orgLevel4\", \"The fourth Org Level (the lowest one).\");\n+    workbasketFieldDescriptionsMap.put(\n+        \"created\", \"The creation timestamp of the workbasket in the system.\");\n+    workbasketFieldDescriptionsMap.put(\n+        \"modified\", \"Timestamp of the last modification of the workbasket\");\n+    workbasketFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n+    workbasketFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n+    workbasketFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n+    workbasketFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n+    workbasketFieldDescriptionsMap.put(\n+        \"_links.distributionTargets.href\", \"The Distribution-Targets of the workbasket\");\n+    workbasketFieldDescriptionsMap.put(\n+        \"_links.removeDistributionTargets.href\",\n+        \"Link to remove all distribution-targets from the workbasket\");\n+    workbasketFieldDescriptionsMap.put(\n+        \"_links.accessItems.href\", \"The Access-Items of the workbasket\");\n+    workbasketFieldDescriptionsMap.put(\"_links.allWorkbaskets.href\", \"Link to all workbaskets\");\n+\n+    accessItemFieldDescriptionsMap.put(\"accessItems.accessItemId\", \"Unique ID\");\n+    accessItemFieldDescriptionsMap.put(\"accessItems.workbasketId\", \"The workbasket\");\n+    accessItemFieldDescriptionsMap.put(\"accessItems.workbasketKey\", \"The workbasket key\");\n+    accessItemFieldDescriptionsMap.put(\n+        \"accessItems.accessId\",\n+        \"The access id, this ACL entry refers to. This could be either a userid or a full qualified group id (both lower case)\");\n+    accessItemFieldDescriptionsMap.put(\"accessItems.accessName\", \"\");\n+    accessItemFieldDescriptionsMap.put(\n+        \"accessItems.permRead\", \"The permission to read the information about the workbasket\");\n+    accessItemFieldDescriptionsMap.put(\n+        \"accessItems.permOpen\", \"The permission to view the content (the tasks) of a workbasket\");\n+    accessItemFieldDescriptionsMap.put(\n+        \"accessItems.permAppend\",\n+        \"The permission to add tasks to the workbasket (required for creation and transferring of tasks)\");\n+    accessItemFieldDescriptionsMap.put(\n+        \"accessItems.permTransfer\",\n+        \"The permission to transfer tasks (out of the current workbasket)\");\n+    accessItemFieldDescriptionsMap.put(\n+        \"accessItems.permDistribute\", \"The permission to distribute tasks from the workbasket\");\n+    accessItemFieldDescriptionsMap.put(\"accessItems.permCustom1\", \"\");\n+    accessItemFieldDescriptionsMap.put(\"accessItems.permCustom2\", \"\");\n+    accessItemFieldDescriptionsMap.put(\"accessItems.permCustom3\", \"\");\n+    accessItemFieldDescriptionsMap.put(\"accessItems.permCustom4\", \"\");\n+    accessItemFieldDescriptionsMap.put(\"accessItems.permCustom5\", \"\");\n+    accessItemFieldDescriptionsMap.put(\"accessItems.permCustom6\", \"\");\n+    accessItemFieldDescriptionsMap.put(\"accessItems.permCustom7\", \"\");\n+    accessItemFieldDescriptionsMap.put(\"accessItems.permCustom8\", \"\");\n+    accessItemFieldDescriptionsMap.put(\"accessItems.permCustom9\", \"\");\n+    accessItemFieldDescriptionsMap.put(\"accessItems.permCustom10\", \"\");\n+    accessItemFieldDescriptionsMap.put(\"accessItems.permCustom11\", \"\");\n+    accessItemFieldDescriptionsMap.put(\"accessItems.permCustom12\", \"\");\n+    accessItemFieldDescriptionsMap.put(\n+        \"accessItems._links.workbasket.href\", \"Link to the workbasket\");\n+\n+    allWorkbasketsFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"workbaskets\")\n+              .description(\"An Array of <<workbasket-subset, Workbasket-Subsets>>\"),\n+          fieldWithPath(\"_links.self.href\").ignored(),\n+          fieldWithPath(\"page\").ignored()\n         };\n \n-        workbasketFieldDescriptors = new FieldDescriptor[] {\n-\n-            fieldWithPath(\"workbasketId\").description(workbasketFieldDescriptionsMap.get(\"workbasketId\")),\n-            fieldWithPath(\"key\").description(workbasketFieldDescriptionsMap.get(\"key\")),\n-            fieldWithPath(\"created\").description(workbasketFieldDescriptionsMap.get(\"created\")),\n-            fieldWithPath(\"modified\").description(workbasketFieldDescriptionsMap.get(\"modified\")),\n-            fieldWithPath(\"name\").description(workbasketFieldDescriptionsMap.get(\"name\")),\n-            fieldWithPath(\"description\").description(workbasketFieldDescriptionsMap.get(\"description\")),\n-            fieldWithPath(\"owner\").description(workbasketFieldDescriptionsMap.get(\"owner\")),\n-            fieldWithPath(\"domain\").description(workbasketFieldDescriptionsMap.get(\"domain\")),\n-            fieldWithPath(\"type\").description(workbasketFieldDescriptionsMap.get(\"type\")),\n-            fieldWithPath(\"custom1\").description(workbasketFieldDescriptionsMap.get(\"custom1\")),\n-            fieldWithPath(\"custom2\").description(workbasketFieldDescriptionsMap.get(\"custom2\")),\n-            fieldWithPath(\"custom3\").description(workbasketFieldDescriptionsMap.get(\"custom3\")),\n-            fieldWithPath(\"custom4\").description(workbasketFieldDescriptionsMap.get(\"custom4\")),\n-            fieldWithPath(\"orgLevel1\").description(workbasketFieldDescriptionsMap.get(\"orgLevel1\")),\n-            fieldWithPath(\"orgLevel2\").description(workbasketFieldDescriptionsMap.get(\"orgLevel2\")),\n-            fieldWithPath(\"orgLevel3\").description(workbasketFieldDescriptionsMap.get(\"orgLevel3\")),\n-            fieldWithPath(\"orgLevel4\").description(workbasketFieldDescriptionsMap.get(\"orgLevel4\")),\n-            fieldWithPath(\"_links.distributionTargets.href\").description(\n-                workbasketFieldDescriptionsMap.get(\"_links.distributionTargets.href\")),\n-            fieldWithPath(\"_links.removeDistributionTargets.href\").description(\n-                workbasketFieldDescriptionsMap.get(\"_links.removeDistributionTargets.href\")),\n-            fieldWithPath(\"_links.accessItems.href\").description(\n-                workbasketFieldDescriptionsMap.get(\"_links.accessItems.href\")),\n-            fieldWithPath(\"_links.allWorkbaskets.href\").description(\n-                workbasketFieldDescriptionsMap.get(\"_links.allWorkbaskets.href\")),\n-            fieldWithPath(\"_links.self.href\").ignored()\n+    workbasketFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"workbasketId\")\n+              .description(workbasketFieldDescriptionsMap.get(\"workbasketId\")),\n+          fieldWithPath(\"key\").description(workbasketFieldDescriptionsMap.get(\"key\")),\n+          fieldWithPath(\"created\").description(workbasketFieldDescriptionsMap.get(\"created\")),\n+          fieldWithPath(\"modified\").description(workbasketFieldDescriptionsMap.get(\"modified\")),\n+          fieldWithPath(\"name\").description(workbasketFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"description\")\n+              .description(workbasketFieldDescriptionsMap.get(\"description\")),\n+          fieldWithPath(\"owner\").description(workbasketFieldDescriptionsMap.get(\"owner\")),\n+          fieldWithPath(\"domain\").description(workbasketFieldDescriptionsMap.get(\"domain\")),\n+          fieldWithPath(\"type\").description(workbasketFieldDescriptionsMap.get(\"type\")),\n+          fieldWithPath(\"custom1\").description(workbasketFieldDescriptionsMap.get(\"custom1\")),\n+          fieldWithPath(\"custom2\").description(workbasketFieldDescriptionsMap.get(\"custom2\")),\n+          fieldWithPath(\"custom3\").description(workbasketFieldDescriptionsMap.get(\"custom3\")),\n+          fieldWithPath(\"custom4\").description(workbasketFieldDescriptionsMap.get(\"custom4\")),\n+          fieldWithPath(\"orgLevel1\").description(workbasketFieldDescriptionsMap.get(\"orgLevel1\")),\n+          fieldWithPath(\"orgLevel2\").description(workbasketFieldDescriptionsMap.get(\"orgLevel2\")),\n+          fieldWithPath(\"orgLevel3\").description(workbasketFieldDescriptionsMap.get(\"orgLevel3\")),\n+          fieldWithPath(\"orgLevel4\").description(workbasketFieldDescriptionsMap.get(\"orgLevel4\")),\n+          fieldWithPath(\"_links.distributionTargets.href\")\n+              .description(workbasketFieldDescriptionsMap.get(\"_links.distributionTargets.href\")),\n+          fieldWithPath(\"_links.removeDistributionTargets.href\")\n+              .description(\n+                  workbasketFieldDescriptionsMap.get(\"_links.removeDistributionTargets.href\")),\n+          fieldWithPath(\"_links.accessItems.href\")\n+              .description(workbasketFieldDescriptionsMap.get(\"_links.accessItems.href\")),\n+          fieldWithPath(\"_links.allWorkbaskets.href\")\n+              .description(workbasketFieldDescriptionsMap.get(\"_links.allWorkbaskets.href\")),\n+          fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-        workbasketSubsetFieldDescriptors = new FieldDescriptor[] {\n-\n-            fieldWithPath(\"workbasketId\").description(workbasketFieldDescriptionsMap.get(\"workbasketId\")),\n-            fieldWithPath(\"key\").description(workbasketFieldDescriptionsMap.get(\"key\")),\n-            fieldWithPath(\"name\").description(workbasketFieldDescriptionsMap.get(\"name\")),\n-            fieldWithPath(\"description\").description(workbasketFieldDescriptionsMap.get(\"description\")),\n-            fieldWithPath(\"owner\").description(workbasketFieldDescriptionsMap.get(\"owner\")),\n-            fieldWithPath(\"domain\").description(workbasketFieldDescriptionsMap.get(\"domain\")),\n-            fieldWithPath(\"type\").description(workbasketFieldDescriptionsMap.get(\"type\")),\n-            fieldWithPath(\"custom1\").description(workbasketFieldDescriptionsMap.get(\"custom1\")),\n-            fieldWithPath(\"custom2\").description(workbasketFieldDescriptionsMap.get(\"custom2\")),\n-            fieldWithPath(\"custom3\").description(workbasketFieldDescriptionsMap.get(\"custom3\")),\n-            fieldWithPath(\"custom4\").description(workbasketFieldDescriptionsMap.get(\"custom4\")),\n-            fieldWithPath(\"orgLevel1\").description(workbasketFieldDescriptionsMap.get(\"orgLevel1\")),\n-            fieldWithPath(\"orgLevel2\").description(workbasketFieldDescriptionsMap.get(\"orgLevel2\")),\n-            fieldWithPath(\"orgLevel3\").description(workbasketFieldDescriptionsMap.get(\"orgLevel3\")),\n-            fieldWithPath(\"orgLevel4\").description(workbasketFieldDescriptionsMap.get(\"orgLevel4\")),\n-            fieldWithPath(\"created\").ignored(),\n-            fieldWithPath(\"modified\").ignored(),\n-            fieldWithPath(\"_links.distributionTargets.href\").ignored(),\n-            fieldWithPath(\"_links.removeDistributionTargets.href\").ignored(),\n-            fieldWithPath(\"_links.accessItems.href\").ignored(),\n-            fieldWithPath(\"_links.allWorkbaskets.href\").ignored(),\n-            fieldWithPath(\"_links.self.href\").ignored()\n+    workbasketSubsetFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"workbasketId\")\n+              .description(workbasketFieldDescriptionsMap.get(\"workbasketId\")),\n+          fieldWithPath(\"key\").description(workbasketFieldDescriptionsMap.get(\"key\")),\n+          fieldWithPath(\"name\").description(workbasketFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"description\")\n+              .description(workbasketFieldDescriptionsMap.get(\"description\")),\n+          fieldWithPath(\"owner\").description(workbasketFieldDescriptionsMap.get(\"owner\")),\n+          fieldWithPath(\"domain\").description(workbasketFieldDescriptionsMap.get(\"domain\")),\n+          fieldWithPath(\"type\").description(workbasketFieldDescriptionsMap.get(\"type\")),\n+          fieldWithPath(\"custom1\").description(workbasketFieldDescriptionsMap.get(\"custom1\")),\n+          fieldWithPath(\"custom2\").description(workbasketFieldDescriptionsMap.get(\"custom2\")),\n+          fieldWithPath(\"custom3\").description(workbasketFieldDescriptionsMap.get(\"custom3\")),\n+          fieldWithPath(\"custom4\").description(workbasketFieldDescriptionsMap.get(\"custom4\")),\n+          fieldWithPath(\"orgLevel1\").description(workbasketFieldDescriptionsMap.get(\"orgLevel1\")),\n+          fieldWithPath(\"orgLevel2\").description(workbasketFieldDescriptionsMap.get(\"orgLevel2\")),\n+          fieldWithPath(\"orgLevel3\").description(workbasketFieldDescriptionsMap.get(\"orgLevel3\")),\n+          fieldWithPath(\"orgLevel4\").description(workbasketFieldDescriptionsMap.get(\"orgLevel4\")),\n+          fieldWithPath(\"created\").ignored(),\n+          fieldWithPath(\"modified\").ignored(),\n+          fieldWithPath(\"_links.distributionTargets.href\").ignored(),\n+          fieldWithPath(\"_links.removeDistributionTargets.href\").ignored(),\n+          fieldWithPath(\"_links.accessItems.href\").ignored(),\n+          fieldWithPath(\"_links.allWorkbaskets.href\").ignored(),\n+          fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-        accessItemFieldDescriptors = new FieldDescriptor[] {\n-            fieldWithPath(\"accessItems[].accessItemId\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.accessItemId\")),\n-            fieldWithPath(\"accessItems[].workbasketId\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.workbasketId\")),\n-            fieldWithPath(\"accessItems[].workbasketKey\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.workbasketKey\")),\n-            fieldWithPath(\"accessItems[].accessId\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.accessId\")),\n-            fieldWithPath(\"accessItems[].accessName\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.accessName\")),\n-            fieldWithPath(\"accessItems[].permRead\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.permRead\")),\n-            fieldWithPath(\"accessItems[].permOpen\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.permOpen\")),\n-            fieldWithPath(\"accessItems[].permAppend\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.permAppend\")),\n-            fieldWithPath(\"accessItems[].permTransfer\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.permTransfer\")),\n-            fieldWithPath(\"accessItems[].permDistribute\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.permDistribute\")),\n-            fieldWithPath(\"accessItems[].permCustom1\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom1\")),\n-            fieldWithPath(\"accessItems[].permCustom2\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom2\")),\n-            fieldWithPath(\"accessItems[].permCustom3\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom3\")),\n-            fieldWithPath(\"accessItems[].permCustom4\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom4\")),\n-            fieldWithPath(\"accessItems[].permCustom5\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom5\")),\n-            fieldWithPath(\"accessItems[].permCustom6\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom6\")),\n-            fieldWithPath(\"accessItems[].permCustom7\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom7\")),\n-            fieldWithPath(\"accessItems[].permCustom8\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom8\")),\n-            fieldWithPath(\"accessItems[].permCustom9\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom9\")),\n-            fieldWithPath(\"accessItems[].permCustom10\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom10\")),\n-            fieldWithPath(\"accessItems[].permCustom11\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom11\")),\n-            fieldWithPath(\"accessItems[].permCustom12\").description(\n-                accessItemFieldDescriptionsMap.get(\"accessItems.permCustom12\")),\n-            fieldWithPath(\"_links.self.href\").ignored(),\n-            fieldWithPath(\"_links.workbasket.href\").ignored()\n+    accessItemFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"accessItems[].accessItemId\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.accessItemId\")),\n+          fieldWithPath(\"accessItems[].workbasketId\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.workbasketId\")),\n+          fieldWithPath(\"accessItems[].workbasketKey\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.workbasketKey\")),\n+          fieldWithPath(\"accessItems[].accessId\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.accessId\")),\n+          fieldWithPath(\"accessItems[].accessName\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.accessName\")),\n+          fieldWithPath(\"accessItems[].permRead\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.permRead\")),\n+          fieldWithPath(\"accessItems[].permOpen\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.permOpen\")),\n+          fieldWithPath(\"accessItems[].permAppend\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.permAppend\")),\n+          fieldWithPath(\"accessItems[].permTransfer\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.permTransfer\")),\n+          fieldWithPath(\"accessItems[].permDistribute\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.permDistribute\")),\n+          fieldWithPath(\"accessItems[].permCustom1\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.permCustom1\")),\n+          fieldWithPath(\"accessItems[].permCustom2\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.permCustom2\")),\n+          fieldWithPath(\"accessItems[].permCustom3\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.permCustom3\")),\n+          fieldWithPath(\"accessItems[].permCustom4\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.permCustom4\")),\n+          fieldWithPath(\"accessItems[].permCustom5\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.permCustom5\")),\n+          fieldWithPath(\"accessItems[].permCustom6\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.permCustom6\")),\n+          fieldWithPath(\"accessItems[].permCustom7\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.permCustom7\")),\n+          fieldWithPath(\"accessItems[].permCustom8\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.permCustom8\")),\n+          fieldWithPath(\"accessItems[].permCustom9\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.permCustom9\")),\n+          fieldWithPath(\"accessItems[].permCustom10\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.permCustom10\")),\n+          fieldWithPath(\"accessItems[].permCustom11\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.permCustom11\")),\n+          fieldWithPath(\"accessItems[].permCustom12\")\n+              .description(accessItemFieldDescriptionsMap.get(\"accessItems.permCustom12\")),\n+          fieldWithPath(\"_links.self.href\").ignored(),\n+          fieldWithPath(\"_links.workbasket.href\").ignored()\n         };\n \n-        allWorkbasketAccessItemsFieldDescriptors = new FieldDescriptor[] {\n-            subsectionWithPath(\"accessItems\").description(\"An array of <<access-item, Access Items>>\"),\n-            fieldWithPath(\"_links.self.href\").ignored(),\n-            fieldWithPath(\"_links.workbasket.href\").ignored()\n+    allWorkbasketAccessItemsFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"accessItems\")\n+              .description(\"An array of <<access-item, Access Items>>\"),\n+          fieldWithPath(\"_links.self.href\").ignored(),\n+          fieldWithPath(\"_links.workbasket.href\").ignored()\n         };\n \n-        allDistributionTargetsFieldDescriptors = new FieldDescriptor[] {\n-            subsectionWithPath(\"distributionTargets\").description(\n-                \"An array of <<workbasket-subset, workbasket subsets>>\"),\n-            fieldWithPath(\"_links.self.href\").ignored(),\n-            fieldWithPath(\"_links.workbasket.href\").ignored()\n+    allDistributionTargetsFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"distributionTargets\")\n+              .description(\"An array of <<workbasket-subset, workbasket subsets>>\"),\n+          fieldWithPath(\"_links.self.href\").ignored(),\n+          fieldWithPath(\"_links.workbasket.href\").ignored()\n         };\n \n-        createWorkbasketFieldDescriptors = new FieldDescriptor[] {\n-            fieldWithPath(\"key\").description(workbasketFieldDescriptionsMap.get(\"key\")),\n-            fieldWithPath(\"name\").description(workbasketFieldDescriptionsMap.get(\"name\")),\n-            fieldWithPath(\"domain\").description(workbasketFieldDescriptionsMap.get(\"domain\")),\n-            fieldWithPath(\"type\").description(workbasketFieldDescriptionsMap.get(\"type\")),\n-            fieldWithPath(\"description\").description(workbasketFieldDescriptionsMap.get(\"description\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"owner\").description(workbasketFieldDescriptionsMap.get(\"owner\")).type(\"String\").optional(),\n-            fieldWithPath(\"orgLevel1\").description(workbasketFieldDescriptionsMap.get(\"orgLevel1\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"orgLevel2\").description(workbasketFieldDescriptionsMap.get(\"orgLevel2\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"orgLevel3\").description(workbasketFieldDescriptionsMap.get(\"orgLevel3\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"orgLevel4\").description(workbasketFieldDescriptionsMap.get(\"orgLevel4\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"created\").description(workbasketFieldDescriptionsMap.get(\"created\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"modified\").description(workbasketFieldDescriptionsMap.get(\"modified\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"custom1\").description(workbasketFieldDescriptionsMap.get(\"custom1\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"custom2\").description(workbasketFieldDescriptionsMap.get(\"custom2\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"custom3\").description(workbasketFieldDescriptionsMap.get(\"custom3\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"custom4\").description(workbasketFieldDescriptionsMap.get(\"custom4\"))\n-                .type(\"String\")\n-                .optional(),\n-            fieldWithPath(\"_links.distributionTargets.href\").description(\n-                workbasketFieldDescriptionsMap.get(\"_links.distributionTargets.href\")).type(\"String\").optional(),\n-            fieldWithPath(\"_links.removeDistributionTargets.href\").description(\n-                workbasketFieldDescriptionsMap.get(\"_links.removeDistributionTargets.href\")).type(\"String\").optional(),\n-            fieldWithPath(\"_links.accessItems.href\").description(\n-                workbasketFieldDescriptionsMap.get(\"_links.accessItems.href\")).type(\"String\").optional(),\n-            fieldWithPath(\"_links.allWorkbaskets.href\").description(\n-                workbasketFieldDescriptionsMap.get(\"_links.allWorkbaskets.href\")).type(\"String\").optional()\n+    createWorkbasketFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"key\").description(workbasketFieldDescriptionsMap.get(\"key\")),\n+          fieldWithPath(\"name\").description(workbasketFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"domain\").description(workbasketFieldDescriptionsMap.get(\"domain\")),\n+          fieldWithPath(\"type\").description(workbasketFieldDescriptionsMap.get(\"type\")),\n+          fieldWithPath(\"description\")\n+              .description(workbasketFieldDescriptionsMap.get(\"description\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"owner\")\n+              .description(workbasketFieldDescriptionsMap.get(\"owner\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"orgLevel1\")\n+              .description(workbasketFieldDescriptionsMap.get(\"orgLevel1\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"orgLevel2\")\n+              .description(workbasketFieldDescriptionsMap.get(\"orgLevel2\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"orgLevel3\")\n+              .description(workbasketFieldDescriptionsMap.get(\"orgLevel3\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"orgLevel4\")\n+              .description(workbasketFieldDescriptionsMap.get(\"orgLevel4\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"created\")\n+              .description(workbasketFieldDescriptionsMap.get(\"created\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"modified\")\n+              .description(workbasketFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom1\")\n+              .description(workbasketFieldDescriptionsMap.get(\"custom1\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom2\")\n+              .description(workbasketFieldDescriptionsMap.get(\"custom2\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom3\")\n+              .description(workbasketFieldDescriptionsMap.get(\"custom3\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"custom4\")\n+              .description(workbasketFieldDescriptionsMap.get(\"custom4\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"_links.distributionTargets.href\")\n+              .description(workbasketFieldDescriptionsMap.get(\"_links.distributionTargets.href\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"_links.removeDistributionTargets.href\")\n+              .description(\n+                  workbasketFieldDescriptionsMap.get(\"_links.removeDistributionTargets.href\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"_links.accessItems.href\")\n+              .description(workbasketFieldDescriptionsMap.get(\"_links.accessItems.href\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"_links.allWorkbaskets.href\")\n+              .description(workbasketFieldDescriptionsMap.get(\"_links.allWorkbaskets.href\"))\n+              .type(\"String\")\n+              .optional()\n         };\n-    }\n-\n-    @Test\n-    void getAllWorkbasketsDocTest() throws Exception {\n-        this.mockMvc.perform(\n-            RestDocumentationRequestBuilders.get(restHelper.toUrl(Mapping.URL_WORKBASKET) + \"?type=PERSONAL\")\n+  }\n+\n+  @Test\n+  void getAllWorkbasketsDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(Mapping.URL_WORKBASKET) + \"?type=PERSONAL\")\n                 .accept(\"application/hal+json\")\n                 .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"GetAllWorkbasketsDocTest\",\n-                responseFields(allWorkbasketsFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void getSpecificWorkbasketDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders.get(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000001\"))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"GetSpecificWorkbasketDocTest\",\n-                responseFields(workbasketFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void getAllWorkbasketAccessItemsDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders.get(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET_ID_ACCESSITEMS, \"WBI:100000000000000000000000000000000001\"))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"GetAllWorkbasketAccessItemsDocTest\",\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetAllWorkbasketsDocTest\", responseFields(allWorkbasketsFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void getSpecificWorkbasketDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000001\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetSpecificWorkbasketDocTest\", responseFields(workbasketFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void getAllWorkbasketAccessItemsDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_WORKBASKET_ID_ACCESSITEMS,\n+                        \"WBI:100000000000000000000000000000000001\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetAllWorkbasketAccessItemsDocTest\",\n                 responseFields(allWorkbasketAccessItemsFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void workbasketSubsetDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders.get(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000001\"))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"WorkbasketSubset\",\n-                responseFields(workbasketSubsetFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void removeWorkbasketAsDistributionTargetDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders.delete(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET_DISTRIBUTION_ID, \"WBI:100000000000000000000000000000000007\"))\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isNoContent())\n-            .andDo(MockMvcRestDocumentation.document(\"RemoveWorkbasketAsDistributionTargetDocTest\"));\n-    }\n-\n-    @Test\n-    void getAllWorkbasketDistributionTargets() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders.get(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET_ID_DISTRIBUTION, \"WBI:100000000000000000000000000000000002\"))\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"GetAllWorkbasketDistributionTargets\",\n+  }\n+\n+  @Test\n+  void workbasketSubsetDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000001\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"WorkbasketSubset\", responseFields(workbasketSubsetFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void removeWorkbasketAsDistributionTargetDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(\n+                    restHelper.toUrl(\n+                        Mapping.URL_WORKBASKET_DISTRIBUTION_ID,\n+                        \"WBI:100000000000000000000000000000000007\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isNoContent())\n+        .andDo(MockMvcRestDocumentation.document(\"RemoveWorkbasketAsDistributionTargetDocTest\"));\n+  }\n+\n+  @Test\n+  void getAllWorkbasketDistributionTargets() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_WORKBASKET_ID_DISTRIBUTION,\n+                        \"WBI:100000000000000000000000000000000002\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetAllWorkbasketDistributionTargets\",\n                 responseFields(allDistributionTargetsFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void createWorkbasketDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_WORKBASKET))\n-            .contentType(\"application/json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-            .content(\n-                \"{\\\"key\\\" : \\\"asdasdasd\\\", \\\"name\\\" : \\\"Gruppenpostkorb KSC\\\", \\\"domain\\\" : \\\"DOMAIN_A\\\", \\\"type\\\" : \\\"GROUP\\\",   \\\"created\\\" : \\\"2018-02-01T11:00:00Z\\\",\\r\\n\"\n-                    +\n-                    \"  \\\"modified\\\" : \\\"2018-02-01T11:00:00Z\\\"}\"))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"CreateWorkbasketDocTest\",\n+  }\n+\n+  @Test\n+  void createWorkbasketDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_WORKBASKET))\n+                .contentType(\"application/json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .content(\n+                    \"{\\\"key\\\" : \\\"asdasdasd\\\", \\\"name\\\" : \\\"Gruppenpostkorb KSC\\\", \\\"domain\\\" : \\\"DOMAIN_A\\\", \\\"type\\\" : \\\"GROUP\\\",   \\\"created\\\" : \\\"2018-02-01T11:00:00Z\\\",\\r\\n\"\n+                        + \"  \\\"modified\\\" : \\\"2018-02-01T11:00:00Z\\\"}\"))\n+        .andExpect(MockMvcResultMatchers.status().isCreated())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"CreateWorkbasketDocTest\",\n                 requestFields(createWorkbasketFieldDescriptors),\n                 responseFields(workbasketFieldDescriptors)))\n-            .andReturn();\n+        .andReturn();\n+  }\n+\n+  @Test\n+  void updateWorkbasketDocTest() throws Exception {\n+    URL url =\n+        new URL(\n+            restHelper.toUrl(\n+                Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000002\"));\n+    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"GET\");\n+    con.setRequestProperty(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\");\n+    assertEquals(200, con.getResponseCode());\n+\n+    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n+    String inputLine;\n+    StringBuffer content = new StringBuffer();\n+    while ((inputLine = in.readLine()) != null) {\n+      content.append(inputLine);\n     }\n-\n-    @Test\n-    void updateWorkbasketDocTest() throws Exception {\n-        URL url = new URL(restHelper.toUrl(Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000002\"));\n-        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-        con.setRequestMethod(\"GET\");\n-        con.setRequestProperty(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\");\n-        assertEquals(200, con.getResponseCode());\n-\n-        BufferedReader in = new BufferedReader(\n-            new InputStreamReader(con.getInputStream()));\n-        String inputLine;\n-        StringBuffer content = new StringBuffer();\n-        while ((inputLine = in.readLine()) != null) {\n-            content.append(inputLine);\n-        }\n-        in.close();\n-        con.disconnect();\n-        String originalWorkbasket = content.toString();\n-        String modifiedWorkbasket = new String(originalWorkbasket.toString());\n-\n-        this.mockMvc.perform(RestDocumentationRequestBuilders.put(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000002\"))\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-            .contentType(\"application/json\")\n-            .content(modifiedWorkbasket))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"UpdateWorkbasketDocTest\",\n+    in.close();\n+    con.disconnect();\n+    String originalWorkbasket = content.toString();\n+    String modifiedWorkbasket = new String(originalWorkbasket.toString());\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.put(\n+                    restHelper.toUrl(\n+                        Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000002\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .contentType(\"application/json\")\n+                .content(modifiedWorkbasket))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"UpdateWorkbasketDocTest\",\n                 requestFields(workbasketFieldDescriptors),\n                 responseFields(workbasketFieldDescriptors)));\n-    }\n-\n-    @Test\n-    void markWorkbasketForDeletionDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders.delete(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000005\"))\n-            .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\"))\n-            .andExpect(MockMvcResultMatchers.status().isAccepted())\n-            .andDo(MockMvcRestDocumentation.document(\"MarkWorkbasketForDeletionDocTest\"));\n-    }\n-\n-    @Test\n-    void accessItemDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders.get(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET_ID_ACCESSITEMS, \"WBI:100000000000000000000000000000000001\"))\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"AccessItemsDocTest\",\n-                responseFields(accessItemFieldDescriptors)));\n-    }\n+  }\n+\n+  @Test\n+  void markWorkbasketForDeletionDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(\n+                    restHelper.toUrl(\n+                        Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000005\"))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\"))\n+        .andExpect(MockMvcResultMatchers.status().isAccepted())\n+        .andDo(MockMvcRestDocumentation.document(\"MarkWorkbasketForDeletionDocTest\"));\n+  }\n+\n+  @Test\n+  void accessItemDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_WORKBASKET_ID_ACCESSITEMS,\n+                        \"WBI:100000000000000000000000000000000001\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"AccessItemsDocTest\", responseFields(accessItemFieldDescriptors)));\n+  }\n }\n", "next_change": {"commit": "cc4efaa1cdd708366adea79d631b8aa5ccc013a8", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java\nindex ab4bb117a..3519151a5 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java\n", "chunk": "@@ -481,7 +498,7 @@ class WorkbasketControllerRestDocumentation extends BaseRestDocumentation {\n                         Mapping.URL_WORKBASKET_ID_ACCESSITEMS,\n                         \"WBI:100000000000000000000000000000000001\"))\n                 .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+                .header(\"Authorization\", TEAMLEAD_1_CREDENTIALS))\n         .andExpect(MockMvcResultMatchers.status().isOk())\n         .andDo(\n             MockMvcRestDocumentation.document(\n", "next_change": {"commit": "5030415f17763f79d88a8348666b4bb58627bc21", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java\nindex 3519151a5..62048512e 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java\n", "chunk": "@@ -500,6 +509,8 @@ class WorkbasketControllerRestDocumentation extends BaseRestDocumentation {\n                 .accept(\"application/hal+json\")\n                 .header(\"Authorization\", TEAMLEAD_1_CREDENTIALS))\n         .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andExpect(MockMvcResultMatchers.jsonPath(\"_links.self.href\",\n+            is(\"http://localhost:8080/api/v1/workbaskets/WBI:100000000000000000000000000000000001/workbasketAccessItems\")))\n         .andDo(\n             MockMvcRestDocumentation.document(\n                 \"AccessItemsDocTest\", responseFields(accessItemFieldDescriptors)));\n", "next_change": {"commit": "3849ee385f2861c3bb58cc4cb4499f3cd1aaf87c", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java\nindex 62048512e..5046eaf87 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java\n", "chunk": "@@ -509,8 +522,11 @@ class WorkbasketControllerRestDocumentation extends BaseRestDocumentation {\n                 .accept(\"application/hal+json\")\n                 .header(\"Authorization\", TEAMLEAD_1_CREDENTIALS))\n         .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andExpect(MockMvcResultMatchers.jsonPath(\"_links.self.href\",\n-            is(\"http://localhost:8080/api/v1/workbaskets/WBI:100000000000000000000000000000000001/workbasketAccessItems\")))\n+        .andExpect(\n+            MockMvcResultMatchers.jsonPath(\n+                \"_links.self.href\",\n+                is(\n+                    \"http://localhost:8080/api/v1/workbaskets/WBI:100000000000000000000000000000000001/workbasketAccessItems\")))\n         .andDo(\n             MockMvcRestDocumentation.document(\n                 \"AccessItemsDocTest\", responseFields(accessItemFieldDescriptors)));\n", "next_change": {"commit": "3967e2900e8b35329b3675844ca3a8e059916c7e", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java\ndeleted file mode 100644\nindex 5046eaf87..000000000\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/WorkbasketControllerRestDocumentation.java\n+++ /dev/null\n", "chunk": "@@ -1,534 +0,0 @@\n-package pro.taskana.doc.api;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertEquals;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n-\n-import java.io.BufferedReader;\n-import java.io.InputStreamReader;\n-import java.net.HttpURLConnection;\n-import java.net.URL;\n-import java.util.HashMap;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n-import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n-import org.springframework.restdocs.payload.FieldDescriptor;\n-import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n-\n-import pro.taskana.common.rest.Mapping;\n-import pro.taskana.common.rest.models.TaskanaPagedModelKeys;\n-import pro.taskana.common.test.doc.api.BaseRestDocumentation;\n-\n-/** Generate REST Documentatioon for the WorkbasketController. */\n-class WorkbasketControllerRestDocumentation extends BaseRestDocumentation {\n-\n-  public static final String PROPERTY_NAME = TaskanaPagedModelKeys.ACCESS_ITEMS.getPropertyName();\n-  // HashMaps to store the field descriptions centrally for multiple uses\n-  private final HashMap<String, String> workbasketFieldDescriptionsMap = new HashMap<>();\n-  private final HashMap<String, String> accessItemFieldDescriptionsMap = new HashMap<>();\n-\n-  private FieldDescriptor[] allWorkbasketsFieldDescriptors;\n-  private FieldDescriptor[] workbasketFieldDescriptors;\n-  private FieldDescriptor[] workbasketSubsetFieldDescriptors;\n-  private FieldDescriptor[] allWorkbasketAccessItemsFieldDescriptors;\n-  private FieldDescriptor[] accessItemFieldDescriptors;\n-  private FieldDescriptor[] allDistributionTargetsFieldDescriptors;\n-  private FieldDescriptor[] createWorkbasketFieldDescriptors;\n-\n-  @BeforeEach\n-  void setUp() {\n-\n-    workbasketFieldDescriptionsMap.put(\"workbasketId\", \"Unique ID\");\n-    workbasketFieldDescriptionsMap.put(\"key\", \"\");\n-    workbasketFieldDescriptionsMap.put(\"name\", \"The name of the workbasket\");\n-    workbasketFieldDescriptionsMap.put(\"domain\", \"\");\n-    workbasketFieldDescriptionsMap.put(\"type\", \"\");\n-    workbasketFieldDescriptionsMap.put(\"description\", \"The description of the workbasket\");\n-    workbasketFieldDescriptionsMap.put(\n-        \"owner\",\n-        \"The owner of the workbasket. The owner is responsible for the on-time completion \"\n-            + \"of all tasks in the workbasket.\");\n-    workbasketFieldDescriptionsMap.put(\n-        \"orgLevel1\",\n-        \"The first Org Level (the top one)\\nThe Org Level is an association with an org \"\n-            + \"hierarchy level in the organization. The values are used for monitoring \"\n-            + \"and statistical purposes and should reflect the responsibility of the \"\n-            + \"tasks in the workbasket.\");\n-    workbasketFieldDescriptionsMap.put(\"orgLevel2\", \"The second Org Level\");\n-    workbasketFieldDescriptionsMap.put(\"orgLevel3\", \"The third Org Level\");\n-    workbasketFieldDescriptionsMap.put(\"orgLevel4\", \"The fourth Org Level (the lowest one).\");\n-    workbasketFieldDescriptionsMap.put(\"markedForDeletion\", \"can this be deleted\");\n-    workbasketFieldDescriptionsMap.put(\n-        \"created\", \"The creation timestamp of the workbasket in the system.\");\n-    workbasketFieldDescriptionsMap.put(\n-        \"modified\", \"Timestamp of the last modification of the workbasket\");\n-    workbasketFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-    workbasketFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-    workbasketFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-    workbasketFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-    workbasketFieldDescriptionsMap.put(\n-        \"_links.distributionTargets.href\", \"The Distribution-Targets of the workbasket\");\n-    workbasketFieldDescriptionsMap.put(\n-        \"_links.removeDistributionTargets.href\",\n-        \"Link to remove all distribution-targets from the workbasket\");\n-    workbasketFieldDescriptionsMap.put(\n-        \"_links.\" + PROPERTY_NAME + \".href\", \"The Access-Items of the workbasket\");\n-    workbasketFieldDescriptionsMap.put(\"_links.allWorkbaskets.href\", \"Link to all workbaskets\");\n-\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".accessItemId\", \"Unique ID\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".workbasketId\", \"The workbasket\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".workbasketKey\", \"The workbasket key\");\n-    accessItemFieldDescriptionsMap.put(\n-        PROPERTY_NAME + \".accessId\",\n-        \"The access id, this ACL entry refers to. This could be either a userid or a \"\n-            + \"full qualified group id (both lower case)\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".accessName\", \"\");\n-    accessItemFieldDescriptionsMap.put(\n-        PROPERTY_NAME + \".permRead\", \"The permission to read the information about the workbasket\");\n-    accessItemFieldDescriptionsMap.put(\n-        PROPERTY_NAME + \".permOpen\",\n-        \"The permission to view the content (the tasks) of a workbasket\");\n-    accessItemFieldDescriptionsMap.put(\n-        PROPERTY_NAME + \".permAppend\",\n-        \"The permission to add tasks to the workbasket (required for creation \"\n-            + \"and transferring of tasks)\");\n-    accessItemFieldDescriptionsMap.put(\n-        PROPERTY_NAME + \".permTransfer\",\n-        \"The permission to transfer tasks (out of the current workbasket)\");\n-    accessItemFieldDescriptionsMap.put(\n-        PROPERTY_NAME + \".permDistribute\",\n-        \"The permission to distribute tasks from the workbasket\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom1\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom2\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom3\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom4\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom5\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom6\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom7\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom8\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom9\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom10\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom11\", \"\");\n-    accessItemFieldDescriptionsMap.put(PROPERTY_NAME + \".permCustom12\", \"\");\n-    accessItemFieldDescriptionsMap.put(\n-        PROPERTY_NAME + \"._links.workbasket.href\", \"Link to the workbasket\");\n-\n-    allWorkbasketsFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"workbaskets\")\n-              .description(\"An Array of <<workbasket-subset, Workbasket-Subsets>>\"),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n-        };\n-\n-    workbasketFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"workbasketId\")\n-              .description(workbasketFieldDescriptionsMap.get(\"workbasketId\")),\n-          fieldWithPath(\"key\").description(workbasketFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"created\").description(workbasketFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"modified\").description(workbasketFieldDescriptionsMap.get(\"modified\")),\n-          fieldWithPath(\"name\").description(workbasketFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"description\")\n-              .description(workbasketFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"owner\").description(workbasketFieldDescriptionsMap.get(\"owner\")),\n-          fieldWithPath(\"domain\").description(workbasketFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"type\").description(workbasketFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"custom1\").description(workbasketFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(workbasketFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(workbasketFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(workbasketFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"orgLevel1\").description(workbasketFieldDescriptionsMap.get(\"orgLevel1\")),\n-          fieldWithPath(\"orgLevel2\").description(workbasketFieldDescriptionsMap.get(\"orgLevel2\")),\n-          fieldWithPath(\"orgLevel3\").description(workbasketFieldDescriptionsMap.get(\"orgLevel3\")),\n-          fieldWithPath(\"orgLevel4\").description(workbasketFieldDescriptionsMap.get(\"orgLevel4\")),\n-          fieldWithPath(\"markedForDeletion\")\n-              .description(workbasketFieldDescriptionsMap.get(\"markedForDeletion\")),\n-          fieldWithPath(\"_links.distributionTargets.href\")\n-              .description(workbasketFieldDescriptionsMap.get(\"_links.distributionTargets.href\")),\n-          fieldWithPath(\"_links.removeDistributionTargets.href\")\n-              .description(\n-                  workbasketFieldDescriptionsMap.get(\"_links.removeDistributionTargets.href\")),\n-          fieldWithPath(\"_links.\" + PROPERTY_NAME + \".href\")\n-              .description(workbasketFieldDescriptionsMap.get(\"_links.\" + PROPERTY_NAME + \".href\")),\n-          fieldWithPath(\"_links.allWorkbaskets.href\")\n-              .description(workbasketFieldDescriptionsMap.get(\"_links.allWorkbaskets.href\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    workbasketSubsetFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"workbasketId\")\n-              .description(workbasketFieldDescriptionsMap.get(\"workbasketId\")),\n-          fieldWithPath(\"key\").description(workbasketFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"name\").description(workbasketFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"description\")\n-              .description(workbasketFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"owner\").description(workbasketFieldDescriptionsMap.get(\"owner\")),\n-          fieldWithPath(\"domain\").description(workbasketFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"type\").description(workbasketFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"custom1\").description(workbasketFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(workbasketFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(workbasketFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(workbasketFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"orgLevel1\").description(workbasketFieldDescriptionsMap.get(\"orgLevel1\")),\n-          fieldWithPath(\"orgLevel2\").description(workbasketFieldDescriptionsMap.get(\"orgLevel2\")),\n-          fieldWithPath(\"orgLevel3\").description(workbasketFieldDescriptionsMap.get(\"orgLevel3\")),\n-          fieldWithPath(\"orgLevel4\").description(workbasketFieldDescriptionsMap.get(\"orgLevel4\")),\n-          fieldWithPath(\"markedForDeletion\")\n-              .description(workbasketFieldDescriptionsMap.get(\"markedForDeletion\")),\n-          fieldWithPath(\"created\").ignored(),\n-          fieldWithPath(\"modified\").ignored(),\n-          fieldWithPath(\"_links.distributionTargets.href\").ignored(),\n-          fieldWithPath(\"_links.removeDistributionTargets.href\").ignored(),\n-          fieldWithPath(\"_links.\" + PROPERTY_NAME + \".href\").ignored(),\n-          fieldWithPath(\"_links.allWorkbaskets.href\").ignored(),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    accessItemFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(PROPERTY_NAME + \"[].accessItemId\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".accessItemId\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].workbasketId\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".workbasketId\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].workbasketKey\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".workbasketKey\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].accessId\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".accessId\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].accessName\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".accessName\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permRead\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permRead\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permOpen\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permOpen\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permAppend\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permAppend\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permTransfer\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permTransfer\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permDistribute\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permDistribute\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom1\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom1\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom2\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom2\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom3\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom3\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom4\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom4\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom5\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom5\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom6\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom6\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom7\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom7\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom8\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom8\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom9\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom9\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom10\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom10\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom11\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom11\")),\n-          fieldWithPath(PROPERTY_NAME + \"[].permCustom12\")\n-              .description(accessItemFieldDescriptionsMap.get(PROPERTY_NAME + \".permCustom12\")),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n-          fieldWithPath(\"_links.workbasket.href\").ignored()\n-        };\n-\n-    allWorkbasketAccessItemsFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(PROPERTY_NAME)\n-              .description(\"An array of <<access-item, Access Items>>\"),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n-          fieldWithPath(\"_links.workbasket.href\").ignored()\n-        };\n-\n-    allDistributionTargetsFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"distributionTargets\")\n-              .description(\"An array of <<workbasket-subset, workbasket subsets>>\"),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n-        };\n-\n-    createWorkbasketFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"key\").description(workbasketFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"name\").description(workbasketFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"domain\").description(workbasketFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"type\").description(workbasketFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"description\")\n-              .description(workbasketFieldDescriptionsMap.get(\"description\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"owner\")\n-              .description(workbasketFieldDescriptionsMap.get(\"owner\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"orgLevel1\")\n-              .description(workbasketFieldDescriptionsMap.get(\"orgLevel1\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"orgLevel2\")\n-              .description(workbasketFieldDescriptionsMap.get(\"orgLevel2\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"orgLevel3\")\n-              .description(workbasketFieldDescriptionsMap.get(\"orgLevel3\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"orgLevel4\")\n-              .description(workbasketFieldDescriptionsMap.get(\"orgLevel4\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"created\")\n-              .description(workbasketFieldDescriptionsMap.get(\"created\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"modified\")\n-              .description(workbasketFieldDescriptionsMap.get(\"modified\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom1\")\n-              .description(workbasketFieldDescriptionsMap.get(\"custom1\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom2\")\n-              .description(workbasketFieldDescriptionsMap.get(\"custom2\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom3\")\n-              .description(workbasketFieldDescriptionsMap.get(\"custom3\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"custom4\")\n-              .description(workbasketFieldDescriptionsMap.get(\"custom4\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"_links.distributionTargets.href\")\n-              .description(workbasketFieldDescriptionsMap.get(\"_links.distributionTargets.href\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"_links.removeDistributionTargets.href\")\n-              .description(\n-                  workbasketFieldDescriptionsMap.get(\"_links.removeDistributionTargets.href\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"_links.\" + PROPERTY_NAME + \".href\")\n-              .description(workbasketFieldDescriptionsMap.get(\"_links.\" + PROPERTY_NAME + \".href\"))\n-              .type(\"String\")\n-              .optional(),\n-          fieldWithPath(\"_links.allWorkbaskets.href\")\n-              .description(workbasketFieldDescriptionsMap.get(\"_links.allWorkbaskets.href\"))\n-              .type(\"String\")\n-              .optional()\n-        };\n-  }\n-\n-  @Test\n-  void getAllWorkbasketsDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(Mapping.URL_WORKBASKET) + \"?type=PERSONAL\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", TEAMLEAD_1_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllWorkbasketsDocTest\", responseFields(allWorkbasketsFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void getSpecificWorkbasketDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000001\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", TEAMLEAD_1_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andExpect(\n-            MockMvcResultMatchers.jsonPath(\n-                \"_links.self.href\",\n-                is(\n-                    \"http://localhost:8080/api/v1/workbaskets/WBI:100000000000000000000000000000000001\")))\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetSpecificWorkbasketDocTest\", responseFields(workbasketFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void getAllWorkbasketAccessItemsDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_WORKBASKET_ID_ACCESSITEMS,\n-                        \"WBI:100000000000000000000000000000000001\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", TEAMLEAD_1_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllWorkbasketAccessItemsDocTest\",\n-                responseFields(allWorkbasketAccessItemsFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void workbasketSubsetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000001\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", TEAMLEAD_1_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andExpect(\n-            MockMvcResultMatchers.jsonPath(\n-                \"_links.self.href\",\n-                is(\n-                    \"http://localhost:8080/api/v1/workbaskets/WBI:100000000000000000000000000000000001\")))\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"WorkbasketSubset\", responseFields(workbasketSubsetFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void removeWorkbasketAsDistributionTargetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(\n-                        Mapping.URL_WORKBASKET_ID_DISTRIBUTION,\n-                        \"WBI:100000000000000000000000000000000007\"))\n-                .header(\"Authorization\", TEAMLEAD_1_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"RemoveWorkbasketAsDistributionTargetDocTest\"));\n-  }\n-\n-  @Test\n-  void getAllWorkbasketDistributionTargets() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_WORKBASKET_ID_DISTRIBUTION,\n-                        \"WBI:100000000000000000000000000000000002\"))\n-                .header(\"Authorization\", TEAMLEAD_1_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andExpect(\n-            MockMvcResultMatchers.jsonPath(\n-                \"_links.self.href\",\n-                is(\n-                    \"http://localhost:8080/api/v1/workbaskets/WBI:100000000000000000000000000000000002/distribution-targets\")))\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllWorkbasketDistributionTargets\",\n-                responseFields(allDistributionTargetsFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void createWorkbasketDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_WORKBASKET))\n-                .contentType(\"application/json\")\n-                .header(\"Authorization\", TEAMLEAD_1_CREDENTIALS)\n-                .content(\n-                    \"{\\\"key\\\" : \\\"asdasdasd\\\", \\\"name\\\" : \\\"Gruppenpostkorb KSC\\\", \"\n-                        + \"\\\"domain\\\" : \\\"DOMAIN_A\\\", \\\"type\\\" : \\\"GROUP\\\",   \"\n-                        + \"\\\"created\\\" : \\\"2018-02-01T11:00:00Z\\\",\\r\\n\"\n-                        + \"  \\\"modified\\\" : \\\"2018-02-01T11:00:00Z\\\"}\"))\n-        .andExpect(MockMvcResultMatchers.status().isCreated())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"CreateWorkbasketDocTest\",\n-                requestFields(createWorkbasketFieldDescriptors),\n-                responseFields(workbasketFieldDescriptors)))\n-        .andReturn();\n-  }\n-\n-  @Test\n-  void updateWorkbasketDocTest() throws Exception {\n-    URL url =\n-        new URL(\n-            restHelper.toUrl(\n-                Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000002\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", ADMIN_CREDENTIALS);\n-    assertEquals(200, con.getResponseCode());\n-\n-    String modifiedWorkbasket;\n-    try (BufferedReader in =\n-        new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8))) {\n-      String inputLine;\n-      StringBuilder content = new StringBuilder();\n-      while ((inputLine = in.readLine()) != null) {\n-        content.append(inputLine);\n-      }\n-      con.disconnect();\n-      modifiedWorkbasket = content.toString();\n-    }\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.put(\n-                    restHelper.toUrl(\n-                        Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000002\"))\n-                .header(\"Authorization\", TEAMLEAD_1_CREDENTIALS)\n-                .contentType(\"application/json\")\n-                .content(modifiedWorkbasket))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andExpect(\n-            MockMvcResultMatchers.jsonPath(\n-                \"_links.self.href\",\n-                is(\n-                    \"http://localhost:8080/api/v1/workbaskets/WBI:100000000000000000000000000000000002\")))\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"UpdateWorkbasketDocTest\",\n-                requestFields(workbasketFieldDescriptors),\n-                responseFields(workbasketFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void deleteWorkbasketDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(\n-                        Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000008\"))\n-                .header(\"Authorization\", ADMIN_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"DeleteWorkbasketDocTest\"));\n-  }\n-\n-  @Test\n-  void accessItemDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_WORKBASKET_ID_ACCESSITEMS,\n-                        \"WBI:100000000000000000000000000000000001\"))\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", TEAMLEAD_1_CREDENTIALS))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andExpect(\n-            MockMvcResultMatchers.jsonPath(\n-                \"_links.self.href\",\n-                is(\n-                    \"http://localhost:8080/api/v1/workbaskets/WBI:100000000000000000000000000000000001/workbasketAccessItems\")))\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"AccessItemsDocTest\", responseFields(accessItemFieldDescriptors)));\n-  }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "committedDate": "2019-12-04 09:56:34 +0100", "message": "TSK-967: Merge module taskana-rest-spring and taskana-rest-spring-test"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "7509bb0f1c7cfb9e8bcc634fbd3f80c0b74b5ca6", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: Fix simple checkstyle warnings"}, {"oid": "f06f87f41e08aea691512d53fe1087bd12e892b8", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Replace WorkbasketAccessItemListResource with equivalent PaginatedListResource"}, {"oid": "6a6dcb9c1e3984670c644f89c569eba3d20dcf3d", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Standardise paginated List behaviour and sub classes"}, {"oid": "4d560532bd98ef3dfe573c40c00506fcef21f912", "committedDate": "2020-01-23 14:23:56 +0100", "message": "TSK-987: Fix Spotbugs - reliance on default encoding"}, {"oid": "c9791b01b8b72b711025903276f2a1a30e3e85a2", "committedDate": "2020-03-19 09:53:54 +0100", "message": "TSK-1029: Proper distinction between delete and markForFeletion for workbaskets"}, {"oid": "75a340ccf32a72f2f45bdea73ace9ee3d33bf05c", "committedDate": "2020-05-11 14:48:36 +0200", "message": "TSK-1243: made rest url for workbasket distribution-targets consistent"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}, {"oid": "0442dc54b4295137031176ecc7145fec7a5fb4a6", "committedDate": "2020-05-30 11:48:03 +0200", "message": "Task-1259: Refactoring of assembler classes"}, {"oid": "d07459fe2677e4948c3f91c7a027a9b172cfdda5", "committedDate": "2020-06-04 21:00:58 +0200", "message": "TASK-1278: Extended Test Coverage of Assembler Classes"}, {"oid": "cc4efaa1cdd708366adea79d631b8aa5ccc013a8", "committedDate": "2020-06-05 20:03:15 +0200", "message": "TSK-1210: Replaced LoginModule with Embedded Spring LDAP"}, {"oid": "5030415f17763f79d88a8348666b4bb58627bc21", "committedDate": "2020-08-05 15:53:41 +0200", "message": "TSK-1085: Hateoas self-links which contain variables are not working for Paged representationmodels"}, {"oid": "121a9c103fe9b04606635f8c132489504fe2d414", "committedDate": "2020-10-13 17:07:09 +0200", "message": "TSK-1407: adopted RestDocumentation tests to use taskana-common-test aswell"}, {"oid": "3849ee385f2861c3bb58cc4cb4499f3cd1aaf87c", "committedDate": "2020-10-29 13:02:41 +0100", "message": "TSK-1429: automatically formatted all backend code"}, {"oid": "6dc782e37ac378b636daaef8d9134d17294845d2", "committedDate": "2020-10-30 01:36:27 +0100", "message": "TSK-1430: Rename Mapping to RestEndpoints, groups relevant endpoints together"}, {"oid": "8c6beb6e9601d9eb98e7299d3f7743bf721678d3", "committedDate": "2020-12-03 12:53:29 +0100", "message": "TSK-1239: All tests now working with Assertj instead of junit Assertion. (#1346)"}, {"oid": "3967e2900e8b35329b3675844ca3a8e059916c7e", "committedDate": "2020-12-18 11:29:10 +0100", "message": "TSK-1436: rest api documentation is now build with spring-auto-restdocs"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2NDc5MA==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422664790", "body": "Please don't do this. \r\nAdd `assertThat(response.getBody()).isNotNull()`\r\nYou have done this 16 times. Please replace this everywhere.", "bodyText": "Please don't do this.\nAdd assertThat(response.getBody()).isNotNull()\nYou have done this 16 times. Please replace this everywhere.", "bodyHTML": "<p dir=\"auto\">Please don't do this.<br>\nAdd <code>assertThat(response.getBody()).isNotNull()</code><br>\nYou have done this 16 times. Please replace this everywhere.</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T16:04:49Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java", "diffHunk": "@@ -421,20 +427,20 @@ void testThrowsExceptionIfInvalidFilterIsUsed() {\n   void testGetLastPageSortedByPorValue() {\n \n     HttpEntity<String> request = new HttpEntity<>(restHelper.getHeadersAdmin());\n-    ResponseEntity<TaskSummaryListResource> response =\n+    ResponseEntity<TaskanaPagedModel<TaskSummaryRepresentationModel>> response =\n         template.exchange(\n             restHelper.toUrl(Mapping.URL_TASKS)\n                 + \"?state=READY,CLAIMED&sort-by=por.value&order=desc&page=15&page-size=5\",\n             HttpMethod.GET,\n             request,\n-            ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n-    assertThat(response.getBody().getContent()).hasSize(1);\n+            TASK_SUMMARY_PAGE_MODEL_TYPE);\n+    assertThat(Objects.requireNonNull(response.getBody()).getContent()).hasSize(1);", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java\nindex 14b1b10f4..7fc03cfe8 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java\n", "chunk": "@@ -430,11 +442,12 @@ class TaskControllerIntTest {\n     ResponseEntity<TaskanaPagedModel<TaskSummaryRepresentationModel>> response =\n         template.exchange(\n             restHelper.toUrl(Mapping.URL_TASKS)\n-                + \"?state=READY,CLAIMED&sort-by=por.value&order=desc&page=15&page-size=5\",\n+                + \"?state=READY,CLAIMED&sort-by=por.value&order=desc&page-size=5&page=14\",\n             HttpMethod.GET,\n             request,\n             TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(Objects.requireNonNull(response.getBody()).getContent()).hasSize(1);\n+    assertThat(response.getBody()).isNotNull();\n+    assertThat((response.getBody()).getContent()).hasSize(1);\n     assertThat(\n         response\n             .getBody()\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java\nindex 14b1b10f4..7fc03cfe8 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java\n", "chunk": "@@ -430,11 +442,12 @@ class TaskControllerIntTest {\n     ResponseEntity<TaskanaPagedModel<TaskSummaryRepresentationModel>> response =\n         template.exchange(\n             restHelper.toUrl(Mapping.URL_TASKS)\n-                + \"?state=READY,CLAIMED&sort-by=por.value&order=desc&page=15&page-size=5\",\n+                + \"?state=READY,CLAIMED&sort-by=por.value&order=desc&page-size=5&page=14\",\n             HttpMethod.GET,\n             request,\n             TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(Objects.requireNonNull(response.getBody()).getContent()).hasSize(1);\n+    assertThat(response.getBody()).isNotNull();\n+    assertThat((response.getBody()).getContent()).hasSize(1);\n     assertThat(\n         response\n             .getBody()\n", "next_change": {"commit": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java\nindex 7fc03cfe8..f16a2a03b 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java\n", "chunk": "@@ -32,869 +34,405 @@ import org.springframework.http.ResponseEntity;\n import org.springframework.web.client.HttpClientErrorException;\n import org.springframework.web.client.RestTemplate;\n \n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import pro.taskana.ObjectReference;\n import pro.taskana.RestHelper;\n import pro.taskana.TaskanaSpringBootTest;\n-import pro.taskana.rest.resource.ClassificationSummaryRepresentationModel;\n-import pro.taskana.rest.resource.TaskRepresentationModel;\n-import pro.taskana.rest.resource.TaskSummaryRepresentationModel;\n-import pro.taskana.rest.resource.TaskanaPagedModel;\n-import pro.taskana.rest.resource.WorkbasketSummaryRepresentationModel;\n+import pro.taskana.exceptions.SystemException;\n+import pro.taskana.rest.resource.ClassificationSummaryResource;\n+import pro.taskana.rest.resource.TaskResource;\n+import pro.taskana.rest.resource.TaskSummaryListResource;\n+import pro.taskana.rest.resource.WorkbasketSummaryResource;\n import pro.taskana.sampledata.SampleDataGenerator;\n-import pro.taskana.task.api.TaskState;\n-import pro.taskana.task.api.models.ObjectReference;\n \n-/** Test Task Controller. */\n+/**\n+ * Test Task Controller.\n+ */\n+\n @TaskanaSpringBootTest\n class TaskControllerIntTest {\n \n-  private static final ParameterizedTypeReference<TaskanaPagedModel<TaskSummaryRepresentationModel>>\n-      TASK_SUMMARY_PAGE_MODEL_TYPE =\n-          new ParameterizedTypeReference<TaskanaPagedModel<TaskSummaryRepresentationModel>>() {};\n-  private static RestTemplate template;\n+    @Value(\"${taskana.schemaName:TASKANA}\")\n+    public String schemaName;\n \n-  @Value(\"${taskana.schemaName:TASKANA}\")\n-  public String schemaName;\n+    @Autowired RestHelper restHelper;\n \n-  @Autowired RestHelper restHelper;\n+    private static RestTemplate template;\n \n-  @Autowired private DataSource dataSource;\n+    @BeforeAll\n+    static void init() {\n+        template = RestHelper.getRestTemplate();\n+    }\n \n-  @BeforeAll\n-  static void init() {\n-    template = RestHelper.TEMPLATE;\n-  }\n+    @Autowired\n+    private DataSource dataSource;\n+\n+    void resetDb() {\n+        SampleDataGenerator sampleDataGenerator;\n+        try {\n+            sampleDataGenerator = new SampleDataGenerator(dataSource);\n+            sampleDataGenerator.generateSampleData(schemaName);\n+        } catch (SQLException e) {\n+            throw new SystemException(\"tried to reset DB and caught Exception \" + e, e);\n+        }\n+    }\n \n-  void resetDb() {\n-    SampleDataGenerator sampleDataGenerator = new SampleDataGenerator(dataSource, schemaName);\n-    sampleDataGenerator.generateSampleData();\n-  }\n+    @Test\n+    void testGetAllTasks() {\n+        ResponseEntity<TaskSummaryListResource> response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_TASKS), HttpMethod.GET, restHelper.defaultRequest(),\n+            ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n+        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+        assertEquals(25, response.getBody().getContent().size());\n+    }\n \n-  @Test\n-  void testGetAllTasks() {\n-    ResponseEntity<TaskanaPagedModel<TaskSummaryRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS),\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat((response.getBody()).getLink(IanaLinkRelations.SELF))\n-        .isNotNull();\n-    assertThat(response.getBody().getContent()).hasSize(25);\n-  }\n-\n-  @Test\n-  void testGetAllTasksByWorkbasketId() {\n-    ResponseEntity<TaskanaPagedModel<TaskSummaryRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS)\n-                + \"?workbasket-id=WBI:100000000000000000000000000000000001\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat((response.getBody()).getLink(IanaLinkRelations.SELF))\n-        .isNotNull();\n-    assertThat(response.getBody().getContent()).hasSize(22);\n-  }\n-\n-  @Test\n-  void testGetAllTasksByWorkbasketIdWithinMultiplePlannedTimeIntervals() {\n-\n-    Instant firstInstant = Instant.now().minus(7, ChronoUnit.DAYS);\n-    Instant secondInstant = Instant.now().minus(10, ChronoUnit.DAYS);\n-    Instant thirdInstant = Instant.now().minus(10, ChronoUnit.DAYS);\n-    Instant fourthInstant = Instant.now().minus(11, ChronoUnit.DAYS);\n-\n-    ResponseEntity<TaskanaPagedModel<TaskSummaryRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS)\n-                + \"?workbasket-id=WBI:100000000000000000000000000000000001\"\n-                + \"&planned=\"\n-                + firstInstant\n-                + \",,\"\n-                + secondInstant\n-                + \",\"\n-                + thirdInstant\n-                + \",\"\n-                + \",\"\n-                + fourthInstant\n-                + \"&sort-by=planned\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat((response.getBody()).getLink(IanaLinkRelations.SELF))\n-        .isNotNull();\n-    assertThat(response.getBody().getContent()).hasSize(6);\n-  }\n-\n-  @Test\n-  void testGetAllTasksByWorkbasketIdWithinSinglePlannedTimeInterval() {\n-\n-    Instant plannedFromInstant = Instant.now().minus(6, ChronoUnit.DAYS);\n-    Instant plannedToInstant = Instant.now().minus(3, ChronoUnit.DAYS);\n-\n-    ResponseEntity<TaskanaPagedModel<TaskSummaryRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS)\n-                + \"?workbasket-id=WBI:100000000000000000000000000000000001\"\n-                + \"&planned-from=\"\n-                + plannedFromInstant\n-                + \"&planned-until=\"\n-                + plannedToInstant\n-                + \"&sort-by=planned\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat((response.getBody()).getLink(IanaLinkRelations.SELF))\n-        .isNotNull();\n-    assertThat(response.getBody().getContent()).hasSize(3);\n-  }\n+    @Test\n+    void testGetAllTasksByWorkbasketId() {\n+        ResponseEntity<TaskSummaryListResource> response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_TASKS) + \"?workbasket-id=WBI:100000000000000000000000000000000001\",\n+            HttpMethod.GET, restHelper.defaultRequest(),\n+            ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n+        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+        assertEquals(22, response.getBody().getContent().size());\n+    }\n \n-  @Test\n-  void testGetAllTasksByWorkbasketIdWithinSingleIndefinitePlannedTimeInterval() {\n+    @Test\n+    void testGetAllTasksByWorkbasketKeyAndDomain() {\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.add(\"Authorization\", \"Basic dXNlcl8xXzI6dXNlcl8xXzI=\"); // user_1_2\n+        HttpEntity<String> request = new HttpEntity<String>(headers);\n+        ResponseEntity<TaskSummaryListResource> response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_TASKS) + \"?workbasket-key=USER_1_2&domain=DOMAIN_A\",\n+            HttpMethod.GET, request,\n+            ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n+        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+        assertEquals(20, response.getBody().getContent().size());\n+    }\n \n-    Instant plannedFromInstant = Instant.now().minus(6, ChronoUnit.DAYS);\n+    @Test\n+    void testExceptionIfKeyIsSetButDomainIsMissing() {\n+\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.add(\"Authorization\", \"Basic dXNlcl8xXzI6dXNlcl8xXzI=\"); // user_1_2\n+        HttpEntity<String> request = new HttpEntity<String>(headers);\n+        try {\n+            ResponseEntity<TaskSummaryListResource> response = template.exchange(\n+                restHelper.toUrl(Mapping.URL_TASKS) + \"?workbasket-key=USER_1_2\",\n+                HttpMethod.GET, request,\n+                ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n+            fail();\n+        } catch (HttpClientErrorException e) {\n+            assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n+        }\n+    }\n \n-    ResponseEntity<TaskanaPagedModel<TaskSummaryRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS)\n-                + \"?workbasket-id=WBI:100000000000000000000000000000000001\"\n-                + \"&planned-from=\"\n-                + plannedFromInstant\n-                + \"&sort-by=planned\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat((response.getBody()).getLink(IanaLinkRelations.SELF))\n-        .isNotNull();\n-    assertThat(response.getBody().getContent()).hasSize(4);\n-  }\n-\n-  @Test\n-  void testGetAllTasksByWorkbasketIdWithInvalidPlannedParamsCombination() {\n-    ThrowingCallable httpCall =\n-        () -> template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS)\n-                + \"?workbasket-id=WBI:100000000000000000000000000000000001\"\n-                + \"&planned=2020-01-22T09:44:47.453Z,,\"\n-                + \"2020-01-19T07:44:47.453Z,2020-01-19T19:44:47.453Z,\"\n-                + \",2020-01-18T09:44:47.453Z\"\n-                + \"&planned-from=2020-01-19T07:44:47.453Z\"\n-                + \"&sort-by=planned\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThatThrownBy(httpCall)\n-        .isInstanceOf(HttpClientErrorException.class)\n-        .hasMessageContaining(\"400\");\n-  }\n-\n-  @Test\n-  void testGetAllTasksByWorkbasketIdWithinMultipleDueTimeIntervals() {\n-\n-    Instant firstInstant = Instant.now().minus(7, ChronoUnit.DAYS);\n-    Instant secondInstant = Instant.now().minus(10, ChronoUnit.DAYS);\n-    Instant thirdInstant = Instant.now().minus(10, ChronoUnit.DAYS);\n-    Instant fourthInstant = Instant.now().minus(11, ChronoUnit.DAYS);\n-\n-    ResponseEntity<TaskanaPagedModel<TaskSummaryRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS)\n-                + \"?workbasket-id=WBI:100000000000000000000000000000000001\"\n-                + \"&due=\"\n-                + firstInstant\n-                + \",,\"\n-                + secondInstant\n-                + \",\"\n-                + thirdInstant\n-                + \",\"\n-                + \",\"\n-                + fourthInstant\n-                + \"&sort-by=due\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat((response.getBody()).getLink(IanaLinkRelations.SELF))\n-        .isNotNull();\n-    assertThat(response.getBody().getContent()).hasSize(6);\n-  }\n-\n-  @Test\n-  void should_ReturnAllTasksByWildcardSearch_For_ProvidedSearchValue() {\n-    ResponseEntity<TaskanaPagedModel<TaskSummaryRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS)\n-                + \"?wildcard-search-value=%99%\"\n-                + \"&wildcard-search-fields=NAME,custom_3,CuStOM_4\",\n-            HttpMethod.GET,\n-            new HttpEntity<String>(restHelper.getHeadersAdmin()),\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat((response.getBody()).getLink(IanaLinkRelations.SELF))\n-        .isNotNull();\n-    assertThat(response.getBody().getContent()).hasSize(4);\n-  }\n-\n-  @Test\n-  void should_ThrowException_When_ProvidingInvalidWildcardSearchParameters() {\n-\n-    ThrowingCallable httpCall =\n-        () -> template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS) + \"?wildcard-search-value=%rt%\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThatThrownBy(httpCall)\n-        .isInstanceOf(HttpClientErrorException.class)\n-        .hasMessageContaining(\"400\")\n-        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n-        .isEqualTo(HttpStatus.BAD_REQUEST);\n-\n-    ThrowingCallable httpCall2 =\n-        () -> template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS)\n-                + \"?wildcard-search-fields=NAME,CUSTOM_3,CUSTOM_4\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThatThrownBy(httpCall2)\n-        .isInstanceOf(HttpClientErrorException.class)\n-        .hasMessageContaining(\"400\")\n-        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n-        .isEqualTo(HttpStatus.BAD_REQUEST);\n-  }\n-\n-  @Test\n-  void testGetAllTasksByWorkbasketIdWithinSingleDueTimeInterval() {\n-\n-    Instant dueFromInstant = Instant.now().minus(8, ChronoUnit.DAYS);\n-    Instant dueToInstant = Instant.now().minus(3, ChronoUnit.DAYS);\n-\n-    ResponseEntity<TaskanaPagedModel<TaskSummaryRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS)\n-                + \"?workbasket-id=WBI:100000000000000000000000000000000001\"\n-                + \"&due-from=\"\n-                + dueFromInstant\n-                + \"&due-until=\"\n-                + dueToInstant\n-                + \"&sort-by=due\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat((response.getBody()).getLink(IanaLinkRelations.SELF))\n-        .isNotNull();\n-    assertThat(response.getBody().getContent()).hasSize(9);\n-  }\n+    @Test\n+    void testGetAllTasksWithAdminRole() {\n+        ResponseEntity<TaskSummaryListResource> response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_TASKS), HttpMethod.GET, new HttpEntity<>(restHelper.getHeadersAdmin()),\n+            ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n+        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+        assertEquals(73, response.getBody().getContent().size());\n+    }\n \n-  @Test\n-  void testGetAllTasksByWorkbasketIdWithinSingleIndefiniteDueTimeInterval() {\n+    @Test\n+    void testGetAllTasksKeepingFilters() {\n+        ResponseEntity<TaskSummaryListResource> response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_TASKS) + \"?por.type=VNR&por.value=22334455&sort-by=por.value&order=desc\",\n+            HttpMethod.GET, restHelper.defaultRequest(),\n+            ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n+        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+        assertTrue(response.getBody()\n+            .getLink(Link.REL_SELF)\n+            .getHref()\n+            .endsWith(\"/api/v1/tasks?por.type=VNR&por.value=22334455&sort-by=por.value&order=desc\"));\n+    }\n \n-    Instant dueToInstant = Instant.now().minus(1, ChronoUnit.DAYS);\n+    @Test\n+    void testThrowsExceptionIfInvalidFilterIsUsed() {\n+        try {\n+            template.exchange(\n+                restHelper.toUrl(Mapping.URL_TASKS) + \"?invalid=VNR\",\n+                HttpMethod.GET, restHelper.defaultRequest(),\n+                ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n+            fail();\n+        } catch (HttpClientErrorException e) {\n+            assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n+            assertTrue(e.getResponseBodyAsString().contains(\"[invalid]\"));\n+        }\n+    }\n \n-    ResponseEntity<TaskanaPagedModel<TaskSummaryRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS)\n-                + \"?workbasket-id=WBI:100000000000000000000000000000000001\"\n-                + \"&due-until=\"\n-                + dueToInstant\n-                + \"&sort-by=due\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat((response.getBody()).getLink(IanaLinkRelations.SELF))\n-        .isNotNull();\n-    assertThat(response.getBody().getContent()).hasSize(6);\n-  }\n-\n-  @Test\n-  void testGetAllTasksByWorkbasketIdWithInvalidDueParamsCombination() {\n-    ThrowingCallable httpCall =\n-        () -> template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS)\n-                + \"?workbasket-id=WBI:100000000000000000000000000000000001\"\n-                + \"&due=2020-01-22T09:44:47.453Z,,\"\n-                + \"2020-01-19T07:44:47.453Z,2020-01-19T19:44:47.453Z,\"\n-                + \",2020-01-18T09:44:47.453Z\"\n-                + \"&due-from=2020-01-19T07:44:47.453Z\"\n-                + \"&sort-by=planned\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThatThrownBy(httpCall)\n-        .isInstanceOf(HttpClientErrorException.class)\n-        .hasMessageContaining(\"400\");\n-  }\n-\n-  @Test\n-  void testGetAllTasksByWorkbasketKeyAndDomain() {\n-    HttpHeaders headers = new HttpHeaders();\n-    headers.add(\"Authorization\", \"Basic dXNlcl8xXzI6dXNlcl8xXzI=\"); // user_1_2\n-    HttpEntity<String> request = new HttpEntity<>(headers);\n-    ResponseEntity<TaskanaPagedModel<TaskSummaryRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS) + \"?workbasket-key=USER_1_2&domain=DOMAIN_A\",\n-            HttpMethod.GET,\n-            request,\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat((response.getBody()).getLink(IanaLinkRelations.SELF))\n-        .isNotNull();\n-    assertThat(response.getBody().getContent()).hasSize(20);\n-  }\n-\n-  @Test\n-  void testGetAllTasksByExternalId() {\n-    ResponseEntity<TaskanaPagedModel<TaskSummaryRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS)\n-                + \"?external-id=ETI:000000000000000000000000000000000003,\"\n-                + \"ETI:000000000000000000000000000000000004\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat((response.getBody()).getLink(IanaLinkRelations.SELF))\n-        .isNotNull();\n-    assertThat(response.getBody().getContent()).hasSize(2);\n-  }\n-\n-  @Test\n-  void testExceptionIfKeyIsSetButDomainIsMissing() {\n-\n-    HttpHeaders headers = new HttpHeaders();\n-    headers.add(\"Authorization\", \"Basic dXNlcl8xXzI6dXNlcl8xXzI=\"); // user_1_2\n-    HttpEntity<String> request = new HttpEntity<>(headers);\n-\n-    ThrowingCallable httpCall =\n-        () -> template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS) + \"?workbasket-key=USER_1_2\",\n-            HttpMethod.GET,\n-            request,\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThatThrownBy(httpCall)\n-        .isInstanceOf(HttpClientErrorException.class)\n-        .hasMessageContaining(\"400\");\n-  }\n-\n-  @Test\n-  void testGetAllTasksWithAdminRole() {\n-    ResponseEntity<TaskanaPagedModel<TaskSummaryRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS),\n-            HttpMethod.GET,\n-            new HttpEntity<>(restHelper.getHeadersAdmin()),\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat((response.getBody()).getLink(IanaLinkRelations.SELF))\n-        .isNotNull();\n-    assertThat(response.getBody().getContent()).hasSize(73);\n-  }\n-\n-  @Test\n-  void testGetAllTasksKeepingFilters() {\n-    ResponseEntity<TaskanaPagedModel<TaskSummaryRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS)\n-                + \"?por.type=VNR&por.value=22334455&sort-by=por.value&order=desc\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat((response.getBody()).getLink(IanaLinkRelations.SELF))\n-        .isNotNull();\n-    assertThat(\n-        response\n-            .getBody()\n-            .getRequiredLink(IanaLinkRelations.SELF)\n-            .getHref()\n-            .endsWith(\n-                \"/api/v1/tasks?por.type=VNR&por.value=22334455&sort-by=por.value&order=desc\"))\n-        .isTrue();\n-  }\n-\n-  @Test\n-  void testThrowsExceptionIfInvalidFilterIsUsed() {\n-    ThrowingCallable httpCall =\n-        () -> template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS) + \"?invalid=VNR\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThatThrownBy(httpCall)\n-        .isInstanceOf(HttpClientErrorException.class)\n-        .hasMessageContaining(\"[invalid]\")\n-        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n-        .isEqualTo(HttpStatus.BAD_REQUEST);\n-  }\n-\n-  @Test\n-  void testGetLastPageSortedByPorValue() {\n-\n-    HttpEntity<String> request = new HttpEntity<>(restHelper.getHeadersAdmin());\n-    ResponseEntity<TaskanaPagedModel<TaskSummaryRepresentationModel>> response =\n-        template.exchange(\n+    @Test\n+    void testGetLastPageSortedByPorValue() {\n+\n+        HttpEntity<String> request = new HttpEntity<String>(restHelper.getHeadersAdmin());\n+        ResponseEntity<TaskSummaryListResource> response = template.exchange(\n             restHelper.toUrl(Mapping.URL_TASKS)\n-                + \"?state=READY,CLAIMED&sort-by=por.value&order=desc&page-size=5&page=14\",\n+                + \"?state=READY,CLAIMED&sort-by=por.value&order=desc&page=15&page-size=5\",\n             HttpMethod.GET,\n             request,\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat((response.getBody()).getContent()).hasSize(1);\n-    assertThat(\n-        response\n-            .getBody()\n-            .getRequiredLink(IanaLinkRelations.LAST)\n+            ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n+        assertEquals(1, response.getBody().getContent().size());\n+        assertTrue(response.getBody().getLink(Link.REL_LAST).getHref().contains(\"page=14\"));\n+        assertEquals(\"TKI:100000000000000000000000000000000000\",\n+            response.getBody().getContent().iterator().next().getTaskId());\n+        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+        assertTrue(response.getBody()\n+            .getLink(Link.REL_SELF)\n             .getHref()\n-            .contains(\"page=14\"))\n-        .isTrue();\n-    assertThat(\"TKI:100000000000000000000000000000000000\")\n-        .isEqualTo(response.getBody().getContent().iterator().next().getTaskId());\n-\n-    assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n-    assertThat(\n-            response\n-                .getBody()\n-                .getRequiredLink(IanaLinkRelations.SELF)\n-                .getHref()\n-                .endsWith(\n-                    \"/api/v1/tasks?\"\n-                        + \"state=READY,CLAIMED&sort-by=por.value&order=desc&page-size=5&page=14\"))\n-        .isTrue();\n-\n-    assertThat(response.getBody().getLink(IanaLinkRelations.FIRST)).isNotNull();\n-    assertThat(response.getBody().getLink(IanaLinkRelations.LAST)).isNotNull();\n-    assertThat(response.getBody().getLink(IanaLinkRelations.PREV)).isNotNull();\n-  }\n-\n-  @Test\n-  void testGetLastPageSortedByDueWithHiddenTasksRemovedFromResult() {\n-    resetDb();\n-    // required because\n-    // ClassificationControllerIntTest.testGetQueryByPorSecondPageSortedByType changes\n-    // tasks and this test depends on the tasks as they are in sampledata\n-\n-    HttpHeaders headers = new HttpHeaders();\n-    headers.add(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    HttpEntity<String> request = new HttpEntity<>(headers);\n-\n-    ResponseEntity<TaskanaPagedModel<TaskSummaryRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS) + \"?sort-by=due&order=desc\",\n-            HttpMethod.GET,\n+            .endsWith(\"/api/v1/tasks?state=READY,CLAIMED&sort-by=por.value&order=desc&page=15&page-size=5\"));\n+        assertNotNull(response.getBody().getLink(Link.REL_FIRST));\n+        assertNotNull(response.getBody().getLink(Link.REL_LAST));\n+        assertNotNull(response.getBody().getLink(Link.REL_PREVIOUS));\n+    }\n+\n+    @Test\n+    void testGetLastPageSortedByDueWithHiddenTasksRemovedFromResult() {\n+        resetDb(); // required because ClassificationControllerIntTest.testGetQueryByPorSecondPageSortedByType changes\n+        // tasks and this test depends on the tasks as they are in sampledata\n+\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.add(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+        HttpEntity<String> request = new HttpEntity<String>(headers);\n+\n+        ResponseEntity<TaskSummaryListResource> response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_TASKS) + \"?sort-by=due&order=desc\", HttpMethod.GET,\n             request,\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat((response.getBody()).getContent()).hasSize(25);\n+            ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n+        assertEquals(25, response.getBody().getContent().size());\n \n-    response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS) + \"?sort-by=due&order=desc&page-size=5&page=5\",\n-            HttpMethod.GET,\n+        response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_TASKS) + \"?sort-by=due&order=desc&page=5&page-size=5\", HttpMethod.GET,\n             request,\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat((response.getBody()).getContent()).hasSize(5);\n-    assertThat(\n-        response.getBody().getRequiredLink(IanaLinkRelations.LAST).getHref().contains(\"page=5\"))\n-        .isTrue();\n-    assertThat(\"TKI:000000000000000000000000000000000023\")\n-        .isEqualTo(response.getBody().getContent().iterator().next().getTaskId());\n-\n-    assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n-    assertThat(\n-        response\n-            .getBody()\n-            .getRequiredLink(IanaLinkRelations.SELF)\n+            ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n+        assertEquals(5, response.getBody().getContent().size());\n+        assertTrue(response.getBody().getLink(Link.REL_LAST).getHref().contains(\"page=5\"));\n+        assertEquals(\"TKI:000000000000000000000000000000000023\",\n+            response.getBody().getContent().iterator().next().getTaskId());\n+        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+        assertTrue(response.getBody()\n+            .getLink(Link.REL_SELF)\n             .getHref()\n-            .endsWith(\"/api/v1/tasks?sort-by=due&order=desc&page-size=5&page=5\"))\n-        .isTrue();\n-\n-    assertThat(response.getBody().getLink(IanaLinkRelations.FIRST)).isNotNull();\n-    assertThat(response.getBody().getLink(IanaLinkRelations.LAST)).isNotNull();\n-    assertThat(response.getBody().getLink(IanaLinkRelations.PREV)).isNotNull();\n-  }\n-\n-  @Test\n-  void testGetQueryByPorSecondPageSortedByType() {\n-    resetDb(); // required because\n-    // ClassificationControllerIntTest.testGetQueryByPorSecondPageSortedByType changes\n-    // tasks and this test depends on the tasks as they are in sampledata\n-\n-    HttpHeaders headers = new HttpHeaders();\n-    headers.add(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    HttpEntity<String> request = new HttpEntity<>(headers);\n-    ResponseEntity<TaskanaPagedModel<TaskSummaryRepresentationModel>> response =\n-        template.exchange(\n+            .endsWith(\"/api/v1/tasks?sort-by=due&order=desc&page=5&page-size=5\"));\n+        assertNotNull(response.getBody().getLink(Link.REL_FIRST));\n+        assertNotNull(response.getBody().getLink(Link.REL_LAST));\n+        assertNotNull(response.getBody().getLink(Link.REL_PREVIOUS));\n+    }\n+\n+    @Test\n+    void testGetQueryByPorSecondPageSortedByType() {\n+        resetDb(); // required because ClassificationControllerIntTest.testGetQueryByPorSecondPageSortedByType changes\n+        // tasks and this test depends on the tasks as they are in sampledata\n+\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.add(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+        HttpEntity<String> request = new HttpEntity<String>(headers);\n+        ResponseEntity<TaskSummaryListResource> response = template.exchange(\n             restHelper.toUrl(Mapping.URL_TASKS)\n-                + \"?por.company=00&por.system=PASystem&por.instance=00&\"\n-                + \"por.type=VNR&por.value=22334455&sort-by=por.type&\"\n-                + \"order=asc&page-size=5&page=2\",\n+                + \"?por.company=00&por.system=PASystem&por.instance=00&por.type=VNR&por.value=22334455&sort-by=por.type&order=asc&page=2&page-size=5\",\n             HttpMethod.GET,\n             request,\n-            TASK_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat(response.getBody().getContent())\n-        .extracting(TaskSummaryRepresentationModel::getTaskId)\n-        .containsOnly(\"TKI:000000000000000000000000000000000013\");\n-\n-    assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n-\n-    assertThat(\n-        response\n-            .getBody()\n-            .getRequiredLink(IanaLinkRelations.SELF)\n+            ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n+        assertEquals(1, response.getBody().getContent().size());\n+        assertEquals(\"TKI:000000000000000000000000000000000013\",\n+            response.getBody().getContent().iterator().next().getTaskId());\n+        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+        assertTrue(response.getBody()\n+            .getLink(Link.REL_SELF)\n             .getHref()\n             .endsWith(\n-                \"/api/v1/tasks?por.company=00&por.system=PASystem&por.instance=00&\"\n-                    + \"por.type=VNR&por.value=22334455&sort-by=por.type&order=asc&\"\n-                    + \"page-size=5&page=2\"))\n-        .isTrue();\n-\n-    assertThat(response.getBody().getLink(IanaLinkRelations.FIRST)).isNotNull();\n-    assertThat(response.getBody().getLink(IanaLinkRelations.LAST)).isNotNull();\n-    assertThat(response.getBody().getLink(IanaLinkRelations.PREV)).isNotNull();\n-  }\n-\n-  @Test\n-  void testGetTaskWithAttachments() throws IOException {\n-    final URL url =\n-        new URL(restHelper.toUrl(\"/api/v1/tasks/\" + \"TKI:000000000000000000000000000000000002\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\");\n-    assertThat(con.getResponseCode()).isEqualTo(200);\n-    final ObjectMapper objectMapper = new ObjectMapper();\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuilder content = new StringBuilder();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n+                \"/api/v1/tasks?por.company=00&por.system=PASystem&por.instance=00&por.type=VNR&por.value=22334455&sort-by=por.type&order=asc&page=2&page-size=5\"));\n+        assertNotNull(response.getBody().getLink(Link.REL_FIRST));\n+        assertNotNull(response.getBody().getLink(Link.REL_LAST));\n+        assertNotNull(response.getBody().getLink(Link.REL_PREVIOUS));\n     }\n-    in.close();\n-    con.disconnect();\n-    String response = content.toString();\n-    JsonNode jsonNode = objectMapper.readTree(response);\n-    String created = jsonNode.get(\"created\").asText();\n-    assertThat(response.contains(\"\\\"attachments\\\":[]\")).isFalse();\n-    assertThat(created.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}Z\")).isTrue();\n-  }\n-\n-  @Test\n-  void testGetAndUpdateTask() throws IOException {\n-    URL url = new URL(restHelper.toUrl(\"/api/v1/tasks/TKI:100000000000000000000000000000000000\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    assertThat(con.getResponseCode()).isEqualTo(200);\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuffer content = new StringBuffer();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n+\n+    @Test\n+    void testGetTaskWithAttachments() throws IOException {\n+        URL url = new URL(restHelper.toUrl(\"/api/v1/tasks/TKI:000000000000000000000000000000000002\"));\n+        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+        con.setRequestMethod(\"GET\");\n+        con.setRequestProperty(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\");\n+        assertEquals(200, con.getResponseCode());\n+        ObjectMapper objectMapper = new ObjectMapper();\n+\n+        BufferedReader in = new BufferedReader(\n+            new InputStreamReader(con.getInputStream()));\n+        String inputLine;\n+        StringBuffer content = new StringBuffer();\n+        while ((inputLine = in.readLine()) != null) {\n+            content.append(inputLine);\n+        }\n+        in.close();\n+        con.disconnect();\n+        String response = content.toString();\n+        JsonNode jsonNode = objectMapper.readTree(response);\n+        String created = jsonNode.get(\"created\").asText();\n+        assertFalse(response.contains(\"\\\"attachments\\\":[]\"));\n+        assertTrue(\n+            created.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}Z\"));\n     }\n-    in.close();\n-    con.disconnect();\n-    final String originalTask = content.toString();\n-\n-    con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"PUT\");\n-    con.setDoOutput(true);\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    con.setRequestProperty(\"Content-Type\", \"application/json\");\n-    BufferedWriter out = new BufferedWriter(new OutputStreamWriter(con.getOutputStream(), UTF_8));\n-    out.write(content.toString());\n-    out.flush();\n-    out.close();\n-    assertThat(con.getResponseCode()).isEqualTo(200);\n-\n-    con.disconnect();\n-\n-    url = new URL(restHelper.toUrl(\"/api/v1/tasks/TKI:100000000000000000000000000000000000\"));\n-    con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    assertThat(con.getResponseCode()).isEqualTo(200);\n-\n-    in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    content = new StringBuffer();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n+\n+    @Test\n+    void testGetAndUpdateTask() throws IOException {\n+        URL url = new URL(restHelper.toUrl(\"/api/v1/tasks/TKI:100000000000000000000000000000000000\"));\n+        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+        con.setRequestMethod(\"GET\");\n+        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+        assertEquals(200, con.getResponseCode());\n+\n+        BufferedReader in = new BufferedReader(\n+            new InputStreamReader(con.getInputStream()));\n+        String inputLine;\n+        StringBuffer content = new StringBuffer();\n+        while ((inputLine = in.readLine()) != null) {\n+            content.append(inputLine);\n+        }\n+        in.close();\n+        con.disconnect();\n+        String originalTask = content.toString();\n+\n+        con = (HttpURLConnection) url.openConnection();\n+        con.setRequestMethod(\"PUT\");\n+        con.setDoOutput(true);\n+        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+        con.setRequestProperty(\"Content-Type\", \"application/json\");\n+        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(con.getOutputStream()));\n+        out.write(content.toString());\n+        out.flush();\n+        out.close();\n+        assertEquals(200, con.getResponseCode());\n+        con.disconnect();\n+\n+        url = new URL(restHelper.toUrl(\"/api/v1/tasks/TKI:100000000000000000000000000000000000\"));\n+        con = (HttpURLConnection) url.openConnection();\n+        con.setRequestMethod(\"GET\");\n+        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+        assertEquals(200, con.getResponseCode());\n+\n+        in = new BufferedReader(\n+            new InputStreamReader(con.getInputStream()));\n+        content = new StringBuffer();\n+        while ((inputLine = in.readLine()) != null) {\n+            content.append(inputLine);\n+        }\n+        in.close();\n+        con.disconnect();\n+        String updatedTask = content.toString();\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+        TaskResource originalTaskObject = mapper.readValue(originalTask, TaskResource.class);\n+        TaskResource updatedTaskObject = mapper.readValue(updatedTask, TaskResource.class);\n+\n+        assertNotEquals(\n+            originalTaskObject.getModified(),\n+            updatedTaskObject.getModified());\n+\n     }\n-    in.close();\n-    con.disconnect();\n-    String updatedTask = content.toString();\n-    ObjectMapper mapper = new ObjectMapper();\n-    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n-    TaskRepresentationModel originalTaskObject =\n-        mapper.readValue(originalTask, TaskRepresentationModel.class);\n-    TaskRepresentationModel updatedTaskObject =\n-        mapper.readValue(updatedTask, TaskRepresentationModel.class);\n-\n-    assertThat(updatedTaskObject.getModified()).isNotEqualTo(originalTaskObject.getModified());\n-  }\n-\n-  @Test\n-  void testCreateAndDeleteTask() {\n-\n-    TaskRepresentationModel taskRepresentationModel = getTaskResourceSample();\n-    ResponseEntity<TaskRepresentationModel> responseCreate =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS),\n-            HttpMethod.POST,\n-            new HttpEntity<>(taskRepresentationModel, restHelper.getHeaders()),\n-            ParameterizedTypeReference.forType(TaskRepresentationModel.class));\n-    assertThat(HttpStatus.CREATED).isEqualTo(responseCreate.getStatusCode());\n-    assertThat(responseCreate.getBody()).isNotNull();\n \n-    String taskIdOfCreatedTask = responseCreate.getBody().getTaskId();\n+    @Test\n+    void testCreateAndDeleteTask() {\n+\n+        TaskResource taskResource = getTaskResourceSample();\n+        ResponseEntity<TaskResource> responseCreate = template.exchange(restHelper.toUrl(Mapping.URL_TASKS),\n+            HttpMethod.POST,\n+            new HttpEntity<>(taskResource, restHelper.getHeaders()),\n+            ParameterizedTypeReference.forType(TaskResource.class));\n+        assertEquals(responseCreate.getStatusCode(), HttpStatus.CREATED);\n+        assertNotNull(responseCreate.getBody());\n \n-    assertThat(taskIdOfCreatedTask).isNotNull();\n-    assertThat(taskIdOfCreatedTask.startsWith(\"TKI:\")).isTrue();\n+        String taskIdOfCreatedTask = responseCreate.getBody().getTaskId();\n+        assertNotNull(taskIdOfCreatedTask);\n+        assertTrue(taskIdOfCreatedTask.startsWith(\"TKI:\"));\n \n-    ResponseEntity<TaskRepresentationModel> responseDeleted =\n-        template.exchange(\n+        ResponseEntity<TaskResource> responseDeleted = template.exchange(\n             restHelper.toUrl(Mapping.URL_TASKS_ID, taskIdOfCreatedTask),\n             HttpMethod.DELETE,\n             new HttpEntity<>(restHelper.getHeadersAdmin()),\n             ParameterizedTypeReference.forType(Void.class));\n \n-    assertThat(responseDeleted.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);\n-  }\n-\n-  /**\n-   * TSK-926: If Planned and Due Date is provided to create a task and not matching to service level\n-   * throw an exception One is calculated by other other date +- service level.\n-   */\n-  @Test\n-  void testCreateWithPlannedAndDueDate() {\n-    TaskRepresentationModel taskRepresentationModel = getTaskResourceSample();\n-    Instant now = Instant.now();\n-    taskRepresentationModel.setPlanned(now.toString());\n-    taskRepresentationModel.setDue(now.toString());\n-\n-    ThrowingCallable httpCall =\n-        () -> template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS),\n-            HttpMethod.POST,\n-            new HttpEntity<>(taskRepresentationModel, restHelper.getHeaders()),\n-            ParameterizedTypeReference.forType(TaskRepresentationModel.class));\n-    assertThatThrownBy(httpCall).isInstanceOf(HttpClientErrorException.class);\n-  }\n-\n-  @Test\n-  void testCreateTaskWithInvalidParameter() throws IOException {\n-    final String taskToCreateJson =\n-        \"{\\\"classificationKey\\\":\\\"L11010\\\",\"\n-            + \"\\\"workbasketSummaryResource\\\":\"\n-            + \"{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n-            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\"\n-            + \"\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\";\n-\n-    URL url = new URL(restHelper.toUrl(Mapping.URL_TASKS));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"POST\");\n-    con.setDoOutput(true);\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    con.setRequestProperty(\"Content-Type\", \"application/json\");\n-    BufferedWriter out = new BufferedWriter(new OutputStreamWriter(con.getOutputStream(), UTF_8));\n-    out.write(taskToCreateJson);\n-    out.flush();\n-    out.close();\n-    assertThat(con.getResponseCode()).isEqualTo(400);\n-\n-    con.disconnect();\n-    final String taskToCreateJson2 =\n-        \"{\\\"classificationSummaryResource\\\":\"\n-            + \"{\\\"classificationId\\\":\\\"CLI:100000000000000000000000000000000004\\\"},\"\n-            + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"\\\"},\"\n-            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\"\n-            + \"\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\";\n-\n-    url = new URL(restHelper.toUrl(Mapping.URL_TASKS));\n-    con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"POST\");\n-    con.setDoOutput(true);\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    con.setRequestProperty(\"Content-Type\", \"application/json\");\n-    out = new BufferedWriter(new OutputStreamWriter(con.getOutputStream(), UTF_8));\n-    out.write(taskToCreateJson2);\n-    out.flush();\n-    out.close();\n-    assertThat(con.getResponseCode()).isEqualTo(400);\n-\n-    con.disconnect();\n-  }\n-\n-  @Test\n-  void testCancelClaimTask() {\n-\n-    final String claimed_task_id = \"TKI:000000000000000000000000000000000027\";\n-    final String user_id_of_claimed_task = \"user_1_2\";\n-\n-    // retrieve task from Rest Api\n-    ResponseEntity<TaskRepresentationModel> getTaskResponse =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS_ID, claimed_task_id),\n-            HttpMethod.GET,\n-            new HttpEntity<>(restHelper.getHeadersUser_1_2()),\n-            ParameterizedTypeReference.forType(TaskRepresentationModel.class));\n-\n-    assertThat(getTaskResponse.getBody()).isNotNull();\n-\n-    TaskRepresentationModel claimedTaskRepresentationModel = getTaskResponse.getBody();\n-    assertThat(claimedTaskRepresentationModel.getState()).isEqualTo(TaskState.CLAIMED);\n-    assertThat(claimedTaskRepresentationModel.getOwner()).isEqualTo(user_id_of_claimed_task);\n+        assertEquals(HttpStatus.NO_CONTENT, responseDeleted.getStatusCode());\n+    }\n \n-    // cancel claim\n-    ResponseEntity<TaskRepresentationModel> cancelClaimResponse =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, claimed_task_id),\n-            HttpMethod.DELETE,\n-            new HttpEntity<>(restHelper.getHeadersUser_1_2()),\n-            ParameterizedTypeReference.forType(TaskRepresentationModel.class));\n+    /**\n+     * TSK-926: If Planned and Due Date is provided to create a task\n+     * and not matching to service level throw an exception\n+     * One is calculated by other other date +- service level.\n+     */\n+    @Test\n+    void testCreateWithPlannedAndDueDate() {\n+        TaskResource taskResource = getTaskResourceSample();\n+        Instant now = Instant.now();\n+        taskResource.setPlanned(now.toString());\n+        taskResource.setDue(now.toString());\n+\n+        HttpClientErrorException ex = Assertions.assertThrows(HttpClientErrorException.class,\n+            () -> template.exchange(restHelper.toUrl(Mapping.URL_TASKS), HttpMethod.POST,\n+                new HttpEntity<>(taskResource, restHelper.getHeaders()),\n+                ParameterizedTypeReference.forType(TaskResource.class)));\n \n-    assertThat(cancelClaimResponse.getBody()).isNotNull();\n-    assertThat(cancelClaimResponse.getStatusCode().is2xxSuccessful());\n+    }\n \n-    TaskRepresentationModel cancelClaimedtaskRepresentationModel = cancelClaimResponse.getBody();\n-    assertThat(cancelClaimedtaskRepresentationModel.getOwner()).isNull();\n-    assertThat(cancelClaimedtaskRepresentationModel.getClaimed()).isNull();\n-    assertThat(cancelClaimedtaskRepresentationModel.getState()).isEqualTo(TaskState.READY);\n-  }\n+    private TaskResource getTaskResourceSample() {\n+        ClassificationSummaryResource classificationResource = new ClassificationSummaryResource();\n+        classificationResource.key = \"L11010\";\n+        WorkbasketSummaryResource workbasketSummaryResource = new WorkbasketSummaryResource();\n+        workbasketSummaryResource.setWorkbasketId(\"WBI:100000000000000000000000000000000004\");\n+\n+        ObjectReference objectReference = new ObjectReference();\n+        objectReference.setCompany(\"MyCompany1\");\n+        objectReference.setSystem(\"MySystem1\");\n+        objectReference.setSystemInstance(\"MyInstance1\");\n+        objectReference.setType(\"MyType1\");\n+        objectReference.setValue(\"00000001\");\n+\n+        TaskResource taskResource = new TaskResource();\n+        taskResource.setClassificationSummaryResource(classificationResource);\n+        taskResource.setWorkbasketSummaryResource(workbasketSummaryResource);\n+        taskResource.setPrimaryObjRef(objectReference);\n+        return taskResource;\n+    }\n \n-  @Test\n-  void testCancelClaimOfClaimedTaskByAnotherUserShouldThrowException() {\n+    @Test\n+    void testCreateTaskWithInvalidParameter() throws IOException {\n+        String taskToCreateJson = \"{\\\"classificationKey\\\":\\\"L11010\\\",\"\n+            + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n+            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\";\n+\n+        URL url = new URL(restHelper.toUrl(Mapping.URL_TASKS));\n+        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+        con.setRequestMethod(\"POST\");\n+        con.setDoOutput(true);\n+        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+        con.setRequestProperty(\"Content-Type\", \"application/json\");\n+        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(con.getOutputStream()));\n+        out.write(taskToCreateJson);\n+        out.flush();\n+        out.close();\n+        assertEquals(400, con.getResponseCode());\n+        con.disconnect();\n+\n+        taskToCreateJson =\n+            \"{\\\"classificationSummaryResource\\\":{\\\"classificationId\\\":\\\"CLI:100000000000000000000000000000000004\\\"},\"\n+                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"\\\"},\"\n+                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\";\n+\n+        url = new URL(restHelper.toUrl(Mapping.URL_TASKS));\n+        con = (HttpURLConnection) url.openConnection();\n+        con.setRequestMethod(\"POST\");\n+        con.setDoOutput(true);\n+        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+        con.setRequestProperty(\"Content-Type\", \"application/json\");\n+        out = new BufferedWriter(new OutputStreamWriter(con.getOutputStream()));\n+        out.write(taskToCreateJson);\n+        out.flush();\n+        out.close();\n+        assertEquals(400, con.getResponseCode());\n+        con.disconnect();\n \n-    final String claimed_task_id = \"TKI:000000000000000000000000000000000026\";\n-    final String user_id_of_claimed_task = \"user_1_1\";\n+    }\n \n-    // retrieve task from Rest Api\n-    ResponseEntity<TaskRepresentationModel> responseGet =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS_ID, claimed_task_id),\n-            HttpMethod.GET,\n-            new HttpEntity<>(restHelper.getHeadersUser_1_2()),\n-            ParameterizedTypeReference.forType(TaskRepresentationModel.class));\n-\n-    assertThat(responseGet.getBody()).isNotNull();\n-    TaskRepresentationModel theTaskRepresentationModel = responseGet.getBody();\n-    assertThat(theTaskRepresentationModel.getState()).isEqualTo(TaskState.CLAIMED);\n-    assertThat(theTaskRepresentationModel.getOwner()).isEqualTo(user_id_of_claimed_task);\n-\n-    // try to cancel claim\n-    ThrowingCallable httpCall =\n-        () -> template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS_ID_CLAIM, claimed_task_id),\n-            HttpMethod.DELETE,\n-            new HttpEntity<>(restHelper.getHeadersUser_1_2()),\n-            ParameterizedTypeReference.forType(TaskRepresentationModel.class));\n-    assertThatThrownBy(httpCall)\n-        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n-        .isEqualTo(HttpStatus.CONFLICT);\n-  }\n-\n-  @Test\n-  void testUpdateTaskOwnerOfReadyTaskSucceeds() {\n-    // setup\n-    final String taskUrlString =\n-        restHelper.toUrl(\"/api/v1/tasks/TKI:000000000000000000000000000000000025\");\n-\n-    // retrieve task from Rest Api\n-    ResponseEntity<TaskRepresentationModel> responseGet =\n-        template.exchange(\n-            taskUrlString,\n-            HttpMethod.GET,\n-            new HttpEntity<>(restHelper.getHeadersUser_1_2()),\n-            ParameterizedTypeReference.forType(TaskRepresentationModel.class));\n-\n-    assertThat(responseGet.getBody()).isNotNull();\n-    TaskRepresentationModel theTaskRepresentationModel = responseGet.getBody();\n-    assertThat(theTaskRepresentationModel.getState()).isEqualTo(TaskState.READY);\n-    assertThat(theTaskRepresentationModel.getOwner()).isNull();\n-\n-    // set Owner and update Task\n-\n-    final String anyUserName = \"dummyUser\";\n-    theTaskRepresentationModel.setOwner(anyUserName);\n-    ResponseEntity<TaskRepresentationModel> responseUpdate =\n-        template.exchange(\n-            taskUrlString,\n-            HttpMethod.PUT,\n-            new HttpEntity<>(theTaskRepresentationModel, restHelper.getHeadersUser_1_2()),\n-            ParameterizedTypeReference.forType(TaskRepresentationModel.class));\n-\n-    assertThat(responseUpdate.getBody()).isNotNull();\n-    TaskRepresentationModel theUpdatedTaskRepresentationModel = responseUpdate.getBody();\n-    assertThat(theUpdatedTaskRepresentationModel.getState()).isEqualTo(TaskState.READY);\n-    assertThat(theUpdatedTaskRepresentationModel.getOwner()).isEqualTo(anyUserName);\n-  }\n-\n-  @Test\n-  void testUpdateTaskOwnerOfClaimedTaskFails() {\n-    // setup\n-    final String taskUrlString =\n-        restHelper.toUrl(\"/api/v1/tasks/TKI:000000000000000000000000000000000026\");\n-\n-    // retrieve task from Rest Api\n-    ResponseEntity<TaskRepresentationModel> responseGet =\n-        template.exchange(\n-            taskUrlString,\n-            HttpMethod.GET,\n-            new HttpEntity<>(restHelper.getHeadersUser_1_2()),\n-            ParameterizedTypeReference.forType(TaskRepresentationModel.class));\n-\n-    assertThat(responseGet.getBody()).isNotNull();\n-    TaskRepresentationModel theTaskRepresentationModel = responseGet.getBody();\n-    assertThat(theTaskRepresentationModel.getState()).isEqualTo(TaskState.CLAIMED);\n-    assertThat(theTaskRepresentationModel.getOwner()).isEqualTo(\"user_1_1\");\n-\n-    // set Owner and update Task\n-\n-    final String anyUserName = \"dummyuser\";\n-    theTaskRepresentationModel.setOwner(anyUserName);\n-\n-    ThrowingCallable httpCall =\n-        () -> template.exchange(\n-            taskUrlString,\n-            HttpMethod.PUT,\n-            new HttpEntity<>(theTaskRepresentationModel, restHelper.getHeadersUser_1_2()),\n-            ParameterizedTypeReference.forType(TaskRepresentationModel.class));\n-    assertThatThrownBy(httpCall)\n-        .isInstanceOf(HttpClientErrorException.class)\n-        .hasMessageContaining(\"409\");\n-  }\n-\n-  private TaskRepresentationModel getTaskResourceSample() {\n-    ClassificationSummaryRepresentationModel classificationResource =\n-        new ClassificationSummaryRepresentationModel();\n-    classificationResource.setKey(\"L11010\");\n-    WorkbasketSummaryRepresentationModel workbasketSummary =\n-        new WorkbasketSummaryRepresentationModel();\n-    workbasketSummary.setWorkbasketId(\n-        \"WBI:100000000000000000000000000000000004\");\n-\n-    ObjectReference objectReference = new ObjectReference();\n-    objectReference.setCompany(\"MyCompany1\");\n-    objectReference.setSystem(\"MySystem1\");\n-    objectReference.setSystemInstance(\"MyInstance1\");\n-    objectReference.setType(\"MyType1\");\n-    objectReference.setValue(\"00000001\");\n-\n-    TaskRepresentationModel taskRepresentationModel = new TaskRepresentationModel();\n-    taskRepresentationModel.setClassificationSummary(classificationResource);\n-    taskRepresentationModel.setWorkbasketSummary(\n-        workbasketSummary);\n-    taskRepresentationModel.setPrimaryObjRef(objectReference);\n-    return taskRepresentationModel;\n-  }\n }\n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java\nindex f16a2a03b..b30ee3f5d 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java\n", "chunk": "@@ -34,405 +34,424 @@ import org.springframework.http.ResponseEntity;\n import org.springframework.web.client.HttpClientErrorException;\n import org.springframework.web.client.RestTemplate;\n \n-import com.fasterxml.jackson.databind.DeserializationFeature;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-\n import pro.taskana.ObjectReference;\n import pro.taskana.RestHelper;\n import pro.taskana.TaskanaSpringBootTest;\n-import pro.taskana.exceptions.SystemException;\n import pro.taskana.rest.resource.ClassificationSummaryResource;\n import pro.taskana.rest.resource.TaskResource;\n import pro.taskana.rest.resource.TaskSummaryListResource;\n import pro.taskana.rest.resource.WorkbasketSummaryResource;\n import pro.taskana.sampledata.SampleDataGenerator;\n \n-/**\n- * Test Task Controller.\n- */\n-\n+/** Test Task Controller. */\n @TaskanaSpringBootTest\n class TaskControllerIntTest {\n \n-    @Value(\"${taskana.schemaName:TASKANA}\")\n-    public String schemaName;\n-\n-    @Autowired RestHelper restHelper;\n-\n-    private static RestTemplate template;\n-\n-    @BeforeAll\n-    static void init() {\n-        template = RestHelper.getRestTemplate();\n-    }\n-\n-    @Autowired\n-    private DataSource dataSource;\n-\n-    void resetDb() {\n-        SampleDataGenerator sampleDataGenerator;\n-        try {\n-            sampleDataGenerator = new SampleDataGenerator(dataSource);\n-            sampleDataGenerator.generateSampleData(schemaName);\n-        } catch (SQLException e) {\n-            throw new SystemException(\"tried to reset DB and caught Exception \" + e, e);\n-        }\n-    }\n-\n-    @Test\n-    void testGetAllTasks() {\n-        ResponseEntity<TaskSummaryListResource> response = template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS), HttpMethod.GET, restHelper.defaultRequest(),\n+  private static RestTemplate template;\n+  @Value(\"${taskana.schemaName:TASKANA}\")\n+  public String schemaName;\n+  @Autowired RestHelper restHelper;\n+  @Autowired private DataSource dataSource;\n+\n+  @BeforeAll\n+  static void init() {\n+    template = RestHelper.getRestTemplate();\n+  }\n+\n+  void resetDb() {\n+    SampleDataGenerator sampleDataGenerator = new SampleDataGenerator(dataSource, schemaName);\n+    sampleDataGenerator.generateSampleData();\n+  }\n+\n+  @Test\n+  void testGetAllTasks() {\n+    ResponseEntity<TaskSummaryListResource> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_TASKS),\n+            HttpMethod.GET,\n+            restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n-        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-        assertEquals(25, response.getBody().getContent().size());\n-    }\n-\n-    @Test\n-    void testGetAllTasksByWorkbasketId() {\n-        ResponseEntity<TaskSummaryListResource> response = template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS) + \"?workbasket-id=WBI:100000000000000000000000000000000001\",\n-            HttpMethod.GET, restHelper.defaultRequest(),\n+    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+    assertEquals(25, response.getBody().getContent().size());\n+  }\n+\n+  @Test\n+  void testGetAllTasksByWorkbasketId() {\n+    ResponseEntity<TaskSummaryListResource> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_TASKS)\n+                + \"?workbasket-id=WBI:100000000000000000000000000000000001\",\n+            HttpMethod.GET,\n+            restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n-        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-        assertEquals(22, response.getBody().getContent().size());\n-    }\n-\n-    @Test\n-    void testGetAllTasksByWorkbasketKeyAndDomain() {\n-        HttpHeaders headers = new HttpHeaders();\n-        headers.add(\"Authorization\", \"Basic dXNlcl8xXzI6dXNlcl8xXzI=\"); // user_1_2\n-        HttpEntity<String> request = new HttpEntity<String>(headers);\n-        ResponseEntity<TaskSummaryListResource> response = template.exchange(\n+    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+    assertEquals(22, response.getBody().getContent().size());\n+  }\n+\n+  @Test\n+  void testGetAllTasksByWorkbasketKeyAndDomain() {\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(\"Authorization\", \"Basic dXNlcl8xXzI6dXNlcl8xXzI=\"); // user_1_2\n+    HttpEntity<String> request = new HttpEntity<String>(headers);\n+    ResponseEntity<TaskSummaryListResource> response =\n+        template.exchange(\n             restHelper.toUrl(Mapping.URL_TASKS) + \"?workbasket-key=USER_1_2&domain=DOMAIN_A\",\n-            HttpMethod.GET, request,\n+            HttpMethod.GET,\n+            request,\n             ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n-        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-        assertEquals(20, response.getBody().getContent().size());\n-    }\n-\n-    @Test\n-    void testExceptionIfKeyIsSetButDomainIsMissing() {\n-\n-        HttpHeaders headers = new HttpHeaders();\n-        headers.add(\"Authorization\", \"Basic dXNlcl8xXzI6dXNlcl8xXzI=\"); // user_1_2\n-        HttpEntity<String> request = new HttpEntity<String>(headers);\n-        try {\n-            ResponseEntity<TaskSummaryListResource> response = template.exchange(\n-                restHelper.toUrl(Mapping.URL_TASKS) + \"?workbasket-key=USER_1_2\",\n-                HttpMethod.GET, request,\n-                ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n-            fail();\n-        } catch (HttpClientErrorException e) {\n-            assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n-        }\n+    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+    assertEquals(20, response.getBody().getContent().size());\n+  }\n+\n+  @Test\n+  void testExceptionIfKeyIsSetButDomainIsMissing() {\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(\"Authorization\", \"Basic dXNlcl8xXzI6dXNlcl8xXzI=\"); // user_1_2\n+    HttpEntity<String> request = new HttpEntity<String>(headers);\n+    try {\n+      ResponseEntity<TaskSummaryListResource> response =\n+          template.exchange(\n+              restHelper.toUrl(Mapping.URL_TASKS) + \"?workbasket-key=USER_1_2\",\n+              HttpMethod.GET,\n+              request,\n+              ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n+      fail();\n+    } catch (HttpClientErrorException e) {\n+      assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n     }\n+  }\n \n-    @Test\n-    void testGetAllTasksWithAdminRole() {\n-        ResponseEntity<TaskSummaryListResource> response = template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS), HttpMethod.GET, new HttpEntity<>(restHelper.getHeadersAdmin()),\n+  @Test\n+  void testGetAllTasksWithAdminRole() {\n+    ResponseEntity<TaskSummaryListResource> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_TASKS),\n+            HttpMethod.GET,\n+            new HttpEntity<>(restHelper.getHeadersAdmin()),\n             ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n-        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-        assertEquals(73, response.getBody().getContent().size());\n-    }\n-\n-    @Test\n-    void testGetAllTasksKeepingFilters() {\n-        ResponseEntity<TaskSummaryListResource> response = template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS) + \"?por.type=VNR&por.value=22334455&sort-by=por.value&order=desc\",\n-            HttpMethod.GET, restHelper.defaultRequest(),\n+    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+    assertEquals(73, response.getBody().getContent().size());\n+  }\n+\n+  @Test\n+  void testGetAllTasksKeepingFilters() {\n+    ResponseEntity<TaskSummaryListResource> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_TASKS)\n+                + \"?por.type=VNR&por.value=22334455&sort-by=por.value&order=desc\",\n+            HttpMethod.GET,\n+            restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n-        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-        assertTrue(response.getBody()\n+    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+    assertTrue(\n+        response\n+            .getBody()\n             .getLink(Link.REL_SELF)\n             .getHref()\n-            .endsWith(\"/api/v1/tasks?por.type=VNR&por.value=22334455&sort-by=por.value&order=desc\"));\n-    }\n-\n-    @Test\n-    void testThrowsExceptionIfInvalidFilterIsUsed() {\n-        try {\n-            template.exchange(\n-                restHelper.toUrl(Mapping.URL_TASKS) + \"?invalid=VNR\",\n-                HttpMethod.GET, restHelper.defaultRequest(),\n-                ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n-            fail();\n-        } catch (HttpClientErrorException e) {\n-            assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n-            assertTrue(e.getResponseBodyAsString().contains(\"[invalid]\"));\n-        }\n+            .endsWith(\n+                \"/api/v1/tasks?por.type=VNR&por.value=22334455&sort-by=por.value&order=desc\"));\n+  }\n+\n+  @Test\n+  void testThrowsExceptionIfInvalidFilterIsUsed() {\n+    try {\n+      template.exchange(\n+          restHelper.toUrl(Mapping.URL_TASKS) + \"?invalid=VNR\",\n+          HttpMethod.GET,\n+          restHelper.defaultRequest(),\n+          ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n+      fail();\n+    } catch (HttpClientErrorException e) {\n+      assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n+      assertTrue(e.getResponseBodyAsString().contains(\"[invalid]\"));\n     }\n+  }\n \n-    @Test\n-    void testGetLastPageSortedByPorValue() {\n+  @Test\n+  void testGetLastPageSortedByPorValue() {\n \n-        HttpEntity<String> request = new HttpEntity<String>(restHelper.getHeadersAdmin());\n-        ResponseEntity<TaskSummaryListResource> response = template.exchange(\n+    HttpEntity<String> request = new HttpEntity<String>(restHelper.getHeadersAdmin());\n+    ResponseEntity<TaskSummaryListResource> response =\n+        template.exchange(\n             restHelper.toUrl(Mapping.URL_TASKS)\n                 + \"?state=READY,CLAIMED&sort-by=por.value&order=desc&page=15&page-size=5\",\n             HttpMethod.GET,\n             request,\n             ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n-        assertEquals(1, response.getBody().getContent().size());\n-        assertTrue(response.getBody().getLink(Link.REL_LAST).getHref().contains(\"page=14\"));\n-        assertEquals(\"TKI:100000000000000000000000000000000000\",\n-            response.getBody().getContent().iterator().next().getTaskId());\n-        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-        assertTrue(response.getBody()\n+    assertEquals(1, response.getBody().getContent().size());\n+    assertTrue(response.getBody().getLink(Link.REL_LAST).getHref().contains(\"page=14\"));\n+    assertEquals(\n+        \"TKI:100000000000000000000000000000000000\",\n+        response.getBody().getContent().iterator().next().getTaskId());\n+    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+    assertTrue(\n+        response\n+            .getBody()\n             .getLink(Link.REL_SELF)\n             .getHref()\n-            .endsWith(\"/api/v1/tasks?state=READY,CLAIMED&sort-by=por.value&order=desc&page=15&page-size=5\"));\n-        assertNotNull(response.getBody().getLink(Link.REL_FIRST));\n-        assertNotNull(response.getBody().getLink(Link.REL_LAST));\n-        assertNotNull(response.getBody().getLink(Link.REL_PREVIOUS));\n-    }\n-\n-    @Test\n-    void testGetLastPageSortedByDueWithHiddenTasksRemovedFromResult() {\n-        resetDb(); // required because ClassificationControllerIntTest.testGetQueryByPorSecondPageSortedByType changes\n-        // tasks and this test depends on the tasks as they are in sampledata\n-\n-        HttpHeaders headers = new HttpHeaders();\n-        headers.add(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-        HttpEntity<String> request = new HttpEntity<String>(headers);\n-\n-        ResponseEntity<TaskSummaryListResource> response = template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS) + \"?sort-by=due&order=desc\", HttpMethod.GET,\n+            .endsWith(\n+                \"/api/v1/tasks?state=READY,CLAIMED&sort-by=por.value&order=desc&page=15&page-size=5\"));\n+    assertNotNull(response.getBody().getLink(Link.REL_FIRST));\n+    assertNotNull(response.getBody().getLink(Link.REL_LAST));\n+    assertNotNull(response.getBody().getLink(Link.REL_PREVIOUS));\n+  }\n+\n+  @Test\n+  void testGetLastPageSortedByDueWithHiddenTasksRemovedFromResult() {\n+    resetDb(); // required because\n+               // ClassificationControllerIntTest.testGetQueryByPorSecondPageSortedByType changes\n+    // tasks and this test depends on the tasks as they are in sampledata\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+    HttpEntity<String> request = new HttpEntity<String>(headers);\n+\n+    ResponseEntity<TaskSummaryListResource> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_TASKS) + \"?sort-by=due&order=desc\",\n+            HttpMethod.GET,\n             request,\n             ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n-        assertEquals(25, response.getBody().getContent().size());\n+    assertEquals(25, response.getBody().getContent().size());\n \n-        response = template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS) + \"?sort-by=due&order=desc&page=5&page-size=5\", HttpMethod.GET,\n+    response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_TASKS) + \"?sort-by=due&order=desc&page=5&page-size=5\",\n+            HttpMethod.GET,\n             request,\n             ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n-        assertEquals(5, response.getBody().getContent().size());\n-        assertTrue(response.getBody().getLink(Link.REL_LAST).getHref().contains(\"page=5\"));\n-        assertEquals(\"TKI:000000000000000000000000000000000023\",\n-            response.getBody().getContent().iterator().next().getTaskId());\n-        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-        assertTrue(response.getBody()\n+    assertEquals(5, response.getBody().getContent().size());\n+    assertTrue(response.getBody().getLink(Link.REL_LAST).getHref().contains(\"page=5\"));\n+    assertEquals(\n+        \"TKI:000000000000000000000000000000000023\",\n+        response.getBody().getContent().iterator().next().getTaskId());\n+    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+    assertTrue(\n+        response\n+            .getBody()\n             .getLink(Link.REL_SELF)\n             .getHref()\n             .endsWith(\"/api/v1/tasks?sort-by=due&order=desc&page=5&page-size=5\"));\n-        assertNotNull(response.getBody().getLink(Link.REL_FIRST));\n-        assertNotNull(response.getBody().getLink(Link.REL_LAST));\n-        assertNotNull(response.getBody().getLink(Link.REL_PREVIOUS));\n-    }\n-\n-    @Test\n-    void testGetQueryByPorSecondPageSortedByType() {\n-        resetDb(); // required because ClassificationControllerIntTest.testGetQueryByPorSecondPageSortedByType changes\n-        // tasks and this test depends on the tasks as they are in sampledata\n-\n-        HttpHeaders headers = new HttpHeaders();\n-        headers.add(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-        HttpEntity<String> request = new HttpEntity<String>(headers);\n-        ResponseEntity<TaskSummaryListResource> response = template.exchange(\n+    assertNotNull(response.getBody().getLink(Link.REL_FIRST));\n+    assertNotNull(response.getBody().getLink(Link.REL_LAST));\n+    assertNotNull(response.getBody().getLink(Link.REL_PREVIOUS));\n+  }\n+\n+  @Test\n+  void testGetQueryByPorSecondPageSortedByType() {\n+    resetDb(); // required because\n+               // ClassificationControllerIntTest.testGetQueryByPorSecondPageSortedByType changes\n+    // tasks and this test depends on the tasks as they are in sampledata\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+    HttpEntity<String> request = new HttpEntity<String>(headers);\n+    ResponseEntity<TaskSummaryListResource> response =\n+        template.exchange(\n             restHelper.toUrl(Mapping.URL_TASKS)\n                 + \"?por.company=00&por.system=PASystem&por.instance=00&por.type=VNR&por.value=22334455&sort-by=por.type&order=asc&page=2&page-size=5\",\n             HttpMethod.GET,\n             request,\n             ParameterizedTypeReference.forType(TaskSummaryListResource.class));\n-        assertEquals(1, response.getBody().getContent().size());\n-        assertEquals(\"TKI:000000000000000000000000000000000013\",\n-            response.getBody().getContent().iterator().next().getTaskId());\n-        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-        assertTrue(response.getBody()\n+    assertEquals(1, response.getBody().getContent().size());\n+    assertEquals(\n+        \"TKI:000000000000000000000000000000000013\",\n+        response.getBody().getContent().iterator().next().getTaskId());\n+    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+    assertTrue(\n+        response\n+            .getBody()\n             .getLink(Link.REL_SELF)\n             .getHref()\n             .endsWith(\n                 \"/api/v1/tasks?por.company=00&por.system=PASystem&por.instance=00&por.type=VNR&por.value=22334455&sort-by=por.type&order=asc&page=2&page-size=5\"));\n-        assertNotNull(response.getBody().getLink(Link.REL_FIRST));\n-        assertNotNull(response.getBody().getLink(Link.REL_LAST));\n-        assertNotNull(response.getBody().getLink(Link.REL_PREVIOUS));\n+    assertNotNull(response.getBody().getLink(Link.REL_FIRST));\n+    assertNotNull(response.getBody().getLink(Link.REL_LAST));\n+    assertNotNull(response.getBody().getLink(Link.REL_PREVIOUS));\n+  }\n+\n+  @Test\n+  void testGetTaskWithAttachments() throws IOException {\n+    URL url = new URL(restHelper.toUrl(\"/api/v1/tasks/TKI:000000000000000000000000000000000002\"));\n+    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"GET\");\n+    con.setRequestProperty(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\");\n+    assertEquals(200, con.getResponseCode());\n+    ObjectMapper objectMapper = new ObjectMapper();\n+\n+    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n+    String inputLine;\n+    StringBuffer content = new StringBuffer();\n+    while ((inputLine = in.readLine()) != null) {\n+      content.append(inputLine);\n     }\n-\n-    @Test\n-    void testGetTaskWithAttachments() throws IOException {\n-        URL url = new URL(restHelper.toUrl(\"/api/v1/tasks/TKI:000000000000000000000000000000000002\"));\n-        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-        con.setRequestMethod(\"GET\");\n-        con.setRequestProperty(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\");\n-        assertEquals(200, con.getResponseCode());\n-        ObjectMapper objectMapper = new ObjectMapper();\n-\n-        BufferedReader in = new BufferedReader(\n-            new InputStreamReader(con.getInputStream()));\n-        String inputLine;\n-        StringBuffer content = new StringBuffer();\n-        while ((inputLine = in.readLine()) != null) {\n-            content.append(inputLine);\n-        }\n-        in.close();\n-        con.disconnect();\n-        String response = content.toString();\n-        JsonNode jsonNode = objectMapper.readTree(response);\n-        String created = jsonNode.get(\"created\").asText();\n-        assertFalse(response.contains(\"\\\"attachments\\\":[]\"));\n-        assertTrue(\n-            created.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}Z\"));\n+    in.close();\n+    con.disconnect();\n+    String response = content.toString();\n+    JsonNode jsonNode = objectMapper.readTree(response);\n+    String created = jsonNode.get(\"created\").asText();\n+    assertFalse(response.contains(\"\\\"attachments\\\":[]\"));\n+    assertTrue(created.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}Z\"));\n+  }\n+\n+  @Test\n+  void testGetAndUpdateTask() throws IOException {\n+    URL url = new URL(restHelper.toUrl(\"/api/v1/tasks/TKI:100000000000000000000000000000000000\"));\n+    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"GET\");\n+    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+    assertEquals(200, con.getResponseCode());\n+\n+    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n+    String inputLine;\n+    StringBuffer content = new StringBuffer();\n+    while ((inputLine = in.readLine()) != null) {\n+      content.append(inputLine);\n     }\n-\n-    @Test\n-    void testGetAndUpdateTask() throws IOException {\n-        URL url = new URL(restHelper.toUrl(\"/api/v1/tasks/TKI:100000000000000000000000000000000000\"));\n-        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-        con.setRequestMethod(\"GET\");\n-        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-        assertEquals(200, con.getResponseCode());\n-\n-        BufferedReader in = new BufferedReader(\n-            new InputStreamReader(con.getInputStream()));\n-        String inputLine;\n-        StringBuffer content = new StringBuffer();\n-        while ((inputLine = in.readLine()) != null) {\n-            content.append(inputLine);\n-        }\n-        in.close();\n-        con.disconnect();\n-        String originalTask = content.toString();\n-\n-        con = (HttpURLConnection) url.openConnection();\n-        con.setRequestMethod(\"PUT\");\n-        con.setDoOutput(true);\n-        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-        con.setRequestProperty(\"Content-Type\", \"application/json\");\n-        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(con.getOutputStream()));\n-        out.write(content.toString());\n-        out.flush();\n-        out.close();\n-        assertEquals(200, con.getResponseCode());\n-        con.disconnect();\n-\n-        url = new URL(restHelper.toUrl(\"/api/v1/tasks/TKI:100000000000000000000000000000000000\"));\n-        con = (HttpURLConnection) url.openConnection();\n-        con.setRequestMethod(\"GET\");\n-        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-        assertEquals(200, con.getResponseCode());\n-\n-        in = new BufferedReader(\n-            new InputStreamReader(con.getInputStream()));\n-        content = new StringBuffer();\n-        while ((inputLine = in.readLine()) != null) {\n-            content.append(inputLine);\n-        }\n-        in.close();\n-        con.disconnect();\n-        String updatedTask = content.toString();\n-        ObjectMapper mapper = new ObjectMapper();\n-        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n-        TaskResource originalTaskObject = mapper.readValue(originalTask, TaskResource.class);\n-        TaskResource updatedTaskObject = mapper.readValue(updatedTask, TaskResource.class);\n-\n-        assertNotEquals(\n-            originalTaskObject.getModified(),\n-            updatedTaskObject.getModified());\n-\n+    in.close();\n+    con.disconnect();\n+    String originalTask = content.toString();\n+\n+    con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"PUT\");\n+    con.setDoOutput(true);\n+    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+    con.setRequestProperty(\"Content-Type\", \"application/json\");\n+    BufferedWriter out = new BufferedWriter(new OutputStreamWriter(con.getOutputStream()));\n+    out.write(content.toString());\n+    out.flush();\n+    out.close();\n+    assertEquals(200, con.getResponseCode());\n+    con.disconnect();\n+\n+    url = new URL(restHelper.toUrl(\"/api/v1/tasks/TKI:100000000000000000000000000000000000\"));\n+    con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"GET\");\n+    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+    assertEquals(200, con.getResponseCode());\n+\n+    in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n+    content = new StringBuffer();\n+    while ((inputLine = in.readLine()) != null) {\n+      content.append(inputLine);\n     }\n-\n-    @Test\n-    void testCreateAndDeleteTask() {\n-\n-        TaskResource taskResource = getTaskResourceSample();\n-        ResponseEntity<TaskResource> responseCreate = template.exchange(restHelper.toUrl(Mapping.URL_TASKS),\n+    in.close();\n+    con.disconnect();\n+    String updatedTask = content.toString();\n+    ObjectMapper mapper = new ObjectMapper();\n+    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    TaskResource originalTaskObject = mapper.readValue(originalTask, TaskResource.class);\n+    TaskResource updatedTaskObject = mapper.readValue(updatedTask, TaskResource.class);\n+\n+    assertNotEquals(originalTaskObject.getModified(), updatedTaskObject.getModified());\n+  }\n+\n+  @Test\n+  void testCreateAndDeleteTask() {\n+\n+    TaskResource taskResource = getTaskResourceSample();\n+    ResponseEntity<TaskResource> responseCreate =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_TASKS),\n             HttpMethod.POST,\n             new HttpEntity<>(taskResource, restHelper.getHeaders()),\n             ParameterizedTypeReference.forType(TaskResource.class));\n-        assertEquals(responseCreate.getStatusCode(), HttpStatus.CREATED);\n-        assertNotNull(responseCreate.getBody());\n+    assertEquals(responseCreate.getStatusCode(), HttpStatus.CREATED);\n+    assertNotNull(responseCreate.getBody());\n \n-        String taskIdOfCreatedTask = responseCreate.getBody().getTaskId();\n-        assertNotNull(taskIdOfCreatedTask);\n-        assertTrue(taskIdOfCreatedTask.startsWith(\"TKI:\"));\n+    String taskIdOfCreatedTask = responseCreate.getBody().getTaskId();\n+    assertNotNull(taskIdOfCreatedTask);\n+    assertTrue(taskIdOfCreatedTask.startsWith(\"TKI:\"));\n \n-        ResponseEntity<TaskResource> responseDeleted = template.exchange(\n+    ResponseEntity<TaskResource> responseDeleted =\n+        template.exchange(\n             restHelper.toUrl(Mapping.URL_TASKS_ID, taskIdOfCreatedTask),\n             HttpMethod.DELETE,\n             new HttpEntity<>(restHelper.getHeadersAdmin()),\n             ParameterizedTypeReference.forType(Void.class));\n \n-        assertEquals(HttpStatus.NO_CONTENT, responseDeleted.getStatusCode());\n-    }\n-\n-    /**\n-     * TSK-926: If Planned and Due Date is provided to create a task\n-     * and not matching to service level throw an exception\n-     * One is calculated by other other date +- service level.\n-     */\n-    @Test\n-    void testCreateWithPlannedAndDueDate() {\n-        TaskResource taskResource = getTaskResourceSample();\n-        Instant now = Instant.now();\n-        taskResource.setPlanned(now.toString());\n-        taskResource.setDue(now.toString());\n-\n-        HttpClientErrorException ex = Assertions.assertThrows(HttpClientErrorException.class,\n-            () -> template.exchange(restHelper.toUrl(Mapping.URL_TASKS), HttpMethod.POST,\n-                new HttpEntity<>(taskResource, restHelper.getHeaders()),\n-                ParameterizedTypeReference.forType(TaskResource.class)));\n-\n-    }\n-\n-    private TaskResource getTaskResourceSample() {\n-        ClassificationSummaryResource classificationResource = new ClassificationSummaryResource();\n-        classificationResource.key = \"L11010\";\n-        WorkbasketSummaryResource workbasketSummaryResource = new WorkbasketSummaryResource();\n-        workbasketSummaryResource.setWorkbasketId(\"WBI:100000000000000000000000000000000004\");\n-\n-        ObjectReference objectReference = new ObjectReference();\n-        objectReference.setCompany(\"MyCompany1\");\n-        objectReference.setSystem(\"MySystem1\");\n-        objectReference.setSystemInstance(\"MyInstance1\");\n-        objectReference.setType(\"MyType1\");\n-        objectReference.setValue(\"00000001\");\n-\n-        TaskResource taskResource = new TaskResource();\n-        taskResource.setClassificationSummaryResource(classificationResource);\n-        taskResource.setWorkbasketSummaryResource(workbasketSummaryResource);\n-        taskResource.setPrimaryObjRef(objectReference);\n-        return taskResource;\n-    }\n-\n-    @Test\n-    void testCreateTaskWithInvalidParameter() throws IOException {\n-        String taskToCreateJson = \"{\\\"classificationKey\\\":\\\"L11010\\\",\"\n+    assertEquals(HttpStatus.NO_CONTENT, responseDeleted.getStatusCode());\n+  }\n+\n+  /**\n+   * TSK-926: If Planned and Due Date is provided to create a task and not matching to service level\n+   * throw an exception One is calculated by other other date +- service level.\n+   */\n+  @Test\n+  void testCreateWithPlannedAndDueDate() {\n+    TaskResource taskResource = getTaskResourceSample();\n+    Instant now = Instant.now();\n+    taskResource.setPlanned(now.toString());\n+    taskResource.setDue(now.toString());\n+\n+    HttpClientErrorException ex =\n+        Assertions.assertThrows(\n+            HttpClientErrorException.class,\n+            () ->\n+                template.exchange(\n+                    restHelper.toUrl(Mapping.URL_TASKS),\n+                    HttpMethod.POST,\n+                    new HttpEntity<>(taskResource, restHelper.getHeaders()),\n+                    ParameterizedTypeReference.forType(TaskResource.class)));\n+  }\n+\n+  @Test\n+  void testCreateTaskWithInvalidParameter() throws IOException {\n+    String taskToCreateJson =\n+        \"{\\\"classificationKey\\\":\\\"L11010\\\",\"\n             + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"WBI:100000000000000000000000000000000004\\\"},\"\n             + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\";\n \n-        URL url = new URL(restHelper.toUrl(Mapping.URL_TASKS));\n-        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-        con.setRequestMethod(\"POST\");\n-        con.setDoOutput(true);\n-        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-        con.setRequestProperty(\"Content-Type\", \"application/json\");\n-        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(con.getOutputStream()));\n-        out.write(taskToCreateJson);\n-        out.flush();\n-        out.close();\n-        assertEquals(400, con.getResponseCode());\n-        con.disconnect();\n-\n-        taskToCreateJson =\n-            \"{\\\"classificationSummaryResource\\\":{\\\"classificationId\\\":\\\"CLI:100000000000000000000000000000000004\\\"},\"\n-                + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"\\\"},\"\n-                + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\";\n-\n-        url = new URL(restHelper.toUrl(Mapping.URL_TASKS));\n-        con = (HttpURLConnection) url.openConnection();\n-        con.setRequestMethod(\"POST\");\n-        con.setDoOutput(true);\n-        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-        con.setRequestProperty(\"Content-Type\", \"application/json\");\n-        out = new BufferedWriter(new OutputStreamWriter(con.getOutputStream()));\n-        out.write(taskToCreateJson);\n-        out.flush();\n-        out.close();\n-        assertEquals(400, con.getResponseCode());\n-        con.disconnect();\n-\n-    }\n+    URL url = new URL(restHelper.toUrl(Mapping.URL_TASKS));\n+    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"POST\");\n+    con.setDoOutput(true);\n+    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+    con.setRequestProperty(\"Content-Type\", \"application/json\");\n+    BufferedWriter out = new BufferedWriter(new OutputStreamWriter(con.getOutputStream()));\n+    out.write(taskToCreateJson);\n+    out.flush();\n+    out.close();\n+    assertEquals(400, con.getResponseCode());\n+    con.disconnect();\n+\n+    taskToCreateJson =\n+        \"{\\\"classificationSummaryResource\\\":{\\\"classificationId\\\":\\\"CLI:100000000000000000000000000000000004\\\"},\"\n+            + \"\\\"workbasketSummaryResource\\\":{\\\"workbasketId\\\":\\\"\\\"},\"\n+            + \"\\\"primaryObjRef\\\":{\\\"company\\\":\\\"MyCompany1\\\",\\\"system\\\":\\\"MySystem1\\\",\\\"systemInstance\\\":\\\"MyInstance1\\\",\\\"type\\\":\\\"MyType1\\\",\\\"value\\\":\\\"00000001\\\"}}\";\n \n+    url = new URL(restHelper.toUrl(Mapping.URL_TASKS));\n+    con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"POST\");\n+    con.setDoOutput(true);\n+    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+    con.setRequestProperty(\"Content-Type\", \"application/json\");\n+    out = new BufferedWriter(new OutputStreamWriter(con.getOutputStream()));\n+    out.write(taskToCreateJson);\n+    out.flush();\n+    out.close();\n+    assertEquals(400, con.getResponseCode());\n+    con.disconnect();\n+  }\n+\n+  private TaskResource getTaskResourceSample() {\n+    ClassificationSummaryResource classificationResource = new ClassificationSummaryResource();\n+    classificationResource.key = \"L11010\";\n+    WorkbasketSummaryResource workbasketSummaryResource = new WorkbasketSummaryResource();\n+    workbasketSummaryResource.setWorkbasketId(\"WBI:100000000000000000000000000000000004\");\n+\n+    ObjectReference objectReference = new ObjectReference();\n+    objectReference.setCompany(\"MyCompany1\");\n+    objectReference.setSystem(\"MySystem1\");\n+    objectReference.setSystemInstance(\"MyInstance1\");\n+    objectReference.setType(\"MyType1\");\n+    objectReference.setValue(\"00000001\");\n+\n+    TaskResource taskResource = new TaskResource();\n+    taskResource.setClassificationSummaryResource(classificationResource);\n+    taskResource.setWorkbasketSummaryResource(workbasketSummaryResource);\n+    taskResource.setPrimaryObjRef(objectReference);\n+    return taskResource;\n+  }\n }\n", "next_change": {"commit": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java\nindex b30ee3f5d..7fc03cfe8 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java\n", "chunk": "@@ -448,10 +890,11 @@ class TaskControllerIntTest {\n     objectReference.setType(\"MyType1\");\n     objectReference.setValue(\"00000001\");\n \n-    TaskResource taskResource = new TaskResource();\n-    taskResource.setClassificationSummaryResource(classificationResource);\n-    taskResource.setWorkbasketSummaryResource(workbasketSummaryResource);\n-    taskResource.setPrimaryObjRef(objectReference);\n-    return taskResource;\n+    TaskRepresentationModel taskRepresentationModel = new TaskRepresentationModel();\n+    taskRepresentationModel.setClassificationSummary(classificationResource);\n+    taskRepresentationModel.setWorkbasketSummary(\n+        workbasketSummary);\n+    taskRepresentationModel.setPrimaryObjRef(objectReference);\n+    return taskRepresentationModel;\n   }\n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "committedDate": "2019-12-04 09:56:34 +0100", "message": "TSK-967: Merge module taskana-rest-spring and taskana-rest-spring-test"}, {"oid": "f8443897f697106e3caa867fd94e7b41eb0bb195", "committedDate": "2019-12-26 00:34:38 +0100", "message": "TSK-967: Refactor Taskana-Data module to use a SampleDataProvider"}, {"oid": "bf152674d3e36fe1f676b3d457d5357db5c31e6e", "committedDate": "2019-12-26 00:34:38 +0100", "message": "TSK-967: Refactor the DBCleaner"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "7509bb0f1c7cfb9e8bcc634fbd3f80c0b74b5ca6", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: Fix simple checkstyle warnings"}, {"oid": "c1d74b212648dad55f3d09e2c19868098ebbdb8a", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: automatic formatting number 2"}, {"oid": "4d560532bd98ef3dfe573c40c00506fcef21f912", "committedDate": "2020-01-23 14:23:56 +0100", "message": "TSK-987: Fix Spotbugs - reliance on default encoding"}, {"oid": "b86f3e5b65e998bc1fa7c4a1247cfd8417d9e175", "committedDate": "2020-01-27 11:49:59 +0100", "message": "TSK-987: Fix Spotbugs - Dead store to local variable"}, {"oid": "b01e5c3de6dc53119d86c21ba094238bcdfcbcff", "committedDate": "2020-01-30 11:08:58 +0100", "message": "TSK-989 Filter Tasks by planned TimeIntervals (REST)"}, {"oid": "3b13b9a95e4d7d1cf172f22fa0f2679ff1c5f79b", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 after initial refactoring"}, {"oid": "442385482236ad0c25830becbadddf30f6e7bf2d", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 fix dependent projects"}, {"oid": "22ac25f5c9244bdc67752b7adcb9d98f4b8d6fa2", "committedDate": "2020-02-06 14:05:27 +0100", "message": "TSK-927 reserve a task via SetOwner"}, {"oid": "12a94193bea284374106fd074aeb84be3a369acc", "committedDate": "2020-02-06 14:05:27 +0100", "message": "TSK-927 set owner - comments from Holger"}, {"oid": "01545e476e8e41bafd6dfc7ff4f17d453828c044", "committedDate": "2020-02-12 12:53:08 +0100", "message": "TSK-1106 Make ClassificationSummaryResource attributes private"}, {"oid": "5c7d38451ce7cbea2ad52d3b84be72d49c474c71", "committedDate": "2020-02-13 15:09:39 +0100", "message": "TSK-1094 introduce models package for */api and */internal"}, {"oid": "d34a44a32ab6762e4f53bfa9ea4f85741db57728", "committedDate": "2020-02-21 11:32:45 +0100", "message": "TSK-1137 Endpoint to cancel claim task for REST-API"}, {"oid": "ebd2098434a4bb0f1260cba3a8625d696cdb63fb", "committedDate": "2020-03-03 11:40:47 +0100", "message": "TSK-1147 Replaced getRestTemplate() by constant TEMPLATE"}, {"oid": "fc3f9e186850c7a8eb42c60875e516b357ae20e8", "committedDate": "2020-03-23 07:37:54 +0100", "message": "TSK-1164: refactor code which is using assertJ's assertThatThrownBy and lambda expression with line breaks"}, {"oid": "b79c4891e39404e40561b13efa961a6c2a0e31d0", "committedDate": "2020-04-09 09:59:02 +0200", "message": "TSK-1178"}, {"oid": "2c5634c917e2246d56aff6472f7d7abc0a12a96b", "committedDate": "2020-04-20 08:10:16 +0200", "message": "TSK-1180: migrate from JUnit 5 assertions to assertJ assertions"}, {"oid": "101072d3e94d53ff1f448608f60ab9c3c740246e", "committedDate": "2020-04-22 10:05:43 +0200", "message": "TSK-1188 Enable combo filter for tasks"}, {"oid": "a8e44dead343598b7266254616a7f8559ee941ba", "committedDate": "2020-04-23 09:49:16 +0200", "message": "TSK-1083: Updated HATEOAS from version 0.24.0 to version 1.0.4"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2NTYxNQ==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422665615", "body": "ACCESS_ITEM please :) two words", "bodyText": "ACCESS_ITEM please :) two words", "bodyHTML": "<p dir=\"auto\">ACCESS_ITEM please :) two words</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T16:12:08Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java", "diffHunk": "@@ -21,17 +21,26 @@\n \n import pro.taskana.RestHelper;\n import pro.taskana.TaskanaSpringBootTest;\n-import pro.taskana.rest.resource.DistributionTargetListResource;\n-import pro.taskana.rest.resource.DistributionTargetResource;\n-import pro.taskana.rest.resource.WorkbasketAccessItemListResource;\n-import pro.taskana.rest.resource.WorkbasketResource;\n-import pro.taskana.rest.resource.WorkbasketSummaryListResource;\n+import pro.taskana.rest.resource.TaskanaPagedModel;\n+import pro.taskana.rest.resource.WorkbasketAccessItemRepresentationModel;\n+import pro.taskana.rest.resource.WorkbasketRepresentationModel;\n+import pro.taskana.rest.resource.WorkbasketSummaryRepresentationModel;\n import pro.taskana.workbasket.api.WorkbasketType;\n \n /** Test WorkbasketController. */\n @TaskanaSpringBootTest\n class WorkbasketControllerIntTest {\n \n+  private static final ParameterizedTypeReference<\n+          TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n+      WORKBASKET_ACCESSITEM_PAGE_MODEL_TYPE =", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\nindex e01736a7f..a22d58782 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n", "chunk": "@@ -33,7 +33,7 @@ class WorkbasketControllerIntTest {\n \n   private static final ParameterizedTypeReference<\n           TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n-      WORKBASKET_ACCESSITEM_PAGE_MODEL_TYPE =\n+      WORKBASKET_ACCESS_ITEM_PAGE_MODEL_TYPE =\n           new ParameterizedTypeReference<\n               TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>() {};\n   private static final ParameterizedTypeReference<\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\nindex e01736a7f..0c4fb5c18 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n", "chunk": "@@ -33,7 +33,7 @@ class WorkbasketControllerIntTest {\n \n   private static final ParameterizedTypeReference<\n           TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n-      WORKBASKET_ACCESSITEM_PAGE_MODEL_TYPE =\n+      WORKBASKET_ACCESS_ITEM_PAGE_MODEL_TYPE =\n           new ParameterizedTypeReference<\n               TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>() {};\n   private static final ParameterizedTypeReference<\n", "next_change": {"commit": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\nindex 0c4fb5c18..bddf988fd 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n", "chunk": "@@ -21,272 +21,109 @@ import org.springframework.web.client.RestTemplate;\n \n import pro.taskana.RestHelper;\n import pro.taskana.TaskanaSpringBootTest;\n-import pro.taskana.rest.resource.TaskanaPagedModel;\n-import pro.taskana.rest.resource.WorkbasketAccessItemRepresentationModel;\n-import pro.taskana.rest.resource.WorkbasketRepresentationModel;\n-import pro.taskana.rest.resource.WorkbasketSummaryRepresentationModel;\n-import pro.taskana.workbasket.api.WorkbasketType;\n+import pro.taskana.rest.resource.DistributionTargetListResource;\n+import pro.taskana.rest.resource.DistributionTargetResource;\n+import pro.taskana.rest.resource.WorkbasketSummaryListResource;\n+\n+/**\n+ * Test WorkbasketController.\n+ */\n \n-/** Test WorkbasketController. */\n @TaskanaSpringBootTest\n class WorkbasketControllerIntTest {\n \n-  private static final ParameterizedTypeReference<\n-          TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n-      WORKBASKET_ACCESS_ITEM_PAGE_MODEL_TYPE =\n-          new ParameterizedTypeReference<\n-              TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>() {};\n-  private static final ParameterizedTypeReference<\n-          TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>\n-      WORKBASKET_SUMMARY_PAGE_MODEL_TYPE =\n-          new ParameterizedTypeReference<\n-              TaskanaPagedModel<WorkbasketSummaryRepresentationModel>>() {};\n-  private static RestTemplate template;\n-  @Autowired RestHelper restHelper;\n-\n-  @BeforeAll\n-  static void init() {\n-    template = RestHelper.TEMPLATE;\n-  }\n-\n-  @Test\n-  void testGetWorkbasket() {\n-    ResponseEntity<WorkbasketRepresentationModel> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET_ID, \"WBI:100000000000000000000000000000000006\"),\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            ParameterizedTypeReference.forType(WorkbasketRepresentationModel.class));\n-    assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n-    assertThat(response.getHeaders().getContentType().toString())\n-        .isEqualTo(MediaTypes.HAL_JSON_VALUE);\n-  }\n-\n-  @Test\n-  void testGetAllWorkbaskets() {\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET),\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            WORKBASKET_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n-  }\n-\n-  @Test\n-  void testGetAllWorkbasketsBusinessAdminHasOpenPermission() {\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET) + \"?required-permission=OPEN\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            WORKBASKET_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody().getRequiredLink(IanaLinkRelations.SELF)).isNotNull();\n-    assertThat(response.getBody().getContent()).hasSize(3);\n-  }\n-\n-  @Test\n-  void testGetAllWorkbasketsKeepingFilters() {\n-    String parameters = \"?type=PERSONAL&sort-by=key&order=desc\";\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET) + parameters,\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            WORKBASKET_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n-    assertThat(\n-            response\n-                .getBody()\n-                .getRequiredLink(IanaLinkRelations.SELF)\n-                .getHref()\n-                .endsWith(parameters))\n-        .isTrue();\n-  }\n-\n-  @Test\n-  void testThrowsExceptionIfInvalidFilterIsUsed() {\n-    ThrowingCallable httpCall =\n-        () -> template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET) + \"?invalid=PERSONAL\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            WORKBASKET_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThatThrownBy(httpCall)\n-        .isInstanceOf(HttpClientErrorException.class)\n-        .hasMessageContaining(\"[invalid]\")\n-        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n-        .isEqualTo(HttpStatus.BAD_REQUEST);\n-  }\n-\n-  @Test\n-  void testUpdateWorkbasketWithConcurrentModificationShouldThrowException() {\n-\n-    String workbasketId = \"WBI:100000000000000000000000000000000001\";\n-\n-    final ObjectMapper mapper = new ObjectMapper();\n-\n-    ResponseEntity<WorkbasketRepresentationModel> initialWorkbasketResourceRequestResponse =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET_ID, workbasketId),\n-            HttpMethod.GET,\n-            new HttpEntity<String>(restHelper.getHeaders()),\n-            ParameterizedTypeReference.forType(WorkbasketRepresentationModel.class));\n+    @Autowired RestHelper restHelper;\n \n-    WorkbasketRepresentationModel workbasketRepresentationModel =\n-        initialWorkbasketResourceRequestResponse.getBody();\n+    private static RestTemplate template;\n \n-    workbasketRepresentationModel.setKey(\"GPK_KSC\");\n-    workbasketRepresentationModel.setDomain(\"DOMAIN_A\");\n-    workbasketRepresentationModel.setType(WorkbasketType.PERSONAL);\n-    workbasketRepresentationModel.setName(\"was auch immer\");\n-    workbasketRepresentationModel.setOwner(\"Joerg\");\n-    workbasketRepresentationModel.setModified(String.valueOf(Instant.now()));\n+    @BeforeAll\n+    static void init() {\n+        template = RestHelper.getRestTemplate();\n+    }\n \n-    ThrowingCallable httpCall =\n-        () -> {\n-          template.exchange(\n-              restHelper.toUrl(Mapping.URL_WORKBASKET_ID, workbasketId),\n-              HttpMethod.PUT,\n-              new HttpEntity<>(\n-                  mapper.writeValueAsString(workbasketRepresentationModel),\n-                  restHelper.getHeaders()),\n-              ParameterizedTypeReference.forType(WorkbasketRepresentationModel.class));\n-        };\n-    assertThatThrownBy(httpCall)\n-        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n-        .isEqualTo(HttpStatus.CONFLICT);\n-  }\n+    @Test\n+    void testGetAllWorkbaskets() {\n+        ResponseEntity<WorkbasketSummaryListResource> response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKET), HttpMethod.GET, restHelper.defaultRequest(),\n+            ParameterizedTypeReference.forType(WorkbasketSummaryListResource.class));\n+        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+    }\n \n-  @Test\n-  void testUpdateWorkbasketOfNonExistingWorkbasketShouldThrowException() {\n-\n-    String workbasketId = \"WBI:100004857400039500000999999999999999\";\n-\n-    ThrowingCallable httpCall =\n-        () -> {\n-          template.exchange(\n-              restHelper.toUrl(Mapping.URL_WORKBASKET_ID, workbasketId),\n-              HttpMethod.GET,\n-              new HttpEntity<String>(restHelper.getHeaders()),\n-              ParameterizedTypeReference.forType(WorkbasketRepresentationModel.class));\n-        };\n-    assertThatThrownBy(httpCall)\n-        .isInstanceOf(HttpClientErrorException.class)\n-        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n-        .isEqualTo(HttpStatus.NOT_FOUND);\n-  }\n-\n-  @Test\n-  void testGetSecondPageSortedByKey() {\n-\n-    String parameters = \"?sort-by=key&order=desc&page-size=5&page=2\";\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET) + parameters,\n-            HttpMethod.GET,\n+    @Test\n+    void testGetAllWorkbasketsBusinessAdminHasOpenPermission() {\n+        ResponseEntity<WorkbasketSummaryListResource> response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKET) + \"?required-permission=OPEN\", HttpMethod.GET,\n             restHelper.defaultRequest(),\n-            WORKBASKET_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody().getContent()).hasSize(5);\n-    assertThat(response.getBody().getContent().iterator().next().getKey()).isEqualTo(\"USER_1_1\");\n-    assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n-    assertThat(response.getBody().getLink(IanaLinkRelations.FIRST)).isNotNull();\n-    assertThat(response.getBody().getLink(IanaLinkRelations.LAST)).isNotNull();\n-    assertThat(response.getBody().getLink(IanaLinkRelations.NEXT)).isNotNull();\n-    assertThat(response.getBody().getLink(IanaLinkRelations.PREV)).isNotNull();\n-    assertThat(\n-            response\n-                .getBody()\n-                .getRequiredLink(IanaLinkRelations.SELF)\n-                .getHref()\n-                .endsWith(parameters))\n-        .isTrue();\n-  }\n-\n-  @Test\n-  void testMarkWorkbasketForDeletionAsBusinessAdminWithoutExplicitReadPermission() {\n-\n-    String workbasketID = \"WBI:100000000000000000000000000000000005\";\n-\n-    ResponseEntity<?> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET_ID, workbasketID),\n-            HttpMethod.DELETE,\n-            new HttpEntity<>(restHelper.getHeadersBusinessAdmin()),\n-            Void.class);\n-    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.ACCEPTED);\n-  }\n-\n-  @Test\n-  void statusCode423ShouldBeReturnedIfWorkbasketContainsNonCompletedTasks() {\n-    String workbasketWithNonCompletedTasks = \"WBI:100000000000000000000000000000000004\";\n-\n-    ThrowingCallable call =\n-        () ->\n+            ParameterizedTypeReference.forType(WorkbasketSummaryListResource.class));\n+        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+        assertEquals(3, response.getBody().getContent().size());\n+    }\n+\n+    @Test\n+    void testGetAllWorkbasketsKeepingFilters() {\n+        String parameters = \"?type=PERSONAL&sort-by=key&order=desc\";\n+        ResponseEntity<WorkbasketSummaryListResource> response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKET) + parameters, HttpMethod.GET, restHelper.defaultRequest(),\n+            ParameterizedTypeReference.forType(WorkbasketSummaryListResource.class));\n+        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+        assertTrue(response.getBody()\n+            .getLink(Link.REL_SELF)\n+            .getHref()\n+            .endsWith(parameters));\n+    }\n+\n+    @Test\n+    void testThrowsExceptionIfInvalidFilterIsUsed() {\n+        try {\n             template.exchange(\n-                restHelper.toUrl(Mapping.URL_WORKBASKET_ID, workbasketWithNonCompletedTasks),\n-                HttpMethod.DELETE,\n-                new HttpEntity<>(restHelper.getHeadersBusinessAdmin()),\n-                Void.class);\n-    assertThatThrownBy(call)\n-        .isInstanceOf(HttpClientErrorException.class)\n-        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n-        .isEqualTo(HttpStatus.LOCKED);\n-  }\n-\n-  @Test\n-  void testRemoveWorkbasketAsDistributionTarget() {\n-    ResponseEntity<?> response =\n-        template.exchange(\n-            restHelper.toUrl(\n-                Mapping.URL_WORKBASKET_ID_DISTRIBUTION, \"WBI:100000000000000000000000000000000007\"),\n-            HttpMethod.DELETE,\n-            restHelper.defaultRequest(),\n-            Void.class);\n-    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);\n-\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response2 =\n-        template.exchange(\n-            restHelper.toUrl(\n-                Mapping.URL_WORKBASKET_ID_DISTRIBUTION, \"WBI:100000000000000000000000000000000002\"),\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            WORKBASKET_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response2.getStatusCode()).isEqualTo(HttpStatus.OK);\n-    assertThat(\n-            response2.getBody().getContent().stream()\n-                .map(WorkbasketSummaryRepresentationModel::getWorkbasketId)\n-                .noneMatch(\"WBI:100000000000000000000000000000000007\"::equals))\n-        .isTrue();\n-  }\n-\n-  @Test\n-  void testGetWorkbasketAccessItems() {\n-    ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(\n-                Mapping.URL_WORKBASKET_ID_ACCESSITEMS, \"WBI:100000000000000000000000000000000005\"),\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            WORKBASKET_ACCESS_ITEM_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n-    assertThat(response.getHeaders().getContentType().toString())\n-        .isEqualTo(MediaTypes.HAL_JSON_VALUE);\n-    assertThat(response.getBody().getContent()).hasSize(3);\n-  }\n-\n-  @Test\n-  void testGetWorkbasketDistributionTargets() {\n-    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(\n-                Mapping.URL_WORKBASKET_ID_DISTRIBUTION, \"WBI:100000000000000000000000000000000001\"),\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            WORKBASKET_SUMMARY_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n-    assertThat(response.getHeaders().getContentType().toString())\n-        .isEqualTo(MediaTypes.HAL_JSON_VALUE);\n-    assertThat(response.getBody().getContent()).hasSize(4);\n-  }\n+                restHelper.toUrl(Mapping.URL_WORKBASKET) + \"?invalid=PERSONAL\", HttpMethod.GET,\n+                restHelper.defaultRequest(),\n+                ParameterizedTypeReference.forType(WorkbasketSummaryListResource.class));\n+            fail();\n+        } catch (HttpClientErrorException e) {\n+            assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n+            assertTrue(e.getResponseBodyAsString().contains(\"[invalid]\"));\n+        }\n+    }\n+\n+    @Test\n+    void testGetSecondPageSortedByKey() {\n+\n+        String parameters = \"?sort-by=key&order=desc&page=2&page-size=5\";\n+        ResponseEntity<WorkbasketSummaryListResource> response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKET) + parameters, HttpMethod.GET, restHelper.defaultRequest(),\n+            ParameterizedTypeReference.forType(WorkbasketSummaryListResource.class));\n+        assertEquals(5, response.getBody().getContent().size());\n+        assertEquals(\"USER_1_1\", response.getBody().getContent().iterator().next().getKey());\n+        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+        assertTrue(response.getBody()\n+            .getLink(Link.REL_SELF)\n+            .getHref()\n+            .endsWith(parameters));\n+        assertNotNull(response.getBody().getLink(Link.REL_FIRST));\n+        assertNotNull(response.getBody().getLink(Link.REL_LAST));\n+        assertNotNull(response.getBody().getLink(Link.REL_NEXT));\n+        assertNotNull(response.getBody().getLink(Link.REL_PREVIOUS));\n+    }\n+\n+    @Test\n+    void testRemoveWorkbasketAsDistributionTarget() {\n+        ResponseEntity<?> response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKET_DISTRIBUTION_ID, \"WBI:100000000000000000000000000000000007\"),\n+            HttpMethod.DELETE, restHelper.defaultRequest(),\n+            Void.class\n+        );\n+        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n+\n+        ResponseEntity<DistributionTargetListResource> response2 = template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKET_ID_DISTRIBUTION, \"WBI:100000000000000000000000000000000002\"),\n+            HttpMethod.GET, restHelper.defaultRequest(),\n+            ParameterizedTypeReference.forType(DistributionTargetListResource.class)\n+        );\n+        assertEquals(HttpStatus.OK, response2.getStatusCode());\n+        Iterator<DistributionTargetResource> iterator = response2.getBody().getContent().iterator();\n+        while (iterator.hasNext()) {\n+            assertNotEquals(\"WBI:100000000000000000000000000000000007\", iterator.next().getWorkbasketId());\n+        }\n+    }\n }\n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\nindex bddf988fd..3a3ef8c82 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n", "chunk": "@@ -25,105 +24,112 @@ import pro.taskana.rest.resource.DistributionTargetListResource;\n import pro.taskana.rest.resource.DistributionTargetResource;\n import pro.taskana.rest.resource.WorkbasketSummaryListResource;\n \n-/**\n- * Test WorkbasketController.\n- */\n-\n+/** Test WorkbasketController. */\n @TaskanaSpringBootTest\n class WorkbasketControllerIntTest {\n \n-    @Autowired RestHelper restHelper;\n+  private static RestTemplate template;\n+  @Autowired RestHelper restHelper;\n \n-    private static RestTemplate template;\n+  @BeforeAll\n+  static void init() {\n+    template = RestHelper.getRestTemplate();\n+  }\n \n-    @BeforeAll\n-    static void init() {\n-        template = RestHelper.getRestTemplate();\n-    }\n-\n-    @Test\n-    void testGetAllWorkbaskets() {\n-        ResponseEntity<WorkbasketSummaryListResource> response = template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET), HttpMethod.GET, restHelper.defaultRequest(),\n+  @Test\n+  void testGetAllWorkbaskets() {\n+    ResponseEntity<WorkbasketSummaryListResource> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKET),\n+            HttpMethod.GET,\n+            restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(WorkbasketSummaryListResource.class));\n-        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-    }\n-\n-    @Test\n-    void testGetAllWorkbasketsBusinessAdminHasOpenPermission() {\n-        ResponseEntity<WorkbasketSummaryListResource> response = template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET) + \"?required-permission=OPEN\", HttpMethod.GET,\n+    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+  }\n+\n+  @Test\n+  void testGetAllWorkbasketsBusinessAdminHasOpenPermission() {\n+    ResponseEntity<WorkbasketSummaryListResource> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKET) + \"?required-permission=OPEN\",\n+            HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(WorkbasketSummaryListResource.class));\n-        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-        assertEquals(3, response.getBody().getContent().size());\n-    }\n-\n-    @Test\n-    void testGetAllWorkbasketsKeepingFilters() {\n-        String parameters = \"?type=PERSONAL&sort-by=key&order=desc\";\n-        ResponseEntity<WorkbasketSummaryListResource> response = template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET) + parameters, HttpMethod.GET, restHelper.defaultRequest(),\n+    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+    assertEquals(3, response.getBody().getContent().size());\n+  }\n+\n+  @Test\n+  void testGetAllWorkbasketsKeepingFilters() {\n+    String parameters = \"?type=PERSONAL&sort-by=key&order=desc\";\n+    ResponseEntity<WorkbasketSummaryListResource> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKET) + parameters,\n+            HttpMethod.GET,\n+            restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(WorkbasketSummaryListResource.class));\n-        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-        assertTrue(response.getBody()\n-            .getLink(Link.REL_SELF)\n-            .getHref()\n-            .endsWith(parameters));\n-    }\n-\n-    @Test\n-    void testThrowsExceptionIfInvalidFilterIsUsed() {\n-        try {\n-            template.exchange(\n-                restHelper.toUrl(Mapping.URL_WORKBASKET) + \"?invalid=PERSONAL\", HttpMethod.GET,\n-                restHelper.defaultRequest(),\n-                ParameterizedTypeReference.forType(WorkbasketSummaryListResource.class));\n-            fail();\n-        } catch (HttpClientErrorException e) {\n-            assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n-            assertTrue(e.getResponseBodyAsString().contains(\"[invalid]\"));\n-        }\n+    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+    assertTrue(response.getBody().getLink(Link.REL_SELF).getHref().endsWith(parameters));\n+  }\n+\n+  @Test\n+  void testThrowsExceptionIfInvalidFilterIsUsed() {\n+    try {\n+      template.exchange(\n+          restHelper.toUrl(Mapping.URL_WORKBASKET) + \"?invalid=PERSONAL\",\n+          HttpMethod.GET,\n+          restHelper.defaultRequest(),\n+          ParameterizedTypeReference.forType(WorkbasketSummaryListResource.class));\n+      fail();\n+    } catch (HttpClientErrorException e) {\n+      assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n+      assertTrue(e.getResponseBodyAsString().contains(\"[invalid]\"));\n     }\n+  }\n \n-    @Test\n-    void testGetSecondPageSortedByKey() {\n+  @Test\n+  void testGetSecondPageSortedByKey() {\n \n-        String parameters = \"?sort-by=key&order=desc&page=2&page-size=5\";\n-        ResponseEntity<WorkbasketSummaryListResource> response = template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET) + parameters, HttpMethod.GET, restHelper.defaultRequest(),\n+    String parameters = \"?sort-by=key&order=desc&page=2&page-size=5\";\n+    ResponseEntity<WorkbasketSummaryListResource> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKET) + parameters,\n+            HttpMethod.GET,\n+            restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(WorkbasketSummaryListResource.class));\n-        assertEquals(5, response.getBody().getContent().size());\n-        assertEquals(\"USER_1_1\", response.getBody().getContent().iterator().next().getKey());\n-        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-        assertTrue(response.getBody()\n-            .getLink(Link.REL_SELF)\n-            .getHref()\n-            .endsWith(parameters));\n-        assertNotNull(response.getBody().getLink(Link.REL_FIRST));\n-        assertNotNull(response.getBody().getLink(Link.REL_LAST));\n-        assertNotNull(response.getBody().getLink(Link.REL_NEXT));\n-        assertNotNull(response.getBody().getLink(Link.REL_PREVIOUS));\n-    }\n-\n-    @Test\n-    void testRemoveWorkbasketAsDistributionTarget() {\n-        ResponseEntity<?> response = template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET_DISTRIBUTION_ID, \"WBI:100000000000000000000000000000000007\"),\n-            HttpMethod.DELETE, restHelper.defaultRequest(),\n-            Void.class\n-        );\n-        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n-\n-        ResponseEntity<DistributionTargetListResource> response2 = template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKET_ID_DISTRIBUTION, \"WBI:100000000000000000000000000000000002\"),\n-            HttpMethod.GET, restHelper.defaultRequest(),\n-            ParameterizedTypeReference.forType(DistributionTargetListResource.class)\n-        );\n-        assertEquals(HttpStatus.OK, response2.getStatusCode());\n-        Iterator<DistributionTargetResource> iterator = response2.getBody().getContent().iterator();\n-        while (iterator.hasNext()) {\n-            assertNotEquals(\"WBI:100000000000000000000000000000000007\", iterator.next().getWorkbasketId());\n-        }\n+    assertEquals(5, response.getBody().getContent().size());\n+    assertEquals(\"USER_1_1\", response.getBody().getContent().iterator().next().getKey());\n+    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+    assertTrue(response.getBody().getLink(Link.REL_SELF).getHref().endsWith(parameters));\n+    assertNotNull(response.getBody().getLink(Link.REL_FIRST));\n+    assertNotNull(response.getBody().getLink(Link.REL_LAST));\n+    assertNotNull(response.getBody().getLink(Link.REL_NEXT));\n+    assertNotNull(response.getBody().getLink(Link.REL_PREVIOUS));\n+  }\n+\n+  @Test\n+  void testRemoveWorkbasketAsDistributionTarget() {\n+    ResponseEntity<?> response =\n+        template.exchange(\n+            restHelper.toUrl(\n+                Mapping.URL_WORKBASKET_DISTRIBUTION_ID, \"WBI:100000000000000000000000000000000007\"),\n+            HttpMethod.DELETE,\n+            restHelper.defaultRequest(),\n+            Void.class);\n+    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n+\n+    ResponseEntity<DistributionTargetListResource> response2 =\n+        template.exchange(\n+            restHelper.toUrl(\n+                Mapping.URL_WORKBASKET_ID_DISTRIBUTION, \"WBI:100000000000000000000000000000000002\"),\n+            HttpMethod.GET,\n+            restHelper.defaultRequest(),\n+            ParameterizedTypeReference.forType(DistributionTargetListResource.class));\n+    assertEquals(HttpStatus.OK, response2.getStatusCode());\n+    Iterator<DistributionTargetResource> iterator = response2.getBody().getContent().iterator();\n+    while (iterator.hasNext()) {\n+      assertNotEquals(\n+          \"WBI:100000000000000000000000000000000007\", iterator.next().getWorkbasketId());\n     }\n+  }\n }\n", "next_change": {"commit": "dcc72d1781fffea923a9d4a2b0d568a1984f88bb", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\nindex 3a3ef8c82..e7d2c7d11 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n", "chunk": "@@ -125,11 +198,11 @@ class WorkbasketControllerIntTest {\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(DistributionTargetListResource.class));\n-    assertEquals(HttpStatus.OK, response2.getStatusCode());\n+    assertThat(response2.getStatusCode()).isEqualTo(HttpStatus.OK);\n     Iterator<DistributionTargetResource> iterator = response2.getBody().getContent().iterator();\n     while (iterator.hasNext()) {\n-      assertNotEquals(\n-          \"WBI:100000000000000000000000000000000007\", iterator.next().getWorkbasketId());\n+      assertThat(iterator.next().getWorkbasketId())\n+          .isNotEqualTo(\"WBI:100000000000000000000000000000000007\");\n     }\n   }\n }\n", "next_change": {"commit": "4c884819d5823f5bdede585a3ed347589c465c4d", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\nindex e7d2c7d11..40b1bb9ac 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n", "chunk": "@@ -205,4 +219,19 @@ class WorkbasketControllerIntTest {\n           .isNotEqualTo(\"WBI:100000000000000000000000000000000007\");\n     }\n   }\n+\n+  @Test\n+  void testGetWorkbasketAccessItems() {\n+    ResponseEntity<WorkbasketAccessItemListResource> response =\n+        template.exchange(\n+            restHelper.toUrl(\n+                Mapping.URL_WORKBASKET_ID_ACCESSITEMS, \"WBI:100000000000000000000000000000000005\"),\n+            HttpMethod.GET,\n+            restHelper.defaultRequest(),\n+            ParameterizedTypeReference.forType(WorkbasketAccessItemListResource.class));\n+    assertThat(response.getBody().getLink(Link.REL_SELF)).isNotNull();\n+    assertThat(response.getHeaders().getContentType().toString())\n+        .isEqualTo(MediaTypes.HAL_JSON_UTF8_VALUE);\n+    assertThat(response.getBody().getContent()).hasSize(3);\n+  }\n }\n", "next_change": {"commit": "f64053ec4ecf4887deba1baf199a017e51ae42e0", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\nindex 40b1bb9ac..63a8d590d 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n", "chunk": "@@ -234,4 +235,20 @@ class WorkbasketControllerIntTest {\n         .isEqualTo(MediaTypes.HAL_JSON_UTF8_VALUE);\n     assertThat(response.getBody().getContent()).hasSize(3);\n   }\n+  \n+  @Test\n+  void testGetWorkbasketDistributionTargets() {\n+    ResponseEntity<DistributionTargetListResource> response =\n+        template.exchange(\n+            restHelper.toUrl(\n+                Mapping.URL_WORKBASKET_ID_DISTRIBUTION, \"WBI:100000000000000000000000000000000001\"),\n+            HttpMethod.GET,\n+            restHelper.defaultRequest(),\n+            ParameterizedTypeReference.forType(DistributionTargetListResource.class));\n+    assertThat(response.getBody().getLink(Link.REL_SELF)).isNotNull();\n+    assertThat(response.getHeaders().getContentType().toString())\n+        .isEqualTo(MediaTypes.HAL_JSON_UTF8_VALUE);\n+    assertThat(response.getBody().getContent()).hasSize(4);\n+  }\n+\n }\n", "next_change": {"commit": "c9791b01b8b72b711025903276f2a1a30e3e85a2", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\nindex 63a8d590d..21fd2fdad 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n", "chunk": "@@ -250,5 +257,4 @@ class WorkbasketControllerIntTest {\n         .isEqualTo(MediaTypes.HAL_JSON_UTF8_VALUE);\n     assertThat(response.getBody().getContent()).hasSize(4);\n   }\n-\n }\n", "next_change": {"commit": "a8e44dead343598b7266254616a7f8559ee941ba", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\nindex 21fd2fdad..86e3f59e6 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n", "chunk": "@@ -252,9 +274,9 @@ class WorkbasketControllerIntTest {\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(DistributionTargetListResource.class));\n-    assertThat(response.getBody().getLink(Link.REL_SELF)).isNotNull();\n+    assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n     assertThat(response.getHeaders().getContentType().toString())\n-        .isEqualTo(MediaTypes.HAL_JSON_UTF8_VALUE);\n+        .isEqualTo(MediaTypes.HAL_JSON_VALUE);\n     assertThat(response.getBody().getContent()).hasSize(4);\n   }\n }\n", "next_change": {"commit": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\nindex 86e3f59e6..0c4fb5c18 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java\n", "chunk": "@@ -267,13 +277,13 @@ class WorkbasketControllerIntTest {\n \n   @Test\n   void testGetWorkbasketDistributionTargets() {\n-    ResponseEntity<DistributionTargetListResource> response =\n+    ResponseEntity<TaskanaPagedModel<WorkbasketSummaryRepresentationModel>> response =\n         template.exchange(\n             restHelper.toUrl(\n                 Mapping.URL_WORKBASKET_ID_DISTRIBUTION, \"WBI:100000000000000000000000000000000001\"),\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n-            ParameterizedTypeReference.forType(DistributionTargetListResource.class));\n+            WORKBASKET_SUMMARY_PAGE_MODEL_TYPE);\n     assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n     assertThat(response.getHeaders().getContentType().toString())\n         .isEqualTo(MediaTypes.HAL_JSON_VALUE);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "committedDate": "2019-12-04 09:56:34 +0100", "message": "TSK-967: Merge module taskana-rest-spring and taskana-rest-spring-test"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "5a08fd4b03ad7c121a5b584c6f873aae4f11a72a", "committedDate": "2020-01-23 13:00:04 +0100", "message": "TSK-1029: Add test to trigger permission bug"}, {"oid": "fae9d1fb9bdec9a1ea1499e04575738044c03235", "committedDate": "2020-01-23 13:00:04 +0100", "message": "TSK-1029: Fix deletion of workbasket as business admin not possible"}, {"oid": "026212104163f38f10a57099d90318c2f5e2a979", "committedDate": "2020-01-23 13:00:04 +0100", "message": "TSK-1029: Test and fix privilege for runasadmin is only temporary"}, {"oid": "7477092a698c3d2f6e0607e25886dc9c8bb28959", "committedDate": "2020-01-27 20:40:43 +0100", "message": "automated formatting"}, {"oid": "dcc72d1781fffea923a9d4a2b0d568a1984f88bb", "committedDate": "2020-02-11 09:33:54 +0100", "message": "TSK-1088 optimistic locking on workbasket update"}, {"oid": "007f268be599fda8b884e002b7b03bb260c7620f", "committedDate": "2020-02-11 17:05:34 +0100", "message": "TSK-1031: update Spring Boot to 2.2.4.RELEASE except Hateoas."}, {"oid": "60d4b29015cb128e4d4c03e90ff244a0cf13710a", "committedDate": "2020-02-11 17:05:34 +0100", "message": "TSK-1031: formatting issues fixed."}, {"oid": "95495e4894ee6a18f7561fa9965638131d51643c", "committedDate": "2020-02-12 15:31:34 +0100", "message": "TSK-1110: Enforce application/hal+json MediaType for classification and workbasket"}, {"oid": "4c884819d5823f5bdede585a3ed347589c465c4d", "committedDate": "2020-02-13 14:20:17 +0100", "message": "TSK-1123: workbasketaccessitems now produce application/hal-json"}, {"oid": "5c7d38451ce7cbea2ad52d3b84be72d49c474c71", "committedDate": "2020-02-13 15:09:39 +0100", "message": "TSK-1094 introduce models package for */api and */internal"}, {"oid": "f64053ec4ecf4887deba1baf199a017e51ae42e0", "committedDate": "2020-02-13 16:12:39 +0100", "message": "TSK-1125: distributiontargets now produce application/hal-json"}, {"oid": "ebd2098434a4bb0f1260cba3a8625d696cdb63fb", "committedDate": "2020-03-03 11:40:47 +0100", "message": "TSK-1147 Replaced getRestTemplate() by constant TEMPLATE"}, {"oid": "c9791b01b8b72b711025903276f2a1a30e3e85a2", "committedDate": "2020-03-19 09:53:54 +0100", "message": "TSK-1029: Proper distinction between delete and markForFeletion for workbaskets"}, {"oid": "fc3f9e186850c7a8eb42c60875e516b357ae20e8", "committedDate": "2020-03-23 07:37:54 +0100", "message": "TSK-1164: refactor code which is using assertJ's assertThatThrownBy and lambda expression with line breaks"}, {"oid": "a8e44dead343598b7266254616a7f8559ee941ba", "committedDate": "2020-04-23 09:49:16 +0200", "message": "TSK-1083: Updated HATEOAS from version 0.24.0 to version 1.0.4"}, {"oid": "35705ddb02fddbade31cb2e1892040ecf8e5bbab", "committedDate": "2020-04-24 12:59:13 +0200", "message": "automatically formatted code"}, {"oid": "75a340ccf32a72f2f45bdea73ace9ee3d33bf05c", "committedDate": "2020-05-11 14:48:36 +0200", "message": "TSK-1243: made rest url for workbasket distribution-targets consistent"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2NjIxMw==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422666213", "body": "Can you please use an autowired constructor?", "bodyText": "Can you please use an autowired constructor?", "bodyHTML": "<p dir=\"auto\">Can you please use an autowired constructor?</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T16:17:46Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskRepresentationModelAssemberTest.java", "diffHunk": "@@ -24,30 +24,32 @@\n import pro.taskana.workbasket.api.WorkbasketService;\n import pro.taskana.workbasket.api.models.Workbasket;\n \n-/** Test for {@link TaskResourceAssembler}. */\n+/** Test for {@link TaskRepresentationModelAssembler}. */\n @TaskanaSpringBootTest\n-class TaskResourceAssemberTest {\n+class TaskRepresentationModelAssemberTest {\n \n   @Autowired TaskService taskService;\n   @Autowired WorkbasketService workbasketService;\n   @Autowired ClassificationService classificationService;\n-  @Autowired TaskResourceAssembler taskResourceAssembler;\n+  @Autowired TaskRepresentationModelAssembler taskRepresentationModelAssembler;", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskRepresentationModelAssemberTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskRepresentationModelAssemberTest.java\nindex 87d9547c5..45a720f54 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskRepresentationModelAssemberTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskRepresentationModelAssemberTest.java\n", "chunk": "@@ -24,14 +24,26 @@ import pro.taskana.task.internal.models.TaskImpl;\n import pro.taskana.workbasket.api.WorkbasketService;\n import pro.taskana.workbasket.api.models.Workbasket;\n \n-/** Test for {@link TaskRepresentationModelAssembler}. */\n+/**\n+ * Test for {@link TaskRepresentationModelAssembler}.\n+ */\n @TaskanaSpringBootTest\n class TaskRepresentationModelAssemberTest {\n \n-  @Autowired TaskService taskService;\n-  @Autowired WorkbasketService workbasketService;\n-  @Autowired ClassificationService classificationService;\n-  @Autowired TaskRepresentationModelAssembler taskRepresentationModelAssembler;\n+  TaskService taskService;\n+  WorkbasketService workbasketService;\n+  ClassificationService classificationService;\n+  TaskRepresentationModelAssembler taskRepresentationModelAssembler;\n+\n+  @Autowired\n+  TaskRepresentationModelAssemberTest(TaskService taskService, WorkbasketService workbasketService,\n+      ClassificationService classificationService,\n+      TaskRepresentationModelAssembler taskRepresentationModelAssembler) {\n+    this.taskService = taskService;\n+    this.workbasketService = workbasketService;\n+    this.classificationService = classificationService;\n+    this.taskRepresentationModelAssembler = taskRepresentationModelAssembler;\n+  }\n \n   @Test\n   void testSimpleResourceToModel() throws InvalidArgumentException {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskRepresentationModelAssemberTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskRepresentationModelAssemberTest.java\nindex 87d9547c5..45a720f54 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskRepresentationModelAssemberTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskRepresentationModelAssemberTest.java\n", "chunk": "@@ -24,14 +24,26 @@ import pro.taskana.task.internal.models.TaskImpl;\n import pro.taskana.workbasket.api.WorkbasketService;\n import pro.taskana.workbasket.api.models.Workbasket;\n \n-/** Test for {@link TaskRepresentationModelAssembler}. */\n+/**\n+ * Test for {@link TaskRepresentationModelAssembler}.\n+ */\n @TaskanaSpringBootTest\n class TaskRepresentationModelAssemberTest {\n \n-  @Autowired TaskService taskService;\n-  @Autowired WorkbasketService workbasketService;\n-  @Autowired ClassificationService classificationService;\n-  @Autowired TaskRepresentationModelAssembler taskRepresentationModelAssembler;\n+  TaskService taskService;\n+  WorkbasketService workbasketService;\n+  ClassificationService classificationService;\n+  TaskRepresentationModelAssembler taskRepresentationModelAssembler;\n+\n+  @Autowired\n+  TaskRepresentationModelAssemberTest(TaskService taskService, WorkbasketService workbasketService,\n+      ClassificationService classificationService,\n+      TaskRepresentationModelAssembler taskRepresentationModelAssembler) {\n+    this.taskService = taskService;\n+    this.workbasketService = workbasketService;\n+    this.classificationService = classificationService;\n+    this.taskRepresentationModelAssembler = taskRepresentationModelAssembler;\n+  }\n \n   @Test\n   void testSimpleResourceToModel() throws InvalidArgumentException {\n", "next_change": null}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2NjMwNg==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r422666306", "body": "Can you please use an autowired constructor?", "bodyText": "Can you please use an autowired constructor?", "bodyHTML": "<p dir=\"auto\">Can you please use an autowired constructor?</p>", "author": "mustaphazorgati", "createdAt": "2020-05-10T16:18:24Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskSummaryAssemblerTest.java", "diffHunk": "@@ -24,7 +24,7 @@\n class TaskSummaryAssemblerTest {\n \n   @Autowired TaskService taskService;\n-  @Autowired TaskSummaryResourceAssembler taskSummaryResourceAssembler;\n+  @Autowired TaskSummaryRepresentationModelAssembler taskSummaryRepresentationModelAssembler;\n   @Autowired WorkbasketService workbasketService;\n   @Autowired ClassificationService classificationService;", "originalCommit": "329f7aaae49aa6392c1c2f336345d9cbe007b9d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d0dfdefaed6d971dad16554f079577793143614", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskSummaryAssemblerTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskSummaryAssemblerTest.java\nindex b7f318920..dc68c2f9e 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskSummaryAssemblerTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskSummaryAssemblerTest.java\n", "chunk": "@@ -23,10 +23,20 @@ import pro.taskana.workbasket.api.models.Workbasket;\n @TaskanaSpringBootTest\n class TaskSummaryAssemblerTest {\n \n-  @Autowired TaskService taskService;\n-  @Autowired TaskSummaryRepresentationModelAssembler taskSummaryRepresentationModelAssembler;\n-  @Autowired WorkbasketService workbasketService;\n-  @Autowired ClassificationService classificationService;\n+  TaskService taskService;\n+  TaskSummaryRepresentationModelAssembler taskSummaryRepresentationModelAssembler;\n+  WorkbasketService workbasketService;\n+  ClassificationService classificationService;\n+\n+  @Autowired\n+  TaskSummaryAssemblerTest(TaskService taskService,\n+      TaskSummaryRepresentationModelAssembler taskSummaryRepresentationModelAssembler,\n+      WorkbasketService workbasketService, ClassificationService classificationService) {\n+    this.taskService = taskService;\n+    this.taskSummaryRepresentationModelAssembler = taskSummaryRepresentationModelAssembler;\n+    this.workbasketService = workbasketService;\n+    this.classificationService = classificationService;\n+  }\n \n   @Test\n   void taskSummaryToResource() {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskSummaryAssemblerTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskSummaryAssemblerTest.java\nindex b7f318920..dc68c2f9e 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskSummaryAssemblerTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskSummaryAssemblerTest.java\n", "chunk": "@@ -23,10 +23,20 @@ import pro.taskana.workbasket.api.models.Workbasket;\n @TaskanaSpringBootTest\n class TaskSummaryAssemblerTest {\n \n-  @Autowired TaskService taskService;\n-  @Autowired TaskSummaryRepresentationModelAssembler taskSummaryRepresentationModelAssembler;\n-  @Autowired WorkbasketService workbasketService;\n-  @Autowired ClassificationService classificationService;\n+  TaskService taskService;\n+  TaskSummaryRepresentationModelAssembler taskSummaryRepresentationModelAssembler;\n+  WorkbasketService workbasketService;\n+  ClassificationService classificationService;\n+\n+  @Autowired\n+  TaskSummaryAssemblerTest(TaskService taskService,\n+      TaskSummaryRepresentationModelAssembler taskSummaryRepresentationModelAssembler,\n+      WorkbasketService workbasketService, ClassificationService classificationService) {\n+    this.taskService = taskService;\n+    this.taskSummaryRepresentationModelAssembler = taskSummaryRepresentationModelAssembler;\n+    this.workbasketService = workbasketService;\n+    this.classificationService = classificationService;\n+  }\n \n   @Test\n   void taskSummaryToResource() {\n", "next_change": {"commit": "dbe17fff5773154dc1fc030c12a44de203d6b29a", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskSummaryAssemblerTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskSummaryAssemblerTest.java\nindex dc68c2f9e..8c57a0be4 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskSummaryAssemblerTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskSummaryAssemblerTest.java\n", "chunk": "@@ -7,36 +7,26 @@ import org.junit.Assert;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n \n+import pro.taskana.AttachmentSummary;\n+import pro.taskana.Classification;\n+import pro.taskana.ClassificationService;\n+import pro.taskana.ObjectReference;\n+import pro.taskana.TaskService;\n+import pro.taskana.TaskState;\n import pro.taskana.TaskanaSpringBootTest;\n-import pro.taskana.classification.api.ClassificationService;\n-import pro.taskana.classification.api.models.Classification;\n-import pro.taskana.task.api.TaskService;\n-import pro.taskana.task.api.TaskState;\n-import pro.taskana.task.api.models.AttachmentSummary;\n-import pro.taskana.task.api.models.ObjectReference;\n-import pro.taskana.task.internal.models.AttachmentImpl;\n-import pro.taskana.task.internal.models.TaskImpl;\n-import pro.taskana.task.internal.models.TaskSummaryImpl;\n-import pro.taskana.workbasket.api.WorkbasketService;\n-import pro.taskana.workbasket.api.models.Workbasket;\n+import pro.taskana.Workbasket;\n+import pro.taskana.WorkbasketService;\n+import pro.taskana.impl.AttachmentImpl;\n+import pro.taskana.impl.TaskImpl;\n+import pro.taskana.impl.TaskSummaryImpl;\n \n @TaskanaSpringBootTest\n class TaskSummaryAssemblerTest {\n \n-  TaskService taskService;\n-  TaskSummaryRepresentationModelAssembler taskSummaryRepresentationModelAssembler;\n-  WorkbasketService workbasketService;\n-  ClassificationService classificationService;\n-\n-  @Autowired\n-  TaskSummaryAssemblerTest(TaskService taskService,\n-      TaskSummaryRepresentationModelAssembler taskSummaryRepresentationModelAssembler,\n-      WorkbasketService workbasketService, ClassificationService classificationService) {\n-    this.taskService = taskService;\n-    this.taskSummaryRepresentationModelAssembler = taskSummaryRepresentationModelAssembler;\n-    this.workbasketService = workbasketService;\n-    this.classificationService = classificationService;\n-  }\n+  @Autowired TaskService taskService;\n+  @Autowired TaskSummaryResourceAssembler taskSummaryResourceAssembler;\n+  @Autowired WorkbasketService workbasketService;\n+  @Autowired ClassificationService classificationService;\n \n   @Test\n   void taskSummaryToResource() {\n", "next_change": {"commit": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskSummaryAssemblerTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskSummaryAssemblerTest.java\nindex 8c57a0be4..dc68c2f9e 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskSummaryAssemblerTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/TaskSummaryAssemblerTest.java\n", "chunk": "@@ -7,26 +7,36 @@ import org.junit.Assert;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-import pro.taskana.AttachmentSummary;\n-import pro.taskana.Classification;\n-import pro.taskana.ClassificationService;\n-import pro.taskana.ObjectReference;\n-import pro.taskana.TaskService;\n-import pro.taskana.TaskState;\n import pro.taskana.TaskanaSpringBootTest;\n-import pro.taskana.Workbasket;\n-import pro.taskana.WorkbasketService;\n-import pro.taskana.impl.AttachmentImpl;\n-import pro.taskana.impl.TaskImpl;\n-import pro.taskana.impl.TaskSummaryImpl;\n+import pro.taskana.classification.api.ClassificationService;\n+import pro.taskana.classification.api.models.Classification;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.models.AttachmentSummary;\n+import pro.taskana.task.api.models.ObjectReference;\n+import pro.taskana.task.internal.models.AttachmentImpl;\n+import pro.taskana.task.internal.models.TaskImpl;\n+import pro.taskana.task.internal.models.TaskSummaryImpl;\n+import pro.taskana.workbasket.api.WorkbasketService;\n+import pro.taskana.workbasket.api.models.Workbasket;\n \n @TaskanaSpringBootTest\n class TaskSummaryAssemblerTest {\n \n-  @Autowired TaskService taskService;\n-  @Autowired TaskSummaryResourceAssembler taskSummaryResourceAssembler;\n-  @Autowired WorkbasketService workbasketService;\n-  @Autowired ClassificationService classificationService;\n+  TaskService taskService;\n+  TaskSummaryRepresentationModelAssembler taskSummaryRepresentationModelAssembler;\n+  WorkbasketService workbasketService;\n+  ClassificationService classificationService;\n+\n+  @Autowired\n+  TaskSummaryAssemblerTest(TaskService taskService,\n+      TaskSummaryRepresentationModelAssembler taskSummaryRepresentationModelAssembler,\n+      WorkbasketService workbasketService, ClassificationService classificationService) {\n+    this.taskService = taskService;\n+    this.taskSummaryRepresentationModelAssembler = taskSummaryRepresentationModelAssembler;\n+    this.workbasketService = workbasketService;\n+    this.classificationService = classificationService;\n+  }\n \n   @Test\n   void taskSummaryToResource() {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "dbe17fff5773154dc1fc030c12a44de203d6b29a", "committedDate": "2020-01-29 17:11:57 +0100", "message": "TSK-1051 Expose task description via rest"}, {"oid": "3b13b9a95e4d7d1cf172f22fa0f2679ff1c5f79b", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 after initial refactoring"}, {"oid": "442385482236ad0c25830becbadddf30f6e7bf2d", "committedDate": "2020-02-03 11:41:02 +0100", "message": "TSK-991 fix dependent projects"}, {"oid": "6eeff1ba22f5a07e459089fcb02074116ecb2d53", "committedDate": "2020-02-07 08:36:52 +0100", "message": "TSK-1065 Refactor TaskImpl"}, {"oid": "5c7d38451ce7cbea2ad52d3b84be72d49c474c71", "committedDate": "2020-02-13 15:09:39 +0100", "message": "TSK-1094 introduce models package for */api and */internal"}, {"oid": "a8e44dead343598b7266254616a7f8559ee941ba", "committedDate": "2020-04-23 09:49:16 +0200", "message": "TSK-1083: Updated HATEOAS from version 0.24.0 to version 1.0.4"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"oid": "8d0dfdefaed6d971dad16554f079577793143614", "url": "https://github.com/Taskana/taskana/commit/8d0dfdefaed6d971dad16554f079577793143614", "message": "TSK-1208: executed all change requests", "committedDate": "2020-05-12T09:23:17Z", "type": "forcePushed"}, {"oid": "1c2ecd9dbc424646f26ac3e4174ee913b470d45f", "url": "https://github.com/Taskana/taskana/commit/1c2ecd9dbc424646f26ac3e4174ee913b470d45f", "message": "TSK-1208: executed all change requests", "committedDate": "2020-05-12T10:11:06Z", "type": "forcePushed"}, {"oid": "a2cb8b3652c4ce259c36ea055faf9918267c3f0a", "url": "https://github.com/Taskana/taskana/commit/a2cb8b3652c4ce259c36ea055faf9918267c3f0a", "message": "TSK-1208: executed all change requests", "committedDate": "2020-05-12T10:29:19Z", "type": "forcePushed"}, {"oid": "a3abf1897c44fec799bcb88e8fdeb92f6f0ecb64", "url": "https://github.com/Taskana/taskana/commit/a3abf1897c44fec799bcb88e8fdeb92f6f0ecb64", "message": "TSK-1208: executed all change requests", "committedDate": "2020-05-12T11:38:09Z", "type": "forcePushed"}, {"oid": "29cf8946efdf6d178fcb126595506efd9b910f47", "url": "https://github.com/Taskana/taskana/commit/29cf8946efdf6d178fcb126595506efd9b910f47", "message": "TSK-1208: executed all change requests", "committedDate": "2020-05-12T11:45:44Z", "type": "forcePushed"}, {"oid": "57ea66b8a9c3b528ed02f0090c009071e60eb870", "url": "https://github.com/Taskana/taskana/commit/57ea66b8a9c3b528ed02f0090c009071e60eb870", "message": "TSK-1208: executed all change requests", "committedDate": "2020-05-12T12:17:21Z", "type": "forcePushed"}, {"oid": "417f17fba2d31a509a3ec4f52b7f9b4673204e75", "url": "https://github.com/Taskana/taskana/commit/417f17fba2d31a509a3ec4f52b7f9b4673204e75", "message": "TSK-1208: executed all change requests", "committedDate": "2020-05-12T12:20:59Z", "type": "forcePushed"}, {"oid": "0ba49a03381c2d2f51021c42be75508324f306ac", "url": "https://github.com/Taskana/taskana/commit/0ba49a03381c2d2f51021c42be75508324f306ac", "message": "TSK-1208: executed all change requests", "committedDate": "2020-05-12T12:33:48Z", "type": "forcePushed"}, {"oid": "f192fd52af5031c94574c393c43312fb3d182142", "url": "https://github.com/Taskana/taskana/commit/f192fd52af5031c94574c393c43312fb3d182142", "message": "TSK-1208: executed all change requests", "committedDate": "2020-05-12T13:11:28Z", "type": "forcePushed"}, {"oid": "4c550f1f54bfb1a5c99f4127bc303f4c7d16a9f0", "url": "https://github.com/Taskana/taskana/commit/4c550f1f54bfb1a5c99f4127bc303f4c7d16a9f0", "message": "TSK-1208: executed all change requests", "committedDate": "2020-05-12T13:19:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxODE4Ng==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r424218186", "body": "Can you replace this variable with a static import?", "bodyText": "Can you replace this variable with a static import?", "bodyHTML": "<p dir=\"auto\">Can you replace this variable with a static import?</p>", "author": "mustaphazorgati", "createdAt": "2020-05-13T07:10:17Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java", "diffHunk": "@@ -23,19 +23,21 @@\n import pro.taskana.common.internal.util.LogSanitizer;\n import pro.taskana.task.api.models.TaskSummary;\n \n-/** Job to cleanup completed tasks after a period of time. */\n+/**\n+ * Job to cleanup completed tasks after a period of time.\n+ */\n public class TaskCleanupJob extends AbstractTaskanaJob {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(TaskCleanupJob.class);\n \n-  private static BaseQuery.SortDirection asc = BaseQuery.SortDirection.ASCENDING;\n+  private static final BaseQuery.SortDirection ASCENDING = BaseQuery.SortDirection.ASCENDING;", "originalCommit": "4c550f1f54bfb1a5c99f4127bc303f4c7d16a9f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "917535fbc017b6e7d19dfc57d60466e404d57c33", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex 55be85901..abfcf4ca1 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -30,7 +31,7 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(TaskCleanupJob.class);\n \n-  private static final BaseQuery.SortDirection ASCENDING = BaseQuery.SortDirection.ASCENDING;\n+  private static final SortDirection ASCENDING = SortDirection.ASCENDING;\n \n   // Parameter\n   private final Instant firstRun;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex 55be85901..abfcf4ca1 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -30,7 +31,7 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(TaskCleanupJob.class);\n \n-  private static final BaseQuery.SortDirection ASCENDING = BaseQuery.SortDirection.ASCENDING;\n+  private static final SortDirection ASCENDING = SortDirection.ASCENDING;\n \n   // Parameter\n   private final Instant firstRun;\n", "next_change": {"commit": "3ce41b224efde509aea998be3ace278832b1d562", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex abfcf4ca1..54cec186e 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -10,35 +10,32 @@ import java.util.stream.Collectors;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import pro.taskana.common.api.BaseQuery.SortDirection;\n+import pro.taskana.common.api.BaseQuery;\n import pro.taskana.common.api.BulkOperationResults;\n import pro.taskana.common.api.LoggerUtils;\n import pro.taskana.common.api.ScheduledJob;\n import pro.taskana.common.api.TaskanaEngine;\n import pro.taskana.common.api.TimeInterval;\n import pro.taskana.common.api.exceptions.InvalidArgumentException;\n-import pro.taskana.common.api.exceptions.NotAuthorizedException;\n import pro.taskana.common.api.exceptions.TaskanaException;\n import pro.taskana.common.internal.jobs.AbstractTaskanaJob;\n import pro.taskana.common.internal.transaction.TaskanaTransactionProvider;\n import pro.taskana.common.internal.util.LogSanitizer;\n import pro.taskana.task.api.models.TaskSummary;\n \n-/**\n- * Job to cleanup completed tasks after a period of time.\n- */\n+/** Job to cleanup completed tasks after a period of time. */\n public class TaskCleanupJob extends AbstractTaskanaJob {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(TaskCleanupJob.class);\n \n-  private static final SortDirection ASCENDING = SortDirection.ASCENDING;\n+  private static BaseQuery.SortDirection asc = BaseQuery.SortDirection.ASCENDING;\n \n   // Parameter\n-  private final Instant firstRun;\n-  private final Duration runEvery;\n-  private final Duration minimumAge;\n-  private final int batchSize;\n-  private final boolean allCompletedSameParentBusiness;\n+  private Instant firstRun;\n+  private Duration runEvery;\n+  private Duration minimumAge;\n+  private int batchSize;\n+  private boolean allCompletedSameParentBusiness;\n \n   public TaskCleanupJob(\n       TaskanaEngine taskanaEngine,\n", "next_change": {"commit": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex 54cec186e..abfcf4ca1 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -10,32 +10,35 @@ import java.util.stream.Collectors;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import pro.taskana.common.api.BaseQuery;\n+import pro.taskana.common.api.BaseQuery.SortDirection;\n import pro.taskana.common.api.BulkOperationResults;\n import pro.taskana.common.api.LoggerUtils;\n import pro.taskana.common.api.ScheduledJob;\n import pro.taskana.common.api.TaskanaEngine;\n import pro.taskana.common.api.TimeInterval;\n import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n import pro.taskana.common.api.exceptions.TaskanaException;\n import pro.taskana.common.internal.jobs.AbstractTaskanaJob;\n import pro.taskana.common.internal.transaction.TaskanaTransactionProvider;\n import pro.taskana.common.internal.util.LogSanitizer;\n import pro.taskana.task.api.models.TaskSummary;\n \n-/** Job to cleanup completed tasks after a period of time. */\n+/**\n+ * Job to cleanup completed tasks after a period of time.\n+ */\n public class TaskCleanupJob extends AbstractTaskanaJob {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(TaskCleanupJob.class);\n \n-  private static BaseQuery.SortDirection asc = BaseQuery.SortDirection.ASCENDING;\n+  private static final SortDirection ASCENDING = SortDirection.ASCENDING;\n \n   // Parameter\n-  private Instant firstRun;\n-  private Duration runEvery;\n-  private Duration minimumAge;\n-  private int batchSize;\n-  private boolean allCompletedSameParentBusiness;\n+  private final Instant firstRun;\n+  private final Duration runEvery;\n+  private final Duration minimumAge;\n+  private final int batchSize;\n+  private final boolean allCompletedSameParentBusiness;\n \n   public TaskCleanupJob(\n       TaskanaEngine taskanaEngine,\n", "next_change": {"commit": "9906c0c7f913a2fa306ceaf665ec8accbc2761f0", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex abfcf4ca1..f1800a656 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -34,8 +33,6 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n   private static final SortDirection ASCENDING = SortDirection.ASCENDING;\n \n   // Parameter\n-  private final Instant firstRun;\n-  private final Duration runEvery;\n   private final Duration minimumAge;\n   private final int batchSize;\n   private final boolean allCompletedSameParentBusiness;\n", "next_change": {"commit": "55d21a9e8b82b363e50140a6cec48ffe347e2fd9", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex f1800a656..4567041eb 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -30,18 +31,15 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(TaskCleanupJob.class);\n \n-  private static final SortDirection ASCENDING = SortDirection.ASCENDING;\n-\n-  // Parameter\n   private final Duration minimumAge;\n   private final int batchSize;\n   private final boolean allCompletedSameParentBusiness;\n \n   public TaskCleanupJob(\n       TaskanaEngine taskanaEngine,\n-      TaskanaTransactionProvider<Object> txProvider,\n+      TaskanaTransactionProvider txProvider,\n       ScheduledJob scheduledJob) {\n-    super(taskanaEngine, txProvider, scheduledJob);\n+    super(taskanaEngine, txProvider, scheduledJob, true);\n     minimumAge = taskanaEngine.getConfiguration().getCleanupJobMinimumAge();\n     batchSize = taskanaEngine.getConfiguration().getMaxNumberOfUpdatesPerTransaction();\n     allCompletedSameParentBusiness =\n", "next_change": {"commit": "4697fbe5beefd1c72144187847ee99fcd0883d9c", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex 4567041eb..040fdff96 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -41,7 +43,7 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n       ScheduledJob scheduledJob) {\n     super(taskanaEngine, txProvider, scheduledJob, true);\n     minimumAge = taskanaEngine.getConfiguration().getCleanupJobMinimumAge();\n-    batchSize = taskanaEngine.getConfiguration().getMaxNumberOfUpdatesPerTransaction();\n+    batchSize = taskanaEngine.getConfiguration().getJobBatchSize();\n     allCompletedSameParentBusiness =\n         taskanaEngine.getConfiguration().isTaskCleanupJobAllCompletedSameParentBusiness();\n   }\n", "next_change": {"commit": "d96b1c392a0f9ecfe72e7d0bc0aadac17620133c", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex 040fdff96..ea6ea3d4a 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -42,7 +40,7 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n       TaskanaTransactionProvider txProvider,\n       ScheduledJob scheduledJob) {\n     super(taskanaEngine, txProvider, scheduledJob, true);\n-    minimumAge = taskanaEngine.getConfiguration().getCleanupJobMinimumAge();\n+    minimumAge = taskanaEngine.getConfiguration().getTaskCleanupJobMinimumAge();\n     batchSize = taskanaEngine.getConfiguration().getJobBatchSize();\n     allCompletedSameParentBusiness =\n         taskanaEngine.getConfiguration().isTaskCleanupJobAllCompletedSameParentBusiness();\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex abfcf4ca1..f1800a656 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -45,8 +42,6 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n       TaskanaTransactionProvider<Object> txProvider,\n       ScheduledJob scheduledJob) {\n     super(taskanaEngine, txProvider, scheduledJob);\n-    firstRun = taskanaEngine.getConfiguration().getCleanupJobFirstRun();\n-    runEvery = taskanaEngine.getConfiguration().getCleanupJobRunEvery();\n     minimumAge = taskanaEngine.getConfiguration().getCleanupJobMinimumAge();\n     batchSize = taskanaEngine.getConfiguration().getMaxNumberOfUpdatesPerTransaction();\n     allCompletedSameParentBusiness =\n", "next_change": {"commit": "55d21a9e8b82b363e50140a6cec48ffe347e2fd9", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex f1800a656..4567041eb 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -30,18 +31,15 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(TaskCleanupJob.class);\n \n-  private static final SortDirection ASCENDING = SortDirection.ASCENDING;\n-\n-  // Parameter\n   private final Duration minimumAge;\n   private final int batchSize;\n   private final boolean allCompletedSameParentBusiness;\n \n   public TaskCleanupJob(\n       TaskanaEngine taskanaEngine,\n-      TaskanaTransactionProvider<Object> txProvider,\n+      TaskanaTransactionProvider txProvider,\n       ScheduledJob scheduledJob) {\n-    super(taskanaEngine, txProvider, scheduledJob);\n+    super(taskanaEngine, txProvider, scheduledJob, true);\n     minimumAge = taskanaEngine.getConfiguration().getCleanupJobMinimumAge();\n     batchSize = taskanaEngine.getConfiguration().getMaxNumberOfUpdatesPerTransaction();\n     allCompletedSameParentBusiness =\n", "next_change": {"commit": "4697fbe5beefd1c72144187847ee99fcd0883d9c", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex 4567041eb..040fdff96 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -41,7 +43,7 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n       ScheduledJob scheduledJob) {\n     super(taskanaEngine, txProvider, scheduledJob, true);\n     minimumAge = taskanaEngine.getConfiguration().getCleanupJobMinimumAge();\n-    batchSize = taskanaEngine.getConfiguration().getMaxNumberOfUpdatesPerTransaction();\n+    batchSize = taskanaEngine.getConfiguration().getJobBatchSize();\n     allCompletedSameParentBusiness =\n         taskanaEngine.getConfiguration().isTaskCleanupJobAllCompletedSameParentBusiness();\n   }\n", "next_change": {"commit": "d96b1c392a0f9ecfe72e7d0bc0aadac17620133c", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex 040fdff96..ea6ea3d4a 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -42,7 +40,7 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n       TaskanaTransactionProvider txProvider,\n       ScheduledJob scheduledJob) {\n     super(taskanaEngine, txProvider, scheduledJob, true);\n-    minimumAge = taskanaEngine.getConfiguration().getCleanupJobMinimumAge();\n+    minimumAge = taskanaEngine.getConfiguration().getTaskCleanupJobMinimumAge();\n     batchSize = taskanaEngine.getConfiguration().getJobBatchSize();\n     allCompletedSameParentBusiness =\n         taskanaEngine.getConfiguration().isTaskCleanupJobAllCompletedSameParentBusiness();\n", "next_change": null}]}}]}}, {"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex f1800a656..4567041eb 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -49,7 +47,7 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n   }\n \n   @Override\n-  public void run() throws TaskanaException {\n+  public void execute() {\n     Instant completedBefore = Instant.now().minus(minimumAge);\n     LOGGER.info(\"Running job to delete all tasks completed before ({})\", completedBefore);\n     try {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "3ce41b224efde509aea998be3ace278832b1d562", "committedDate": "2020-05-06 10:18:42 +0200", "message": "TSK-1182: refined architecture tests"}, {"oid": "1f13c2c33ac0ce2c8202a23f5d977c87717894a3", "committedDate": "2020-05-13 14:49:18 +0200", "message": "TSK-1195: Secure deleteTasks in TaskServiceImpl"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "c6755b35b7226f4989aeea25ceeb3e18204fed45", "committedDate": "2020-05-22 03:25:57 +0200", "message": "TSK-1244: added due/planned logic for SLA P0D"}, {"oid": "8832876b9372c135c2c2fce88bc4820a1cab37d7", "committedDate": "2020-06-03 14:32:31 +0200", "message": "TSK-1247: Removed LoggerUtils and replaced its usages with the standard toString implementations"}, {"oid": "a2318c267ea7f6d57cfffefc04c5285e66778fac", "committedDate": "2020-06-12 12:31:55 +0200", "message": "reformatted code"}, {"oid": "851b3536db5879bc668ecdd70cc0c6347ec57c8a", "committedDate": "2020-09-23 08:50:12 +0200", "message": "TSK-1332: Add HistoryCleanupJob"}, {"oid": "f113410ef4a5dd89a5368b9a4353319d11491436", "committedDate": "2020-10-16 09:57:39 +0200", "message": "TSK-1404: Delete old Cleanup jobs when initializing"}, {"oid": "4152bf92d0c2f6432c193a30199d895ff0b586f3", "committedDate": "2020-10-28 14:25:44 +0100", "message": "TSK-1437: Fixed some SonarCloud Code Smells"}, {"oid": "c6e82c1368da17762918b1ef5102974a302124af", "committedDate": "2021-02-02 08:16:07 +0100", "message": "TSK-1506: Fixed bug for Cleanup Jobs with more than 32767 tasks (#1457)"}, {"oid": "aa6d304b499a9df48d90ff3bfc375b25c5f00a71", "committedDate": "2021-02-03 09:34:22 +0100", "message": "TSK-1499: Fixed bug of also cleaning completed tasks with parentProcessId null/empty (#1394)"}, {"oid": "9906c0c7f913a2fa306ceaf665ec8accbc2761f0", "committedDate": "2021-02-03 11:56:03 +0100", "message": "TSK-1504: Next scheduled Job now based on due date of job before"}, {"oid": "bfcabea61048ccb21a591e0c4f1f8efecc7636b4", "committedDate": "2021-05-20 09:41:58 +0200", "message": "TSK-1596: Automatic TraceLogging (#1577)"}, {"oid": "dd5bccc62ca2f97c28ec7bef9c9639635e8c8d7f", "committedDate": "2021-06-10 10:49:53 +0200", "message": "TSK-1654: fixed current code smells"}, {"oid": "34d2bbfa929ccaa9e9b93c173b8fa867154330bb", "committedDate": "2021-07-14 10:49:34 +0200", "message": "TSK-1647: Implemented an error key for every exception"}, {"oid": "55d21a9e8b82b363e50140a6cec48ffe347e2fd9", "committedDate": "2021-08-02 16:42:09 +0200", "message": "TSK-1649: implemented database lock for resolution of jobs to run"}, {"oid": "5d08893a6b2a770fb15ac32411833baa071ce3bb", "committedDate": "2021-08-31 13:41:23 +0200", "message": "TSK-1724: Change JobType from Enum to String"}, {"oid": "8eb8f1f44db9c1724582ef04f9037f089342c818", "committedDate": "2021-08-31 13:41:23 +0200", "message": "TSK-1724: Code Review Changes"}, {"oid": "93d0b27bb058a4f47218177136bce81f99103345", "committedDate": "2022-04-26 15:27:56 +0200", "message": "TSK-1831: dropped support for JDK8"}, {"oid": "20d389a7d524c156b063dfc91589bb22bebea0d7", "committedDate": "2023-03-13 10:39:04 +0100", "message": "TSK-1992 remove unnecessary ParentExceptions"}, {"oid": "4697fbe5beefd1c72144187847ee99fcd0883d9c", "committedDate": "2023-03-13 10:39:04 +0100", "message": "TSK-2004: JavaDoc 4 TaskanaConfiguration.Builder#initTaskanaProperties"}, {"oid": "f64e38eb27a840be235ed88a6dcd7adc8ccd942c", "committedDate": "2023-03-13 10:39:04 +0100", "message": "TSK-1989: integrate execution of jobs in taskana core (#2087)"}, {"oid": "d21eb47ffea4c2c9fff8f1d3435b77b805d03508", "committedDate": "2023-03-13 10:39:04 +0100", "message": "TSK-2012: renamed Mismatched_Exceptions to NotAuthorizedExceptions"}, {"oid": "55d939ca7b7720ab12f488ed8fc2a631ecc6f05c", "committedDate": "2023-03-13 19:02:53 +0100", "message": "format entire codebase with new google-java-format version"}, {"oid": "d96b1c392a0f9ecfe72e7d0bc0aadac17620133c", "committedDate": "2023-03-15 01:00:50 +0100", "message": "TSK-1991: rework of property names"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxODY2Mw==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r424218663", "body": "Why are you additionally casting from Integer to int? Autounboxing should do this automatically", "bodyText": "Why are you additionally casting from Integer to int? Autounboxing should do this automatically", "bodyHTML": "<p dir=\"auto\">Why are you additionally casting from Integer to int? Autounboxing should do this automatically</p>", "author": "mustaphazorgati", "createdAt": "2020-05-13T07:11:16Z", "path": "lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java", "diffHunk": "@@ -76,31 +76,27 @@ public static void initializeSchedule(TaskanaEngine taskanaEngine) {\n   }\n \n   private List<String> getWorkbasketsMarkedForDeletion() {\n-    List<String> workbasketList =\n-        taskanaEngineImpl\n-            .getWorkbasketService()\n-            .createWorkbasketQuery()\n-            .markedForDeletion(true)\n-            .listValues(WorkbasketQueryColumnName.ID, BaseQuery.SortDirection.ASCENDING);\n \n-    return workbasketList;\n+    return taskanaEngineImpl\n+        .getWorkbasketService()\n+        .createWorkbasketQuery()\n+        .markedForDeletion(true)\n+        .listValues(WorkbasketQueryColumnName.ID, BaseQuery.SortDirection.ASCENDING);\n   }\n \n   private int deleteWorkbasketsTransactionally(List<String> workbasketsToBeDeleted) {\n     int deletedWorkbasketsCount = 0;\n     if (txProvider != null) {\n-      int count =\n-          (Integer)\n-              txProvider.executeInTransaction(\n-                  () -> {\n-                    try {\n-                      return deleteWorkbaskets(workbasketsToBeDeleted);\n-                    } catch (Exception e) {\n-                      LOGGER.warn(\"Could not delete workbaskets.\", e);\n-                      return 0;\n-                    }\n-                  });\n-      return count;\n+      return (int) (Integer)", "originalCommit": "4c550f1f54bfb1a5c99f4127bc303f4c7d16a9f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "917535fbc017b6e7d19dfc57d60466e404d57c33", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\nindex 1cb0bdc5e..5474ffd28 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\n", "chunk": "@@ -87,7 +87,7 @@ public class WorkbasketCleanupJob extends AbstractTaskanaJob {\n   private int deleteWorkbasketsTransactionally(List<String> workbasketsToBeDeleted) {\n     int deletedWorkbasketsCount = 0;\n     if (txProvider != null) {\n-      return (int) (Integer)\n+      return (Integer)\n           txProvider.executeInTransaction(\n               () -> {\n                 try {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\nindex 1cb0bdc5e..5474ffd28 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\n", "chunk": "@@ -87,7 +87,7 @@ public class WorkbasketCleanupJob extends AbstractTaskanaJob {\n   private int deleteWorkbasketsTransactionally(List<String> workbasketsToBeDeleted) {\n     int deletedWorkbasketsCount = 0;\n     if (txProvider != null) {\n-      return (int) (Integer)\n+      return (Integer)\n           txProvider.executeInTransaction(\n               () -> {\n                 try {\n", "next_change": {"commit": "3ce41b224efde509aea998be3ace278832b1d562", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\nindex 5474ffd28..3c5c724c6 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\n", "chunk": "@@ -76,27 +76,31 @@ public class WorkbasketCleanupJob extends AbstractTaskanaJob {\n   }\n \n   private List<String> getWorkbasketsMarkedForDeletion() {\n+    List<String> workbasketList =\n+        taskanaEngineImpl\n+            .getWorkbasketService()\n+            .createWorkbasketQuery()\n+            .markedForDeletion(true)\n+            .listValues(WorkbasketQueryColumnName.ID, BaseQuery.SortDirection.ASCENDING);\n \n-    return taskanaEngineImpl\n-        .getWorkbasketService()\n-        .createWorkbasketQuery()\n-        .markedForDeletion(true)\n-        .listValues(WorkbasketQueryColumnName.ID, BaseQuery.SortDirection.ASCENDING);\n+    return workbasketList;\n   }\n \n   private int deleteWorkbasketsTransactionally(List<String> workbasketsToBeDeleted) {\n     int deletedWorkbasketsCount = 0;\n     if (txProvider != null) {\n-      return (Integer)\n-          txProvider.executeInTransaction(\n-              () -> {\n-                try {\n-                  return deleteWorkbaskets(workbasketsToBeDeleted);\n-                } catch (Exception e) {\n-                  LOGGER.warn(\"Could not delete workbaskets.\", e);\n-                  return 0;\n-                }\n-              });\n+      int count =\n+          (Integer)\n+              txProvider.executeInTransaction(\n+                  () -> {\n+                    try {\n+                      return deleteWorkbaskets(workbasketsToBeDeleted);\n+                    } catch (Exception e) {\n+                      LOGGER.warn(\"Could not delete workbaskets.\", e);\n+                      return 0;\n+                    }\n+                  });\n+      return count;\n     } else {\n       try {\n         deletedWorkbasketsCount = deleteWorkbaskets(workbasketsToBeDeleted);\n", "next_change": {"commit": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\nindex 3c5c724c6..5474ffd28 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\n", "chunk": "@@ -76,31 +76,27 @@ public class WorkbasketCleanupJob extends AbstractTaskanaJob {\n   }\n \n   private List<String> getWorkbasketsMarkedForDeletion() {\n-    List<String> workbasketList =\n-        taskanaEngineImpl\n-            .getWorkbasketService()\n-            .createWorkbasketQuery()\n-            .markedForDeletion(true)\n-            .listValues(WorkbasketQueryColumnName.ID, BaseQuery.SortDirection.ASCENDING);\n \n-    return workbasketList;\n+    return taskanaEngineImpl\n+        .getWorkbasketService()\n+        .createWorkbasketQuery()\n+        .markedForDeletion(true)\n+        .listValues(WorkbasketQueryColumnName.ID, BaseQuery.SortDirection.ASCENDING);\n   }\n \n   private int deleteWorkbasketsTransactionally(List<String> workbasketsToBeDeleted) {\n     int deletedWorkbasketsCount = 0;\n     if (txProvider != null) {\n-      int count =\n-          (Integer)\n-              txProvider.executeInTransaction(\n-                  () -> {\n-                    try {\n-                      return deleteWorkbaskets(workbasketsToBeDeleted);\n-                    } catch (Exception e) {\n-                      LOGGER.warn(\"Could not delete workbaskets.\", e);\n-                      return 0;\n-                    }\n-                  });\n-      return count;\n+      return (Integer)\n+          txProvider.executeInTransaction(\n+              () -> {\n+                try {\n+                  return deleteWorkbaskets(workbasketsToBeDeleted);\n+                } catch (Exception e) {\n+                  LOGGER.warn(\"Could not delete workbaskets.\", e);\n+                  return 0;\n+                }\n+              });\n     } else {\n       try {\n         deletedWorkbasketsCount = deleteWorkbaskets(workbasketsToBeDeleted);\n", "next_change": {"commit": "55d21a9e8b82b363e50140a6cec48ffe347e2fd9", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\nindex 5474ffd28..d88a36e06 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\n", "chunk": "@@ -85,26 +79,16 @@ public class WorkbasketCleanupJob extends AbstractTaskanaJob {\n   }\n \n   private int deleteWorkbasketsTransactionally(List<String> workbasketsToBeDeleted) {\n-    int deletedWorkbasketsCount = 0;\n-    if (txProvider != null) {\n-      return (Integer)\n-          txProvider.executeInTransaction(\n-              () -> {\n-                try {\n-                  return deleteWorkbaskets(workbasketsToBeDeleted);\n-                } catch (Exception e) {\n-                  LOGGER.warn(\"Could not delete workbaskets.\", e);\n-                  return 0;\n-                }\n-              });\n-    } else {\n-      try {\n-        deletedWorkbasketsCount = deleteWorkbaskets(workbasketsToBeDeleted);\n-      } catch (Exception e) {\n-        LOGGER.warn(\"Could not delete workbaskets.\", e);\n-      }\n-    }\n-    return deletedWorkbasketsCount;\n+    return TaskanaTransactionProvider.executeInTransactionIfPossible(\n+        txProvider,\n+        () -> {\n+          try {\n+            return deleteWorkbaskets(workbasketsToBeDeleted);\n+          } catch (Exception e) {\n+            LOGGER.warn(\"Could not delete workbaskets.\", e);\n+            return 0;\n+          }\n+        });\n   }\n \n   private int deleteWorkbaskets(List<String> workbasketsToBeDeleted)\n", "next_change": {"commit": "20d389a7d524c156b063dfc91589bb22bebea0d7", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\nindex d88a36e06..8aac6bc42 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\n", "chunk": "@@ -92,7 +91,7 @@ public class WorkbasketCleanupJob extends AbstractTaskanaJob {\n   }\n \n   private int deleteWorkbaskets(List<String> workbasketsToBeDeleted)\n-      throws InvalidArgumentException, NotAuthorizedException {\n+      throws InvalidArgumentException, MismatchedRoleException {\n \n     BulkOperationResults<String, TaskanaException> results =\n         taskanaEngineImpl.getWorkbasketService().deleteWorkbaskets(workbasketsToBeDeleted);\n", "next_change": {"commit": "d21eb47ffea4c2c9fff8f1d3435b77b805d03508", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\nindex 8aac6bc42..700a2cec4 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/jobs/WorkbasketCleanupJob.java\n", "chunk": "@@ -91,7 +77,7 @@ public class WorkbasketCleanupJob extends AbstractTaskanaJob {\n   }\n \n   private int deleteWorkbaskets(List<String> workbasketsToBeDeleted)\n-      throws InvalidArgumentException, MismatchedRoleException {\n+      throws InvalidArgumentException, NotAuthorizedException {\n \n     BulkOperationResults<String, TaskanaException> results =\n         taskanaEngineImpl.getWorkbasketService().deleteWorkbaskets(workbasketsToBeDeleted);\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "3ce41b224efde509aea998be3ace278832b1d562", "committedDate": "2020-05-06 10:18:42 +0200", "message": "TSK-1182: refined architecture tests"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "92f81a6d2ba196d6cab9e1d23dbeb40c625a5983", "committedDate": "2020-06-06 18:15:52 +0200", "message": "TSK-1281: reduced open bugs and recent code smells"}, {"oid": "f113410ef4a5dd89a5368b9a4353319d11491436", "committedDate": "2020-10-16 09:57:39 +0200", "message": "TSK-1404: Delete old Cleanup jobs when initializing"}, {"oid": "aa6d304b499a9df48d90ff3bfc375b25c5f00a71", "committedDate": "2021-02-03 09:34:22 +0100", "message": "TSK-1499: Fixed bug of also cleaning completed tasks with parentProcessId null/empty (#1394)"}, {"oid": "9906c0c7f913a2fa306ceaf665ec8accbc2761f0", "committedDate": "2021-02-03 11:56:03 +0100", "message": "TSK-1504: Next scheduled Job now based on due date of job before"}, {"oid": "ff0b77f6ad4b758fdb89365e958269fe9f0b122e", "committedDate": "2021-02-03 12:33:16 +0100", "message": "TSK-1507: Cleaned up some CodeSmells (#1400)"}, {"oid": "bfcabea61048ccb21a591e0c4f1f8efecc7636b4", "committedDate": "2021-05-20 09:41:58 +0200", "message": "TSK-1596: Automatic TraceLogging (#1577)"}, {"oid": "34d2bbfa929ccaa9e9b93c173b8fa867154330bb", "committedDate": "2021-07-14 10:49:34 +0200", "message": "TSK-1647: Implemented an error key for every exception"}, {"oid": "55d21a9e8b82b363e50140a6cec48ffe347e2fd9", "committedDate": "2021-08-02 16:42:09 +0200", "message": "TSK-1649: implemented database lock for resolution of jobs to run"}, {"oid": "5d08893a6b2a770fb15ac32411833baa071ce3bb", "committedDate": "2021-08-31 13:41:23 +0200", "message": "TSK-1724: Change JobType from Enum to String"}, {"oid": "8eb8f1f44db9c1724582ef04f9037f089342c818", "committedDate": "2021-08-31 13:41:23 +0200", "message": "TSK-1724: Code Review Changes"}, {"oid": "20d389a7d524c156b063dfc91589bb22bebea0d7", "committedDate": "2023-03-13 10:39:04 +0100", "message": "TSK-1992 remove unnecessary ParentExceptions"}, {"oid": "4697fbe5beefd1c72144187847ee99fcd0883d9c", "committedDate": "2023-03-13 10:39:04 +0100", "message": "TSK-2004: JavaDoc 4 TaskanaConfiguration.Builder#initTaskanaProperties"}, {"oid": "f64e38eb27a840be235ed88a6dcd7adc8ccd942c", "committedDate": "2023-03-13 10:39:04 +0100", "message": "TSK-1989: integrate execution of jobs in taskana core (#2087)"}, {"oid": "d21eb47ffea4c2c9fff8f1d3435b77b805d03508", "committedDate": "2023-03-13 10:39:04 +0100", "message": "TSK-2012: renamed Mismatched_Exceptions to NotAuthorizedExceptions"}, {"oid": "55d939ca7b7720ab12f488ed8fc2a631ecc6f05c", "committedDate": "2023-03-13 19:02:53 +0100", "message": "format entire codebase with new google-java-format version"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyMTIxNA==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r424221214", "body": "Personally I'd keep the enum name with an underscore", "bodyText": "Personally I'd keep the enum name with an underscore", "bodyHTML": "<p dir=\"auto\">Personally I'd keep the enum name with an underscore</p>", "author": "mustaphazorgati", "createdAt": "2020-05-13T07:16:31Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java", "diffHunk": "@@ -81,6 +76,6 @@ public TaskComment toEntityModel(TaskCommentRepresentationModel taskCommentRepre\n                .collect(\n                    Collectors.collectingAndThen(\n                        Collectors.toList(),\n-                       list -> new TaskanaPagedModel<>(TASK_COMMENTS, list, pageMetadata)));", "originalCommit": "4c550f1f54bfb1a5c99f4127bc303f4c7d16a9f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "917535fbc017b6e7d19dfc57d60466e404d57c33", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java\nindex 0f62162e9..767e9fe74 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java\n", "chunk": "@@ -76,6 +76,6 @@ public class TaskCommentRepresentationModelAssembler\n                .collect(\n                    Collectors.collectingAndThen(\n                        Collectors.toList(),\n-                       list -> new TaskanaPagedModel<>(TASKCOMMENTS, list, pageMetadata)));\n+                       list -> new TaskanaPagedModel<>(TASK_COMMENTS, list, pageMetadata)));\n   }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java\nindex 0f62162e9..767e9fe74 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentRepresentationModelAssembler.java\n", "chunk": "@@ -76,6 +76,6 @@ public class TaskCommentRepresentationModelAssembler\n                .collect(\n                    Collectors.collectingAndThen(\n                        Collectors.toList(),\n-                       list -> new TaskanaPagedModel<>(TASKCOMMENTS, list, pageMetadata)));\n+                       list -> new TaskanaPagedModel<>(TASK_COMMENTS, list, pageMetadata)));\n   }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyMjE1OA==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r424222158", "body": "as mentionned above: I prefer TASK_COMMENTS", "bodyText": "as mentionned above: I prefer TASK_COMMENTS", "bodyHTML": "<p dir=\"auto\">as mentionned above: I prefer TASK_COMMENTS</p>", "author": "mustaphazorgati", "createdAt": "2020-05-13T07:18:27Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java", "diffHunk": "@@ -11,7 +11,7 @@\n   CLASSIFICATIONS(\"classifications\"),\n   DISTRIBUTIONTARGETS(\"distributionTargets\"),\n   TASKS(\"tasks\"),\n-  TASK_COMMENTS(\"task_comments\"),\n+  TASKCOMMENTS(\"taskComments\"),", "originalCommit": "4c550f1f54bfb1a5c99f4127bc303f4c7d16a9f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "917535fbc017b6e7d19dfc57d60466e404d57c33", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\nindex c78867835..35c4a2089 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\n", "chunk": "@@ -9,9 +9,9 @@ import java.util.stream.Collectors;\n public enum TaskanaPagedModelKeys {\n   ACCESSITEMS(\"accessItems\"),\n   CLASSIFICATIONS(\"classifications\"),\n-  DISTRIBUTIONTARGETS(\"distributionTargets\"),\n+  DISTRIBUTION_TARGETS(\"distributionTargets\"),\n   TASKS(\"tasks\"),\n-  TASKCOMMENTS(\"taskComments\"),\n+  TASK_COMMENTS(\"taskComments\"),\n   WORKBASKETS(\"workbaskets\");\n \n   private static final Map<String, TaskanaPagedModelKeys> PROPERTY_MAP =\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\nindex c78867835..35c4a2089 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\n", "chunk": "@@ -9,9 +9,9 @@ import java.util.stream.Collectors;\n public enum TaskanaPagedModelKeys {\n   ACCESSITEMS(\"accessItems\"),\n   CLASSIFICATIONS(\"classifications\"),\n-  DISTRIBUTIONTARGETS(\"distributionTargets\"),\n+  DISTRIBUTION_TARGETS(\"distributionTargets\"),\n   TASKS(\"tasks\"),\n-  TASKCOMMENTS(\"taskComments\"),\n+  TASK_COMMENTS(\"taskComments\"),\n   WORKBASKETS(\"workbaskets\");\n \n   private static final Map<String, TaskanaPagedModelKeys> PROPERTY_MAP =\n", "next_change": null}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyMjI5OA==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r424222298", "body": "DISTRIBUTION_TARGETS would be a better name. (personal preference)", "bodyText": "DISTRIBUTION_TARGETS would be a better name. (personal preference)", "bodyHTML": "<p dir=\"auto\">DISTRIBUTION_TARGETS would be a better name. (personal preference)</p>", "author": "mustaphazorgati", "createdAt": "2020-05-13T07:18:45Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java", "diffHunk": "@@ -11,7 +11,7 @@\n   CLASSIFICATIONS(\"classifications\"),\n   DISTRIBUTIONTARGETS(\"distributionTargets\"),", "originalCommit": "4c550f1f54bfb1a5c99f4127bc303f4c7d16a9f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "917535fbc017b6e7d19dfc57d60466e404d57c33", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\nindex c78867835..35c4a2089 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\n", "chunk": "@@ -9,9 +9,9 @@ import java.util.stream.Collectors;\n public enum TaskanaPagedModelKeys {\n   ACCESSITEMS(\"accessItems\"),\n   CLASSIFICATIONS(\"classifications\"),\n-  DISTRIBUTIONTARGETS(\"distributionTargets\"),\n+  DISTRIBUTION_TARGETS(\"distributionTargets\"),\n   TASKS(\"tasks\"),\n-  TASKCOMMENTS(\"taskComments\"),\n+  TASK_COMMENTS(\"taskComments\"),\n   WORKBASKETS(\"workbaskets\");\n \n   private static final Map<String, TaskanaPagedModelKeys> PROPERTY_MAP =\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\nindex c78867835..35c4a2089 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskanaPagedModelKeys.java\n", "chunk": "@@ -9,9 +9,9 @@ import java.util.stream.Collectors;\n public enum TaskanaPagedModelKeys {\n   ACCESSITEMS(\"accessItems\"),\n   CLASSIFICATIONS(\"classifications\"),\n-  DISTRIBUTIONTARGETS(\"distributionTargets\"),\n+  DISTRIBUTION_TARGETS(\"distributionTargets\"),\n   TASKS(\"tasks\"),\n-  TASKCOMMENTS(\"taskComments\"),\n+  TASK_COMMENTS(\"taskComments\"),\n   WORKBASKETS(\"workbaskets\");\n \n   private static final Map<String, TaskanaPagedModelKeys> PROPERTY_MAP =\n", "next_change": null}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyMjk2NQ==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r424222965", "body": "why did you add this?", "bodyText": "why did you add this?", "bodyHTML": "<p dir=\"auto\">why did you add this?</p>", "author": "mustaphazorgati", "createdAt": "2020-05-13T07:20:05Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java", "diffHunk": "@@ -248,10 +250,11 @@ void setUp() {\n \n   @Test\n   void getAllClassificationsDocTest() throws Exception {\n+    classificationFieldDescriptionsMap.put(\"_links.self.href\", \"link to self\");", "originalCommit": "4c550f1f54bfb1a5c99f4127bc303f4c7d16a9f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "917535fbc017b6e7d19dfc57d60466e404d57c33", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\nindex 2584aff71..70924279e 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n", "chunk": "@@ -250,7 +250,6 @@ class ClassificationControllerRestDocumentation extends BaseRestDocumentation {\n \n   @Test\n   void getAllClassificationsDocTest() throws Exception {\n-    classificationFieldDescriptionsMap.put(\"_links.self.href\", \"link to self\");\n     this.mockMvc\n         .perform(\n             RestDocumentationRequestBuilders.get(\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\nindex 2584aff71..70924279e 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n", "chunk": "@@ -250,7 +250,6 @@ class ClassificationControllerRestDocumentation extends BaseRestDocumentation {\n \n   @Test\n   void getAllClassificationsDocTest() throws Exception {\n-    classificationFieldDescriptionsMap.put(\"_links.self.href\", \"link to self\");\n     this.mockMvc\n         .perform(\n             RestDocumentationRequestBuilders.get(\n", "next_change": {"commit": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\nindex 70924279e..335b4741b 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n", "chunk": "@@ -27,334 +27,261 @@ import pro.taskana.rest.Mapping;\n  */\n class ClassificationControllerRestDocumentation extends BaseRestDocumentation {\n \n-  private final HashMap<String, String> classificationFieldDescriptionsMap =\n-      new HashMap<>();\n+    private HashMap<String, String> classificationFieldDescriptionsMap = new HashMap<String, String>();\n+\n+    private FieldDescriptor[] allClassificationsFieldDescriptors;\n+    private FieldDescriptor[] classificationFieldDescriptors;\n+    private FieldDescriptor[] classificationSubsetFieldDescriptors;\n+    private FieldDescriptor[] createClassificationFieldDescriptors;\n \n-  private FieldDescriptor[] allClassificationsFieldDescriptors;\n-  private FieldDescriptor[] classificationFieldDescriptors;\n-  private FieldDescriptor[] classificationSubsetFieldDescriptors;\n-  private FieldDescriptor[] createClassificationFieldDescriptors;\n+    @BeforeEach\n+    void setUp() {\n \n-  @BeforeEach\n-  void setUp() {\n+        classificationFieldDescriptionsMap.put(\"classificationId\", \"Unique Id\");\n+        classificationFieldDescriptionsMap.put(\"key\",\n+            \"The key of the classification. This is typically an externally known code or abbreviation of the classification\");\n+        classificationFieldDescriptionsMap.put(\"parentId\",\n+            \"The id of the parent classification. Empty string (\\\"\\\") if this is a root classification.\");\n+        classificationFieldDescriptionsMap.put(\"parentKey\",\n+            \"The key of the parent classification. Empty string (\\\"\\\") if this is a root classification.\");\n+        classificationFieldDescriptionsMap.put(\"category\",\n+            \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\");\n+        classificationFieldDescriptionsMap.put(\"type\", \"The type of classification (TASK, DOCUMENT)\");\n+        classificationFieldDescriptionsMap.put(\"domain\", \"The domain for which this classification is specified\");\n+        classificationFieldDescriptionsMap.put(\"isValidInDomain\",\n+            \"True, if this classification to objects in this domain\");\n+        classificationFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the classification in the system\");\n+        classificationFieldDescriptionsMap.put(\"modified\", \"The timestamp of the last modification date\");\n+        classificationFieldDescriptionsMap.put(\"name\", \"The name of the classification\");\n+        classificationFieldDescriptionsMap.put(\"description\", \"The description of the classification\");\n+        classificationFieldDescriptionsMap.put(\"priority\", \"The priority of the classification\");\n+        classificationFieldDescriptionsMap.put(\"serviceLevel\",\n+            \"The service level of the classification. This is stated according to ISO 8601\");\n+        classificationFieldDescriptionsMap.put(\"applicationEntryPoint\",\n+            \"The logical name of the entry point, the task list application should redirect to work on a task of this classification\");\n+        classificationFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n+        classificationFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n+        classificationFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n+        classificationFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n+        classificationFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n+        classificationFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n+        classificationFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n+        classificationFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n+        classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.href\", \"Link to all classifications\");\n+        classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.templated\", \"\");\n \n-    classificationFieldDescriptionsMap.put(\"classificationId\", \"Unique Id\");\n-    classificationFieldDescriptionsMap.put(\n-        \"key\",\n-        \"The key of the classification. This is typically an externally \"\n-            + \"known code or abbreviation of the classification\");\n-    classificationFieldDescriptionsMap.put(\n-        \"parentId\",\n-        \"The id of the parent classification. Empty string (\\\"\\\") \"\n-            + \"if this is a root classification.\");\n-    classificationFieldDescriptionsMap.put(\n-        \"parentKey\",\n-        \"The key of the parent classification. Empty string (\\\"\\\") \"\n-            + \"if this is a root classification.\");\n-    classificationFieldDescriptionsMap.put(\n-        \"category\", \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\");\n-    classificationFieldDescriptionsMap.put(\"type\", \"The type of classification (TASK, DOCUMENT)\");\n-    classificationFieldDescriptionsMap.put(\n-        \"domain\", \"The domain for which this classification is specified\");\n-    classificationFieldDescriptionsMap.put(\n-        \"isValidInDomain\", \"True, if this classification to objects in this domain\");\n-    classificationFieldDescriptionsMap.put(\n-        \"created\", \"The creation timestamp of the classification in the system\");\n-    classificationFieldDescriptionsMap.put(\n-        \"modified\", \"The timestamp of the last modification date\");\n-    classificationFieldDescriptionsMap.put(\"name\", \"The name of the classification\");\n-    classificationFieldDescriptionsMap.put(\"description\", \"The description of the classification\");\n-    classificationFieldDescriptionsMap.put(\"priority\", \"The priority of the classification\");\n-    classificationFieldDescriptionsMap.put(\n-        \"serviceLevel\",\n-        \"The service level of the classification. This is stated according to ISO 8601\");\n-    classificationFieldDescriptionsMap.put(\n-        \"applicationEntryPoint\",\n-        \"The logical name of the entry point, the task list application \"\n-            + \"should redirect to work on a task of this classification\");\n-    classificationFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-    classificationFieldDescriptionsMap.put(\n-        \"_links.getAllClassifications.href\", \"Link to all classifications\");\n-    classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.templated\", \"\");\n+        allClassificationsFieldDescriptors = new FieldDescriptor[] {\n \n-    allClassificationsFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"classifications\")\n-              .description(\"An Array of <<classification-subset, Classification-Subsets>>\"),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n+            subsectionWithPath(\"classifications\")\n+                .description(\"An Array of <<classification-subset, Classification-Subsets>>\"),\n+            fieldWithPath(\"_links.self.href\").ignored(),\n+            fieldWithPath(\"page\").ignored()\n         };\n \n-    classificationFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"classificationId\")\n-              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-          fieldWithPath(\"parentKey\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"isValidInDomain\")\n-              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\")),\n-          fieldWithPath(\"created\").description(classificationFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"modified\").description(classificationFieldDescriptionsMap.get(\"modified\")),\n-          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"description\")\n-              .description(classificationFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"serviceLevel\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-          fieldWithPath(\"applicationEntryPoint\")\n-              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\")),\n-          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n+        classificationFieldDescriptors = new FieldDescriptor[] {\n+\n+            fieldWithPath(\"classificationId\").description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n+            fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n+            fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n+            fieldWithPath(\"parentKey\").description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n+            fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n+            fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n+            fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n+            fieldWithPath(\"isValidInDomain\").description(classificationFieldDescriptionsMap.get(\"isValidInDomain\")),\n+            fieldWithPath(\"created\").description(classificationFieldDescriptionsMap.get(\"created\")),\n+            fieldWithPath(\"modified\").description(classificationFieldDescriptionsMap.get(\"modified\")),\n+            fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n+            fieldWithPath(\"description\").description(classificationFieldDescriptionsMap.get(\"description\")),\n+            fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n+            fieldWithPath(\"serviceLevel\").description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n+            fieldWithPath(\"applicationEntryPoint\")\n+                .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\")),\n+            fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n+            fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n+            fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n+            fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n+            fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n+            fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n+            fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n+            fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n+            fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-    classificationSubsetFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"classificationId\")\n-              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"isValidInDomain\").ignored(),\n-          fieldWithPath(\"created\").ignored(),\n-          fieldWithPath(\"modified\").ignored(),\n-          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-          fieldWithPath(\"parentKey\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-          fieldWithPath(\"description\").ignored(),\n-          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"serviceLevel\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-          fieldWithPath(\"applicationEntryPoint\").ignored(),\n-          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n+        classificationSubsetFieldDescriptors = new FieldDescriptor[] {\n+\n+            fieldWithPath(\"classificationId\").description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n+            fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n+            fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n+            fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n+            fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n+            fieldWithPath(\"isValidInDomain\").ignored(),\n+            fieldWithPath(\"created\").ignored(),\n+            fieldWithPath(\"modified\").ignored(),\n+            fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n+            fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n+            fieldWithPath(\"parentKey\").description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n+            fieldWithPath(\"description\").ignored(),\n+            fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n+            fieldWithPath(\"serviceLevel\").description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n+            fieldWithPath(\"applicationEntryPoint\").ignored(),\n+            fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n+            fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n+            fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n+            fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n+            fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n+            fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n+            fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n+            fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n+            fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-    createClassificationFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"category\")\n-              .type(\"String\")\n-              .description(\n-                  \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\")\n-              .optional(),\n-          fieldWithPath(\"domain\")\n-              .description(\"The domain for which this classification is specified\"),\n-          fieldWithPath(\"key\")\n-              .description(\n-                  \"The key of the classification. This is typically an externally \"\n-                      + \"known code or abbreviation of the classification\"),\n-          fieldWithPath(\"name\")\n-              .type(\"String\")\n-              .description(\"The name of the classification\")\n-              .optional(),\n-          fieldWithPath(\"type\")\n-              .type(\"String\")\n-              .description(\"The type of classification (TASK, DOCUMENT)\")\n-              .optional(),\n-          fieldWithPath(\"parentId\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentId\"))\n-              .optional(),\n-          fieldWithPath(\"parentKey\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\"))\n-              .optional(),\n-          fieldWithPath(\"isValidInDomain\")\n-              .type(\"Boolean\")\n-              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\"))\n-              .optional(),\n-          fieldWithPath(\"created\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"created\"))\n-              .optional(),\n-          fieldWithPath(\"modified\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"modified\"))\n-              .optional(),\n-          fieldWithPath(\"description\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"description\"))\n-              .optional(),\n-          fieldWithPath(\"priority\")\n-              .type(\"Number\")\n-              .description(classificationFieldDescriptionsMap.get(\"priority\"))\n-              .optional(),\n-          fieldWithPath(\"serviceLevel\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\"))\n-              .optional(),\n-          fieldWithPath(\"applicationEntryPoint\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\"))\n-              .optional(),\n-          fieldWithPath(\"custom1\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom1\"))\n-              .optional(),\n-          fieldWithPath(\"custom2\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom2\"))\n-              .optional(),\n-          fieldWithPath(\"custom3\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom3\"))\n-              .optional(),\n-          fieldWithPath(\"custom4\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom4\"))\n-              .optional(),\n-          fieldWithPath(\"custom5\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom5\"))\n-              .optional(),\n-          fieldWithPath(\"custom6\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom6\"))\n-              .optional(),\n-          fieldWithPath(\"custom7\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom7\"))\n-              .optional(),\n-          fieldWithPath(\"custom8\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom8\"))\n-              .optional()\n+        createClassificationFieldDescriptors = new FieldDescriptor[] {\n+\n+            fieldWithPath(\"category\").type(\"String\")\n+                .description(\"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\")\n+                .optional(),\n+            fieldWithPath(\"domain\").description(\"The domain for which this classification is specified\"),\n+            fieldWithPath(\"key\").description(\n+                \"The key of the classification. This is typically an externally known code or abbreviation of the classification\"),\n+            fieldWithPath(\"name\").type(\"String\").description(\"The name of the classification\").optional(),\n+            fieldWithPath(\"type\").type(\"String\").description(\"The type of classification (TASK, DOCUMENT)\").optional(),\n+            fieldWithPath(\"parentId\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"parentId\"))\n+                .optional(),\n+            fieldWithPath(\"parentKey\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"parentKey\"))\n+                .optional(),\n+            fieldWithPath(\"isValidInDomain\").type(\"Boolean\")\n+                .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\"))\n+                .optional(),\n+            fieldWithPath(\"created\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"created\"))\n+                .optional(),\n+            fieldWithPath(\"modified\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"modified\"))\n+                .optional(),\n+            fieldWithPath(\"description\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"description\"))\n+                .optional(),\n+            fieldWithPath(\"priority\").type(\"Number\")\n+                .description(classificationFieldDescriptionsMap.get(\"priority\"))\n+                .optional(),\n+            fieldWithPath(\"serviceLevel\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"serviceLevel\"))\n+                .optional(),\n+            fieldWithPath(\"applicationEntryPoint\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\"))\n+                .optional(),\n+            fieldWithPath(\"custom1\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"custom1\"))\n+                .optional(),\n+            fieldWithPath(\"custom2\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"custom2\"))\n+                .optional(),\n+            fieldWithPath(\"custom3\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"custom3\"))\n+                .optional(),\n+            fieldWithPath(\"custom4\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"custom4\"))\n+                .optional(),\n+            fieldWithPath(\"custom5\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"custom5\"))\n+                .optional(),\n+            fieldWithPath(\"custom6\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"custom6\"))\n+                .optional(),\n+            fieldWithPath(\"custom7\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"custom7\"))\n+                .optional(),\n+            fieldWithPath(\"custom8\").type(\"String\")\n+                .description(classificationFieldDescriptionsMap.get(\"custom8\"))\n+                .optional()\n         };\n-  }\n+    }\n \n-  @Test\n-  void getAllClassificationsDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                restHelper.toUrl(Mapping.URL_CLASSIFICATIONS) + \"?domain=DOMAIN_B\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllClassificationsDocTest\",\n+    @Test\n+    void getAllClassificationsDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .get(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS) + \"?domain=DOMAIN_B\")\n+            .accept(\"application/hal+json\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"GetAllClassificationsDocTest\",\n                 responseFields(allClassificationsFieldDescriptors)));\n-  }\n+    }\n \n-  @Test\n-  void getSpecificClassificationDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetSpecificClassificationDocTest\",\n+    @Test\n+    void getSpecificClassificationDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .get(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"GetSpecificClassificationDocTest\",\n                 responseFields(classificationFieldDescriptors)));\n-  }\n+    }\n \n-  @Test\n-  void classificationSubsetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"ClassificationSubset\", responseFields(classificationSubsetFieldDescriptors)));\n-  }\n+    @Test\n+    void classificationSubsetDocTest() throws Exception {\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .get(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"ClassificationSubset\",\n+                responseFields(classificationSubsetFieldDescriptors)));\n+    }\n \n-  @Test\n-  void createAndDeleteClassificationDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\"{\\\"key\\\":\\\"Key0815casdgdgh\\\", \\\"domain\\\":\\\"DOMAIN_B\\\"}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+    @Test\n+    void createAndDeleteClassificationDocTest() throws Exception {\n+        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .post(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS))\n+            .contentType(\"application/hal+json\")\n+            .content(\"{\\\"key\\\":\\\"Key0815casdgdgh\\\", \\\"domain\\\":\\\"DOMAIN_B\\\"}\")\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"CreateClassificationDocTest\",\n-                    requestFields(createClassificationFieldDescriptors),\n-                    responseFields(classificationFieldDescriptors)))\n+            .andDo(MockMvcRestDocumentation.document(\"CreateClassificationDocTest\",\n+                requestFields(createClassificationFieldDescriptors),\n+                responseFields(classificationFieldDescriptors)))\n             .andReturn();\n \n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"CLI:\"), content.indexOf(\"CLI:\") + 40);\n+        String content = result.getResponse().getContentAsString();\n+        String newId = content.substring(content.indexOf(\"CLI:\"), content.indexOf(\"CLI:\") + 40);\n \n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, newId))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"DeleteClassificationDocTest\"));\n-  }\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .delete(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, newId))\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isNoContent())\n+            .andDo(MockMvcRestDocumentation.document(\"DeleteClassificationDocTest\"));\n+    }\n \n-  @Test\n-  void updateClassificationDocTest() throws Exception {\n-    URL url =\n-        new URL(\n-            restHelper.toUrl(\n-                Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    assertEquals(200, con.getResponseCode());\n+    @Test\n+    void updateClassificationDocTest() throws Exception {\n+        URL url = new URL(\n+            restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"));\n+        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+        con.setRequestMethod(\"GET\");\n+        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+        assertEquals(200, con.getResponseCode());\n \n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuilder content = new StringBuilder();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n-    }\n-    in.close();\n-    con.disconnect();\n-    String modifiedTask = content.toString();\n+        BufferedReader in = new BufferedReader(\n+            new InputStreamReader(con.getInputStream()));\n+        String inputLine;\n+        StringBuffer content = new StringBuffer();\n+        while ((inputLine = in.readLine()) != null) {\n+            content.append(inputLine);\n+        }\n+        in.close();\n+        con.disconnect();\n+        String originalTask = content.toString();\n+        String modifiedTask = new String(originalTask.toString());\n \n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.put(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .contentType(\"application/json\")\n-                .content(modifiedTask))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"UpdateClassificationDocTest\",\n+        this.mockMvc.perform(RestDocumentationRequestBuilders\n+            .put(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+            .contentType(\"application/json\")\n+            .content(modifiedTask))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andDo(MockMvcRestDocumentation.document(\"UpdateClassificationDocTest\",\n                 requestFields(classificationFieldDescriptors),\n                 responseFields(classificationFieldDescriptors)));\n-  }\n+    }\n }\n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\nindex 335b4741b..2df11e025 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n", "chunk": "@@ -22,266 +21,334 @@ import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n \n import pro.taskana.rest.Mapping;\n \n-/**\n- * Generate REST Dokumentation for ClassificationController.\n- */\n+/** Generate REST Dokumentation for ClassificationController. */\n class ClassificationControllerRestDocumentation extends BaseRestDocumentation {\n \n-    private HashMap<String, String> classificationFieldDescriptionsMap = new HashMap<String, String>();\n-\n-    private FieldDescriptor[] allClassificationsFieldDescriptors;\n-    private FieldDescriptor[] classificationFieldDescriptors;\n-    private FieldDescriptor[] classificationSubsetFieldDescriptors;\n-    private FieldDescriptor[] createClassificationFieldDescriptors;\n+  private HashMap<String, String> classificationFieldDescriptionsMap =\n+      new HashMap<String, String>();\n \n-    @BeforeEach\n-    void setUp() {\n+  private FieldDescriptor[] allClassificationsFieldDescriptors;\n+  private FieldDescriptor[] classificationFieldDescriptors;\n+  private FieldDescriptor[] classificationSubsetFieldDescriptors;\n+  private FieldDescriptor[] createClassificationFieldDescriptors;\n \n-        classificationFieldDescriptionsMap.put(\"classificationId\", \"Unique Id\");\n-        classificationFieldDescriptionsMap.put(\"key\",\n-            \"The key of the classification. This is typically an externally known code or abbreviation of the classification\");\n-        classificationFieldDescriptionsMap.put(\"parentId\",\n-            \"The id of the parent classification. Empty string (\\\"\\\") if this is a root classification.\");\n-        classificationFieldDescriptionsMap.put(\"parentKey\",\n-            \"The key of the parent classification. Empty string (\\\"\\\") if this is a root classification.\");\n-        classificationFieldDescriptionsMap.put(\"category\",\n-            \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\");\n-        classificationFieldDescriptionsMap.put(\"type\", \"The type of classification (TASK, DOCUMENT)\");\n-        classificationFieldDescriptionsMap.put(\"domain\", \"The domain for which this classification is specified\");\n-        classificationFieldDescriptionsMap.put(\"isValidInDomain\",\n-            \"True, if this classification to objects in this domain\");\n-        classificationFieldDescriptionsMap.put(\"created\", \"The creation timestamp of the classification in the system\");\n-        classificationFieldDescriptionsMap.put(\"modified\", \"The timestamp of the last modification date\");\n-        classificationFieldDescriptionsMap.put(\"name\", \"The name of the classification\");\n-        classificationFieldDescriptionsMap.put(\"description\", \"The description of the classification\");\n-        classificationFieldDescriptionsMap.put(\"priority\", \"The priority of the classification\");\n-        classificationFieldDescriptionsMap.put(\"serviceLevel\",\n-            \"The service level of the classification. This is stated according to ISO 8601\");\n-        classificationFieldDescriptionsMap.put(\"applicationEntryPoint\",\n-            \"The logical name of the entry point, the task list application should redirect to work on a task of this classification\");\n-        classificationFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-        classificationFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-        classificationFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-        classificationFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-        classificationFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-        classificationFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-        classificationFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-        classificationFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-        classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.href\", \"Link to all classifications\");\n-        classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.templated\", \"\");\n+  @BeforeEach\n+  void setUp() {\n \n-        allClassificationsFieldDescriptors = new FieldDescriptor[] {\n+    classificationFieldDescriptionsMap.put(\"classificationId\", \"Unique Id\");\n+    classificationFieldDescriptionsMap.put(\n+        \"key\",\n+        \"The key of the classification. This is typically an externally known code or abbreviation of the classification\");\n+    classificationFieldDescriptionsMap.put(\n+        \"parentId\",\n+        \"The id of the parent classification. Empty string (\\\"\\\") if this is a root classification.\");\n+    classificationFieldDescriptionsMap.put(\n+        \"parentKey\",\n+        \"The key of the parent classification. Empty string (\\\"\\\") if this is a root classification.\");\n+    classificationFieldDescriptionsMap.put(\n+        \"category\", \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\");\n+    classificationFieldDescriptionsMap.put(\"type\", \"The type of classification (TASK, DOCUMENT)\");\n+    classificationFieldDescriptionsMap.put(\n+        \"domain\", \"The domain for which this classification is specified\");\n+    classificationFieldDescriptionsMap.put(\n+        \"isValidInDomain\", \"True, if this classification to objects in this domain\");\n+    classificationFieldDescriptionsMap.put(\n+        \"created\", \"The creation timestamp of the classification in the system\");\n+    classificationFieldDescriptionsMap.put(\n+        \"modified\", \"The timestamp of the last modification date\");\n+    classificationFieldDescriptionsMap.put(\"name\", \"The name of the classification\");\n+    classificationFieldDescriptionsMap.put(\"description\", \"The description of the classification\");\n+    classificationFieldDescriptionsMap.put(\"priority\", \"The priority of the classification\");\n+    classificationFieldDescriptionsMap.put(\n+        \"serviceLevel\",\n+        \"The service level of the classification. This is stated according to ISO 8601\");\n+    classificationFieldDescriptionsMap.put(\n+        \"applicationEntryPoint\",\n+        \"The logical name of the entry point, the task list application should redirect to work on a task of this classification\");\n+    classificationFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n+    classificationFieldDescriptionsMap.put(\n+        \"_links.getAllClassifications.href\", \"Link to all classifications\");\n+    classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.templated\", \"\");\n \n-            subsectionWithPath(\"classifications\")\n-                .description(\"An Array of <<classification-subset, Classification-Subsets>>\"),\n-            fieldWithPath(\"_links.self.href\").ignored(),\n-            fieldWithPath(\"page\").ignored()\n+    allClassificationsFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"classifications\")\n+              .description(\"An Array of <<classification-subset, Classification-Subsets>>\"),\n+          fieldWithPath(\"_links.self.href\").ignored(),\n+          fieldWithPath(\"page\").ignored()\n         };\n \n-        classificationFieldDescriptors = new FieldDescriptor[] {\n-\n-            fieldWithPath(\"classificationId\").description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-            fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-            fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-            fieldWithPath(\"parentKey\").description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-            fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-            fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-            fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-            fieldWithPath(\"isValidInDomain\").description(classificationFieldDescriptionsMap.get(\"isValidInDomain\")),\n-            fieldWithPath(\"created\").description(classificationFieldDescriptionsMap.get(\"created\")),\n-            fieldWithPath(\"modified\").description(classificationFieldDescriptionsMap.get(\"modified\")),\n-            fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-            fieldWithPath(\"description\").description(classificationFieldDescriptionsMap.get(\"description\")),\n-            fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-            fieldWithPath(\"serviceLevel\").description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-            fieldWithPath(\"applicationEntryPoint\")\n-                .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\")),\n-            fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-            fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-            fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-            fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-            fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-            fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-            fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-            fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-            fieldWithPath(\"_links.self.href\").ignored()\n+    classificationFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"classificationId\")\n+              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n+          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n+          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n+          fieldWithPath(\"parentKey\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n+          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n+          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n+          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n+          fieldWithPath(\"isValidInDomain\")\n+              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\")),\n+          fieldWithPath(\"created\").description(classificationFieldDescriptionsMap.get(\"created\")),\n+          fieldWithPath(\"modified\").description(classificationFieldDescriptionsMap.get(\"modified\")),\n+          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"description\")\n+              .description(classificationFieldDescriptionsMap.get(\"description\")),\n+          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"serviceLevel\")\n+              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n+          fieldWithPath(\"applicationEntryPoint\")\n+              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\")),\n+          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n+          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n+          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n+          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n+          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n+          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n+          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n+          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n+          fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-        classificationSubsetFieldDescriptors = new FieldDescriptor[] {\n-\n-            fieldWithPath(\"classificationId\").description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-            fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-            fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-            fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-            fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-            fieldWithPath(\"isValidInDomain\").ignored(),\n-            fieldWithPath(\"created\").ignored(),\n-            fieldWithPath(\"modified\").ignored(),\n-            fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-            fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-            fieldWithPath(\"parentKey\").description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-            fieldWithPath(\"description\").ignored(),\n-            fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-            fieldWithPath(\"serviceLevel\").description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-            fieldWithPath(\"applicationEntryPoint\").ignored(),\n-            fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-            fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-            fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-            fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-            fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-            fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-            fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-            fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-            fieldWithPath(\"_links.self.href\").ignored()\n+    classificationSubsetFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"classificationId\")\n+              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n+          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n+          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n+          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n+          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n+          fieldWithPath(\"isValidInDomain\").ignored(),\n+          fieldWithPath(\"created\").ignored(),\n+          fieldWithPath(\"modified\").ignored(),\n+          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n+          fieldWithPath(\"parentKey\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n+          fieldWithPath(\"description\").ignored(),\n+          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"serviceLevel\")\n+              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n+          fieldWithPath(\"applicationEntryPoint\").ignored(),\n+          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n+          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n+          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n+          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n+          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n+          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n+          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n+          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n+          fieldWithPath(\"_links.self.href\").ignored()\n         };\n \n-        createClassificationFieldDescriptors = new FieldDescriptor[] {\n-\n-            fieldWithPath(\"category\").type(\"String\")\n-                .description(\"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\")\n-                .optional(),\n-            fieldWithPath(\"domain\").description(\"The domain for which this classification is specified\"),\n-            fieldWithPath(\"key\").description(\n-                \"The key of the classification. This is typically an externally known code or abbreviation of the classification\"),\n-            fieldWithPath(\"name\").type(\"String\").description(\"The name of the classification\").optional(),\n-            fieldWithPath(\"type\").type(\"String\").description(\"The type of classification (TASK, DOCUMENT)\").optional(),\n-            fieldWithPath(\"parentId\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"parentId\"))\n-                .optional(),\n-            fieldWithPath(\"parentKey\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"parentKey\"))\n-                .optional(),\n-            fieldWithPath(\"isValidInDomain\").type(\"Boolean\")\n-                .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\"))\n-                .optional(),\n-            fieldWithPath(\"created\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"created\"))\n-                .optional(),\n-            fieldWithPath(\"modified\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"modified\"))\n-                .optional(),\n-            fieldWithPath(\"description\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"description\"))\n-                .optional(),\n-            fieldWithPath(\"priority\").type(\"Number\")\n-                .description(classificationFieldDescriptionsMap.get(\"priority\"))\n-                .optional(),\n-            fieldWithPath(\"serviceLevel\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"serviceLevel\"))\n-                .optional(),\n-            fieldWithPath(\"applicationEntryPoint\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\"))\n-                .optional(),\n-            fieldWithPath(\"custom1\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"custom1\"))\n-                .optional(),\n-            fieldWithPath(\"custom2\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"custom2\"))\n-                .optional(),\n-            fieldWithPath(\"custom3\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"custom3\"))\n-                .optional(),\n-            fieldWithPath(\"custom4\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"custom4\"))\n-                .optional(),\n-            fieldWithPath(\"custom5\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"custom5\"))\n-                .optional(),\n-            fieldWithPath(\"custom6\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"custom6\"))\n-                .optional(),\n-            fieldWithPath(\"custom7\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"custom7\"))\n-                .optional(),\n-            fieldWithPath(\"custom8\").type(\"String\")\n-                .description(classificationFieldDescriptionsMap.get(\"custom8\"))\n-                .optional()\n+    createClassificationFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"category\")\n+              .type(\"String\")\n+              .description(\n+                  \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\")\n+              .optional(),\n+          fieldWithPath(\"domain\")\n+              .description(\"The domain for which this classification is specified\"),\n+          fieldWithPath(\"key\")\n+              .description(\n+                  \"The key of the classification. This is typically an externally known code or abbreviation of the classification\"),\n+          fieldWithPath(\"name\")\n+              .type(\"String\")\n+              .description(\"The name of the classification\")\n+              .optional(),\n+          fieldWithPath(\"type\")\n+              .type(\"String\")\n+              .description(\"The type of classification (TASK, DOCUMENT)\")\n+              .optional(),\n+          fieldWithPath(\"parentId\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentId\"))\n+              .optional(),\n+          fieldWithPath(\"parentKey\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentKey\"))\n+              .optional(),\n+          fieldWithPath(\"isValidInDomain\")\n+              .type(\"Boolean\")\n+              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\"))\n+              .optional(),\n+          fieldWithPath(\"created\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"created\"))\n+              .optional(),\n+          fieldWithPath(\"modified\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"modified\"))\n+              .optional(),\n+          fieldWithPath(\"description\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"description\"))\n+              .optional(),\n+          fieldWithPath(\"priority\")\n+              .type(\"Number\")\n+              .description(classificationFieldDescriptionsMap.get(\"priority\"))\n+              .optional(),\n+          fieldWithPath(\"serviceLevel\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\"))\n+              .optional(),\n+          fieldWithPath(\"applicationEntryPoint\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\"))\n+              .optional(),\n+          fieldWithPath(\"custom1\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom1\"))\n+              .optional(),\n+          fieldWithPath(\"custom2\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom2\"))\n+              .optional(),\n+          fieldWithPath(\"custom3\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom3\"))\n+              .optional(),\n+          fieldWithPath(\"custom4\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom4\"))\n+              .optional(),\n+          fieldWithPath(\"custom5\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom5\"))\n+              .optional(),\n+          fieldWithPath(\"custom6\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom6\"))\n+              .optional(),\n+          fieldWithPath(\"custom7\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom7\"))\n+              .optional(),\n+          fieldWithPath(\"custom8\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom8\"))\n+              .optional()\n         };\n-    }\n+  }\n \n-    @Test\n-    void getAllClassificationsDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .get(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS) + \"?domain=DOMAIN_B\")\n-            .accept(\"application/hal+json\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"GetAllClassificationsDocTest\",\n+  @Test\n+  void getAllClassificationsDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS) + \"?domain=DOMAIN_B\")\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetAllClassificationsDocTest\",\n                 responseFields(allClassificationsFieldDescriptors)));\n-    }\n+  }\n \n-    @Test\n-    void getSpecificClassificationDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .get(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"GetSpecificClassificationDocTest\",\n+  @Test\n+  void getSpecificClassificationDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetSpecificClassificationDocTest\",\n                 responseFields(classificationFieldDescriptors)));\n-    }\n+  }\n \n-    @Test\n-    void classificationSubsetDocTest() throws Exception {\n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .get(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"ClassificationSubset\",\n-                responseFields(classificationSubsetFieldDescriptors)));\n-    }\n+  @Test\n+  void classificationSubsetDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"ClassificationSubset\", responseFields(classificationSubsetFieldDescriptors)));\n+  }\n \n-    @Test\n-    void createAndDeleteClassificationDocTest() throws Exception {\n-        MvcResult result = this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .post(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS))\n-            .contentType(\"application/hal+json\")\n-            .content(\"{\\\"key\\\":\\\"Key0815casdgdgh\\\", \\\"domain\\\":\\\"DOMAIN_B\\\"}\")\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+  @Test\n+  void createAndDeleteClassificationDocTest() throws Exception {\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\"{\\\"key\\\":\\\"Key0815casdgdgh\\\", \\\"domain\\\":\\\"DOMAIN_B\\\"}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n             .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(MockMvcRestDocumentation.document(\"CreateClassificationDocTest\",\n-                requestFields(createClassificationFieldDescriptors),\n-                responseFields(classificationFieldDescriptors)))\n+            .andDo(\n+                MockMvcRestDocumentation.document(\n+                    \"CreateClassificationDocTest\",\n+                    requestFields(createClassificationFieldDescriptors),\n+                    responseFields(classificationFieldDescriptors)))\n             .andReturn();\n \n-        String content = result.getResponse().getContentAsString();\n-        String newId = content.substring(content.indexOf(\"CLI:\"), content.indexOf(\"CLI:\") + 40);\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"CLI:\"), content.indexOf(\"CLI:\") + 40);\n \n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .delete(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, newId))\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isNoContent())\n-            .andDo(MockMvcRestDocumentation.document(\"DeleteClassificationDocTest\"));\n-    }\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(\n+                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, newId))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isNoContent())\n+        .andDo(MockMvcRestDocumentation.document(\"DeleteClassificationDocTest\"));\n+  }\n \n-    @Test\n-    void updateClassificationDocTest() throws Exception {\n-        URL url = new URL(\n-            restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"));\n-        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-        con.setRequestMethod(\"GET\");\n-        con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-        assertEquals(200, con.getResponseCode());\n+  @Test\n+  void updateClassificationDocTest() throws Exception {\n+    URL url =\n+        new URL(\n+            restHelper.toUrl(\n+                Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"));\n+    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"GET\");\n+    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+    assertEquals(200, con.getResponseCode());\n \n-        BufferedReader in = new BufferedReader(\n-            new InputStreamReader(con.getInputStream()));\n-        String inputLine;\n-        StringBuffer content = new StringBuffer();\n-        while ((inputLine = in.readLine()) != null) {\n-            content.append(inputLine);\n-        }\n-        in.close();\n-        con.disconnect();\n-        String originalTask = content.toString();\n-        String modifiedTask = new String(originalTask.toString());\n+    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n+    String inputLine;\n+    StringBuffer content = new StringBuffer();\n+    while ((inputLine = in.readLine()) != null) {\n+      content.append(inputLine);\n+    }\n+    in.close();\n+    con.disconnect();\n+    String originalTask = content.toString();\n+    String modifiedTask = new String(originalTask.toString());\n \n-        this.mockMvc.perform(RestDocumentationRequestBuilders\n-            .put(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-            .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-            .contentType(\"application/json\")\n-            .content(modifiedTask))\n-            .andExpect(MockMvcResultMatchers.status().isOk())\n-            .andDo(MockMvcRestDocumentation.document(\"UpdateClassificationDocTest\",\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.put(\n+                    restHelper.toUrl(\n+                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .contentType(\"application/json\")\n+                .content(modifiedTask))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"UpdateClassificationDocTest\",\n                 requestFields(classificationFieldDescriptors),\n                 responseFields(classificationFieldDescriptors)));\n-    }\n+  }\n }\n", "next_change": {"commit": "007f268be599fda8b884e002b7b03bb260c7620f", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\nindex 2df11e025..394f2f458 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n", "chunk": "@@ -1,354 +1,364 @@\n-package pro.taskana.doc.api;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n-\n-import java.io.BufferedReader;\n-import java.io.InputStreamReader;\n-import java.net.HttpURLConnection;\n-import java.net.URL;\n-import java.util.HashMap;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n-import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n-import org.springframework.restdocs.payload.FieldDescriptor;\n-import org.springframework.test.web.servlet.MvcResult;\n-import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n-\n-import pro.taskana.rest.Mapping;\n-\n-/** Generate REST Dokumentation for ClassificationController. */\n-class ClassificationControllerRestDocumentation extends BaseRestDocumentation {\n-\n-  private HashMap<String, String> classificationFieldDescriptionsMap =\n-      new HashMap<String, String>();\n-\n-  private FieldDescriptor[] allClassificationsFieldDescriptors;\n-  private FieldDescriptor[] classificationFieldDescriptors;\n-  private FieldDescriptor[] classificationSubsetFieldDescriptors;\n-  private FieldDescriptor[] createClassificationFieldDescriptors;\n-\n-  @BeforeEach\n-  void setUp() {\n-\n-    classificationFieldDescriptionsMap.put(\"classificationId\", \"Unique Id\");\n-    classificationFieldDescriptionsMap.put(\n-        \"key\",\n-        \"The key of the classification. This is typically an externally known code or abbreviation of the classification\");\n-    classificationFieldDescriptionsMap.put(\n-        \"parentId\",\n-        \"The id of the parent classification. Empty string (\\\"\\\") if this is a root classification.\");\n-    classificationFieldDescriptionsMap.put(\n-        \"parentKey\",\n-        \"The key of the parent classification. Empty string (\\\"\\\") if this is a root classification.\");\n-    classificationFieldDescriptionsMap.put(\n-        \"category\", \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\");\n-    classificationFieldDescriptionsMap.put(\"type\", \"The type of classification (TASK, DOCUMENT)\");\n-    classificationFieldDescriptionsMap.put(\n-        \"domain\", \"The domain for which this classification is specified\");\n-    classificationFieldDescriptionsMap.put(\n-        \"isValidInDomain\", \"True, if this classification to objects in this domain\");\n-    classificationFieldDescriptionsMap.put(\n-        \"created\", \"The creation timestamp of the classification in the system\");\n-    classificationFieldDescriptionsMap.put(\n-        \"modified\", \"The timestamp of the last modification date\");\n-    classificationFieldDescriptionsMap.put(\"name\", \"The name of the classification\");\n-    classificationFieldDescriptionsMap.put(\"description\", \"The description of the classification\");\n-    classificationFieldDescriptionsMap.put(\"priority\", \"The priority of the classification\");\n-    classificationFieldDescriptionsMap.put(\n-        \"serviceLevel\",\n-        \"The service level of the classification. This is stated according to ISO 8601\");\n-    classificationFieldDescriptionsMap.put(\n-        \"applicationEntryPoint\",\n-        \"The logical name of the entry point, the task list application should redirect to work on a task of this classification\");\n-    classificationFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-    classificationFieldDescriptionsMap.put(\n-        \"_links.getAllClassifications.href\", \"Link to all classifications\");\n-    classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.templated\", \"\");\n-\n-    allClassificationsFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"classifications\")\n-              .description(\"An Array of <<classification-subset, Classification-Subsets>>\"),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n-          fieldWithPath(\"page\").ignored()\n-        };\n-\n-    classificationFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"classificationId\")\n-              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-          fieldWithPath(\"parentKey\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"isValidInDomain\")\n-              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\")),\n-          fieldWithPath(\"created\").description(classificationFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"modified\").description(classificationFieldDescriptionsMap.get(\"modified\")),\n-          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"description\")\n-              .description(classificationFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"serviceLevel\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-          fieldWithPath(\"applicationEntryPoint\")\n-              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\")),\n-          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    classificationSubsetFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"classificationId\")\n-              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"isValidInDomain\").ignored(),\n-          fieldWithPath(\"created\").ignored(),\n-          fieldWithPath(\"modified\").ignored(),\n-          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-          fieldWithPath(\"parentKey\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-          fieldWithPath(\"description\").ignored(),\n-          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"serviceLevel\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-          fieldWithPath(\"applicationEntryPoint\").ignored(),\n-          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    createClassificationFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"category\")\n-              .type(\"String\")\n-              .description(\n-                  \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\")\n-              .optional(),\n-          fieldWithPath(\"domain\")\n-              .description(\"The domain for which this classification is specified\"),\n-          fieldWithPath(\"key\")\n-              .description(\n-                  \"The key of the classification. This is typically an externally known code or abbreviation of the classification\"),\n-          fieldWithPath(\"name\")\n-              .type(\"String\")\n-              .description(\"The name of the classification\")\n-              .optional(),\n-          fieldWithPath(\"type\")\n-              .type(\"String\")\n-              .description(\"The type of classification (TASK, DOCUMENT)\")\n-              .optional(),\n-          fieldWithPath(\"parentId\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentId\"))\n-              .optional(),\n-          fieldWithPath(\"parentKey\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\"))\n-              .optional(),\n-          fieldWithPath(\"isValidInDomain\")\n-              .type(\"Boolean\")\n-              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\"))\n-              .optional(),\n-          fieldWithPath(\"created\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"created\"))\n-              .optional(),\n-          fieldWithPath(\"modified\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"modified\"))\n-              .optional(),\n-          fieldWithPath(\"description\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"description\"))\n-              .optional(),\n-          fieldWithPath(\"priority\")\n-              .type(\"Number\")\n-              .description(classificationFieldDescriptionsMap.get(\"priority\"))\n-              .optional(),\n-          fieldWithPath(\"serviceLevel\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\"))\n-              .optional(),\n-          fieldWithPath(\"applicationEntryPoint\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\"))\n-              .optional(),\n-          fieldWithPath(\"custom1\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom1\"))\n-              .optional(),\n-          fieldWithPath(\"custom2\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom2\"))\n-              .optional(),\n-          fieldWithPath(\"custom3\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom3\"))\n-              .optional(),\n-          fieldWithPath(\"custom4\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom4\"))\n-              .optional(),\n-          fieldWithPath(\"custom5\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom5\"))\n-              .optional(),\n-          fieldWithPath(\"custom6\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom6\"))\n-              .optional(),\n-          fieldWithPath(\"custom7\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom7\"))\n-              .optional(),\n-          fieldWithPath(\"custom8\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom8\"))\n-              .optional()\n-        };\n-  }\n-\n-  @Test\n-  void getAllClassificationsDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS) + \"?domain=DOMAIN_B\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllClassificationsDocTest\",\n-                responseFields(allClassificationsFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void getSpecificClassificationDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetSpecificClassificationDocTest\",\n-                responseFields(classificationFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void classificationSubsetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"ClassificationSubset\", responseFields(classificationSubsetFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void createAndDeleteClassificationDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\"{\\\"key\\\":\\\"Key0815casdgdgh\\\", \\\"domain\\\":\\\"DOMAIN_B\\\"}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"CreateClassificationDocTest\",\n-                    requestFields(createClassificationFieldDescriptors),\n-                    responseFields(classificationFieldDescriptors)))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"CLI:\"), content.indexOf(\"CLI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, newId))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"DeleteClassificationDocTest\"));\n-  }\n-\n-  @Test\n-  void updateClassificationDocTest() throws Exception {\n-    URL url =\n-        new URL(\n-            restHelper.toUrl(\n-                Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    assertEquals(200, con.getResponseCode());\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n-    String inputLine;\n-    StringBuffer content = new StringBuffer();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n-    }\n-    in.close();\n-    con.disconnect();\n-    String originalTask = content.toString();\n-    String modifiedTask = new String(originalTask.toString());\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.put(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .contentType(\"application/json\")\n-                .content(modifiedTask))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"UpdateClassificationDocTest\",\n-                requestFields(classificationFieldDescriptors),\n-                responseFields(classificationFieldDescriptors)));\n-  }\n-}\n+package pro.taskana.doc.api;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.HashMap;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n+import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n+import org.springframework.restdocs.payload.FieldDescriptor;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+\n+import pro.taskana.rest.Mapping;\n+\n+/** Generate REST Dokumentation for ClassificationController. */\n+class ClassificationControllerRestDocumentation extends BaseRestDocumentation {\n+\n+  private HashMap<String, String> classificationFieldDescriptionsMap =\n+      new HashMap<String, String>();\n+\n+  private FieldDescriptor[] allClassificationsFieldDescriptors;\n+  private FieldDescriptor[] classificationFieldDescriptors;\n+  private FieldDescriptor[] classificationSubsetFieldDescriptors;\n+  private FieldDescriptor[] createClassificationFieldDescriptors;\n+\n+  @BeforeEach\n+  void setUp() {\n+\n+    classificationFieldDescriptionsMap.put(\"classificationId\", \"Unique Id\");\n+    classificationFieldDescriptionsMap.put(\n+        \"key\",\n+        \"The key of the classification. This is typically an externally \"\n+            + \"known code or abbreviation of the classification\");\n+    classificationFieldDescriptionsMap.put(\n+        \"parentId\",\n+        \"The id of the parent classification. Empty string (\\\"\\\") \"\n+            + \"if this is a root classification.\");\n+    classificationFieldDescriptionsMap.put(\n+        \"parentKey\",\n+        \"The key of the parent classification. Empty string (\\\"\\\") \"\n+            + \"if this is a root classification.\");\n+    classificationFieldDescriptionsMap.put(\n+        \"category\", \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\");\n+    classificationFieldDescriptionsMap.put(\"type\", \"The type of classification (TASK, DOCUMENT)\");\n+    classificationFieldDescriptionsMap.put(\n+        \"domain\", \"The domain for which this classification is specified\");\n+    classificationFieldDescriptionsMap.put(\n+        \"isValidInDomain\", \"True, if this classification to objects in this domain\");\n+    classificationFieldDescriptionsMap.put(\n+        \"created\", \"The creation timestamp of the classification in the system\");\n+    classificationFieldDescriptionsMap.put(\n+        \"modified\", \"The timestamp of the last modification date\");\n+    classificationFieldDescriptionsMap.put(\"name\", \"The name of the classification\");\n+    classificationFieldDescriptionsMap.put(\"description\", \"The description of the classification\");\n+    classificationFieldDescriptionsMap.put(\"priority\", \"The priority of the classification\");\n+    classificationFieldDescriptionsMap.put(\n+        \"serviceLevel\",\n+        \"The service level of the classification. This is stated according to ISO 8601\");\n+    classificationFieldDescriptionsMap.put(\n+        \"applicationEntryPoint\",\n+        \"The logical name of the entry point, the task list application \"\n+            + \"should redirect to work on a task of this classification\");\n+    classificationFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n+    classificationFieldDescriptionsMap.put(\n+        \"_links.getAllClassifications.href\", \"Link to all classifications\");\n+    classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.templated\", \"\");\n+\n+    allClassificationsFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"classifications\")\n+              .description(\"An Array of <<classification-subset, Classification-Subsets>>\"),\n+          fieldWithPath(\"_links.self.href\").ignored(),\n+          fieldWithPath(\"page\").ignored(),\n+          fieldWithPath(\"page.size\").ignored(),\n+          fieldWithPath(\"page.totalElements\").ignored(),\n+          fieldWithPath(\"page.totalPages\").ignored(),\n+          fieldWithPath(\"page.number\").ignored()\n+        };\n+\n+    classificationFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"classificationId\")\n+              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n+          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n+          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n+          fieldWithPath(\"parentKey\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n+          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n+          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n+          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n+          fieldWithPath(\"isValidInDomain\")\n+              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\")),\n+          fieldWithPath(\"created\").description(classificationFieldDescriptionsMap.get(\"created\")),\n+          fieldWithPath(\"modified\").description(classificationFieldDescriptionsMap.get(\"modified\")),\n+          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"description\")\n+              .description(classificationFieldDescriptionsMap.get(\"description\")),\n+          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"serviceLevel\")\n+              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n+          fieldWithPath(\"applicationEntryPoint\")\n+              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\")),\n+          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n+          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n+          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n+          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n+          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n+          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n+          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n+          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n+          fieldWithPath(\"_links.self.href\").ignored()\n+        };\n+\n+    classificationSubsetFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"classificationId\")\n+              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n+          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n+          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n+          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n+          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n+          fieldWithPath(\"isValidInDomain\").ignored(),\n+          fieldWithPath(\"created\").ignored(),\n+          fieldWithPath(\"modified\").ignored(),\n+          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n+          fieldWithPath(\"parentKey\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n+          fieldWithPath(\"description\").ignored(),\n+          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"serviceLevel\")\n+              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n+          fieldWithPath(\"applicationEntryPoint\").ignored(),\n+          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n+          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n+          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n+          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n+          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n+          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n+          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n+          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n+          fieldWithPath(\"_links.self.href\").ignored()\n+        };\n+\n+    createClassificationFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"category\")\n+              .type(\"String\")\n+              .description(\n+                  \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\")\n+              .optional(),\n+          fieldWithPath(\"domain\")\n+              .description(\"The domain for which this classification is specified\"),\n+          fieldWithPath(\"key\")\n+              .description(\n+                  \"The key of the classification. This is typically an externally \"\n+                      + \"known code or abbreviation of the classification\"),\n+          fieldWithPath(\"name\")\n+              .type(\"String\")\n+              .description(\"The name of the classification\")\n+              .optional(),\n+          fieldWithPath(\"type\")\n+              .type(\"String\")\n+              .description(\"The type of classification (TASK, DOCUMENT)\")\n+              .optional(),\n+          fieldWithPath(\"parentId\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentId\"))\n+              .optional(),\n+          fieldWithPath(\"parentKey\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentKey\"))\n+              .optional(),\n+          fieldWithPath(\"isValidInDomain\")\n+              .type(\"Boolean\")\n+              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\"))\n+              .optional(),\n+          fieldWithPath(\"created\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"created\"))\n+              .optional(),\n+          fieldWithPath(\"modified\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"modified\"))\n+              .optional(),\n+          fieldWithPath(\"description\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"description\"))\n+              .optional(),\n+          fieldWithPath(\"priority\")\n+              .type(\"Number\")\n+              .description(classificationFieldDescriptionsMap.get(\"priority\"))\n+              .optional(),\n+          fieldWithPath(\"serviceLevel\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\"))\n+              .optional(),\n+          fieldWithPath(\"applicationEntryPoint\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\"))\n+              .optional(),\n+          fieldWithPath(\"custom1\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom1\"))\n+              .optional(),\n+          fieldWithPath(\"custom2\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom2\"))\n+              .optional(),\n+          fieldWithPath(\"custom3\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom3\"))\n+              .optional(),\n+          fieldWithPath(\"custom4\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom4\"))\n+              .optional(),\n+          fieldWithPath(\"custom5\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom5\"))\n+              .optional(),\n+          fieldWithPath(\"custom6\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom6\"))\n+              .optional(),\n+          fieldWithPath(\"custom7\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom7\"))\n+              .optional(),\n+          fieldWithPath(\"custom8\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom8\"))\n+              .optional()\n+        };\n+  }\n+\n+  @Test\n+  void getAllClassificationsDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS) + \"?domain=DOMAIN_B\")\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetAllClassificationsDocTest\",\n+                responseFields(allClassificationsFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void getSpecificClassificationDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetSpecificClassificationDocTest\",\n+                responseFields(classificationFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void classificationSubsetDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"ClassificationSubset\", responseFields(classificationSubsetFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void createAndDeleteClassificationDocTest() throws Exception {\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\"{\\\"key\\\":\\\"Key0815casdgdgh\\\", \\\"domain\\\":\\\"DOMAIN_B\\\"}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isCreated())\n+            .andDo(\n+                MockMvcRestDocumentation.document(\n+                    \"CreateClassificationDocTest\",\n+                    requestFields(createClassificationFieldDescriptors),\n+                    responseFields(classificationFieldDescriptors)))\n+            .andReturn();\n+\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"CLI:\"), content.indexOf(\"CLI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(\n+                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, newId))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isNoContent())\n+        .andDo(MockMvcRestDocumentation.document(\"DeleteClassificationDocTest\"));\n+  }\n+\n+  @Test\n+  void updateClassificationDocTest() throws Exception {\n+    URL url =\n+        new URL(\n+            restHelper.toUrl(\n+                Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"));\n+    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"GET\");\n+    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+    assertEquals(200, con.getResponseCode());\n+\n+    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n+    String inputLine;\n+    StringBuffer content = new StringBuffer();\n+    while ((inputLine = in.readLine()) != null) {\n+      content.append(inputLine);\n+    }\n+    in.close();\n+    con.disconnect();\n+    String originalTask = content.toString();\n+    String modifiedTask = originalTask;\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.put(\n+                    restHelper.toUrl(\n+                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .contentType(\"application/json\")\n+                .content(modifiedTask))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"UpdateClassificationDocTest\",\n+                requestFields(classificationFieldDescriptors),\n+                responseFields(classificationFieldDescriptors)));\n+  }\n+}\n", "next_change": {"commit": "60d4b29015cb128e4d4c03e90ff244a0cf13710a", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\nindex 394f2f458..d2068bdb4 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n", "chunk": "@@ -1,364 +1,364 @@\n-package pro.taskana.doc.api;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-import static org.junit.Assert.assertEquals;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n-\n-import java.io.BufferedReader;\n-import java.io.InputStreamReader;\n-import java.net.HttpURLConnection;\n-import java.net.URL;\n-import java.util.HashMap;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n-import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n-import org.springframework.restdocs.payload.FieldDescriptor;\n-import org.springframework.test.web.servlet.MvcResult;\n-import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n-\n-import pro.taskana.rest.Mapping;\n-\n-/** Generate REST Dokumentation for ClassificationController. */\n-class ClassificationControllerRestDocumentation extends BaseRestDocumentation {\n-\n-  private HashMap<String, String> classificationFieldDescriptionsMap =\n-      new HashMap<String, String>();\n-\n-  private FieldDescriptor[] allClassificationsFieldDescriptors;\n-  private FieldDescriptor[] classificationFieldDescriptors;\n-  private FieldDescriptor[] classificationSubsetFieldDescriptors;\n-  private FieldDescriptor[] createClassificationFieldDescriptors;\n-\n-  @BeforeEach\n-  void setUp() {\n-\n-    classificationFieldDescriptionsMap.put(\"classificationId\", \"Unique Id\");\n-    classificationFieldDescriptionsMap.put(\n-        \"key\",\n-        \"The key of the classification. This is typically an externally \"\n-            + \"known code or abbreviation of the classification\");\n-    classificationFieldDescriptionsMap.put(\n-        \"parentId\",\n-        \"The id of the parent classification. Empty string (\\\"\\\") \"\n-            + \"if this is a root classification.\");\n-    classificationFieldDescriptionsMap.put(\n-        \"parentKey\",\n-        \"The key of the parent classification. Empty string (\\\"\\\") \"\n-            + \"if this is a root classification.\");\n-    classificationFieldDescriptionsMap.put(\n-        \"category\", \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\");\n-    classificationFieldDescriptionsMap.put(\"type\", \"The type of classification (TASK, DOCUMENT)\");\n-    classificationFieldDescriptionsMap.put(\n-        \"domain\", \"The domain for which this classification is specified\");\n-    classificationFieldDescriptionsMap.put(\n-        \"isValidInDomain\", \"True, if this classification to objects in this domain\");\n-    classificationFieldDescriptionsMap.put(\n-        \"created\", \"The creation timestamp of the classification in the system\");\n-    classificationFieldDescriptionsMap.put(\n-        \"modified\", \"The timestamp of the last modification date\");\n-    classificationFieldDescriptionsMap.put(\"name\", \"The name of the classification\");\n-    classificationFieldDescriptionsMap.put(\"description\", \"The description of the classification\");\n-    classificationFieldDescriptionsMap.put(\"priority\", \"The priority of the classification\");\n-    classificationFieldDescriptionsMap.put(\n-        \"serviceLevel\",\n-        \"The service level of the classification. This is stated according to ISO 8601\");\n-    classificationFieldDescriptionsMap.put(\n-        \"applicationEntryPoint\",\n-        \"The logical name of the entry point, the task list application \"\n-            + \"should redirect to work on a task of this classification\");\n-    classificationFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-    classificationFieldDescriptionsMap.put(\n-        \"_links.getAllClassifications.href\", \"Link to all classifications\");\n-    classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.templated\", \"\");\n-\n-    allClassificationsFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"classifications\")\n-              .description(\"An Array of <<classification-subset, Classification-Subsets>>\"),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n-          fieldWithPath(\"page\").ignored(),\n-          fieldWithPath(\"page.size\").ignored(),\n-          fieldWithPath(\"page.totalElements\").ignored(),\n-          fieldWithPath(\"page.totalPages\").ignored(),\n-          fieldWithPath(\"page.number\").ignored()\n-        };\n-\n-    classificationFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"classificationId\")\n-              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-          fieldWithPath(\"parentKey\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"isValidInDomain\")\n-              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\")),\n-          fieldWithPath(\"created\").description(classificationFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"modified\").description(classificationFieldDescriptionsMap.get(\"modified\")),\n-          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"description\")\n-              .description(classificationFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"serviceLevel\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-          fieldWithPath(\"applicationEntryPoint\")\n-              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\")),\n-          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    classificationSubsetFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"classificationId\")\n-              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"isValidInDomain\").ignored(),\n-          fieldWithPath(\"created\").ignored(),\n-          fieldWithPath(\"modified\").ignored(),\n-          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-          fieldWithPath(\"parentKey\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-          fieldWithPath(\"description\").ignored(),\n-          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"serviceLevel\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-          fieldWithPath(\"applicationEntryPoint\").ignored(),\n-          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    createClassificationFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"category\")\n-              .type(\"String\")\n-              .description(\n-                  \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\")\n-              .optional(),\n-          fieldWithPath(\"domain\")\n-              .description(\"The domain for which this classification is specified\"),\n-          fieldWithPath(\"key\")\n-              .description(\n-                  \"The key of the classification. This is typically an externally \"\n-                      + \"known code or abbreviation of the classification\"),\n-          fieldWithPath(\"name\")\n-              .type(\"String\")\n-              .description(\"The name of the classification\")\n-              .optional(),\n-          fieldWithPath(\"type\")\n-              .type(\"String\")\n-              .description(\"The type of classification (TASK, DOCUMENT)\")\n-              .optional(),\n-          fieldWithPath(\"parentId\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentId\"))\n-              .optional(),\n-          fieldWithPath(\"parentKey\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\"))\n-              .optional(),\n-          fieldWithPath(\"isValidInDomain\")\n-              .type(\"Boolean\")\n-              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\"))\n-              .optional(),\n-          fieldWithPath(\"created\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"created\"))\n-              .optional(),\n-          fieldWithPath(\"modified\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"modified\"))\n-              .optional(),\n-          fieldWithPath(\"description\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"description\"))\n-              .optional(),\n-          fieldWithPath(\"priority\")\n-              .type(\"Number\")\n-              .description(classificationFieldDescriptionsMap.get(\"priority\"))\n-              .optional(),\n-          fieldWithPath(\"serviceLevel\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\"))\n-              .optional(),\n-          fieldWithPath(\"applicationEntryPoint\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\"))\n-              .optional(),\n-          fieldWithPath(\"custom1\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom1\"))\n-              .optional(),\n-          fieldWithPath(\"custom2\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom2\"))\n-              .optional(),\n-          fieldWithPath(\"custom3\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom3\"))\n-              .optional(),\n-          fieldWithPath(\"custom4\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom4\"))\n-              .optional(),\n-          fieldWithPath(\"custom5\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom5\"))\n-              .optional(),\n-          fieldWithPath(\"custom6\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom6\"))\n-              .optional(),\n-          fieldWithPath(\"custom7\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom7\"))\n-              .optional(),\n-          fieldWithPath(\"custom8\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom8\"))\n-              .optional()\n-        };\n-  }\n-\n-  @Test\n-  void getAllClassificationsDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS) + \"?domain=DOMAIN_B\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllClassificationsDocTest\",\n-                responseFields(allClassificationsFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void getSpecificClassificationDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetSpecificClassificationDocTest\",\n-                responseFields(classificationFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void classificationSubsetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"ClassificationSubset\", responseFields(classificationSubsetFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void createAndDeleteClassificationDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\"{\\\"key\\\":\\\"Key0815casdgdgh\\\", \\\"domain\\\":\\\"DOMAIN_B\\\"}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"CreateClassificationDocTest\",\n-                    requestFields(createClassificationFieldDescriptors),\n-                    responseFields(classificationFieldDescriptors)))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"CLI:\"), content.indexOf(\"CLI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, newId))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"DeleteClassificationDocTest\"));\n-  }\n-\n-  @Test\n-  void updateClassificationDocTest() throws Exception {\n-    URL url =\n-        new URL(\n-            restHelper.toUrl(\n-                Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    assertEquals(200, con.getResponseCode());\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuffer content = new StringBuffer();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n-    }\n-    in.close();\n-    con.disconnect();\n-    String originalTask = content.toString();\n-    String modifiedTask = originalTask;\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.put(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .contentType(\"application/json\")\n-                .content(modifiedTask))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"UpdateClassificationDocTest\",\n-                requestFields(classificationFieldDescriptors),\n-                responseFields(classificationFieldDescriptors)));\n-  }\n-}\n+package pro.taskana.doc.api;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.HashMap;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n+import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n+import org.springframework.restdocs.payload.FieldDescriptor;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+\n+import pro.taskana.rest.Mapping;\n+\n+/** Generate REST Dokumentation for ClassificationController. */\n+class ClassificationControllerRestDocumentation extends BaseRestDocumentation {\n+\n+  private HashMap<String, String> classificationFieldDescriptionsMap =\n+      new HashMap<String, String>();\n+\n+  private FieldDescriptor[] allClassificationsFieldDescriptors;\n+  private FieldDescriptor[] classificationFieldDescriptors;\n+  private FieldDescriptor[] classificationSubsetFieldDescriptors;\n+  private FieldDescriptor[] createClassificationFieldDescriptors;\n+\n+  @BeforeEach\n+  void setUp() {\n+\n+    classificationFieldDescriptionsMap.put(\"classificationId\", \"Unique Id\");\n+    classificationFieldDescriptionsMap.put(\n+        \"key\",\n+        \"The key of the classification. This is typically an externally \"\n+            + \"known code or abbreviation of the classification\");\n+    classificationFieldDescriptionsMap.put(\n+        \"parentId\",\n+        \"The id of the parent classification. Empty string (\\\"\\\") \"\n+            + \"if this is a root classification.\");\n+    classificationFieldDescriptionsMap.put(\n+        \"parentKey\",\n+        \"The key of the parent classification. Empty string (\\\"\\\") \"\n+            + \"if this is a root classification.\");\n+    classificationFieldDescriptionsMap.put(\n+        \"category\", \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\");\n+    classificationFieldDescriptionsMap.put(\"type\", \"The type of classification (TASK, DOCUMENT)\");\n+    classificationFieldDescriptionsMap.put(\n+        \"domain\", \"The domain for which this classification is specified\");\n+    classificationFieldDescriptionsMap.put(\n+        \"isValidInDomain\", \"True, if this classification to objects in this domain\");\n+    classificationFieldDescriptionsMap.put(\n+        \"created\", \"The creation timestamp of the classification in the system\");\n+    classificationFieldDescriptionsMap.put(\n+        \"modified\", \"The timestamp of the last modification date\");\n+    classificationFieldDescriptionsMap.put(\"name\", \"The name of the classification\");\n+    classificationFieldDescriptionsMap.put(\"description\", \"The description of the classification\");\n+    classificationFieldDescriptionsMap.put(\"priority\", \"The priority of the classification\");\n+    classificationFieldDescriptionsMap.put(\n+        \"serviceLevel\",\n+        \"The service level of the classification. This is stated according to ISO 8601\");\n+    classificationFieldDescriptionsMap.put(\n+        \"applicationEntryPoint\",\n+        \"The logical name of the entry point, the task list application \"\n+            + \"should redirect to work on a task of this classification\");\n+    classificationFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n+    classificationFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n+    classificationFieldDescriptionsMap.put(\n+        \"_links.getAllClassifications.href\", \"Link to all classifications\");\n+    classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.templated\", \"\");\n+\n+    allClassificationsFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"classifications\")\n+              .description(\"An Array of <<classification-subset, Classification-Subsets>>\"),\n+          fieldWithPath(\"_links.self.href\").ignored(),\n+          fieldWithPath(\"page\").ignored(),\n+          fieldWithPath(\"page.size\").ignored(),\n+          fieldWithPath(\"page.totalElements\").ignored(),\n+          fieldWithPath(\"page.totalPages\").ignored(),\n+          fieldWithPath(\"page.number\").ignored()\n+        };\n+\n+    classificationFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"classificationId\")\n+              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n+          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n+          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n+          fieldWithPath(\"parentKey\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n+          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n+          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n+          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n+          fieldWithPath(\"isValidInDomain\")\n+              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\")),\n+          fieldWithPath(\"created\").description(classificationFieldDescriptionsMap.get(\"created\")),\n+          fieldWithPath(\"modified\").description(classificationFieldDescriptionsMap.get(\"modified\")),\n+          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"description\")\n+              .description(classificationFieldDescriptionsMap.get(\"description\")),\n+          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"serviceLevel\")\n+              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n+          fieldWithPath(\"applicationEntryPoint\")\n+              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\")),\n+          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n+          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n+          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n+          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n+          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n+          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n+          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n+          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n+          fieldWithPath(\"_links.self.href\").ignored()\n+        };\n+\n+    classificationSubsetFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"classificationId\")\n+              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n+          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n+          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n+          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n+          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n+          fieldWithPath(\"isValidInDomain\").ignored(),\n+          fieldWithPath(\"created\").ignored(),\n+          fieldWithPath(\"modified\").ignored(),\n+          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n+          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n+          fieldWithPath(\"parentKey\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n+          fieldWithPath(\"description\").ignored(),\n+          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n+          fieldWithPath(\"serviceLevel\")\n+              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n+          fieldWithPath(\"applicationEntryPoint\").ignored(),\n+          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n+          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n+          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n+          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n+          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n+          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n+          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n+          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n+          fieldWithPath(\"_links.self.href\").ignored()\n+        };\n+\n+    createClassificationFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"category\")\n+              .type(\"String\")\n+              .description(\n+                  \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\")\n+              .optional(),\n+          fieldWithPath(\"domain\")\n+              .description(\"The domain for which this classification is specified\"),\n+          fieldWithPath(\"key\")\n+              .description(\n+                  \"The key of the classification. This is typically an externally \"\n+                      + \"known code or abbreviation of the classification\"),\n+          fieldWithPath(\"name\")\n+              .type(\"String\")\n+              .description(\"The name of the classification\")\n+              .optional(),\n+          fieldWithPath(\"type\")\n+              .type(\"String\")\n+              .description(\"The type of classification (TASK, DOCUMENT)\")\n+              .optional(),\n+          fieldWithPath(\"parentId\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentId\"))\n+              .optional(),\n+          fieldWithPath(\"parentKey\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"parentKey\"))\n+              .optional(),\n+          fieldWithPath(\"isValidInDomain\")\n+              .type(\"Boolean\")\n+              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\"))\n+              .optional(),\n+          fieldWithPath(\"created\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"created\"))\n+              .optional(),\n+          fieldWithPath(\"modified\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"modified\"))\n+              .optional(),\n+          fieldWithPath(\"description\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"description\"))\n+              .optional(),\n+          fieldWithPath(\"priority\")\n+              .type(\"Number\")\n+              .description(classificationFieldDescriptionsMap.get(\"priority\"))\n+              .optional(),\n+          fieldWithPath(\"serviceLevel\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\"))\n+              .optional(),\n+          fieldWithPath(\"applicationEntryPoint\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\"))\n+              .optional(),\n+          fieldWithPath(\"custom1\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom1\"))\n+              .optional(),\n+          fieldWithPath(\"custom2\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom2\"))\n+              .optional(),\n+          fieldWithPath(\"custom3\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom3\"))\n+              .optional(),\n+          fieldWithPath(\"custom4\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom4\"))\n+              .optional(),\n+          fieldWithPath(\"custom5\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom5\"))\n+              .optional(),\n+          fieldWithPath(\"custom6\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom6\"))\n+              .optional(),\n+          fieldWithPath(\"custom7\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom7\"))\n+              .optional(),\n+          fieldWithPath(\"custom8\")\n+              .type(\"String\")\n+              .description(classificationFieldDescriptionsMap.get(\"custom8\"))\n+              .optional()\n+        };\n+  }\n+\n+  @Test\n+  void getAllClassificationsDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS) + \"?domain=DOMAIN_B\")\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetAllClassificationsDocTest\",\n+                responseFields(allClassificationsFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void getSpecificClassificationDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetSpecificClassificationDocTest\",\n+                responseFields(classificationFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void classificationSubsetDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"ClassificationSubset\", responseFields(classificationSubsetFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void createAndDeleteClassificationDocTest() throws Exception {\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\"{\\\"key\\\":\\\"Key0815casdgdgh\\\", \\\"domain\\\":\\\"DOMAIN_B\\\"}\")\n+                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+            .andExpect(MockMvcResultMatchers.status().isCreated())\n+            .andDo(\n+                MockMvcRestDocumentation.document(\n+                    \"CreateClassificationDocTest\",\n+                    requestFields(createClassificationFieldDescriptors),\n+                    responseFields(classificationFieldDescriptors)))\n+            .andReturn();\n+\n+    String content = result.getResponse().getContentAsString();\n+    String newId = content.substring(content.indexOf(\"CLI:\"), content.indexOf(\"CLI:\") + 40);\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.delete(\n+                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, newId))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n+        .andExpect(MockMvcResultMatchers.status().isNoContent())\n+        .andDo(MockMvcRestDocumentation.document(\"DeleteClassificationDocTest\"));\n+  }\n+\n+  @Test\n+  void updateClassificationDocTest() throws Exception {\n+    URL url =\n+        new URL(\n+            restHelper.toUrl(\n+                Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"));\n+    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"GET\");\n+    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+    assertEquals(200, con.getResponseCode());\n+\n+    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n+    String inputLine;\n+    StringBuffer content = new StringBuffer();\n+    while ((inputLine = in.readLine()) != null) {\n+      content.append(inputLine);\n+    }\n+    in.close();\n+    con.disconnect();\n+    String originalTask = content.toString();\n+    String modifiedTask = originalTask;\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.put(\n+                    restHelper.toUrl(\n+                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n+                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n+                .contentType(\"application/json\")\n+                .content(modifiedTask))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"UpdateClassificationDocTest\",\n+                requestFields(classificationFieldDescriptors),\n+                responseFields(classificationFieldDescriptors)));\n+  }\n+}\n", "next_change": {"commit": "3967e2900e8b35329b3675844ca3a8e059916c7e", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\ndeleted file mode 100644\nindex d2068bdb4..000000000\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/ClassificationControllerRestDocumentation.java\n+++ /dev/null\n", "chunk": "@@ -1,364 +0,0 @@\n-package pro.taskana.doc.api;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-import static org.junit.Assert.assertEquals;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n-import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n-\n-import java.io.BufferedReader;\n-import java.io.InputStreamReader;\n-import java.net.HttpURLConnection;\n-import java.net.URL;\n-import java.util.HashMap;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n-import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n-import org.springframework.restdocs.payload.FieldDescriptor;\n-import org.springframework.test.web.servlet.MvcResult;\n-import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n-\n-import pro.taskana.rest.Mapping;\n-\n-/** Generate REST Dokumentation for ClassificationController. */\n-class ClassificationControllerRestDocumentation extends BaseRestDocumentation {\n-\n-  private HashMap<String, String> classificationFieldDescriptionsMap =\n-      new HashMap<String, String>();\n-\n-  private FieldDescriptor[] allClassificationsFieldDescriptors;\n-  private FieldDescriptor[] classificationFieldDescriptors;\n-  private FieldDescriptor[] classificationSubsetFieldDescriptors;\n-  private FieldDescriptor[] createClassificationFieldDescriptors;\n-\n-  @BeforeEach\n-  void setUp() {\n-\n-    classificationFieldDescriptionsMap.put(\"classificationId\", \"Unique Id\");\n-    classificationFieldDescriptionsMap.put(\n-        \"key\",\n-        \"The key of the classification. This is typically an externally \"\n-            + \"known code or abbreviation of the classification\");\n-    classificationFieldDescriptionsMap.put(\n-        \"parentId\",\n-        \"The id of the parent classification. Empty string (\\\"\\\") \"\n-            + \"if this is a root classification.\");\n-    classificationFieldDescriptionsMap.put(\n-        \"parentKey\",\n-        \"The key of the parent classification. Empty string (\\\"\\\") \"\n-            + \"if this is a root classification.\");\n-    classificationFieldDescriptionsMap.put(\n-        \"category\", \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\");\n-    classificationFieldDescriptionsMap.put(\"type\", \"The type of classification (TASK, DOCUMENT)\");\n-    classificationFieldDescriptionsMap.put(\n-        \"domain\", \"The domain for which this classification is specified\");\n-    classificationFieldDescriptionsMap.put(\n-        \"isValidInDomain\", \"True, if this classification to objects in this domain\");\n-    classificationFieldDescriptionsMap.put(\n-        \"created\", \"The creation timestamp of the classification in the system\");\n-    classificationFieldDescriptionsMap.put(\n-        \"modified\", \"The timestamp of the last modification date\");\n-    classificationFieldDescriptionsMap.put(\"name\", \"The name of the classification\");\n-    classificationFieldDescriptionsMap.put(\"description\", \"The description of the classification\");\n-    classificationFieldDescriptionsMap.put(\"priority\", \"The priority of the classification\");\n-    classificationFieldDescriptionsMap.put(\n-        \"serviceLevel\",\n-        \"The service level of the classification. This is stated according to ISO 8601\");\n-    classificationFieldDescriptionsMap.put(\n-        \"applicationEntryPoint\",\n-        \"The logical name of the entry point, the task list application \"\n-            + \"should redirect to work on a task of this classification\");\n-    classificationFieldDescriptionsMap.put(\"custom1\", \"A custom property with name \\\"1\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom2\", \"A custom property with name \\\"2\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom3\", \"A custom property with name \\\"3\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom4\", \"A custom property with name \\\"4\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom5\", \"A custom property with name \\\"5\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom6\", \"A custom property with name \\\"6\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom7\", \"A custom property with name \\\"7\\\"\");\n-    classificationFieldDescriptionsMap.put(\"custom8\", \"A custom property with name \\\"8\\\"\");\n-    classificationFieldDescriptionsMap.put(\n-        \"_links.getAllClassifications.href\", \"Link to all classifications\");\n-    classificationFieldDescriptionsMap.put(\"_links.getAllClassifications.templated\", \"\");\n-\n-    allClassificationsFieldDescriptors =\n-        new FieldDescriptor[] {\n-          subsectionWithPath(\"classifications\")\n-              .description(\"An Array of <<classification-subset, Classification-Subsets>>\"),\n-          fieldWithPath(\"_links.self.href\").ignored(),\n-          fieldWithPath(\"page\").ignored(),\n-          fieldWithPath(\"page.size\").ignored(),\n-          fieldWithPath(\"page.totalElements\").ignored(),\n-          fieldWithPath(\"page.totalPages\").ignored(),\n-          fieldWithPath(\"page.number\").ignored()\n-        };\n-\n-    classificationFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"classificationId\")\n-              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-          fieldWithPath(\"parentKey\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"isValidInDomain\")\n-              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\")),\n-          fieldWithPath(\"created\").description(classificationFieldDescriptionsMap.get(\"created\")),\n-          fieldWithPath(\"modified\").description(classificationFieldDescriptionsMap.get(\"modified\")),\n-          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"description\")\n-              .description(classificationFieldDescriptionsMap.get(\"description\")),\n-          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"serviceLevel\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-          fieldWithPath(\"applicationEntryPoint\")\n-              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\")),\n-          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    classificationSubsetFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"classificationId\")\n-              .description(classificationFieldDescriptionsMap.get(\"classificationId\")),\n-          fieldWithPath(\"key\").description(classificationFieldDescriptionsMap.get(\"key\")),\n-          fieldWithPath(\"category\").description(classificationFieldDescriptionsMap.get(\"category\")),\n-          fieldWithPath(\"type\").description(classificationFieldDescriptionsMap.get(\"type\")),\n-          fieldWithPath(\"domain\").description(classificationFieldDescriptionsMap.get(\"domain\")),\n-          fieldWithPath(\"isValidInDomain\").ignored(),\n-          fieldWithPath(\"created\").ignored(),\n-          fieldWithPath(\"modified\").ignored(),\n-          fieldWithPath(\"name\").description(classificationFieldDescriptionsMap.get(\"name\")),\n-          fieldWithPath(\"parentId\").description(classificationFieldDescriptionsMap.get(\"parentId\")),\n-          fieldWithPath(\"parentKey\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\")),\n-          fieldWithPath(\"description\").ignored(),\n-          fieldWithPath(\"priority\").description(classificationFieldDescriptionsMap.get(\"priority\")),\n-          fieldWithPath(\"serviceLevel\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\")),\n-          fieldWithPath(\"applicationEntryPoint\").ignored(),\n-          fieldWithPath(\"custom1\").description(classificationFieldDescriptionsMap.get(\"custom1\")),\n-          fieldWithPath(\"custom2\").description(classificationFieldDescriptionsMap.get(\"custom2\")),\n-          fieldWithPath(\"custom3\").description(classificationFieldDescriptionsMap.get(\"custom3\")),\n-          fieldWithPath(\"custom4\").description(classificationFieldDescriptionsMap.get(\"custom4\")),\n-          fieldWithPath(\"custom5\").description(classificationFieldDescriptionsMap.get(\"custom5\")),\n-          fieldWithPath(\"custom6\").description(classificationFieldDescriptionsMap.get(\"custom6\")),\n-          fieldWithPath(\"custom7\").description(classificationFieldDescriptionsMap.get(\"custom7\")),\n-          fieldWithPath(\"custom8\").description(classificationFieldDescriptionsMap.get(\"custom8\")),\n-          fieldWithPath(\"_links.self.href\").ignored()\n-        };\n-\n-    createClassificationFieldDescriptors =\n-        new FieldDescriptor[] {\n-          fieldWithPath(\"category\")\n-              .type(\"String\")\n-              .description(\n-                  \"The category of the classification (MANUAL, EXTERNAL, AUTOMATIC, PROCESS)\")\n-              .optional(),\n-          fieldWithPath(\"domain\")\n-              .description(\"The domain for which this classification is specified\"),\n-          fieldWithPath(\"key\")\n-              .description(\n-                  \"The key of the classification. This is typically an externally \"\n-                      + \"known code or abbreviation of the classification\"),\n-          fieldWithPath(\"name\")\n-              .type(\"String\")\n-              .description(\"The name of the classification\")\n-              .optional(),\n-          fieldWithPath(\"type\")\n-              .type(\"String\")\n-              .description(\"The type of classification (TASK, DOCUMENT)\")\n-              .optional(),\n-          fieldWithPath(\"parentId\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentId\"))\n-              .optional(),\n-          fieldWithPath(\"parentKey\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"parentKey\"))\n-              .optional(),\n-          fieldWithPath(\"isValidInDomain\")\n-              .type(\"Boolean\")\n-              .description(classificationFieldDescriptionsMap.get(\"isValidInDomain\"))\n-              .optional(),\n-          fieldWithPath(\"created\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"created\"))\n-              .optional(),\n-          fieldWithPath(\"modified\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"modified\"))\n-              .optional(),\n-          fieldWithPath(\"description\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"description\"))\n-              .optional(),\n-          fieldWithPath(\"priority\")\n-              .type(\"Number\")\n-              .description(classificationFieldDescriptionsMap.get(\"priority\"))\n-              .optional(),\n-          fieldWithPath(\"serviceLevel\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"serviceLevel\"))\n-              .optional(),\n-          fieldWithPath(\"applicationEntryPoint\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"applicationEntryPoint\"))\n-              .optional(),\n-          fieldWithPath(\"custom1\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom1\"))\n-              .optional(),\n-          fieldWithPath(\"custom2\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom2\"))\n-              .optional(),\n-          fieldWithPath(\"custom3\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom3\"))\n-              .optional(),\n-          fieldWithPath(\"custom4\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom4\"))\n-              .optional(),\n-          fieldWithPath(\"custom5\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom5\"))\n-              .optional(),\n-          fieldWithPath(\"custom6\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom6\"))\n-              .optional(),\n-          fieldWithPath(\"custom7\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom7\"))\n-              .optional(),\n-          fieldWithPath(\"custom8\")\n-              .type(\"String\")\n-              .description(classificationFieldDescriptionsMap.get(\"custom8\"))\n-              .optional()\n-        };\n-  }\n-\n-  @Test\n-  void getAllClassificationsDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS) + \"?domain=DOMAIN_B\")\n-                .accept(\"application/hal+json\")\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetAllClassificationsDocTest\",\n-                responseFields(allClassificationsFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void getSpecificClassificationDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"GetSpecificClassificationDocTest\",\n-                responseFields(classificationFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void classificationSubsetDocTest() throws Exception {\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.get(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"ClassificationSubset\", responseFields(classificationSubsetFieldDescriptors)));\n-  }\n-\n-  @Test\n-  void createAndDeleteClassificationDocTest() throws Exception {\n-    MvcResult result =\n-        this.mockMvc\n-            .perform(\n-                RestDocumentationRequestBuilders.post(restHelper.toUrl(Mapping.URL_CLASSIFICATIONS))\n-                    .contentType(\"application/hal+json\")\n-                    .content(\"{\\\"key\\\":\\\"Key0815casdgdgh\\\", \\\"domain\\\":\\\"DOMAIN_B\\\"}\")\n-                    .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-            .andExpect(MockMvcResultMatchers.status().isCreated())\n-            .andDo(\n-                MockMvcRestDocumentation.document(\n-                    \"CreateClassificationDocTest\",\n-                    requestFields(createClassificationFieldDescriptors),\n-                    responseFields(classificationFieldDescriptors)))\n-            .andReturn();\n-\n-    String content = result.getResponse().getContentAsString();\n-    String newId = content.substring(content.indexOf(\"CLI:\"), content.indexOf(\"CLI:\") + 40);\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.delete(\n-                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, newId))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\"))\n-        .andExpect(MockMvcResultMatchers.status().isNoContent())\n-        .andDo(MockMvcRestDocumentation.document(\"DeleteClassificationDocTest\"));\n-  }\n-\n-  @Test\n-  void updateClassificationDocTest() throws Exception {\n-    URL url =\n-        new URL(\n-            restHelper.toUrl(\n-                Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    assertEquals(200, con.getResponseCode());\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuffer content = new StringBuffer();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n-    }\n-    in.close();\n-    con.disconnect();\n-    String originalTask = content.toString();\n-    String modifiedTask = originalTask;\n-\n-    this.mockMvc\n-        .perform(\n-            RestDocumentationRequestBuilders.put(\n-                    restHelper.toUrl(\n-                        Mapping.URL_CLASSIFICATIONS_ID, \"CLI:100000000000000000000000000000000009\"))\n-                .header(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\")\n-                .contentType(\"application/json\")\n-                .content(modifiedTask))\n-        .andExpect(MockMvcResultMatchers.status().isOk())\n-        .andDo(\n-            MockMvcRestDocumentation.document(\n-                \"UpdateClassificationDocTest\",\n-                requestFields(classificationFieldDescriptors),\n-                responseFields(classificationFieldDescriptors)));\n-  }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "committedDate": "2019-12-04 09:56:34 +0100", "message": "TSK-967: Merge module taskana-rest-spring and taskana-rest-spring-test"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "7509bb0f1c7cfb9e8bcc634fbd3f80c0b74b5ca6", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: Fix simple checkstyle warnings"}, {"oid": "c1d74b212648dad55f3d09e2c19868098ebbdb8a", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: automatic formatting number 2"}, {"oid": "6a6dcb9c1e3984670c644f89c569eba3d20dcf3d", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Standardise paginated List behaviour and sub classes"}, {"oid": "4d560532bd98ef3dfe573c40c00506fcef21f912", "committedDate": "2020-01-23 14:23:56 +0100", "message": "TSK-987: Fix Spotbugs - reliance on default encoding"}, {"oid": "007f268be599fda8b884e002b7b03bb260c7620f", "committedDate": "2020-02-11 17:05:34 +0100", "message": "TSK-1031: update Spring Boot to 2.2.4.RELEASE except Hateoas."}, {"oid": "60d4b29015cb128e4d4c03e90ff244a0cf13710a", "committedDate": "2020-02-11 17:05:34 +0100", "message": "TSK-1031: formatting issues fixed."}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}, {"oid": "cc4efaa1cdd708366adea79d631b8aa5ccc013a8", "committedDate": "2020-06-05 20:03:15 +0200", "message": "TSK-1210: Replaced LoginModule with Embedded Spring LDAP"}, {"oid": "a2318c267ea7f6d57cfffefc04c5285e66778fac", "committedDate": "2020-06-12 12:31:55 +0200", "message": "reformatted code"}, {"oid": "121a9c103fe9b04606635f8c132489504fe2d414", "committedDate": "2020-10-13 17:07:09 +0200", "message": "TSK-1407: adopted RestDocumentation tests to use taskana-common-test aswell"}, {"oid": "6dc782e37ac378b636daaef8d9134d17294845d2", "committedDate": "2020-10-30 01:36:27 +0100", "message": "TSK-1430: Rename Mapping to RestEndpoints, groups relevant endpoints together"}, {"oid": "6133b66059044789b777c561039ef87a2c9908f0", "committedDate": "2020-11-30 12:25:03 +0100", "message": "TSK-1419: Null check for Service Level in classification service"}, {"oid": "8c6beb6e9601d9eb98e7299d3f7743bf721678d3", "committedDate": "2020-12-03 12:53:29 +0100", "message": "TSK-1239: All tests now working with Assertj instead of junit Assertion. (#1346)"}, {"oid": "3967e2900e8b35329b3675844ca3a8e059916c7e", "committedDate": "2020-12-18 11:29:10 +0100", "message": "TSK-1436: rest api documentation is now build with spring-auto-restdocs"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyNDA5Mw==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r424224093", "body": "remove this please", "bodyText": "remove this please", "bodyHTML": "<p dir=\"auto\">remove this please</p>", "author": "mustaphazorgati", "createdAt": "2020-05-13T07:22:19Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java", "diffHunk": "@@ -47,20 +47,23 @@ void testGetAllWorkbasketAccessItems() {\n             restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS),\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n-            WORKBASKET_ACCESSITEM_PAGE_MODEL_TYPE);\n+            WORKBASKET_ACCESS_ITEM_PAGE_MODEL_TYPE);\n+    assertThat(response.getBody()).isNotNull();\n     assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n   }\n \n   @Test\n   void testGetWorkbasketAccessItemsKeepingFilters() {\n-    String parameters = \"?sort-by=workbasket-key&order=asc&page=1&page-size=9&access-ids=user_1_1\";\n+    String parameters = \"?sort-by=workbasket-key&order=asc&page-size=9&access-ids=user_1_1&page=1\";\n     ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> response =\n         template.exchange(\n             restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n-            WORKBASKET_ACCESSITEM_PAGE_MODEL_TYPE);\n+            WORKBASKET_ACCESS_ITEM_PAGE_MODEL_TYPE);\n+    assertThat(response.getBody()).isNotNull();\n     assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n+    System.out.println(response);", "originalCommit": "4c550f1f54bfb1a5c99f4127bc303f4c7d16a9f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "917535fbc017b6e7d19dfc57d60466e404d57c33", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\nindex 677a8d693..7ac5c1b65 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n", "chunk": "@@ -63,7 +63,6 @@ class WorkbasketAccessItemControllerIntTest {\n             WORKBASKET_ACCESS_ITEM_PAGE_MODEL_TYPE);\n     assertThat(response.getBody()).isNotNull();\n     assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n-    System.out.println(response);\n     assertThat(\n             response\n                 .getBody()\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\nindex 677a8d693..7ac5c1b65 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n", "chunk": "@@ -63,7 +63,6 @@ class WorkbasketAccessItemControllerIntTest {\n             WORKBASKET_ACCESS_ITEM_PAGE_MODEL_TYPE);\n     assertThat(response.getBody()).isNotNull();\n     assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n-    System.out.println(response);\n     assertThat(\n             response\n                 .getBody()\n", "next_change": {"commit": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\nindex 7ac5c1b65..c69bf63e6 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n", "chunk": "@@ -19,130 +21,106 @@ import org.springframework.web.client.RestTemplate;\n \n import pro.taskana.RestHelper;\n import pro.taskana.TaskanaSpringBootTest;\n-import pro.taskana.rest.resource.TaskanaPagedModel;\n-import pro.taskana.rest.resource.WorkbasketAccessItemRepresentationModel;\n+import pro.taskana.rest.resource.WorkbasketAccessItemListResource;\n+import pro.taskana.rest.resource.WorkbasketAccessItemPaginatedListResource;\n \n-/** Test WorkbasketAccessItemController. */\n+/**\n+ * Test WorkbasketAccessItemController.\n+ */\n @TestMethodOrder(MethodOrderer.Alphanumeric.class)\n @TaskanaSpringBootTest\n class WorkbasketAccessItemControllerIntTest {\n \n-  private static final ParameterizedTypeReference<\n-          TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n-      WORKBASKET_ACCESS_ITEM_PAGE_MODEL_TYPE =\n-          new ParameterizedTypeReference<\n-              TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>() {};\n-  private static RestTemplate template;\n-  @Autowired RestHelper restHelper;\n+    @Autowired RestHelper restHelper;\n \n-  @BeforeAll\n-  static void init() {\n-    template = RestHelper.TEMPLATE;\n-  }\n+    private static RestTemplate template;\n \n-  @Test\n-  void testGetAllWorkbasketAccessItems() {\n-    ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS),\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            WORKBASKET_ACCESS_ITEM_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n-  }\n+    @BeforeAll\n+    static void init() {\n+        template = RestHelper.getRestTemplate();\n+    }\n \n-  @Test\n-  void testGetWorkbasketAccessItemsKeepingFilters() {\n-    String parameters = \"?sort-by=workbasket-key&order=asc&page-size=9&access-ids=user_1_1&page=1\";\n-    ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            WORKBASKET_ACCESS_ITEM_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n-    assertThat(\n-            response\n-                .getBody()\n-                .getRequiredLink(IanaLinkRelations.SELF)\n-                .getHref()\n-                .endsWith(parameters))\n-        .isTrue();\n-  }\n+    @Test\n+    void testGetAllWorkbasketAccessItems() {\n+        ResponseEntity<WorkbasketAccessItemListResource> response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS), HttpMethod.GET, restHelper.defaultRequest(),\n+            ParameterizedTypeReference.forType(WorkbasketAccessItemListResource.class));\n+        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+    }\n \n-  @Test\n-  void testThrowsExceptionIfInvalidFilterIsUsed() {\n-    ThrowingCallable httpCall =\n-        () -> template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS)\n-                + \"?sort-by=workbasket-key&order=asc&page=1&page-size=9&invalid=user_1_1\",\n-            HttpMethod.GET,\n+    @Test\n+    void testGetWorkbasketAccessItemsKeepingFilters() {\n+        String parameters = \"?sort-by=workbasket-key&order=asc&page=1&page-size=9&access-ids=user_1_1\";\n+        ResponseEntity<WorkbasketAccessItemListResource> response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters, HttpMethod.GET,\n             restHelper.defaultRequest(),\n-            WORKBASKET_ACCESS_ITEM_PAGE_MODEL_TYPE);\n-    assertThatThrownBy(httpCall)\n-        .isInstanceOf(HttpClientErrorException.class)\n-        .hasMessageContaining(\"[invalid]\")\n-        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n-        .isEqualTo(HttpStatus.BAD_REQUEST);\n-  }\n+            ParameterizedTypeReference.forType(WorkbasketAccessItemListResource.class));\n+        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+        assertTrue(response.getBody()\n+            .getLink(Link.REL_SELF)\n+            .getHref()\n+            .endsWith(parameters));\n+    }\n+\n+    @Test\n+    void testThrowsExceptionIfInvalidFilterIsUsed() {\n+        try {\n+            template.exchange(\n+                restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS)\n+                    + \"?sort-by=workbasket-key&order=asc&page=1&page-size=9&invalid=user_1_1\", HttpMethod.GET,\n+                restHelper.defaultRequest(),\n+                ParameterizedTypeReference.forType(WorkbasketAccessItemListResource.class));\n+            fail();\n+        } catch (HttpClientErrorException e) {\n+            assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n+            assertTrue(e.getResponseBodyAsString().contains(\"[invalid]\"));\n+        }\n+    }\n \n-  @Test\n-  void testGetSecondPageSortedByWorkbasketKey() {\n-    String parameters = \"?sort-by=workbasket-key&order=asc&page-size=9&access-ids=user_1_1&page=1\";\n-    ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n-            HttpMethod.GET,\n+    @Test\n+    void testGetSecondPageSortedByWorkbasketKey() {\n+        String parameters = \"?sort-by=workbasket-key&order=asc&page=2&page-size=9&access-ids=user_1_1\";\n+        ResponseEntity<WorkbasketAccessItemPaginatedListResource> response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters, HttpMethod.GET,\n             restHelper.defaultRequest(),\n-            WORKBASKET_ACCESS_ITEM_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat(response.getBody().getContent()).hasSize(1);\n-    assertThat(response.getBody().getContent().iterator().next().getAccessId())\n-        .isEqualTo(\"user_1_1\");\n-    assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n-    assertThat(\n-            response\n-                .getBody()\n-                .getRequiredLink(IanaLinkRelations.SELF)\n-                .getHref()\n-                .endsWith(parameters))\n-        .isTrue();\n-    assertThat(response.getBody().getLink(IanaLinkRelations.FIRST)).isNotNull();\n-    assertThat(response.getBody().getLink(IanaLinkRelations.LAST)).isNotNull();\n-    assertThat(response.getBody().getMetadata().getSize()).isEqualTo(9);\n-    assertThat(response.getBody().getMetadata().getTotalElements()).isEqualTo(1);\n-    assertThat(response.getBody().getMetadata().getTotalPages()).isEqualTo(1);\n-    assertThat(response.getBody().getMetadata().getNumber()).isEqualTo(1);\n-  }\n+            ParameterizedTypeReference.forType(WorkbasketAccessItemPaginatedListResource.class));\n+        assertEquals(1, response.getBody().getContent().size());\n+        assertEquals(\"user_1_1\", response.getBody().getContent().iterator().next().accessId);\n+        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+        assertTrue(response.getBody()\n+            .getLink(Link.REL_SELF)\n+            .getHref()\n+            .endsWith(parameters));\n+        assertNotNull(response.getBody().getLink(Link.REL_FIRST));\n+        assertNotNull(response.getBody().getLink(Link.REL_LAST));\n+        assertEquals(9, response.getBody().getMetadata().getSize());\n+        assertEquals(1, response.getBody().getMetadata().getTotalElements());\n+        assertEquals(1, response.getBody().getMetadata().getTotalPages());\n+        assertEquals(1, response.getBody().getMetadata().getNumber());\n+    }\n \n-  @Test\n-  void testRemoveWorkbasketAccessItemsOfUser() {\n+    @Test\n+    void testRemoveWorkbasketAccessItemsOfUser() {\n \n-    String parameters = \"?access-id=user_1_1\";\n-    ResponseEntity<Void> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n-            HttpMethod.DELETE,\n+        String parameters = \"?access-id=user_1_1\";\n+        ResponseEntity<Void> response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters, HttpMethod.DELETE,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(Void.class));\n-    assertThat(response.getBody()).isNull();\n-    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);\n-  }\n+        assertNull(response.getBody());\n+        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n+    }\n \n-  @Test\n-  void testGetBadRequestIfTryingToDeleteAccessItemsForGroup() {\n-    String parameters = \"?access-id=cn=DevelopersGroup,ou=groups,o=TaskanaTest\";\n-    ThrowingCallable httpCall =\n-        () -> template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n-            HttpMethod.DELETE,\n-            restHelper.defaultRequest(),\n-            ParameterizedTypeReference.forType(Void.class));\n-    assertThatThrownBy(httpCall)\n-        .isInstanceOf(HttpClientErrorException.class)\n-        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n-        .isEqualTo(HttpStatus.BAD_REQUEST);\n-  }\n+    @Test\n+    void testGetBadRequestIfTryingToDeleteAccessItemsForGroup() {\n+        String parameters = \"?access-id=cn=DevelopersGroup,ou=groups,o=TaskanaTest\";\n+        try {\n+            ResponseEntity<Void> response = template.exchange(\n+                restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters, HttpMethod.DELETE,\n+                restHelper.defaultRequest(),\n+                ParameterizedTypeReference.forType(Void.class));\n+        } catch (HttpClientErrorException e) {\n+            assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n+        }\n+    }\n }\n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\nindex c69bf63e6..697fb44a9 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n", "chunk": "@@ -24,103 +24,106 @@ import pro.taskana.TaskanaSpringBootTest;\n import pro.taskana.rest.resource.WorkbasketAccessItemListResource;\n import pro.taskana.rest.resource.WorkbasketAccessItemPaginatedListResource;\n \n-/**\n- * Test WorkbasketAccessItemController.\n- */\n+/** Test WorkbasketAccessItemController. */\n @TestMethodOrder(MethodOrderer.Alphanumeric.class)\n @TaskanaSpringBootTest\n class WorkbasketAccessItemControllerIntTest {\n \n-    @Autowired RestHelper restHelper;\n+  private static RestTemplate template;\n+  @Autowired RestHelper restHelper;\n \n-    private static RestTemplate template;\n+  @BeforeAll\n+  static void init() {\n+    template = RestHelper.getRestTemplate();\n+  }\n \n-    @BeforeAll\n-    static void init() {\n-        template = RestHelper.getRestTemplate();\n-    }\n-\n-    @Test\n-    void testGetAllWorkbasketAccessItems() {\n-        ResponseEntity<WorkbasketAccessItemListResource> response = template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS), HttpMethod.GET, restHelper.defaultRequest(),\n+  @Test\n+  void testGetAllWorkbasketAccessItems() {\n+    ResponseEntity<WorkbasketAccessItemListResource> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS),\n+            HttpMethod.GET,\n+            restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(WorkbasketAccessItemListResource.class));\n-        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-    }\n+    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+  }\n \n-    @Test\n-    void testGetWorkbasketAccessItemsKeepingFilters() {\n-        String parameters = \"?sort-by=workbasket-key&order=asc&page=1&page-size=9&access-ids=user_1_1\";\n-        ResponseEntity<WorkbasketAccessItemListResource> response = template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters, HttpMethod.GET,\n+  @Test\n+  void testGetWorkbasketAccessItemsKeepingFilters() {\n+    String parameters = \"?sort-by=workbasket-key&order=asc&page=1&page-size=9&access-ids=user_1_1\";\n+    ResponseEntity<WorkbasketAccessItemListResource> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n+            HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(WorkbasketAccessItemListResource.class));\n-        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-        assertTrue(response.getBody()\n-            .getLink(Link.REL_SELF)\n-            .getHref()\n-            .endsWith(parameters));\n-    }\n+    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+    assertTrue(response.getBody().getLink(Link.REL_SELF).getHref().endsWith(parameters));\n+  }\n \n-    @Test\n-    void testThrowsExceptionIfInvalidFilterIsUsed() {\n-        try {\n-            template.exchange(\n-                restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS)\n-                    + \"?sort-by=workbasket-key&order=asc&page=1&page-size=9&invalid=user_1_1\", HttpMethod.GET,\n-                restHelper.defaultRequest(),\n-                ParameterizedTypeReference.forType(WorkbasketAccessItemListResource.class));\n-            fail();\n-        } catch (HttpClientErrorException e) {\n-            assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n-            assertTrue(e.getResponseBodyAsString().contains(\"[invalid]\"));\n-        }\n+  @Test\n+  void testThrowsExceptionIfInvalidFilterIsUsed() {\n+    try {\n+      template.exchange(\n+          restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS)\n+              + \"?sort-by=workbasket-key&order=asc&page=1&page-size=9&invalid=user_1_1\",\n+          HttpMethod.GET,\n+          restHelper.defaultRequest(),\n+          ParameterizedTypeReference.forType(WorkbasketAccessItemListResource.class));\n+      fail();\n+    } catch (HttpClientErrorException e) {\n+      assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n+      assertTrue(e.getResponseBodyAsString().contains(\"[invalid]\"));\n     }\n+  }\n \n-    @Test\n-    void testGetSecondPageSortedByWorkbasketKey() {\n-        String parameters = \"?sort-by=workbasket-key&order=asc&page=2&page-size=9&access-ids=user_1_1\";\n-        ResponseEntity<WorkbasketAccessItemPaginatedListResource> response = template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters, HttpMethod.GET,\n+  @Test\n+  void testGetSecondPageSortedByWorkbasketKey() {\n+    String parameters = \"?sort-by=workbasket-key&order=asc&page=2&page-size=9&access-ids=user_1_1\";\n+    ResponseEntity<WorkbasketAccessItemPaginatedListResource> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n+            HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(WorkbasketAccessItemPaginatedListResource.class));\n-        assertEquals(1, response.getBody().getContent().size());\n-        assertEquals(\"user_1_1\", response.getBody().getContent().iterator().next().accessId);\n-        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-        assertTrue(response.getBody()\n-            .getLink(Link.REL_SELF)\n-            .getHref()\n-            .endsWith(parameters));\n-        assertNotNull(response.getBody().getLink(Link.REL_FIRST));\n-        assertNotNull(response.getBody().getLink(Link.REL_LAST));\n-        assertEquals(9, response.getBody().getMetadata().getSize());\n-        assertEquals(1, response.getBody().getMetadata().getTotalElements());\n-        assertEquals(1, response.getBody().getMetadata().getTotalPages());\n-        assertEquals(1, response.getBody().getMetadata().getNumber());\n-    }\n+    assertEquals(1, response.getBody().getContent().size());\n+    assertEquals(\"user_1_1\", response.getBody().getContent().iterator().next().accessId);\n+    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+    assertTrue(response.getBody().getLink(Link.REL_SELF).getHref().endsWith(parameters));\n+    assertNotNull(response.getBody().getLink(Link.REL_FIRST));\n+    assertNotNull(response.getBody().getLink(Link.REL_LAST));\n+    assertEquals(9, response.getBody().getMetadata().getSize());\n+    assertEquals(1, response.getBody().getMetadata().getTotalElements());\n+    assertEquals(1, response.getBody().getMetadata().getTotalPages());\n+    assertEquals(1, response.getBody().getMetadata().getNumber());\n+  }\n \n-    @Test\n-    void testRemoveWorkbasketAccessItemsOfUser() {\n+  @Test\n+  void testRemoveWorkbasketAccessItemsOfUser() {\n \n-        String parameters = \"?access-id=user_1_1\";\n-        ResponseEntity<Void> response = template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters, HttpMethod.DELETE,\n+    String parameters = \"?access-id=user_1_1\";\n+    ResponseEntity<Void> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n+            HttpMethod.DELETE,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(Void.class));\n-        assertNull(response.getBody());\n-        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n-    }\n+    assertNull(response.getBody());\n+    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n+  }\n \n-    @Test\n-    void testGetBadRequestIfTryingToDeleteAccessItemsForGroup() {\n-        String parameters = \"?access-id=cn=DevelopersGroup,ou=groups,o=TaskanaTest\";\n-        try {\n-            ResponseEntity<Void> response = template.exchange(\n-                restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters, HttpMethod.DELETE,\n-                restHelper.defaultRequest(),\n-                ParameterizedTypeReference.forType(Void.class));\n-        } catch (HttpClientErrorException e) {\n-            assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n-        }\n+  @Test\n+  void testGetBadRequestIfTryingToDeleteAccessItemsForGroup() {\n+    String parameters = \"?access-id=cn=DevelopersGroup,ou=groups,o=TaskanaTest\";\n+    try {\n+      ResponseEntity<Void> response =\n+          template.exchange(\n+              restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n+              HttpMethod.DELETE,\n+              restHelper.defaultRequest(),\n+              ParameterizedTypeReference.forType(Void.class));\n+    } catch (HttpClientErrorException e) {\n+      assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n     }\n+  }\n }\n", "next_change": {"commit": "b86f3e5b65e998bc1fa7c4a1247cfd8417d9e175", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\nindex 697fb44a9..41baa1ac6 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n", "chunk": "@@ -115,15 +115,17 @@ class WorkbasketAccessItemControllerIntTest {\n   @Test\n   void testGetBadRequestIfTryingToDeleteAccessItemsForGroup() {\n     String parameters = \"?access-id=cn=DevelopersGroup,ou=groups,o=TaskanaTest\";\n-    try {\n-      ResponseEntity<Void> response =\n-          template.exchange(\n-              restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n-              HttpMethod.DELETE,\n-              restHelper.defaultRequest(),\n-              ParameterizedTypeReference.forType(Void.class));\n-    } catch (HttpClientErrorException e) {\n-      assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n-    }\n+\n+    HttpClientErrorException e =\n+        Assertions.assertThrows(\n+            HttpClientErrorException.class,\n+            () ->\n+                template.exchange(\n+                    restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n+                    HttpMethod.DELETE,\n+                    restHelper.defaultRequest(),\n+                    ParameterizedTypeReference.forType(Void.class)));\n+\n+    assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n   }\n }\n", "next_change": {"commit": "71761c1328ebf3e2d575ba3c76b91288ad504ef1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\nindex 41baa1ac6..78cc95a19 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n", "chunk": "@@ -108,24 +106,22 @@ class WorkbasketAccessItemControllerIntTest {\n             HttpMethod.DELETE,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(Void.class));\n-    assertNull(response.getBody());\n-    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n+    assertThat(response.getBody()).isNull();\n+    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);\n   }\n \n   @Test\n   void testGetBadRequestIfTryingToDeleteAccessItemsForGroup() {\n     String parameters = \"?access-id=cn=DevelopersGroup,ou=groups,o=TaskanaTest\";\n-\n-    HttpClientErrorException e =\n-        Assertions.assertThrows(\n-            HttpClientErrorException.class,\n-            () ->\n-                template.exchange(\n-                    restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n-                    HttpMethod.DELETE,\n-                    restHelper.defaultRequest(),\n-                    ParameterizedTypeReference.forType(Void.class)));\n-\n-    assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n+    assertThatThrownBy(\n+        () ->\n+            template.exchange(\n+                restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n+                HttpMethod.DELETE,\n+                restHelper.defaultRequest(),\n+                ParameterizedTypeReference.forType(Void.class)))\n+        .isInstanceOf(HttpClientErrorException.class)\n+        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n+        .isEqualTo(HttpStatus.BAD_REQUEST);\n   }\n }\n", "next_change": {"commit": "5c7d38451ce7cbea2ad52d3b84be72d49c474c71", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\nindex 78cc95a19..d17e980cd 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n", "chunk": "@@ -115,11 +115,11 @@ class WorkbasketAccessItemControllerIntTest {\n     String parameters = \"?access-id=cn=DevelopersGroup,ou=groups,o=TaskanaTest\";\n     assertThatThrownBy(\n         () ->\n-            template.exchange(\n-                restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n-                HttpMethod.DELETE,\n-                restHelper.defaultRequest(),\n-                ParameterizedTypeReference.forType(Void.class)))\n+                template.exchange(\n+                    restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n+                    HttpMethod.DELETE,\n+                    restHelper.defaultRequest(),\n+                    ParameterizedTypeReference.forType(Void.class)))\n         .isInstanceOf(HttpClientErrorException.class)\n         .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n         .isEqualTo(HttpStatus.BAD_REQUEST);\n", "next_change": {"commit": "fc3f9e186850c7a8eb42c60875e516b357ae20e8", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\nindex d17e980cd..040d3ea7e 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n", "chunk": "@@ -113,13 +115,15 @@ class WorkbasketAccessItemControllerIntTest {\n   @Test\n   void testGetBadRequestIfTryingToDeleteAccessItemsForGroup() {\n     String parameters = \"?access-id=cn=DevelopersGroup,ou=groups,o=TaskanaTest\";\n-    assertThatThrownBy(\n-        () ->\n-                template.exchange(\n-                    restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n-                    HttpMethod.DELETE,\n-                    restHelper.defaultRequest(),\n-                    ParameterizedTypeReference.forType(Void.class)))\n+    ThrowingCallable httpCall =\n+        () -> {\n+          template.exchange(\n+              restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n+              HttpMethod.DELETE,\n+              restHelper.defaultRequest(),\n+              ParameterizedTypeReference.forType(Void.class));\n+        };\n+    assertThatThrownBy(httpCall)\n         .isInstanceOf(HttpClientErrorException.class)\n         .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n         .isEqualTo(HttpStatus.BAD_REQUEST);\n", "next_change": {"commit": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\nindex 040d3ea7e..7ac5c1b65 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n", "chunk": "@@ -116,13 +135,11 @@ class WorkbasketAccessItemControllerIntTest {\n   void testGetBadRequestIfTryingToDeleteAccessItemsForGroup() {\n     String parameters = \"?access-id=cn=DevelopersGroup,ou=groups,o=TaskanaTest\";\n     ThrowingCallable httpCall =\n-        () -> {\n-          template.exchange(\n-              restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n-              HttpMethod.DELETE,\n-              restHelper.defaultRequest(),\n-              ParameterizedTypeReference.forType(Void.class));\n-        };\n+        () -> template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n+            HttpMethod.DELETE,\n+            restHelper.defaultRequest(),\n+            ParameterizedTypeReference.forType(Void.class));\n     assertThatThrownBy(httpCall)\n         .isInstanceOf(HttpClientErrorException.class)\n         .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "committedDate": "2019-12-04 09:56:34 +0100", "message": "TSK-967: Merge module taskana-rest-spring and taskana-rest-spring-test"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "f06f87f41e08aea691512d53fe1087bd12e892b8", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Replace WorkbasketAccessItemListResource with equivalent PaginatedListResource"}, {"oid": "6a6dcb9c1e3984670c644f89c569eba3d20dcf3d", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Standardise paginated List behaviour and sub classes"}, {"oid": "b86f3e5b65e998bc1fa7c4a1247cfd8417d9e175", "committedDate": "2020-01-27 11:49:59 +0100", "message": "TSK-987: Fix Spotbugs - Dead store to local variable"}, {"oid": "71761c1328ebf3e2d575ba3c76b91288ad504ef1", "committedDate": "2020-02-12 16:24:14 +0100", "message": "TSK-1108 Made attributes in WorkbasketAccessItemResource private and converted tests to AssertJ"}, {"oid": "5c7d38451ce7cbea2ad52d3b84be72d49c474c71", "committedDate": "2020-02-13 15:09:39 +0100", "message": "TSK-1094 introduce models package for */api and */internal"}, {"oid": "ebd2098434a4bb0f1260cba3a8625d696cdb63fb", "committedDate": "2020-03-03 11:40:47 +0100", "message": "TSK-1147 Replaced getRestTemplate() by constant TEMPLATE"}, {"oid": "fc3f9e186850c7a8eb42c60875e516b357ae20e8", "committedDate": "2020-03-23 07:37:54 +0100", "message": "TSK-1164: refactor code which is using assertJ's assertThatThrownBy and lambda expression with line breaks"}, {"oid": "a8e44dead343598b7266254616a7f8559ee941ba", "committedDate": "2020-04-23 09:49:16 +0200", "message": "TSK-1083: Updated HATEOAS from version 0.24.0 to version 1.0.4"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyNDI0Nw==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r424224247", "body": "remove this please", "bodyText": "remove this please", "bodyHTML": "<p dir=\"auto\">remove this please</p>", "author": "mustaphazorgati", "createdAt": "2020-05-13T07:22:36Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java", "diffHunk": "@@ -90,17 +91,19 @@ void testThrowsExceptionIfInvalidFilterIsUsed() {\n \n   @Test\n   void testGetSecondPageSortedByWorkbasketKey() {\n-    String parameters = \"?sort-by=workbasket-key&order=asc&page=2&page-size=9&access-ids=user_1_1\";\n+    String parameters = \"?sort-by=workbasket-key&order=asc&page-size=9&access-ids=user_1_1&page=1\";\n     ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> response =\n         template.exchange(\n             restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n-            WORKBASKET_ACCESSITEM_PAGE_MODEL_TYPE);\n+            WORKBASKET_ACCESS_ITEM_PAGE_MODEL_TYPE);\n+    assertThat(response.getBody()).isNotNull();\n     assertThat(response.getBody().getContent()).hasSize(1);\n     assertThat(response.getBody().getContent().iterator().next().getAccessId())\n         .isEqualTo(\"user_1_1\");\n     assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n+    System.out.println(response);", "originalCommit": "4c550f1f54bfb1a5c99f4127bc303f4c7d16a9f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "917535fbc017b6e7d19dfc57d60466e404d57c33", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\nindex 677a8d693..7ac5c1b65 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n", "chunk": "@@ -103,7 +102,6 @@ class WorkbasketAccessItemControllerIntTest {\n     assertThat(response.getBody().getContent().iterator().next().getAccessId())\n         .isEqualTo(\"user_1_1\");\n     assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n-    System.out.println(response);\n     assertThat(\n             response\n                 .getBody()\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\nindex 677a8d693..7ac5c1b65 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n", "chunk": "@@ -103,7 +102,6 @@ class WorkbasketAccessItemControllerIntTest {\n     assertThat(response.getBody().getContent().iterator().next().getAccessId())\n         .isEqualTo(\"user_1_1\");\n     assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n-    System.out.println(response);\n     assertThat(\n             response\n                 .getBody()\n", "next_change": {"commit": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\nindex 7ac5c1b65..c69bf63e6 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n", "chunk": "@@ -19,130 +21,106 @@ import org.springframework.web.client.RestTemplate;\n \n import pro.taskana.RestHelper;\n import pro.taskana.TaskanaSpringBootTest;\n-import pro.taskana.rest.resource.TaskanaPagedModel;\n-import pro.taskana.rest.resource.WorkbasketAccessItemRepresentationModel;\n+import pro.taskana.rest.resource.WorkbasketAccessItemListResource;\n+import pro.taskana.rest.resource.WorkbasketAccessItemPaginatedListResource;\n \n-/** Test WorkbasketAccessItemController. */\n+/**\n+ * Test WorkbasketAccessItemController.\n+ */\n @TestMethodOrder(MethodOrderer.Alphanumeric.class)\n @TaskanaSpringBootTest\n class WorkbasketAccessItemControllerIntTest {\n \n-  private static final ParameterizedTypeReference<\n-          TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>\n-      WORKBASKET_ACCESS_ITEM_PAGE_MODEL_TYPE =\n-          new ParameterizedTypeReference<\n-              TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>>() {};\n-  private static RestTemplate template;\n-  @Autowired RestHelper restHelper;\n+    @Autowired RestHelper restHelper;\n \n-  @BeforeAll\n-  static void init() {\n-    template = RestHelper.TEMPLATE;\n-  }\n+    private static RestTemplate template;\n \n-  @Test\n-  void testGetAllWorkbasketAccessItems() {\n-    ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS),\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            WORKBASKET_ACCESS_ITEM_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n-  }\n+    @BeforeAll\n+    static void init() {\n+        template = RestHelper.getRestTemplate();\n+    }\n \n-  @Test\n-  void testGetWorkbasketAccessItemsKeepingFilters() {\n-    String parameters = \"?sort-by=workbasket-key&order=asc&page-size=9&access-ids=user_1_1&page=1\";\n-    ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            WORKBASKET_ACCESS_ITEM_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n-    assertThat(\n-            response\n-                .getBody()\n-                .getRequiredLink(IanaLinkRelations.SELF)\n-                .getHref()\n-                .endsWith(parameters))\n-        .isTrue();\n-  }\n+    @Test\n+    void testGetAllWorkbasketAccessItems() {\n+        ResponseEntity<WorkbasketAccessItemListResource> response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS), HttpMethod.GET, restHelper.defaultRequest(),\n+            ParameterizedTypeReference.forType(WorkbasketAccessItemListResource.class));\n+        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+    }\n \n-  @Test\n-  void testThrowsExceptionIfInvalidFilterIsUsed() {\n-    ThrowingCallable httpCall =\n-        () -> template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS)\n-                + \"?sort-by=workbasket-key&order=asc&page=1&page-size=9&invalid=user_1_1\",\n-            HttpMethod.GET,\n+    @Test\n+    void testGetWorkbasketAccessItemsKeepingFilters() {\n+        String parameters = \"?sort-by=workbasket-key&order=asc&page=1&page-size=9&access-ids=user_1_1\";\n+        ResponseEntity<WorkbasketAccessItemListResource> response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters, HttpMethod.GET,\n             restHelper.defaultRequest(),\n-            WORKBASKET_ACCESS_ITEM_PAGE_MODEL_TYPE);\n-    assertThatThrownBy(httpCall)\n-        .isInstanceOf(HttpClientErrorException.class)\n-        .hasMessageContaining(\"[invalid]\")\n-        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n-        .isEqualTo(HttpStatus.BAD_REQUEST);\n-  }\n+            ParameterizedTypeReference.forType(WorkbasketAccessItemListResource.class));\n+        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+        assertTrue(response.getBody()\n+            .getLink(Link.REL_SELF)\n+            .getHref()\n+            .endsWith(parameters));\n+    }\n+\n+    @Test\n+    void testThrowsExceptionIfInvalidFilterIsUsed() {\n+        try {\n+            template.exchange(\n+                restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS)\n+                    + \"?sort-by=workbasket-key&order=asc&page=1&page-size=9&invalid=user_1_1\", HttpMethod.GET,\n+                restHelper.defaultRequest(),\n+                ParameterizedTypeReference.forType(WorkbasketAccessItemListResource.class));\n+            fail();\n+        } catch (HttpClientErrorException e) {\n+            assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n+            assertTrue(e.getResponseBodyAsString().contains(\"[invalid]\"));\n+        }\n+    }\n \n-  @Test\n-  void testGetSecondPageSortedByWorkbasketKey() {\n-    String parameters = \"?sort-by=workbasket-key&order=asc&page-size=9&access-ids=user_1_1&page=1\";\n-    ResponseEntity<TaskanaPagedModel<WorkbasketAccessItemRepresentationModel>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n-            HttpMethod.GET,\n+    @Test\n+    void testGetSecondPageSortedByWorkbasketKey() {\n+        String parameters = \"?sort-by=workbasket-key&order=asc&page=2&page-size=9&access-ids=user_1_1\";\n+        ResponseEntity<WorkbasketAccessItemPaginatedListResource> response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters, HttpMethod.GET,\n             restHelper.defaultRequest(),\n-            WORKBASKET_ACCESS_ITEM_PAGE_MODEL_TYPE);\n-    assertThat(response.getBody()).isNotNull();\n-    assertThat(response.getBody().getContent()).hasSize(1);\n-    assertThat(response.getBody().getContent().iterator().next().getAccessId())\n-        .isEqualTo(\"user_1_1\");\n-    assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n-    assertThat(\n-            response\n-                .getBody()\n-                .getRequiredLink(IanaLinkRelations.SELF)\n-                .getHref()\n-                .endsWith(parameters))\n-        .isTrue();\n-    assertThat(response.getBody().getLink(IanaLinkRelations.FIRST)).isNotNull();\n-    assertThat(response.getBody().getLink(IanaLinkRelations.LAST)).isNotNull();\n-    assertThat(response.getBody().getMetadata().getSize()).isEqualTo(9);\n-    assertThat(response.getBody().getMetadata().getTotalElements()).isEqualTo(1);\n-    assertThat(response.getBody().getMetadata().getTotalPages()).isEqualTo(1);\n-    assertThat(response.getBody().getMetadata().getNumber()).isEqualTo(1);\n-  }\n+            ParameterizedTypeReference.forType(WorkbasketAccessItemPaginatedListResource.class));\n+        assertEquals(1, response.getBody().getContent().size());\n+        assertEquals(\"user_1_1\", response.getBody().getContent().iterator().next().accessId);\n+        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+        assertTrue(response.getBody()\n+            .getLink(Link.REL_SELF)\n+            .getHref()\n+            .endsWith(parameters));\n+        assertNotNull(response.getBody().getLink(Link.REL_FIRST));\n+        assertNotNull(response.getBody().getLink(Link.REL_LAST));\n+        assertEquals(9, response.getBody().getMetadata().getSize());\n+        assertEquals(1, response.getBody().getMetadata().getTotalElements());\n+        assertEquals(1, response.getBody().getMetadata().getTotalPages());\n+        assertEquals(1, response.getBody().getMetadata().getNumber());\n+    }\n \n-  @Test\n-  void testRemoveWorkbasketAccessItemsOfUser() {\n+    @Test\n+    void testRemoveWorkbasketAccessItemsOfUser() {\n \n-    String parameters = \"?access-id=user_1_1\";\n-    ResponseEntity<Void> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n-            HttpMethod.DELETE,\n+        String parameters = \"?access-id=user_1_1\";\n+        ResponseEntity<Void> response = template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters, HttpMethod.DELETE,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(Void.class));\n-    assertThat(response.getBody()).isNull();\n-    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);\n-  }\n+        assertNull(response.getBody());\n+        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n+    }\n \n-  @Test\n-  void testGetBadRequestIfTryingToDeleteAccessItemsForGroup() {\n-    String parameters = \"?access-id=cn=DevelopersGroup,ou=groups,o=TaskanaTest\";\n-    ThrowingCallable httpCall =\n-        () -> template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n-            HttpMethod.DELETE,\n-            restHelper.defaultRequest(),\n-            ParameterizedTypeReference.forType(Void.class));\n-    assertThatThrownBy(httpCall)\n-        .isInstanceOf(HttpClientErrorException.class)\n-        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n-        .isEqualTo(HttpStatus.BAD_REQUEST);\n-  }\n+    @Test\n+    void testGetBadRequestIfTryingToDeleteAccessItemsForGroup() {\n+        String parameters = \"?access-id=cn=DevelopersGroup,ou=groups,o=TaskanaTest\";\n+        try {\n+            ResponseEntity<Void> response = template.exchange(\n+                restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters, HttpMethod.DELETE,\n+                restHelper.defaultRequest(),\n+                ParameterizedTypeReference.forType(Void.class));\n+        } catch (HttpClientErrorException e) {\n+            assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n+        }\n+    }\n }\n", "next_change": {"commit": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\nindex c69bf63e6..697fb44a9 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n", "chunk": "@@ -24,103 +24,106 @@ import pro.taskana.TaskanaSpringBootTest;\n import pro.taskana.rest.resource.WorkbasketAccessItemListResource;\n import pro.taskana.rest.resource.WorkbasketAccessItemPaginatedListResource;\n \n-/**\n- * Test WorkbasketAccessItemController.\n- */\n+/** Test WorkbasketAccessItemController. */\n @TestMethodOrder(MethodOrderer.Alphanumeric.class)\n @TaskanaSpringBootTest\n class WorkbasketAccessItemControllerIntTest {\n \n-    @Autowired RestHelper restHelper;\n+  private static RestTemplate template;\n+  @Autowired RestHelper restHelper;\n \n-    private static RestTemplate template;\n+  @BeforeAll\n+  static void init() {\n+    template = RestHelper.getRestTemplate();\n+  }\n \n-    @BeforeAll\n-    static void init() {\n-        template = RestHelper.getRestTemplate();\n-    }\n-\n-    @Test\n-    void testGetAllWorkbasketAccessItems() {\n-        ResponseEntity<WorkbasketAccessItemListResource> response = template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS), HttpMethod.GET, restHelper.defaultRequest(),\n+  @Test\n+  void testGetAllWorkbasketAccessItems() {\n+    ResponseEntity<WorkbasketAccessItemListResource> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS),\n+            HttpMethod.GET,\n+            restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(WorkbasketAccessItemListResource.class));\n-        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-    }\n+    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+  }\n \n-    @Test\n-    void testGetWorkbasketAccessItemsKeepingFilters() {\n-        String parameters = \"?sort-by=workbasket-key&order=asc&page=1&page-size=9&access-ids=user_1_1\";\n-        ResponseEntity<WorkbasketAccessItemListResource> response = template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters, HttpMethod.GET,\n+  @Test\n+  void testGetWorkbasketAccessItemsKeepingFilters() {\n+    String parameters = \"?sort-by=workbasket-key&order=asc&page=1&page-size=9&access-ids=user_1_1\";\n+    ResponseEntity<WorkbasketAccessItemListResource> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n+            HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(WorkbasketAccessItemListResource.class));\n-        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-        assertTrue(response.getBody()\n-            .getLink(Link.REL_SELF)\n-            .getHref()\n-            .endsWith(parameters));\n-    }\n+    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+    assertTrue(response.getBody().getLink(Link.REL_SELF).getHref().endsWith(parameters));\n+  }\n \n-    @Test\n-    void testThrowsExceptionIfInvalidFilterIsUsed() {\n-        try {\n-            template.exchange(\n-                restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS)\n-                    + \"?sort-by=workbasket-key&order=asc&page=1&page-size=9&invalid=user_1_1\", HttpMethod.GET,\n-                restHelper.defaultRequest(),\n-                ParameterizedTypeReference.forType(WorkbasketAccessItemListResource.class));\n-            fail();\n-        } catch (HttpClientErrorException e) {\n-            assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n-            assertTrue(e.getResponseBodyAsString().contains(\"[invalid]\"));\n-        }\n+  @Test\n+  void testThrowsExceptionIfInvalidFilterIsUsed() {\n+    try {\n+      template.exchange(\n+          restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS)\n+              + \"?sort-by=workbasket-key&order=asc&page=1&page-size=9&invalid=user_1_1\",\n+          HttpMethod.GET,\n+          restHelper.defaultRequest(),\n+          ParameterizedTypeReference.forType(WorkbasketAccessItemListResource.class));\n+      fail();\n+    } catch (HttpClientErrorException e) {\n+      assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n+      assertTrue(e.getResponseBodyAsString().contains(\"[invalid]\"));\n     }\n+  }\n \n-    @Test\n-    void testGetSecondPageSortedByWorkbasketKey() {\n-        String parameters = \"?sort-by=workbasket-key&order=asc&page=2&page-size=9&access-ids=user_1_1\";\n-        ResponseEntity<WorkbasketAccessItemPaginatedListResource> response = template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters, HttpMethod.GET,\n+  @Test\n+  void testGetSecondPageSortedByWorkbasketKey() {\n+    String parameters = \"?sort-by=workbasket-key&order=asc&page=2&page-size=9&access-ids=user_1_1\";\n+    ResponseEntity<WorkbasketAccessItemPaginatedListResource> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n+            HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(WorkbasketAccessItemPaginatedListResource.class));\n-        assertEquals(1, response.getBody().getContent().size());\n-        assertEquals(\"user_1_1\", response.getBody().getContent().iterator().next().accessId);\n-        assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-        assertTrue(response.getBody()\n-            .getLink(Link.REL_SELF)\n-            .getHref()\n-            .endsWith(parameters));\n-        assertNotNull(response.getBody().getLink(Link.REL_FIRST));\n-        assertNotNull(response.getBody().getLink(Link.REL_LAST));\n-        assertEquals(9, response.getBody().getMetadata().getSize());\n-        assertEquals(1, response.getBody().getMetadata().getTotalElements());\n-        assertEquals(1, response.getBody().getMetadata().getTotalPages());\n-        assertEquals(1, response.getBody().getMetadata().getNumber());\n-    }\n+    assertEquals(1, response.getBody().getContent().size());\n+    assertEquals(\"user_1_1\", response.getBody().getContent().iterator().next().accessId);\n+    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n+    assertTrue(response.getBody().getLink(Link.REL_SELF).getHref().endsWith(parameters));\n+    assertNotNull(response.getBody().getLink(Link.REL_FIRST));\n+    assertNotNull(response.getBody().getLink(Link.REL_LAST));\n+    assertEquals(9, response.getBody().getMetadata().getSize());\n+    assertEquals(1, response.getBody().getMetadata().getTotalElements());\n+    assertEquals(1, response.getBody().getMetadata().getTotalPages());\n+    assertEquals(1, response.getBody().getMetadata().getNumber());\n+  }\n \n-    @Test\n-    void testRemoveWorkbasketAccessItemsOfUser() {\n+  @Test\n+  void testRemoveWorkbasketAccessItemsOfUser() {\n \n-        String parameters = \"?access-id=user_1_1\";\n-        ResponseEntity<Void> response = template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters, HttpMethod.DELETE,\n+    String parameters = \"?access-id=user_1_1\";\n+    ResponseEntity<Void> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n+            HttpMethod.DELETE,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(Void.class));\n-        assertNull(response.getBody());\n-        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n-    }\n+    assertNull(response.getBody());\n+    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n+  }\n \n-    @Test\n-    void testGetBadRequestIfTryingToDeleteAccessItemsForGroup() {\n-        String parameters = \"?access-id=cn=DevelopersGroup,ou=groups,o=TaskanaTest\";\n-        try {\n-            ResponseEntity<Void> response = template.exchange(\n-                restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters, HttpMethod.DELETE,\n-                restHelper.defaultRequest(),\n-                ParameterizedTypeReference.forType(Void.class));\n-        } catch (HttpClientErrorException e) {\n-            assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n-        }\n+  @Test\n+  void testGetBadRequestIfTryingToDeleteAccessItemsForGroup() {\n+    String parameters = \"?access-id=cn=DevelopersGroup,ou=groups,o=TaskanaTest\";\n+    try {\n+      ResponseEntity<Void> response =\n+          template.exchange(\n+              restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n+              HttpMethod.DELETE,\n+              restHelper.defaultRequest(),\n+              ParameterizedTypeReference.forType(Void.class));\n+    } catch (HttpClientErrorException e) {\n+      assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n     }\n+  }\n }\n", "next_change": {"commit": "b86f3e5b65e998bc1fa7c4a1247cfd8417d9e175", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\nindex 697fb44a9..41baa1ac6 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n", "chunk": "@@ -115,15 +115,17 @@ class WorkbasketAccessItemControllerIntTest {\n   @Test\n   void testGetBadRequestIfTryingToDeleteAccessItemsForGroup() {\n     String parameters = \"?access-id=cn=DevelopersGroup,ou=groups,o=TaskanaTest\";\n-    try {\n-      ResponseEntity<Void> response =\n-          template.exchange(\n-              restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n-              HttpMethod.DELETE,\n-              restHelper.defaultRequest(),\n-              ParameterizedTypeReference.forType(Void.class));\n-    } catch (HttpClientErrorException e) {\n-      assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n-    }\n+\n+    HttpClientErrorException e =\n+        Assertions.assertThrows(\n+            HttpClientErrorException.class,\n+            () ->\n+                template.exchange(\n+                    restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n+                    HttpMethod.DELETE,\n+                    restHelper.defaultRequest(),\n+                    ParameterizedTypeReference.forType(Void.class)));\n+\n+    assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n   }\n }\n", "next_change": {"commit": "71761c1328ebf3e2d575ba3c76b91288ad504ef1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\nindex 41baa1ac6..78cc95a19 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n", "chunk": "@@ -108,24 +106,22 @@ class WorkbasketAccessItemControllerIntTest {\n             HttpMethod.DELETE,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(Void.class));\n-    assertNull(response.getBody());\n-    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n+    assertThat(response.getBody()).isNull();\n+    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);\n   }\n \n   @Test\n   void testGetBadRequestIfTryingToDeleteAccessItemsForGroup() {\n     String parameters = \"?access-id=cn=DevelopersGroup,ou=groups,o=TaskanaTest\";\n-\n-    HttpClientErrorException e =\n-        Assertions.assertThrows(\n-            HttpClientErrorException.class,\n-            () ->\n-                template.exchange(\n-                    restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n-                    HttpMethod.DELETE,\n-                    restHelper.defaultRequest(),\n-                    ParameterizedTypeReference.forType(Void.class)));\n-\n-    assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n+    assertThatThrownBy(\n+        () ->\n+            template.exchange(\n+                restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n+                HttpMethod.DELETE,\n+                restHelper.defaultRequest(),\n+                ParameterizedTypeReference.forType(Void.class)))\n+        .isInstanceOf(HttpClientErrorException.class)\n+        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n+        .isEqualTo(HttpStatus.BAD_REQUEST);\n   }\n }\n", "next_change": {"commit": "5c7d38451ce7cbea2ad52d3b84be72d49c474c71", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\nindex 78cc95a19..d17e980cd 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n", "chunk": "@@ -115,11 +115,11 @@ class WorkbasketAccessItemControllerIntTest {\n     String parameters = \"?access-id=cn=DevelopersGroup,ou=groups,o=TaskanaTest\";\n     assertThatThrownBy(\n         () ->\n-            template.exchange(\n-                restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n-                HttpMethod.DELETE,\n-                restHelper.defaultRequest(),\n-                ParameterizedTypeReference.forType(Void.class)))\n+                template.exchange(\n+                    restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n+                    HttpMethod.DELETE,\n+                    restHelper.defaultRequest(),\n+                    ParameterizedTypeReference.forType(Void.class)))\n         .isInstanceOf(HttpClientErrorException.class)\n         .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n         .isEqualTo(HttpStatus.BAD_REQUEST);\n", "next_change": {"commit": "fc3f9e186850c7a8eb42c60875e516b357ae20e8", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\nindex d17e980cd..040d3ea7e 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n", "chunk": "@@ -113,13 +115,15 @@ class WorkbasketAccessItemControllerIntTest {\n   @Test\n   void testGetBadRequestIfTryingToDeleteAccessItemsForGroup() {\n     String parameters = \"?access-id=cn=DevelopersGroup,ou=groups,o=TaskanaTest\";\n-    assertThatThrownBy(\n-        () ->\n-                template.exchange(\n-                    restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n-                    HttpMethod.DELETE,\n-                    restHelper.defaultRequest(),\n-                    ParameterizedTypeReference.forType(Void.class)))\n+    ThrowingCallable httpCall =\n+        () -> {\n+          template.exchange(\n+              restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n+              HttpMethod.DELETE,\n+              restHelper.defaultRequest(),\n+              ParameterizedTypeReference.forType(Void.class));\n+        };\n+    assertThatThrownBy(httpCall)\n         .isInstanceOf(HttpClientErrorException.class)\n         .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n         .isEqualTo(HttpStatus.BAD_REQUEST);\n", "next_change": {"commit": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\nindex 040d3ea7e..7ac5c1b65 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketAccessItemControllerIntTest.java\n", "chunk": "@@ -116,13 +135,11 @@ class WorkbasketAccessItemControllerIntTest {\n   void testGetBadRequestIfTryingToDeleteAccessItemsForGroup() {\n     String parameters = \"?access-id=cn=DevelopersGroup,ou=groups,o=TaskanaTest\";\n     ThrowingCallable httpCall =\n-        () -> {\n-          template.exchange(\n-              restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n-              HttpMethod.DELETE,\n-              restHelper.defaultRequest(),\n-              ParameterizedTypeReference.forType(Void.class));\n-        };\n+        () -> template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKETACCESSITEMS) + parameters,\n+            HttpMethod.DELETE,\n+            restHelper.defaultRequest(),\n+            ParameterizedTypeReference.forType(Void.class));\n     assertThatThrownBy(httpCall)\n         .isInstanceOf(HttpClientErrorException.class)\n         .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "7f2457ee1e73e1182c3bc40ad02152677cfcdc0c", "committedDate": "2019-12-04 09:56:34 +0100", "message": "TSK-967: Merge module taskana-rest-spring and taskana-rest-spring-test"}, {"oid": "af0bd0156e2c642e04d3ec921eae3662358ea0ea", "committedDate": "2020-01-07 21:15:05 +0100", "message": "TSK-1009: refactored project"}, {"oid": "f06f87f41e08aea691512d53fe1087bd12e892b8", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Replace WorkbasketAccessItemListResource with equivalent PaginatedListResource"}, {"oid": "6a6dcb9c1e3984670c644f89c569eba3d20dcf3d", "committedDate": "2020-01-14 15:58:16 +0100", "message": "TSK-889: Standardise paginated List behaviour and sub classes"}, {"oid": "b86f3e5b65e998bc1fa7c4a1247cfd8417d9e175", "committedDate": "2020-01-27 11:49:59 +0100", "message": "TSK-987: Fix Spotbugs - Dead store to local variable"}, {"oid": "71761c1328ebf3e2d575ba3c76b91288ad504ef1", "committedDate": "2020-02-12 16:24:14 +0100", "message": "TSK-1108 Made attributes in WorkbasketAccessItemResource private and converted tests to AssertJ"}, {"oid": "5c7d38451ce7cbea2ad52d3b84be72d49c474c71", "committedDate": "2020-02-13 15:09:39 +0100", "message": "TSK-1094 introduce models package for */api and */internal"}, {"oid": "ebd2098434a4bb0f1260cba3a8625d696cdb63fb", "committedDate": "2020-03-03 11:40:47 +0100", "message": "TSK-1147 Replaced getRestTemplate() by constant TEMPLATE"}, {"oid": "fc3f9e186850c7a8eb42c60875e516b357ae20e8", "committedDate": "2020-03-23 07:37:54 +0100", "message": "TSK-1164: refactor code which is using assertJ's assertThatThrownBy and lambda expression with line breaks"}, {"oid": "a8e44dead343598b7266254616a7f8559ee941ba", "committedDate": "2020-04-23 09:49:16 +0200", "message": "TSK-1083: Updated HATEOAS from version 0.24.0 to version 1.0.4"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "8a6f7d573ba09ef39700f7bd6970d53462a03197", "committedDate": "2020-05-21 22:40:44 +0200", "message": "TSK-1209 refactored package structure"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxMzExMQ==", "url": "https://github.com/Taskana/taskana/pull/1045#discussion_r424713111", "body": "That's not what I meant.. But it's fine.. no need for further refactoring", "bodyText": "That's not what I meant.. But it's fine.. no need for further refactoring", "bodyHTML": "<p dir=\"auto\">That's not what I meant.. But it's fine.. no need for further refactoring</p>", "author": "mustaphazorgati", "createdAt": "2020-05-13T20:31:02Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java", "diffHunk": "@@ -30,7 +30,7 @@\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(TaskCleanupJob.class);\n \n-  private static final BaseQuery.SortDirection ASCENDING = BaseQuery.SortDirection.ASCENDING;\n+  private static final SortDirection ASCENDING = SortDirection.ASCENDING;", "originalCommit": "de7db062636f7168020a615c193ec50b0ae22aae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "3ce41b224efde509aea998be3ace278832b1d562", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex b18caa105..54cec186e 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -23,21 +23,19 @@ import pro.taskana.common.internal.transaction.TaskanaTransactionProvider;\n import pro.taskana.common.internal.util.LogSanitizer;\n import pro.taskana.task.api.models.TaskSummary;\n \n-/**\n- * Job to cleanup completed tasks after a period of time.\n- */\n+/** Job to cleanup completed tasks after a period of time. */\n public class TaskCleanupJob extends AbstractTaskanaJob {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(TaskCleanupJob.class);\n \n-  private static final SortDirection ASCENDING = SortDirection.ASCENDING;\n+  private static BaseQuery.SortDirection asc = BaseQuery.SortDirection.ASCENDING;\n \n   // Parameter\n-  private final Instant firstRun;\n-  private final Duration runEvery;\n-  private final Duration minimumAge;\n-  private final int batchSize;\n-  private final boolean allCompletedSameParentBusiness;\n+  private Instant firstRun;\n+  private Duration runEvery;\n+  private Duration minimumAge;\n+  private int batchSize;\n+  private boolean allCompletedSameParentBusiness;\n \n   public TaskCleanupJob(\n       TaskanaEngine taskanaEngine,\n", "next_change": {"commit": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex 54cec186e..abfcf4ca1 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -10,32 +10,35 @@ import java.util.stream.Collectors;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import pro.taskana.common.api.BaseQuery;\n+import pro.taskana.common.api.BaseQuery.SortDirection;\n import pro.taskana.common.api.BulkOperationResults;\n import pro.taskana.common.api.LoggerUtils;\n import pro.taskana.common.api.ScheduledJob;\n import pro.taskana.common.api.TaskanaEngine;\n import pro.taskana.common.api.TimeInterval;\n import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n import pro.taskana.common.api.exceptions.TaskanaException;\n import pro.taskana.common.internal.jobs.AbstractTaskanaJob;\n import pro.taskana.common.internal.transaction.TaskanaTransactionProvider;\n import pro.taskana.common.internal.util.LogSanitizer;\n import pro.taskana.task.api.models.TaskSummary;\n \n-/** Job to cleanup completed tasks after a period of time. */\n+/**\n+ * Job to cleanup completed tasks after a period of time.\n+ */\n public class TaskCleanupJob extends AbstractTaskanaJob {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(TaskCleanupJob.class);\n \n-  private static BaseQuery.SortDirection asc = BaseQuery.SortDirection.ASCENDING;\n+  private static final SortDirection ASCENDING = SortDirection.ASCENDING;\n \n   // Parameter\n-  private Instant firstRun;\n-  private Duration runEvery;\n-  private Duration minimumAge;\n-  private int batchSize;\n-  private boolean allCompletedSameParentBusiness;\n+  private final Instant firstRun;\n+  private final Duration runEvery;\n+  private final Duration minimumAge;\n+  private final int batchSize;\n+  private final boolean allCompletedSameParentBusiness;\n \n   public TaskCleanupJob(\n       TaskanaEngine taskanaEngine,\n", "next_change": {"commit": "9906c0c7f913a2fa306ceaf665ec8accbc2761f0", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex abfcf4ca1..f1800a656 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -34,8 +33,6 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n   private static final SortDirection ASCENDING = SortDirection.ASCENDING;\n \n   // Parameter\n-  private final Instant firstRun;\n-  private final Duration runEvery;\n   private final Duration minimumAge;\n   private final int batchSize;\n   private final boolean allCompletedSameParentBusiness;\n", "next_change": {"commit": "55d21a9e8b82b363e50140a6cec48ffe347e2fd9", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex f1800a656..4567041eb 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -30,18 +31,15 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(TaskCleanupJob.class);\n \n-  private static final SortDirection ASCENDING = SortDirection.ASCENDING;\n-\n-  // Parameter\n   private final Duration minimumAge;\n   private final int batchSize;\n   private final boolean allCompletedSameParentBusiness;\n \n   public TaskCleanupJob(\n       TaskanaEngine taskanaEngine,\n-      TaskanaTransactionProvider<Object> txProvider,\n+      TaskanaTransactionProvider txProvider,\n       ScheduledJob scheduledJob) {\n-    super(taskanaEngine, txProvider, scheduledJob);\n+    super(taskanaEngine, txProvider, scheduledJob, true);\n     minimumAge = taskanaEngine.getConfiguration().getCleanupJobMinimumAge();\n     batchSize = taskanaEngine.getConfiguration().getMaxNumberOfUpdatesPerTransaction();\n     allCompletedSameParentBusiness =\n", "next_change": {"commit": "4697fbe5beefd1c72144187847ee99fcd0883d9c", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex 4567041eb..040fdff96 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -41,7 +43,7 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n       ScheduledJob scheduledJob) {\n     super(taskanaEngine, txProvider, scheduledJob, true);\n     minimumAge = taskanaEngine.getConfiguration().getCleanupJobMinimumAge();\n-    batchSize = taskanaEngine.getConfiguration().getMaxNumberOfUpdatesPerTransaction();\n+    batchSize = taskanaEngine.getConfiguration().getJobBatchSize();\n     allCompletedSameParentBusiness =\n         taskanaEngine.getConfiguration().isTaskCleanupJobAllCompletedSameParentBusiness();\n   }\n", "next_change": {"commit": "d96b1c392a0f9ecfe72e7d0bc0aadac17620133c", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex 040fdff96..ea6ea3d4a 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -42,7 +40,7 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n       TaskanaTransactionProvider txProvider,\n       ScheduledJob scheduledJob) {\n     super(taskanaEngine, txProvider, scheduledJob, true);\n-    minimumAge = taskanaEngine.getConfiguration().getCleanupJobMinimumAge();\n+    minimumAge = taskanaEngine.getConfiguration().getTaskCleanupJobMinimumAge();\n     batchSize = taskanaEngine.getConfiguration().getJobBatchSize();\n     allCompletedSameParentBusiness =\n         taskanaEngine.getConfiguration().isTaskCleanupJobAllCompletedSameParentBusiness();\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex abfcf4ca1..f1800a656 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -45,8 +42,6 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n       TaskanaTransactionProvider<Object> txProvider,\n       ScheduledJob scheduledJob) {\n     super(taskanaEngine, txProvider, scheduledJob);\n-    firstRun = taskanaEngine.getConfiguration().getCleanupJobFirstRun();\n-    runEvery = taskanaEngine.getConfiguration().getCleanupJobRunEvery();\n     minimumAge = taskanaEngine.getConfiguration().getCleanupJobMinimumAge();\n     batchSize = taskanaEngine.getConfiguration().getMaxNumberOfUpdatesPerTransaction();\n     allCompletedSameParentBusiness =\n", "next_change": {"commit": "55d21a9e8b82b363e50140a6cec48ffe347e2fd9", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex f1800a656..4567041eb 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -30,18 +31,15 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(TaskCleanupJob.class);\n \n-  private static final SortDirection ASCENDING = SortDirection.ASCENDING;\n-\n-  // Parameter\n   private final Duration minimumAge;\n   private final int batchSize;\n   private final boolean allCompletedSameParentBusiness;\n \n   public TaskCleanupJob(\n       TaskanaEngine taskanaEngine,\n-      TaskanaTransactionProvider<Object> txProvider,\n+      TaskanaTransactionProvider txProvider,\n       ScheduledJob scheduledJob) {\n-    super(taskanaEngine, txProvider, scheduledJob);\n+    super(taskanaEngine, txProvider, scheduledJob, true);\n     minimumAge = taskanaEngine.getConfiguration().getCleanupJobMinimumAge();\n     batchSize = taskanaEngine.getConfiguration().getMaxNumberOfUpdatesPerTransaction();\n     allCompletedSameParentBusiness =\n", "next_change": {"commit": "4697fbe5beefd1c72144187847ee99fcd0883d9c", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex 4567041eb..040fdff96 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -41,7 +43,7 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n       ScheduledJob scheduledJob) {\n     super(taskanaEngine, txProvider, scheduledJob, true);\n     minimumAge = taskanaEngine.getConfiguration().getCleanupJobMinimumAge();\n-    batchSize = taskanaEngine.getConfiguration().getMaxNumberOfUpdatesPerTransaction();\n+    batchSize = taskanaEngine.getConfiguration().getJobBatchSize();\n     allCompletedSameParentBusiness =\n         taskanaEngine.getConfiguration().isTaskCleanupJobAllCompletedSameParentBusiness();\n   }\n", "next_change": {"commit": "d96b1c392a0f9ecfe72e7d0bc0aadac17620133c", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex 040fdff96..ea6ea3d4a 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -42,7 +40,7 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n       TaskanaTransactionProvider txProvider,\n       ScheduledJob scheduledJob) {\n     super(taskanaEngine, txProvider, scheduledJob, true);\n-    minimumAge = taskanaEngine.getConfiguration().getCleanupJobMinimumAge();\n+    minimumAge = taskanaEngine.getConfiguration().getTaskCleanupJobMinimumAge();\n     batchSize = taskanaEngine.getConfiguration().getJobBatchSize();\n     allCompletedSameParentBusiness =\n         taskanaEngine.getConfiguration().isTaskCleanupJobAllCompletedSameParentBusiness();\n", "next_change": null}]}}]}}, {"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\nindex f1800a656..4567041eb 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java\n", "chunk": "@@ -49,7 +47,7 @@ public class TaskCleanupJob extends AbstractTaskanaJob {\n   }\n \n   @Override\n-  public void run() throws TaskanaException {\n+  public void execute() {\n     Instant completedBefore = Instant.now().minus(minimumAge);\n     LOGGER.info(\"Running job to delete all tasks completed before ({})\", completedBefore);\n     try {\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "36a15a5e3790674cfda9d5ac7bb35c4588b35a44", "message": "Merge commit", "committedDate": null}, {"oid": "3ce41b224efde509aea998be3ace278832b1d562", "committedDate": "2020-05-06 10:18:42 +0200", "message": "TSK-1182: refined architecture tests"}, {"oid": "1f13c2c33ac0ce2c8202a23f5d977c87717894a3", "committedDate": "2020-05-13 14:49:18 +0200", "message": "TSK-1195: Secure deleteTasks in TaskServiceImpl"}, {"oid": "bd116d4c2e02b853dd336e3f2efdcd6b330f2fe1", "committedDate": "2020-05-14 13:02:48 +0200", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one"}, {"oid": "c6755b35b7226f4989aeea25ceeb3e18204fed45", "committedDate": "2020-05-22 03:25:57 +0200", "message": "TSK-1244: added due/planned logic for SLA P0D"}, {"oid": "8832876b9372c135c2c2fce88bc4820a1cab37d7", "committedDate": "2020-06-03 14:32:31 +0200", "message": "TSK-1247: Removed LoggerUtils and replaced its usages with the standard toString implementations"}, {"oid": "a2318c267ea7f6d57cfffefc04c5285e66778fac", "committedDate": "2020-06-12 12:31:55 +0200", "message": "reformatted code"}, {"oid": "851b3536db5879bc668ecdd70cc0c6347ec57c8a", "committedDate": "2020-09-23 08:50:12 +0200", "message": "TSK-1332: Add HistoryCleanupJob"}, {"oid": "f113410ef4a5dd89a5368b9a4353319d11491436", "committedDate": "2020-10-16 09:57:39 +0200", "message": "TSK-1404: Delete old Cleanup jobs when initializing"}, {"oid": "4152bf92d0c2f6432c193a30199d895ff0b586f3", "committedDate": "2020-10-28 14:25:44 +0100", "message": "TSK-1437: Fixed some SonarCloud Code Smells"}, {"oid": "c6e82c1368da17762918b1ef5102974a302124af", "committedDate": "2021-02-02 08:16:07 +0100", "message": "TSK-1506: Fixed bug for Cleanup Jobs with more than 32767 tasks (#1457)"}, {"oid": "aa6d304b499a9df48d90ff3bfc375b25c5f00a71", "committedDate": "2021-02-03 09:34:22 +0100", "message": "TSK-1499: Fixed bug of also cleaning completed tasks with parentProcessId null/empty (#1394)"}, {"oid": "9906c0c7f913a2fa306ceaf665ec8accbc2761f0", "committedDate": "2021-02-03 11:56:03 +0100", "message": "TSK-1504: Next scheduled Job now based on due date of job before"}, {"oid": "bfcabea61048ccb21a591e0c4f1f8efecc7636b4", "committedDate": "2021-05-20 09:41:58 +0200", "message": "TSK-1596: Automatic TraceLogging (#1577)"}, {"oid": "dd5bccc62ca2f97c28ec7bef9c9639635e8c8d7f", "committedDate": "2021-06-10 10:49:53 +0200", "message": "TSK-1654: fixed current code smells"}, {"oid": "34d2bbfa929ccaa9e9b93c173b8fa867154330bb", "committedDate": "2021-07-14 10:49:34 +0200", "message": "TSK-1647: Implemented an error key for every exception"}, {"oid": "55d21a9e8b82b363e50140a6cec48ffe347e2fd9", "committedDate": "2021-08-02 16:42:09 +0200", "message": "TSK-1649: implemented database lock for resolution of jobs to run"}, {"oid": "5d08893a6b2a770fb15ac32411833baa071ce3bb", "committedDate": "2021-08-31 13:41:23 +0200", "message": "TSK-1724: Change JobType from Enum to String"}, {"oid": "8eb8f1f44db9c1724582ef04f9037f089342c818", "committedDate": "2021-08-31 13:41:23 +0200", "message": "TSK-1724: Code Review Changes"}, {"oid": "93d0b27bb058a4f47218177136bce81f99103345", "committedDate": "2022-04-26 15:27:56 +0200", "message": "TSK-1831: dropped support for JDK8"}, {"oid": "20d389a7d524c156b063dfc91589bb22bebea0d7", "committedDate": "2023-03-13 10:39:04 +0100", "message": "TSK-1992 remove unnecessary ParentExceptions"}, {"oid": "4697fbe5beefd1c72144187847ee99fcd0883d9c", "committedDate": "2023-03-13 10:39:04 +0100", "message": "TSK-2004: JavaDoc 4 TaskanaConfiguration.Builder#initTaskanaProperties"}, {"oid": "f64e38eb27a840be235ed88a6dcd7adc8ccd942c", "committedDate": "2023-03-13 10:39:04 +0100", "message": "TSK-1989: integrate execution of jobs in taskana core (#2087)"}, {"oid": "d21eb47ffea4c2c9fff8f1d3435b77b805d03508", "committedDate": "2023-03-13 10:39:04 +0100", "message": "TSK-2012: renamed Mismatched_Exceptions to NotAuthorizedExceptions"}, {"oid": "55d939ca7b7720ab12f488ed8fc2a631ecc6f05c", "committedDate": "2023-03-13 19:02:53 +0100", "message": "format entire codebase with new google-java-format version"}, {"oid": "d96b1c392a0f9ecfe72e7d0bc0aadac17620133c", "committedDate": "2023-03-15 01:00:50 +0100", "message": "TSK-1991: rework of property names"}]}, {"oid": "917535fbc017b6e7d19dfc57d60466e404d57c33", "url": "https://github.com/Taskana/taskana/commit/917535fbc017b6e7d19dfc57d60466e404d57c33", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one", "committedDate": "2020-05-14T09:50:50Z", "type": "commit"}, {"oid": "917535fbc017b6e7d19dfc57d60466e404d57c33", "url": "https://github.com/Taskana/taskana/commit/917535fbc017b6e7d19dfc57d60466e404d57c33", "message": "[TSK-1208] changed HATE terminology and replaced list resources with generic one", "committedDate": "2020-05-14T09:50:50Z", "type": "forcePushed"}]}