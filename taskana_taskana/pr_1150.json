{"pr_number": 1150, "pr_title": "TSK-1275: Support select and claim in one API call", "pr_createdAt": "2020-06-26T12:25:29Z", "pr_url": "https://github.com/Taskana/taskana/pull/1150", "merge_commit": "969d3eeff653d51eb7dcf5234aa4020333613ab3", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0NDU4MQ==", "url": "https://github.com/Taskana/taskana/pull/1150#discussion_r446644581", "body": "Please rework the naming and clarify which taskId is meant. \r\ne.g. `@throws TaskNotFoundException if the taskQuery does not return any task`", "bodyText": "Please rework the naming and clarify which taskId is meant.\ne.g. @throws TaskNotFoundException if the taskQuery does not return any task", "bodyHTML": "<p dir=\"auto\">Please rework the naming and clarify which taskId is meant.<br>\ne.g. <code>@throws TaskNotFoundException if the taskQuery does not return any task</code></p>", "author": "mustaphazorgati", "createdAt": "2020-06-28T12:27:49Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "diffHunk": "@@ -325,6 +325,21 @@ void deleteTask(String taskId)\n   void forceDeleteTask(String taskId)\n       throws TaskNotFoundException, InvalidStateException, NotAuthorizedException;\n \n+  /**\n+   * Selects and claims the first task which is returned by the task query.\n+   *\n+   * @param taskQuery the task query.\n+   * @return the task that got selected and claimed\n+   * @throws TaskNotFoundException if the task with taskId was not found\n+   * @throws InvalidStateException if the state of the task with taskId is not READY\n+   * @throws InvalidOwnerException if the task with taskId is claimed by someone else\n+   * @throws NotAuthorizedException if the current user has no read permission for the\n+   *     workbasket the task is in", "originalCommit": "f1991ad4316cd8de239ba6cd0cc57caa70f1bddb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "808d5e604539f2f4e5e13e86b00c627a78e1b762", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java b/lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java\nindex 60090b74d..af39a662a 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java\n", "chunk": "@@ -330,15 +330,11 @@ public interface TaskService {\n    *\n    * @param taskQuery the task query.\n    * @return the task that got selected and claimed\n-   * @throws TaskNotFoundException if the task with taskId was not found\n-   * @throws InvalidStateException if the state of the task with taskId is not READY\n-   * @throws InvalidOwnerException if the task with taskId is claimed by someone else\n-   * @throws NotAuthorizedException if the current user has no read permission for the\n-   *     workbasket the task is in\n+   * @throws InvalidOwnerException if the task is claimed by someone else\n+   * @throws NotAuthorizedException if the current user has no read permission for the workbasket\n+   *     the task is in\n    */\n-  Task selectAndClaim(TaskQuery taskQuery)\n-      throws TaskNotFoundException, NotAuthorizedException, InvalidStateException,\n-          InvalidOwnerException;\n+  Task selectAndClaim(TaskQuery taskQuery) throws NotAuthorizedException, InvalidOwnerException;\n \n   /**\n    * Deletes a list of tasks.\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0NDY0NA==", "url": "https://github.com/Taskana/taskana/pull/1150#discussion_r446644644", "body": "selectAndClaim does not work on db2? I think this is worth commenting. Something like \"the optimized query for db2 does not work with selectAndClaim because ...\"", "bodyText": "selectAndClaim does not work on db2? I think this is worth commenting. Something like \"the optimized query for db2 does not work with selectAndClaim because ...\"", "bodyHTML": "<p dir=\"auto\">selectAndClaim does not work on db2? I think this is worth commenting. Something like \"the optimized query for db2 does not work with selectAndClaim because ...\"</p>", "author": "mustaphazorgati", "createdAt": "2020-06-28T12:28:26Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryImpl.java", "diffHunk": "@@ -1112,7 +1111,11 @@ public long count() {\n   }\n \n   public String getLinkToMapperScript() {\n-    return DB.DB2.dbProductId.equals(getDatabaseId()) ? LINK_TO_MAPPER_DB2 : LINK_TO_MAPPER;\n+    if (DB.DB2.dbProductId.equals(getDatabaseId()) && !selectAndClaim) {\n+      return LINK_TO_MAPPER_DB2;", "originalCommit": "f1991ad4316cd8de239ba6cd0cc57caa70f1bddb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "808d5e604539f2f4e5e13e86b00c627a78e1b762", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryImpl.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryImpl.java\nindex 4381d8cbd..f90afde63 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryImpl.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryImpl.java\n", "chunk": "@@ -1110,6 +1110,8 @@ public class TaskQueryImpl implements TaskQuery {\n     }\n   }\n \n+  // optimized query for db2 can't be used for now in case of selectAndClaim because of temporary\n+  // tables and the \"for update\" clause clashing in db2\n   public String getLinkToMapperScript() {\n     if (DB.DB2.dbProductId.equals(getDatabaseId()) && !selectAndClaim) {\n       return LINK_TO_MAPPER_DB2;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MjUyMw==", "url": "https://github.com/Taskana/taskana/pull/1150#discussion_r446652523", "body": "why SystemException? According to JavaDoc I expected a \"TaskNotFoundExeption\"", "bodyText": "why SystemException? According to JavaDoc I expected a \"TaskNotFoundExeption\"", "bodyHTML": "<p dir=\"auto\">why SystemException? According to JavaDoc I expected a \"TaskNotFoundExeption\"</p>", "author": "mustaphazorgati", "createdAt": "2020-06-28T13:40:30Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskServiceImpl.java", "diffHunk": "@@ -477,6 +477,37 @@ public void forceDeleteTask(String taskId)\n     deleteTask(taskId, true);\n   }\n \n+  @Override\n+  public Task selectAndClaim(TaskQuery taskQuery)\n+      throws TaskNotFoundException, NotAuthorizedException, InvalidStateException,\n+          InvalidOwnerException {\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"entry to selectAndClaim(taskQuery = {})\", taskQuery);\n+    }\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      ((TaskQueryImpl) taskQuery).selectAndClaimEquals(true);\n+\n+      TaskSummary taskSummary = taskQuery.single();\n+\n+      if (taskSummary == null) {\n+        throw new SystemException(\n+            \"No tasks matched the specified filter and sorting options,\"\n+                + \" task query returned nothing!\");\n+      }", "originalCommit": "f1991ad4316cd8de239ba6cd0cc57caa70f1bddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc4MTQ0MA==", "url": "https://github.com/Taskana/taskana/pull/1150#discussion_r446781440", "bodyText": "The TaskNotFoundException from JavaDoc is inherited from the claim() call. While I would agree that in case of a null return from the query a TaskNotFoundException seems logical, it needs an id, which we usually won't have here, we only got a query (assuming taskIdIn is not always set).", "author": "gitgoodjhe", "createdAt": "2020-06-29T05:33:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MjUyMw=="}], "type": "inlineReview", "revised_code": {"commit": "808d5e604539f2f4e5e13e86b00c627a78e1b762", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskServiceImpl.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskServiceImpl.java\nindex 985fd2b07..442074ec6 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskServiceImpl.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskServiceImpl.java\n", "chunk": "@@ -502,6 +501,8 @@ public class TaskServiceImpl implements TaskService {\n \n       return claim(taskSummary.getId());\n \n+    } catch (InvalidStateException | TaskNotFoundException e) {\n+      throw new SystemException(\"Caught exception \", e);\n     } finally {\n       LOGGER.debug(\"exit from selectAndClaim()\");\n       taskanaEngine.returnConnection();\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MjcxOQ==", "url": "https://github.com/Taskana/taskana/pull/1150#discussion_r446652719", "body": "```suggestion\r\n    assertThat(selectedAndClaimedTasks)\r\n        .extracting(Task::getId)\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(selectedAndClaimedTasks.stream().map(Task::getId))\n          \n          \n            \n                assertThat(selectedAndClaimedTasks)\n          \n          \n            \n                    .extracting(Task::getId)", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    assertThat(selectedAndClaimedTasks<span class=\"pl-k x x-first\">.</span><span class=\"x\">stream()</span><span class=\"pl-k x\">.</span><span class=\"x\">map(</span><span class=\"pl-smi x\">Task</span><span class=\"pl-k x\">::</span><span class=\"x x-last\">getId)</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    assertThat(selectedAndClaimedTasks)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        .extracting(<span class=\"pl-smi\">Task</span><span class=\"pl-k\">::</span>getId)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mustaphazorgati", "createdAt": "2020-06-28T13:42:33Z", "path": "lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.security.PrivilegedAction;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import javax.security.auth.Subject;\n+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.BaseQuery.SortDirection;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.security.JaasExtension;\n+import pro.taskana.common.internal.security.UserPrincipal;\n+import pro.taskana.common.internal.security.WithAccessId;\n+import pro.taskana.common.internal.util.CheckedConsumer;\n+import pro.taskana.task.api.TaskQuery;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class SelectAndClaimTaskAccTest extends AbstractAccTest {\n+\n+  @Test\n+  void should_claimDifferentTasks_For_ConcurrentSelectAndClaimCalls() throws Exception {\n+\n+    List<Task> selectedAndClaimedTasks = Collections.synchronizedList(new ArrayList<>());\n+\n+    List<String> accessIds =\n+        Collections.synchronizedList(\n+            Stream.of(\"admin\", \"teamlead-1\", \"teamlead-2\", \"taskadmin\")\n+                .collect(Collectors.toList()));\n+\n+    Runnable test = getRunnableTest(selectedAndClaimedTasks, accessIds);\n+\n+    Thread[] threads = new Thread[4];\n+    for (int i = 0; i < threads.length; i++) {\n+      threads[i] = new Thread(test);\n+      threads[i].start();\n+    }\n+    for (int i = 0; i < threads.length; i++) {\n+      threads[i].join();\n+    }\n+\n+    assertThat(selectedAndClaimedTasks.stream().map(Task::getId))", "originalCommit": "f1991ad4316cd8de239ba6cd0cc57caa70f1bddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc4NDE5MA==", "url": "https://github.com/Taskana/taskana/pull/1150#discussion_r446784190", "bodyText": "thx :)", "author": "gitgoodjhe", "createdAt": "2020-06-29T05:43:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MjcxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "808d5e604539f2f4e5e13e86b00c627a78e1b762", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\nindex 01324d32a..9f065d506 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\n", "chunk": "@@ -50,14 +50,14 @@ class SelectAndClaimTaskAccTest extends AbstractAccTest {\n       threads[i].join();\n     }\n \n-    assertThat(selectedAndClaimedTasks.stream().map(Task::getId))\n+    assertThat(selectedAndClaimedTasks).extracting(Task::getId)\n         .containsExactlyInAnyOrder(\n             \"TKI:000000000000000000000000000000000003\",\n             \"TKI:000000000000000000000000000000000004\",\n             \"TKI:000000000000000000000000000000000005\",\n             \"TKI:000000000000000000000000000000000006\");\n \n-    assertThat(selectedAndClaimedTasks.stream().map(Task::getOwner))\n+    assertThat(selectedAndClaimedTasks).extracting(Task::getOwner)\n         .containsExactlyInAnyOrder(\"admin\", \"taskadmin\", \"teamlead-1\", \"teamlead-2\");\n   }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1Mjc3OA==", "url": "https://github.com/Taskana/taskana/pull/1150#discussion_r446652778", "body": "```suggestion\r\n    assertThat(selectedAndClaimedTasks)\r\n        .extracting(Task::getOwner)\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(selectedAndClaimedTasks.stream().map(Task::getOwner))\n          \n          \n            \n                assertThat(selectedAndClaimedTasks)\n          \n          \n            \n                    .extracting(Task::getOwner)", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    assertThat(selectedAndClaimedTasks<span class=\"pl-k x x-first\">.</span><span class=\"x\">stream()</span><span class=\"pl-k x\">.</span><span class=\"x\">map(</span><span class=\"pl-smi x\">Task</span><span class=\"pl-k x\">::</span><span class=\"x x-last\">getOwner)</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    assertThat(selectedAndClaimedTasks)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        .extracting(<span class=\"pl-smi\">Task</span><span class=\"pl-k\">::</span>getOwner)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mustaphazorgati", "createdAt": "2020-06-28T13:43:01Z", "path": "lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.security.PrivilegedAction;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import javax.security.auth.Subject;\n+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.BaseQuery.SortDirection;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.security.JaasExtension;\n+import pro.taskana.common.internal.security.UserPrincipal;\n+import pro.taskana.common.internal.security.WithAccessId;\n+import pro.taskana.common.internal.util.CheckedConsumer;\n+import pro.taskana.task.api.TaskQuery;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class SelectAndClaimTaskAccTest extends AbstractAccTest {\n+\n+  @Test\n+  void should_claimDifferentTasks_For_ConcurrentSelectAndClaimCalls() throws Exception {\n+\n+    List<Task> selectedAndClaimedTasks = Collections.synchronizedList(new ArrayList<>());\n+\n+    List<String> accessIds =\n+        Collections.synchronizedList(\n+            Stream.of(\"admin\", \"teamlead-1\", \"teamlead-2\", \"taskadmin\")\n+                .collect(Collectors.toList()));\n+\n+    Runnable test = getRunnableTest(selectedAndClaimedTasks, accessIds);\n+\n+    Thread[] threads = new Thread[4];\n+    for (int i = 0; i < threads.length; i++) {\n+      threads[i] = new Thread(test);\n+      threads[i].start();\n+    }\n+    for (int i = 0; i < threads.length; i++) {\n+      threads[i].join();\n+    }\n+\n+    assertThat(selectedAndClaimedTasks.stream().map(Task::getId))\n+        .containsExactlyInAnyOrder(\n+            \"TKI:000000000000000000000000000000000003\",\n+            \"TKI:000000000000000000000000000000000004\",\n+            \"TKI:000000000000000000000000000000000005\",\n+            \"TKI:000000000000000000000000000000000006\");\n+\n+    assertThat(selectedAndClaimedTasks.stream().map(Task::getOwner))", "originalCommit": "f1991ad4316cd8de239ba6cd0cc57caa70f1bddb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "808d5e604539f2f4e5e13e86b00c627a78e1b762", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\nindex 01324d32a..9f065d506 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\n", "chunk": "@@ -50,14 +50,14 @@ class SelectAndClaimTaskAccTest extends AbstractAccTest {\n       threads[i].join();\n     }\n \n-    assertThat(selectedAndClaimedTasks.stream().map(Task::getId))\n+    assertThat(selectedAndClaimedTasks).extracting(Task::getId)\n         .containsExactlyInAnyOrder(\n             \"TKI:000000000000000000000000000000000003\",\n             \"TKI:000000000000000000000000000000000004\",\n             \"TKI:000000000000000000000000000000000005\",\n             \"TKI:000000000000000000000000000000000006\");\n \n-    assertThat(selectedAndClaimedTasks.stream().map(Task::getOwner))\n+    assertThat(selectedAndClaimedTasks).extracting(Task::getOwner)\n         .containsExactlyInAnyOrder(\"admin\", \"taskadmin\", \"teamlead-1\", \"teamlead-2\");\n   }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "969d3eeff653d51eb7dcf5234aa4020333613ab3", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\nindex 01324d32a..9f065d506 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\n", "chunk": "@@ -50,14 +50,14 @@ class SelectAndClaimTaskAccTest extends AbstractAccTest {\n       threads[i].join();\n     }\n \n-    assertThat(selectedAndClaimedTasks.stream().map(Task::getId))\n+    assertThat(selectedAndClaimedTasks).extracting(Task::getId)\n         .containsExactlyInAnyOrder(\n             \"TKI:000000000000000000000000000000000003\",\n             \"TKI:000000000000000000000000000000000004\",\n             \"TKI:000000000000000000000000000000000005\",\n             \"TKI:000000000000000000000000000000000006\");\n \n-    assertThat(selectedAndClaimedTasks.stream().map(Task::getOwner))\n+    assertThat(selectedAndClaimedTasks).extracting(Task::getOwner)\n         .containsExactlyInAnyOrder(\"admin\", \"taskadmin\", \"teamlead-1\", \"teamlead-2\");\n   }\n \n", "next_change": {"commit": "ec483ab21cbe35f0e0ec608b109c47a3438abb48", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\nindex 9f065d506..982880a5e 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\n", "chunk": "@@ -50,14 +50,16 @@ class SelectAndClaimTaskAccTest extends AbstractAccTest {\n       threads[i].join();\n     }\n \n-    assertThat(selectedAndClaimedTasks).extracting(Task::getId)\n+    assertThat(selectedAndClaimedTasks)\n+        .extracting(Task::getId)\n         .containsExactlyInAnyOrder(\n             \"TKI:000000000000000000000000000000000003\",\n             \"TKI:000000000000000000000000000000000004\",\n             \"TKI:000000000000000000000000000000000005\",\n             \"TKI:000000000000000000000000000000000006\");\n \n-    assertThat(selectedAndClaimedTasks).extracting(Task::getOwner)\n+    assertThat(selectedAndClaimedTasks)\n+        .extracting(Task::getOwner)\n         .containsExactlyInAnyOrder(\"admin\", \"taskadmin\", \"teamlead-1\", \"teamlead-2\");\n   }\n \n", "next_change": {"commit": "770e1ff6feb6a1af2748a8c31cf758c6f796a41a", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\nindex 982880a5e..59fb62e6e 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\n", "chunk": "@@ -65,7 +65,7 @@ class SelectAndClaimTaskAccTest extends AbstractAccTest {\n \n   @Test\n   @WithAccessId(user = \"admin\")\n-  void should_ThrowException_When_TryingToSelectAndClaimNonExistingTask() throws Exception {\n+  void should_ThrowException_When_TryingToSelectAndClaimNonExistingTask() {\n \n     TaskQuery query = taskanaEngine.getTaskService().createTaskQuery();\n     query.idIn(\"notexisting\");\n", "next_change": {"commit": "4f7b1fc8679b8c5cc2adff03b2e2db9b12083513", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\nindex 59fb62e6e..37c7100db 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\n", "chunk": "@@ -67,12 +67,8 @@ class SelectAndClaimTaskAccTest extends AbstractAccTest {\n   @WithAccessId(user = \"admin\")\n   void should_ThrowException_When_TryingToSelectAndClaimNonExistingTask() {\n \n-    TaskQuery query = taskanaEngine.getTaskService().createTaskQuery();\n-    query.idIn(\"notexisting\");\n-    ThrowingCallable call =\n-        () -> {\n-          taskanaEngine.getTaskService().selectAndClaim(query);\n-        };\n+    TaskQuery query = taskanaEngine.getTaskService().createTaskQuery().idIn(\"notexisting\");\n+    ThrowingCallable call = () -> taskanaEngine.getTaskService().selectAndClaim(query);\n     assertThatThrownBy(call)\n         .isInstanceOf(SystemException.class)\n         .hasMessageContaining(\n", "next_change": {"commit": "55d21a9e8b82b363e50140a6cec48ffe347e2fd9", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\nindex 37c7100db..6e602c708 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\n", "chunk": "@@ -76,6 +67,17 @@ class SelectAndClaimTaskAccTest extends AbstractAccTest {\n                 + \"task query returned nothing!\");\n   }\n \n+  private void runInThread(Runnable runnable, int threadCount) throws InterruptedException {\n+    Thread[] threads = new Thread[threadCount];\n+    for (int i = 0; i < threads.length; i++) {\n+      threads[i] = new Thread(runnable);\n+      threads[i].start();\n+    }\n+    for (Thread thread : threads) {\n+      thread.join();\n+    }\n+  }\n+\n   private Runnable getRunnableTest(List<Task> selectedAndClaimedTasks, List<String> accessIds) {\n     return () -> {\n       Subject subject = new Subject();\n", "next_change": {"commit": "1df190d1dae0cf8aee9795a112e8bea26e651828", "changed_code": [{"header": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\nindex 6e602c708..709185866 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java\n", "chunk": "@@ -67,17 +69,6 @@ class SelectAndClaimTaskAccTest extends AbstractAccTest {\n                 + \"task query returned nothing!\");\n   }\n \n-  private void runInThread(Runnable runnable, int threadCount) throws InterruptedException {\n-    Thread[] threads = new Thread[threadCount];\n-    for (int i = 0; i < threads.length; i++) {\n-      threads[i] = new Thread(runnable);\n-      threads[i].start();\n-    }\n-    for (Thread thread : threads) {\n-      thread.join();\n-    }\n-  }\n-\n   private Runnable getRunnableTest(List<Task> selectedAndClaimedTasks, List<String> accessIds) {\n     return () -> {\n       Subject subject = new Subject();\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "969d3eeff653d51eb7dcf5234aa4020333613ab3", "message": "Merge commit", "committedDate": null}, {"oid": "ec483ab21cbe35f0e0ec608b109c47a3438abb48", "committedDate": "2020-07-06 18:02:39 +0200", "message": "TSK-1318: replaced all declared Exceptions with Exception.class in all our test classes"}, {"oid": "770e1ff6feb6a1af2748a8c31cf758c6f796a41a", "committedDate": "2020-07-08 10:26:34 +0200", "message": "TSK-1326: removed unnecessary throws statements"}, {"oid": "83feab0955443f102345064d95e886281f76cef7", "committedDate": "2020-09-15 12:23:07 +0200", "message": "TSK-1386: made all our lower case test names upper case to match our naming convention"}, {"oid": "47aa60033faf81caaab930410972bdc7bf7d6e05", "committedDate": "2020-10-09 10:25:54 +0200", "message": "TSK-1277: moved JaasExtension and all its necessary classes to common modules"}, {"oid": "44cb21b5aec13e6548a0546dc8eb221fb1cd29ad", "committedDate": "2020-10-09 10:25:54 +0200", "message": "TSK-1277: removed circular dependency between taskana-common and taskana-core"}, {"oid": "4f7b1fc8679b8c5cc2adff03b2e2db9b12083513", "committedDate": "2020-11-02 09:41:48 +0100", "message": "TSK-1282: replaced Collections.emptyCollection with List/Map/Set.of"}, {"oid": "bfcabea61048ccb21a591e0c4f1f8efecc7636b4", "committedDate": "2021-05-20 09:41:58 +0200", "message": "TSK-1596: Automatic TraceLogging (#1577)"}, {"oid": "55d21a9e8b82b363e50140a6cec48ffe347e2fd9", "committedDate": "2021-08-02 16:42:09 +0200", "message": "TSK-1649: implemented database lock for resolution of jobs to run"}, {"oid": "1df190d1dae0cf8aee9795a112e8bea26e651828", "committedDate": "2021-11-04 10:10:46 +0100", "message": "TSK-1757: Added ParallelThreadHelper to support multi threaded tests."}, {"oid": "a0fe4ea468f273e2e96aab4cb40407a64a2263f0", "committedDate": "2022-04-05 12:32:50 +0200", "message": "TSK-1814: structured acceptance tests in packages"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1Mjg0OA==", "url": "https://github.com/Taskana/taskana/pull/1150#discussion_r446652848", "body": "Do we really want a system exception here?", "bodyText": "Do we really want a system exception here?", "bodyHTML": "<p dir=\"auto\">Do we really want a system exception here?</p>", "author": "mustaphazorgati", "createdAt": "2020-06-28T13:43:27Z", "path": "lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.security.PrivilegedAction;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import javax.security.auth.Subject;\n+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.BaseQuery.SortDirection;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.security.JaasExtension;\n+import pro.taskana.common.internal.security.UserPrincipal;\n+import pro.taskana.common.internal.security.WithAccessId;\n+import pro.taskana.common.internal.util.CheckedConsumer;\n+import pro.taskana.task.api.TaskQuery;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class SelectAndClaimTaskAccTest extends AbstractAccTest {\n+\n+  @Test\n+  void should_claimDifferentTasks_For_ConcurrentSelectAndClaimCalls() throws Exception {\n+\n+    List<Task> selectedAndClaimedTasks = Collections.synchronizedList(new ArrayList<>());\n+\n+    List<String> accessIds =\n+        Collections.synchronizedList(\n+            Stream.of(\"admin\", \"teamlead-1\", \"teamlead-2\", \"taskadmin\")\n+                .collect(Collectors.toList()));\n+\n+    Runnable test = getRunnableTest(selectedAndClaimedTasks, accessIds);\n+\n+    Thread[] threads = new Thread[4];\n+    for (int i = 0; i < threads.length; i++) {\n+      threads[i] = new Thread(test);\n+      threads[i].start();\n+    }\n+    for (int i = 0; i < threads.length; i++) {\n+      threads[i].join();\n+    }\n+\n+    assertThat(selectedAndClaimedTasks.stream().map(Task::getId))\n+        .containsExactlyInAnyOrder(\n+            \"TKI:000000000000000000000000000000000003\",\n+            \"TKI:000000000000000000000000000000000004\",\n+            \"TKI:000000000000000000000000000000000005\",\n+            \"TKI:000000000000000000000000000000000006\");\n+\n+    assertThat(selectedAndClaimedTasks.stream().map(Task::getOwner))\n+        .containsExactlyInAnyOrder(\"admin\", \"taskadmin\", \"teamlead-1\", \"teamlead-2\");\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_ThrowException_When_TryingToSelectAndClaimNonExistingTask() throws Exception {\n+\n+    TaskQuery query = taskanaEngine.getTaskService().createTaskQuery();\n+    query.idIn(\"notexisting\");\n+    ThrowingCallable call =\n+        () -> {\n+          taskanaEngine.getTaskService().selectAndClaim(query);\n+        };\n+    assertThatThrownBy(call)\n+        .isInstanceOf(SystemException.class)\n+        .hasMessageContaining(\n+            \"No tasks matched the specified filter and sorting options, \"\n+                + \"task query returned nothing!\");\n+  }", "originalCommit": "f1991ad4316cd8de239ba6cd0cc57caa70f1bddb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MzA2NQ==", "url": "https://github.com/Taskana/taskana/pull/1150#discussion_r446653065", "body": "personally I think `<= 16` is more readable :)", "bodyText": "personally I think <= 16 is more readable :)", "bodyHTML": "<p dir=\"auto\">personally I think <code>&lt;= 16</code> is more readable :)</p>", "author": "mustaphazorgati", "createdAt": "2020-06-28T13:45:14Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/task/rest/TaskController.java", "diffHunk": "@@ -414,8 +439,15 @@ private TaskQuery applyFilterParams(TaskQuery taskQuery, MultiValueMap<String, S\n       params.remove(EXTERNAL_ID);\n     }\n \n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", taskQuery);\n+    for (int i = 1; i < 17; i++) {", "originalCommit": "f1991ad4316cd8de239ba6cd0cc57caa70f1bddb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "808d5e604539f2f4e5e13e86b00c627a78e1b762", "changed_code": [{"header": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/task/rest/TaskController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/task/rest/TaskController.java\nindex 116d4c5e7..d72909593 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/task/rest/TaskController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/task/rest/TaskController.java\n", "chunk": "@@ -439,7 +439,7 @@ public class TaskController extends AbstractPagingController {\n       params.remove(EXTERNAL_ID);\n     }\n \n-    for (int i = 1; i < 17; i++) {\n+    for (int i = 1; i <= 16; i++) {\n       if (params.containsKey(CUSTOM + i)) {\n         String[] customValues = extractCommaSeparatedFields(params.get(CUSTOM + i));\n         taskQuery.customAttributeIn(String.valueOf(i), customValues);\n", "next_change": null}]}}, {"oid": "7d0edb6ba219885935b7bc1a69b5af8ebc9c5862", "url": "https://github.com/Taskana/taskana/commit/7d0edb6ba219885935b7bc1a69b5af8ebc9c5862", "message": "TSK-1275: Support select and claim in one API call", "committedDate": "2020-06-30T11:19:02Z", "type": "commit"}, {"oid": "808d5e604539f2f4e5e13e86b00c627a78e1b762", "url": "https://github.com/Taskana/taskana/commit/808d5e604539f2f4e5e13e86b00c627a78e1b762", "message": "review Findings", "committedDate": "2020-06-30T12:39:49Z", "type": "commit"}]}