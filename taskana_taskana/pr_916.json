{"pr_number": 916, "pr_title": "TSK-1106 Make ClassificationSummaryResource attributes private", "pr_author": "sofie29", "pr_createdAt": "2020-02-11T14:13:49Z", "pr_url": "https://github.com/Taskana/taskana/pull/916", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3NzYwMA==", "url": "https://github.com/Taskana/taskana/pull/916#discussion_r377677600", "body": "Pls get rid of this", "bodyText": "Pls get rid of this", "bodyHTML": "<p dir=\"auto\">Pls get rid of this</p>", "author": "gitgoodjhe", "createdAt": "2020-02-11T14:44:13Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/ClassificationControllerIntTest.java", "diffHunk": "@@ -1,11 +1,8 @@\n package pro.taskana.rest;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.jupiter.api.Assertions.assertThrows;", "originalCommit": "b5061c79baf19a623d2c42e12623980139dd79c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4OTU0Ng==", "url": "https://github.com/Taskana/taskana/pull/916#discussion_r377689546", "body": "We can substitute these Assertions.assertThrows cases with assertJ as follows: \r\n\r\n    assertThatThrownBy(\r\n\r\n        () -> template.exchange(\r\n            restHelper.toUrl(Mapping.URL_CLASSIFICATIONS),\r\n            HttpMethod.POST,\r\n            new HttpEntity<>(newClassification, restHelper.getHeaders()),\r\n            ParameterizedTypeReference.forType(ClassificationResource.class)))\r\n        .isInstanceOf(HttpClientErrorException.class)\r\n        .extracting(ex ->((HttpClientErrorException) ex ).getStatusCode())\r\n          .isEqualTo(HttpStatus.BAD_REQUEST);", "bodyText": "We can substitute these Assertions.assertThrows cases with assertJ as follows:\nassertThatThrownBy(\n\n    () -> template.exchange(\n        restHelper.toUrl(Mapping.URL_CLASSIFICATIONS),\n        HttpMethod.POST,\n        new HttpEntity<>(newClassification, restHelper.getHeaders()),\n        ParameterizedTypeReference.forType(ClassificationResource.class)))\n    .isInstanceOf(HttpClientErrorException.class)\n    .extracting(ex ->((HttpClientErrorException) ex ).getStatusCode())\n      .isEqualTo(HttpStatus.BAD_REQUEST);", "bodyHTML": "<p dir=\"auto\">We can substitute these Assertions.assertThrows cases with assertJ as follows:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThatThrownBy(\n\n    () -&gt; template.exchange(\n        restHelper.toUrl(Mapping.URL_CLASSIFICATIONS),\n        HttpMethod.POST,\n        new HttpEntity&lt;&gt;(newClassification, restHelper.getHeaders()),\n        ParameterizedTypeReference.forType(ClassificationResource.class)))\n    .isInstanceOf(HttpClientErrorException.class)\n    .extracting(ex -&gt;((HttpClientErrorException) ex ).getStatusCode())\n      .isEqualTo(HttpStatus.BAD_REQUEST);\"><pre><code>assertThatThrownBy(\n\n    () -&gt; template.exchange(\n        restHelper.toUrl(Mapping.URL_CLASSIFICATIONS),\n        HttpMethod.POST,\n        new HttpEntity&lt;&gt;(newClassification, restHelper.getHeaders()),\n        ParameterizedTypeReference.forType(ClassificationResource.class)))\n    .isInstanceOf(HttpClientErrorException.class)\n    .extracting(ex -&gt;((HttpClientErrorException) ex ).getStatusCode())\n      .isEqualTo(HttpStatus.BAD_REQUEST);\n</code></pre></div>", "author": "gitgoodjhe", "createdAt": "2020-02-11T15:01:37Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/ClassificationControllerIntTest.java", "diffHunk": "@@ -235,13 +234,13 @@ void testReturn400IfCreateClassificationWithIncompatibleParentIdAndKey() throws\n                     new HttpEntity<>(newClassification, restHelper.getHeaders()),\n                     ParameterizedTypeReference.forType(ClassificationResource.class)));\n \n-    assertNotNull(e);\n-    assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n+    assertThat(e).isNotNull();", "originalCommit": "b5061c79baf19a623d2c42e12623980139dd79c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4OTk2Nw==", "url": "https://github.com/Taskana/taskana/pull/916#discussion_r377689967", "body": "see above", "bodyText": "see above", "bodyHTML": "<p dir=\"auto\">see above</p>", "author": "gitgoodjhe", "createdAt": "2020-02-11T15:02:15Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/ClassificationControllerIntTest.java", "diffHunk": "@@ -257,28 +256,28 @@ void testCreateClassificationWithClassificationIdReturnsError400() throws IOExce\n                     new HttpEntity<>(newClassification, restHelper.getHeaders()),\n                     ParameterizedTypeReference.forType(ClassificationResource.class)));\n \n-    assertNotNull(e);\n-    assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n+    assertThat(e).isNotNull();", "originalCommit": "b5061c79baf19a623d2c42e12623980139dd79c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5MTA4NA==", "url": "https://github.com/Taskana/taskana/pull/916#discussion_r377691084", "body": "is this a formatter issue? same for the following identation differences", "bodyText": "is this a formatter issue? same for the following identation differences", "bodyHTML": "<p dir=\"auto\">is this a formatter issue? same for the following identation differences</p>", "author": "gitgoodjhe", "createdAt": "2020-02-11T15:04:04Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskControllerIntTest.java", "diffHunk": "@@ -251,21 +252,22 @@ void testGetAllTasksByWorkbasketIdWithinSingleIndefiniteDueTimeInterval() {\n     assertThat(response.getBody().getContent()).hasSize(6);\n   }\n \n+  @SuppressWarnings(\"checkstyle:Indentation\")\n   @Test\n   void testGetAllTasksByWorkbasketIdWithInvalidDueParamsCombination() {\n     assertThatThrownBy(\n-        () ->\n-          template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS)\n-                + \"?workbasket-id=WBI:100000000000000000000000000000000001\"\n-                + \"&due=2020-01-22T09:44:47.453Z,,\"\n-                + \"2020-01-19T07:44:47.453Z,2020-01-19T19:44:47.453Z,\"\n-                + \",2020-01-18T09:44:47.453Z\"\n-                + \"&due-from=2020-01-19T07:44:47.453Z\"\n-                + \"&sort-by=planned\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            ParameterizedTypeReference.forType(TaskSummaryListResource.class)))\n+            () ->\n+                template.exchange(\n+                    restHelper.toUrl(Mapping.URL_TASKS)\n+                        + \"?workbasket-id=WBI:100000000000000000000000000000000001\"\n+                        + \"&due=2020-01-22T09:44:47.453Z,,\"\n+                        + \"2020-01-19T07:44:47.453Z,2020-01-19T19:44:47.453Z,\"\n+                        + \",2020-01-18T09:44:47.453Z\"\n+                        + \"&due-from=2020-01-19T07:44:47.453Z\"\n+                        + \"&sort-by=planned\",\n+                    HttpMethod.GET,\n+                    restHelper.defaultRequest(),\n+                    ParameterizedTypeReference.forType(TaskSummaryListResource.class)))", "originalCommit": "b5061c79baf19a623d2c42e12623980139dd79c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9c032a507901fb95a82a324e9d8b32341323951b", "url": "https://github.com/Taskana/taskana/commit/9c032a507901fb95a82a324e9d8b32341323951b", "message": "TSK-1106 Make ClassificationSummaryResource attributes private\n\nTSK-1106 Converted tests to AssertJ\n\nTSK-1106 Converted assertThrows to AssertJ\n\nTSK-1106 Removed suppress checkstyle for lambdas", "committedDate": "2020-02-12T11:13:53Z", "type": "commit"}]}