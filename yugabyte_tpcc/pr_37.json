{"pr_number": 37, "pr_title": "Display latencies of the operations without the wait times.", "pr_author": "psudheer21", "pr_createdAt": "2020-07-13T17:02:45Z", "pr_url": "https://github.com/yugabyte/tpcc/pull/37", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MzE3Mw==", "url": "https://github.com/yugabyte/tpcc/pull/37#discussion_r453873173", "body": "Can you please remove `Rate limited req/s` from above and just call it `Throughput`? Also, do you have enough information to calculate throughput per transaction type? (similar to what you're doing for latencies below).\r\n\r\nLet's also remove the rate limiting option from the config file - it's confusing for users.", "bodyText": "Can you please remove Rate limited req/s from above and just call it Throughput? Also, do you have enough information to calculate throughput per transaction type? (similar to what you're doing for latencies below).\nLet's also remove the rate limiting option from the config file - it's confusing for users.", "bodyHTML": "<p dir=\"auto\">Can you please remove <code>Rate limited req/s</code> from above and just call it <code>Throughput</code>? Also, do you have enough information to calculate throughput per transaction type? (similar to what you're doing for latencies below).</p>\n<p dir=\"auto\">Let's also remove the rate limiting option from the config file - it's confusing for users.</p>", "author": "ndeodhar", "createdAt": "2020-07-13T19:14:21Z", "path": "src/com/oltpbenchmark/DBWorkload.java", "diffHunk": "@@ -907,9 +906,35 @@ private static Results runWorkload(List<BenchmarkModule> benchList, boolean verb\n         LOG.info(\"Num New Order transactions : \" + numNewOrderTransactions + \", time seconds: \" + time);", "originalCommit": "19291a9c5340d335bed59cb865aaf89febe1e600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3NTI2MA==", "url": "https://github.com/yugabyte/tpcc/pull/37#discussion_r453875260", "bodyText": "Another note: Can we use double for tpmc calculation instead of long and while printing, just use 2 digits after the decimal point?", "author": "ndeodhar", "createdAt": "2020-07-13T19:18:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MzE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3ODU5Mg==", "url": "https://github.com/yugabyte/tpcc/pull/37#discussion_r454678592", "bodyText": "Done.", "author": "psudheer21", "createdAt": "2020-07-14T22:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MzE3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3NjYzNQ==", "url": "https://github.com/yugabyte/tpcc/pull/37#discussion_r453876635", "body": "This will be a problem for long running workloads. Please add a TODO to fix this method of calculation.", "bodyText": "This will be a problem for long running workloads. Please add a TODO to fix this method of calculation.", "bodyHTML": "<p dir=\"auto\">This will be a problem for long running workloads. Please add a TODO to fix this method of calculation.</p>", "author": "ndeodhar", "createdAt": "2020-07-13T19:20:34Z", "path": "src/com/oltpbenchmark/DBWorkload.java", "diffHunk": "@@ -907,9 +906,35 @@ private static Results runWorkload(List<BenchmarkModule> benchList, boolean verb\n         LOG.info(\"Num New Order transactions : \" + numNewOrderTransactions + \", time seconds: \" + time);\n         LOG.info(\"TPM-C: \" + tpmc);\n         LOG.info(\"Efficiency : \" + efficiency);\n+        printLatencies(workers, workConfs.get(0).getTransTypes());\n         return r;\n     }\n \n+    private static void printLatencies(List<Worker<?>> workers, TransactionTypes transactionTypes) {\n+        List<List<Integer>> list_latencies = new ArrayList<>();\n+        for (int i = 0; i < 5; ++i) {\n+            list_latencies.add(new ArrayList<Integer>());\n+        }\n+        for (Worker<?> w : workers) {\n+            for (LatencyRecord.Sample sample : w.getLatencyRecords()) {\n+                list_latencies.get(sample.tranType - 1).add(sample.operationLatencyUs);\n+            }\n+        }\n+        for (int i = 0; i < 5; ++i) {\n+            Collections.sort(list_latencies.get(i));", "originalCommit": "19291a9c5340d335bed59cb865aaf89febe1e600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY4MDEwNQ==", "url": "https://github.com/yugabyte/tpcc/pull/37#discussion_r454680105", "bodyText": "Done.", "author": "psudheer21", "createdAt": "2020-07-14T22:24:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3NjYzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3ODIxNQ==", "url": "https://github.com/yugabyte/tpcc/pull/37#discussion_r453878215", "body": "Let's use milliseconds instead of microseconds.", "bodyText": "Let's use milliseconds instead of microseconds.", "bodyHTML": "<p dir=\"auto\">Let's use milliseconds instead of microseconds.</p>", "author": "ndeodhar", "createdAt": "2020-07-13T19:23:26Z", "path": "src/com/oltpbenchmark/DBWorkload.java", "diffHunk": "@@ -907,9 +906,35 @@ private static Results runWorkload(List<BenchmarkModule> benchList, boolean verb\n         LOG.info(\"Num New Order transactions : \" + numNewOrderTransactions + \", time seconds: \" + time);\n         LOG.info(\"TPM-C: \" + tpmc);\n         LOG.info(\"Efficiency : \" + efficiency);\n+        printLatencies(workers, workConfs.get(0).getTransTypes());\n         return r;\n     }\n \n+    private static void printLatencies(List<Worker<?>> workers, TransactionTypes transactionTypes) {\n+        List<List<Integer>> list_latencies = new ArrayList<>();\n+        for (int i = 0; i < 5; ++i) {\n+            list_latencies.add(new ArrayList<Integer>());\n+        }\n+        for (Worker<?> w : workers) {\n+            for (LatencyRecord.Sample sample : w.getLatencyRecords()) {\n+                list_latencies.get(sample.tranType - 1).add(sample.operationLatencyUs);\n+            }\n+        }\n+        for (int i = 0; i < 5; ++i) {\n+            Collections.sort(list_latencies.get(i));\n+            long sum = 0;\n+            for (int val : list_latencies.get(i)) {\n+                sum += val;\n+            }\n+            double avgLatency = sum / list_latencies.get(i).size();\n+            int p99Index = (int)(list_latencies.get(i).size() * 0.99);\n+\n+            LOG.info(transactionTypes.getType(i+1).getName() +\n+                     \", Avg Latency: \" + avgLatency +\n+                     \" usecs, p99 Latency: \" + list_latencies.get(i).get(p99Index) + \" usecs\");", "originalCommit": "19291a9c5340d335bed59cb865aaf89febe1e600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY4MDA4NA==", "url": "https://github.com/yugabyte/tpcc/pull/37#discussion_r454680084", "bodyText": "Done.", "author": "psudheer21", "createdAt": "2020-07-14T22:24:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3ODIxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3OTI2NQ==", "url": "https://github.com/yugabyte/tpcc/pull/37#discussion_r453879265", "body": "What is the `+500` for?", "bodyText": "What is the +500 for?", "bodyHTML": "<p dir=\"auto\">What is the <code>+500</code> for?</p>", "author": "ndeodhar", "createdAt": "2020-07-13T19:25:16Z", "path": "src/com/oltpbenchmark/LatencyRecord.java", "diffHunk": "@@ -46,7 +48,10 @@ public void addLatency(int transType, long startNs, long endNs, int workerId, in\n \t\tint latencyUs = (int) ((endNs - startNs + 500) / 1000);\n \t\tassert latencyUs >= 0;\n \n-\t\tchunk[nextIndex] = new Sample(transType, startNs, latencyUs, workerId, phaseId);\n+\t\tint operationLatencyUs = (int)((operationEndNs - operationStartNs + 500) / 1000);", "originalCommit": "19291a9c5340d335bed59cb865aaf89febe1e600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY4MjE2Nw==", "url": "https://github.com/yugabyte/tpcc/pull/37#discussion_r454682167", "bodyText": "That does the rounding...", "author": "psudheer21", "createdAt": "2020-07-14T22:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3OTI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MTkyNA==", "url": "https://github.com/yugabyte/tpcc/pull/37#discussion_r453881924", "body": "You'll need to change the header above too to only include `Transaction Name, Latency (microseconds)`", "bodyText": "You'll need to change the header above too to only include Transaction Name, Latency (microseconds)", "bodyHTML": "<p dir=\"auto\">You'll need to change the header above too to only include <code>Transaction Name, Latency (microseconds)</code></p>", "author": "ndeodhar", "createdAt": "2020-07-13T19:29:59Z", "path": "src/com/oltpbenchmark/Results.java", "diffHunk": "@@ -171,14 +162,8 @@ public void writeAllCSVAbsoluteTiming(List<TransactionType> activeTXTypes, Print\n         for (Sample s : latencySamples) {", "originalCommit": "19291a9c5340d335bed59cb865aaf89febe1e600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY4MTk5OQ==", "url": "https://github.com/yugabyte/tpcc/pull/37#discussion_r454681999", "bodyText": "Done.", "author": "psudheer21", "createdAt": "2020-07-14T22:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MTkyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY4MjA4MQ==", "url": "https://github.com/yugabyte/tpcc/pull/37#discussion_r454682081", "bodyText": "Done.", "author": "psudheer21", "createdAt": "2020-07-14T22:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MTkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MjMzNQ==", "url": "https://github.com/yugabyte/tpcc/pull/37#discussion_r453882335", "body": "I think having start time might be good too. We could leave it there for now IMO.", "bodyText": "I think having start time might be good too. We could leave it there for now IMO.", "bodyHTML": "<p dir=\"auto\">I think having start time might be good too. We could leave it there for now IMO.</p>", "author": "ndeodhar", "createdAt": "2020-07-13T19:30:40Z", "path": "src/com/oltpbenchmark/Results.java", "diffHunk": "@@ -171,14 +162,8 @@ public void writeAllCSVAbsoluteTiming(List<TransactionType> activeTXTypes, Print\n         for (Sample s : latencySamples) {\n             double startUs = ((double) s.startNs / (double) 1000000000);", "originalCommit": "19291a9c5340d335bed59cb865aaf89febe1e600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY4MTEwNg==", "url": "https://github.com/yugabyte/tpcc/pull/37#discussion_r454681106", "bodyText": "Done.", "author": "psudheer21", "createdAt": "2020-07-14T22:26:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MjMzNQ=="}], "type": "inlineReview"}, {"oid": "5278e7f62bb1bd5ca1e2483a3a7cb359f5184f0c", "url": "https://github.com/yugabyte/tpcc/commit/5278e7f62bb1bd5ca1e2483a3a7cb359f5184f0c", "message": "Display latencies of the operations without the wait times.\n\nReviewers:\nNeha, Karthik", "committedDate": "2020-07-14T23:12:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3MTgxNA==", "url": "https://github.com/yugabyte/tpcc/pull/37#discussion_r454771814", "body": "```suggestion\r\n        LOG.info(\"Throughput: \" + r + \" transactions / sec\");\r\n        LOG.info(\"Num New Order transactions : \" + numNewOrderTransactions + \", time seconds: \" + time);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOG.info(\"Throughput: \" + r + \" Num New Order transactions : \" + numNewOrderTransactions + \", time seconds: \" + time);\n          \n          \n            \n                    LOG.info(\"Throughput: \" + r + \" transactions / sec\");\n          \n          \n            \n                    LOG.info(\"Num New Order transactions : \" + numNewOrderTransactions + \", time seconds: \" + time);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c1\">LOG</span><span class=\"pl-k\">.</span>info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Throughput: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> r <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"x x-first x-last\">Num New Order </span>transactions <span class=\"x x-first\">: </span><span class=\"pl-pds x\">\"</span></span><span class=\"x\"> </span><span class=\"pl-k x\">+</span><span class=\"x\"> numNewOrderTransactions </span><span class=\"pl-k x\">+</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">, time seconds: </span><span class=\"pl-pds x\">\"</span></span><span class=\"x\"> </span><span class=\"pl-k x\">+</span><span class=\"x x-last\"> time</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c1\">LOG</span><span class=\"pl-k\">.</span>info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Throughput: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> r <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> transactions <span class=\"x x-first\">/ sec</span><span class=\"pl-pds x x-last\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c1\">LOG</span><span class=\"pl-k\">.</span>info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Num New Order transactions : <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> numNewOrderTransactions <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>, time seconds: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> time);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ndeodhar", "createdAt": "2020-07-15T03:42:01Z", "path": "src/com/oltpbenchmark/DBWorkload.java", "diffHunk": "@@ -899,17 +898,43 @@ private static Results runWorkload(List<BenchmarkModule> benchList, boolean verb\n             }\n         }\n         LOG.info(SINGLE_LINE);\n-        LOG.info(\"Rate limited reqs/s: \" + r);\n \n-        long tpmc = numNewOrderTransactions * 60 / time;\n+        double tpmc = 1.0 * numNewOrderTransactions * 60 / time;\n         double efficiency = 1.0 * tpmc * 100 / numWarehouses / 12.86;\n \n-        LOG.info(\"Num New Order transactions : \" + numNewOrderTransactions + \", time seconds: \" + time);\n+        LOG.info(\"Throughput: \" + r + \" Num New Order transactions : \" + numNewOrderTransactions + \", time seconds: \" + time);", "originalCommit": "5278e7f62bb1bd5ca1e2483a3a7cb359f5184f0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3MjgwNA==", "url": "https://github.com/yugabyte/tpcc/pull/37#discussion_r454772804", "body": "Can you use just 2 digits after decimal point while printing so that it looks neater and more readable?", "bodyText": "Can you use just 2 digits after decimal point while printing so that it looks neater and more readable?", "bodyHTML": "<p dir=\"auto\">Can you use just 2 digits after decimal point while printing so that it looks neater and more readable?</p>", "author": "ndeodhar", "createdAt": "2020-07-15T03:46:09Z", "path": "src/com/oltpbenchmark/DBWorkload.java", "diffHunk": "@@ -899,17 +898,43 @@ private static Results runWorkload(List<BenchmarkModule> benchList, boolean verb\n             }\n         }\n         LOG.info(SINGLE_LINE);\n-        LOG.info(\"Rate limited reqs/s: \" + r);\n \n-        long tpmc = numNewOrderTransactions * 60 / time;\n+        double tpmc = 1.0 * numNewOrderTransactions * 60 / time;\n         double efficiency = 1.0 * tpmc * 100 / numWarehouses / 12.86;\n \n-        LOG.info(\"Num New Order transactions : \" + numNewOrderTransactions + \", time seconds: \" + time);\n+        LOG.info(\"Throughput: \" + r + \" Num New Order transactions : \" + numNewOrderTransactions + \", time seconds: \" + time);\n         LOG.info(\"TPM-C: \" + tpmc);", "originalCommit": "5278e7f62bb1bd5ca1e2483a3a7cb359f5184f0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7b72c8f2a549ec62e3ed2dba2c62387e0e45301e", "url": "https://github.com/yugabyte/tpcc/commit/7b72c8f2a549ec62e3ed2dba2c62387e0e45301e", "message": "Display latencies of the operations without the wait times.\n\nReviewers:\nNeha, Karthik", "committedDate": "2020-07-15T04:09:23Z", "type": "commit"}, {"oid": "7b72c8f2a549ec62e3ed2dba2c62387e0e45301e", "url": "https://github.com/yugabyte/tpcc/commit/7b72c8f2a549ec62e3ed2dba2c62387e0e45301e", "message": "Display latencies of the operations without the wait times.\n\nReviewers:\nNeha, Karthik", "committedDate": "2020-07-15T04:09:23Z", "type": "forcePushed"}]}