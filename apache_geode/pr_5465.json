{"pr_number": 5465, "pr_title": "GEODE-8419: SSL/TLS protocol and cipher suite configuration is ignored", "pr_author": "bschuchardt", "pr_createdAt": "2020-08-18T18:48:37Z", "pr_url": "https://github.com/apache/geode/pull/5465", "timeline": [{"oid": "f6d121aec74ff5d335862215f16d5045453444ab", "url": "https://github.com/apache/geode/commit/f6d121aec74ff5d335862215f16d5045453444ab", "message": "GEODE-8419: SSL/TLS protocol and cipher suite configuration is ignored\n\nConfigure cipher suites when creating an SSLEngine", "committedDate": "2020-08-18T18:47:11Z", "type": "commit"}, {"oid": "02e9dea895d997b8245db50666bd3c5449b91b70", "url": "https://github.com/apache/geode/commit/02e9dea895d997b8245db50666bd3c5449b91b70", "message": "addressing test issues", "committedDate": "2020-08-18T20:05:23Z", "type": "commit"}, {"oid": "3d240a666801930cb54e2f9ccd5ed4fa2f2c7aad", "url": "https://github.com/apache/geode/commit/3d240a666801930cb54e2f9ccd5ed4fa2f2c7aad", "message": "fixing error in SSLSocket endpoint validation", "committedDate": "2020-08-18T20:48:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUyMTgwMg==", "url": "https://github.com/apache/geode/pull/5465#discussion_r472521802", "body": "Should we verify that it is called with a `String[]` only containing the `\"someCipher\"`?", "bodyText": "Should we verify that it is called with a String[] only containing the \"someCipher\"?", "bodyHTML": "<p dir=\"auto\">Should we verify that it is called with a <code>String[]</code> only containing the <code>\"someCipher\"</code>?</p>", "author": "pivotal-jbarrett", "createdAt": "2020-08-18T22:10:21Z", "path": "geode-core/src/test/java/org/apache/geode/internal/net/SocketCreatorJUnitTest.java", "diffHunk": "@@ -98,6 +102,30 @@ private void testBindExceptionMessageFormatting(InetAddress inetAddress) throws\n     }\n   }\n \n+  @Test\n+  public void configureSSLEngine() {\n+    SSLConfig config = new SSLConfig.Builder().setCiphers(\"someCipher\").setEnabled(true)\n+        .setProtocols(\"someProtocol\").setRequireAuth(true).setKeystore(\"someKeystore.jks\")\n+        .setAlias(\"someAlias\").setTruststore(\"someTruststore.jks\")\n+        .setEndpointIdentificationEnabled(true).build();\n+    SSLContext context = mock(SSLContext.class);\n+    SSLParameters parameters = mock(SSLParameters.class);\n+\n+    SocketCreator socketCreator = new SocketCreator(config, context);\n+\n+    SSLEngine engine = mock(SSLEngine.class);\n+    when(engine.getSSLParameters()).thenReturn(parameters);\n+\n+    engine.setEnableSessionCreation(true);\n+    socketCreator.configureSSLEngine(engine, \"somehost\", 12345, true);\n+\n+    verify(engine).setUseClientMode(isA(Boolean.class));\n+    verify(engine).setSSLParameters(parameters);\n+    verify(engine).setEnabledCipherSuites(isA(String[].class));", "originalCommit": "3d240a666801930cb54e2f9ccd5ed4fa2f2c7aad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUzODgyNg==", "url": "https://github.com/apache/geode/pull/5465#discussion_r472538826", "bodyText": "yes, I was being lazy there.  I've corrected that", "author": "bschuchardt", "createdAt": "2020-08-18T22:58:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUyMTgwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUyMjA1OQ==", "url": "https://github.com/apache/geode/pull/5465#discussion_r472522059", "body": "What about a test for `\"any\"`?", "bodyText": "What about a test for \"any\"?", "bodyHTML": "<p dir=\"auto\">What about a test for <code>\"any\"</code>?</p>", "author": "pivotal-jbarrett", "createdAt": "2020-08-18T22:11:00Z", "path": "geode-core/src/test/java/org/apache/geode/internal/net/SocketCreatorJUnitTest.java", "diffHunk": "@@ -98,6 +102,30 @@ private void testBindExceptionMessageFormatting(InetAddress inetAddress) throws\n     }\n   }\n \n+  @Test\n+  public void configureSSLEngine() {\n+    SSLConfig config = new SSLConfig.Builder().setCiphers(\"someCipher\").setEnabled(true)", "originalCommit": "3d240a666801930cb54e2f9ccd5ed4fa2f2c7aad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUzOTAxNw==", "url": "https://github.com/apache/geode/pull/5465#discussion_r472539017", "bodyText": "Yes!  I'm having lots of \"fun\" with \"any\" this week and that's an excellent idea.", "author": "bschuchardt", "createdAt": "2020-08-18T22:59:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUyMjA1OQ=="}], "type": "inlineReview"}, {"oid": "ec4638eca502bea68894d5b6e694a0a88a6e5721", "url": "https://github.com/apache/geode/commit/ec4638eca502bea68894d5b6e694a0a88a6e5721", "message": "addressing Jake's comments", "committedDate": "2020-08-18T22:57:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0MzUxNA==", "url": "https://github.com/apache/geode/pull/5465#discussion_r472543514", "body": "Are you familiar with `ArgumentCaptors` in Mokito? I find it to be more readable approach to the argument validation than `doAnswer` approach. \r\nhttps://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#verify-T-", "bodyText": "Are you familiar with ArgumentCaptors in Mokito? I find it to be more readable approach to the argument validation than doAnswer approach.\nhttps://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#verify-T-", "bodyHTML": "<p dir=\"auto\">Are you familiar with <code>ArgumentCaptors</code> in Mokito? I find it to be more readable approach to the argument validation than <code>doAnswer</code> approach.<br>\n<a href=\"https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#verify-T-\" rel=\"nofollow\">https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#verify-T-</a></p>", "author": "pivotal-jbarrett", "createdAt": "2020-08-18T23:12:50Z", "path": "geode-core/src/test/java/org/apache/geode/internal/net/SocketCreatorJUnitTest.java", "diffHunk": "@@ -98,6 +106,65 @@ private void testBindExceptionMessageFormatting(InetAddress inetAddress) throws\n     }\n   }\n \n+  @Test\n+  public void configureSSLEngine() {\n+    SSLConfig config = new SSLConfig.Builder().setCiphers(\"someCipher\").setEnabled(true)\n+        .setProtocols(\"someProtocol\").setRequireAuth(true).setKeystore(\"someKeystore.jks\")\n+        .setAlias(\"someAlias\").setTruststore(\"someTruststore.jks\")\n+        .setEndpointIdentificationEnabled(true).build();\n+    SSLContext context = mock(SSLContext.class);\n+    SSLParameters parameters = mock(SSLParameters.class);\n+\n+    SocketCreator socketCreator = new SocketCreator(config, context);\n+\n+    SSLEngine engine = mock(SSLEngine.class);\n+    when(engine.getSSLParameters()).thenReturn(parameters);\n+\n+    final Object[] setProtocols = new Object[1];\n+    doAnswer((Answer<Void>) invocation -> {\n+      setProtocols[0] = invocation.getArgument(0);\n+      return null;\n+    }).when(engine).setEnabledProtocols(any(String[].class));\n+\n+    final Object[] setCiphers = new Object[1];\n+    doAnswer((Answer<Void>) invocation -> {\n+      setCiphers[0] = invocation.getArgument(0);\n+      return null;\n+    }).when(engine).setEnabledCipherSuites(any(String[].class));\n+\n+    socketCreator.configureSSLEngine(engine, \"somehost\", 12345, true);\n+\n+    verify(engine).setUseClientMode(isA(Boolean.class));", "originalCommit": "ec4638eca502bea68894d5b6e694a0a88a6e5721", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzExNzc5Ng==", "url": "https://github.com/apache/geode/pull/5465#discussion_r473117796", "bodyText": "I was not familiar with ArgumentCaptor.  Much simpler.", "author": "bschuchardt", "createdAt": "2020-08-19T15:29:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0MzUxNA=="}], "type": "inlineReview"}, {"oid": "c7b47b5fc3b383adbf04b87c4b82d27b9e330f83", "url": "https://github.com/apache/geode/commit/c7b47b5fc3b383adbf04b87c4b82d27b9e330f83", "message": "change test to use ArgumentCaptor - thanks Jake\\!", "committedDate": "2020-08-19T15:26:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzNTg0Ng==", "url": "https://github.com/apache/geode/pull/5465#discussion_r473135846", "body": "You will want separate captors for each of these and then assert the values.\r\n```java\r\nArgumentCaptor<String[]> enabledProtocols = ArgumentCaptor.forClass(String[].class);\r\nverify(engine).setEnabledProtocols(enabledProtocols.capture());\r\nassertThat(enabledProtocols.getValue()).containsExactly(\"someProtocol\");\r\n\r\nArgumentCaptor<String[]> enabledCipherSuites = ArgumentCaptor.forClass(String[].class);\r\nverify(engine). setEnabledCipherSuites(enabledCipherSuites.capture());\r\nassertThat(enabledCipherSuites.getValue()).containsExactly(\"someCipher\");\r\n```", "bodyText": "You will want separate captors for each of these and then assert the values.\nArgumentCaptor<String[]> enabledProtocols = ArgumentCaptor.forClass(String[].class);\nverify(engine).setEnabledProtocols(enabledProtocols.capture());\nassertThat(enabledProtocols.getValue()).containsExactly(\"someProtocol\");\n\nArgumentCaptor<String[]> enabledCipherSuites = ArgumentCaptor.forClass(String[].class);\nverify(engine). setEnabledCipherSuites(enabledCipherSuites.capture());\nassertThat(enabledCipherSuites.getValue()).containsExactly(\"someCipher\");", "bodyHTML": "<p dir=\"auto\">You will want separate captors for each of these and then assert the values.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ArgumentCaptor&lt;String[]&gt; enabledProtocols = ArgumentCaptor.forClass(String[].class);\nverify(engine).setEnabledProtocols(enabledProtocols.capture());\nassertThat(enabledProtocols.getValue()).containsExactly(&quot;someProtocol&quot;);\n\nArgumentCaptor&lt;String[]&gt; enabledCipherSuites = ArgumentCaptor.forClass(String[].class);\nverify(engine). setEnabledCipherSuites(enabledCipherSuites.capture());\nassertThat(enabledCipherSuites.getValue()).containsExactly(&quot;someCipher&quot;);\n\"><pre><span class=\"pl-k\">ArgumentCaptor&lt;<span class=\"pl-k\">String</span>[]&gt;</span> enabledProtocols <span class=\"pl-k\">=</span> <span class=\"pl-smi\">ArgumentCaptor</span><span class=\"pl-k\">.</span>forClass(<span class=\"pl-k\">String</span>[]<span class=\"pl-k\">.</span>class);\nverify(engine)<span class=\"pl-k\">.</span>setEnabledProtocols(enabledProtocols<span class=\"pl-k\">.</span>capture());\nassertThat(enabledProtocols<span class=\"pl-k\">.</span>getValue())<span class=\"pl-k\">.</span>containsExactly(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>someProtocol<span class=\"pl-pds\">\"</span></span>);\n\n<span class=\"pl-k\">ArgumentCaptor&lt;<span class=\"pl-k\">String</span>[]&gt;</span> enabledCipherSuites <span class=\"pl-k\">=</span> <span class=\"pl-smi\">ArgumentCaptor</span><span class=\"pl-k\">.</span>forClass(<span class=\"pl-k\">String</span>[]<span class=\"pl-k\">.</span>class);\nverify(engine)<span class=\"pl-c1\">.</span> setEnabledCipherSuites(enabledCipherSuites<span class=\"pl-k\">.</span>capture());\nassertThat(enabledCipherSuites<span class=\"pl-k\">.</span>getValue())<span class=\"pl-k\">.</span>containsExactly(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>someCipher<span class=\"pl-pds\">\"</span></span>);</pre></div>", "author": "pivotal-jbarrett", "createdAt": "2020-08-19T15:55:26Z", "path": "geode-core/src/test/java/org/apache/geode/internal/net/SocketCreatorJUnitTest.java", "diffHunk": "@@ -120,28 +117,14 @@ public void configureSSLEngine() {\n     SSLEngine engine = mock(SSLEngine.class);\n     when(engine.getSSLParameters()).thenReturn(parameters);\n \n-    final Object[] setProtocols = new Object[1];\n-    doAnswer((Answer<Void>) invocation -> {\n-      setProtocols[0] = invocation.getArgument(0);\n-      return null;\n-    }).when(engine).setEnabledProtocols(any(String[].class));\n-\n-    final Object[] setCiphers = new Object[1];\n-    doAnswer((Answer<Void>) invocation -> {\n-      setCiphers[0] = invocation.getArgument(0);\n-      return null;\n-    }).when(engine).setEnabledCipherSuites(any(String[].class));\n+    ArgumentCaptor<String[]> engineArgumentCaptor = ArgumentCaptor.forClass(String[].class);\n \n     socketCreator.configureSSLEngine(engine, \"somehost\", 12345, true);\n \n     verify(engine).setUseClientMode(isA(Boolean.class));\n     verify(engine).setSSLParameters(parameters);\n-    verify(engine).setEnabledCipherSuites(isA(String[].class));\n-    assertThat(setProtocols[0]).isNotNull();\n-    String[] protocolStrings = (String[]) setProtocols[0];\n-    assertThat(protocolStrings[0].equals(\"someProtocol\"));\n-    String[] cipherStrings = (String[]) setCiphers[0];\n-    assertThat(cipherStrings[0].equals(\"someCipher\"));\n+    verify(engine).setEnabledProtocols(engineArgumentCaptor.capture());\n+    verify(engine).setEnabledCipherSuites(engineArgumentCaptor.capture());", "originalCommit": "c7b47b5fc3b383adbf04b87c4b82d27b9e330f83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5MjA0NA==", "url": "https://github.com/apache/geode/pull/5465#discussion_r473192044", "bodyText": "The captor in this commit does capture both String[] values.  The first capture() returns the String[] with \"someProtocol\" and the second returns the String[] with \"someCipher\".  I'll add the content checks.", "author": "bschuchardt", "createdAt": "2020-08-19T17:08:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzNTg0Ng=="}], "type": "inlineReview"}, {"oid": "318e4a36f963b1d964a71068c168b9efc26b8e72", "url": "https://github.com/apache/geode/commit/318e4a36f963b1d964a71068c168b9efc26b8e72", "message": "check captured argument content", "committedDate": "2020-08-19T17:19:53Z", "type": "commit"}]}