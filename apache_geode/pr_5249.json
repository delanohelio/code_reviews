{"pr_number": 5249, "pr_title": "GEODE-8272 Refactor Restore Redundancy Command", "pr_author": "mhansonp", "pr_createdAt": "2020-06-15T06:48:11Z", "pr_url": "https://github.com/apache/geode/pull/5249", "timeline": [{"oid": "3e8c45b178b3a9ba1979eb25fb9315ff2e1b5fb1", "url": "https://github.com/apache/geode/commit/3e8c45b178b3a9ba1979eb25fb9315ff2e1b5fb1", "message": "reimplement RedundancyCommand with OperationPerformer", "committedDate": "2020-06-15T17:37:59Z", "type": "commit"}, {"oid": "3e8c45b178b3a9ba1979eb25fb9315ff2e1b5fb1", "url": "https://github.com/apache/geode/commit/3e8c45b178b3a9ba1979eb25fb9315ff2e1b5fb1", "message": "reimplement RedundancyCommand with OperationPerformer", "committedDate": "2020-06-15T17:37:59Z", "type": "forcePushed"}, {"oid": "f5fb8221b49e2d55ab8e476c6e5ba52e5b46558b", "url": "https://github.com/apache/geode/commit/f5fb8221b49e2d55ab8e476c6e5ba52e5b46558b", "message": "dealing serializer restrictions", "committedDate": "2020-06-15T22:51:48Z", "type": "commit"}, {"oid": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "url": "https://github.com/apache/geode/commit/ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "message": "cleaning up one last sanctionedDataSerializables.txt file.", "committedDate": "2020-06-16T00:52:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3MzI2OQ==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441173269", "body": "Variable names should start with lowercase: `dsMember`", "bodyText": "Variable names should start with lowercase: dsMember", "bodyHTML": "<p dir=\"auto\">Variable names should start with lowercase: <code>dsMember</code></p>", "author": "kirklund", "createdAt": "2020-06-16T22:17:04Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/RebalanceOperationPerformer.java", "diffHunk": "@@ -189,16 +189,16 @@ public static DistributedMember getAssociatedMembers(String region, final Intern\n \n     String[] membersName = bean.getMembers();\n     Set<DistributedMember> dsMembers = ManagementUtils.getAllMembers(cache);\n-    Iterator it = dsMembers.iterator();\n+    Iterator<DistributedMember> it = dsMembers.iterator();\n \n     boolean matchFound = false;\n \n     if (membersName.length > 1) {\n       while (it.hasNext() && !matchFound) {\n-        DistributedMember dsmember = (DistributedMember) it.next();\n+        DistributedMember DSMember = it.next();", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3NDI4Mw==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441174283", "body": "Using import static for all of these Mockito methods should improve readability a little.", "bodyText": "Using import static for all of these Mockito methods should improve readability a little.", "bodyHTML": "<p dir=\"auto\">Using import static for all of these Mockito methods should improve readability a little.</p>", "author": "kirklund", "createdAt": "2020-06-16T22:19:34Z", "path": "geode-core/src/test/java/org/apache/geode/management/internal/operation/RestoreRedundancyPerformerTest.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.management.internal.operation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import org.apache.geode.cache.DataPolicy;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.distributed.internal.DistributionManager;\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.cache.InternalCacheForClientAccess;\n+import org.apache.geode.internal.serialization.Version;\n+import org.apache.geode.management.DistributedRegionMXBean;\n+import org.apache.geode.management.DistributedSystemMXBean;\n+import org.apache.geode.management.internal.BaseManagementService;\n+import org.apache.geode.management.internal.functions.RestoreRedundancyFunction;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RegionRedundancyStatus;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+public class RestoreRedundancyPerformerTest {\n+\n+  public static final String DS_MEMBER_NAME_SERVER1 = \"server1\";\n+  public static final String DS_MEMBER_NAME_SERVER2 = \"server2\";\n+\n+  public static final String REGION_1 = \"region1\";\n+  public static final String BOGUS_PASS_MESSAGE = \"Bogus pass message\";\n+  private InternalDistributedMember server1;\n+  private InternalDistributedMember server2;\n+  private InternalCacheForClientAccess internalCacheForClientAccess;\n+  private RestoreRedundancyPerformer restoreRedundancyPerformer;\n+\n+  @Before\n+  public void setup() {\n+    BaseManagementService baseManagementService = mock(BaseManagementService.class);\n+    DistributedSystemMXBean distributedSystemMXBean = mock(DistributedSystemMXBean.class);\n+    DistributedRegionMXBean distributedRegionMXBean = mock(DistributedRegionMXBean.class);\n+    server1 = mock(InternalDistributedMember.class);\n+    server2 = mock(InternalDistributedMember.class);\n+    internalCacheForClientAccess = mock(InternalCacheForClientAccess.class);\n+    InternalDistributedSystem internalDistributedSystem = mock(InternalDistributedSystem.class);\n+    DistributionManager distributionManager = mock(DistributionManager.class);\n+    when(baseManagementService.getDistributedSystemMXBean()).thenReturn(distributedSystemMXBean);\n+    when(baseManagementService.getDistributedRegionMXBean(Mockito.anyString()))\n+        .thenReturn(distributedRegionMXBean);\n+    when(distributedRegionMXBean.getRegionType()).thenReturn(String.valueOf(DataPolicy.PARTITION));\n+    when(distributedRegionMXBean.getMembers())\n+        .thenReturn(new String[] {DS_MEMBER_NAME_SERVER1, DS_MEMBER_NAME_SERVER2});\n+    when(server1.getName()).thenReturn(DS_MEMBER_NAME_SERVER1);\n+    when(server2.getName()).thenReturn(DS_MEMBER_NAME_SERVER2);\n+    when(distributedSystemMXBean.listRegions()).thenReturn(new String[] {REGION_1});\n+    when(internalDistributedSystem.getDistributionManager())\n+        .thenReturn(distributionManager);\n+    Set<InternalDistributedMember> dsMembers = new HashSet<>();\n+    dsMembers.add(server1);\n+    dsMembers.add(server2);\n+    when(distributionManager.getDistributionManagerIds()).thenReturn(dsMembers);\n+    BaseManagementService.setManagementService(internalCacheForClientAccess, baseManagementService);\n+\n+    when(((InternalCache) internalCacheForClientAccess).getCacheForProcessingClientRequests())\n+        .thenReturn(internalCacheForClientAccess);\n+    when(internalCacheForClientAccess.getInternalDistributedSystem())\n+        .thenReturn(internalDistributedSystem);\n+\n+    when(server1.getVersionObject())\n+        .thenReturn(RestoreRedundancyPerformer.ADDED_VERSION);\n+    when(server2.getVersionObject())\n+        .thenReturn(RestoreRedundancyPerformer.ADDED_VERSION);\n+\n+    restoreRedundancyPerformer = new RestoreRedundancyPerformer();\n+  }\n+\n+  @Test\n+  public void executePerformWithIncludeRegionsSuccess() {\n+    // Setup a request to restore redundancy for region 1\n+    RestoreRedundancyRequest restoreRedundancyRequest = new RestoreRedundancyRequest();\n+    restoreRedundancyRequest.setReassignPrimaries(true);\n+    restoreRedundancyRequest.setIncludeRegions(Collections.singletonList(REGION_1));\n+    restoreRedundancyRequest.setExcludeRegions(new ArrayList<>());\n+\n+\n+    // Setup a successful response from executeFunctionAndGetFunctionResult\n+    RestoreRedundancyResultsImpl restoreRedundancyResultsImpl = new RestoreRedundancyResultsImpl();\n+    restoreRedundancyResultsImpl.setStatusMessage(BOGUS_PASS_MESSAGE);\n+    restoreRedundancyResultsImpl.setSuccess(true);\n+\n+    Map<String, RegionRedundancyStatus> satisfied =\n+        restoreRedundancyResultsImpl.getSatisfiedRedundancyRegionResults();\n+\n+    // Create and add the RegionRedundancyStatus to the response\n+    RegionRedundancyStatusImpl regionRedundancyStatusImpl = new RegionRedundancyStatusImpl(1, 1,\n+        REGION_1, RegionRedundancyStatus.RedundancyStatus.SATISFIED);\n+\n+    satisfied.put(REGION_1, regionRedundancyStatusImpl);\n+\n+    // intercept the executeFunctionAndGetFunctionResult method call on the performer\n+    RestoreRedundancyPerformer spyRedundancyPerformer = Mockito.spy(restoreRedundancyPerformer);\n+    Mockito.doReturn(restoreRedundancyResultsImpl).when(spyRedundancyPerformer)\n+        .executeFunctionAndGetFunctionResult(Mockito.any(RestoreRedundancyFunction.class),\n+            Mockito.any(Object.class),\n+            Mockito.any(\n+                DistributedMember.class));\n+\n+    // invoke perform\n+    RestoreRedundancyResults restoreRedundancyResult = spyRedundancyPerformer\n+        .perform(internalCacheForClientAccess, restoreRedundancyRequest, false);\n+\n+    assertThat(restoreRedundancyResult.getSuccess()).isTrue();\n+  }\n+\n+  @Test\n+  public void executePerformWithNoIncludeRegionsSuccess() {\n+    // Setup a request to restore redundancy for region 1\n+    RestoreRedundancyRequest restoreRedundancyRequest = new RestoreRedundancyRequest();\n+    restoreRedundancyRequest.setReassignPrimaries(true);\n+\n+\n+    // Setup a successful response from executeFunctionAndGetFunctionResult\n+    RestoreRedundancyResultsImpl restoreRedundancyResultsImpl = new RestoreRedundancyResultsImpl();\n+    restoreRedundancyResultsImpl.setStatusMessage(BOGUS_PASS_MESSAGE);\n+    restoreRedundancyResultsImpl.setSuccess(true);\n+\n+    Map<String, RegionRedundancyStatus> satisfied =\n+        restoreRedundancyResultsImpl.getSatisfiedRedundancyRegionResults();\n+\n+    // Create and add the RegionRedundancyStatus to the response\n+    RegionRedundancyStatusImpl regionRedundancyStatusImpl = new RegionRedundancyStatusImpl(1, 1,\n+        REGION_1, RegionRedundancyStatus.RedundancyStatus.SATISFIED);\n+\n+    satisfied.put(REGION_1, regionRedundancyStatusImpl);\n+\n+    // intercept the executeFunctionAndGetFunctionResult method call on the performer\n+    RestoreRedundancyPerformer spyRedundancyPerformer = Mockito.spy(restoreRedundancyPerformer);\n+    Mockito.doReturn(restoreRedundancyResultsImpl).when(spyRedundancyPerformer)\n+        .executeFunctionAndGetFunctionResult(Mockito.any(RestoreRedundancyFunction.class),\n+            Mockito.any(Object.class),", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3NTY4OQ==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441175689", "body": "Don't forget to add a paragraph to the javadocs about this API being experimental. See other classes that use `@Experimental` for examples.", "bodyText": "Don't forget to add a paragraph to the javadocs about this API being experimental. See other classes that use @Experimental for examples.", "bodyHTML": "<p dir=\"auto\">Don't forget to add a paragraph to the javadocs about this API being experimental. See other classes that use <code>@Experimental</code> for examples.</p>", "author": "kirklund", "createdAt": "2020-06-16T22:23:22Z", "path": "geode-management/src/main/java/org/apache/geode/management/operation/RestoreRedundancyRequest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.operation;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+import org.apache.geode.annotations.Experimental;\n+import org.apache.geode.management.api.ClusterManagementOperation;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+/**\n+ * Defines a distributed system request to optimize bucket allocation across members.\n+ */\n+@Experimental", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3NzMyMA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441177320", "body": "Since this is a product class, you should have IntelliJ generate the serialVersionUID for you. I think you'll need the corresponding inspection enabled: https://stackoverflow.com/questions/24573643/how-to-generate-serial-version-uid-in-intellij\r\n\r\nIt's theoretically ok to have it set to `1L` but the generated number is more correct.", "bodyText": "Since this is a product class, you should have IntelliJ generate the serialVersionUID for you. I think you'll need the corresponding inspection enabled: https://stackoverflow.com/questions/24573643/how-to-generate-serial-version-uid-in-intellij\nIt's theoretically ok to have it set to 1L but the generated number is more correct.", "bodyHTML": "<p dir=\"auto\">Since this is a product class, you should have IntelliJ generate the serialVersionUID for you. I think you'll need the corresponding inspection enabled: <a href=\"https://stackoverflow.com/questions/24573643/how-to-generate-serial-version-uid-in-intellij\" rel=\"nofollow\">https://stackoverflow.com/questions/24573643/how-to-generate-serial-version-uid-in-intellij</a></p>\n<p dir=\"auto\">It's theoretically ok to have it set to <code>1L</code> but the generated number is more correct.</p>", "author": "kirklund", "createdAt": "2020-06-16T22:28:03Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/functions/RestoreRedundancyFunction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.functions;\n+\n+import static org.apache.geode.management.runtime.RestoreRedundancyResults.Status.ERROR;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.Logger;\n+\n+import org.apache.geode.cache.control.RestoreRedundancyOperation;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.internal.cache.control.SerializableRestoreRedundancyResultsImpl;\n+import org.apache.geode.internal.cache.execute.InternalFunction;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.management.internal.operation.RestoreRedundancyResultsImpl;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+\n+\n+public class RestoreRedundancyFunction implements InternalFunction<Object[]> {\n+  private static final Logger logger = LogService.getLogger();\n+\n+  public static final String ID = RestoreRedundancyFunction.class.getName();\n+\n+\n+  private static final long serialVersionUID = 1L;", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3NzQ5Mg==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441177492", "body": "Remove initials.", "bodyText": "Remove initials.", "bodyHTML": "<p dir=\"auto\">Remove initials.</p>", "author": "kirklund", "createdAt": "2020-06-16T22:28:27Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/functions/RestoreRedundancyFunction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.functions;\n+\n+import static org.apache.geode.management.runtime.RestoreRedundancyResults.Status.ERROR;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.Logger;\n+\n+import org.apache.geode.cache.control.RestoreRedundancyOperation;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.internal.cache.control.SerializableRestoreRedundancyResultsImpl;\n+import org.apache.geode.internal.cache.execute.InternalFunction;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.management.internal.operation.RestoreRedundancyResultsImpl;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+\n+\n+public class RestoreRedundancyFunction implements InternalFunction<Object[]> {\n+  private static final Logger logger = LogService.getLogger();\n+\n+  public static final String ID = RestoreRedundancyFunction.class.getName();\n+\n+\n+  private static final long serialVersionUID = 1L;\n+\n+  @Override\n+  // this would return the RestoreRedundancyResults if successful,\n+  // it will return an exception to the caller if status is failure or any exception happens\n+  public void execute(FunctionContext<Object[]> context) {\n+    Object[] arguments = context.getArguments();\n+    RestoreRedundancyRequest request = (RestoreRedundancyRequest) arguments[0];\n+    boolean isStatusCommand = (boolean) arguments[1];\n+    RestoreRedundancyOperation redundancyOperation =\n+        context.getCache().getResourceManager().createRestoreRedundancyOperation();\n+    Set<String> includeRegionsSet = null;\n+    if (request.getIncludeRegions() != null) {\n+      includeRegionsSet = new HashSet<>(request.getIncludeRegions());\n+    }\n+    Set<String> excludeRegionsSet = null;\n+    if (request.getExcludeRegions() != null) {\n+      excludeRegionsSet = new HashSet<>(request.getExcludeRegions());\n+    }\n+    redundancyOperation.includeRegions(includeRegionsSet);\n+    redundancyOperation.excludeRegions(excludeRegionsSet);\n+    RestoreRedundancyResultsImpl results;\n+\n+    try {\n+      if (isStatusCommand) {\n+        results = (RestoreRedundancyResultsImpl) redundancyOperation.redundancyStatus();\n+      } else {\n+        redundancyOperation.shouldReassignPrimaries(request.getReassignPrimaries());\n+        results = (RestoreRedundancyResultsImpl) redundancyOperation.start().join();\n+      }\n+      if (results.getRegionOperationStatus().equals(ERROR)) {\n+        Exception e = new Exception(results.getRegionOperationMessage());\n+        throw e;\n+      }\n+      results.setSuccess(true);\n+      results.setStatusMessage(\"Success\"); // MLH change this", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3OTU1NQ==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441179555", "body": "This is ok either way, but you could combine these if-blocks if you want to:\r\n```\r\nif (regionName.startsWith(SEPARATOR) && !excludedRegion.startsWith(SEPARATOR)) {\r\n  excludedRegion = SEPARATOR + excludedRegion;\r\n}\r\n```\r\nAnd the next block:\r\n```\r\nif (excludedRegion.startsWith(SEPARATOR) && !regionName.startsWith(SEPARATOR)) {\r\n  regionName = SEPARATOR + regionName;\r\n}\r\n```", "bodyText": "This is ok either way, but you could combine these if-blocks if you want to:\nif (regionName.startsWith(SEPARATOR) && !excludedRegion.startsWith(SEPARATOR)) {\n  excludedRegion = SEPARATOR + excludedRegion;\n}\n\nAnd the next block:\nif (excludedRegion.startsWith(SEPARATOR) && !regionName.startsWith(SEPARATOR)) {\n  regionName = SEPARATOR + regionName;\n}", "bodyHTML": "<p dir=\"auto\">This is ok either way, but you could combine these if-blocks if you want to:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (regionName.startsWith(SEPARATOR) &amp;&amp; !excludedRegion.startsWith(SEPARATOR)) {\n  excludedRegion = SEPARATOR + excludedRegion;\n}\n\"><pre><code>if (regionName.startsWith(SEPARATOR) &amp;&amp; !excludedRegion.startsWith(SEPARATOR)) {\n  excludedRegion = SEPARATOR + excludedRegion;\n}\n</code></pre></div>\n<p dir=\"auto\">And the next block:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (excludedRegion.startsWith(SEPARATOR) &amp;&amp; !regionName.startsWith(SEPARATOR)) {\n  regionName = SEPARATOR + regionName;\n}\n\"><pre><code>if (excludedRegion.startsWith(SEPARATOR) &amp;&amp; !regionName.startsWith(SEPARATOR)) {\n  regionName = SEPARATOR + regionName;\n}\n</code></pre></div>", "author": "kirklund", "createdAt": "2020-06-16T22:34:07Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/RebalanceOperationPerformer.java", "diffHunk": "@@ -219,24 +219,26 @@ public static DistributedMember getAssociatedMembers(String region, final Intern\n     for (String regionName : listDSRegions) {\n       // check for excluded regions\n       boolean excludedRegionMatch = false;\n-      for (String aListExcludedRegion : listExcludedRegion) {\n-        // this is needed since region name may start with / or without it\n-        // also\n-        String excludedRegion = aListExcludedRegion.trim();\n-        if (regionName.startsWith(SEPARATOR)) {\n-          if (!excludedRegion.startsWith(SEPARATOR)) {\n-            excludedRegion = SEPARATOR + excludedRegion;\n+      if (listExcludedRegion != null) {\n+        for (String aListExcludedRegion : listExcludedRegion) {\n+          // this is needed since region name may start with / or without it\n+          // also\n+          String excludedRegion = aListExcludedRegion.trim();\n+          if (regionName.startsWith(SEPARATOR)) {", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3OTg1NQ==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441179855", "body": "Change to:\r\n```\r\nif (!viableMembers.isEmpty()) {\r\n```", "bodyText": "Change to:\nif (!viableMembers.isEmpty()) {", "bodyHTML": "<p dir=\"auto\">Change to:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (!viableMembers.isEmpty()) {\n\"><pre><code>if (!viableMembers.isEmpty()) {\n</code></pre></div>", "author": "kirklund", "createdAt": "2020-06-16T22:34:59Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/RestoreRedundancyPerformer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management.internal.operation;\n+\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.annotations.Immutable;\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.ResultCollector;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.serialization.Version;\n+import org.apache.geode.management.ManagementService;\n+import org.apache.geode.management.internal.functions.RestoreRedundancyFunction;\n+import org.apache.geode.management.internal.util.ManagementUtils;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+public class RestoreRedundancyPerformer\n+    implements OperationPerformer<RestoreRedundancyRequest, RestoreRedundancyResults> {\n+  @Immutable\n+  public static final Version ADDED_VERSION = Version.GEODE_1_13_0;\n+  public static final String NO_MEMBERS_WITH_VERSION_FOR_REGION =\n+      \"No members with a version greater than or equal to %s were found for region %s\";\n+  public static final String EXCEPTION_MEMBER_MESSAGE = \"Exception occurred on member %s: %s\";\n+\n+  @Override\n+  public RestoreRedundancyResults perform(Cache cache, RestoreRedundancyRequest operation) {\n+    return perform(cache, operation, false);\n+  }\n+\n+  public RestoreRedundancyResults perform(Cache cache, RestoreRedundancyRequest operation,\n+      boolean checkStatus) {\n+    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n+    List<String> includedRegionsWithNoMembers = new ArrayList<>();\n+\n+    populateLists(membersForEachRegion, includedRegionsWithNoMembers, operation.getIncludeRegions(),\n+        operation.getExcludeRegions(), (InternalCache) cache);\n+\n+    for (RebalanceOperationPerformer.MemberPRInfo prInfo : membersForEachRegion) {\n+      // Filter out any members using older versions of Geode\n+      List<DistributedMember> viableMembers = filterViableMembers(prInfo);\n+\n+      if (viableMembers.size() != 0) {", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4MDA1Mw==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441180053", "bodyText": "In theory the implementation could optimize isEmpty() to not require size().", "author": "kirklund", "createdAt": "2020-06-16T22:35:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3OTg1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4MjM0Mw==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441182343", "body": "Maybe remove all of these unnecessary `this.` qualifiers? They show up as unnecessary in my IDE.", "bodyText": "Maybe remove all of these unnecessary this. qualifiers? They show up as unnecessary in my IDE.", "bodyHTML": "<p dir=\"auto\">Maybe remove all of these unnecessary <code>this.</code> qualifiers? They show up as unnecessary in my IDE.</p>", "author": "kirklund", "createdAt": "2020-06-16T22:42:13Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/SerializableRestoreRedundancyResultsImpl.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.control;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+\n+import org.apache.geode.DataSerializer;\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+import org.apache.geode.internal.serialization.DataSerializableFixedID;\n+import org.apache.geode.internal.serialization.DeserializationContext;\n+import org.apache.geode.internal.serialization.SerializationContext;\n+import org.apache.geode.internal.serialization.Version;\n+import org.apache.geode.management.internal.operation.RestoreRedundancyResultsImpl;\n+\n+/**\n+ * result object produced by the servers. These need to be transferred to the locators\n+ * via functions so they need to be DataSerializable\n+ */\n+public class SerializableRestoreRedundancyResultsImpl\n+    extends RestoreRedundancyResultsImpl\n+    implements DataSerializableFixedID {\n+\n+  public void addPrimaryReassignmentDetails(PartitionRebalanceInfo details) {\n+    this.totalPrimaryTransfersCompleted += details.getPrimaryTransfersCompleted();\n+    this.totalPrimaryTransferTime =\n+        this.totalPrimaryTransferTime.plusMillis(details.getPrimaryTransferTime());\n+  }\n+\n+  @Override\n+  public int getDSFID() {\n+    return RESTORE_REDUNDANCY_RESULTS;\n+  }\n+\n+  @Override\n+  public void toData(DataOutput out, SerializationContext context) throws IOException {\n+    DataSerializer.writeHashMap(satisfiedRedundancyRegions, out);\n+    DataSerializer.writeHashMap(underRedundancyRegions, out);\n+    DataSerializer.writeHashMap(zeroRedundancyRegions, out);\n+    out.writeInt(totalPrimaryTransfersCompleted);\n+    DataSerializer.writeObject(totalPrimaryTransferTime, out);\n+    out.writeBoolean(success);\n+    DataSerializer.writeString(statusMessage, out);\n+  }\n+\n+  @Override\n+  public void fromData(DataInput in, DeserializationContext context)\n+      throws IOException, ClassNotFoundException {\n+    this.satisfiedRedundancyRegions = DataSerializer.readHashMap(in);", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4MzMwMQ==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441183301", "body": "Doesn't need the `RestoreRedundancyFunction.` qualifier.", "bodyText": "Doesn't need the RestoreRedundancyFunction. qualifier.", "bodyHTML": "<p dir=\"auto\">Doesn't need the <code>RestoreRedundancyFunction.</code> qualifier.</p>", "author": "kirklund", "createdAt": "2020-06-16T22:45:09Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/functions/RestoreRedundancyFunction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.functions;\n+\n+import static org.apache.geode.management.runtime.RestoreRedundancyResults.Status.ERROR;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.Logger;\n+\n+import org.apache.geode.cache.control.RestoreRedundancyOperation;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.internal.cache.control.SerializableRestoreRedundancyResultsImpl;\n+import org.apache.geode.internal.cache.execute.InternalFunction;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.management.internal.operation.RestoreRedundancyResultsImpl;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+\n+\n+public class RestoreRedundancyFunction implements InternalFunction<Object[]> {\n+  private static final Logger logger = LogService.getLogger();\n+\n+  public static final String ID = RestoreRedundancyFunction.class.getName();\n+\n+\n+  private static final long serialVersionUID = 1L;\n+\n+  @Override\n+  // this would return the RestoreRedundancyResults if successful,\n+  // it will return an exception to the caller if status is failure or any exception happens\n+  public void execute(FunctionContext<Object[]> context) {\n+    Object[] arguments = context.getArguments();\n+    RestoreRedundancyRequest request = (RestoreRedundancyRequest) arguments[0];\n+    boolean isStatusCommand = (boolean) arguments[1];\n+    RestoreRedundancyOperation redundancyOperation =\n+        context.getCache().getResourceManager().createRestoreRedundancyOperation();\n+    Set<String> includeRegionsSet = null;\n+    if (request.getIncludeRegions() != null) {\n+      includeRegionsSet = new HashSet<>(request.getIncludeRegions());\n+    }\n+    Set<String> excludeRegionsSet = null;\n+    if (request.getExcludeRegions() != null) {\n+      excludeRegionsSet = new HashSet<>(request.getExcludeRegions());\n+    }\n+    redundancyOperation.includeRegions(includeRegionsSet);\n+    redundancyOperation.excludeRegions(excludeRegionsSet);\n+    RestoreRedundancyResultsImpl results;\n+\n+    try {\n+      if (isStatusCommand) {\n+        results = (RestoreRedundancyResultsImpl) redundancyOperation.redundancyStatus();\n+      } else {\n+        redundancyOperation.shouldReassignPrimaries(request.getReassignPrimaries());\n+        results = (RestoreRedundancyResultsImpl) redundancyOperation.start().join();\n+      }\n+      if (results.getRegionOperationStatus().equals(ERROR)) {\n+        Exception e = new Exception(results.getRegionOperationMessage());\n+        throw e;\n+      }\n+      results.setSuccess(true);\n+      results.setStatusMessage(\"Success\"); // MLH change this\n+    } catch (Exception e) {\n+      results =\n+          new SerializableRestoreRedundancyResultsImpl();\n+      results.setSuccess(false);\n+      results.setStatusMessage(e.getMessage());\n+    }\n+    context.getResultSender().lastResult(results);\n+  }\n+\n+  @Override\n+  public String getId() {\n+    return RestoreRedundancyFunction.ID;", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4MzgwOA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441183808", "body": "I would use a subclass of Exception and inline throwing it:\r\n```\r\nthrow new IllegalStateException(results.getRegionOperationMessage());\r\n```", "bodyText": "I would use a subclass of Exception and inline throwing it:\nthrow new IllegalStateException(results.getRegionOperationMessage());", "bodyHTML": "<p dir=\"auto\">I would use a subclass of Exception and inline throwing it:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"throw new IllegalStateException(results.getRegionOperationMessage());\n\"><pre><code>throw new IllegalStateException(results.getRegionOperationMessage());\n</code></pre></div>", "author": "kirklund", "createdAt": "2020-06-16T22:46:36Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/functions/RestoreRedundancyFunction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.functions;\n+\n+import static org.apache.geode.management.runtime.RestoreRedundancyResults.Status.ERROR;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.Logger;\n+\n+import org.apache.geode.cache.control.RestoreRedundancyOperation;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.internal.cache.control.SerializableRestoreRedundancyResultsImpl;\n+import org.apache.geode.internal.cache.execute.InternalFunction;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.management.internal.operation.RestoreRedundancyResultsImpl;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+\n+\n+public class RestoreRedundancyFunction implements InternalFunction<Object[]> {\n+  private static final Logger logger = LogService.getLogger();\n+\n+  public static final String ID = RestoreRedundancyFunction.class.getName();\n+\n+\n+  private static final long serialVersionUID = 1L;\n+\n+  @Override\n+  // this would return the RestoreRedundancyResults if successful,\n+  // it will return an exception to the caller if status is failure or any exception happens\n+  public void execute(FunctionContext<Object[]> context) {\n+    Object[] arguments = context.getArguments();\n+    RestoreRedundancyRequest request = (RestoreRedundancyRequest) arguments[0];\n+    boolean isStatusCommand = (boolean) arguments[1];\n+    RestoreRedundancyOperation redundancyOperation =\n+        context.getCache().getResourceManager().createRestoreRedundancyOperation();\n+    Set<String> includeRegionsSet = null;\n+    if (request.getIncludeRegions() != null) {\n+      includeRegionsSet = new HashSet<>(request.getIncludeRegions());\n+    }\n+    Set<String> excludeRegionsSet = null;\n+    if (request.getExcludeRegions() != null) {\n+      excludeRegionsSet = new HashSet<>(request.getExcludeRegions());\n+    }\n+    redundancyOperation.includeRegions(includeRegionsSet);\n+    redundancyOperation.excludeRegions(excludeRegionsSet);\n+    RestoreRedundancyResultsImpl results;\n+\n+    try {\n+      if (isStatusCommand) {\n+        results = (RestoreRedundancyResultsImpl) redundancyOperation.redundancyStatus();\n+      } else {\n+        redundancyOperation.shouldReassignPrimaries(request.getReassignPrimaries());\n+        results = (RestoreRedundancyResultsImpl) redundancyOperation.start().join();\n+      }\n+      if (results.getRegionOperationStatus().equals(ERROR)) {\n+        Exception e = new Exception(results.getRegionOperationMessage());\n+        throw e;", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4NDEyNw==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441184127", "body": "Delete `// also`? Or finish comment?", "bodyText": "Delete // also? Or finish comment?", "bodyHTML": "<p dir=\"auto\">Delete <code>// also</code>? Or finish comment?</p>", "author": "kirklund", "createdAt": "2020-06-16T22:47:33Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/RebalanceOperationPerformer.java", "diffHunk": "@@ -219,24 +219,26 @@ public static DistributedMember getAssociatedMembers(String region, final Intern\n     for (String regionName : listDSRegions) {\n       // check for excluded regions\n       boolean excludedRegionMatch = false;\n-      for (String aListExcludedRegion : listExcludedRegion) {\n-        // this is needed since region name may start with / or without it\n-        // also\n-        String excludedRegion = aListExcludedRegion.trim();\n-        if (regionName.startsWith(SEPARATOR)) {\n-          if (!excludedRegion.startsWith(SEPARATOR)) {\n-            excludedRegion = SEPARATOR + excludedRegion;\n+      if (listExcludedRegion != null) {\n+        for (String aListExcludedRegion : listExcludedRegion) {\n+          // this is needed since region name may start with / or without it\n+          // also", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4NTMxMw==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441185313", "body": "Visibility on the constants is public when they don't need to be.\r\n\r\nADDED_VERSION should be package-private (no qualifier) and add the annotation `@VisibleForTesting`:\r\n```\r\n@Immutable\r\n@VisibleForTesting\r\nstatic final Version ADDED_VERSION = Version.GEODE_1_13_0;\r\n```\r\nNO_MEMBERS_WITH_VERSION_FOR_REGION and EXCEPTION_MEMBER_MESSAGE should be private until something outside the package needs to reference them.", "bodyText": "Visibility on the constants is public when they don't need to be.\nADDED_VERSION should be package-private (no qualifier) and add the annotation @VisibleForTesting:\n@Immutable\n@VisibleForTesting\nstatic final Version ADDED_VERSION = Version.GEODE_1_13_0;\n\nNO_MEMBERS_WITH_VERSION_FOR_REGION and EXCEPTION_MEMBER_MESSAGE should be private until something outside the package needs to reference them.", "bodyHTML": "<p dir=\"auto\">Visibility on the constants is public when they don't need to be.</p>\n<p dir=\"auto\">ADDED_VERSION should be package-private (no qualifier) and add the annotation <code>@VisibleForTesting</code>:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Immutable\n@VisibleForTesting\nstatic final Version ADDED_VERSION = Version.GEODE_1_13_0;\n\"><pre><code>@Immutable\n@VisibleForTesting\nstatic final Version ADDED_VERSION = Version.GEODE_1_13_0;\n</code></pre></div>\n<p dir=\"auto\">NO_MEMBERS_WITH_VERSION_FOR_REGION and EXCEPTION_MEMBER_MESSAGE should be private until something outside the package needs to reference them.</p>", "author": "kirklund", "createdAt": "2020-06-16T22:51:04Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/RestoreRedundancyPerformer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management.internal.operation;\n+\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.annotations.Immutable;\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.ResultCollector;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.serialization.Version;\n+import org.apache.geode.management.ManagementService;\n+import org.apache.geode.management.internal.functions.RestoreRedundancyFunction;\n+import org.apache.geode.management.internal.util.ManagementUtils;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+public class RestoreRedundancyPerformer\n+    implements OperationPerformer<RestoreRedundancyRequest, RestoreRedundancyResults> {\n+  @Immutable\n+  public static final Version ADDED_VERSION = Version.GEODE_1_13_0;", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4NTg4OA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441185888", "body": "executeFunctionAndGetFunctionResult should be package-private (no qualifier) instead of public.", "bodyText": "executeFunctionAndGetFunctionResult should be package-private (no qualifier) instead of public.", "bodyHTML": "<p dir=\"auto\">executeFunctionAndGetFunctionResult should be package-private (no qualifier) instead of public.</p>", "author": "kirklund", "createdAt": "2020-06-16T22:52:50Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/RestoreRedundancyPerformer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management.internal.operation;\n+\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.annotations.Immutable;\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.ResultCollector;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.serialization.Version;\n+import org.apache.geode.management.ManagementService;\n+import org.apache.geode.management.internal.functions.RestoreRedundancyFunction;\n+import org.apache.geode.management.internal.util.ManagementUtils;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+public class RestoreRedundancyPerformer\n+    implements OperationPerformer<RestoreRedundancyRequest, RestoreRedundancyResults> {\n+  @Immutable\n+  public static final Version ADDED_VERSION = Version.GEODE_1_13_0;\n+  public static final String NO_MEMBERS_WITH_VERSION_FOR_REGION =\n+      \"No members with a version greater than or equal to %s were found for region %s\";\n+  public static final String EXCEPTION_MEMBER_MESSAGE = \"Exception occurred on member %s: %s\";\n+\n+  @Override\n+  public RestoreRedundancyResults perform(Cache cache, RestoreRedundancyRequest operation) {\n+    return perform(cache, operation, false);\n+  }\n+\n+  public RestoreRedundancyResults perform(Cache cache, RestoreRedundancyRequest operation,\n+      boolean checkStatus) {\n+    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n+    List<String> includedRegionsWithNoMembers = new ArrayList<>();\n+\n+    populateLists(membersForEachRegion, includedRegionsWithNoMembers, operation.getIncludeRegions(),\n+        operation.getExcludeRegions(), (InternalCache) cache);\n+\n+    for (RebalanceOperationPerformer.MemberPRInfo prInfo : membersForEachRegion) {\n+      // Filter out any members using older versions of Geode\n+      List<DistributedMember> viableMembers = filterViableMembers(prInfo);\n+\n+      if (viableMembers.size() != 0) {\n+        // Update the MemberPRInfo with the viable members\n+        prInfo.dsMemberList = viableMembers;\n+      } else {\n+        RestoreRedundancyResultsImpl results = new RestoreRedundancyResultsImpl();\n+        results.setStatusMessage(String.format(NO_MEMBERS_WITH_VERSION_FOR_REGION,\n+            ADDED_VERSION.getName(), prInfo.region));\n+        results.setSuccess(false);\n+        return results;\n+      }\n+    }\n+\n+    List<RestoreRedundancyResults> functionResults = new ArrayList<>();\n+    Object[] functionArgs = new Object[] {operation, checkStatus};\n+    List<DistributedMember> completedMembers = new ArrayList<>();\n+    for (RebalanceOperationPerformer.MemberPRInfo memberPRInfo : membersForEachRegion) {\n+      // Check to see if an earlier function execution has already targeted a member hosting this\n+      // region. If one has, there is no point sending a function for this region as it has already\n+      // had redundancy restored\n+      if (!Collections.disjoint(completedMembers, memberPRInfo.dsMemberList)) {\n+        continue;\n+      }\n+      // Try the function on the first member for this region\n+      DistributedMember targetMember = memberPRInfo.dsMemberList.get(0);\n+      RestoreRedundancyResults functionResult = executeFunctionAndGetFunctionResult(\n+          new RestoreRedundancyFunction(), functionArgs, targetMember);\n+      if (!functionResult.getSuccess()) {\n+        // Record the error and then give up\n+        RestoreRedundancyResultsImpl results = new RestoreRedundancyResultsImpl();\n+        results.setSuccess(false);\n+        String errorString =\n+            String.format(EXCEPTION_MEMBER_MESSAGE, targetMember.getName(),\n+                functionResult.getStatusMessage());\n+        results.setStatusMessage(errorString);\n+        results.setSuccess(false);\n+        return results;\n+      }\n+      functionResults.add(functionResult);\n+      completedMembers.add(targetMember);\n+    }\n+\n+    RestoreRedundancyResultsImpl finalResult = new RestoreRedundancyResultsImpl();\n+    finalResult.addIncludedRegionsWithNoMembers(includedRegionsWithNoMembers);\n+    for (RestoreRedundancyResults functionResult : functionResults) {\n+      finalResult.addRegionResults(functionResult);\n+      finalResult.setSuccess(functionResult.getSuccess());\n+      finalResult.setStatusMessage(functionResult.getStatusMessage());\n+    }\n+    return finalResult;\n+  }\n+\n+  // this returns either an Exception or RestoreRedundancyResults\n+  public RestoreRedundancyResults executeFunctionAndGetFunctionResult(Function<?> function,", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4NjIxMw==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441186213", "body": "getMembersForEachRegion can be private until you need to make it `@VisibleForTesting`. Currently there's no test using the method though.", "bodyText": "getMembersForEachRegion can be private until you need to make it @VisibleForTesting. Currently there's no test using the method though.", "bodyHTML": "<p dir=\"auto\">getMembersForEachRegion can be private until you need to make it <code>@VisibleForTesting</code>. Currently there's no test using the method though.</p>", "author": "kirklund", "createdAt": "2020-06-16T22:53:45Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/RestoreRedundancyPerformer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management.internal.operation;\n+\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.annotations.Immutable;\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.ResultCollector;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.serialization.Version;\n+import org.apache.geode.management.ManagementService;\n+import org.apache.geode.management.internal.functions.RestoreRedundancyFunction;\n+import org.apache.geode.management.internal.util.ManagementUtils;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+public class RestoreRedundancyPerformer\n+    implements OperationPerformer<RestoreRedundancyRequest, RestoreRedundancyResults> {\n+  @Immutable\n+  public static final Version ADDED_VERSION = Version.GEODE_1_13_0;\n+  public static final String NO_MEMBERS_WITH_VERSION_FOR_REGION =\n+      \"No members with a version greater than or equal to %s were found for region %s\";\n+  public static final String EXCEPTION_MEMBER_MESSAGE = \"Exception occurred on member %s: %s\";\n+\n+  @Override\n+  public RestoreRedundancyResults perform(Cache cache, RestoreRedundancyRequest operation) {\n+    return perform(cache, operation, false);\n+  }\n+\n+  public RestoreRedundancyResults perform(Cache cache, RestoreRedundancyRequest operation,\n+      boolean checkStatus) {\n+    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n+    List<String> includedRegionsWithNoMembers = new ArrayList<>();\n+\n+    populateLists(membersForEachRegion, includedRegionsWithNoMembers, operation.getIncludeRegions(),\n+        operation.getExcludeRegions(), (InternalCache) cache);\n+\n+    for (RebalanceOperationPerformer.MemberPRInfo prInfo : membersForEachRegion) {\n+      // Filter out any members using older versions of Geode\n+      List<DistributedMember> viableMembers = filterViableMembers(prInfo);\n+\n+      if (viableMembers.size() != 0) {\n+        // Update the MemberPRInfo with the viable members\n+        prInfo.dsMemberList = viableMembers;\n+      } else {\n+        RestoreRedundancyResultsImpl results = new RestoreRedundancyResultsImpl();\n+        results.setStatusMessage(String.format(NO_MEMBERS_WITH_VERSION_FOR_REGION,\n+            ADDED_VERSION.getName(), prInfo.region));\n+        results.setSuccess(false);\n+        return results;\n+      }\n+    }\n+\n+    List<RestoreRedundancyResults> functionResults = new ArrayList<>();\n+    Object[] functionArgs = new Object[] {operation, checkStatus};\n+    List<DistributedMember> completedMembers = new ArrayList<>();\n+    for (RebalanceOperationPerformer.MemberPRInfo memberPRInfo : membersForEachRegion) {\n+      // Check to see if an earlier function execution has already targeted a member hosting this\n+      // region. If one has, there is no point sending a function for this region as it has already\n+      // had redundancy restored\n+      if (!Collections.disjoint(completedMembers, memberPRInfo.dsMemberList)) {\n+        continue;\n+      }\n+      // Try the function on the first member for this region\n+      DistributedMember targetMember = memberPRInfo.dsMemberList.get(0);\n+      RestoreRedundancyResults functionResult = executeFunctionAndGetFunctionResult(\n+          new RestoreRedundancyFunction(), functionArgs, targetMember);\n+      if (!functionResult.getSuccess()) {\n+        // Record the error and then give up\n+        RestoreRedundancyResultsImpl results = new RestoreRedundancyResultsImpl();\n+        results.setSuccess(false);\n+        String errorString =\n+            String.format(EXCEPTION_MEMBER_MESSAGE, targetMember.getName(),\n+                functionResult.getStatusMessage());\n+        results.setStatusMessage(errorString);\n+        results.setSuccess(false);\n+        return results;\n+      }\n+      functionResults.add(functionResult);\n+      completedMembers.add(targetMember);\n+    }\n+\n+    RestoreRedundancyResultsImpl finalResult = new RestoreRedundancyResultsImpl();\n+    finalResult.addIncludedRegionsWithNoMembers(includedRegionsWithNoMembers);\n+    for (RestoreRedundancyResults functionResult : functionResults) {\n+      finalResult.addRegionResults(functionResult);\n+      finalResult.setSuccess(functionResult.getSuccess());\n+      finalResult.setStatusMessage(functionResult.getStatusMessage());\n+    }\n+    return finalResult;\n+  }\n+\n+  // this returns either an Exception or RestoreRedundancyResults\n+  public RestoreRedundancyResults executeFunctionAndGetFunctionResult(Function<?> function,\n+      Object args,\n+      final DistributedMember targetMember) {\n+    ResultCollector<?, ?> rc =\n+        ManagementUtils.executeFunction(function, args, Collections.singleton(targetMember));\n+    List<RestoreRedundancyResults> results = (List<RestoreRedundancyResults>) rc.getResult();\n+    return results.size() > 0 ? results.get(0) : null;\n+  }\n+\n+\n+  List<DistributedMember> filterViableMembers(\n+      RebalanceOperationPerformer.MemberPRInfo prInfo) {\n+    return prInfo.dsMemberList.stream()\n+        .map(InternalDistributedMember.class::cast)\n+        .filter(member -> member.getVersionObject().compareTo(ADDED_VERSION) >= 0)\n+        .collect(Collectors.toList());\n+  }\n+\n+  void populateLists(List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion,\n+      List<String> noMemberRegions, List<String> includeRegions, List<String> excludeRegions,\n+      InternalCache cache) {\n+    // Include all regions\n+    if (includeRegions == null) {\n+      // Exclude these regions\n+      List<RebalanceOperationPerformer.MemberPRInfo> memberRegionList =\n+          getMembersForEachRegion(cache, excludeRegions);\n+      membersForEachRegion.addAll(memberRegionList);\n+    } else {\n+      for (String regionName : includeRegions) {\n+        DistributedMember memberForRegion = getOneMemberForRegion(cache, regionName);\n+\n+        // If we did not find a member for this region name, add it to the list of regions with no\n+        // members\n+        if (memberForRegion == null) {\n+          noMemberRegions.add(regionName);\n+        } else {\n+          RebalanceOperationPerformer.MemberPRInfo memberPRInfo =\n+              new RebalanceOperationPerformer.MemberPRInfo();\n+          memberPRInfo.region = regionName;\n+          memberPRInfo.dsMemberList.add(memberForRegion);\n+          membersForEachRegion.add(memberPRInfo);\n+        }\n+      }\n+    }\n+  }\n+\n+  // Extracted for testing\n+  List<RebalanceOperationPerformer.MemberPRInfo> getMembersForEachRegion(InternalCache cache,", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4NjI2Mg==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441186262", "body": "getOneMemberForRegion can be private until you need to make it `@VisibleForTesting`. Currently there's no test using the method though.", "bodyText": "getOneMemberForRegion can be private until you need to make it @VisibleForTesting. Currently there's no test using the method though.", "bodyHTML": "<p dir=\"auto\">getOneMemberForRegion can be private until you need to make it <code>@VisibleForTesting</code>. Currently there's no test using the method though.</p>", "author": "kirklund", "createdAt": "2020-06-16T22:53:56Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/RestoreRedundancyPerformer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management.internal.operation;\n+\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.annotations.Immutable;\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.ResultCollector;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.serialization.Version;\n+import org.apache.geode.management.ManagementService;\n+import org.apache.geode.management.internal.functions.RestoreRedundancyFunction;\n+import org.apache.geode.management.internal.util.ManagementUtils;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+public class RestoreRedundancyPerformer\n+    implements OperationPerformer<RestoreRedundancyRequest, RestoreRedundancyResults> {\n+  @Immutable\n+  public static final Version ADDED_VERSION = Version.GEODE_1_13_0;\n+  public static final String NO_MEMBERS_WITH_VERSION_FOR_REGION =\n+      \"No members with a version greater than or equal to %s were found for region %s\";\n+  public static final String EXCEPTION_MEMBER_MESSAGE = \"Exception occurred on member %s: %s\";\n+\n+  @Override\n+  public RestoreRedundancyResults perform(Cache cache, RestoreRedundancyRequest operation) {\n+    return perform(cache, operation, false);\n+  }\n+\n+  public RestoreRedundancyResults perform(Cache cache, RestoreRedundancyRequest operation,\n+      boolean checkStatus) {\n+    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n+    List<String> includedRegionsWithNoMembers = new ArrayList<>();\n+\n+    populateLists(membersForEachRegion, includedRegionsWithNoMembers, operation.getIncludeRegions(),\n+        operation.getExcludeRegions(), (InternalCache) cache);\n+\n+    for (RebalanceOperationPerformer.MemberPRInfo prInfo : membersForEachRegion) {\n+      // Filter out any members using older versions of Geode\n+      List<DistributedMember> viableMembers = filterViableMembers(prInfo);\n+\n+      if (viableMembers.size() != 0) {\n+        // Update the MemberPRInfo with the viable members\n+        prInfo.dsMemberList = viableMembers;\n+      } else {\n+        RestoreRedundancyResultsImpl results = new RestoreRedundancyResultsImpl();\n+        results.setStatusMessage(String.format(NO_MEMBERS_WITH_VERSION_FOR_REGION,\n+            ADDED_VERSION.getName(), prInfo.region));\n+        results.setSuccess(false);\n+        return results;\n+      }\n+    }\n+\n+    List<RestoreRedundancyResults> functionResults = new ArrayList<>();\n+    Object[] functionArgs = new Object[] {operation, checkStatus};\n+    List<DistributedMember> completedMembers = new ArrayList<>();\n+    for (RebalanceOperationPerformer.MemberPRInfo memberPRInfo : membersForEachRegion) {\n+      // Check to see if an earlier function execution has already targeted a member hosting this\n+      // region. If one has, there is no point sending a function for this region as it has already\n+      // had redundancy restored\n+      if (!Collections.disjoint(completedMembers, memberPRInfo.dsMemberList)) {\n+        continue;\n+      }\n+      // Try the function on the first member for this region\n+      DistributedMember targetMember = memberPRInfo.dsMemberList.get(0);\n+      RestoreRedundancyResults functionResult = executeFunctionAndGetFunctionResult(\n+          new RestoreRedundancyFunction(), functionArgs, targetMember);\n+      if (!functionResult.getSuccess()) {\n+        // Record the error and then give up\n+        RestoreRedundancyResultsImpl results = new RestoreRedundancyResultsImpl();\n+        results.setSuccess(false);\n+        String errorString =\n+            String.format(EXCEPTION_MEMBER_MESSAGE, targetMember.getName(),\n+                functionResult.getStatusMessage());\n+        results.setStatusMessage(errorString);\n+        results.setSuccess(false);\n+        return results;\n+      }\n+      functionResults.add(functionResult);\n+      completedMembers.add(targetMember);\n+    }\n+\n+    RestoreRedundancyResultsImpl finalResult = new RestoreRedundancyResultsImpl();\n+    finalResult.addIncludedRegionsWithNoMembers(includedRegionsWithNoMembers);\n+    for (RestoreRedundancyResults functionResult : functionResults) {\n+      finalResult.addRegionResults(functionResult);\n+      finalResult.setSuccess(functionResult.getSuccess());\n+      finalResult.setStatusMessage(functionResult.getStatusMessage());\n+    }\n+    return finalResult;\n+  }\n+\n+  // this returns either an Exception or RestoreRedundancyResults\n+  public RestoreRedundancyResults executeFunctionAndGetFunctionResult(Function<?> function,\n+      Object args,\n+      final DistributedMember targetMember) {\n+    ResultCollector<?, ?> rc =\n+        ManagementUtils.executeFunction(function, args, Collections.singleton(targetMember));\n+    List<RestoreRedundancyResults> results = (List<RestoreRedundancyResults>) rc.getResult();\n+    return results.size() > 0 ? results.get(0) : null;\n+  }\n+\n+\n+  List<DistributedMember> filterViableMembers(\n+      RebalanceOperationPerformer.MemberPRInfo prInfo) {\n+    return prInfo.dsMemberList.stream()\n+        .map(InternalDistributedMember.class::cast)\n+        .filter(member -> member.getVersionObject().compareTo(ADDED_VERSION) >= 0)\n+        .collect(Collectors.toList());\n+  }\n+\n+  void populateLists(List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion,\n+      List<String> noMemberRegions, List<String> includeRegions, List<String> excludeRegions,\n+      InternalCache cache) {\n+    // Include all regions\n+    if (includeRegions == null) {\n+      // Exclude these regions\n+      List<RebalanceOperationPerformer.MemberPRInfo> memberRegionList =\n+          getMembersForEachRegion(cache, excludeRegions);\n+      membersForEachRegion.addAll(memberRegionList);\n+    } else {\n+      for (String regionName : includeRegions) {\n+        DistributedMember memberForRegion = getOneMemberForRegion(cache, regionName);\n+\n+        // If we did not find a member for this region name, add it to the list of regions with no\n+        // members\n+        if (memberForRegion == null) {\n+          noMemberRegions.add(regionName);\n+        } else {\n+          RebalanceOperationPerformer.MemberPRInfo memberPRInfo =\n+              new RebalanceOperationPerformer.MemberPRInfo();\n+          memberPRInfo.region = regionName;\n+          memberPRInfo.dsMemberList.add(memberForRegion);\n+          membersForEachRegion.add(memberPRInfo);\n+        }\n+      }\n+    }\n+  }\n+\n+  // Extracted for testing\n+  List<RebalanceOperationPerformer.MemberPRInfo> getMembersForEachRegion(InternalCache cache,\n+      List<String> excludedRegionList) {\n+    return RebalanceOperationPerformer.getMemberRegionList(\n+        ManagementService.getManagementService(cache), cache, excludedRegionList);\n+  }\n+\n+  // Extracted for testing\n+  DistributedMember getOneMemberForRegion(InternalCache cache, String regionName) {", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4NzA2Nw==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441187067", "body": "This line generates unchecked cast warning. You can change it to this if you want:\r\n```\r\nimport static org.apache.geode.util.internal.UncheckedUtils.uncheckedCast;\r\n\r\n    List<RestoreRedundancyResults> results = uncheckedCast(rc.getResult());\r\n```", "bodyText": "This line generates unchecked cast warning. You can change it to this if you want:\nimport static org.apache.geode.util.internal.UncheckedUtils.uncheckedCast;\n\n    List<RestoreRedundancyResults> results = uncheckedCast(rc.getResult());", "bodyHTML": "<p dir=\"auto\">This line generates unchecked cast warning. You can change it to this if you want:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import static org.apache.geode.util.internal.UncheckedUtils.uncheckedCast;\n\n    List&lt;RestoreRedundancyResults&gt; results = uncheckedCast(rc.getResult());\n\"><pre><code>import static org.apache.geode.util.internal.UncheckedUtils.uncheckedCast;\n\n    List&lt;RestoreRedundancyResults&gt; results = uncheckedCast(rc.getResult());\n</code></pre></div>", "author": "kirklund", "createdAt": "2020-06-16T22:56:18Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/RestoreRedundancyPerformer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management.internal.operation;\n+\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.annotations.Immutable;\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.ResultCollector;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.serialization.Version;\n+import org.apache.geode.management.ManagementService;\n+import org.apache.geode.management.internal.functions.RestoreRedundancyFunction;\n+import org.apache.geode.management.internal.util.ManagementUtils;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+public class RestoreRedundancyPerformer\n+    implements OperationPerformer<RestoreRedundancyRequest, RestoreRedundancyResults> {\n+  @Immutable\n+  public static final Version ADDED_VERSION = Version.GEODE_1_13_0;\n+  public static final String NO_MEMBERS_WITH_VERSION_FOR_REGION =\n+      \"No members with a version greater than or equal to %s were found for region %s\";\n+  public static final String EXCEPTION_MEMBER_MESSAGE = \"Exception occurred on member %s: %s\";\n+\n+  @Override\n+  public RestoreRedundancyResults perform(Cache cache, RestoreRedundancyRequest operation) {\n+    return perform(cache, operation, false);\n+  }\n+\n+  public RestoreRedundancyResults perform(Cache cache, RestoreRedundancyRequest operation,\n+      boolean checkStatus) {\n+    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n+    List<String> includedRegionsWithNoMembers = new ArrayList<>();\n+\n+    populateLists(membersForEachRegion, includedRegionsWithNoMembers, operation.getIncludeRegions(),\n+        operation.getExcludeRegions(), (InternalCache) cache);\n+\n+    for (RebalanceOperationPerformer.MemberPRInfo prInfo : membersForEachRegion) {\n+      // Filter out any members using older versions of Geode\n+      List<DistributedMember> viableMembers = filterViableMembers(prInfo);\n+\n+      if (viableMembers.size() != 0) {\n+        // Update the MemberPRInfo with the viable members\n+        prInfo.dsMemberList = viableMembers;\n+      } else {\n+        RestoreRedundancyResultsImpl results = new RestoreRedundancyResultsImpl();\n+        results.setStatusMessage(String.format(NO_MEMBERS_WITH_VERSION_FOR_REGION,\n+            ADDED_VERSION.getName(), prInfo.region));\n+        results.setSuccess(false);\n+        return results;\n+      }\n+    }\n+\n+    List<RestoreRedundancyResults> functionResults = new ArrayList<>();\n+    Object[] functionArgs = new Object[] {operation, checkStatus};\n+    List<DistributedMember> completedMembers = new ArrayList<>();\n+    for (RebalanceOperationPerformer.MemberPRInfo memberPRInfo : membersForEachRegion) {\n+      // Check to see if an earlier function execution has already targeted a member hosting this\n+      // region. If one has, there is no point sending a function for this region as it has already\n+      // had redundancy restored\n+      if (!Collections.disjoint(completedMembers, memberPRInfo.dsMemberList)) {\n+        continue;\n+      }\n+      // Try the function on the first member for this region\n+      DistributedMember targetMember = memberPRInfo.dsMemberList.get(0);\n+      RestoreRedundancyResults functionResult = executeFunctionAndGetFunctionResult(\n+          new RestoreRedundancyFunction(), functionArgs, targetMember);\n+      if (!functionResult.getSuccess()) {\n+        // Record the error and then give up\n+        RestoreRedundancyResultsImpl results = new RestoreRedundancyResultsImpl();\n+        results.setSuccess(false);\n+        String errorString =\n+            String.format(EXCEPTION_MEMBER_MESSAGE, targetMember.getName(),\n+                functionResult.getStatusMessage());\n+        results.setStatusMessage(errorString);\n+        results.setSuccess(false);\n+        return results;\n+      }\n+      functionResults.add(functionResult);\n+      completedMembers.add(targetMember);\n+    }\n+\n+    RestoreRedundancyResultsImpl finalResult = new RestoreRedundancyResultsImpl();\n+    finalResult.addIncludedRegionsWithNoMembers(includedRegionsWithNoMembers);\n+    for (RestoreRedundancyResults functionResult : functionResults) {\n+      finalResult.addRegionResults(functionResult);\n+      finalResult.setSuccess(functionResult.getSuccess());\n+      finalResult.setStatusMessage(functionResult.getStatusMessage());\n+    }\n+    return finalResult;\n+  }\n+\n+  // this returns either an Exception or RestoreRedundancyResults\n+  public RestoreRedundancyResults executeFunctionAndGetFunctionResult(Function<?> function,\n+      Object args,\n+      final DistributedMember targetMember) {\n+    ResultCollector<?, ?> rc =\n+        ManagementUtils.executeFunction(function, args, Collections.singleton(targetMember));\n+    List<RestoreRedundancyResults> results = (List<RestoreRedundancyResults>) rc.getResult();", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4ODAyNA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441188024", "body": "Another `size()` call that can be changed to use `isEmpty()`:\r\n```\r\nreturn !results.isEmpty() ? results.get(0) : null;\r\n```\r\nOr even better:\r\n```\r\nreturn results.isEmpty() ? null : results.get(0);\r\n```\r\nIntelliJ has an inspection you can turn on that allows you to automatically make this change.", "bodyText": "Another size() call that can be changed to use isEmpty():\nreturn !results.isEmpty() ? results.get(0) : null;\n\nOr even better:\nreturn results.isEmpty() ? null : results.get(0);\n\nIntelliJ has an inspection you can turn on that allows you to automatically make this change.", "bodyHTML": "<p dir=\"auto\">Another <code>size()</code> call that can be changed to use <code>isEmpty()</code>:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"return !results.isEmpty() ? results.get(0) : null;\n\"><pre><code>return !results.isEmpty() ? results.get(0) : null;\n</code></pre></div>\n<p dir=\"auto\">Or even better:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"return results.isEmpty() ? null : results.get(0);\n\"><pre><code>return results.isEmpty() ? null : results.get(0);\n</code></pre></div>\n<p dir=\"auto\">IntelliJ has an inspection you can turn on that allows you to automatically make this change.</p>", "author": "kirklund", "createdAt": "2020-06-16T22:59:27Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/RestoreRedundancyPerformer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management.internal.operation;\n+\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.annotations.Immutable;\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.ResultCollector;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.serialization.Version;\n+import org.apache.geode.management.ManagementService;\n+import org.apache.geode.management.internal.functions.RestoreRedundancyFunction;\n+import org.apache.geode.management.internal.util.ManagementUtils;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+public class RestoreRedundancyPerformer\n+    implements OperationPerformer<RestoreRedundancyRequest, RestoreRedundancyResults> {\n+  @Immutable\n+  public static final Version ADDED_VERSION = Version.GEODE_1_13_0;\n+  public static final String NO_MEMBERS_WITH_VERSION_FOR_REGION =\n+      \"No members with a version greater than or equal to %s were found for region %s\";\n+  public static final String EXCEPTION_MEMBER_MESSAGE = \"Exception occurred on member %s: %s\";\n+\n+  @Override\n+  public RestoreRedundancyResults perform(Cache cache, RestoreRedundancyRequest operation) {\n+    return perform(cache, operation, false);\n+  }\n+\n+  public RestoreRedundancyResults perform(Cache cache, RestoreRedundancyRequest operation,\n+      boolean checkStatus) {\n+    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n+    List<String> includedRegionsWithNoMembers = new ArrayList<>();\n+\n+    populateLists(membersForEachRegion, includedRegionsWithNoMembers, operation.getIncludeRegions(),\n+        operation.getExcludeRegions(), (InternalCache) cache);\n+\n+    for (RebalanceOperationPerformer.MemberPRInfo prInfo : membersForEachRegion) {\n+      // Filter out any members using older versions of Geode\n+      List<DistributedMember> viableMembers = filterViableMembers(prInfo);\n+\n+      if (viableMembers.size() != 0) {\n+        // Update the MemberPRInfo with the viable members\n+        prInfo.dsMemberList = viableMembers;\n+      } else {\n+        RestoreRedundancyResultsImpl results = new RestoreRedundancyResultsImpl();\n+        results.setStatusMessage(String.format(NO_MEMBERS_WITH_VERSION_FOR_REGION,\n+            ADDED_VERSION.getName(), prInfo.region));\n+        results.setSuccess(false);\n+        return results;\n+      }\n+    }\n+\n+    List<RestoreRedundancyResults> functionResults = new ArrayList<>();\n+    Object[] functionArgs = new Object[] {operation, checkStatus};\n+    List<DistributedMember> completedMembers = new ArrayList<>();\n+    for (RebalanceOperationPerformer.MemberPRInfo memberPRInfo : membersForEachRegion) {\n+      // Check to see if an earlier function execution has already targeted a member hosting this\n+      // region. If one has, there is no point sending a function for this region as it has already\n+      // had redundancy restored\n+      if (!Collections.disjoint(completedMembers, memberPRInfo.dsMemberList)) {\n+        continue;\n+      }\n+      // Try the function on the first member for this region\n+      DistributedMember targetMember = memberPRInfo.dsMemberList.get(0);\n+      RestoreRedundancyResults functionResult = executeFunctionAndGetFunctionResult(\n+          new RestoreRedundancyFunction(), functionArgs, targetMember);\n+      if (!functionResult.getSuccess()) {\n+        // Record the error and then give up\n+        RestoreRedundancyResultsImpl results = new RestoreRedundancyResultsImpl();\n+        results.setSuccess(false);\n+        String errorString =\n+            String.format(EXCEPTION_MEMBER_MESSAGE, targetMember.getName(),\n+                functionResult.getStatusMessage());\n+        results.setStatusMessage(errorString);\n+        results.setSuccess(false);\n+        return results;\n+      }\n+      functionResults.add(functionResult);\n+      completedMembers.add(targetMember);\n+    }\n+\n+    RestoreRedundancyResultsImpl finalResult = new RestoreRedundancyResultsImpl();\n+    finalResult.addIncludedRegionsWithNoMembers(includedRegionsWithNoMembers);\n+    for (RestoreRedundancyResults functionResult : functionResults) {\n+      finalResult.addRegionResults(functionResult);\n+      finalResult.setSuccess(functionResult.getSuccess());\n+      finalResult.setStatusMessage(functionResult.getStatusMessage());\n+    }\n+    return finalResult;\n+  }\n+\n+  // this returns either an Exception or RestoreRedundancyResults\n+  public RestoreRedundancyResults executeFunctionAndGetFunctionResult(Function<?> function,\n+      Object args,\n+      final DistributedMember targetMember) {\n+    ResultCollector<?, ?> rc =\n+        ManagementUtils.executeFunction(function, args, Collections.singleton(targetMember));\n+    List<RestoreRedundancyResults> results = (List<RestoreRedundancyResults>) rc.getResult();\n+    return results.size() > 0 ? results.get(0) : null;", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4ODM0NQ==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441188345", "body": "Let's make all of these fields `private`. There's an inspection that finds and automates this.", "bodyText": "Let's make all of these fields private. There's an inspection that finds and automates this.", "bodyHTML": "<p dir=\"auto\">Let's make all of these fields <code>private</code>. There's an inspection that finds and automates this.</p>", "author": "kirklund", "createdAt": "2020-06-16T23:00:22Z", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/control/RestoreRedundancyOperationImplTest.java", "diffHunk": "@@ -38,19 +38,19 @@\n import org.junit.Test;\n \n import org.apache.geode.cache.RegionDestroyedException;\n-import org.apache.geode.cache.control.RegionRedundancyStatus;\n-import org.apache.geode.cache.control.RestoreRedundancyResults;\n import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n import org.apache.geode.internal.cache.InternalCache;\n import org.apache.geode.internal.cache.PartitionedRegion;\n import org.apache.geode.internal.cache.partitioned.PartitionedRegionRebalanceOp;\n+import org.apache.geode.management.runtime.RegionRedundancyStatus;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n \n public class RestoreRedundancyOperationImplTest {\n   InternalCache cache;\n   InternalResourceManager manager;\n   ResourceManagerStats stats;\n   RestoreRedundancyOperationImpl operation;\n-  RestoreRedundancyResultsImpl emptyResults;\n+  SerializableRestoreRedundancyResultsImpl emptyResults;", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4OTI2OQ==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441189269", "body": "This is untouched code, but we should change all `\"\\n\"` uses with System.lineSeparator() to ensure it is platform independent.", "bodyText": "This is untouched code, but we should change all \"\\n\" uses with System.lineSeparator() to ensure it is platform independent.", "bodyHTML": "<p dir=\"auto\">This is untouched code, but we should change all <code>\"\\n\"</code> uses with System.lineSeparator() to ensure it is platform independent.</p>", "author": "kirklund", "createdAt": "2020-06-16T23:03:10Z", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/control/RestoreRedundancyResultsImplTest.java", "diffHunk": "@@ -102,7 +108,7 @@ public void getMessageReturnsStatusForAllRegionsAndPrimaryInfo() {\n \n     results.addPrimaryReassignmentDetails(details);\n \n-    String message = results.getMessage();\n+    String message = results.getRegionOperationMessage();\n     List<String> messageLines = Arrays.asList(message.split(\"\\n\"));", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4OTQ3MA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441189470", "body": "You can delete the `throws Exception`.", "bodyText": "You can delete the throws Exception.", "bodyHTML": "<p dir=\"auto\">You can delete the <code>throws Exception</code>.</p>", "author": "kirklund", "createdAt": "2020-06-16T23:03:53Z", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/control/RestoreRedundancyResultsImplTest.java", "diffHunk": "@@ -68,30 +68,36 @@ public void setUp() {\n     when(zeroRedundancyRegionResult.getRegionName()).thenReturn(zeroRedundancyRegionName);\n     when(details.getPrimaryTransfersCompleted()).thenReturn(transfersCompleted);\n     when(details.getPrimaryTransferTime()).thenReturn(transferTime);\n-    results = new RestoreRedundancyResultsImpl();\n+    results = new SerializableRestoreRedundancyResultsImpl();\n+  }\n+\n+  @Test\n+  public void initialStateIsSuccess() throws Exception {", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4OTYyMQ==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441189621", "body": "Please make all the constants in this test `private`.", "bodyText": "Please make all the constants in this test private.", "bodyHTML": "<p dir=\"auto\">Please make all the constants in this test <code>private</code>.</p>", "author": "kirklund", "createdAt": "2020-06-16T23:04:27Z", "path": "geode-core/src/test/java/org/apache/geode/management/internal/operation/RestoreRedundancyPerformerTest.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.management.internal.operation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import org.apache.geode.cache.DataPolicy;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.distributed.internal.DistributionManager;\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.cache.InternalCacheForClientAccess;\n+import org.apache.geode.internal.serialization.Version;\n+import org.apache.geode.management.DistributedRegionMXBean;\n+import org.apache.geode.management.DistributedSystemMXBean;\n+import org.apache.geode.management.internal.BaseManagementService;\n+import org.apache.geode.management.internal.functions.RestoreRedundancyFunction;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RegionRedundancyStatus;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+public class RestoreRedundancyPerformerTest {\n+\n+  public static final String DS_MEMBER_NAME_SERVER1 = \"server1\";", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5MDI3OQ==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441190279", "body": "All of the `Mockito.*****` matchers in this class are actually owned by `org.mockito.ArgumentMatchers`. I would recommend just converting them all to static import which should switch them to importing from ArgumentMatchers.", "bodyText": "All of the Mockito.***** matchers in this class are actually owned by org.mockito.ArgumentMatchers. I would recommend just converting them all to static import which should switch them to importing from ArgumentMatchers.", "bodyHTML": "<p dir=\"auto\">All of the <code>Mockito.*****</code> matchers in this class are actually owned by <code>org.mockito.ArgumentMatchers</code>. I would recommend just converting them all to static import which should switch them to importing from ArgumentMatchers.</p>", "author": "kirklund", "createdAt": "2020-06-16T23:06:25Z", "path": "geode-core/src/test/java/org/apache/geode/management/internal/operation/RestoreRedundancyPerformerTest.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.management.internal.operation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import org.apache.geode.cache.DataPolicy;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.distributed.internal.DistributionManager;\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.cache.InternalCacheForClientAccess;\n+import org.apache.geode.internal.serialization.Version;\n+import org.apache.geode.management.DistributedRegionMXBean;\n+import org.apache.geode.management.DistributedSystemMXBean;\n+import org.apache.geode.management.internal.BaseManagementService;\n+import org.apache.geode.management.internal.functions.RestoreRedundancyFunction;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RegionRedundancyStatus;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+public class RestoreRedundancyPerformerTest {\n+\n+  public static final String DS_MEMBER_NAME_SERVER1 = \"server1\";\n+  public static final String DS_MEMBER_NAME_SERVER2 = \"server2\";\n+\n+  public static final String REGION_1 = \"region1\";\n+  public static final String BOGUS_PASS_MESSAGE = \"Bogus pass message\";\n+  private InternalDistributedMember server1;\n+  private InternalDistributedMember server2;\n+  private InternalCacheForClientAccess internalCacheForClientAccess;\n+  private RestoreRedundancyPerformer restoreRedundancyPerformer;\n+\n+  @Before\n+  public void setup() {\n+    BaseManagementService baseManagementService = mock(BaseManagementService.class);\n+    DistributedSystemMXBean distributedSystemMXBean = mock(DistributedSystemMXBean.class);\n+    DistributedRegionMXBean distributedRegionMXBean = mock(DistributedRegionMXBean.class);\n+    server1 = mock(InternalDistributedMember.class);\n+    server2 = mock(InternalDistributedMember.class);\n+    internalCacheForClientAccess = mock(InternalCacheForClientAccess.class);\n+    InternalDistributedSystem internalDistributedSystem = mock(InternalDistributedSystem.class);\n+    DistributionManager distributionManager = mock(DistributionManager.class);\n+    when(baseManagementService.getDistributedSystemMXBean()).thenReturn(distributedSystemMXBean);\n+    when(baseManagementService.getDistributedRegionMXBean(Mockito.anyString()))", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5MTc2Mw==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441191763", "body": "buildResultModelFromFunctionResults should be private until something outside the class needs to reference it.", "bodyText": "buildResultModelFromFunctionResults should be private until something outside the class needs to reference it.", "bodyHTML": "<p dir=\"auto\">buildResultModelFromFunctionResults should be private until something outside the class needs to reference it.</p>", "author": "kirklund", "createdAt": "2020-06-16T23:10:44Z", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RedundancyCommand.java", "diffHunk": "@@ -148,81 +126,37 @@ void populateLists(List<RebalanceOperationPerformer.MemberPRInfo> membersForEach\n     }\n   }\n \n-  List<CliFunctionResult> executeFunctionOnMembers(String[] includeRegions, String[] excludeRegions,\n-      boolean reassignPrimaries, boolean isStatusCommand,\n-      List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion) {\n-    List<CliFunctionResult> functionResults = new ArrayList<>();\n-    Object[] functionArgs =\n-        new Object[] {includeRegions, excludeRegions, reassignPrimaries, isStatusCommand};\n-    List<DistributedMember> completedMembers = new ArrayList<>();\n-    for (RebalanceOperationPerformer.MemberPRInfo memberPRInfo : membersForEachRegion) {\n-      // Check to see if an earlier function execution has already targeted a member hosting this\n-      // region. If one has, there is no point sending a function for this region as it has already\n-      // had redundancy restored\n-      if (!Collections.disjoint(completedMembers, memberPRInfo.dsMemberList)) {\n-        continue;\n-      }\n-      // Try the function on the first member for this region\n-      DistributedMember targetMember = memberPRInfo.dsMemberList.get(0);\n-      CliFunctionResult functionResult = executeFunctionAndGetFunctionResult(\n-          new RedundancyCommandFunction(), functionArgs, targetMember);\n-      if (functionResult.getStatus().equals(ERROR.name())) {\n-        // Record the error and then give up\n-        functionResults.add(functionResult);\n-        break;\n-      }\n-      functionResults.add(functionResult);\n-      completedMembers.add(targetMember);\n-    }\n-    return functionResults;\n-  }\n-\n-  ResultModel buildResultModelFromFunctionResults(List<CliFunctionResult> functionResults,\n-      List<String> includedRegionsWithNoMembers, boolean isStatusCommand) {\n+  ResultModel buildResultModelFromFunctionResults(RestoreRedundancyResults results,", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5MjI4Ng==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441192286", "body": "Optional: RedundancyCommand has unused methods and one constant that can be deleted. It also has constants and other methods that should be changed to private sometime. Most of this is untouched code.", "bodyText": "Optional: RedundancyCommand has unused methods and one constant that can be deleted. It also has constants and other methods that should be changed to private sometime. Most of this is untouched code.", "bodyHTML": "<p dir=\"auto\">Optional: RedundancyCommand has unused methods and one constant that can be deleted. It also has constants and other methods that should be changed to private sometime. Most of this is untouched code.</p>", "author": "kirklund", "createdAt": "2020-06-16T23:12:20Z", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RedundancyCommand.java", "diffHunk": "@@ -15,35 +15,33 @@\n package org.apache.geode.management.internal.cli.commands;\n \n import static org.apache.geode.cache.Region.SEPARATOR;\n-import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.NO_REDUNDANT_COPIES_FOR_REGIONS;\n-import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.PRIMARY_TRANSFERS_COMPLETED;\n-import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.PRIMARY_TRANSFER_TIME;\n-import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_NOT_SATISFIED_FOR_REGIONS;\n-import static org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl.REDUNDANCY_SATISFIED_FOR_REGIONS;\n-import static org.apache.geode.management.internal.functions.CliFunctionResult.StatusState.ERROR;\n+import static org.apache.geode.internal.cache.control.SerializableRestoreRedundancyResultsImpl.NO_REDUNDANT_COPIES_FOR_REGIONS;\n+import static org.apache.geode.internal.cache.control.SerializableRestoreRedundancyResultsImpl.PRIMARY_TRANSFERS_COMPLETED;\n+import static org.apache.geode.internal.cache.control.SerializableRestoreRedundancyResultsImpl.PRIMARY_TRANSFER_TIME;\n+import static org.apache.geode.internal.cache.control.SerializableRestoreRedundancyResultsImpl.REDUNDANCY_NOT_SATISFIED_FOR_REGIONS;\n+import static org.apache.geode.internal.cache.control.SerializableRestoreRedundancyResultsImpl.REDUNDANCY_SATISFIED_FOR_REGIONS;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n \n-import org.apache.geode.cache.control.RegionRedundancyStatus;\n-import org.apache.geode.cache.control.RestoreRedundancyResults;\n import org.apache.geode.distributed.DistributedMember;\n import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n import org.apache.geode.internal.cache.InternalCache;\n-import org.apache.geode.internal.cache.control.RestoreRedundancyResultsImpl;\n+import org.apache.geode.internal.cache.control.SerializableRestoreRedundancyResultsImpl;\n import org.apache.geode.internal.serialization.Version;\n import org.apache.geode.management.ManagementService;\n import org.apache.geode.management.cli.GfshCommand;\n import org.apache.geode.management.cli.Result;\n-import org.apache.geode.management.internal.cli.functions.RedundancyCommandFunction;\n import org.apache.geode.management.internal.cli.result.model.InfoResultModel;\n import org.apache.geode.management.internal.cli.result.model.ResultModel;\n-import org.apache.geode.management.internal.functions.CliFunctionResult;\n import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;\n+import org.apache.geode.management.internal.operation.RestoreRedundancyPerformer;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RegionRedundancyStatus;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n \n public class RedundancyCommand extends GfshCommand {", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5MjUwMA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441192500", "body": "This class has `size()`\u00a0calls that would be more appropriate as `sEmpty()` calls.", "bodyText": "This class has size()\u00a0calls that would be more appropriate as sEmpty() calls.", "bodyHTML": "<p dir=\"auto\">This class has <code>size()</code>\u00a0calls that would be more appropriate as <code>sEmpty()</code> calls.</p>", "author": "kirklund", "createdAt": "2020-06-16T23:13:02Z", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/RedundancyCommand.java", "diffHunk": "@@ -148,81 +126,37 @@ void populateLists(List<RebalanceOperationPerformer.MemberPRInfo> membersForEach\n     }\n   }\n \n-  List<CliFunctionResult> executeFunctionOnMembers(String[] includeRegions, String[] excludeRegions,\n-      boolean reassignPrimaries, boolean isStatusCommand,\n-      List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion) {\n-    List<CliFunctionResult> functionResults = new ArrayList<>();\n-    Object[] functionArgs =\n-        new Object[] {includeRegions, excludeRegions, reassignPrimaries, isStatusCommand};\n-    List<DistributedMember> completedMembers = new ArrayList<>();\n-    for (RebalanceOperationPerformer.MemberPRInfo memberPRInfo : membersForEachRegion) {\n-      // Check to see if an earlier function execution has already targeted a member hosting this\n-      // region. If one has, there is no point sending a function for this region as it has already\n-      // had redundancy restored\n-      if (!Collections.disjoint(completedMembers, memberPRInfo.dsMemberList)) {\n-        continue;\n-      }\n-      // Try the function on the first member for this region\n-      DistributedMember targetMember = memberPRInfo.dsMemberList.get(0);\n-      CliFunctionResult functionResult = executeFunctionAndGetFunctionResult(\n-          new RedundancyCommandFunction(), functionArgs, targetMember);\n-      if (functionResult.getStatus().equals(ERROR.name())) {\n-        // Record the error and then give up\n-        functionResults.add(functionResult);\n-        break;\n-      }\n-      functionResults.add(functionResult);\n-      completedMembers.add(targetMember);\n-    }\n-    return functionResults;\n-  }\n-\n-  ResultModel buildResultModelFromFunctionResults(List<CliFunctionResult> functionResults,\n-      List<String> includedRegionsWithNoMembers, boolean isStatusCommand) {\n+  ResultModel buildResultModelFromFunctionResults(RestoreRedundancyResults results,\n+      boolean isStatusCommand) {\n     // No members hosting partitioned regions were found, but no regions were explicitly included,\n     // so return OK status\n-    if (functionResults.size() == 0 && includedRegionsWithNoMembers.size() == 0) {\n+    if (results.getRegionResults().size() == 0", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5Mjc3OQ==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441192779", "body": "OUTPUT_STRING should be `protected` instead of `public`.", "bodyText": "OUTPUT_STRING should be protected instead of public.", "bodyHTML": "<p dir=\"auto\">OUTPUT_STRING should be <code>protected</code> instead of <code>public</code>.</p>", "author": "kirklund", "createdAt": "2020-06-16T23:13:59Z", "path": "geode-management/src/main/java/org/apache/geode/management/internal/operation/RegionRedundancyStatusImpl.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.operation;\n+\n+import org.apache.geode.management.runtime.RegionRedundancyStatus;\n+\n+/**\n+ * result object used by the cms that only needs to be json serializable\n+ */\n+public class RegionRedundancyStatusImpl implements RegionRedundancyStatus {\n+\n+  public static final String OUTPUT_STRING =", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5MzA0OA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441193048", "body": "The non-default constructor should be package-private (no qualifier) with the annotation `@VisibleForTesting`", "bodyText": "The non-default constructor should be package-private (no qualifier) with the annotation @VisibleForTesting", "bodyHTML": "<p dir=\"auto\">The non-default constructor should be package-private (no qualifier) with the annotation <code>@VisibleForTesting</code></p>", "author": "kirklund", "createdAt": "2020-06-16T23:14:52Z", "path": "geode-management/src/main/java/org/apache/geode/management/internal/operation/RegionRedundancyStatusImpl.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.operation;\n+\n+import org.apache.geode.management.runtime.RegionRedundancyStatus;\n+\n+/**\n+ * result object used by the cms that only needs to be json serializable\n+ */\n+public class RegionRedundancyStatusImpl implements RegionRedundancyStatus {\n+\n+  public static final String OUTPUT_STRING =\n+      \"%s redundancy status: %s. Desired redundancy is %s and actual redundancy is %s.\";\n+\n+  /**\n+   * The name of the region used to create this object.\n+   */\n+  protected String regionName;\n+\n+  /**\n+   * The configured redundancy of the region used to create this object.\n+   */\n+  protected int configuredRedundancy;\n+\n+  /**\n+   * The actual redundancy of the region used to create this object at time of creation.\n+   */\n+  protected int actualRedundancy;\n+\n+  /**\n+   * The {@link RedundancyStatus} of the region used to create this object at time of creation.\n+   */\n+  protected RedundancyStatus status;\n+\n+  /**\n+   * Default constructor used for serialization\n+   */\n+  public RegionRedundancyStatusImpl() {}\n+\n+  public RegionRedundancyStatusImpl(int configuredRedundancy, int actualRedundancy,", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg3NDkzNA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441874934", "bodyText": "Its necessary for serialization.", "author": "mhansonp", "createdAt": "2020-06-17T22:48:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5MzA0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg3NTIxMQ==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441875211", "bodyText": "Sorry misread that... I agree.", "author": "mhansonp", "createdAt": "2020-06-17T22:49:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5MzA0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5MzE0Ng==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441193146", "body": "determineStatus is unused.", "bodyText": "determineStatus is unused.", "bodyHTML": "<p dir=\"auto\">determineStatus is unused.</p>", "author": "kirklund", "createdAt": "2020-06-16T23:15:11Z", "path": "geode-management/src/main/java/org/apache/geode/management/internal/operation/RegionRedundancyStatusImpl.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.operation;\n+\n+import org.apache.geode.management.runtime.RegionRedundancyStatus;\n+\n+/**\n+ * result object used by the cms that only needs to be json serializable\n+ */\n+public class RegionRedundancyStatusImpl implements RegionRedundancyStatus {\n+\n+  public static final String OUTPUT_STRING =\n+      \"%s redundancy status: %s. Desired redundancy is %s and actual redundancy is %s.\";\n+\n+  /**\n+   * The name of the region used to create this object.\n+   */\n+  protected String regionName;\n+\n+  /**\n+   * The configured redundancy of the region used to create this object.\n+   */\n+  protected int configuredRedundancy;\n+\n+  /**\n+   * The actual redundancy of the region used to create this object at time of creation.\n+   */\n+  protected int actualRedundancy;\n+\n+  /**\n+   * The {@link RedundancyStatus} of the region used to create this object at time of creation.\n+   */\n+  protected RedundancyStatus status;\n+\n+  /**\n+   * Default constructor used for serialization\n+   */\n+  public RegionRedundancyStatusImpl() {}\n+\n+  public RegionRedundancyStatusImpl(int configuredRedundancy, int actualRedundancy,\n+      String regionName, RedundancyStatus status) {\n+    this.configuredRedundancy = configuredRedundancy;\n+    this.actualRedundancy = actualRedundancy;\n+    this.regionName = regionName;\n+    this.status = status;\n+  }\n+\n+  @Override\n+  public String getRegionName() {\n+    return regionName;\n+  }\n+\n+  @Override\n+  public int getConfiguredRedundancy() {\n+    return configuredRedundancy;\n+  }\n+\n+  @Override\n+  public int getActualRedundancy() {\n+    return actualRedundancy;\n+  }\n+\n+  @Override\n+  public RedundancyStatus getStatus() {\n+    return status;\n+  }\n+\n+\n+  /**\n+   * Determines the {@link RedundancyStatus} for the region. If redundancy is not configured (i.e.\n+   * configured redundancy = 0), this always returns {@link RedundancyStatus#SATISFIED}.\n+   *\n+   * @param desiredRedundancy The configured redundancy of the region.\n+   * @param actualRedundancy The actual redundancy of the region.\n+   * @return The {@link RedundancyStatus} for the region.\n+   */\n+  private RedundancyStatus determineStatus(int desiredRedundancy, int actualRedundancy) {", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5NTAwNQ==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441195005", "body": "Optional: This class has some `size()` calls that could be changed to use `isEmpty()` if you want. Also some unused code and overly public constants and methods.", "bodyText": "Optional: This class has some size() calls that could be changed to use isEmpty() if you want. Also some unused code and overly public constants and methods.", "bodyHTML": "<p dir=\"auto\">Optional: This class has some <code>size()</code> calls that could be changed to use <code>isEmpty()</code> if you want. Also some unused code and overly public constants and methods.</p>", "author": "kirklund", "createdAt": "2020-06-16T23:21:15Z", "path": "geode-management/src/main/java/org/apache/geode/management/internal/operation/RestoreRedundancyResultsImpl.java", "diffHunk": "@@ -12,29 +12,22 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\n  * the License.\n  */\n-package org.apache.geode.internal.cache.control;\n+package org.apache.geode.management.internal.operation;\n \n-import java.io.DataInput;\n-import java.io.DataOutput;\n-import java.io.IOException;\n import java.time.Duration;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n \n-import org.apache.geode.DataSerializer;\n-import org.apache.geode.cache.control.RegionRedundancyStatus;\n-import org.apache.geode.cache.control.RestoreRedundancyResults;\n-import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n-import org.apache.geode.internal.serialization.DataSerializableFixedID;\n-import org.apache.geode.internal.serialization.DeserializationContext;\n-import org.apache.geode.internal.serialization.SerializationContext;\n-import org.apache.geode.internal.serialization.Version;\n-\n-public class RestoreRedundancyResultsImpl\n-    implements RestoreRedundancyResults, DataSerializableFixedID {\n+import org.apache.geode.management.runtime.RegionRedundancyStatus;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+/**\n+ * result object used by the cms that only needs to be json serializable\n+ */\n+public class RestoreRedundancyResultsImpl implements RestoreRedundancyResults {", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5NTUxOA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441195518", "body": "This is a dangling comment which can be orphaned easily if you move code around. I would make it a javadoc so that it \"sticks\" to the field:\r\n```\r\n/** null means all regions included */\r\nprivate List<String> includeRegions;\r\n```\r\nSame thing for the comment above `excludeRegions`.", "bodyText": "This is a dangling comment which can be orphaned easily if you move code around. I would make it a javadoc so that it \"sticks\" to the field:\n/** null means all regions included */\nprivate List<String> includeRegions;\n\nSame thing for the comment above excludeRegions.", "bodyHTML": "<p dir=\"auto\">This is a dangling comment which can be orphaned easily if you move code around. I would make it a javadoc so that it \"sticks\" to the field:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"/** null means all regions included */\nprivate List&lt;String&gt; includeRegions;\n\"><pre><code>/** null means all regions included */\nprivate List&lt;String&gt; includeRegions;\n</code></pre></div>\n<p dir=\"auto\">Same thing for the comment above <code>excludeRegions</code>.</p>", "author": "kirklund", "createdAt": "2020-06-16T23:22:54Z", "path": "geode-management/src/main/java/org/apache/geode/management/operation/RestoreRedundancyRequest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.operation;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+import org.apache.geode.annotations.Experimental;\n+import org.apache.geode.management.api.ClusterManagementOperation;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+/**\n+ * Defines a distributed system request to optimize bucket allocation across members.\n+ */\n+@Experimental\n+public class RestoreRedundancyRequest\n+    implements ClusterManagementOperation<RestoreRedundancyResults> {\n+\n+  /**\n+   * see {@link #getEndpoint()}\n+   */\n+  public static final String RESTORE_REDUNDANCY_REBALANCE_ENDPOINT =\n+      \"/operations/restoreRedundancy\";\n+  // null means all regions included", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5NTY0NA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441195644", "body": "RESTORE_REDUNDANCY_REBALANCE_ENDPOINT should be private.", "bodyText": "RESTORE_REDUNDANCY_REBALANCE_ENDPOINT should be private.", "bodyHTML": "<p dir=\"auto\">RESTORE_REDUNDANCY_REBALANCE_ENDPOINT should be private.</p>", "author": "kirklund", "createdAt": "2020-06-16T23:23:21Z", "path": "geode-management/src/main/java/org/apache/geode/management/operation/RestoreRedundancyRequest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.operation;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+import org.apache.geode.annotations.Experimental;\n+import org.apache.geode.management.api.ClusterManagementOperation;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+/**\n+ * Defines a distributed system request to optimize bucket allocation across members.\n+ */\n+@Experimental\n+public class RestoreRedundancyRequest\n+    implements ClusterManagementOperation<RestoreRedundancyResults> {\n+\n+  /**\n+   * see {@link #getEndpoint()}\n+   */\n+  public static final String RESTORE_REDUNDANCY_REBALANCE_ENDPOINT =", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5NTc1Nw==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441195757", "body": "Lots of unnecessary `this.` qualifiers.", "bodyText": "Lots of unnecessary this. qualifiers.", "bodyHTML": "<p dir=\"auto\">Lots of unnecessary <code>this.</code> qualifiers.</p>", "author": "kirklund", "createdAt": "2020-06-16T23:23:46Z", "path": "geode-management/src/main/java/org/apache/geode/management/operation/RestoreRedundancyRequest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.operation;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+import org.apache.geode.annotations.Experimental;\n+import org.apache.geode.management.api.ClusterManagementOperation;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+/**\n+ * Defines a distributed system request to optimize bucket allocation across members.\n+ */\n+@Experimental\n+public class RestoreRedundancyRequest\n+    implements ClusterManagementOperation<RestoreRedundancyResults> {\n+\n+  /**\n+   * see {@link #getEndpoint()}\n+   */\n+  public static final String RESTORE_REDUNDANCY_REBALANCE_ENDPOINT =\n+      \"/operations/restoreRedundancy\";\n+  // null means all regions included\n+  private List<String> includeRegions;\n+  // null means don't exclude any regions\n+  private List<String> excludeRegions;\n+  private boolean reassignPrimaries = true;\n+  private String operator;\n+\n+  /**\n+   * by default, requests all partitioned regions to be rebalanced\n+   */\n+  public RestoreRedundancyRequest() {}\n+\n+  /**\n+   * copy constructor\n+   */\n+  public RestoreRedundancyRequest(\n+      RestoreRedundancyRequest other) {\n+    this.setExcludeRegions(other.getExcludeRegions());", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5NTkwMA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441195900", "body": "setOperator is unused.", "bodyText": "setOperator is unused.", "bodyHTML": "<p dir=\"auto\">setOperator is unused.</p>", "author": "kirklund", "createdAt": "2020-06-16T23:24:21Z", "path": "geode-management/src/main/java/org/apache/geode/management/operation/RestoreRedundancyRequest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.operation;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+import org.apache.geode.annotations.Experimental;\n+import org.apache.geode.management.api.ClusterManagementOperation;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+/**\n+ * Defines a distributed system request to optimize bucket allocation across members.\n+ */\n+@Experimental\n+public class RestoreRedundancyRequest\n+    implements ClusterManagementOperation<RestoreRedundancyResults> {\n+\n+  /**\n+   * see {@link #getEndpoint()}\n+   */\n+  public static final String RESTORE_REDUNDANCY_REBALANCE_ENDPOINT =\n+      \"/operations/restoreRedundancy\";\n+  // null means all regions included\n+  private List<String> includeRegions;\n+  // null means don't exclude any regions\n+  private List<String> excludeRegions;\n+  private boolean reassignPrimaries = true;\n+  private String operator;\n+\n+  /**\n+   * by default, requests all partitioned regions to be rebalanced\n+   */\n+  public RestoreRedundancyRequest() {}\n+\n+  /**\n+   * copy constructor\n+   */\n+  public RestoreRedundancyRequest(\n+      RestoreRedundancyRequest other) {\n+    this.setExcludeRegions(other.getExcludeRegions());\n+    this.setIncludeRegions(other.getIncludeRegions());\n+    this.setReassignPrimaries(other.getReassignPrimaries());\n+    this.operator = other.getOperator();\n+  }\n+\n+  /***\n+   * Returns the list of regions to be rebalanced (or an empty list for all-except-excluded)\n+   */\n+  public List<String> getIncludeRegions() {\n+    return includeRegions;\n+  }\n+\n+  /**\n+   * requests rebalance of the specified region(s) only. When at least one region is specified, this\n+   * takes precedence over any excluded regions.\n+   */\n+  public void setIncludeRegions(List<String> includeRegions) {\n+    this.includeRegions = includeRegions;\n+  }\n+\n+  /***\n+   * Returns the list of regions NOT to be rebalanced (iff {@link #getIncludeRegions()} is empty)\n+   */\n+  public List<String> getExcludeRegions() {\n+    return excludeRegions;\n+  }\n+\n+  /**\n+   * excludes specific regions from the rebalance, if {@link #getIncludeRegions()} is empty,\n+   * otherwise has no effect\n+   * default: no regions are excluded\n+   */\n+  public void setExcludeRegions(List<String> excludeRegions) {\n+    this.excludeRegions = excludeRegions;\n+  }\n+\n+  public void setReassignPrimaries(boolean reassignPrimaries) {\n+    this.reassignPrimaries = reassignPrimaries;\n+  }\n+\n+  public boolean getReassignPrimaries() {\n+    return reassignPrimaries;\n+  }\n+\n+  @Override\n+  @JsonIgnore\n+  public String getEndpoint() {\n+    return RESTORE_REDUNDANCY_REBALANCE_ENDPOINT;\n+  }\n+\n+  @Override\n+  public String getOperator() {\n+    return operator;\n+  }\n+\n+  public void setOperator(String operator) {", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNjYzNw==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441706637", "bodyText": "I believe this is used by serialization.", "author": "mhansonp", "createdAt": "2020-06-17T17:23:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5NTkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxODcwMQ==", "url": "https://github.com/apache/geode/pull/5249#discussion_r442418701", "bodyText": "I believe you will need to set the operator in the controller, just like what the rebalance did", "author": "jinmeiliao", "createdAt": "2020-06-18T18:23:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5NTkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA2NTU5NA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441065594", "body": "I think that variable names should start with a lower-case letter.", "bodyText": "I think that variable names should start with a lower-case letter.", "bodyHTML": "<p dir=\"auto\">I think that variable names should start with a lower-case letter.</p>", "author": "DonalEvans", "createdAt": "2020-06-16T18:40:53Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/RebalanceOperationPerformer.java", "diffHunk": "@@ -189,16 +189,16 @@ public static DistributedMember getAssociatedMembers(String region, final Intern\n \n     String[] membersName = bean.getMembers();\n     Set<DistributedMember> dsMembers = ManagementUtils.getAllMembers(cache);\n-    Iterator it = dsMembers.iterator();\n+    Iterator<DistributedMember> it = dsMembers.iterator();\n \n     boolean matchFound = false;\n \n     if (membersName.length > 1) {\n       while (it.hasNext() && !matchFound) {\n-        DistributedMember dsmember = (DistributedMember) it.next();\n+        DistributedMember DSMember = it.next();", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA2NzcyNg==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441067726", "body": "This comment should be removed.", "bodyText": "This comment should be removed.", "bodyHTML": "<p dir=\"auto\">This comment should be removed.</p>", "author": "DonalEvans", "createdAt": "2020-06-16T18:44:49Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/functions/RestoreRedundancyFunction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.functions;\n+\n+import static org.apache.geode.management.runtime.RestoreRedundancyResults.Status.ERROR;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.Logger;\n+\n+import org.apache.geode.cache.control.RestoreRedundancyOperation;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.internal.cache.control.SerializableRestoreRedundancyResultsImpl;\n+import org.apache.geode.internal.cache.execute.InternalFunction;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.management.internal.operation.RestoreRedundancyResultsImpl;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+\n+\n+public class RestoreRedundancyFunction implements InternalFunction<Object[]> {\n+  private static final Logger logger = LogService.getLogger();\n+\n+  public static final String ID = RestoreRedundancyFunction.class.getName();\n+\n+\n+  private static final long serialVersionUID = 1L;\n+\n+  @Override\n+  // this would return the RestoreRedundancyResults if successful,\n+  // it will return an exception to the caller if status is failure or any exception happens\n+  public void execute(FunctionContext<Object[]> context) {\n+    Object[] arguments = context.getArguments();\n+    RestoreRedundancyRequest request = (RestoreRedundancyRequest) arguments[0];\n+    boolean isStatusCommand = (boolean) arguments[1];\n+    RestoreRedundancyOperation redundancyOperation =\n+        context.getCache().getResourceManager().createRestoreRedundancyOperation();\n+    Set<String> includeRegionsSet = null;\n+    if (request.getIncludeRegions() != null) {\n+      includeRegionsSet = new HashSet<>(request.getIncludeRegions());\n+    }\n+    Set<String> excludeRegionsSet = null;\n+    if (request.getExcludeRegions() != null) {\n+      excludeRegionsSet = new HashSet<>(request.getExcludeRegions());\n+    }\n+    redundancyOperation.includeRegions(includeRegionsSet);\n+    redundancyOperation.excludeRegions(excludeRegionsSet);\n+    RestoreRedundancyResultsImpl results;\n+\n+    try {\n+      if (isStatusCommand) {\n+        results = (RestoreRedundancyResultsImpl) redundancyOperation.redundancyStatus();\n+      } else {\n+        redundancyOperation.shouldReassignPrimaries(request.getReassignPrimaries());\n+        results = (RestoreRedundancyResultsImpl) redundancyOperation.start().join();\n+      }\n+      if (results.getRegionOperationStatus().equals(ERROR)) {\n+        Exception e = new Exception(results.getRegionOperationMessage());\n+        throw e;\n+      }\n+      results.setSuccess(true);\n+      results.setStatusMessage(\"Success\"); // MLH change this", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3NTExNA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441075114", "body": "There is a redundant call to `setSuccess(false)` here, since it's already been called a few lines above.", "bodyText": "There is a redundant call to setSuccess(false) here, since it's already been called a few lines above.", "bodyHTML": "<p dir=\"auto\">There is a redundant call to <code>setSuccess(false)</code> here, since it's already been called a few lines above.</p>", "author": "DonalEvans", "createdAt": "2020-06-16T18:58:14Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/RestoreRedundancyPerformer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management.internal.operation;\n+\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.annotations.Immutable;\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.ResultCollector;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.serialization.Version;\n+import org.apache.geode.management.ManagementService;\n+import org.apache.geode.management.internal.functions.RestoreRedundancyFunction;\n+import org.apache.geode.management.internal.util.ManagementUtils;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+public class RestoreRedundancyPerformer\n+    implements OperationPerformer<RestoreRedundancyRequest, RestoreRedundancyResults> {\n+  @Immutable\n+  public static final Version ADDED_VERSION = Version.GEODE_1_13_0;\n+  public static final String NO_MEMBERS_WITH_VERSION_FOR_REGION =\n+      \"No members with a version greater than or equal to %s were found for region %s\";\n+  public static final String EXCEPTION_MEMBER_MESSAGE = \"Exception occurred on member %s: %s\";\n+\n+  @Override\n+  public RestoreRedundancyResults perform(Cache cache, RestoreRedundancyRequest operation) {\n+    return perform(cache, operation, false);\n+  }\n+\n+  public RestoreRedundancyResults perform(Cache cache, RestoreRedundancyRequest operation,\n+      boolean checkStatus) {\n+    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n+    List<String> includedRegionsWithNoMembers = new ArrayList<>();\n+\n+    populateLists(membersForEachRegion, includedRegionsWithNoMembers, operation.getIncludeRegions(),\n+        operation.getExcludeRegions(), (InternalCache) cache);\n+\n+    for (RebalanceOperationPerformer.MemberPRInfo prInfo : membersForEachRegion) {\n+      // Filter out any members using older versions of Geode\n+      List<DistributedMember> viableMembers = filterViableMembers(prInfo);\n+\n+      if (viableMembers.size() != 0) {\n+        // Update the MemberPRInfo with the viable members\n+        prInfo.dsMemberList = viableMembers;\n+      } else {\n+        RestoreRedundancyResultsImpl results = new RestoreRedundancyResultsImpl();\n+        results.setStatusMessage(String.format(NO_MEMBERS_WITH_VERSION_FOR_REGION,\n+            ADDED_VERSION.getName(), prInfo.region));\n+        results.setSuccess(false);\n+        return results;\n+      }\n+    }\n+\n+    List<RestoreRedundancyResults> functionResults = new ArrayList<>();\n+    Object[] functionArgs = new Object[] {operation, checkStatus};\n+    List<DistributedMember> completedMembers = new ArrayList<>();\n+    for (RebalanceOperationPerformer.MemberPRInfo memberPRInfo : membersForEachRegion) {\n+      // Check to see if an earlier function execution has already targeted a member hosting this\n+      // region. If one has, there is no point sending a function for this region as it has already\n+      // had redundancy restored\n+      if (!Collections.disjoint(completedMembers, memberPRInfo.dsMemberList)) {\n+        continue;\n+      }\n+      // Try the function on the first member for this region\n+      DistributedMember targetMember = memberPRInfo.dsMemberList.get(0);\n+      RestoreRedundancyResults functionResult = executeFunctionAndGetFunctionResult(\n+          new RestoreRedundancyFunction(), functionArgs, targetMember);\n+      if (!functionResult.getSuccess()) {\n+        // Record the error and then give up\n+        RestoreRedundancyResultsImpl results = new RestoreRedundancyResultsImpl();\n+        results.setSuccess(false);\n+        String errorString =\n+            String.format(EXCEPTION_MEMBER_MESSAGE, targetMember.getName(),\n+                functionResult.getStatusMessage());\n+        results.setStatusMessage(errorString);\n+        results.setSuccess(false);", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NjU1Nw==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441156557", "body": "These lines appear to be redundant within the for loop, since in order to reach this point, all function results must be successful. These calls to `setSuccess()` and `setStatusMessage()` could be moved outside the for loop and only called once.", "bodyText": "These lines appear to be redundant within the for loop, since in order to reach this point, all function results must be successful. These calls to setSuccess() and setStatusMessage() could be moved outside the for loop and only called once.", "bodyHTML": "<p dir=\"auto\">These lines appear to be redundant within the for loop, since in order to reach this point, all function results must be successful. These calls to <code>setSuccess()</code> and <code>setStatusMessage()</code> could be moved outside the for loop and only called once.</p>", "author": "DonalEvans", "createdAt": "2020-06-16T21:36:57Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/RestoreRedundancyPerformer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management.internal.operation;\n+\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.annotations.Immutable;\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.ResultCollector;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.serialization.Version;\n+import org.apache.geode.management.ManagementService;\n+import org.apache.geode.management.internal.functions.RestoreRedundancyFunction;\n+import org.apache.geode.management.internal.util.ManagementUtils;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+public class RestoreRedundancyPerformer\n+    implements OperationPerformer<RestoreRedundancyRequest, RestoreRedundancyResults> {\n+  @Immutable\n+  public static final Version ADDED_VERSION = Version.GEODE_1_13_0;\n+  public static final String NO_MEMBERS_WITH_VERSION_FOR_REGION =\n+      \"No members with a version greater than or equal to %s were found for region %s\";\n+  public static final String EXCEPTION_MEMBER_MESSAGE = \"Exception occurred on member %s: %s\";\n+\n+  @Override\n+  public RestoreRedundancyResults perform(Cache cache, RestoreRedundancyRequest operation) {\n+    return perform(cache, operation, false);\n+  }\n+\n+  public RestoreRedundancyResults perform(Cache cache, RestoreRedundancyRequest operation,\n+      boolean checkStatus) {\n+    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n+    List<String> includedRegionsWithNoMembers = new ArrayList<>();\n+\n+    populateLists(membersForEachRegion, includedRegionsWithNoMembers, operation.getIncludeRegions(),\n+        operation.getExcludeRegions(), (InternalCache) cache);\n+\n+    for (RebalanceOperationPerformer.MemberPRInfo prInfo : membersForEachRegion) {\n+      // Filter out any members using older versions of Geode\n+      List<DistributedMember> viableMembers = filterViableMembers(prInfo);\n+\n+      if (viableMembers.size() != 0) {\n+        // Update the MemberPRInfo with the viable members\n+        prInfo.dsMemberList = viableMembers;\n+      } else {\n+        RestoreRedundancyResultsImpl results = new RestoreRedundancyResultsImpl();\n+        results.setStatusMessage(String.format(NO_MEMBERS_WITH_VERSION_FOR_REGION,\n+            ADDED_VERSION.getName(), prInfo.region));\n+        results.setSuccess(false);\n+        return results;\n+      }\n+    }\n+\n+    List<RestoreRedundancyResults> functionResults = new ArrayList<>();\n+    Object[] functionArgs = new Object[] {operation, checkStatus};\n+    List<DistributedMember> completedMembers = new ArrayList<>();\n+    for (RebalanceOperationPerformer.MemberPRInfo memberPRInfo : membersForEachRegion) {\n+      // Check to see if an earlier function execution has already targeted a member hosting this\n+      // region. If one has, there is no point sending a function for this region as it has already\n+      // had redundancy restored\n+      if (!Collections.disjoint(completedMembers, memberPRInfo.dsMemberList)) {\n+        continue;\n+      }\n+      // Try the function on the first member for this region\n+      DistributedMember targetMember = memberPRInfo.dsMemberList.get(0);\n+      RestoreRedundancyResults functionResult = executeFunctionAndGetFunctionResult(\n+          new RestoreRedundancyFunction(), functionArgs, targetMember);\n+      if (!functionResult.getSuccess()) {\n+        // Record the error and then give up\n+        RestoreRedundancyResultsImpl results = new RestoreRedundancyResultsImpl();\n+        results.setSuccess(false);\n+        String errorString =\n+            String.format(EXCEPTION_MEMBER_MESSAGE, targetMember.getName(),\n+                functionResult.getStatusMessage());\n+        results.setStatusMessage(errorString);\n+        results.setSuccess(false);\n+        return results;\n+      }\n+      functionResults.add(functionResult);\n+      completedMembers.add(targetMember);\n+    }\n+\n+    RestoreRedundancyResultsImpl finalResult = new RestoreRedundancyResultsImpl();\n+    finalResult.addIncludedRegionsWithNoMembers(includedRegionsWithNoMembers);\n+    for (RestoreRedundancyResults functionResult : functionResults) {\n+      finalResult.addRegionResults(functionResult);\n+      finalResult.setSuccess(functionResult.getSuccess());\n+      finalResult.setStatusMessage(functionResult.getStatusMessage());", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMzYxMw==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441733613", "bodyText": "Yes, but we are setting the OperationResult implementation.", "author": "mhansonp", "createdAt": "2020-06-17T18:08:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NjU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MjgyNA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441782824", "bodyText": "I'm not sure I follow. setSuccess() and setStatusMessage() are just setting fields on the finalResult object, which is then returned once we exit the loop. Why do we need to set them multiple times, overwriting the previous value each time? Can't we just set them once?", "author": "DonalEvans", "createdAt": "2020-06-17T19:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NjU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg2ODkxOA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441868918", "bodyText": "Agreed. Since we no longer getting errors, this can be simplified.", "author": "mhansonp", "createdAt": "2020-06-17T22:29:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NjU1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2Mjg3OQ==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441162879", "body": "I'm not sure I understand why in the case that an exception is thrown, a `SerializableRestoreRedundancyResultsImpl` is returned here instead of a `RestoreRedundancyResultsImpl`.", "bodyText": "I'm not sure I understand why in the case that an exception is thrown, a SerializableRestoreRedundancyResultsImpl is returned here instead of a RestoreRedundancyResultsImpl.", "bodyHTML": "<p dir=\"auto\">I'm not sure I understand why in the case that an exception is thrown, a <code>SerializableRestoreRedundancyResultsImpl</code> is returned here instead of a <code>RestoreRedundancyResultsImpl</code>.</p>", "author": "DonalEvans", "createdAt": "2020-06-16T21:51:30Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/functions/RestoreRedundancyFunction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.functions;\n+\n+import static org.apache.geode.management.runtime.RestoreRedundancyResults.Status.ERROR;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.Logger;\n+\n+import org.apache.geode.cache.control.RestoreRedundancyOperation;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.internal.cache.control.SerializableRestoreRedundancyResultsImpl;\n+import org.apache.geode.internal.cache.execute.InternalFunction;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.management.internal.operation.RestoreRedundancyResultsImpl;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+\n+\n+public class RestoreRedundancyFunction implements InternalFunction<Object[]> {\n+  private static final Logger logger = LogService.getLogger();\n+\n+  public static final String ID = RestoreRedundancyFunction.class.getName();\n+\n+\n+  private static final long serialVersionUID = 1L;\n+\n+  @Override\n+  // this would return the RestoreRedundancyResults if successful,\n+  // it will return an exception to the caller if status is failure or any exception happens\n+  public void execute(FunctionContext<Object[]> context) {\n+    Object[] arguments = context.getArguments();\n+    RestoreRedundancyRequest request = (RestoreRedundancyRequest) arguments[0];\n+    boolean isStatusCommand = (boolean) arguments[1];\n+    RestoreRedundancyOperation redundancyOperation =\n+        context.getCache().getResourceManager().createRestoreRedundancyOperation();\n+    Set<String> includeRegionsSet = null;\n+    if (request.getIncludeRegions() != null) {\n+      includeRegionsSet = new HashSet<>(request.getIncludeRegions());\n+    }\n+    Set<String> excludeRegionsSet = null;\n+    if (request.getExcludeRegions() != null) {\n+      excludeRegionsSet = new HashSet<>(request.getExcludeRegions());\n+    }\n+    redundancyOperation.includeRegions(includeRegionsSet);\n+    redundancyOperation.excludeRegions(excludeRegionsSet);\n+    RestoreRedundancyResultsImpl results;\n+\n+    try {\n+      if (isStatusCommand) {\n+        results = (RestoreRedundancyResultsImpl) redundancyOperation.redundancyStatus();\n+      } else {\n+        redundancyOperation.shouldReassignPrimaries(request.getReassignPrimaries());\n+        results = (RestoreRedundancyResultsImpl) redundancyOperation.start().join();\n+      }\n+      if (results.getRegionOperationStatus().equals(ERROR)) {\n+        Exception e = new Exception(results.getRegionOperationMessage());\n+        throw e;\n+      }\n+      results.setSuccess(true);\n+      results.setStatusMessage(\"Success\"); // MLH change this\n+    } catch (Exception e) {\n+      results =\n+          new SerializableRestoreRedundancyResultsImpl();\n+      results.setSuccess(false);\n+      results.setStatusMessage(e.getMessage());\n+    }", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg2OTExNA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441869114", "bodyText": "I don't believe this is required either.", "author": "mhansonp", "createdAt": "2020-06-17T22:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2Mjg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwMjAwOA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r442502008", "bodyText": "Generally SerializableRestoreRedundancyResultsImpl is used as the data object that's flowing from server to locator in order to support rolling upgrade. It would be nice that the result of the function call are all in that same type.", "author": "jinmeiliao", "createdAt": "2020-06-18T21:05:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2Mjg3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3NDYxNw==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441174617", "body": "Remove this commented out code.", "bodyText": "Remove this commented out code.", "bodyHTML": "<p dir=\"auto\">Remove this commented out code.</p>", "author": "DonalEvans", "createdAt": "2020-06-16T22:20:25Z", "path": "geode-core/src/test/java/org/apache/geode/management/internal/functions/RestoreRedundancyFunctionTest.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management.internal.functions;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.control.RestoreRedundancyOperation;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.ResultSender;\n+import org.apache.geode.internal.cache.control.SerializableRestoreRedundancyResultsImpl;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+public class RestoreRedundancyFunctionTest {\n+  @SuppressWarnings(\"unchecked\")\n+  private final FunctionContext<Object[]> mockContext = mock(FunctionContext.class);\n+  private final Cache mockCache = mock(Cache.class, RETURNS_DEEP_STUBS);\n+  private final RestoreRedundancyOperation mockOperation =\n+      mock(RestoreRedundancyOperation.class, RETURNS_DEEP_STUBS);\n+  private final SerializableRestoreRedundancyResultsImpl mockResults =\n+      mock(SerializableRestoreRedundancyResultsImpl.class);\n+  private final String message = \"expected message\";\n+  private RestoreRedundancyFunction function;\n+  private ResultSender resultSender;\n+  private ArgumentCaptor<SerializableRestoreRedundancyResultsImpl> argumentCaptor;\n+  private RestoreRedundancyRequest request;\n+\n+  @Before\n+  public void setUp() throws InterruptedException, ExecutionException {\n+    function = new RestoreRedundancyFunction();\n+    when(mockContext.getCache()).thenReturn(mockCache);\n+    request = new RestoreRedundancyRequest();\n+    request.setReassignPrimaries(true);\n+\n+    when(mockContext.getArguments()).thenReturn(new Object[] {request, false});\n+    when(mockCache.getResourceManager().createRestoreRedundancyOperation())\n+        .thenReturn(mockOperation);\n+    CompletableFuture<RestoreRedundancyResults> future =\n+        CompletableFuture.completedFuture(mockResults);\n+    when(mockOperation.start()).thenReturn(future);\n+    when(mockResults.getRegionOperationMessage()).thenReturn(message);\n+    // when(mockResults.getStatusMessage()).thenReturn(message);", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3NzU0OA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441177548", "body": "Can this `RestoreRedundancyRequest` object be replaced with a mock, to avoid testing the behaviour of both it and the `RestoreRedundancyFunction` class in this unit test?", "bodyText": "Can this RestoreRedundancyRequest object be replaced with a mock, to avoid testing the behaviour of both it and the RestoreRedundancyFunction class in this unit test?", "bodyHTML": "<p dir=\"auto\">Can this <code>RestoreRedundancyRequest</code> object be replaced with a mock, to avoid testing the behaviour of both it and the <code>RestoreRedundancyFunction</code> class in this unit test?</p>", "author": "DonalEvans", "createdAt": "2020-06-16T22:28:36Z", "path": "geode-core/src/test/java/org/apache/geode/management/internal/functions/RestoreRedundancyFunctionTest.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management.internal.functions;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.control.RestoreRedundancyOperation;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.ResultSender;\n+import org.apache.geode.internal.cache.control.SerializableRestoreRedundancyResultsImpl;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+public class RestoreRedundancyFunctionTest {\n+  @SuppressWarnings(\"unchecked\")\n+  private final FunctionContext<Object[]> mockContext = mock(FunctionContext.class);\n+  private final Cache mockCache = mock(Cache.class, RETURNS_DEEP_STUBS);\n+  private final RestoreRedundancyOperation mockOperation =\n+      mock(RestoreRedundancyOperation.class, RETURNS_DEEP_STUBS);\n+  private final SerializableRestoreRedundancyResultsImpl mockResults =\n+      mock(SerializableRestoreRedundancyResultsImpl.class);\n+  private final String message = \"expected message\";\n+  private RestoreRedundancyFunction function;\n+  private ResultSender resultSender;\n+  private ArgumentCaptor<SerializableRestoreRedundancyResultsImpl> argumentCaptor;\n+  private RestoreRedundancyRequest request;\n+\n+  @Before\n+  public void setUp() throws InterruptedException, ExecutionException {\n+    function = new RestoreRedundancyFunction();\n+    when(mockContext.getCache()).thenReturn(mockCache);\n+    request = new RestoreRedundancyRequest();", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1ODM1MA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441858350", "bodyText": "I was looking at that and it does seem like its possible, but it doesn't seem worth it since the request is just a flat data class and doesn't do much in it.", "author": "mhansonp", "createdAt": "2020-06-17T22:00:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3NzU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg2MDI2Nw==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441860267", "bodyText": "If we can be reasonably sure that this will remain true, and that no additional logic will be added to RestoreRedundancyRequest in the future, then this is fine to leave as it is.", "author": "DonalEvans", "createdAt": "2020-06-17T22:05:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3NzU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg3MTIxNQ==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441871215", "bodyText": "I think it is reasonable at this point to believe that. It is basically like a work order being passed in...", "author": "mhansonp", "createdAt": "2020-06-17T22:36:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3NzU0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwMzE5MA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441203190", "body": "This variable is set in `RestoreRedundancyPerformer` using the name `checkStatus`. It might be best to have consistency between classes in terms of naming, for clarity.", "bodyText": "This variable is set in RestoreRedundancyPerformer using the name checkStatus. It might be best to have consistency between classes in terms of naming, for clarity.", "bodyHTML": "<p dir=\"auto\">This variable is set in <code>RestoreRedundancyPerformer</code> using the name <code>checkStatus</code>. It might be best to have consistency between classes in terms of naming, for clarity.</p>", "author": "DonalEvans", "createdAt": "2020-06-16T23:49:49Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/functions/RestoreRedundancyFunction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.functions;\n+\n+import static org.apache.geode.management.runtime.RestoreRedundancyResults.Status.ERROR;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.Logger;\n+\n+import org.apache.geode.cache.control.RestoreRedundancyOperation;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.internal.cache.control.SerializableRestoreRedundancyResultsImpl;\n+import org.apache.geode.internal.cache.execute.InternalFunction;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.management.internal.operation.RestoreRedundancyResultsImpl;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+\n+\n+public class RestoreRedundancyFunction implements InternalFunction<Object[]> {\n+  private static final Logger logger = LogService.getLogger();\n+\n+  public static final String ID = RestoreRedundancyFunction.class.getName();\n+\n+\n+  private static final long serialVersionUID = 1L;\n+\n+  @Override\n+  // this would return the RestoreRedundancyResults if successful,\n+  // it will return an exception to the caller if status is failure or any exception happens\n+  public void execute(FunctionContext<Object[]> context) {\n+    Object[] arguments = context.getArguments();\n+    RestoreRedundancyRequest request = (RestoreRedundancyRequest) arguments[0];\n+    boolean isStatusCommand = (boolean) arguments[1];", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwMzcyNQ==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441203725", "body": "This comment is no longer correct. The argument that controls whether or not the function should restore redundancy or just check the redundancy status is now the second argument. Also, see the comment in `RestoreRedundancyFunction` regarding the name of this variable.", "bodyText": "This comment is no longer correct. The argument that controls whether or not the function should restore redundancy or just check the redundancy status is now the second argument. Also, see the comment in RestoreRedundancyFunction regarding the name of this variable.", "bodyHTML": "<p dir=\"auto\">This comment is no longer correct. The argument that controls whether or not the function should restore redundancy or just check the redundancy status is now the second argument. Also, see the comment in <code>RestoreRedundancyFunction</code> regarding the name of this variable.</p>", "author": "DonalEvans", "createdAt": "2020-06-16T23:51:45Z", "path": "geode-core/src/test/java/org/apache/geode/management/internal/functions/RestoreRedundancyFunctionTest.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management.internal.functions;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.control.RestoreRedundancyOperation;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.ResultSender;\n+import org.apache.geode.internal.cache.control.SerializableRestoreRedundancyResultsImpl;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+public class RestoreRedundancyFunctionTest {\n+  @SuppressWarnings(\"unchecked\")\n+  private final FunctionContext<Object[]> mockContext = mock(FunctionContext.class);\n+  private final Cache mockCache = mock(Cache.class, RETURNS_DEEP_STUBS);\n+  private final RestoreRedundancyOperation mockOperation =\n+      mock(RestoreRedundancyOperation.class, RETURNS_DEEP_STUBS);\n+  private final SerializableRestoreRedundancyResultsImpl mockResults =\n+      mock(SerializableRestoreRedundancyResultsImpl.class);\n+  private final String message = \"expected message\";\n+  private RestoreRedundancyFunction function;\n+  private ResultSender resultSender;\n+  private ArgumentCaptor<SerializableRestoreRedundancyResultsImpl> argumentCaptor;\n+  private RestoreRedundancyRequest request;\n+\n+  @Before\n+  public void setUp() throws InterruptedException, ExecutionException {\n+    function = new RestoreRedundancyFunction();\n+    when(mockContext.getCache()).thenReturn(mockCache);\n+    request = new RestoreRedundancyRequest();\n+    request.setReassignPrimaries(true);\n+\n+    when(mockContext.getArguments()).thenReturn(new Object[] {request, false});\n+    when(mockCache.getResourceManager().createRestoreRedundancyOperation())\n+        .thenReturn(mockOperation);\n+    CompletableFuture<RestoreRedundancyResults> future =\n+        CompletableFuture.completedFuture(mockResults);\n+    when(mockOperation.start()).thenReturn(future);\n+    when(mockResults.getRegionOperationMessage()).thenReturn(message);\n+    // when(mockResults.getStatusMessage()).thenReturn(message);\n+    resultSender = mock(ResultSender.class);\n+    when(mockContext.getResultSender()).thenReturn(resultSender);\n+    argumentCaptor = ArgumentCaptor.forClass(SerializableRestoreRedundancyResultsImpl.class);\n+  }\n+\n+  @Test\n+  public void executeFunctionSetsFieldsOnRestoreRedundancyOperation() {\n+    String[] includeRegions = {\"includedRegion1\", \"includedRegion2\"};\n+    String[] excludeRegions = {\"excludedRegion1\", \"excludedRegion2\"};\n+    request.setExcludeRegions(Arrays.asList(excludeRegions));\n+    request.setIncludeRegions(Arrays.asList(includeRegions));\n+\n+    function.execute(mockContext);\n+\n+    verify(mockOperation).includeRegions(new HashSet<>(request.getIncludeRegions()));\n+    verify(mockOperation).excludeRegions(new HashSet<>(request.getExcludeRegions()));\n+    verify(mockOperation).shouldReassignPrimaries(request.getReassignPrimaries());\n+  }\n+\n+  @Test\n+  public void executeFunctionSetsIncludedAndExcludedRegionsOnRestoreRedundancyOperationWhenNull() {\n+    function.execute(mockContext);\n+\n+    verify(mockOperation).includeRegions(null);\n+    verify(mockOperation).excludeRegions(null);\n+    verify(mockOperation).shouldReassignPrimaries(true);\n+  }\n+\n+  @Test\n+  public void executeFunctionUsesStatusMethodWhenIsStatusCommandIsTrue() {\n+    when(mockOperation.redundancyStatus()).thenReturn(mockResults);\n+    when(mockResults.getRegionOperationStatus())\n+        .thenReturn(RestoreRedundancyResults.Status.SUCCESS);\n+    // isStatusCommand is the fourth argument passed to the function", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwNjI1MA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441206250", "body": "This test name could be a little more descriptive, saying what the expected behaviour is given the test conditions, such as \"executeFunctionReturnsFailureResultWhenExceptionIsThrownDuringOperation\". Also, an exception is never thrown from this method, so the `throws Exception` can be removed from the method signature.", "bodyText": "This test name could be a little more descriptive, saying what the expected behaviour is given the test conditions, such as \"executeFunctionReturnsFailureResultWhenExceptionIsThrownDuringOperation\". Also, an exception is never thrown from this method, so the throws Exception can be removed from the method signature.", "bodyHTML": "<p dir=\"auto\">This test name could be a little more descriptive, saying what the expected behaviour is given the test conditions, such as \"executeFunctionReturnsFailureResultWhenExceptionIsThrownDuringOperation\". Also, an exception is never thrown from this method, so the <code>throws Exception</code> can be removed from the method signature.</p>", "author": "DonalEvans", "createdAt": "2020-06-17T00:00:15Z", "path": "geode-core/src/test/java/org/apache/geode/management/internal/functions/RestoreRedundancyFunctionTest.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management.internal.functions;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.control.RestoreRedundancyOperation;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.ResultSender;\n+import org.apache.geode.internal.cache.control.SerializableRestoreRedundancyResultsImpl;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+public class RestoreRedundancyFunctionTest {\n+  @SuppressWarnings(\"unchecked\")\n+  private final FunctionContext<Object[]> mockContext = mock(FunctionContext.class);\n+  private final Cache mockCache = mock(Cache.class, RETURNS_DEEP_STUBS);\n+  private final RestoreRedundancyOperation mockOperation =\n+      mock(RestoreRedundancyOperation.class, RETURNS_DEEP_STUBS);\n+  private final SerializableRestoreRedundancyResultsImpl mockResults =\n+      mock(SerializableRestoreRedundancyResultsImpl.class);\n+  private final String message = \"expected message\";\n+  private RestoreRedundancyFunction function;\n+  private ResultSender resultSender;\n+  private ArgumentCaptor<SerializableRestoreRedundancyResultsImpl> argumentCaptor;\n+  private RestoreRedundancyRequest request;\n+\n+  @Before\n+  public void setUp() throws InterruptedException, ExecutionException {\n+    function = new RestoreRedundancyFunction();\n+    when(mockContext.getCache()).thenReturn(mockCache);\n+    request = new RestoreRedundancyRequest();\n+    request.setReassignPrimaries(true);\n+\n+    when(mockContext.getArguments()).thenReturn(new Object[] {request, false});\n+    when(mockCache.getResourceManager().createRestoreRedundancyOperation())\n+        .thenReturn(mockOperation);\n+    CompletableFuture<RestoreRedundancyResults> future =\n+        CompletableFuture.completedFuture(mockResults);\n+    when(mockOperation.start()).thenReturn(future);\n+    when(mockResults.getRegionOperationMessage()).thenReturn(message);\n+    // when(mockResults.getStatusMessage()).thenReturn(message);\n+    resultSender = mock(ResultSender.class);\n+    when(mockContext.getResultSender()).thenReturn(resultSender);\n+    argumentCaptor = ArgumentCaptor.forClass(SerializableRestoreRedundancyResultsImpl.class);\n+  }\n+\n+  @Test\n+  public void executeFunctionSetsFieldsOnRestoreRedundancyOperation() {\n+    String[] includeRegions = {\"includedRegion1\", \"includedRegion2\"};\n+    String[] excludeRegions = {\"excludedRegion1\", \"excludedRegion2\"};\n+    request.setExcludeRegions(Arrays.asList(excludeRegions));\n+    request.setIncludeRegions(Arrays.asList(includeRegions));\n+\n+    function.execute(mockContext);\n+\n+    verify(mockOperation).includeRegions(new HashSet<>(request.getIncludeRegions()));\n+    verify(mockOperation).excludeRegions(new HashSet<>(request.getExcludeRegions()));\n+    verify(mockOperation).shouldReassignPrimaries(request.getReassignPrimaries());\n+  }\n+\n+  @Test\n+  public void executeFunctionSetsIncludedAndExcludedRegionsOnRestoreRedundancyOperationWhenNull() {\n+    function.execute(mockContext);\n+\n+    verify(mockOperation).includeRegions(null);\n+    verify(mockOperation).excludeRegions(null);\n+    verify(mockOperation).shouldReassignPrimaries(true);\n+  }\n+\n+  @Test\n+  public void executeFunctionUsesStatusMethodWhenIsStatusCommandIsTrue() {\n+    when(mockOperation.redundancyStatus()).thenReturn(mockResults);\n+    when(mockResults.getRegionOperationStatus())\n+        .thenReturn(RestoreRedundancyResults.Status.SUCCESS);\n+    // isStatusCommand is the fourth argument passed to the function\n+    when(mockContext.getArguments()).thenReturn(new Object[] {request, true});\n+\n+    function.execute(mockContext);\n+\n+    verify(mockOperation, times(1)).redundancyStatus();\n+    verify(mockOperation, times(0)).start();\n+  }\n+\n+  @Test\n+  public void executeFunctionReturnsErrorWhenResultStatusIsError() {\n+    when(mockResults.getRegionOperationStatus()).thenReturn(RestoreRedundancyResults.Status.ERROR);\n+    function.execute(mockContext);\n+    verify(resultSender).lastResult(argumentCaptor.capture());\n+\n+    RestoreRedundancyResults result = argumentCaptor.getValue();\n+    assertThat(result.getSuccess()).isFalse();\n+    assertThat(result.getStatusMessage()).isEqualTo(message);\n+  }\n+\n+  @Test\n+  // The function was able to execute successfully but redundancy was not able to be established for\n+  // at least one region\n+  public void executeFunctionReturnsOkWhenResultStatusIsFailure() {\n+    when(mockResults.getRegionOperationStatus())\n+        .thenReturn(RestoreRedundancyResults.Status.FAILURE);\n+    function.execute(mockContext);\n+    verify(resultSender).lastResult(argumentCaptor.capture());\n+\n+    SerializableRestoreRedundancyResultsImpl result = argumentCaptor.getValue();\n+    verify(result).setSuccess(true);\n+    assertThat(result.getRegionOperationStatus())\n+        .isEqualTo(RestoreRedundancyResults.Status.FAILURE);\n+    assertThat(result).isSameAs(mockResults);\n+  }\n+\n+  @Test\n+  public void executeFunctionReturnsOkWhenResultStatusIsSuccess() {\n+    when(mockResults.getRegionOperationStatus())\n+        .thenReturn(RestoreRedundancyResults.Status.SUCCESS);\n+    function.execute(mockContext);\n+    verify(resultSender).lastResult(argumentCaptor.capture());\n+\n+    SerializableRestoreRedundancyResultsImpl result = argumentCaptor.getValue();\n+    verify(result).setSuccess(true);\n+    assertThat(result.getRegionOperationStatus())\n+        .isEqualTo(RestoreRedundancyResults.Status.SUCCESS);\n+    assertThat(result).isSameAs(mockResults);\n+  }\n+\n+  @Test\n+  public void whenFunctionThrowException() throws Exception {", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMjQ0MQ==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441212441", "body": "This comment does not seem entirely accurate. The method either returns `null` or a `RestoreRedundancyResults` object.", "bodyText": "This comment does not seem entirely accurate. The method either returns null or a RestoreRedundancyResults object.", "bodyHTML": "<p dir=\"auto\">This comment does not seem entirely accurate. The method either returns <code>null</code> or a <code>RestoreRedundancyResults</code> object.</p>", "author": "DonalEvans", "createdAt": "2020-06-17T00:22:52Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/RestoreRedundancyPerformer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management.internal.operation;\n+\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.annotations.Immutable;\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.ResultCollector;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.serialization.Version;\n+import org.apache.geode.management.ManagementService;\n+import org.apache.geode.management.internal.functions.RestoreRedundancyFunction;\n+import org.apache.geode.management.internal.util.ManagementUtils;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+public class RestoreRedundancyPerformer\n+    implements OperationPerformer<RestoreRedundancyRequest, RestoreRedundancyResults> {\n+  @Immutable\n+  public static final Version ADDED_VERSION = Version.GEODE_1_13_0;\n+  public static final String NO_MEMBERS_WITH_VERSION_FOR_REGION =\n+      \"No members with a version greater than or equal to %s were found for region %s\";\n+  public static final String EXCEPTION_MEMBER_MESSAGE = \"Exception occurred on member %s: %s\";\n+\n+  @Override\n+  public RestoreRedundancyResults perform(Cache cache, RestoreRedundancyRequest operation) {\n+    return perform(cache, operation, false);\n+  }\n+\n+  public RestoreRedundancyResults perform(Cache cache, RestoreRedundancyRequest operation,\n+      boolean checkStatus) {\n+    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();\n+    List<String> includedRegionsWithNoMembers = new ArrayList<>();\n+\n+    populateLists(membersForEachRegion, includedRegionsWithNoMembers, operation.getIncludeRegions(),\n+        operation.getExcludeRegions(), (InternalCache) cache);\n+\n+    for (RebalanceOperationPerformer.MemberPRInfo prInfo : membersForEachRegion) {\n+      // Filter out any members using older versions of Geode\n+      List<DistributedMember> viableMembers = filterViableMembers(prInfo);\n+\n+      if (viableMembers.size() != 0) {\n+        // Update the MemberPRInfo with the viable members\n+        prInfo.dsMemberList = viableMembers;\n+      } else {\n+        RestoreRedundancyResultsImpl results = new RestoreRedundancyResultsImpl();\n+        results.setStatusMessage(String.format(NO_MEMBERS_WITH_VERSION_FOR_REGION,\n+            ADDED_VERSION.getName(), prInfo.region));\n+        results.setSuccess(false);\n+        return results;\n+      }\n+    }\n+\n+    List<RestoreRedundancyResults> functionResults = new ArrayList<>();\n+    Object[] functionArgs = new Object[] {operation, checkStatus};\n+    List<DistributedMember> completedMembers = new ArrayList<>();\n+    for (RebalanceOperationPerformer.MemberPRInfo memberPRInfo : membersForEachRegion) {\n+      // Check to see if an earlier function execution has already targeted a member hosting this\n+      // region. If one has, there is no point sending a function for this region as it has already\n+      // had redundancy restored\n+      if (!Collections.disjoint(completedMembers, memberPRInfo.dsMemberList)) {\n+        continue;\n+      }\n+      // Try the function on the first member for this region\n+      DistributedMember targetMember = memberPRInfo.dsMemberList.get(0);\n+      RestoreRedundancyResults functionResult = executeFunctionAndGetFunctionResult(\n+          new RestoreRedundancyFunction(), functionArgs, targetMember);\n+      if (!functionResult.getSuccess()) {\n+        // Record the error and then give up\n+        RestoreRedundancyResultsImpl results = new RestoreRedundancyResultsImpl();\n+        results.setSuccess(false);\n+        String errorString =\n+            String.format(EXCEPTION_MEMBER_MESSAGE, targetMember.getName(),\n+                functionResult.getStatusMessage());\n+        results.setStatusMessage(errorString);\n+        results.setSuccess(false);\n+        return results;\n+      }\n+      functionResults.add(functionResult);\n+      completedMembers.add(targetMember);\n+    }\n+\n+    RestoreRedundancyResultsImpl finalResult = new RestoreRedundancyResultsImpl();\n+    finalResult.addIncludedRegionsWithNoMembers(includedRegionsWithNoMembers);\n+    for (RestoreRedundancyResults functionResult : functionResults) {\n+      finalResult.addRegionResults(functionResult);\n+      finalResult.setSuccess(functionResult.getSuccess());\n+      finalResult.setStatusMessage(functionResult.getStatusMessage());\n+    }\n+    return finalResult;\n+  }\n+\n+  // this returns either an Exception or RestoreRedundancyResults", "originalCommit": "ea31eacc86591ebdcf28f57cc372eb6cd0a25031", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1bbd760f1cdfe7372901666c08308f3108fe77d0", "url": "https://github.com/apache/geode/commit/1bbd760f1cdfe7372901666c08308f3108fe77d0", "message": "Making requested changes.", "committedDate": "2020-06-17T21:52:52Z", "type": "commit"}, {"oid": "e2a78cd39a34d40db36099aaa32644aa08e5be13", "url": "https://github.com/apache/geode/commit/e2a78cd39a34d40db36099aaa32644aa08e5be13", "message": "Making requested changes part 2", "committedDate": "2020-06-17T22:34:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg3MzkwNg==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441873906", "body": "Incomplete comment here?", "bodyText": "Incomplete comment here?", "bodyHTML": "<p dir=\"auto\">Incomplete comment here?</p>", "author": "DonalEvans", "createdAt": "2020-06-17T22:45:01Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/RestoreRedundancyPerformer.java", "diffHunk": "@@ -112,14 +114,14 @@ public RestoreRedundancyResults perform(Cache cache, RestoreRedundancyRequest op\n     return finalResult;\n   }\n \n-  // this returns either an Exception or RestoreRedundancyResults\n+  // this returns RestoreRedundancyResults or null based on", "originalCommit": "1bbd760f1cdfe7372901666c08308f3108fe77d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg3Njc5MQ==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441876791", "bodyText": "Good catch. Task switching is bad. The comment just restates what is visible in the code so I deleted it.", "author": "mhansonp", "createdAt": "2020-06-17T22:54:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg3MzkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg3Njg2MA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r441876860", "bodyText": "Thanks for your attention to detail.", "author": "mhansonp", "createdAt": "2020-06-17T22:54:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg3MzkwNg=="}], "type": "inlineReview"}, {"oid": "7032d1f8ebad1f0032fa720863fbbba1d2fce1ba", "url": "https://github.com/apache/geode/commit/7032d1f8ebad1f0032fa720863fbbba1d2fce1ba", "message": "Making requested changes part 3", "committedDate": "2020-06-17T23:00:19Z", "type": "commit"}, {"oid": "f54714487cfb98f9b68dafdeb771234da8b727d0", "url": "https://github.com/apache/geode/commit/f54714487cfb98f9b68dafdeb771234da8b727d0", "message": "Changes for integration test failures\n- Changes in serialized classes necessitate changes to\nsanctioned serializable files.", "committedDate": "2020-06-17T23:12:33Z", "type": "commit"}, {"oid": "21483c6d17a25febf2229603d0a2eceef953a3ad", "url": "https://github.com/apache/geode/commit/21483c6d17a25febf2229603d0a2eceef953a3ad", "message": "add @Experimental tag\nuse SerializableRestoreRedundancyResultsImpl in the function\nrename and add tests\nGet rid of ERROR status in RestoreRedundancyStatus", "committedDate": "2020-06-18T21:59:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyNjMzNA==", "url": "https://github.com/apache/geode/pull/5249#discussion_r442526334", "body": "@DonalEvans Please take a look at this change. We get rid of the ERROR status here because we found it's never used. No one is able to set the status to that state, and the getter of it would only return either SUCCESS or FAILURE. Even on develop branch, this state seems unreachable.", "bodyText": "@DonalEvans Please take a look at this change. We get rid of the ERROR status here because we found it's never used. No one is able to set the status to that state, and the getter of it would only return either SUCCESS or FAILURE. Even on develop branch, this state seems unreachable.", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/DonalEvans/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/DonalEvans\">@DonalEvans</a> Please take a look at this change. We get rid of the ERROR status here because we found it's never used. No one is able to set the status to that state, and the getter of it would only return either SUCCESS or FAILURE. Even on develop branch, this state seems unreachable.</p>", "author": "jinmeiliao", "createdAt": "2020-06-18T22:01:38Z", "path": "geode-management/src/main/java/org/apache/geode/management/runtime/RestoreRedundancyResults.java", "diffHunk": "@@ -18,28 +18,28 @@\n import java.util.List;\n import java.util.Map;\n \n+import org.apache.geode.annotations.Experimental;\n+\n /**\n  * A class to collect the results of restore redundancy operations for one or more regions and\n  * determine the success of failure of the operation.\n  */\n+@Experimental\n public interface RestoreRedundancyResults extends OperationResult {\n \n   /**\n    * {@link #SUCCESS} is defined as every included region having fully satisfied redundancy.\n    * {@link #FAILURE} is defined as at least one region that is configured to have redundant copies\n    * having fewer than its configured number of redundant copies.\n-   * {@link #ERROR} is for cases when the restore redundancy operation was unable to begin or threw\n-   * an exception.\n    */\n   enum Status {\n     SUCCESS,\n-    FAILURE,\n-    ERROR", "originalCommit": "21483c6d17a25febf2229603d0a2eceef953a3ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzNjIxMg==", "url": "https://github.com/apache/geode/pull/5249#discussion_r442536212", "bodyText": "You're correct, this was originally intended to be a way to capture the case that an exception was thrown during the  doRestoreRedundancy() method in RestoreRedundancyOperationImpl, but in order to keep the implementation as similar to that found in RebalanceOperationImpl as possible, this was not implemented. It should be fine to remove it.", "author": "DonalEvans", "createdAt": "2020-06-18T22:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyNjMzNA=="}], "type": "inlineReview"}]}