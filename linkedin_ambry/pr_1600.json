{"pr_number": 1600, "pr_title": "Mark container status inactive in Zk", "pr_author": "SophieGuo410", "pr_createdAt": "2020-08-05T00:25:36Z", "pr_url": "https://github.com/linkedin/ambry/pull/1600", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY4NjczMw==", "url": "https://github.com/linkedin/ambry/pull/1600#discussion_r465686733", "body": "There can be some situations where this update will fail to persist if someone is making other account updates in Nuage concurrently. This is because the update will fail if the account's \"snapshotVersion\" field does not match. This field is used to make sure that the base account that was modified matches the current account stored in zookeeper so that one update does not erase someone else's change unexpectedly.\r\n\r\nI would suggest using a compareAndSet style loop (checking the return value of `updateAccounts` to see if the update went through):\r\n```java\r\n    if (inactiveContainerCandidateSet != null) {\r\n      boolean successful = false;\r\n      while (!successful) {\r\n        Map<Short, Account> accountToUpdateMap = new HashMap<>();\r\n        inactiveContainerCandidateSet.forEach(container -> {\r\n          // start by getting account, and then get container from account to make sure that we are editing the most\r\n          // recent snapshot\r\n          short accountId = container.getParentAccountId();\r\n          Account accountToEdit = accountToUpdateMap.computeIfAbsent(accountId, this::getAccountById);\r\n          Container containerToEdit = accountToEdit.getContainerById(container.getId());\r\n          Container editedContainer =\r\n              new ContainerBuilder(containerToEdit).setStatus(Container.ContainerStatus.INACTIVE).build();\r\n          accountToUpdateMap.put(accountId,\r\n              new AccountBuilder(accountToEdit).addOrUpdateContainer(editedContainer).build());\r\n        });\r\n        // Note that this assumes that unsuccessful updates are always retriable (like snapshot version violations).\r\n        // If there is something unrecoverable wrong, this method will get stuck in this loop. \r\n        // Limit on number of retries may be needed.\r\n        successful = updateAccounts(accountToUpdateMap.values());\r\n      }\r\n    }\r\n```\r\n", "bodyText": "There can be some situations where this update will fail to persist if someone is making other account updates in Nuage concurrently. This is because the update will fail if the account's \"snapshotVersion\" field does not match. This field is used to make sure that the base account that was modified matches the current account stored in zookeeper so that one update does not erase someone else's change unexpectedly.\nI would suggest using a compareAndSet style loop (checking the return value of updateAccounts to see if the update went through):\n    if (inactiveContainerCandidateSet != null) {\n      boolean successful = false;\n      while (!successful) {\n        Map<Short, Account> accountToUpdateMap = new HashMap<>();\n        inactiveContainerCandidateSet.forEach(container -> {\n          // start by getting account, and then get container from account to make sure that we are editing the most\n          // recent snapshot\n          short accountId = container.getParentAccountId();\n          Account accountToEdit = accountToUpdateMap.computeIfAbsent(accountId, this::getAccountById);\n          Container containerToEdit = accountToEdit.getContainerById(container.getId());\n          Container editedContainer =\n              new ContainerBuilder(containerToEdit).setStatus(Container.ContainerStatus.INACTIVE).build();\n          accountToUpdateMap.put(accountId,\n              new AccountBuilder(accountToEdit).addOrUpdateContainer(editedContainer).build());\n        });\n        // Note that this assumes that unsuccessful updates are always retriable (like snapshot version violations).\n        // If there is something unrecoverable wrong, this method will get stuck in this loop. \n        // Limit on number of retries may be needed.\n        successful = updateAccounts(accountToUpdateMap.values());\n      }\n    }", "bodyHTML": "<p dir=\"auto\">There can be some situations where this update will fail to persist if someone is making other account updates in Nuage concurrently. This is because the update will fail if the account's \"snapshotVersion\" field does not match. This field is used to make sure that the base account that was modified matches the current account stored in zookeeper so that one update does not erase someone else's change unexpectedly.</p>\n<p dir=\"auto\">I would suggest using a compareAndSet style loop (checking the return value of <code>updateAccounts</code> to see if the update went through):</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    if (inactiveContainerCandidateSet != null) {\n      boolean successful = false;\n      while (!successful) {\n        Map&lt;Short, Account&gt; accountToUpdateMap = new HashMap&lt;&gt;();\n        inactiveContainerCandidateSet.forEach(container -&gt; {\n          // start by getting account, and then get container from account to make sure that we are editing the most\n          // recent snapshot\n          short accountId = container.getParentAccountId();\n          Account accountToEdit = accountToUpdateMap.computeIfAbsent(accountId, this::getAccountById);\n          Container containerToEdit = accountToEdit.getContainerById(container.getId());\n          Container editedContainer =\n              new ContainerBuilder(containerToEdit).setStatus(Container.ContainerStatus.INACTIVE).build();\n          accountToUpdateMap.put(accountId,\n              new AccountBuilder(accountToEdit).addOrUpdateContainer(editedContainer).build());\n        });\n        // Note that this assumes that unsuccessful updates are always retriable (like snapshot version violations).\n        // If there is something unrecoverable wrong, this method will get stuck in this loop. \n        // Limit on number of retries may be needed.\n        successful = updateAccounts(accountToUpdateMap.values());\n      }\n    }\"><pre>    <span class=\"pl-k\">if</span> (inactiveContainerCandidateSet <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {\n      <span class=\"pl-k\">boolean</span> successful <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span>;\n      <span class=\"pl-k\">while</span> (<span class=\"pl-k\">!</span>successful) {\n        <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">Short</span>, <span class=\"pl-smi\">Account</span>&gt;</span> accountToUpdateMap <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;&gt;</span>();\n        inactiveContainerCandidateSet<span class=\"pl-k\">.</span>forEach(container <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {\n          <span class=\"pl-c\"><span class=\"pl-c\">//</span> start by getting account, and then get container from account to make sure that we are editing the most</span>\n          <span class=\"pl-c\"><span class=\"pl-c\">//</span> recent snapshot</span>\n          <span class=\"pl-k\">short</span> accountId <span class=\"pl-k\">=</span> container<span class=\"pl-k\">.</span>getParentAccountId();\n          <span class=\"pl-smi\">Account</span> accountToEdit <span class=\"pl-k\">=</span> accountToUpdateMap<span class=\"pl-k\">.</span>computeIfAbsent(accountId, <span class=\"pl-c1\">this</span><span class=\"pl-k\">::</span>getAccountById);\n          <span class=\"pl-smi\">Container</span> containerToEdit <span class=\"pl-k\">=</span> accountToEdit<span class=\"pl-k\">.</span>getContainerById(container<span class=\"pl-k\">.</span>getId());\n          <span class=\"pl-smi\">Container</span> editedContainer <span class=\"pl-k\">=</span>\n              <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ContainerBuilder</span>(containerToEdit)<span class=\"pl-k\">.</span>setStatus(<span class=\"pl-smi\">Container</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">ContainerStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>INACTIVE</span>)<span class=\"pl-k\">.</span>build();\n          accountToUpdateMap<span class=\"pl-k\">.</span>put(accountId,\n              <span class=\"pl-k\">new</span> <span class=\"pl-smi\">AccountBuilder</span>(accountToEdit)<span class=\"pl-k\">.</span>addOrUpdateContainer(editedContainer)<span class=\"pl-k\">.</span>build());\n        });\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Note that this assumes that unsuccessful updates are always retriable (like snapshot version violations).</span>\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> If there is something unrecoverable wrong, this method will get stuck in this loop. </span>\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Limit on number of retries may be needed.</span>\n        successful <span class=\"pl-k\">=</span> updateAccounts(accountToUpdateMap<span class=\"pl-k\">.</span>values());\n      }\n    }</pre></div>", "author": "cgtz", "createdAt": "2020-08-05T12:22:56Z", "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -382,8 +382,17 @@ public void selectInactiveContainersAndMarkInZK(StatsSnapshot statsSnapshot) {\n    * Mark the given {@link Container}s status to INACTIVE in zookeeper.\n    * @param inactiveContainerCandidateSet DELETE_IN_PROGRESS {@link Container} set which has been deleted successfully during compaction.\n    */\n-  private void markContainerInactiveOnZk(Set<Container> inactiveContainerCandidateSet) {\n-    // TODO: mark the given containers status to INACTIVE in zookeeper.\n+  void markContainerInactiveOnZk(Set<Container> inactiveContainerCandidateSet) {\n+    if (inactiveContainerCandidateSet != null) {\n+      Map<Short, Account> accountToUpdateMap = new HashMap<>();\n+      inactiveContainerCandidateSet.forEach(container -> {\n+        container = new ContainerBuilder(container).setStatus(Container.ContainerStatus.INACTIVE).build();\n+        short accountId = container.getParentAccountId();\n+        Account account = new AccountBuilder(accountToUpdateMap.getOrDefault(accountId, getAccountById(accountId))).addOrUpdateContainer(container).build();\n+        accountToUpdateMap.put(accountId, account);\n+      });\n+      updateAccounts(accountToUpdateMap.values());", "originalCommit": "43ee3bc2a2095fceb4f55fdf9b3b04a56c9748f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1NTAwMg==", "url": "https://github.com/linkedin/ambry/pull/1600#discussion_r466555002", "bodyText": "Thanks for the reminding. I've updated to resolve this concurrency issue.", "author": "SophieGuo410", "createdAt": "2020-08-06T17:01:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY4NjczMw=="}], "type": "inlineReview"}, {"oid": "43a52267e675a63403a4c1af3813d4176fb2ce1f", "url": "https://github.com/linkedin/ambry/commit/43a52267e675a63403a4c1af3813d4176fb2ce1f", "message": "Update status for inactive containers on zk", "committedDate": "2020-08-06T05:16:13Z", "type": "forcePushed"}, {"oid": "da412b1a3fbb3879218de5f7c99ca23ef8dcb529", "url": "https://github.com/linkedin/ambry/commit/da412b1a3fbb3879218de5f7c99ca23ef8dcb529", "message": "Update status for inactive containers on zk", "committedDate": "2020-08-06T05:25:03Z", "type": "commit"}, {"oid": "da412b1a3fbb3879218de5f7c99ca23ef8dcb529", "url": "https://github.com/linkedin/ambry/commit/da412b1a3fbb3879218de5f7c99ca23ef8dcb529", "message": "Update status for inactive containers on zk", "committedDate": "2020-08-06T05:25:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NDIxMw==", "url": "https://github.com/linkedin/ambry/pull/1600#discussion_r466154213", "body": "nit: can we call this maxRetryCountOnUpdateFailure ?", "bodyText": "nit: can we call this maxRetryCountOnUpdateFailure ?", "bodyHTML": "<p dir=\"auto\">nit: can we call this maxRetryCountOnUpdateFailure ?</p>", "author": "jsjtzyy", "createdAt": "2020-08-06T05:27:30Z", "path": "ambry-api/src/main/java/com/github/ambry/config/HelixAccountServiceConfig.java", "diffHunk": "@@ -99,6 +100,20 @@\n   @Default(\"100\")\n   public final int totalNumberOfVersionToKeep;\n \n+  /**\n+   * The number of retry times when the update accounts fails by marking delete_in_progress container status to inactive;\n+   */\n+  @Config(RETRY_COUNT)\n+  @Default(\"10\")\n+  public final int retryCount;", "originalCommit": "da412b1a3fbb3879218de5f7c99ca23ef8dcb529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1NTExNw==", "url": "https://github.com/linkedin/ambry/pull/1600#discussion_r466555117", "bodyText": "Updated.", "author": "SophieGuo410", "createdAt": "2020-08-06T17:01:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NDIxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NDUxMA==", "url": "https://github.com/linkedin/ambry/pull/1600#discussion_r466154510", "body": "Can we add time unit into the name? Like retryDelaySeconds or retryDelayMs ?", "bodyText": "Can we add time unit into the name? Like retryDelaySeconds or retryDelayMs ?", "bodyHTML": "<p dir=\"auto\">Can we add time unit into the name? Like retryDelaySeconds or retryDelayMs ?</p>", "author": "jsjtzyy", "createdAt": "2020-08-06T05:28:29Z", "path": "ambry-api/src/main/java/com/github/ambry/config/HelixAccountServiceConfig.java", "diffHunk": "@@ -99,6 +100,20 @@\n   @Default(\"100\")\n   public final int totalNumberOfVersionToKeep;\n \n+  /**\n+   * The number of retry times when the update accounts fails by marking delete_in_progress container status to inactive;\n+   */\n+  @Config(RETRY_COUNT)\n+  @Default(\"10\")\n+  public final int retryCount;\n+\n+  /**\n+   * The sleep time between each retry action when the update accounts fails by marking delete_in_progress container status to inactive;\n+   */\n+  @Config(RETRY_DELAY)\n+  @Default(\"1000\")\n+  public final long retryDelay;", "originalCommit": "da412b1a3fbb3879218de5f7c99ca23ef8dcb529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1NTIxMw==", "url": "https://github.com/linkedin/ambry/pull/1600#discussion_r466555213", "bodyText": "Sure. Updated.", "author": "SophieGuo410", "createdAt": "2020-08-06T17:01:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NDUxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NTM4MA==", "url": "https://github.com/linkedin/ambry/pull/1600#discussion_r466155380", "body": "```\r\nlogger.error(\"Failed to mark containers INACTIVE in set : {}  after {} retries\", inactiveContainerCandidateSet, config.retryCount);\r\n```", "bodyText": "logger.error(\"Failed to mark containers INACTIVE in set : {}  after {} retries\", inactiveContainerCandidateSet, config.retryCount);", "bodyHTML": "<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"logger.error(&quot;Failed to mark containers INACTIVE in set : {}  after {} retries&quot;, inactiveContainerCandidateSet, config.retryCount);\n\"><pre><code>logger.error(\"Failed to mark containers INACTIVE in set : {}  after {} retries\", inactiveContainerCandidateSet, config.retryCount);\n</code></pre></div>", "author": "jsjtzyy", "createdAt": "2020-08-06T05:31:14Z", "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -375,15 +375,44 @@ private void onAccountChangeMessage(String topic, String message) {\n    */\n   public void selectInactiveContainersAndMarkInZK(StatsSnapshot statsSnapshot) {\n     Set<Container> inactiveContainerCandidateSet = selectInactiveContainerCandidates(statsSnapshot);\n-    markContainerInactiveOnZk(inactiveContainerCandidateSet);\n+    try {\n+      markContainerInactiveOnZk(inactiveContainerCandidateSet);\n+    } catch (InterruptedException e) {\n+      logger.error(\"Mark inactive container in zookeeper is interrupted\", e);\n+    }\n   }\n \n   /**\n    * Mark the given {@link Container}s status to INACTIVE in zookeeper.\n    * @param inactiveContainerCandidateSet DELETE_IN_PROGRESS {@link Container} set which has been deleted successfully during compaction.\n    */\n-  private void markContainerInactiveOnZk(Set<Container> inactiveContainerCandidateSet) {\n-    // TODO: mark the given containers status to INACTIVE in zookeeper.\n+  void markContainerInactiveOnZk(Set<Container> inactiveContainerCandidateSet) throws InterruptedException {\n+    if (inactiveContainerCandidateSet != null) {\n+      boolean successful = false;\n+      int retry = 0;\n+      while (!successful && retry < config.retryCount) {\n+        Map<Short, Account> accountToUpdateMap = new HashMap<>();\n+        inactiveContainerCandidateSet.forEach(container -> {\n+          // start by getting account, and then get container from account to make sure that we are editing the most\n+          // recent snapshot\n+          short accountId = container.getParentAccountId();\n+          Account accountToEdit = accountToUpdateMap.computeIfAbsent(accountId, this::getAccountById);\n+          Container containerToEdit = accountToEdit.getContainerById(container.getId());\n+          Container editedContainer =\n+                  new ContainerBuilder(containerToEdit).setStatus(Container.ContainerStatus.INACTIVE).build();\n+          accountToUpdateMap.put(accountId,\n+                  new AccountBuilder(accountToEdit).addOrUpdateContainer(editedContainer).build());\n+        });\n+        successful = updateAccounts(accountToUpdateMap.values());\n+        if (!successful) {\n+          retry++;\n+          Thread.sleep(config.retryDelay);\n+        }\n+      }\n+      if (!successful) {\n+        logger.error(\"Container failed to be marked as INACTIVE in inactiveContainerCandidateSet : {}\", inactiveContainerCandidateSet);", "originalCommit": "da412b1a3fbb3879218de5f7c99ca23ef8dcb529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NTU3MA==", "url": "https://github.com/linkedin/ambry/pull/1600#discussion_r466155570", "bodyText": "Also I am considering if we need a metric here for alerting purpose.", "author": "jsjtzyy", "createdAt": "2020-08-06T05:31:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NTM4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1NTQ5NA==", "url": "https://github.com/linkedin/ambry/pull/1600#discussion_r466555494", "bodyText": "Updated and add the metric.", "author": "SophieGuo410", "createdAt": "2020-08-06T17:02:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NTM4MA=="}], "type": "inlineReview"}, {"oid": "5f862e9279ee77ae35614ef6f5ad68bf69b3662d", "url": "https://github.com/linkedin/ambry/commit/5f862e9279ee77ae35614ef6f5ad68bf69b3662d", "message": "address comments", "committedDate": "2020-08-06T16:22:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2NzIxOQ==", "url": "https://github.com/linkedin/ambry/pull/1600#discussion_r466567219", "body": "minor:  rename to `success` ? ", "bodyText": "minor:  rename to success ?", "bodyHTML": "<p dir=\"auto\">minor:  rename to <code>success</code> ?</p>", "author": "zzmao", "createdAt": "2020-08-06T17:21:26Z", "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -375,15 +375,45 @@ private void onAccountChangeMessage(String topic, String message) {\n    */\n   public void selectInactiveContainersAndMarkInZK(StatsSnapshot statsSnapshot) {\n     Set<Container> inactiveContainerCandidateSet = selectInactiveContainerCandidates(statsSnapshot);\n-    markContainerInactiveOnZk(inactiveContainerCandidateSet);\n+    try {\n+      markContainerInactiveOnZk(inactiveContainerCandidateSet);\n+    } catch (InterruptedException e) {\n+      logger.error(\"Mark inactive container in zookeeper is interrupted\", e);\n+    }\n   }\n \n   /**\n    * Mark the given {@link Container}s status to INACTIVE in zookeeper.\n    * @param inactiveContainerCandidateSet DELETE_IN_PROGRESS {@link Container} set which has been deleted successfully during compaction.\n    */\n-  private void markContainerInactiveOnZk(Set<Container> inactiveContainerCandidateSet) {\n-    // TODO: mark the given containers status to INACTIVE in zookeeper.\n+  void markContainerInactiveOnZk(Set<Container> inactiveContainerCandidateSet) throws InterruptedException {\n+    if (inactiveContainerCandidateSet != null) {\n+      boolean successful = false;", "originalCommit": "5f862e9279ee77ae35614ef6f5ad68bf69b3662d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5MDc1NA==", "url": "https://github.com/linkedin/ambry/pull/1600#discussion_r466590754", "bodyText": "Updated.", "author": "SophieGuo410", "createdAt": "2020-08-06T18:00:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2NzIxOQ=="}], "type": "inlineReview"}, {"oid": "beb8a53b334b457c620a9641df9a294f60a6e369", "url": "https://github.com/linkedin/ambry/commit/beb8a53b334b457c620a9641df9a294f60a6e369", "message": "minor fix", "committedDate": "2020-08-06T17:49:50Z", "type": "commit"}]}