{"pr_number": 7193, "pr_title": "CB-5094: Add connection check for FreeIPA MS to FreeIPA server", "pr_author": "holleyism", "pr_createdAt": "2020-02-01T02:08:35Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7193", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5MTExNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r373991115", "body": "this comment is not necessary", "bodyText": "this comment is not necessary", "bodyHTML": "<p dir=\"auto\">this comment is not necessary</p>", "author": "lacikaaa", "createdAt": "2020-02-03T09:17:07Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.freeipa.service.stack;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.DetailedStackStatus;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.HealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.NodeHealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClient;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.TlsSetupService;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaClientFactory;\n+\n+@Service\n+\n+public class FreeIpaHealthDetailsService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TlsSetupService.class);\n+\n+    private static final String EXTERNAL_COMMAND_OUTPUT = \"ExternalCommandOutput\";\n+\n+    private static final String STATUS_OK = \"OK\";\n+\n+    private static final String MESSAGE_UNAVAILABLE = \"Message Unavailable\";\n+\n+    private static final Pattern RESULT_PATTERN = Pattern.compile(\"(ecure port|: TCP) \\\\([0-9]*\\\\): (.*)\");\n+\n+    private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private FreeIpaClientFactory freeIpaClientFactory;\n+\n+    public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) throws Exception {\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountId(environmentCrn, accountId);\n+        FreeIpaClient freeIpaClient = freeIpaClientFactory.getFreeIpaClientByAccountAndEnvironment(environmentCrn, accountId);\n+\n+        RPCResponse<Boolean> rpcResponse = freeIpaClient.serverConnCheck(stack.getResourceCrn(), stack.getResourceCrn());\n+\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+        response.setEnvironmentCrn(stack.getEnvironmentCrn());\n+        response.setCrn(stack.getResourceCrn());\n+        response.setStatus(rpcResponse.getResult() ? DetailedStackStatus.PROVISIONED.getStatus()\n+                : DetailedStackStatus.UNHEALTHY.getStatus());\n+        response.setName((String) rpcResponse.getValue());\n+\n+        String precedingMessage = MESSAGE_UNAVAILABLE;\n+        NodeHealthDetailsFreeIpaResponse nodeResponse = null;\n+        for (RPCMessage message: rpcResponse.getMessages()) {\n+            Matcher nodeMatcher = NEW_NODE_PATTERN.matcher(message.getMessage());\n+            if (nodeMatcher.find()) {\n+                nodeResponse = new NodeHealthDetailsFreeIpaResponse();\n+                response.addNodeHealthDetailsFreeIpaResponses(nodeResponse);\n+                nodeResponse.setStatus(Status.AVAILABLE);\n+            }\n+            if (nodeResponse == null) {\n+                // We should have a node set by now, but if not, at\n+                // least log the message.", "originalCommit": "7ecfdc47150bd5231f5a8413a9e82eb5b8ca633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE0MTAzNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374141035", "bodyText": "Removed.", "author": "holleyism", "createdAt": "2020-02-03T14:44:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5MTExNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5MTkzNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r373991936", "body": "this method has got a little bit big, could you break it down into smaller methods? typically the empty lines inside the method a good indicator where you should break it ", "bodyText": "this method has got a little bit big, could you break it down into smaller methods? typically the empty lines inside the method a good indicator where you should break it", "bodyHTML": "<p dir=\"auto\">this method has got a little bit big, could you break it down into smaller methods? typically the empty lines inside the method a good indicator where you should break it</p>", "author": "lacikaaa", "createdAt": "2020-02-03T09:19:09Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.freeipa.service.stack;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.DetailedStackStatus;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.HealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.NodeHealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClient;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.TlsSetupService;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaClientFactory;\n+\n+@Service\n+\n+public class FreeIpaHealthDetailsService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TlsSetupService.class);\n+\n+    private static final String EXTERNAL_COMMAND_OUTPUT = \"ExternalCommandOutput\";\n+\n+    private static final String STATUS_OK = \"OK\";\n+\n+    private static final String MESSAGE_UNAVAILABLE = \"Message Unavailable\";\n+\n+    private static final Pattern RESULT_PATTERN = Pattern.compile(\"(ecure port|: TCP) \\\\([0-9]*\\\\): (.*)\");\n+\n+    private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private FreeIpaClientFactory freeIpaClientFactory;\n+\n+    public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) throws Exception {", "originalCommit": "7ecfdc47150bd5231f5a8413a9e82eb5b8ca633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE0ODExMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374148112", "bodyText": "Fixed", "author": "holleyism", "createdAt": "2020-02-03T14:56:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5MTkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0OTk4NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374549985", "bodyText": "I have added some suggestions as you still have some gaps between lines", "author": "lacikaaa", "createdAt": "2020-02-04T09:12:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5MTkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczNzI0NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374737245", "bodyText": "fixed", "author": "holleyism", "createdAt": "2020-02-04T15:23:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5MTkzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5MjgwMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r373992800", "body": "please remove this empty line", "bodyText": "please remove this empty line", "bodyHTML": "<p dir=\"auto\">please remove this empty line</p>", "author": "lacikaaa", "createdAt": "2020-02-03T09:21:10Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.freeipa.service.stack;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.DetailedStackStatus;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.HealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.NodeHealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClient;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.TlsSetupService;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaClientFactory;\n+\n+@Service\n+", "originalCommit": "7ecfdc47150bd5231f5a8413a9e82eb5b8ca633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE0MTIyMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374141223", "bodyText": "Removed", "author": "holleyism", "createdAt": "2020-02-03T14:44:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5MjgwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwNTk0Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374005946", "body": "is this `from master to replica` always valid? If the first freeipa instance goes down and we connect to another, is it still the same message?\r\nAfter a quick google I could find messages with reversed order. I don't know if it's valid for us, but maybe it's worth checking it.", "bodyText": "is this from master to replica always valid? If the first freeipa instance goes down and we connect to another, is it still the same message?\nAfter a quick google I could find messages with reversed order. I don't know if it's valid for us, but maybe it's worth checking it.", "bodyHTML": "<p dir=\"auto\">is this <code>from master to replica</code> always valid? If the first freeipa instance goes down and we connect to another, is it still the same message?<br>\nAfter a quick google I could find messages with reversed order. I don't know if it's valid for us, but maybe it's worth checking it.</p>", "author": "lacikaaa", "createdAt": "2020-02-03T09:48:40Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.freeipa.service.stack;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.DetailedStackStatus;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.HealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.NodeHealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClient;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.TlsSetupService;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaClientFactory;\n+\n+@Service\n+\n+public class FreeIpaHealthDetailsService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TlsSetupService.class);\n+\n+    private static final String EXTERNAL_COMMAND_OUTPUT = \"ExternalCommandOutput\";\n+\n+    private static final String STATUS_OK = \"OK\";\n+\n+    private static final String MESSAGE_UNAVAILABLE = \"Message Unavailable\";\n+\n+    private static final Pattern RESULT_PATTERN = Pattern.compile(\"(ecure port|: TCP) \\\\([0-9]*\\\\): (.*)\");\n+\n+    private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");", "originalCommit": "7ecfdc47150bd5231f5a8413a9e82eb5b8ca633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE0Mzk5Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374143992", "bodyText": "It maybe valid when we have FreeIPA HA.  I created https://jira.cloudera.com/browse/CB-5399 to deal with that once we have a multinode FreeIPA setup.", "author": "holleyism", "createdAt": "2020-02-03T14:49:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwNTk0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAyMTAzMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374021032", "body": "FreeIPA doesn't know anything about resource crns, these parameters should be revisited\r\n`cn\r\nrequired\r\nIPA server hostname`\r\n`remote_cn\r\nrequired\r\nRemote IPA server hostname`", "bodyText": "FreeIPA doesn't know anything about resource crns, these parameters should be revisited\ncn required IPA server hostname\nremote_cn required Remote IPA server hostname", "bodyHTML": "<p dir=\"auto\">FreeIPA doesn't know anything about resource crns, these parameters should be revisited<br>\n<code>cn required IPA server hostname</code><br>\n<code>remote_cn required Remote IPA server hostname</code></p>", "author": "lacikaaa", "createdAt": "2020-02-03T10:19:13Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.freeipa.service.stack;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.DetailedStackStatus;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.HealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.NodeHealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClient;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.TlsSetupService;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaClientFactory;\n+\n+@Service\n+\n+public class FreeIpaHealthDetailsService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TlsSetupService.class);\n+\n+    private static final String EXTERNAL_COMMAND_OUTPUT = \"ExternalCommandOutput\";\n+\n+    private static final String STATUS_OK = \"OK\";\n+\n+    private static final String MESSAGE_UNAVAILABLE = \"Message Unavailable\";\n+\n+    private static final Pattern RESULT_PATTERN = Pattern.compile(\"(ecure port|: TCP) \\\\([0-9]*\\\\): (.*)\");\n+\n+    private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private FreeIpaClientFactory freeIpaClientFactory;\n+\n+    public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) throws Exception {\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountId(environmentCrn, accountId);\n+        FreeIpaClient freeIpaClient = freeIpaClientFactory.getFreeIpaClientByAccountAndEnvironment(environmentCrn, accountId);\n+\n+        RPCResponse<Boolean> rpcResponse = freeIpaClient.serverConnCheck(stack.getResourceCrn(), stack.getResourceCrn());", "originalCommit": "7ecfdc47150bd5231f5a8413a9e82eb5b8ca633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwMjY0Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374502646", "bodyText": "fixed", "author": "holleyism", "createdAt": "2020-02-04T07:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAyMTAzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAyMTYwNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374021605", "body": "if you fetch stack for any reason you should use `getFreeIpaClientForStack` to reduce db calls", "bodyText": "if you fetch stack for any reason you should use getFreeIpaClientForStack to reduce db calls", "bodyHTML": "<p dir=\"auto\">if you fetch stack for any reason you should use <code>getFreeIpaClientForStack</code> to reduce db calls</p>", "author": "lacikaaa", "createdAt": "2020-02-03T10:20:22Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.freeipa.service.stack;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.DetailedStackStatus;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.HealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.NodeHealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClient;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.TlsSetupService;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaClientFactory;\n+\n+@Service\n+\n+public class FreeIpaHealthDetailsService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TlsSetupService.class);\n+\n+    private static final String EXTERNAL_COMMAND_OUTPUT = \"ExternalCommandOutput\";\n+\n+    private static final String STATUS_OK = \"OK\";\n+\n+    private static final String MESSAGE_UNAVAILABLE = \"Message Unavailable\";\n+\n+    private static final Pattern RESULT_PATTERN = Pattern.compile(\"(ecure port|: TCP) \\\\([0-9]*\\\\): (.*)\");\n+\n+    private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private FreeIpaClientFactory freeIpaClientFactory;\n+\n+    public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) throws Exception {\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountId(environmentCrn, accountId);\n+        FreeIpaClient freeIpaClient = freeIpaClientFactory.getFreeIpaClientByAccountAndEnvironment(environmentCrn, accountId);", "originalCommit": "7ecfdc47150bd5231f5a8413a9e82eb5b8ca633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE0Nzk1Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374147957", "bodyText": "Fixed", "author": "holleyism", "createdAt": "2020-02-03T14:56:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAyMTYwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5MzE5NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374193195", "body": "STATUS? or health?", "bodyText": "STATUS? or health?", "bodyHTML": "<p dir=\"auto\">STATUS? or health?</p>", "author": "handavid", "createdAt": "2020-02-03T16:10:49Z", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/FreeIpaV1Endpoint.java", "diffHunk": "@@ -52,6 +53,13 @@\n             nickname = \"listFreeIpaClustersByAccountV1\")\n     List<ListFreeIpaResponse> list();\n \n+    @GET\n+    @Path(\"/healthDetails\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = FreeIpaOperationDescriptions.STATUS, produces = MediaType.APPLICATION_JSON, notes = FreeIpaNotes.FREEIPA_NOTES,", "originalCommit": "7ecfdc47150bd5231f5a8413a9e82eb5b8ca633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzMzU4Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374233586", "bodyText": "renamed", "author": "holleyism", "createdAt": "2020-02-03T17:23:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5MzE5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5MzU1OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374193559", "body": "healthDetailsV1", "bodyText": "healthDetailsV1", "bodyHTML": "<p dir=\"auto\">healthDetailsV1</p>", "author": "handavid", "createdAt": "2020-02-03T16:11:25Z", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/FreeIpaV1Endpoint.java", "diffHunk": "@@ -52,6 +53,13 @@\n             nickname = \"listFreeIpaClustersByAccountV1\")\n     List<ListFreeIpaResponse> list();\n \n+    @GET\n+    @Path(\"/healthDetails\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = FreeIpaOperationDescriptions.STATUS, produces = MediaType.APPLICATION_JSON, notes = FreeIpaNotes.FREEIPA_NOTES,\n+            nickname = \"statusV1\")", "originalCommit": "7ecfdc47150bd5231f5a8413a9e82eb5b8ca633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzMzY0OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374233648", "bodyText": "renamed", "author": "holleyism", "createdAt": "2020-02-03T17:23:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5MzU1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5NDE0NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374194144", "body": "would /health be sufficient? why /healthDetails?", "bodyText": "would /health be sufficient? why /healthDetails?", "bodyHTML": "<p dir=\"auto\">would /health be sufficient? why /healthDetails?</p>", "author": "handavid", "createdAt": "2020-02-03T16:12:24Z", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/FreeIpaV1Endpoint.java", "diffHunk": "@@ -52,6 +53,13 @@\n             nickname = \"listFreeIpaClustersByAccountV1\")\n     List<ListFreeIpaResponse> list();\n \n+    @GET\n+    @Path(\"/healthDetails\")", "originalCommit": "7ecfdc47150bd5231f5a8413a9e82eb5b8ca633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzNDczNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374234735", "bodyText": "renamed", "author": "holleyism", "createdAt": "2020-02-03T17:25:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5NDE0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5NDMzMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374194332", "body": "HEALTH or HEALTHDETAILS", "bodyText": "HEALTH or HEALTHDETAILS", "bodyHTML": "<p dir=\"auto\">HEALTH or HEALTHDETAILS</p>", "author": "handavid", "createdAt": "2020-02-03T16:12:44Z", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/doc/FreeIpaOperationDescriptions.java", "diffHunk": "@@ -11,6 +11,7 @@\n     public static final String STOP = \"Stop all FreeIPA stacks that attached to the given environment CRN\";\n     public static final String REGISTER_WITH_CLUSTER_PROXY = \"Registers FreeIPA stack with given environment CRN with cluster proxy\";\n     public static final String DEREGISTER_WITH_CLUSTER_PROXY = \"Deregisters FreeIPA stack with given environment CRN with cluster proxy\";\n+    public static final String STATUS = \"Provides a status of the FreeIPA stack\";", "originalCommit": "7ecfdc47150bd5231f5a8413a9e82eb5b8ca633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzNDgyMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374234821", "bodyText": "renamed.", "author": "holleyism", "createdAt": "2020-02-03T17:25:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5NDMzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMzMDk0Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374330947", "body": "Rather than `2` as a magic number, how about using a named constant?", "bodyText": "Rather than 2 as a magic number, how about using a named constant?", "bodyHTML": "<p dir=\"auto\">Rather than <code>2</code> as a magic number, how about using a named constant?</p>", "author": "jamisonbennett", "createdAt": "2020-02-03T20:45:30Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.freeipa.service.stack;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.DetailedStackStatus;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.HealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.NodeHealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClient;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.TlsSetupService;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaClientFactory;\n+\n+@Service\n+\n+public class FreeIpaHealthDetailsService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TlsSetupService.class);\n+\n+    private static final String EXTERNAL_COMMAND_OUTPUT = \"ExternalCommandOutput\";\n+\n+    private static final String STATUS_OK = \"OK\";\n+\n+    private static final String MESSAGE_UNAVAILABLE = \"Message Unavailable\";\n+\n+    private static final Pattern RESULT_PATTERN = Pattern.compile(\"(ecure port|: TCP) \\\\([0-9]*\\\\): (.*)\");\n+\n+    private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private FreeIpaClientFactory freeIpaClientFactory;\n+\n+    public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) throws Exception {\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountId(environmentCrn, accountId);\n+        FreeIpaClient freeIpaClient = freeIpaClientFactory.getFreeIpaClientByAccountAndEnvironment(environmentCrn, accountId);\n+\n+        RPCResponse<Boolean> rpcResponse = freeIpaClient.serverConnCheck(stack.getResourceCrn(), stack.getResourceCrn());\n+\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+        response.setEnvironmentCrn(stack.getEnvironmentCrn());\n+        response.setCrn(stack.getResourceCrn());\n+        response.setStatus(rpcResponse.getResult() ? DetailedStackStatus.PROVISIONED.getStatus()\n+                : DetailedStackStatus.UNHEALTHY.getStatus());\n+        response.setName((String) rpcResponse.getValue());\n+\n+        String precedingMessage = MESSAGE_UNAVAILABLE;\n+        NodeHealthDetailsFreeIpaResponse nodeResponse = null;\n+        for (RPCMessage message: rpcResponse.getMessages()) {\n+            Matcher nodeMatcher = NEW_NODE_PATTERN.matcher(message.getMessage());\n+            if (nodeMatcher.find()) {\n+                nodeResponse = new NodeHealthDetailsFreeIpaResponse();\n+                response.addNodeHealthDetailsFreeIpaResponses(nodeResponse);\n+                nodeResponse.setStatus(Status.AVAILABLE);\n+            }\n+            if (nodeResponse == null) {\n+                // We should have a node set by now, but if not, at\n+                // least log the message.\n+                LOGGER.info(\"No node for message:\" + message.getMessage());\n+            } else {\n+                // When parsing the messages, if there's an error, the error\n+                // appears in the preceding message.\n+                if (EXTERNAL_COMMAND_OUTPUT.equals(message.getName())) {\n+                    Matcher matcher = RESULT_PATTERN.matcher(message.getMessage());\n+                    if (matcher.find()) {\n+                        if (!STATUS_OK.equals(matcher.group(2))) {", "originalCommit": "7ecfdc47150bd5231f5a8413a9e82eb5b8ca633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4MjA2Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374482067", "bodyText": "fixed.", "author": "holleyism", "createdAt": "2020-02-04T05:36:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMzMDk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM0MDE3MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374340171", "body": "I am a little confused as to why this includes \"datalake\" status. Shouldn't the resource be a FreeIPA instance?", "bodyText": "I am a little confused as to why this includes \"datalake\" status. Shouldn't the resource be a FreeIPA instance?", "bodyHTML": "<p dir=\"auto\">I am a little confused as to why this includes \"datalake\" status. Shouldn't the resource be a FreeIPA instance?</p>", "author": "jamisonbennett", "createdAt": "2020-02-03T21:04:42Z", "path": "freeipa/src/test/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthServiceTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.sequenceiq.freeipa.service.stack;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.Assert;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.HealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.NodeHealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClient;\n+import com.sequenceiq.freeipa.client.FreeIpaClientException;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaClientFactory;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class FreeIpaHealthServiceTest {\n+    private static final String ENVIRONMENT_ID = \"crn:cdp:environments:us-west-1:f39af961-e0ce-4f79-826c-45502efb9ca3:environment:12345-6789\";\n+\n+    private static final String CLUSTER_ID = \"crn:cdp:datalake:us-west-1:f39af961-e0ce-4f79-826c-45502efb9ca3:datalake:54321-9876\";", "originalCommit": "7ecfdc47150bd5231f5a8413a9e82eb5b8ca633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4MTg3OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374481878", "bodyText": "Removed CLUSTER_ID.", "author": "holleyism", "createdAt": "2020-02-04T05:35:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM0MDE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0NzMxOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374547319", "body": "wrong logger class", "bodyText": "wrong logger class", "bodyHTML": "<p dir=\"auto\">wrong logger class</p>", "author": "lacikaaa", "createdAt": "2020-02-04T09:06:24Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -9,19 +9,21 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Service;\n \n+\n import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.DetailedStackStatus;\n import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.instance.InstanceGroupType;\n import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.HealthDetailsFreeIpaResponse;\n import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.NodeHealthDetailsFreeIpaResponse;\n import com.sequenceiq.freeipa.client.FreeIpaClient;\n import com.sequenceiq.freeipa.client.model.RPCMessage;\n import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.InstanceGroup;\n import com.sequenceiq.freeipa.entity.Stack;\n import com.sequenceiq.freeipa.service.TlsSetupService;\n import com.sequenceiq.freeipa.service.freeipa.FreeIpaClientFactory;\n \n @Service\n-\n public class FreeIpaHealthDetailsService {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(TlsSetupService.class);", "originalCommit": "30d316ddcf1280eb2aeee3eb7f42124211965db8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcxMDExMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374710110", "bodyText": "fixed", "author": "holleyism", "createdAt": "2020-02-04T14:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0NzMxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0ODc3NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374548775", "body": "this could be refactored into checkFreeIpaHealth or similar", "bodyText": "this could be refactored into checkFreeIpaHealth or similar", "bodyHTML": "<p dir=\"auto\">this could be refactored into checkFreeIpaHealth or similar</p>", "author": "lacikaaa", "createdAt": "2020-02-04T09:09:42Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.sequenceiq.freeipa.service.stack;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.DetailedStackStatus;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.instance.InstanceGroupType;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.HealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.NodeHealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClient;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.InstanceGroup;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.TlsSetupService;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaClientFactory;\n+\n+@Service\n+public class FreeIpaHealthDetailsService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TlsSetupService.class);\n+\n+    private static final String EXTERNAL_COMMAND_OUTPUT = \"ExternalCommandOutput\";\n+\n+    private static final String STATUS_OK = \"OK\";\n+\n+    private static final int STATUS_GROUP = 2;\n+\n+    private static final String MESSAGE_UNAVAILABLE = \"Message Unavailable\";\n+\n+    private static final Pattern RESULT_PATTERN = Pattern.compile(\"(ecure port|: TCP) \\\\([0-9]*\\\\): (.*)\");\n+\n+    private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private FreeIpaClientFactory freeIpaClientFactory;\n+\n+    public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) throws Exception {\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n+\n+        InstanceGroup masterGroup = stack.getInstanceGroups().stream()\n+                .filter(instanceGroup -> InstanceGroupType.MASTER == instanceGroup.getInstanceGroupType()).findFirst().get();\n+        String masterCN = masterGroup.getNotDeletedInstanceMetaDataSet().stream().findFirst().get().getDiscoveryFQDN();\n+\n+        FreeIpaClient freeIpaClient = freeIpaClientFactory.getFreeIpaClientForStack(stack);\n+        RPCResponse<Boolean> rpcResponse = freeIpaClient.serverConnCheck(masterCN, masterCN);", "originalCommit": "30d316ddcf1280eb2aeee3eb7f42124211965db8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcxMTQ1NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374711455", "bodyText": "changed", "author": "holleyism", "createdAt": "2020-02-04T14:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0ODc3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0ODk3Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374548976", "body": "this could be moved out as findMasterCn", "bodyText": "this could be moved out as findMasterCn", "bodyHTML": "<p dir=\"auto\">this could be moved out as findMasterCn</p>", "author": "lacikaaa", "createdAt": "2020-02-04T09:10:08Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.sequenceiq.freeipa.service.stack;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.DetailedStackStatus;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.instance.InstanceGroupType;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.HealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.NodeHealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClient;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.InstanceGroup;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.TlsSetupService;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaClientFactory;\n+\n+@Service\n+public class FreeIpaHealthDetailsService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TlsSetupService.class);\n+\n+    private static final String EXTERNAL_COMMAND_OUTPUT = \"ExternalCommandOutput\";\n+\n+    private static final String STATUS_OK = \"OK\";\n+\n+    private static final int STATUS_GROUP = 2;\n+\n+    private static final String MESSAGE_UNAVAILABLE = \"Message Unavailable\";\n+\n+    private static final Pattern RESULT_PATTERN = Pattern.compile(\"(ecure port|: TCP) \\\\([0-9]*\\\\): (.*)\");\n+\n+    private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private FreeIpaClientFactory freeIpaClientFactory;\n+\n+    public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) throws Exception {\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n+\n+        InstanceGroup masterGroup = stack.getInstanceGroups().stream()\n+                .filter(instanceGroup -> InstanceGroupType.MASTER == instanceGroup.getInstanceGroupType()).findFirst().get();\n+        String masterCN = masterGroup.getNotDeletedInstanceMetaDataSet().stream().findFirst().get().getDiscoveryFQDN();", "originalCommit": "30d316ddcf1280eb2aeee3eb7f42124211965db8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcxMzk0NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374713945", "bodyText": "changed", "author": "holleyism", "createdAt": "2020-02-04T14:48:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0ODk3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0OTI4Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374549287", "body": "could be moved out as createResponse", "bodyText": "could be moved out as createResponse", "bodyHTML": "<p dir=\"auto\">could be moved out as createResponse</p>", "author": "lacikaaa", "createdAt": "2020-02-04T09:10:47Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.sequenceiq.freeipa.service.stack;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.DetailedStackStatus;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.instance.InstanceGroupType;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.HealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.NodeHealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClient;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.InstanceGroup;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.TlsSetupService;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaClientFactory;\n+\n+@Service\n+public class FreeIpaHealthDetailsService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TlsSetupService.class);\n+\n+    private static final String EXTERNAL_COMMAND_OUTPUT = \"ExternalCommandOutput\";\n+\n+    private static final String STATUS_OK = \"OK\";\n+\n+    private static final int STATUS_GROUP = 2;\n+\n+    private static final String MESSAGE_UNAVAILABLE = \"Message Unavailable\";\n+\n+    private static final Pattern RESULT_PATTERN = Pattern.compile(\"(ecure port|: TCP) \\\\([0-9]*\\\\): (.*)\");\n+\n+    private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private FreeIpaClientFactory freeIpaClientFactory;\n+\n+    public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) throws Exception {\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n+\n+        InstanceGroup masterGroup = stack.getInstanceGroups().stream()\n+                .filter(instanceGroup -> InstanceGroupType.MASTER == instanceGroup.getInstanceGroupType()).findFirst().get();\n+        String masterCN = masterGroup.getNotDeletedInstanceMetaDataSet().stream().findFirst().get().getDiscoveryFQDN();\n+\n+        FreeIpaClient freeIpaClient = freeIpaClientFactory.getFreeIpaClientForStack(stack);\n+        RPCResponse<Boolean> rpcResponse = freeIpaClient.serverConnCheck(masterCN, masterCN);\n+\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+        response.setEnvironmentCrn(stack.getEnvironmentCrn());\n+        response.setCrn(stack.getResourceCrn());\n+        response.setStatus(rpcResponse.getResult() ? DetailedStackStatus.PROVISIONED.getStatus()\n+                : DetailedStackStatus.UNHEALTHY.getStatus());\n+        response.setName((String) rpcResponse.getValue());", "originalCommit": "30d316ddcf1280eb2aeee3eb7f42124211965db8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcxNDc5Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374714797", "bodyText": "changed", "author": "holleyism", "createdAt": "2020-02-04T14:49:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0OTI4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MDc4NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374550785", "body": "this doesn't seem right. please use some custom Exception and if necessary create a converter for it also. thanks", "bodyText": "this doesn't seem right. please use some custom Exception and if necessary create a converter for it also. thanks", "bodyHTML": "<p dir=\"auto\">this doesn't seem right. please use some custom Exception and if necessary create a converter for it also. thanks</p>", "author": "lacikaaa", "createdAt": "2020-02-04T09:14:00Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/FreeIpaV1Controller.java", "diffHunk": "@@ -93,6 +98,16 @@ public DescribeFreeIpaResponse describe(String environmentCrn) {\n         return freeIpaListService.list(accountId);\n     }\n \n+    @Override\n+    public HealthDetailsFreeIpaResponse healthDetails(String environmentCrn) {\n+        try {\n+            String accountId = crnService.getCurrentAccountId();\n+            return freeIpaHealthDetailsService.getHealthDetails(environmentCrn, accountId);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);", "originalCommit": "30d316ddcf1280eb2aeee3eb7f42124211965db8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyMTg0OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374721849", "bodyText": "changed", "author": "holleyism", "createdAt": "2020-02-04T15:00:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MDc4NQ=="}], "type": "inlineReview"}, {"oid": "8e7345dff0927238a09c65b05c71e159345b589c", "url": "https://github.com/hortonworks/cloudbreak/commit/8e7345dff0927238a09c65b05c71e159345b589c", "message": "CB-5094: Add connection check for FreeIPA MS to FreeIPA server\n\nThis patch adds the ability to get a detailed status\nfrom FreeIPA servers.  This information will be used\nby the CLI and UI to provide detailed status information\nfor the FreeIPA node. This will also fix CB-5333", "committedDate": "2020-02-04T15:21:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc3NTE5Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374775193", "body": "please add a unit test for this case", "bodyText": "please add a unit test for this case", "bodyHTML": "<p dir=\"auto\">please add a unit test for this case</p>", "author": "lacikaaa", "createdAt": "2020-02-04T16:21:40Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sequenceiq.freeipa.service.stack;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.DetailedStackStatus;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.instance.InstanceGroupType;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.HealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.NodeHealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClient;\n+import com.sequenceiq.freeipa.client.FreeIpaClientException;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.InstanceGroup;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaClientFactory;\n+\n+@Service\n+public class FreeIpaHealthDetailsService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaHealthDetailsService.class);\n+\n+    private static final String EXTERNAL_COMMAND_OUTPUT = \"ExternalCommandOutput\";\n+\n+    private static final String STATUS_OK = \"OK\";\n+\n+    private static final int STATUS_GROUP = 2;\n+\n+    private static final String MESSAGE_UNAVAILABLE = \"Message Unavailable\";\n+\n+    private static final Pattern RESULT_PATTERN = Pattern.compile(\"(ecure port|: TCP) \\\\([0-9]*\\\\): (.*)\");\n+\n+    private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private FreeIpaClientFactory freeIpaClientFactory;\n+\n+    public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n+        String masterCN = findMasterCN(stack);\n+        RPCResponse<Boolean> rpcResponse = null;\n+        try {\n+            rpcResponse = checkFreeIpaHealth(stack, masterCN);\n+        } catch (FreeIpaClientException e) {\n+            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        }\n+        return createResponse(stack, rpcResponse);\n+    }\n+\n+    private HealthDetailsFreeIpaResponse createResponse(Stack stack, RPCResponse<Boolean> rpcResponse) {\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+        response.setEnvironmentCrn(stack.getEnvironmentCrn());\n+        response.setCrn(stack.getResourceCrn());\n+        if (rpcResponse == null) {\n+            response.setStatus(DetailedStackStatus.UNHEALTHY.getStatus());\n+        } else {", "originalCommit": "8e7345dff0927238a09c65b05c71e159345b589c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwNjk2OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374806968", "bodyText": "added", "author": "holleyism", "createdAt": "2020-02-04T17:14:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc3NTE5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc3NzM1MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374777351", "body": "I think it would make sense if we make this optional, as there are multiple null check for this", "bodyText": "I think it would make sense if we make this optional, as there are multiple null check for this", "bodyHTML": "<p dir=\"auto\">I think it would make sense if we make this optional, as there are multiple null check for this</p>", "author": "lacikaaa", "createdAt": "2020-02-04T16:24:51Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sequenceiq.freeipa.service.stack;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.DetailedStackStatus;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.instance.InstanceGroupType;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.HealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.NodeHealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClient;\n+import com.sequenceiq.freeipa.client.FreeIpaClientException;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.InstanceGroup;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaClientFactory;\n+\n+@Service\n+public class FreeIpaHealthDetailsService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaHealthDetailsService.class);\n+\n+    private static final String EXTERNAL_COMMAND_OUTPUT = \"ExternalCommandOutput\";\n+\n+    private static final String STATUS_OK = \"OK\";\n+\n+    private static final int STATUS_GROUP = 2;\n+\n+    private static final String MESSAGE_UNAVAILABLE = \"Message Unavailable\";\n+\n+    private static final Pattern RESULT_PATTERN = Pattern.compile(\"(ecure port|: TCP) \\\\([0-9]*\\\\): (.*)\");\n+\n+    private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private FreeIpaClientFactory freeIpaClientFactory;\n+\n+    public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n+        String masterCN = findMasterCN(stack);\n+        RPCResponse<Boolean> rpcResponse = null;", "originalCommit": "8e7345dff0927238a09c65b05c71e159345b589c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg4OTI3Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374889273", "bodyText": "changed", "author": "holleyism", "createdAt": "2020-02-04T19:54:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc3NzM1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc3OTkxMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374779912", "body": "as we already check if we have an `rcpResponse` above, move this part of the code there, and move the `parseMessages` into the else part. this way we won't check the same at 2 places. Or am I missing something?", "bodyText": "as we already check if we have an rcpResponse above, move this part of the code there, and move the parseMessages into the else part. this way we won't check the same at 2 places. Or am I missing something?", "bodyHTML": "<p dir=\"auto\">as we already check if we have an <code>rcpResponse</code> above, move this part of the code there, and move the <code>parseMessages</code> into the else part. this way we won't check the same at 2 places. Or am I missing something?</p>", "author": "lacikaaa", "createdAt": "2020-02-04T16:28:53Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sequenceiq.freeipa.service.stack;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.DetailedStackStatus;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.instance.InstanceGroupType;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.HealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.NodeHealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClient;\n+import com.sequenceiq.freeipa.client.FreeIpaClientException;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.InstanceGroup;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaClientFactory;\n+\n+@Service\n+public class FreeIpaHealthDetailsService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaHealthDetailsService.class);\n+\n+    private static final String EXTERNAL_COMMAND_OUTPUT = \"ExternalCommandOutput\";\n+\n+    private static final String STATUS_OK = \"OK\";\n+\n+    private static final int STATUS_GROUP = 2;\n+\n+    private static final String MESSAGE_UNAVAILABLE = \"Message Unavailable\";\n+\n+    private static final Pattern RESULT_PATTERN = Pattern.compile(\"(ecure port|: TCP) \\\\([0-9]*\\\\): (.*)\");\n+\n+    private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private FreeIpaClientFactory freeIpaClientFactory;\n+\n+    public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n+        String masterCN = findMasterCN(stack);\n+        RPCResponse<Boolean> rpcResponse = null;\n+        try {\n+            rpcResponse = checkFreeIpaHealth(stack, masterCN);\n+        } catch (FreeIpaClientException e) {\n+            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        }\n+        return createResponse(stack, rpcResponse);\n+    }\n+\n+    private HealthDetailsFreeIpaResponse createResponse(Stack stack, RPCResponse<Boolean> rpcResponse) {\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+        response.setEnvironmentCrn(stack.getEnvironmentCrn());\n+        response.setCrn(stack.getResourceCrn());\n+        if (rpcResponse == null) {\n+            response.setStatus(DetailedStackStatus.UNHEALTHY.getStatus());\n+        } else {\n+            response.setStatus(rpcResponse.getResult() ? DetailedStackStatus.PROVISIONED.getStatus()\n+                    : DetailedStackStatus.UNHEALTHY.getStatus());\n+            response.setName((String) rpcResponse.getValue());\n+        }\n+        parseMessages(rpcResponse, response);\n+        return response;\n+    }\n+\n+    private String findMasterCN(Stack stack) {\n+        InstanceGroup masterGroup = stack.getInstanceGroups().stream()\n+                .filter(instanceGroup -> InstanceGroupType.MASTER == instanceGroup.getInstanceGroupType()).findFirst().get();\n+        return masterGroup.getNotDeletedInstanceMetaDataSet().stream().findFirst().get().getDiscoveryFQDN();\n+    }\n+\n+    private RPCResponse<Boolean> checkFreeIpaHealth(Stack stack, String masterCN) throws FreeIpaClientException {\n+        FreeIpaClient freeIpaClient = freeIpaClientFactory.getFreeIpaClientForStack(stack);\n+        return freeIpaClient.serverConnCheck(masterCN, masterCN);\n+    }\n+\n+    private void parseMessages(RPCResponse<Boolean> rpcResponse, HealthDetailsFreeIpaResponse response) {\n+        String precedingMessage = MESSAGE_UNAVAILABLE;\n+        NodeHealthDetailsFreeIpaResponse nodeResponse = null;\n+        if (rpcResponse == null) {\n+            nodeResponse = new NodeHealthDetailsFreeIpaResponse();\n+            response.addNodeHealthDetailsFreeIpaResponses(nodeResponse);\n+            nodeResponse.setStatus(Status.UNREACHABLE);\n+        } else {", "originalCommit": "8e7345dff0927238a09c65b05c71e159345b589c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5MzI1MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374893250", "bodyText": "changed", "author": "holleyism", "createdAt": "2020-02-04T20:03:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc3OTkxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4MTA0OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374781048", "body": "this case need unit test also, I couldn't find any assert for `UNHEALTHY` status", "bodyText": "this case need unit test also, I couldn't find any assert for UNHEALTHY status", "bodyHTML": "<p dir=\"auto\">this case need unit test also, I couldn't find any assert for <code>UNHEALTHY</code> status</p>", "author": "lacikaaa", "createdAt": "2020-02-04T16:30:44Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sequenceiq.freeipa.service.stack;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.DetailedStackStatus;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.instance.InstanceGroupType;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.HealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.NodeHealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClient;\n+import com.sequenceiq.freeipa.client.FreeIpaClientException;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.InstanceGroup;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaClientFactory;\n+\n+@Service\n+public class FreeIpaHealthDetailsService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaHealthDetailsService.class);\n+\n+    private static final String EXTERNAL_COMMAND_OUTPUT = \"ExternalCommandOutput\";\n+\n+    private static final String STATUS_OK = \"OK\";\n+\n+    private static final int STATUS_GROUP = 2;\n+\n+    private static final String MESSAGE_UNAVAILABLE = \"Message Unavailable\";\n+\n+    private static final Pattern RESULT_PATTERN = Pattern.compile(\"(ecure port|: TCP) \\\\([0-9]*\\\\): (.*)\");\n+\n+    private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private FreeIpaClientFactory freeIpaClientFactory;\n+\n+    public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n+        String masterCN = findMasterCN(stack);\n+        RPCResponse<Boolean> rpcResponse = null;\n+        try {\n+            rpcResponse = checkFreeIpaHealth(stack, masterCN);\n+        } catch (FreeIpaClientException e) {\n+            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        }\n+        return createResponse(stack, rpcResponse);\n+    }\n+\n+    private HealthDetailsFreeIpaResponse createResponse(Stack stack, RPCResponse<Boolean> rpcResponse) {\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+        response.setEnvironmentCrn(stack.getEnvironmentCrn());\n+        response.setCrn(stack.getResourceCrn());\n+        if (rpcResponse == null) {\n+            response.setStatus(DetailedStackStatus.UNHEALTHY.getStatus());\n+        } else {\n+            response.setStatus(rpcResponse.getResult() ? DetailedStackStatus.PROVISIONED.getStatus()\n+                    : DetailedStackStatus.UNHEALTHY.getStatus());", "originalCommit": "8e7345dff0927238a09c65b05c71e159345b589c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA5OTAwNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r375099006", "bodyText": "added", "author": "holleyism", "createdAt": "2020-02-05T07:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4MTA0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4MzE5Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r374783197", "body": "`/` should be removed as the others don't have it. thanks", "bodyText": "/ should be removed as the others don't have it. thanks", "bodyHTML": "<p dir=\"auto\"><code>/</code> should be removed as the others don't have it. thanks</p>", "author": "lacikaaa", "createdAt": "2020-02-04T16:34:10Z", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/FreeIpaV1Endpoint.java", "diffHunk": "@@ -52,6 +53,13 @@\n             nickname = \"listFreeIpaClustersByAccountV1\")\n     List<ListFreeIpaResponse> list();\n \n+    @GET\n+    @Path(\"/health\")", "originalCommit": "8e7345dff0927238a09c65b05c71e159345b589c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA5OTA0MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r375099041", "bodyText": "removed", "author": "holleyism", "createdAt": "2020-02-05T07:42:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4MzE5Nw=="}], "type": "inlineReview"}, {"oid": "63090f26e9030254dfb24dbb537962113968469a", "url": "https://github.com/hortonworks/cloudbreak/commit/63090f26e9030254dfb24dbb537962113968469a", "message": "CB-5094: Add connection check for FreeIPA MS to FreeIPA server\n\nThis patch adds the ability to get a detailed status\nfrom FreeIPA servers.  This information will be used\nby the CLI and UI to provide detailed status information\nfor the FreeIPA node. This will also fix CB-5333", "committedDate": "2020-02-05T07:43:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExNzc4Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r375117783", "body": "I think this doesn't do what you would expect. this would return true if 1 node is available.\r\nI would use stream here:\r\n`return response.getNodeHealthDetailsFreeIpaResponses().stream().allMatch(node -> Status.AVAILABLE == node.getStatus())`\r\nor we expect it to be healthy if one node is ok?", "bodyText": "I think this doesn't do what you would expect. this would return true if 1 node is available.\nI would use stream here:\nreturn response.getNodeHealthDetailsFreeIpaResponses().stream().allMatch(node -> Status.AVAILABLE == node.getStatus())\nor we expect it to be healthy if one node is ok?", "bodyHTML": "<p dir=\"auto\">I think this doesn't do what you would expect. this would return true if 1 node is available.<br>\nI would use stream here:<br>\n<code>return response.getNodeHealthDetailsFreeIpaResponses().stream().allMatch(node -&gt; Status.AVAILABLE == node.getStatus())</code><br>\nor we expect it to be healthy if one node is ok?</p>", "author": "lacikaaa", "createdAt": "2020-02-05T08:34:31Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package com.sequenceiq.freeipa.service.stack;\n+\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.DetailedStackStatus;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.instance.InstanceGroupType;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.HealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.NodeHealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClient;\n+import com.sequenceiq.freeipa.client.FreeIpaClientException;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.InstanceGroup;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaClientFactory;\n+\n+@Service\n+public class FreeIpaHealthDetailsService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaHealthDetailsService.class);\n+\n+    private static final String EXTERNAL_COMMAND_OUTPUT = \"ExternalCommandOutput\";\n+\n+    private static final String STATUS_OK = \"OK\";\n+\n+    private static final int STATUS_GROUP = 2;\n+\n+    private static final String MESSAGE_UNAVAILABLE = \"Message Unavailable\";\n+\n+    private static final Pattern RESULT_PATTERN = Pattern.compile(\"(ecure port|: TCP) \\\\([0-9]*\\\\): (.*)\");\n+\n+    private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private FreeIpaClientFactory freeIpaClientFactory;\n+\n+    public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n+        String masterCN = findMasterCN(stack);\n+        Optional<RPCResponse<Boolean>> rpcResponse = Optional.empty();\n+        try {\n+            rpcResponse = Optional.ofNullable(checkFreeIpaHealth(stack, masterCN));\n+        } catch (FreeIpaClientException e) {\n+            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        }\n+        return createResponse(stack, rpcResponse);\n+    }\n+\n+    private HealthDetailsFreeIpaResponse createResponse(Stack stack, Optional<RPCResponse<Boolean>> rpcResponse) {\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+        response.setEnvironmentCrn(stack.getEnvironmentCrn());\n+        response.setCrn(stack.getResourceCrn());\n+        if (rpcResponse.isPresent()) {\n+            response.setName((String) rpcResponse.get().getValue());\n+            parseMessages(rpcResponse.get(), response);\n+            if (isOverallHealthy(response)) {\n+                response.setStatus(DetailedStackStatus.PROVISIONED.getStatus());\n+            } else {\n+                response.setStatus(DetailedStackStatus.UNHEALTHY.getStatus());\n+            }\n+        } else {\n+            response.setStatus(DetailedStackStatus.UNREACHABLE.getStatus());\n+            NodeHealthDetailsFreeIpaResponse nodeResponse = null;\n+            nodeResponse = new NodeHealthDetailsFreeIpaResponse();\n+            response.addNodeHealthDetailsFreeIpaResponses(nodeResponse);\n+            nodeResponse.setStatus(Status.UNREACHABLE);\n+        }\n+        return response;\n+    }\n+\n+    private String findMasterCN(Stack stack) {\n+        InstanceGroup masterGroup = stack.getInstanceGroups().stream()\n+                .filter(instanceGroup -> InstanceGroupType.MASTER == instanceGroup.getInstanceGroupType()).findFirst().get();\n+        return masterGroup.getNotDeletedInstanceMetaDataSet().stream().findFirst().get().getDiscoveryFQDN();\n+    }\n+\n+    private RPCResponse<Boolean> checkFreeIpaHealth(Stack stack, String masterCN) throws FreeIpaClientException {\n+        FreeIpaClient freeIpaClient = freeIpaClientFactory.getFreeIpaClientForStack(stack);\n+        return freeIpaClient.serverConnCheck(masterCN, masterCN);\n+    }\n+\n+    private boolean isOverallHealthy(HealthDetailsFreeIpaResponse response) {\n+        for (NodeHealthDetailsFreeIpaResponse node: response.getNodeHealthDetailsFreeIpaResponses()) {\n+            if (node.getStatus().equals(Status.AVAILABLE)) {\n+                return true;\n+            }\n+        }\n+        return false;", "originalCommit": "63090f26e9030254dfb24dbb537962113968469a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMxNDY1Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r375314657", "bodyText": "For HA purposes, it's still healthy if one node is ok.", "author": "holleyism", "createdAt": "2020-02-05T15:12:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExNzc4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMyNjgxNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r375326817", "bodyText": "ok, cool. then anyMatch would do the same, but it's fine with for loop", "author": "lacikaaa", "createdAt": "2020-02-05T15:30:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExNzc4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3NTgxMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r375375813", "bodyText": "For HA, if there's one node able to return requests then we consider it healthy.  When we sync up the status after the HA work, we might need a new status DEGRADED, to indicate that it can still serve requests, but not everything is ok.", "author": "holleyism", "createdAt": "2020-02-05T16:46:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExNzc4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExNjAzOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r375116039", "body": "could you please shortener the name? It is very difficult to handle on the client side (e.g.: any cli)", "bodyText": "could you please shortener the name? It is very difficult to handle on the client side (e.g.: any cli)", "bodyHTML": "<p dir=\"auto\">could you please shortener the name? It is very difficult to handle on the client side (e.g.: any cli)</p>", "author": "topolyai5", "createdAt": "2020-02-05T08:30:08Z", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/health/HealthDetailsFreeIpaResponse.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.doc.FreeIpaModelDescriptions;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.service.api.doc.ModelDescriptions;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel(\"HealthDetailsFreeIpaV1Response\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class HealthDetailsFreeIpaResponse {\n+    @NotNull\n+    @ApiModelProperty(value = ModelDescriptions.ENVIRONMENT_CRN, required = true)\n+    private String environmentCrn;\n+\n+    @NotNull\n+    @ApiModelProperty(value = FreeIpaModelDescriptions.FREEIPA_NAME, required = true)\n+    private String name;\n+\n+    @NotNull\n+    private String crn;\n+\n+    @NotNull\n+    private List<NodeHealthDetailsFreeIpaResponse> nodeHealthDetailsFreeIpaResponses;", "originalCommit": "63090f26e9030254dfb24dbb537962113968469a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMzNzQ2NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r375337464", "bodyText": "changed.", "author": "holleyism", "createdAt": "2020-02-05T15:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExNjAzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3NTg5OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r375375899", "bodyText": "done", "author": "holleyism", "createdAt": "2020-02-05T16:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExNjAzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMDkyMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r375120921", "body": "The generic type is unnecessary ", "bodyText": "The generic type is unnecessary", "bodyHTML": "<p dir=\"auto\">The generic type is unnecessary</p>", "author": "topolyai5", "createdAt": "2020-02-05T08:41:54Z", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/health/HealthDetailsFreeIpaResponse.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.doc.FreeIpaModelDescriptions;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.service.api.doc.ModelDescriptions;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel(\"HealthDetailsFreeIpaV1Response\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class HealthDetailsFreeIpaResponse {\n+    @NotNull\n+    @ApiModelProperty(value = ModelDescriptions.ENVIRONMENT_CRN, required = true)\n+    private String environmentCrn;\n+\n+    @NotNull\n+    @ApiModelProperty(value = FreeIpaModelDescriptions.FREEIPA_NAME, required = true)\n+    private String name;\n+\n+    @NotNull\n+    private String crn;\n+\n+    @NotNull\n+    private List<NodeHealthDetailsFreeIpaResponse> nodeHealthDetailsFreeIpaResponses;\n+\n+    private Status status;\n+\n+    public String getEnvironmentCrn() {\n+        return environmentCrn;\n+    }\n+\n+    public void setEnvironmentCrn(String environmentCrn) {\n+        this.environmentCrn = environmentCrn;\n+    }\n+\n+    public String getCrn() {\n+        return crn;\n+    }\n+\n+    public void setCrn(String crn) {\n+        this.crn = crn;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public List<NodeHealthDetailsFreeIpaResponse> getNodeHealthDetailsFreeIpaResponses() {\n+        if (nodeHealthDetailsFreeIpaResponses == null) {\n+            nodeHealthDetailsFreeIpaResponses = new ArrayList<NodeHealthDetailsFreeIpaResponse>();", "originalCommit": "63090f26e9030254dfb24dbb537962113968469a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMzNzg2NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r375337865", "bodyText": "removed.", "author": "holleyism", "createdAt": "2020-02-05T15:47:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMDkyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMTAyNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r375121026", "body": "The generic type is unnecessary", "bodyText": "The generic type is unnecessary", "bodyHTML": "<p dir=\"auto\">The generic type is unnecessary</p>", "author": "topolyai5", "createdAt": "2020-02-05T08:42:09Z", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/health/HealthDetailsFreeIpaResponse.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.doc.FreeIpaModelDescriptions;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.service.api.doc.ModelDescriptions;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel(\"HealthDetailsFreeIpaV1Response\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class HealthDetailsFreeIpaResponse {\n+    @NotNull\n+    @ApiModelProperty(value = ModelDescriptions.ENVIRONMENT_CRN, required = true)\n+    private String environmentCrn;\n+\n+    @NotNull\n+    @ApiModelProperty(value = FreeIpaModelDescriptions.FREEIPA_NAME, required = true)\n+    private String name;\n+\n+    @NotNull\n+    private String crn;\n+\n+    @NotNull\n+    private List<NodeHealthDetailsFreeIpaResponse> nodeHealthDetailsFreeIpaResponses;\n+\n+    private Status status;\n+\n+    public String getEnvironmentCrn() {\n+        return environmentCrn;\n+    }\n+\n+    public void setEnvironmentCrn(String environmentCrn) {\n+        this.environmentCrn = environmentCrn;\n+    }\n+\n+    public String getCrn() {\n+        return crn;\n+    }\n+\n+    public void setCrn(String crn) {\n+        this.crn = crn;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public List<NodeHealthDetailsFreeIpaResponse> getNodeHealthDetailsFreeIpaResponses() {\n+        if (nodeHealthDetailsFreeIpaResponses == null) {\n+            nodeHealthDetailsFreeIpaResponses = new ArrayList<NodeHealthDetailsFreeIpaResponse>();\n+        }\n+        return nodeHealthDetailsFreeIpaResponses;\n+    }\n+\n+    public void setNodeHealthDetailsFreeIpaResponses(List<NodeHealthDetailsFreeIpaResponse> nodeHealthDetailsFreeIpaResponses) {\n+        this.nodeHealthDetailsFreeIpaResponses = nodeHealthDetailsFreeIpaResponses;\n+    }\n+\n+    public void addNodeHealthDetailsFreeIpaResponses(NodeHealthDetailsFreeIpaResponse nodeHealthDetailsFreeIpaResponse) {\n+        if (nodeHealthDetailsFreeIpaResponses == null) {\n+            nodeHealthDetailsFreeIpaResponses = new ArrayList<NodeHealthDetailsFreeIpaResponse>();", "originalCommit": "63090f26e9030254dfb24dbb537962113968469a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMzODAxMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r375338010", "bodyText": "removed.", "author": "holleyism", "createdAt": "2020-02-05T15:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMTAyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMjI3Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r375122277", "body": "please use the placeholder: `{}`", "bodyText": "please use the placeholder: {}", "bodyHTML": "<p dir=\"auto\">please use the placeholder: <code>{}</code></p>", "author": "topolyai5", "createdAt": "2020-02-05T08:45:02Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package com.sequenceiq.freeipa.service.stack;\n+\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.DetailedStackStatus;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.instance.InstanceGroupType;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.HealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.NodeHealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClient;\n+import com.sequenceiq.freeipa.client.FreeIpaClientException;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.InstanceGroup;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaClientFactory;\n+\n+@Service\n+public class FreeIpaHealthDetailsService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaHealthDetailsService.class);\n+\n+    private static final String EXTERNAL_COMMAND_OUTPUT = \"ExternalCommandOutput\";\n+\n+    private static final String STATUS_OK = \"OK\";\n+\n+    private static final int STATUS_GROUP = 2;\n+\n+    private static final String MESSAGE_UNAVAILABLE = \"Message Unavailable\";\n+\n+    private static final Pattern RESULT_PATTERN = Pattern.compile(\"(ecure port|: TCP) \\\\([0-9]*\\\\): (.*)\");\n+\n+    private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private FreeIpaClientFactory freeIpaClientFactory;\n+\n+    public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n+        String masterCN = findMasterCN(stack);\n+        Optional<RPCResponse<Boolean>> rpcResponse = Optional.empty();\n+        try {\n+            rpcResponse = Optional.ofNullable(checkFreeIpaHealth(stack, masterCN));\n+        } catch (FreeIpaClientException e) {\n+            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        }\n+        return createResponse(stack, rpcResponse);\n+    }\n+\n+    private HealthDetailsFreeIpaResponse createResponse(Stack stack, Optional<RPCResponse<Boolean>> rpcResponse) {\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+        response.setEnvironmentCrn(stack.getEnvironmentCrn());\n+        response.setCrn(stack.getResourceCrn());\n+        if (rpcResponse.isPresent()) {\n+            response.setName((String) rpcResponse.get().getValue());\n+            parseMessages(rpcResponse.get(), response);\n+            if (isOverallHealthy(response)) {\n+                response.setStatus(DetailedStackStatus.PROVISIONED.getStatus());\n+            } else {\n+                response.setStatus(DetailedStackStatus.UNHEALTHY.getStatus());\n+            }\n+        } else {\n+            response.setStatus(DetailedStackStatus.UNREACHABLE.getStatus());\n+            NodeHealthDetailsFreeIpaResponse nodeResponse = null;\n+            nodeResponse = new NodeHealthDetailsFreeIpaResponse();\n+            response.addNodeHealthDetailsFreeIpaResponses(nodeResponse);\n+            nodeResponse.setStatus(Status.UNREACHABLE);\n+        }\n+        return response;\n+    }\n+\n+    private String findMasterCN(Stack stack) {\n+        InstanceGroup masterGroup = stack.getInstanceGroups().stream()\n+                .filter(instanceGroup -> InstanceGroupType.MASTER == instanceGroup.getInstanceGroupType()).findFirst().get();\n+        return masterGroup.getNotDeletedInstanceMetaDataSet().stream().findFirst().get().getDiscoveryFQDN();\n+    }\n+\n+    private RPCResponse<Boolean> checkFreeIpaHealth(Stack stack, String masterCN) throws FreeIpaClientException {\n+        FreeIpaClient freeIpaClient = freeIpaClientFactory.getFreeIpaClientForStack(stack);\n+        return freeIpaClient.serverConnCheck(masterCN, masterCN);\n+    }\n+\n+    private boolean isOverallHealthy(HealthDetailsFreeIpaResponse response) {\n+        for (NodeHealthDetailsFreeIpaResponse node: response.getNodeHealthDetailsFreeIpaResponses()) {\n+            if (node.getStatus().equals(Status.AVAILABLE)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private void parseMessages(RPCResponse<Boolean> rpcResponse, HealthDetailsFreeIpaResponse response) {\n+        String precedingMessage = MESSAGE_UNAVAILABLE;\n+        NodeHealthDetailsFreeIpaResponse nodeResponse = null;\n+        for (RPCMessage message : rpcResponse.getMessages()) {\n+            Matcher nodeMatcher = NEW_NODE_PATTERN.matcher(message.getMessage());\n+            if (nodeMatcher.find()) {\n+                nodeResponse = new NodeHealthDetailsFreeIpaResponse();\n+                response.addNodeHealthDetailsFreeIpaResponses(nodeResponse);\n+                nodeResponse.setStatus(Status.AVAILABLE);\n+            }\n+            if (nodeResponse == null) {\n+                LOGGER.info(\"No node for message:\" + message.getMessage());", "originalCommit": "63090f26e9030254dfb24dbb537962113968469a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM0MDcwMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r375340702", "bodyText": "fixed.", "author": "holleyism", "createdAt": "2020-02-05T15:51:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMjI3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMzMwMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r375123302", "body": "1. this call's during can be more than 2sec (with freeipaClientFactory more than 5 sec). All client will timeout\r\n2. the autosyncer do the same. I think you can parse the response there and set into the database as a `statusReason`. \r\n\r\nThis solution can provide a different status than we now in the db and produce inconsistence operation", "bodyText": "this call's during can be more than 2sec (with freeipaClientFactory more than 5 sec). All client will timeout\nthe autosyncer do the same. I think you can parse the response there and set into the database as a statusReason.\n\nThis solution can provide a different status than we now in the db and produce inconsistence operation", "bodyHTML": "<ol dir=\"auto\">\n<li>this call's during can be more than 2sec (with freeipaClientFactory more than 5 sec). All client will timeout</li>\n<li>the autosyncer do the same. I think you can parse the response there and set into the database as a <code>statusReason</code>.</li>\n</ol>\n<p dir=\"auto\">This solution can provide a different status than we now in the db and produce inconsistence operation</p>", "author": "topolyai5", "createdAt": "2020-02-05T08:47:24Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package com.sequenceiq.freeipa.service.stack;\n+\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.DetailedStackStatus;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.instance.InstanceGroupType;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.HealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health.NodeHealthDetailsFreeIpaResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClient;\n+import com.sequenceiq.freeipa.client.FreeIpaClientException;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.InstanceGroup;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaClientFactory;\n+\n+@Service\n+public class FreeIpaHealthDetailsService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaHealthDetailsService.class);\n+\n+    private static final String EXTERNAL_COMMAND_OUTPUT = \"ExternalCommandOutput\";\n+\n+    private static final String STATUS_OK = \"OK\";\n+\n+    private static final int STATUS_GROUP = 2;\n+\n+    private static final String MESSAGE_UNAVAILABLE = \"Message Unavailable\";\n+\n+    private static final Pattern RESULT_PATTERN = Pattern.compile(\"(ecure port|: TCP) \\\\([0-9]*\\\\): (.*)\");\n+\n+    private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private FreeIpaClientFactory freeIpaClientFactory;\n+\n+    public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n+        String masterCN = findMasterCN(stack);\n+        Optional<RPCResponse<Boolean>> rpcResponse = Optional.empty();\n+        try {\n+            rpcResponse = Optional.ofNullable(checkFreeIpaHealth(stack, masterCN));", "originalCommit": "63090f26e9030254dfb24dbb537962113968469a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM1NjAxMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r375356012", "bodyText": "Per our conversation, 1. the only clients that should be using this today are the ones interacting for HA purposes so we should be able to handle the longer call times.\n2. While these are close today, the status we'll need for the individual groups, and nodes in the stack is a slightly different use case.  Additionally, we might need to move away from server_conncheck, but using it for now since it's there.\nThere will probably be additional permutations of this structure as we get all the HA pieces lined up and once finalized, we will sync up with the describe status.  For now I think it's good to keep these separate because the users are separate, and we might need to add additional details as we work through adding HA.  I create https://jira.cloudera.com/browse/CB-5450 to track the follow up.", "author": "holleyism", "createdAt": "2020-02-05T16:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMzMwMg=="}], "type": "inlineReview"}, {"oid": "39d3012f6b1798a4104f3c649d7cabd6e7e6724d", "url": "https://github.com/hortonworks/cloudbreak/commit/39d3012f6b1798a4104f3c649d7cabd6e7e6724d", "message": "CB-5094: Add connection check for FreeIPA MS to FreeIPA server\n\nThis patch adds the ability to get a detailed status\nfrom FreeIPA servers.  This information will be used\nby the CLI and UI to provide detailed status information\nfor the FreeIPA node. This will also fix CB-5333", "committedDate": "2020-02-05T16:44:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MTgwNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r375671804", "body": "I meant the property name and not the class name. Could you please rename the property name? ", "bodyText": "I meant the property name and not the class name. Could you please rename the property name?", "bodyHTML": "<p dir=\"auto\">I meant the property name and not the class name. Could you please rename the property name?</p>", "author": "topolyai5", "createdAt": "2020-02-06T07:18:29Z", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/health/HealthDetailsFreeIpaResponse.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.sequenceiq.freeipa.api.v1.freeipa.stack.model.health;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.doc.FreeIpaModelDescriptions;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.service.api.doc.ModelDescriptions;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel(\"HealthDetailsFreeIpaV1Response\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class HealthDetailsFreeIpaResponse {\n+    @NotNull\n+    @ApiModelProperty(value = ModelDescriptions.ENVIRONMENT_CRN, required = true)\n+    private String environmentCrn;\n+\n+    @NotNull\n+    @ApiModelProperty(value = FreeIpaModelDescriptions.FREEIPA_NAME, required = true)\n+    private String name;\n+\n+    @NotNull\n+    private String crn;\n+\n+    @NotNull\n+    private List<NodeHealthDetails> nodeHealthDetailsFreeIpaRespons;", "originalCommit": "39d3012f6b1798a4104f3c649d7cabd6e7e6724d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg4MTAwMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7193#discussion_r375881003", "bodyText": "changed.", "author": "holleyism", "createdAt": "2020-02-06T14:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MTgwNA=="}], "type": "inlineReview"}, {"oid": "47f3052e7d42f26861dcee92fb7a621625bdb94a", "url": "https://github.com/hortonworks/cloudbreak/commit/47f3052e7d42f26861dcee92fb7a621625bdb94a", "message": "CB-5094: Add connection check for FreeIPA MS to FreeIPA server\n\nThis patch adds the ability to get a detailed status\nfrom FreeIPA servers.  This information will be used\nby the CLI and UI to provide detailed status information\nfor the FreeIPA node. This will also fix CB-5333", "committedDate": "2020-02-06T14:55:01Z", "type": "commit"}, {"oid": "47f3052e7d42f26861dcee92fb7a621625bdb94a", "url": "https://github.com/hortonworks/cloudbreak/commit/47f3052e7d42f26861dcee92fb7a621625bdb94a", "message": "CB-5094: Add connection check for FreeIPA MS to FreeIPA server\n\nThis patch adds the ability to get a detailed status\nfrom FreeIPA servers.  This information will be used\nby the CLI and UI to provide detailed status information\nfor the FreeIPA node. This will also fix CB-5333", "committedDate": "2020-02-06T14:55:01Z", "type": "forcePushed"}]}