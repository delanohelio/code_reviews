{"pr_number": 1075, "pr_title": "Unwrap instances of `SSLException`", "pr_author": "idelpivnitskiy", "pr_createdAt": "2020-05-30T00:49:52Z", "pr_url": "https://github.com/apple/servicetalk/pull/1075", "timeline": [{"oid": "706d7987014c2b0d76136b47ae4db3e65503f17a", "url": "https://github.com/apple/servicetalk/commit/706d7987014c2b0d76136b47ae4db3e65503f17a", "message": "Unwrap instances of `SSLException`\n\nMotivation:\n\n`SslHandler` extends `ByteToMessageDecoder` that wraps all thrown\nexceptions with `DecoderException`. This complicates understanding of\nthe problem when users expect an instance of `SSLException`.\n\nModifications:\n\n- Intercept all caught exceptions and unwrap `SSLException` if possible;\n\nResult:\n\nUsers directly receive `SSLException`.", "committedDate": "2020-05-30T00:49:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3MjI2MA==", "url": "https://github.com/apple/servicetalk/pull/1075#discussion_r433672260", "body": "nit: you could only do the actual unwrap if needed as `getCause()` may be expensive.\r\n\r\n```java\r\nfinal Throwable cause;\r\n\r\nif (t instanceof DecoderException && ((cause = t.getCause()) instanceof SSLException) {\r\n     return cause;\r\n}\r\nreturn t;\r\n```", "bodyText": "nit: you could only do the actual unwrap if needed as getCause() may be expensive.\nfinal Throwable cause;\n\nif (t instanceof DecoderException && ((cause = t.getCause()) instanceof SSLException) {\n     return cause;\n}\nreturn t;", "bodyHTML": "<p dir=\"auto\">nit: you could only do the actual unwrap if needed as <code>getCause()</code> may be expensive.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"final Throwable cause;\n\nif (t instanceof DecoderException &amp;&amp; ((cause = t.getCause()) instanceof SSLException) {\n     return cause;\n}\nreturn t;\n\"><pre><span class=\"pl-k\">final</span> <span class=\"pl-smi\">Throwable</span> cause;\n\n<span class=\"pl-k\">if</span> (t <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">DecoderException</span> <span class=\"pl-k\">&amp;&amp;</span> ((cause <span class=\"pl-k\">=</span> t<span class=\"pl-k\">.</span>getCause()) <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">SSLException</span>) {\n     <span class=\"pl-k\">return</span> cause;\n}\n<span class=\"pl-k\">return</span> t;</pre></div>", "author": "normanmaurer", "createdAt": "2020-06-02T07:25:10Z", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/DefaultNettyConnection.java", "diffHunk": "@@ -528,7 +530,18 @@ public void handlerRemoved(ChannelHandlerContext ctx) {\n \n         @Override\n         public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n-            connection.nettyChannelPublisher.exceptionCaught(cause);\n+            connection.nettyChannelPublisher.exceptionCaught(unwrapThrowable(cause));\n+        }\n+\n+        /**\n+         * Unwraps certain types of netty exceptions to directly expose its cause to improve debuggability.\n+         */\n+        private static Throwable unwrapThrowable(final Throwable t) {\n+            final Throwable cause = t.getCause();\n+            if (t instanceof DecoderException && cause instanceof SSLException) {", "originalCommit": "706d7987014c2b0d76136b47ae4db3e65503f17a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwNzY5MA==", "url": "https://github.com/apple/servicetalk/pull/1075#discussion_r434007690", "bodyText": "Follow-up: #1077", "author": "idelpivnitskiy", "createdAt": "2020-06-02T16:20:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3MjI2MA=="}], "type": "inlineReview"}]}