{"pr_number": 7677, "pr_title": "KEYCLOAK-15695 Streamification cleanup", "pr_author": "martin-kanis", "pr_createdAt": "2020-12-14T10:00:33Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7677", "timeline": [{"oid": "3de58c6e1b412ac1806cb037b708ef38c77df38b", "url": "https://github.com/keycloak/keycloak/commit/3de58c6e1b412ac1806cb037b708ef38c77df38b", "message": "KEYCLOAK-15695 Streamification cleanup", "committedDate": "2020-12-14T14:41:22Z", "type": "forcePushed"}, {"oid": "7de3a89f684f83edd7e140dc97148696c3e182f3", "url": "https://github.com/keycloak/keycloak/commit/7de3a89f684f83edd7e140dc97148696c3e182f3", "message": "KEYCLOAK-15695 Streamification cleanup", "committedDate": "2020-12-16T19:44:49Z", "type": "forcePushed"}, {"oid": "fc2d84581dcbba0831a80525373a19a241073229", "url": "https://github.com/keycloak/keycloak/commit/fc2d84581dcbba0831a80525373a19a241073229", "message": "KEYCLOAK-15695 Streamification cleanup", "committedDate": "2020-12-16T19:48:17Z", "type": "forcePushed"}, {"oid": "7beadfeca11325ba847c1d02b7a4e17a32046be6", "url": "https://github.com/keycloak/keycloak/commit/7beadfeca11325ba847c1d02b7a4e17a32046be6", "message": "KEYCLOAK-15695 Streamification cleanup", "committedDate": "2020-12-16T21:02:21Z", "type": "forcePushed"}, {"oid": "beb1f2d2e70d6077e97f488b4c2c80dd63578d6a", "url": "https://github.com/keycloak/keycloak/commit/beb1f2d2e70d6077e97f488b4c2c80dd63578d6a", "message": "KEYCLOAK-15695 Streamification cleanup", "committedDate": "2020-12-17T11:46:43Z", "type": "forcePushed"}, {"oid": "410df0dc432fccc3c1f1ed9391ea151ab475218c", "url": "https://github.com/keycloak/keycloak/commit/410df0dc432fccc3c1f1ed9391ea151ab475218c", "message": "KEYCLOAK-15695 Server-spi-private cleanup", "committedDate": "2021-01-06T13:58:03Z", "type": "forcePushed"}, {"oid": "6b571f4b2ad37f9992648df079090ad1f72d9681", "url": "https://github.com/keycloak/keycloak/commit/6b571f4b2ad37f9992648df079090ad1f72d9681", "message": "KEYCLOAK-15695 Server-spi-private cleanup", "committedDate": "2021-01-06T18:36:30Z", "type": "forcePushed"}, {"oid": "ddcf3802aa3c55ecf298151d8a6c03fe2449f330", "url": "https://github.com/keycloak/keycloak/commit/ddcf3802aa3c55ecf298151d8a6c03fe2449f330", "message": "KEYCLOAK-15695 Server-spi-private cleanup", "committedDate": "2021-01-07T09:30:08Z", "type": "forcePushed"}, {"oid": "41ba09ac88192be33523dc4441079a35ed6cfea6", "url": "https://github.com/keycloak/keycloak/commit/41ba09ac88192be33523dc4441079a35ed6cfea6", "message": "KEYCLOAK-15695 Unify first & max parameters and javadocs", "committedDate": "2021-01-11T11:44:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3NDg5NA==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r554474894", "body": "What is the reason for this change? Could the distinct be rather part of the respective SQL statement?", "bodyText": "What is the reason for this change? Could the distinct be rather part of the respective SQL statement?", "bodyHTML": "<p dir=\"auto\">What is the reason for this change? Could the distinct be rather part of the respective SQL statement?</p>", "author": "hmlnarik", "createdAt": "2021-01-09T21:26:23Z", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/GroupAdapter.java", "diffHunk": "@@ -123,7 +123,7 @@ public void removeChild(GroupModel subGroup) {\n     public Stream<GroupModel> getSubGroupsStream() {\n         TypedQuery<String> query = em.createNamedQuery(\"getGroupIdsByParent\", String.class);\n         query.setParameter(\"parent\", group.getId());\n-        return closing(query.getResultStream().map(realm::getGroupById).filter(Objects::nonNull));\n+        return closing(query.getResultStream().map(realm::getGroupById).filter(Objects::nonNull).distinct());", "originalCommit": "ddcf3802aa3c55ecf298151d8a6c03fe2449f330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU2NDYwMg==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r555564602", "bodyText": "The method used to return a set before streamification so I added distinct(). Looking more into SQL statement and its semantics I don't really see a situation where duplicate groups can occur.", "author": "martin-kanis", "createdAt": "2021-01-12T07:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3NDg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE0ODQxNQ==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560148415", "bodyText": "Please remove the distinct() to avoid premature realization of the stream.", "author": "hmlnarik", "createdAt": "2021-01-19T12:40:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3NDg5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3NTA4Nw==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r554475087", "body": "Rather predefine a `private static final Set` with the classes and refer to `contains` method of that one instead.", "bodyText": "Rather predefine a private static final Set with the classes and refer to contains method of that one instead.", "bodyHTML": "<p dir=\"auto\">Rather predefine a <code>private static final Set</code> with the classes and refer to <code>contains</code> method of that one instead.</p>", "author": "hmlnarik", "createdAt": "2021-01-09T21:28:15Z", "path": "quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/KeycloakProcessor.java", "diffHunk": "@@ -250,34 +250,30 @@ void configureDevMode(BuildProducer<HotDeploymentWatchedFileBuildItem> hotFiles)\n         ProviderManager pm = new ProviderManager(KeycloakDeploymentInfo.create().services(), new BuildClassLoader());\n         Map<Spi, Map<Class<? extends Provider>, Map<String, ProviderFactory>>> factories = new HashMap<>();\n \n-        for (Spi spi : pm.loadSpis()) {\n+        pm.loadSpis().forEach(spi -> {\n             Map<Class<? extends Provider>, Map<String, ProviderFactory>> providers = new HashMap<>();\n \n-            for (ProviderFactory factory : pm.load(spi)) {\n-                if (Arrays.asList(\n-                        JBossJtaTransactionManagerLookup.class,\n-                        DefaultJpaConnectionProviderFactory.class,\n-                        DefaultLiquibaseConnectionProvider.class,\n-                        LiquibaseJpaUpdaterProviderFactory.class).contains(factory.getClass())) {\n-                    continue;\n-                }\n-\n-                Config.Scope scope = Config.scope(spi.getName(), factory.getId());\n-\n-                if (isEnabled(factory, scope)) {\n-                    if (spi.isInternal() && !isInternal(factory)) {\n-                        ServicesLogger.LOGGER.spiMayChange(factory.getId(), factory.getClass().getName(), spi.getName());\n-                    }\n-\n-                    providers.computeIfAbsent(spi.getProviderClass(), aClass -> new HashMap<>()).put(factory.getId(),\n-                            factory);\n-                } else {\n-                    logger.debugv(\"SPI {0} provider {1} disabled\", spi.getName(), factory.getId());\n-                }\n-            }\n-\n+            pm.load(spi).filter(factory -> !Arrays.asList(\n+                            JBossJtaTransactionManagerLookup.class,\n+                            DefaultJpaConnectionProviderFactory.class,\n+                            DefaultLiquibaseConnectionProvider.class,\n+                            LiquibaseJpaUpdaterProviderFactory.class).contains(factory.getClass()))", "originalCommit": "ddcf3802aa3c55ecf298151d8a6c03fe2449f330", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3NTE3Nw==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r554475177", "body": "I'd rather keep this class as it was.", "bodyText": "I'd rather keep this class as it was.", "bodyHTML": "<p dir=\"auto\">I'd rather keep this class as it was.</p>", "author": "hmlnarik", "createdAt": "2021-01-09T21:29:23Z", "path": "quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/KeycloakProcessor.java", "diffHunk": "@@ -250,34 +250,30 @@ void configureDevMode(BuildProducer<HotDeploymentWatchedFileBuildItem> hotFiles)\n         ProviderManager pm = new ProviderManager(KeycloakDeploymentInfo.create().services(), new BuildClassLoader());\n         Map<Spi, Map<Class<? extends Provider>, Map<String, ProviderFactory>>> factories = new HashMap<>();\n \n-        for (Spi spi : pm.loadSpis()) {\n+        pm.loadSpis().forEach(spi -> {", "originalCommit": "ddcf3802aa3c55ecf298151d8a6c03fe2449f330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTYxNDM5Mg==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r555614392", "bodyText": "Reverted", "author": "martin-kanis", "createdAt": "2021-01-12T09:09:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3NTE3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3NTUxMw==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r554475513", "body": "```suggestion\r\n    public Stream<PolicyProviderFactory> getProviderFactoriesStream() {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Stream<PolicyProviderFactory> getProviderFactories() {\n          \n          \n            \n                public Stream<PolicyProviderFactory> getProviderFactoriesStream() {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">Stream&lt;<span class=\"pl-smi\">PolicyProviderFactory</span>&gt;</span> <span class=\"x x-first x-last\">getProviderFactories</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">Stream&lt;<span class=\"pl-smi\">PolicyProviderFactory</span>&gt;</span> <span class=\"x x-first x-last\">getProviderFactoriesStream</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "hmlnarik", "createdAt": "2021-01-09T21:33:19Z", "path": "server-spi-private/src/main/java/org/keycloak/authorization/AuthorizationProvider.java", "diffHunk": "@@ -126,11 +127,11 @@ public StoreFactory getLocalStoreFactory() {\n     /**\n      * Returns the registered {@link PolicyProviderFactory}.\n      *\n-     * @return a {@link List} containing all registered {@link PolicyProviderFactory}\n+     * @return a {@link Stream} containing all registered {@link PolicyProviderFactory}\n      */\n-    public Collection<PolicyProviderFactory> getProviderFactories() {\n-        return keycloakSession.getKeycloakSessionFactory().getProviderFactories(PolicyProvider.class).stream().map(\n-                PolicyProviderFactory.class::cast).collect(Collectors.toList());\n+    public Stream<PolicyProviderFactory> getProviderFactories() {", "originalCommit": "ddcf3802aa3c55ecf298151d8a6c03fe2449f330", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3NTk1OA==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r554475958", "body": "I'd rather keep this class as is. This is not used often and stream processing here is not beneficial. This applies to dependent classes (like DefaultKeycloakSessionFactory) as well.", "bodyText": "I'd rather keep this class as is. This is not used often and stream processing here is not beneficial. This applies to dependent classes (like DefaultKeycloakSessionFactory) as well.", "bodyHTML": "<p dir=\"auto\">I'd rather keep this class as is. This is not used often and stream processing here is not beneficial. This applies to dependent classes (like DefaultKeycloakSessionFactory) as well.</p>", "author": "hmlnarik", "createdAt": "2021-01-09T21:37:51Z", "path": "server-spi-private/src/main/java/org/keycloak/provider/ProviderLoader.java", "diffHunk": "@@ -18,6 +18,8 @@\n package org.keycloak.provider;\n \n import java.util.List;\n+import java.util.stream.Collectors;", "originalCommit": "ddcf3802aa3c55ecf298151d8a6c03fe2449f330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTYxNDI5MA==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r555614290", "bodyText": "Reverted", "author": "martin-kanis", "createdAt": "2021-01-12T09:09:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3NTk1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3NjE4NQ==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r554476185", "body": "I'd keep `getSpis` as was", "bodyText": "I'd keep getSpis as was", "bodyHTML": "<p dir=\"auto\">I'd keep <code>getSpis</code> as was</p>", "author": "hmlnarik", "createdAt": "2021-01-09T21:40:05Z", "path": "server-spi/src/main/java/org/keycloak/models/KeycloakSessionFactory.java", "diffHunk": "@@ -32,15 +34,45 @@\n public interface KeycloakSessionFactory extends ProviderEventManager {\n     KeycloakSession create();\n \n-    Set<Spi> getSpis();\n+    /**", "originalCommit": "ddcf3802aa3c55ecf298151d8a6c03fe2449f330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTYxNDA4Mw==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r555614083", "bodyText": "done", "author": "martin-kanis", "createdAt": "2021-01-12T09:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3NjE4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3ODk3MA==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r554478970", "body": "I'd rather keep this file as was", "bodyText": "I'd rather keep this file as was", "bodyHTML": "<p dir=\"auto\">I'd rather keep this file as was</p>", "author": "hmlnarik", "createdAt": "2021-01-09T22:11:29Z", "path": "services/src/main/java/org/keycloak/services/resources/admin/info/ServerInfoAdminResource.java", "diffHunk": "@@ -61,13 +59,17 @@\n import javax.ws.rs.core.Context;\n import javax.ws.rs.core.MediaType;\n import java.io.IOException;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;", "originalCommit": "ddcf3802aa3c55ecf298151d8a6c03fe2449f330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTYwNTM2Mw==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r555605363", "bodyText": "I reverted the getSpis() part. Do you want to revert getProviderFactoriesStream() part as well? Note that the method has 40 usages and most of them look more convenient with Stream variant.", "author": "martin-kanis", "createdAt": "2021-01-12T08:54:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3ODk3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE1MjA0OQ==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560152049", "bodyText": "You're right, getProviderFactoriesStream() should be kept", "author": "hmlnarik", "createdAt": "2021-01-19T12:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3ODk3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3OTgzMQ==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r554479831", "body": "Can this be handled via `collect()` to map instead?", "bodyText": "Can this be handled via collect() to map instead?", "bodyHTML": "<p dir=\"auto\">Can this be handled via <code>collect()</code> to map instead?</p>", "author": "hmlnarik", "createdAt": "2021-01-09T22:21:39Z", "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/util/FeatureDeployerUtil.java", "diffHunk": "@@ -126,17 +125,10 @@ private static KeycloakDeploymentInfo createDeploymentInfo(Map<ProviderFactory,\n         DefaultProviderLoader loader = new DefaultProviderLoader(di, classLoader);\n \n         Map<ProviderFactory, Spi> providerFactories = new HashMap<>();\n-        for (Spi spi : loader.loadSpis()) {\n-            List<ProviderFactory> currentFactories = loader.load(spi);\n-            for (ProviderFactory factory : currentFactories) {\n-                if (factory instanceof EnvironmentDependentProviderFactory) {\n-                    if (((EnvironmentDependentProviderFactory) factory).isSupported()) {\n-                        providerFactories.put(factory, spi);\n-                    }\n-                }\n-\n-            }\n-        }\n+        loader.loadSpisStream().forEach(spi -> loader.loadStream(spi)\n+                .filter(EnvironmentDependentProviderFactory.class::isInstance)\n+                .filter(factory -> ((EnvironmentDependentProviderFactory) factory).isSupported())\n+                .forEach(factory -> providerFactories.put(factory, spi)));", "originalCommit": "ddcf3802aa3c55ecf298151d8a6c03fe2449f330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTYwMTYxNA==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r555601614", "bodyText": "Reverted back to loadSpis().", "author": "martin-kanis", "createdAt": "2021-01-12T08:48:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3OTgzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQzNzkxNA==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r555437914", "body": "Can we use PaginationUtils.paginateQuery instead?", "bodyText": "Can we use PaginationUtils.paginateQuery instead?", "bodyHTML": "<p dir=\"auto\">Can we use PaginationUtils.paginateQuery instead?</p>", "author": "vramik", "createdAt": "2021-01-12T00:56:41Z", "path": "model/jpa/src/main/java/org/keycloak/events/jpa/JpaAdminEventQuery.java", "diffHunk": "@@ -153,11 +153,11 @@ public AdminEventQuery maxResults(int maxResults) {\n \n         TypedQuery<AdminEventEntity> query = em.createQuery(cq);\n \n-        if (firstResult != null) {\n+        if (firstResult != null && firstResult > 0) {", "originalCommit": "41ba09ac88192be33523dc4441079a35ed6cfea6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTYyMjQyNQ==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r555622425", "bodyText": "I'd say it doesn't provide big benefit because we still need to check and set maxResults to DEFAULT_MAX_RESULTS. See the else clause for details.", "author": "martin-kanis", "createdAt": "2021-01-12T09:22:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQzNzkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM2NjA4MQ==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r556366081", "bodyText": "I added workaround for HHH-14295 to paginateQuery functionso it should be safe to use here. See: 623eb2f#diff-1f7f50ee362cfb68b3f5ff709fc15ab52205fe78a1190642b7ca1db284817185R13-R16", "author": "mhajas", "createdAt": "2021-01-13T09:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQzNzkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQzODAzOA==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r555438038", "body": "same here", "bodyText": "same here", "bodyHTML": "<p dir=\"auto\">same here</p>", "author": "vramik", "createdAt": "2021-01-12T00:57:02Z", "path": "model/jpa/src/main/java/org/keycloak/events/jpa/JpaEventQuery.java", "diffHunk": "@@ -127,11 +127,11 @@ public EventQuery maxResults(int maxResults) {\n \n         TypedQuery<EventEntity> query = em.createQuery(cq);\n \n-        if (firstResult != null) {\n+        if (firstResult != null && firstResult > 0) {", "originalCommit": "41ba09ac88192be33523dc4441079a35ed6cfea6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ0MDYzMQ==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r555440631", "body": "I found out the meaning of `expanded roles` term only from javadoc above. Maybe it'd be worth to rewrite this javadoc to include the info that it returns all roles included composite ones, wdyt?", "bodyText": "I found out the meaning of expanded roles term only from javadoc above. Maybe it'd be worth to rewrite this javadoc to include the info that it returns all roles included composite ones, wdyt?", "bodyHTML": "<p dir=\"auto\">I found out the meaning of <code>expanded roles</code> term only from javadoc above. Maybe it'd be worth to rewrite this javadoc to include the info that it returns all roles included composite ones, wdyt?</p>", "author": "vramik", "createdAt": "2021-01-12T01:05:51Z", "path": "server-spi/src/main/java/org/keycloak/models/ClientSessionContext.java", "diffHunk": "@@ -43,18 +43,23 @@\n \n     /**\n      * Returns client scopes as a stream.\n-     * @return Stream of client scopes.\n+     * @return Stream of client scopes. Never returns {@code null}.\n      */\n     Stream<ClientScopeModel> getClientScopesStream();\n \n     /**\n+     * @deprecated Use {@link #getRolesStream() getRolesStream} instead.\n      * @return expanded roles (composite roles already applied)\n      */\n     @Deprecated\n     default Set<RoleModel> getRoles() {\n         return getRolesStream().collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns expanded roles as a stream.", "originalCommit": "41ba09ac88192be33523dc4441079a35ed6cfea6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTYyNDA0NA==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r555624044", "bodyText": "Done", "author": "martin-kanis", "createdAt": "2021-01-12T09:24:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ0MDYzMQ=="}], "type": "inlineReview"}, {"oid": "48c917a6ae05281830cda26b64137061cf7745f2", "url": "https://github.com/keycloak/keycloak/commit/48c917a6ae05281830cda26b64137061cf7745f2", "message": "KEYCLOAK-15695 Unify first & max parameters and javadocs", "committedDate": "2021-01-12T09:32:19Z", "type": "forcePushed"}, {"oid": "745b225cf2f0534fb1dc38daa7eaa29db770d8d3", "url": "https://github.com/keycloak/keycloak/commit/745b225cf2f0534fb1dc38daa7eaa29db770d8d3", "message": "KEYCLOAK-15695 Unify first & max parameters and javadocs", "committedDate": "2021-01-12T09:34:46Z", "type": "forcePushed"}, {"oid": "05a25b5ab5cbd65c679b52fb0a15cdb438a98959", "url": "https://github.com/keycloak/keycloak/commit/05a25b5ab5cbd65c679b52fb0a15cdb438a98959", "message": "KEYCLOAK-15695 Unify first & max parameters and javadocs", "committedDate": "2021-01-18T19:07:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDEyNjkyMw==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560126923", "body": "Ca you please explain this change for me?", "bodyText": "Ca you please explain this change for me?", "bodyHTML": "<p dir=\"auto\">Ca you please explain this change for me?</p>", "author": "vramik", "createdAt": "2021-01-19T12:01:21Z", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/GroupAdapter.java", "diffHunk": "@@ -247,7 +247,7 @@ public void grantRole(RoleModel role) {\n         // even if we're getting just the id.\n         TypedQuery<String> query = em.createNamedQuery(\"groupRoleMappingIds\", String.class);\n         query.setParameter(\"group\", getEntity());\n-        return closing(query.getResultStream().map(realm::getRoleById).filter(Objects::nonNull));\n+        return closing(query.getResultStream().map(realm::getRoleById).filter(Objects::nonNull).distinct());", "originalCommit": "05a25b5ab5cbd65c679b52fb0a15cdb438a98959", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE4MDQzOA==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560180438", "bodyText": "I reverted this. I thought it was missing distinct() as the method used to return Set before.", "author": "martin-kanis", "createdAt": "2021-01-19T13:38:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDEyNjkyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDEzMTYyOA==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560131628", "body": "I wonder if we should add a javadoc to all methods from this interface, wdyt?", "bodyText": "I wonder if we should add a javadoc to all methods from this interface, wdyt?", "bodyHTML": "<p dir=\"auto\">I wonder if we should add a javadoc to all methods from this interface, wdyt?</p>", "author": "vramik", "createdAt": "2021-01-19T12:10:20Z", "path": "server-spi/src/main/java/org/keycloak/models/RealmModel.java", "diffHunk": "@@ -460,6 +523,11 @@\n         return getIdentityProviderMappersByAliasStream(brokerAlias).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns identity provider mappers by the provided alias as a stream.\n+     * @param brokerAlias {@code String} Broker's alias to filter results.\n+     * @return Stream of {@link IdentityProviderMapperModel} Never returns {@code null}.\n+     */\n     Stream<IdentityProviderMapperModel> getIdentityProviderMappersByAliasStream(String brokerAlias);\n \n     IdentityProviderMapperModel addIdentityProviderMapper(IdentityProviderMapperModel model);", "originalCommit": "05a25b5ab5cbd65c679b52fb0a15cdb438a98959", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE3ODM1NQ==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560178355", "bodyText": "That would be quite an extensive list of methods :) I would personally leave that for a separate task as it is not related to streamification cleanup but lets see what others think as well.", "author": "martin-kanis", "createdAt": "2021-01-19T13:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDEzMTYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE5OTk4NQ==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560199985", "bodyText": "That makes sense, let's create a jira for it and leave this one as is, thank you.", "author": "vramik", "createdAt": "2021-01-19T14:07:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDEzMTYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDIwOTgyOQ==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560209829", "bodyText": "For the purpose of the streamification work I would leave those non-documented methods alone. I agree that every method in the SPI should be properly documented but at the same time I think this task warrants its own tracker. So to me this kind of thing falls out of the scope of the streamification work.", "author": "sguilhen", "createdAt": "2021-01-19T14:21:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDEzMTYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDEzMjE1OA==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560132158", "body": "same here, shouldn't we add javadoc to all?", "bodyText": "same here, shouldn't we add javadoc to all?", "bodyHTML": "<p dir=\"auto\">same here, shouldn't we add javadoc to all?</p>", "author": "vramik", "createdAt": "2021-01-19T12:11:22Z", "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -69,13 +78,18 @@\n     void removeClientInitialAccessModel(RealmModel realm, String id);", "originalCommit": "05a25b5ab5cbd65c679b52fb0a15cdb438a98959", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDEzMjY0MA==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560132640", "body": "as well as here, should we add javadoc to all methods?", "bodyText": "as well as here, should we add javadoc to all methods?", "bodyHTML": "<p dir=\"auto\">as well as here, should we add javadoc to all methods?</p>", "author": "vramik", "createdAt": "2021-01-19T12:12:15Z", "path": "server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java", "diffHunk": "@@ -49,25 +49,51 @@\n \n     boolean removeRole(RoleModel role);", "originalCommit": "05a25b5ab5cbd65c679b52fb0a15cdb438a98959", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDEzMzUxMg==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560133512", "body": "same here", "bodyText": "same here", "bodyHTML": "<p dir=\"auto\">same here</p>", "author": "vramik", "createdAt": "2021-01-19T12:13:58Z", "path": "server-spi/src/main/java/org/keycloak/models/RoleModel.java", "diffHunk": "@@ -44,11 +44,18 @@\n \n     void removeCompositeRole(RoleModel role);", "originalCommit": "05a25b5ab5cbd65c679b52fb0a15cdb438a98959", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDEzNjkzNw==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560136937", "body": "Is there any benefit to change it to `forEach`?", "bodyText": "Is there any benefit to change it to forEach?", "bodyHTML": "<p dir=\"auto\">Is there any benefit to change it to <code>forEach</code>?</p>", "author": "vramik", "createdAt": "2021-01-19T12:20:11Z", "path": "services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java", "diffHunk": "@@ -253,20 +254,19 @@ protected void checkProvider() {\n                 }\n \n             } else {\n-                for (ProviderFactory factory : pm.load(spi)) {\n+                pm.load(spi).forEach(factory -> {", "originalCommit": "05a25b5ab5cbd65c679b52fb0a15cdb438a98959", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE3NDExMg==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560174112", "bodyText": "No, I forgot to revert this part :)", "author": "martin-kanis", "createdAt": "2021-01-19T13:27:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDEzNjkzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE0MzY1MA==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560143650", "body": "nit: Maybe we could create private method\r\n```\r\nprivate ClientScopeRepresentation toRepresentation(ClientScopeModel clientScopeModel) {\r\n    ClientScopeRepresentation rep = new ClientScopeRepresentation();\r\n    rep.setId(clientScopeModel.getId());\r\n    rep.setName(clientScopeModel.getName());\r\n    return rep;\r\n}\r\n```\r\nthen we could use \r\n```\r\nreturn client.getClientScopes(defaultScope, true).values().stream()\r\n    .map(this::toRepresentation);\r\n```\r\nwdyt?", "bodyText": "nit: Maybe we could create private method\nprivate ClientScopeRepresentation toRepresentation(ClientScopeModel clientScopeModel) {\n    ClientScopeRepresentation rep = new ClientScopeRepresentation();\n    rep.setId(clientScopeModel.getId());\n    rep.setName(clientScopeModel.getName());\n    return rep;\n}\n\nthen we could use\nreturn client.getClientScopes(defaultScope, true).values().stream()\n    .map(this::toRepresentation);\n\nwdyt?", "bodyHTML": "<p dir=\"auto\">nit: Maybe we could create private method</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"private ClientScopeRepresentation toRepresentation(ClientScopeModel clientScopeModel) {\n    ClientScopeRepresentation rep = new ClientScopeRepresentation();\n    rep.setId(clientScopeModel.getId());\n    rep.setName(clientScopeModel.getName());\n    return rep;\n}\"><pre><code>private ClientScopeRepresentation toRepresentation(ClientScopeModel clientScopeModel) {\n    ClientScopeRepresentation rep = new ClientScopeRepresentation();\n    rep.setId(clientScopeModel.getId());\n    rep.setName(clientScopeModel.getName());\n    return rep;\n}\n</code></pre></div>\n<p dir=\"auto\">then we could use</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"return client.getClientScopes(defaultScope, true).values().stream()\n    .map(this::toRepresentation);\"><pre><code>return client.getClientScopes(defaultScope, true).values().stream()\n    .map(this::toRepresentation);\n</code></pre></div>\n<p dir=\"auto\">wdyt?</p>", "author": "vramik", "createdAt": "2021-01-19T12:32:19Z", "path": "services/src/main/java/org/keycloak/services/resources/admin/ClientResource.java", "diffHunk": "@@ -298,21 +296,20 @@ public RoleContainerResource getRoleContainerResource() {\n     @NoCache\n     @Produces(MediaType.APPLICATION_JSON)\n     @Path(\"default-client-scopes\")\n-    public List<ClientScopeRepresentation> getDefaultClientScopes() {\n+    public Stream<ClientScopeRepresentation> getDefaultClientScopes() {\n         return getDefaultClientScopes(true);\n     }\n \n-    private List<ClientScopeRepresentation> getDefaultClientScopes(boolean defaultScope) {\n+    private Stream<ClientScopeRepresentation> getDefaultClientScopes(boolean defaultScope) {\n         auth.clients().requireView(client);\n \n-        List<ClientScopeRepresentation> defaults = new LinkedList<>();\n-        for (ClientScopeModel clientScope : client.getClientScopes(defaultScope, true).values()) {\n-            ClientScopeRepresentation rep = new ClientScopeRepresentation();\n-            rep.setId(clientScope.getId());\n-            rep.setName(clientScope.getName());\n-            defaults.add(rep);\n-        }\n-        return defaults;\n+        return client.getClientScopes(defaultScope, true).values().stream()\n+                .map(clientScope -> {\n+                    ClientScopeRepresentation rep = new ClientScopeRepresentation();", "originalCommit": "05a25b5ab5cbd65c679b52fb0a15cdb438a98959", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE3NTI0Mg==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560175242", "bodyText": "Yeah, I agree :)", "author": "martin-kanis", "createdAt": "2021-01-19T13:29:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE0MzY1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI4NDQzOA==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560284438", "bodyText": "+1 And this should be a static", "author": "hmlnarik", "createdAt": "2021-01-19T15:56:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE0MzY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE5MjUzMQ==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560192531", "body": "I'm assuming this is being reverted as well?", "bodyText": "I'm assuming this is being reverted as well?", "bodyHTML": "<p dir=\"auto\">I'm assuming this is being reverted as well?</p>", "author": "sguilhen", "createdAt": "2021-01-19T13:56:30Z", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/UserAdapter.java", "diffHunk": "@@ -467,7 +467,7 @@ public void grantRoleImpl(RoleModel role) {\n         // even if we're getting just the id.\n         TypedQuery<String> query = em.createNamedQuery(\"userRoleMappingIds\", String.class);\n         query.setParameter(\"user\", getEntity());\n-        return closing(query.getResultStream().map(realm::getRoleById).filter(Objects::nonNull));\n+        return closing(query.getResultStream().map(realm::getRoleById).filter(Objects::nonNull).distinct());", "originalCommit": "05a25b5ab5cbd65c679b52fb0a15cdb438a98959", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI5ODIxMw==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560298213", "bodyText": "Yes, this was reverted in the latest commit.", "author": "martin-kanis", "createdAt": "2021-01-19T16:13:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE5MjUzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDIwNzI5Mw==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560207293", "body": "Think we need some consensus on spacing - I usually leave a blank line between the method's description and parameters (much like the javadocs in the Java API classes) while this removes the blank line. The processed javadoc is identical but I wonder if we shouldn't pick one way of doing it and sticking to it.", "bodyText": "Think we need some consensus on spacing - I usually leave a blank line between the method's description and parameters (much like the javadocs in the Java API classes) while this removes the blank line. The processed javadoc is identical but I wonder if we shouldn't pick one way of doing it and sticking to it.", "bodyHTML": "<p dir=\"auto\">Think we need some consensus on spacing - I usually leave a blank line between the method's description and parameters (much like the javadocs in the Java API classes) while this removes the blank line. The processed javadoc is identical but I wonder if we shouldn't pick one way of doing it and sticking to it.</p>", "author": "sguilhen", "createdAt": "2021-01-19T14:18:12Z", "path": "server-spi-private/src/main/java/org/keycloak/provider/ProviderLoader.java", "diffHunk": "@@ -26,17 +26,14 @@\n \n     /**\n      * Load the SPI definitions themselves.\n-     *", "originalCommit": "05a25b5ab5cbd65c679b52fb0a15cdb438a98959", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDIxMTgxNA==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560211814", "body": "I think we again need some consensus on the description of the returned stream. When I documented I used a wording along the lines of \"@return a non-null {@link Stream} of realm roles\" whereas in this case the fact that the stream can't be null is communicated in a different way. Not a deal breaker for this particular PR, just something we might want to make consistent as part of a follow-up documentation Jira, for example.", "bodyText": "I think we again need some consensus on the description of the returned stream. When I documented I used a wording along the lines of \"@return a non-null {@link Stream} of realm roles\" whereas in this case the fact that the stream can't be null is communicated in a different way. Not a deal breaker for this particular PR, just something we might want to make consistent as part of a follow-up documentation Jira, for example.", "bodyHTML": "<p dir=\"auto\">I think we again need some consensus on the description of the returned stream. When I documented I used a wording along the lines of \"<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/return/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/return\">@return</a> a non-null {<a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/link/hovercard\" href=\"https://github.com/link\">@link</a> Stream} of realm roles\" whereas in this case the fact that the stream can't be null is communicated in a different way. Not a deal breaker for this particular PR, just something we might want to make consistent as part of a follow-up documentation Jira, for example.</p>", "author": "sguilhen", "createdAt": "2021-01-19T14:24:20Z", "path": "server-spi/src/main/java/org/keycloak/models/RoleMapperModel.java", "diffHunk": "@@ -29,14 +29,14 @@\n     /**\n      * Returns set of realm roles that are directly set to this object.\n      * @return see description\n-     * @deprecated Use {@link #getRealmRoleMappingsStream()} getRealmRoleMappingsStream} instead.\n+     * @deprecated Use {@link #getRealmRoleMappingsStream() getRealmRoleMappingsStream} instead.\n      */\n     @Deprecated\n     Set<RoleModel> getRealmRoleMappings();\n \n     /**\n      * Returns stream of realm roles that are directly set to this object.\n-     * @return stream of {@link RoleModel}\n+     * @return Stream of {@link RoleModel}. Never returns {@code null}.", "originalCommit": "05a25b5ab5cbd65c679b52fb0a15cdb438a98959", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "92b46bd8bcddfb92af140959377312ed3eb38f2c", "url": "https://github.com/keycloak/keycloak/commit/92b46bd8bcddfb92af140959377312ed3eb38f2c", "message": "KEYCLOAK-15695 Addressing Hynek's and Vlasta's comments, closing streams in authz, removing redundant checks with JpaAdminEventQuery.getResultStream and JpaEventQuery.getResultStream", "committedDate": "2021-01-19T16:08:31Z", "type": "forcePushed"}, {"oid": "d94f9acd553013c02f9abe44ba366f52185814fb", "url": "https://github.com/keycloak/keycloak/commit/d94f9acd553013c02f9abe44ba366f52185814fb", "message": "KEYCLOAK-15695 Addressing Hynek's and Vlasta's comments, closing streams in authz, removing redundant checks with JpaAdminEventQuery.getResultStream and JpaEventQuery.getResultStream", "committedDate": "2021-01-19T16:26:52Z", "type": "forcePushed"}, {"oid": "5c4a0f692a6105cbba95f0736ea1a24e0c3caaa6", "url": "https://github.com/keycloak/keycloak/commit/5c4a0f692a6105cbba95f0736ea1a24e0c3caaa6", "message": "KEYCLOAK-15695 Addressing Hynek's and Vlasta's comments, closing streams in authz, removing redundant checks with JpaAdminEventQuery.getResultStream and JpaEventQuery.getResultStream", "committedDate": "2021-01-19T18:22:39Z", "type": "forcePushed"}, {"oid": "599e5d6017467aa09606ae69ad2f8cf3f83d17e0", "url": "https://github.com/keycloak/keycloak/commit/599e5d6017467aa09606ae69ad2f8cf3f83d17e0", "message": "KEYCLOAK-15695 Addressing Hynek's and Vlasta's comments, closing streams in authz", "committedDate": "2021-01-20T06:57:46Z", "type": "forcePushed"}, {"oid": "ea81acc9c4659d69365d9a0665fde669beb0145a", "url": "https://github.com/keycloak/keycloak/commit/ea81acc9c4659d69365d9a0665fde669beb0145a", "message": "KEYCLOAK-15695 Streamification cleanup", "committedDate": "2021-01-20T08:16:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDczOTU1NA==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560739554", "body": "This could probably remain `int`. We call it only from one place and it is always int. This method doesn't make sense with `limit == null`.", "bodyText": "This could probably remain int. We call it only from one place and it is always int. This method doesn't make sense with limit == null.", "bodyHTML": "<p dir=\"auto\">This could probably remain <code>int</code>. We call it only from one place and it is always int. This method doesn't make sense with <code>limit == null</code>.</p>", "author": "mhajas", "createdAt": "2021-01-20T07:48:12Z", "path": "server-spi-private/src/main/java/org/keycloak/policy/HistoryPasswordPolicyProvider.java", "diffHunk": "@@ -80,7 +78,7 @@ public PolicyError validate(RealmModel realm, UserModel user, String password) {\n         return null;\n     }\n \n-    private Stream<CredentialModel> getRecent(Stream<CredentialModel> passwordHistory, int limit) {\n+    private Stream<CredentialModel> getRecent(Stream<CredentialModel> passwordHistory, Integer limit) {", "originalCommit": "599e5d6017467aa09606ae69ad2f8cf3f83d17e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc2NTE4OA==", "url": "https://github.com/keycloak/keycloak/pull/7677#discussion_r560765188", "bodyText": "OK, done :)", "author": "martin-kanis", "createdAt": "2021-01-20T08:34:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDczOTU1NA=="}], "type": "inlineReview"}, {"oid": "7b6337f41b0c31821eea6c8b20f8840bcba91705", "url": "https://github.com/keycloak/keycloak/commit/7b6337f41b0c31821eea6c8b20f8840bcba91705", "message": "KEYCLOAK-15695 Streamification cleanup", "committedDate": "2021-01-20T08:33:38Z", "type": "commit"}, {"oid": "7b6337f41b0c31821eea6c8b20f8840bcba91705", "url": "https://github.com/keycloak/keycloak/commit/7b6337f41b0c31821eea6c8b20f8840bcba91705", "message": "KEYCLOAK-15695 Streamification cleanup", "committedDate": "2021-01-20T08:33:38Z", "type": "forcePushed"}]}