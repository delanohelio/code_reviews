{"pr_number": 6996, "pr_title": "KEYCLOAK-13916 Refactor SAML metadata generation to use the SAMLMetadataWriter class", "pr_author": "lscorcia", "pr_createdAt": "2020-04-22T12:04:58Z", "pr_url": "https://github.com/keycloak/keycloak/pull/6996", "timeline": [{"oid": "d0fb5a1aabef72cb568eef484f6a4f6cf533e6ad", "url": "https://github.com/keycloak/keycloak/commit/d0fb5a1aabef72cb568eef484f6a4f6cf533e6ad", "message": "Refactor SAML metadata generation to use the SAMLMetadataWriter class", "committedDate": "2020-04-30T13:29:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3MDcwNA==", "url": "https://github.com/keycloak/keycloak/pull/6996#discussion_r449570704", "body": "Please do not use star imports, import explicitly each class", "bodyText": "Please do not use star imports, import explicitly each class", "bodyHTML": "<p dir=\"auto\">Please do not use star imports, import explicitly each class</p>", "author": "hmlnarik", "createdAt": "2020-07-03T12:58:21Z", "path": "saml-core/src/main/java/org/keycloak/saml/SPMetadataDescriptor.java", "diffHunk": "@@ -17,59 +17,108 @@\n \n package org.keycloak.saml;\n \n+import org.keycloak.dom.saml.v2.metadata.*;", "originalCommit": "d0fb5a1aabef72cb568eef484f6a4f6cf533e6ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3MTQ3MA==", "url": "https://github.com/keycloak/keycloak/pull/6996#discussion_r449571470", "body": "Please avoid star imports", "bodyText": "Please avoid star imports", "bodyHTML": "<p dir=\"auto\">Please avoid star imports</p>", "author": "hmlnarik", "createdAt": "2020-07-03T13:00:07Z", "path": "services/src/main/java/org/keycloak/protocol/saml/IDPMetadataDescriptor.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2016 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.protocol.saml;\n+\n+import org.keycloak.dom.saml.v2.metadata.*;", "originalCommit": "d0fb5a1aabef72cb568eef484f6a4f6cf533e6ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU5OTM2NQ==", "url": "https://github.com/keycloak/keycloak/pull/6996#discussion_r449599365", "bodyText": "Thanks, done!", "author": "lscorcia", "createdAt": "2020-07-03T14:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3MTQ3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3MjA3NQ==", "url": "https://github.com/keycloak/keycloak/pull/6996#discussion_r449572075", "body": "```suggestion\r\n            if (logoutUrl == null || logoutUrl.trim().isEmpty()) logoutUrl = client.getManagementUrl();\r\n            if (logoutUrl == null || logoutUrl.trim().isEmpty()) logoutUrl = FALLBACK_ERROR_URL_STRING;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (logoutUrl == null || assertionUrl.trim().isEmpty()) logoutUrl = client.getManagementUrl();\n          \n          \n            \n                        if (logoutUrl == null || assertionUrl.trim().isEmpty()) logoutUrl = FALLBACK_ERROR_URL_STRING;\n          \n          \n            \n                        if (logoutUrl == null || logoutUrl.trim().isEmpty()) logoutUrl = client.getManagementUrl();\n          \n          \n            \n                        if (logoutUrl == null || logoutUrl.trim().isEmpty()) logoutUrl = FALLBACK_ERROR_URL_STRING;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (logoutUrl <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> <span class=\"x x-first x-last\">assertionUrl</span><span class=\"pl-k\">.</span>trim()<span class=\"pl-k\">.</span>isEmpty()) logoutUrl <span class=\"pl-k\">=</span> client<span class=\"pl-k\">.</span>getManagementUrl();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (logoutUrl <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> <span class=\"x x-first x-last\">assertionUrl</span><span class=\"pl-k\">.</span>trim()<span class=\"pl-k\">.</span>isEmpty()) logoutUrl <span class=\"pl-k\">=</span> <span class=\"pl-c1\">FALLBACK_ERROR_URL_STRING</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (logoutUrl <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> <span class=\"x x-first x-last\">logoutUrl</span><span class=\"pl-k\">.</span>trim()<span class=\"pl-k\">.</span>isEmpty()) logoutUrl <span class=\"pl-k\">=</span> client<span class=\"pl-k\">.</span>getManagementUrl();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (logoutUrl <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> <span class=\"x x-first x-last\">logoutUrl</span><span class=\"pl-k\">.</span>trim()<span class=\"pl-k\">.</span>isEmpty()) logoutUrl <span class=\"pl-k\">=</span> <span class=\"pl-c1\">FALLBACK_ERROR_URL_STRING</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "hmlnarik", "createdAt": "2020-07-03T13:01:36Z", "path": "services/src/main/java/org/keycloak/protocol/saml/installation/SamlSPDescriptorClientInstallation.java", "diffHunk": "@@ -28,45 +30,55 @@\n import org.keycloak.saml.SPMetadataDescriptor;\n import org.keycloak.saml.common.constants.JBossSAMLURIConstants;\n \n+import org.w3c.dom.Element;\n+\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import java.net.URI;\n-import org.keycloak.dom.saml.v2.metadata.KeyTypes;\n+import java.util.Arrays;\n+\n \n /**\n  * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n  * @version $Revision: 1 $\n  */\n public class SamlSPDescriptorClientInstallation implements ClientInstallationProvider {\n \n+    protected static final Logger logger = Logger.getLogger(SamlSPDescriptorClientInstallation.class);\n+\n     public static final String SAML_CLIENT_INSTALATION_SP_DESCRIPTOR = \"saml-sp-descriptor\";\n-    private static final String FALLBACK_ERROR_URL_STRING = \"ERROR:ENDPOINT NOT SET\";\n+    private static final String FALLBACK_ERROR_URL_STRING = \"ERROR:ENDPOINT_NOT_SET\";\n \n     public static String getSPDescriptorForClient(ClientModel client) {\n-        SamlClient samlClient = new SamlClient(client);\n-        String assertionUrl;\n-        String logoutUrl;\n-        String binding;\n-        if (samlClient.forcePostBinding()) {\n-            assertionUrl = client.getAttribute(SamlProtocol.SAML_ASSERTION_CONSUMER_URL_POST_ATTRIBUTE);\n-            logoutUrl = client.getAttribute(SamlProtocol.SAML_SINGLE_LOGOUT_SERVICE_URL_POST_ATTRIBUTE);\n-            binding = JBossSAMLURIConstants.SAML_HTTP_POST_BINDING.get();\n-        } else { //redirect binding\n-            assertionUrl = client.getAttribute(SamlProtocol.SAML_ASSERTION_CONSUMER_URL_REDIRECT_ATTRIBUTE);\n-            logoutUrl = client.getAttribute(SamlProtocol.SAML_SINGLE_LOGOUT_SERVICE_URL_REDIRECT_ATTRIBUTE);\n-            binding = JBossSAMLURIConstants.SAML_HTTP_REDIRECT_BINDING.get();\n+        try {\n+            SamlClient samlClient = new SamlClient(client);\n+            String assertionUrl;\n+            String logoutUrl;\n+            URI binding;\n+            if (samlClient.forcePostBinding()) {\n+                assertionUrl = client.getAttribute(SamlProtocol.SAML_ASSERTION_CONSUMER_URL_POST_ATTRIBUTE);\n+                logoutUrl = client.getAttribute(SamlProtocol.SAML_SINGLE_LOGOUT_SERVICE_URL_POST_ATTRIBUTE);\n+                binding = JBossSAMLURIConstants.SAML_HTTP_POST_BINDING.getUri();\n+            } else { //redirect binding\n+                assertionUrl = client.getAttribute(SamlProtocol.SAML_ASSERTION_CONSUMER_URL_REDIRECT_ATTRIBUTE);\n+                logoutUrl = client.getAttribute(SamlProtocol.SAML_SINGLE_LOGOUT_SERVICE_URL_REDIRECT_ATTRIBUTE);\n+                binding = JBossSAMLURIConstants.SAML_HTTP_REDIRECT_BINDING.getUri();\n+            }\n+            if (assertionUrl == null || assertionUrl.trim().isEmpty()) assertionUrl = client.getManagementUrl();\n+            if (assertionUrl == null || assertionUrl.trim().isEmpty()) assertionUrl = FALLBACK_ERROR_URL_STRING;\n+            if (logoutUrl == null || assertionUrl.trim().isEmpty()) logoutUrl = client.getManagementUrl();\n+            if (logoutUrl == null || assertionUrl.trim().isEmpty()) logoutUrl = FALLBACK_ERROR_URL_STRING;", "originalCommit": "d0fb5a1aabef72cb568eef484f6a4f6cf533e6ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU5OTQ2Mg==", "url": "https://github.com/keycloak/keycloak/pull/6996#discussion_r449599462", "bodyText": "Nice catch!", "author": "lscorcia", "createdAt": "2020-07-03T14:03:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3MjA3NQ=="}], "type": "inlineReview"}, {"oid": "2fddb9dac4358601c2bb2c596073bd6ee0945339", "url": "https://github.com/keycloak/keycloak/commit/2fddb9dac4358601c2bb2c596073bd6ee0945339", "message": "Refactor SAML metadata generation to use the SAMLMetadataWriter class", "committedDate": "2020-07-03T13:53:04Z", "type": "forcePushed"}, {"oid": "5cb301c212c1ad78f83ad613287c2eea2bd3b93b", "url": "https://github.com/keycloak/keycloak/commit/5cb301c212c1ad78f83ad613287c2eea2bd3b93b", "message": "Refactor SAML metadata generation to use the SAMLMetadataWriter class", "committedDate": "2020-07-03T16:13:40Z", "type": "commit"}, {"oid": "5cb301c212c1ad78f83ad613287c2eea2bd3b93b", "url": "https://github.com/keycloak/keycloak/commit/5cb301c212c1ad78f83ad613287c2eea2bd3b93b", "message": "Refactor SAML metadata generation to use the SAMLMetadataWriter class", "committedDate": "2020-07-03T16:13:40Z", "type": "forcePushed"}]}