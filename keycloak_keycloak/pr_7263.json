{"pr_number": 7263, "pr_title": "KEYCLOAK-14220 Complement methods for accessing clients with Stream v\u2026", "pr_author": "martin-kanis", "pr_createdAt": "2020-07-14T07:19:16Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7263", "timeline": [{"oid": "8a5c1403c6d219abf19855660b55ca5d93cf5c62", "url": "https://github.com/keycloak/keycloak/commit/8a5c1403c6d219abf19855660b55ca5d93cf5c62", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants", "committedDate": "2020-07-14T08:48:07Z", "type": "forcePushed"}, {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f", "url": "https://github.com/keycloak/keycloak/commit/ded3ef8a5a5953a710780e11ffa985c02771de1f", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants", "committedDate": "2020-07-14T11:03:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5MTc4MA==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r454991780", "body": "```suggestion\r\n    protected Stream<RoleModel> getRolesStream(TypedQuery<RoleEntity> query, RealmModel realm, Integer first, Integer max) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected Stream<RoleModel> getRoles(TypedQuery<RoleEntity> query, RealmModel realm, Integer first, Integer max) {\n          \n          \n            \n                protected Stream<RoleModel> getRolesStream(TypedQuery<RoleEntity> query, RealmModel realm, Integer first, Integer max) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">protected</span> <span class=\"pl-k\">Stream&lt;<span class=\"pl-smi\">RoleModel</span>&gt;</span> <span class=\"x x-first x-last\">getRoles</span>(<span class=\"pl-k\">TypedQuery&lt;<span class=\"pl-smi\">RoleEntity</span>&gt;</span> query, <span class=\"pl-smi\">RealmModel</span> realm, <span class=\"pl-smi\">Integer</span> first, <span class=\"pl-smi\">Integer</span> max) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">protected</span> <span class=\"pl-k\">Stream&lt;<span class=\"pl-smi\">RoleModel</span>&gt;</span> <span class=\"x x-first x-last\">getRolesStream</span>(<span class=\"pl-k\">TypedQuery&lt;<span class=\"pl-smi\">RoleEntity</span>&gt;</span> query, <span class=\"pl-smi\">RealmModel</span> realm, <span class=\"pl-smi\">Integer</span> first, <span class=\"pl-smi\">Integer</span> max) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "hmlnarik", "createdAt": "2020-07-15T11:48:56Z", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java", "diffHunk": "@@ -284,76 +281,67 @@ public RoleModel getClientRole(RealmModel realm, ClientModel client, String name\n \n \n     @Override\n-    public Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client) {\n-        Set<RoleModel> list = new HashSet<>();\n+    public Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client) {\n         TypedQuery<String> query = em.createNamedQuery(\"getClientRoleIds\", String.class);\n         query.setParameter(\"client\", client.getId());\n-        List<String> roles = query.getResultList();\n-        for (String id : roles) {\n-            list.add(session.realms().getRoleById(id, realm));\n-        }\n-        return list;\n+        Stream<String> roles = query.getResultStream();\n+\n+        return roles.map(realm::getRoleById);\n     }\n     \n     @Override\n-    public Set<RoleModel> getRealmRoles(RealmModel realm, Integer first, Integer max) {\n+    public Stream<RoleModel> getRealmRolesStream(RealmModel realm, Integer first, Integer max) {\n         TypedQuery<RoleEntity> query = em.createNamedQuery(\"getRealmRoles\", RoleEntity.class);\n         query.setParameter(\"realm\", realm.getId());\n         \n         return getRoles(query, realm, first, max);\n     }\n \n     @Override\n-    public Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client, Integer first, Integer max) {\n+    public Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client, Integer first, Integer max) {\n         TypedQuery<RoleEntity> query = em.createNamedQuery(\"getClientRoles\", RoleEntity.class);\n         query.setParameter(\"client\", client.getId());\n         \n         return getRoles(query, realm, first, max);\n     }\n     \n-    protected Set<RoleModel> getRoles(TypedQuery<RoleEntity> query, RealmModel realm, Integer first, Integer max) {\n+    protected Stream<RoleModel> getRoles(TypedQuery<RoleEntity> query, RealmModel realm, Integer first, Integer max) {", "originalCommit": "ded3ef8a5a5953a710780e11ffa985c02771de1f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7de0e66f85338e39139fe0cc8e76a3dc1d99a5a8", "changed_code": [{"header": "diff --git a/model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java b/model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java\nindex d2666536e4..182b8665c5 100755\n--- a/model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java\n+++ b/model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java\n", "chunk": "@@ -302,10 +302,10 @@ public class JpaRealmProvider implements RealmProvider {\n         TypedQuery<RoleEntity> query = em.createNamedQuery(\"getClientRoles\", RoleEntity.class);\n         query.setParameter(\"client\", client.getId());\n         \n-        return getRoles(query, realm, first, max);\n+        return getRolesStream(query, realm, first, max);\n     }\n     \n-    protected Stream<RoleModel> getRoles(TypedQuery<RoleEntity> query, RealmModel realm, Integer first, Integer max) {\n+    protected Stream<RoleModel> getRolesStream(TypedQuery<RoleEntity> query, RealmModel realm, Integer first, Integer max) {\n         if(Objects.nonNull(first) && Objects.nonNull(max)\n                 && first >= 0 && max >= 0) {\n             query= query.setFirstResult(first).setMaxResults(max);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5MjY4NA==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r454992684", "body": "StackOverflowException", "bodyText": "StackOverflowException", "bodyHTML": "<p dir=\"auto\">StackOverflowException</p>", "author": "hmlnarik", "createdAt": "2020-07-15T11:50:35Z", "path": "server-spi/src/main/java/org/keycloak/models/ClientProvider.java", "diffHunk": "@@ -41,9 +57,23 @@\n \n     RoleModel getClientRole(RealmModel realm, ClientModel client, String name);\n \n-    Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client);\n+    @Deprecated\n+    default Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client) {\n+        return getClientRolesStream(realm, client).collect(Collectors.toSet());\n+    }\n+\n+    default Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client) {\n+        return getClientRolesStream(realm, client);", "originalCommit": "ded3ef8a5a5953a710780e11ffa985c02771de1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NDk1Mw==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r454994953", "bodyText": "It should be fixed already. Are you looking at latest change?", "author": "martin-kanis", "createdAt": "2020-07-15T11:54:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5MjY4NA=="}], "type": "inlineReview", "revised_code": {"commit": "7de0e66f85338e39139fe0cc8e76a3dc1d99a5a8", "changed_code": [{"header": "diff --git a/server-spi/src/main/java/org/keycloak/models/ClientProvider.java b/server-spi/src/main/java/org/keycloak/models/ClientProvider.java\nindex 39b268d3f5..8d92995577 100644\n--- a/server-spi/src/main/java/org/keycloak/models/ClientProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/models/ClientProvider.java\n", "chunk": "@@ -62,18 +58,14 @@ public interface ClientProvider extends ClientLookupProvider, Provider {\n         return getClientRolesStream(realm, client).collect(Collectors.toSet());\n     }\n \n-    default Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client) {\n-        return getClientRolesStream(realm, client);\n-    }\n+    Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client);\n \n     @Deprecated\n     default List<ClientModel> getAlwaysDisplayInConsoleClients(RealmModel realm) {\n         return getAlwaysDisplayInConsoleClientsStream(realm).collect(Collectors.toList());\n     }\n \n-    default Stream<ClientModel> getAlwaysDisplayInConsoleClientsStream(RealmModel realm) {\n-        return getAlwaysDisplayInConsoleClientsStream(realm);\n-    }\n+    Stream<ClientModel> getAlwaysDisplayInConsoleClientsStream(RealmModel realm);\n \n     boolean removeClient(String id, RealmModel realm);\n }\n", "next_change": {"commit": "cb2e2e930122c511f80cece3eeb79c518a0a308b", "changed_code": [{"header": "diff --git a/server-spi/src/main/java/org/keycloak/models/ClientProvider.java b/server-spi/src/main/java/org/keycloak/models/ClientProvider.java\nindex 8d92995577..2eddea5cc3 100644\n--- a/server-spi/src/main/java/org/keycloak/models/ClientProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/models/ClientProvider.java\n", "chunk": "@@ -20,52 +20,130 @@ import org.keycloak.provider.Provider;\n import org.keycloak.storage.client.ClientLookupProvider;\n \n import java.util.List;\n-import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n /**\n+ * Provider of the client records.\n+ *\n  * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n  * @version $Revision: 1 $\n  */\n public interface ClientProvider extends ClientLookupProvider, Provider {\n+\n+    /**\n+     * Returns the clients of the given realm.\n+     * @deprecated use the stream variant instead\n+     * @param realm Realm.\n+     * @param firstResult First result to return. Ignored if negative or {@code null}.\n+     * @param maxResults Maximum number of results to return. Ignored if negative or {@code null}.\n+     * @return List of the clients. Never returns {@code null}.\n+     */\n     @Deprecated\n     default List<ClientModel> getClients(RealmModel realm, Integer firstResult, Integer maxResults) {\n         return getClientsStream(realm, firstResult, maxResults).collect(Collectors.toList());\n     }\n \n+    /**\n+     * Returns the clients of the given realm as a stream.\n+     * @param realm Realm.\n+     * @param firstResult First result to return. Ignored if negative or {@code null}.\n+     * @param maxResults Maximum number of results to return. Ignored if negative or {@code null}.\n+     * @return Stream of the clients. Never returns {@code null}.\n+     */\n     Stream<ClientModel> getClientsStream(RealmModel realm, Integer firstResult, Integer maxResults);\n \n+    /**\n+     * Returns all the clients of the given realm.\n+     * @deprecated use the stream variant instead\n+     * Effectively the same as the call {@code getClients(realm, null, null)}.\n+     * @param realm Realm.\n+     * @return List of the clients. Never returns {@code null}.\n+     */\n     @Deprecated\n     default List<ClientModel> getClients(RealmModel realm) {\n-        return getClientsStream(realm).collect(Collectors.toList());\n+        return this.getClientsStream(realm, null, null).collect(Collectors.toList());\n     }\n \n-    Stream<ClientModel> getClientsStream(RealmModel realm);\n-\n-    ClientModel addClient(RealmModel realm, String clientId);\n-\n-    ClientModel addClient(RealmModel realm, String id, String clientId);\n-\n-    RoleModel addClientRole(RealmModel realm, ClientModel client, String name);\n-\n-    RoleModel addClientRole(RealmModel realm, ClientModel client, String id, String name);\n-\n-    RoleModel getClientRole(RealmModel realm, ClientModel client, String name);\n+    /**\n+     * Returns all the clients of the given realm as a stream.\n+     * Effectively the same as the call {@code getClientsStream(realm, null, null)}.\n+     * @param realm Realm.\n+     * @return Stream of the clients. Never returns {@code null}.\n+     */\n+    default Stream<ClientModel> getClientsStream(RealmModel realm) {\n+        return this.getClientsStream(realm, null, null);\n+    }\n \n-    @Deprecated\n-    default Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client) {\n-        return getClientRolesStream(realm, client).collect(Collectors.toSet());\n+    /**\n+     * Adds a client with given {@code clientId} to the given realm.\n+     * The internal ID of the client will be created automatically.\n+     * @param realm Realm owning this client.\n+     * @param clientId String that identifies the client to the external parties.\n+     *   Maps to {@code client_id} in OIDC or {@code entityID} in SAML.\n+     * @return Model of the created client.\n+     */\n+    default ClientModel addClient(RealmModel realm, String clientId) {\n+        return addClient(realm, null, clientId);\n     }\n \n-    Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client);\n+    /**\n+     * Adds a client with given internal ID and {@code clientId} to the given realm.\n+     * @param realm Realm owning this client.\n+     * @param id Internal ID of the client or {@code null} if one is to be created by the underlying store\n+     * @param clientId String that identifies the client to the external parties.\n+     *   Maps to {@code client_id} in OIDC or {@code entityID} in SAML.\n+     * @return Model of the created client.\n+     * @throws IllegalArgumentException If {@code id} does not conform\n+     *   the format understood by the underlying store.\n+     */\n+    ClientModel addClient(RealmModel realm, String id, String clientId);\n \n+    /**\n+     * Returns number of clients in the given realm\n+     * @param realm Realm.\n+     * @return Number of the clients in the given realm.\n+     */\n+    long getClientsCount(RealmModel realm);\n+\n+    /**\n+     * Returns a list of clients that are expected to always show up in account console.\n+     * @deprecated use the stream variant instead\n+     * @param realm Realm owning the clients.\n+     * @return List of the clients. Never returns {@code null}.\n+     */\n     @Deprecated\n     default List<ClientModel> getAlwaysDisplayInConsoleClients(RealmModel realm) {\n         return getAlwaysDisplayInConsoleClientsStream(realm).collect(Collectors.toList());\n     }\n \n+    /**\n+     * Returns a stream of clients that are expected to always show up in account console.\n+     * @param realm Realm owning the clients.\n+     * @return Stream of the clients. Never returns {@code null}.\n+     */\n     Stream<ClientModel> getAlwaysDisplayInConsoleClientsStream(RealmModel realm);\n \n-    boolean removeClient(String id, RealmModel realm);\n+    /**\n+     * Removes given client from the given realm.\n+     * @param id Internal ID of the client\n+     * @param realm Realm.\n+     * @return {@code true} if the client existed and has been removed, {@code false} otherwise.\n+     * @deprecated Use {@link #removeClient(RealmModel, String)} instead.\n+     */\n+    default boolean removeClient(String id, RealmModel realm) { return this.removeClient(realm, id); }\n+\n+    /**\n+     * Removes given client from the given realm.\n+     * @param realm Realm.\n+     * @param id Internal ID of the client\n+     * @return {@code true} if the client existed and has been removed, {@code false} otherwise.\n+     */\n+    boolean removeClient(RealmModel realm, String id);\n+\n+    /**\n+     * Removes all clients from the given realm.\n+     * @param realm Realm.\n+     */\n+    void removeClients(RealmModel realm);\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5MjkyMQ==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r454992921", "body": "StackOverflowException", "bodyText": "StackOverflowException", "bodyHTML": "<p dir=\"auto\">StackOverflowException</p>", "author": "hmlnarik", "createdAt": "2020-07-15T11:50:48Z", "path": "server-spi/src/main/java/org/keycloak/models/ClientProvider.java", "diffHunk": "@@ -41,9 +57,23 @@\n \n     RoleModel getClientRole(RealmModel realm, ClientModel client, String name);\n \n-    Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client);\n+    @Deprecated\n+    default Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client) {\n+        return getClientRolesStream(realm, client).collect(Collectors.toSet());\n+    }\n+\n+    default Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client) {\n+        return getClientRolesStream(realm, client);\n+    }\n+\n+    @Deprecated\n+    default List<ClientModel> getAlwaysDisplayInConsoleClients(RealmModel realm) {\n+        return getAlwaysDisplayInConsoleClientsStream(realm).collect(Collectors.toList());\n+    }\n \n-    List<ClientModel> getAlwaysDisplayInConsoleClients(RealmModel realm);\n+    default Stream<ClientModel> getAlwaysDisplayInConsoleClientsStream(RealmModel realm) {\n+        return getAlwaysDisplayInConsoleClientsStream(realm);", "originalCommit": "ded3ef8a5a5953a710780e11ffa985c02771de1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NTA2MQ==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r454995061", "bodyText": "same as above", "author": "martin-kanis", "createdAt": "2020-07-15T11:55:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5MjkyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7de0e66f85338e39139fe0cc8e76a3dc1d99a5a8", "changed_code": [{"header": "diff --git a/server-spi/src/main/java/org/keycloak/models/ClientProvider.java b/server-spi/src/main/java/org/keycloak/models/ClientProvider.java\nindex 39b268d3f5..8d92995577 100644\n--- a/server-spi/src/main/java/org/keycloak/models/ClientProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/models/ClientProvider.java\n", "chunk": "@@ -62,18 +58,14 @@ public interface ClientProvider extends ClientLookupProvider, Provider {\n         return getClientRolesStream(realm, client).collect(Collectors.toSet());\n     }\n \n-    default Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client) {\n-        return getClientRolesStream(realm, client);\n-    }\n+    Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client);\n \n     @Deprecated\n     default List<ClientModel> getAlwaysDisplayInConsoleClients(RealmModel realm) {\n         return getAlwaysDisplayInConsoleClientsStream(realm).collect(Collectors.toList());\n     }\n \n-    default Stream<ClientModel> getAlwaysDisplayInConsoleClientsStream(RealmModel realm) {\n-        return getAlwaysDisplayInConsoleClientsStream(realm);\n-    }\n+    Stream<ClientModel> getAlwaysDisplayInConsoleClientsStream(RealmModel realm);\n \n     boolean removeClient(String id, RealmModel realm);\n }\n", "next_change": {"commit": "cb2e2e930122c511f80cece3eeb79c518a0a308b", "changed_code": [{"header": "diff --git a/server-spi/src/main/java/org/keycloak/models/ClientProvider.java b/server-spi/src/main/java/org/keycloak/models/ClientProvider.java\nindex 8d92995577..2eddea5cc3 100644\n--- a/server-spi/src/main/java/org/keycloak/models/ClientProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/models/ClientProvider.java\n", "chunk": "@@ -20,52 +20,130 @@ import org.keycloak.provider.Provider;\n import org.keycloak.storage.client.ClientLookupProvider;\n \n import java.util.List;\n-import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n /**\n+ * Provider of the client records.\n+ *\n  * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n  * @version $Revision: 1 $\n  */\n public interface ClientProvider extends ClientLookupProvider, Provider {\n+\n+    /**\n+     * Returns the clients of the given realm.\n+     * @deprecated use the stream variant instead\n+     * @param realm Realm.\n+     * @param firstResult First result to return. Ignored if negative or {@code null}.\n+     * @param maxResults Maximum number of results to return. Ignored if negative or {@code null}.\n+     * @return List of the clients. Never returns {@code null}.\n+     */\n     @Deprecated\n     default List<ClientModel> getClients(RealmModel realm, Integer firstResult, Integer maxResults) {\n         return getClientsStream(realm, firstResult, maxResults).collect(Collectors.toList());\n     }\n \n+    /**\n+     * Returns the clients of the given realm as a stream.\n+     * @param realm Realm.\n+     * @param firstResult First result to return. Ignored if negative or {@code null}.\n+     * @param maxResults Maximum number of results to return. Ignored if negative or {@code null}.\n+     * @return Stream of the clients. Never returns {@code null}.\n+     */\n     Stream<ClientModel> getClientsStream(RealmModel realm, Integer firstResult, Integer maxResults);\n \n+    /**\n+     * Returns all the clients of the given realm.\n+     * @deprecated use the stream variant instead\n+     * Effectively the same as the call {@code getClients(realm, null, null)}.\n+     * @param realm Realm.\n+     * @return List of the clients. Never returns {@code null}.\n+     */\n     @Deprecated\n     default List<ClientModel> getClients(RealmModel realm) {\n-        return getClientsStream(realm).collect(Collectors.toList());\n+        return this.getClientsStream(realm, null, null).collect(Collectors.toList());\n     }\n \n-    Stream<ClientModel> getClientsStream(RealmModel realm);\n-\n-    ClientModel addClient(RealmModel realm, String clientId);\n-\n-    ClientModel addClient(RealmModel realm, String id, String clientId);\n-\n-    RoleModel addClientRole(RealmModel realm, ClientModel client, String name);\n-\n-    RoleModel addClientRole(RealmModel realm, ClientModel client, String id, String name);\n-\n-    RoleModel getClientRole(RealmModel realm, ClientModel client, String name);\n+    /**\n+     * Returns all the clients of the given realm as a stream.\n+     * Effectively the same as the call {@code getClientsStream(realm, null, null)}.\n+     * @param realm Realm.\n+     * @return Stream of the clients. Never returns {@code null}.\n+     */\n+    default Stream<ClientModel> getClientsStream(RealmModel realm) {\n+        return this.getClientsStream(realm, null, null);\n+    }\n \n-    @Deprecated\n-    default Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client) {\n-        return getClientRolesStream(realm, client).collect(Collectors.toSet());\n+    /**\n+     * Adds a client with given {@code clientId} to the given realm.\n+     * The internal ID of the client will be created automatically.\n+     * @param realm Realm owning this client.\n+     * @param clientId String that identifies the client to the external parties.\n+     *   Maps to {@code client_id} in OIDC or {@code entityID} in SAML.\n+     * @return Model of the created client.\n+     */\n+    default ClientModel addClient(RealmModel realm, String clientId) {\n+        return addClient(realm, null, clientId);\n     }\n \n-    Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client);\n+    /**\n+     * Adds a client with given internal ID and {@code clientId} to the given realm.\n+     * @param realm Realm owning this client.\n+     * @param id Internal ID of the client or {@code null} if one is to be created by the underlying store\n+     * @param clientId String that identifies the client to the external parties.\n+     *   Maps to {@code client_id} in OIDC or {@code entityID} in SAML.\n+     * @return Model of the created client.\n+     * @throws IllegalArgumentException If {@code id} does not conform\n+     *   the format understood by the underlying store.\n+     */\n+    ClientModel addClient(RealmModel realm, String id, String clientId);\n \n+    /**\n+     * Returns number of clients in the given realm\n+     * @param realm Realm.\n+     * @return Number of the clients in the given realm.\n+     */\n+    long getClientsCount(RealmModel realm);\n+\n+    /**\n+     * Returns a list of clients that are expected to always show up in account console.\n+     * @deprecated use the stream variant instead\n+     * @param realm Realm owning the clients.\n+     * @return List of the clients. Never returns {@code null}.\n+     */\n     @Deprecated\n     default List<ClientModel> getAlwaysDisplayInConsoleClients(RealmModel realm) {\n         return getAlwaysDisplayInConsoleClientsStream(realm).collect(Collectors.toList());\n     }\n \n+    /**\n+     * Returns a stream of clients that are expected to always show up in account console.\n+     * @param realm Realm owning the clients.\n+     * @return Stream of the clients. Never returns {@code null}.\n+     */\n     Stream<ClientModel> getAlwaysDisplayInConsoleClientsStream(RealmModel realm);\n \n-    boolean removeClient(String id, RealmModel realm);\n+    /**\n+     * Removes given client from the given realm.\n+     * @param id Internal ID of the client\n+     * @param realm Realm.\n+     * @return {@code true} if the client existed and has been removed, {@code false} otherwise.\n+     * @deprecated Use {@link #removeClient(RealmModel, String)} instead.\n+     */\n+    default boolean removeClient(String id, RealmModel realm) { return this.removeClient(realm, id); }\n+\n+    /**\n+     * Removes given client from the given realm.\n+     * @param realm Realm.\n+     * @param id Internal ID of the client\n+     * @return {@code true} if the client existed and has been removed, {@code false} otherwise.\n+     */\n+    boolean removeClient(RealmModel realm, String id);\n+\n+    /**\n+     * Removes all clients from the given realm.\n+     * @param realm Realm.\n+     */\n+    void removeClients(RealmModel realm);\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5ODM4Ng==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r454998386", "body": "Could be perhaps like this:\r\n```java\r\nStream<ClientModel> local = session.clientLocalStorage().searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm);\r\nStream<ClientModel> ext = getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\r\n    .map(p -> p.searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm))\r\n    .flatMap(Function.identity());\r\nreturn Stream.concat(local, ext);\r\n```", "bodyText": "Could be perhaps like this:\nStream<ClientModel> local = session.clientLocalStorage().searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm);\nStream<ClientModel> ext = getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n    .map(p -> p.searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm))\n    .flatMap(Function.identity());\nreturn Stream.concat(local, ext);", "bodyHTML": "<p dir=\"auto\">Could be perhaps like this:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Stream&lt;ClientModel&gt; local = session.clientLocalStorage().searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm);\nStream&lt;ClientModel&gt; ext = getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n    .map(p -&gt; p.searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm))\n    .flatMap(Function.identity());\nreturn Stream.concat(local, ext);\"><pre><span class=\"pl-k\">Stream&lt;<span class=\"pl-smi\">ClientModel</span>&gt;</span> local <span class=\"pl-k\">=</span> session<span class=\"pl-k\">.</span>clientLocalStorage()<span class=\"pl-k\">.</span>searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm);\n<span class=\"pl-k\">Stream&lt;<span class=\"pl-smi\">ClientModel</span>&gt;</span> ext <span class=\"pl-k\">=</span> getEnabledStorageProviders(session, realm, <span class=\"pl-smi\">ClientLookupProvider</span><span class=\"pl-k\">.</span>class)<span class=\"pl-k\">.</span>stream()\n    .map(p <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> p<span class=\"pl-k\">.</span>searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm))\n    .flatMap(<span class=\"pl-smi\">Function</span><span class=\"pl-k\">.</span>identity());\n<span class=\"pl-k\">return</span> <span class=\"pl-smi\">Stream</span><span class=\"pl-k\">.</span>concat(local, ext);</pre></div>", "author": "hmlnarik", "createdAt": "2020-07-15T12:01:37Z", "path": "services/src/main/java/org/keycloak/storage/ClientStorageManager.java", "diffHunk": "@@ -151,14 +153,18 @@ public ClientModel getClientByClientId(String clientId, RealmModel realm) {\n     }\n \n     @Override\n-    public List<ClientModel> searchClientsByClientId(String clientId, Integer firstResult, Integer maxResults, RealmModel realm) {\n-        List<ClientModel> clients = session.clientLocalStorage().searchClientsByClientId(clientId,  firstResult, maxResults, realm);\n-        if (clients != null) {\n-            return clients;\n+    public Stream<ClientModel> searchClientsByClientIdStream(String clientId, Integer firstResult, Integer maxResults, RealmModel realm) {\n+        Stream<ClientModel> clients = session.clientLocalStorage().searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm);\n+        Iterator<ClientModel> iterator = clients.iterator();\n+        if (iterator.hasNext()) {\n+            return StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, 0), false);\n         }\n         for (ClientLookupProvider provider : getEnabledStorageProviders(session, realm, ClientLookupProvider.class)) {\n-            clients = provider.searchClientsByClientId(clientId, firstResult, maxResults, realm);\n-            if (clients != null) return clients;\n+            clients = provider.searchClientsByClientIdStream(clientId, firstResult, maxResults, realm);\n+            iterator = clients.iterator();\n+            if (iterator.hasNext()) {\n+                return StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, 0), false);\n+            }", "originalCommit": "ded3ef8a5a5953a710780e11ffa985c02771de1f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7de0e66f85338e39139fe0cc8e76a3dc1d99a5a8", "changed_code": [{"header": "diff --git a/services/src/main/java/org/keycloak/storage/ClientStorageManager.java b/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\nindex 5450f17244..1ba28a5ae3 100644\n--- a/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\n+++ b/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\n", "chunk": "@@ -154,19 +151,10 @@ public class ClientStorageManager implements ClientProvider {\n \n     @Override\n     public Stream<ClientModel> searchClientsByClientIdStream(String clientId, Integer firstResult, Integer maxResults, RealmModel realm) {\n-        Stream<ClientModel> clients = session.clientLocalStorage().searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm);\n-        Iterator<ClientModel> iterator = clients.iterator();\n-        if (iterator.hasNext()) {\n-            return StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, 0), false);\n-        }\n-        for (ClientLookupProvider provider : getEnabledStorageProviders(session, realm, ClientLookupProvider.class)) {\n-            clients = provider.searchClientsByClientIdStream(clientId, firstResult, maxResults, realm);\n-            iterator = clients.iterator();\n-            if (iterator.hasNext()) {\n-                return StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, 0), false);\n-            }\n-        }\n-        return null;\n+        Stream<ClientModel> local = session.clientLocalStorage().searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm);\n+        Stream<ClientModel> ext = getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n+                .flatMap(p -> p.searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm));\n+        return Stream.concat(local, ext);\n     }\n \n     @Override\n", "next_change": {"commit": "cb2e2e930122c511f80cece3eeb79c518a0a308b", "changed_code": [{"header": "diff --git a/services/src/main/java/org/keycloak/storage/ClientStorageManager.java b/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\nindex 1ba28a5ae3..d71860d4f8 100644\n--- a/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\n+++ b/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\n", "chunk": "@@ -125,35 +124,35 @@ public class ClientStorageManager implements ClientProvider {\n     }\n \n     @Override\n-    public ClientModel getClientById(String id, RealmModel realm) {\n+    public ClientModel getClientById(RealmModel realm, String id) {\n         StorageId storageId = new StorageId(id);\n         if (storageId.getProviderId() == null) {\n-            return session.clientLocalStorage().getClientById(id, realm);\n+            return session.clientLocalStorage().getClientById(realm, id);\n         }\n         ClientLookupProvider provider = (ClientLookupProvider)getStorageProvider(session, realm, storageId.getProviderId());\n         if (provider == null) return null;\n         if (!isStorageProviderEnabled(realm, storageId.getProviderId())) return null;\n-        return provider.getClientById(id, realm);\n+        return provider.getClientById(realm, id);\n     }\n \n     @Override\n-    public ClientModel getClientByClientId(String clientId, RealmModel realm) {\n-        ClientModel client = session.clientLocalStorage().getClientByClientId(clientId, realm);\n+    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n+        ClientModel client = session.clientLocalStorage().getClientByClientId(realm, clientId);\n         if (client != null) {\n             return client;\n         }\n         for (ClientLookupProvider provider : getEnabledStorageProviders(session, realm, ClientLookupProvider.class)) {\n-            client = provider.getClientByClientId(clientId, realm);\n+            client = provider.getClientByClientId(realm, clientId);\n             if (client != null) return client;\n         }\n         return null;\n     }\n \n     @Override\n-    public Stream<ClientModel> searchClientsByClientIdStream(String clientId, Integer firstResult, Integer maxResults, RealmModel realm) {\n-        Stream<ClientModel> local = session.clientLocalStorage().searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm);\n+    public Stream<ClientModel> searchClientsByClientIdStream(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {\n+        Stream<ClientModel> local = session.clientLocalStorage().searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults);\n         Stream<ClientModel> ext = getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n-                .flatMap(p -> p.searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm));\n+                .flatMap(p -> p.searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults));\n         return Stream.concat(local, ext);\n     }\n \n", "next_change": {"commit": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01", "changed_code": [{"header": "diff --git a/services/src/main/java/org/keycloak/storage/ClientStorageManager.java b/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\nindex d71860d4f8..81a3704e50 100644\n--- a/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\n+++ b/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\n", "chunk": "@@ -151,8 +161,19 @@ public class ClientStorageManager implements ClientProvider {\n     @Override\n     public Stream<ClientModel> searchClientsByClientIdStream(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {\n         Stream<ClientModel> local = session.clientLocalStorage().searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults);\n-        Stream<ClientModel> ext = getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n+\n+        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n+        Callable<Stream<ClientModel>> callableTask = () -> getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n                 .flatMap(p -> p.searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults));\n+        Future<Stream<ClientModel>> future = executor.submit(callableTask);\n+        Stream<ClientModel> ext = Stream.empty();\n+        try {\n+            ext = future.get(clientStorageProviderTimeout, TimeUnit.MILLISECONDS);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            future.cancel(true);\n+            logger.debug(\"External ClientStorageProvider didn't return result on time.\");\n+        }\n+\n         return Stream.concat(local, ext);\n     }\n \n", "next_change": {"commit": "3d703b9c15f1450c9bdce7d296379c6bd8420c06", "changed_code": [{"header": "diff --git a/services/src/main/java/org/keycloak/storage/ClientStorageManager.java b/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\nindex 81a3704e50..2946ee184e 100644\n--- a/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\n+++ b/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\n", "chunk": "@@ -158,21 +152,20 @@ public class ClientStorageManager implements ClientProvider {\n         return null;\n     }\n \n+    /**\n+     * Obtaining clients from an external client storage is time-bounded. In case the external client storage\n+     * isn't available at least clients from a local storage are returned. For this purpose\n+     * the {@link org.keycloak.services.DefaultKeycloakSessionFactory#getClientStorageProviderTimeout()} property is used.\n+     * Default value is 3000 milliseconds and it's configurable.\n+     * See {@link org.keycloak.services.DefaultKeycloakSessionFactory} for details.\n+     */\n     @Override\n     public Stream<ClientModel> searchClientsByClientIdStream(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {\n         Stream<ClientModel> local = session.clientLocalStorage().searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults);\n-\n-        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n-        Callable<Stream<ClientModel>> callableTask = () -> getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n-                .flatMap(p -> p.searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults));\n-        Future<Stream<ClientModel>> future = executor.submit(callableTask);\n-        Stream<ClientModel> ext = Stream.empty();\n-        try {\n-            ext = future.get(clientStorageProviderTimeout, TimeUnit.MILLISECONDS);\n-        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n-            future.cancel(true);\n-            logger.debug(\"External ClientStorageProvider didn't return result on time.\");\n-        }\n+        Stream<ClientModel> ext = getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n+                .flatMap(ServicesUtils.timeBound(session,\n+                        clientStorageProviderTimeout,\n+                        p -> ((ClientLookupProvider) p).searchClientsByClientIdStream(realm, clientId, firstResult, maxResults)));\n \n         return Stream.concat(local, ext);\n     }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0MDA3MA==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r455040070", "body": "```suggestion\r\n            Set<RoleModel> model = getRealmDelegate().getRealmRoles(realm);\r\n            if (model == null) return null;\r\n            Set<String> ids = model.stream().map(RoleModel::getId).collect(Collectors.toSet());\r\n            query = new RoleListQuery(loaded, cacheKey, realm, ids);\r\n            logger.tracev(\"adding realm roles cache miss: realm {0} key {1}\", realm.getName(), cacheKey);\r\n            cache.addRevisioned(query, startupRevision);\r\n            return model.stream();            \r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Set<RoleModel> model = getRealmDelegate().getRealmRolesStream(realm).collect(Collectors.toSet());\n          \n          \n            \n                        if (model == null) return null;\n          \n          \n            \n                        Set<String> ids = new HashSet<>();\n          \n          \n            \n                        for (RoleModel role : model) ids.add(role.getId());\n          \n          \n            \n                        query = new RoleListQuery(loaded, cacheKey, realm, ids);\n          \n          \n            \n                        logger.tracev(\"adding realm roles cache miss: realm {0} key {1}\", realm.getName(), cacheKey);\n          \n          \n            \n                        cache.addRevisioned(query, startupRevision);\n          \n          \n            \n                        return model;\n          \n          \n            \n                        return model.stream();\n          \n          \n            \n                        Set<RoleModel> model = getRealmDelegate().getRealmRoles(realm);\n          \n          \n            \n                        if (model == null) return null;\n          \n          \n            \n                        Set<String> ids = model.stream().map(RoleModel::getId).collect(Collectors.toSet());\n          \n          \n            \n                        query = new RoleListQuery(loaded, cacheKey, realm, ids);\n          \n          \n            \n                        logger.tracev(\"adding realm roles cache miss: realm {0} key {1}\", realm.getName(), cacheKey);\n          \n          \n            \n                        cache.addRevisioned(query, startupRevision);\n          \n          \n            \n                        return model.stream();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"630\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">RoleModel</span>&gt;</span> model <span class=\"pl-k\">=</span> getRealmDelegate()<span class=\"pl-k\">.</span>getRealmRolesStream(realm)<span class=\"pl-k\">.</span>collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toSet());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"631\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (model <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"632\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">String</span>&gt;</span> ids <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashSet&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"633\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">RoleModel</span> role <span class=\"pl-k\">:</span> model) ids<span class=\"pl-k\">.</span>add(role<span class=\"pl-k\">.</span>getId());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"634\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            query <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RoleListQuery</span>(loaded, cacheKey, realm, ids);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"635\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            logger<span class=\"pl-k\">.</span>tracev(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>adding realm roles cache miss: realm {0} key {1}<span class=\"pl-pds\">\"</span></span>, realm<span class=\"pl-k\">.</span>getName(), cacheKey);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"636\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            cache<span class=\"pl-k\">.</span>addRevisioned(query, startupRevision);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"637\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">return</span> model;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"638\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">return</span> model<span class=\"pl-k\">.</span>stream();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"630\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">RoleModel</span>&gt;</span> model <span class=\"pl-k\">=</span> getRealmDelegate()<span class=\"pl-k\">.</span>getRealmRoles(realm);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"631\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (model <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"632\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">String</span>&gt;</span> ids <span class=\"pl-k\">=</span> model<span class=\"pl-k\">.</span>stream()<span class=\"pl-k\">.</span>map(<span class=\"pl-smi\">RoleModel</span><span class=\"pl-k\">::</span>getId)<span class=\"pl-k\">.</span>collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toSet());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"633\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            query <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RoleListQuery</span>(loaded, cacheKey, realm, ids);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"634\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            logger<span class=\"pl-k\">.</span>tracev(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>adding realm roles cache miss: realm {0} key {1}<span class=\"pl-pds\">\"</span></span>, realm<span class=\"pl-k\">.</span>getName(), cacheKey);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"635\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            cache<span class=\"pl-k\">.</span>addRevisioned(query, startupRevision);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"636\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">return</span> model<span class=\"pl-k\">.</span>stream();            </td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "hmlnarik", "createdAt": "2020-07-15T13:13:05Z", "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java", "diffHunk": "@@ -612,33 +614,33 @@ public RoleModel addRealmRole(RealmModel realm, String id, String name) {\n \n         if (query == null) {\n             Long loaded = cache.getCurrentRevision(cacheKey);\n-            Set<RoleModel> model = getRealmDelegate().getRealmRoles(realm);\n+            Set<RoleModel> model = getRealmDelegate().getRealmRolesStream(realm).collect(Collectors.toSet());\n             if (model == null) return null;\n             Set<String> ids = new HashSet<>();\n             for (RoleModel role : model) ids.add(role.getId());\n             query = new RoleListQuery(loaded, cacheKey, realm, ids);\n             logger.tracev(\"adding realm roles cache miss: realm {0} key {1}\", realm.getName(), cacheKey);\n             cache.addRevisioned(query, startupRevision);\n-            return model;\n+            return model.stream();", "originalCommit": "ded3ef8a5a5953a710780e11ffa985c02771de1f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7de0e66f85338e39139fe0cc8e76a3dc1d99a5a8", "changed_code": [{"header": "diff --git a/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java b/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java\nindex 90977261a3..2fd784b594 100755\n--- a/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java\n+++ b/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java\n", "chunk": "@@ -614,10 +614,9 @@ public class RealmCacheSession implements CacheRealmProvider {\n \n         if (query == null) {\n             Long loaded = cache.getCurrentRevision(cacheKey);\n-            Set<RoleModel> model = getRealmDelegate().getRealmRolesStream(realm).collect(Collectors.toSet());\n+            Set<RoleModel> model = getRealmDelegate().getRealmRoles(realm);\n             if (model == null) return null;\n-            Set<String> ids = new HashSet<>();\n-            for (RoleModel role : model) ids.add(role.getId());\n+            Set<String> ids = model.stream().map(RoleModel::getId).collect(Collectors.toSet());\n             query = new RoleListQuery(loaded, cacheKey, realm, ids);\n             logger.tracev(\"adding realm roles cache miss: realm {0} key {1}\", realm.getName(), cacheKey);\n             cache.addRevisioned(query, startupRevision);\n", "next_change": {"commit": "f953d1f6d54d06448e7d09a182d8d1e187fce80d", "changed_code": [{"header": "diff --git a/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java b/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java\nindex 2fd784b594..61790595d4 100755\n--- a/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java\n+++ b/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java\n", "chunk": "@@ -614,6 +620,7 @@ public class RealmCacheSession implements CacheRealmProvider {\n \n         if (query == null) {\n             Long loaded = cache.getCurrentRevision(cacheKey);\n+            // intentionally using deprecated method here because role ids needs to be collected for cashing while the stream returned\n             Set<RoleModel> model = getRealmDelegate().getRealmRoles(realm);\n             if (model == null) return null;\n             Set<String> ids = model.stream().map(RoleModel::getId).collect(Collectors.toSet());\n", "next_change": null}]}}]}}, {"oid": "7de0e66f85338e39139fe0cc8e76a3dc1d99a5a8", "url": "https://github.com/keycloak/keycloak/commit/7de0e66f85338e39139fe0cc8e76a3dc1d99a5a8", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants", "committedDate": "2020-07-21T09:47:26Z", "type": "forcePushed"}, {"oid": "cb2e2e930122c511f80cece3eeb79c518a0a308b", "url": "https://github.com/keycloak/keycloak/commit/cb2e2e930122c511f80cece3eeb79c518a0a308b", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants", "committedDate": "2020-07-22T13:09:13Z", "type": "forcePushed"}, {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687", "url": "https://github.com/keycloak/keycloak/commit/40ea3e6b7cf3637006813ad9712be177890f2687", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants", "committedDate": "2020-07-22T15:57:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2MTA4NA==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459361084", "body": "Should also be methods for accessing roles within scope of this work? ", "bodyText": "Should also be methods for accessing roles within scope of this work?", "bodyHTML": "<p dir=\"auto\">Should also be methods for accessing roles within scope of this work?</p>", "author": "vramik", "createdAt": "2020-07-23T10:41:50Z", "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -81,16 +83,42 @@ default GroupModel createGroup(RealmModel realm, String name, GroupModel toParen\n \n     RoleModel getRealmRole(RealmModel realm, String name);\n \n-    Set<RoleModel> getRealmRoles(RealmModel realm);\n-    \n-    Set<RoleModel> getRealmRoles(RealmModel realm, Integer first, Integer max);\n-    \n-    Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client, Integer first, Integer max);\n-    \n-    Set<RoleModel> searchForClientRoles(RealmModel realm, ClientModel client, String search, Integer first,\n-            Integer max);\n-    \n-    Set<RoleModel> searchForRoles(RealmModel realm, String search, Integer first, Integer max);\n+    @Deprecated\n+    default Set<RoleModel> getRealmRoles(RealmModel realm) {\n+        return getRealmRolesStream(realm).collect(Collectors.toSet());\n+    }\n+\n+    Stream<RoleModel> getRealmRolesStream(RealmModel realm);\n+\n+    @Deprecated\n+    default Set<RoleModel> getRealmRoles(RealmModel realm, Integer first, Integer max) {\n+        return getRealmRolesStream(realm, first, max).collect(Collectors.toSet());\n+    }\n+\n+    Stream<RoleModel> getRealmRolesStream(RealmModel realm, Integer first, Integer max);", "originalCommit": "40ea3e6b7cf3637006813ad9712be177890f2687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM3OTMxMQ==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459379311", "bodyText": "It was simpler to include also getRealmRolesStream because there is a common method getRolesStream in JpaRealmProvider which operates with both getClientRoles and getRealmRoles.  So when I changed return type of getRolesStream to Stream<> it wasn't possible to call this method from getClientRoles and getRealmRoles if they both don't operate with streams.", "author": "martin-kanis", "createdAt": "2020-07-23T11:22:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2MTA4NA=="}], "type": "inlineReview", "revised_code": {"commit": "3d703b9c15f1450c9bdce7d296379c6bd8420c06", "changed_code": [{"header": "diff --git a/server-spi/src/main/java/org/keycloak/models/RealmProvider.java b/server-spi/src/main/java/org/keycloak/models/RealmProvider.java\nindex 6fb3b1ad57..54bf6623bf 100755\n--- a/server-spi/src/main/java/org/keycloak/models/RealmProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/models/RealmProvider.java\n", "chunk": "@@ -97,6 +98,7 @@ public interface RealmProvider extends Provider /* TODO: Remove in future versio\n \n     Stream<RoleModel> getRealmRolesStream(RealmModel realm, Integer first, Integer max);\n \n+    // TODO switch all usages to the stream variant\n     @Deprecated\n     default Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client, Integer first, Integer max) {\n         return getClientRolesStream(realm, client, first, max).collect(Collectors.toSet());\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQwMTIyMA==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459401220", "body": "These calls should be time-bound.", "bodyText": "These calls should be time-bound.", "bodyHTML": "<p dir=\"auto\">These calls should be time-bound.</p>", "author": "hmlnarik", "createdAt": "2020-07-23T12:09:48Z", "path": "services/src/main/java/org/keycloak/storage/ClientStorageManager.java", "diffHunk": "@@ -148,16 +149,11 @@ public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n     }\n \n     @Override\n-    public List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {\n-        List<ClientModel> clients = session.clientLocalStorage().searchClientsByClientId(realm, clientId,  firstResult, maxResults);\n-        if (clients != null) {\n-            return clients;\n-        }\n-        for (ClientLookupProvider provider : getEnabledStorageProviders(session, realm, ClientLookupProvider.class)) {\n-            clients = provider.searchClientsByClientId(realm, clientId, firstResult, maxResults);\n-            if (clients != null) return clients;\n-        }\n-        return null;\n+    public Stream<ClientModel> searchClientsByClientIdStream(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {\n+        Stream<ClientModel> local = session.clientLocalStorage().searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults);\n+        Stream<ClientModel> ext = getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n+                .flatMap(p -> p.searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults));", "originalCommit": "40ea3e6b7cf3637006813ad9712be177890f2687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MjExNA==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459992114", "bodyText": "Updated", "author": "martin-kanis", "createdAt": "2020-07-24T11:16:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQwMTIyMA=="}], "type": "inlineReview", "revised_code": {"commit": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01", "changed_code": [{"header": "diff --git a/services/src/main/java/org/keycloak/storage/ClientStorageManager.java b/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\nindex d71860d4f8..81a3704e50 100644\n--- a/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\n+++ b/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\n", "chunk": "@@ -151,8 +161,19 @@ public class ClientStorageManager implements ClientProvider {\n     @Override\n     public Stream<ClientModel> searchClientsByClientIdStream(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {\n         Stream<ClientModel> local = session.clientLocalStorage().searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults);\n-        Stream<ClientModel> ext = getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n+\n+        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n+        Callable<Stream<ClientModel>> callableTask = () -> getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n                 .flatMap(p -> p.searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults));\n+        Future<Stream<ClientModel>> future = executor.submit(callableTask);\n+        Stream<ClientModel> ext = Stream.empty();\n+        try {\n+            ext = future.get(clientStorageProviderTimeout, TimeUnit.MILLISECONDS);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            future.cancel(true);\n+            logger.debug(\"External ClientStorageProvider didn't return result on time.\");\n+        }\n+\n         return Stream.concat(local, ext);\n     }\n \n", "next_change": {"commit": "3d703b9c15f1450c9bdce7d296379c6bd8420c06", "changed_code": [{"header": "diff --git a/services/src/main/java/org/keycloak/storage/ClientStorageManager.java b/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\nindex 81a3704e50..2946ee184e 100644\n--- a/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\n+++ b/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\n", "chunk": "@@ -158,21 +152,20 @@ public class ClientStorageManager implements ClientProvider {\n         return null;\n     }\n \n+    /**\n+     * Obtaining clients from an external client storage is time-bounded. In case the external client storage\n+     * isn't available at least clients from a local storage are returned. For this purpose\n+     * the {@link org.keycloak.services.DefaultKeycloakSessionFactory#getClientStorageProviderTimeout()} property is used.\n+     * Default value is 3000 milliseconds and it's configurable.\n+     * See {@link org.keycloak.services.DefaultKeycloakSessionFactory} for details.\n+     */\n     @Override\n     public Stream<ClientModel> searchClientsByClientIdStream(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {\n         Stream<ClientModel> local = session.clientLocalStorage().searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults);\n-\n-        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n-        Callable<Stream<ClientModel>> callableTask = () -> getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n-                .flatMap(p -> p.searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults));\n-        Future<Stream<ClientModel>> future = executor.submit(callableTask);\n-        Stream<ClientModel> ext = Stream.empty();\n-        try {\n-            ext = future.get(clientStorageProviderTimeout, TimeUnit.MILLISECONDS);\n-        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n-            future.cancel(true);\n-            logger.debug(\"External ClientStorageProvider didn't return result on time.\");\n-        }\n+        Stream<ClientModel> ext = getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n+                .flatMap(ServicesUtils.timeBound(session,\n+                        clientStorageProviderTimeout,\n+                        p -> ((ClientLookupProvider) p).searchClientsByClientIdStream(realm, clientId, firstResult, maxResults)));\n \n         return Stream.concat(local, ext);\n     }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NDk3Nw==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459744977", "body": "`getRealmRoles(realm)` is now deprecated so I guess we shouldn't use it, right? ", "bodyText": "getRealmRoles(realm) is now deprecated so I guess we shouldn't use it, right?", "bodyHTML": "<p dir=\"auto\"><code>getRealmRoles(realm)</code> is now deprecated so I guess we shouldn't use it, right?</p>", "author": "vramik", "createdAt": "2020-07-23T21:43:25Z", "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java", "diffHunk": "@@ -620,31 +622,30 @@ public RoleModel addRealmRole(RealmModel realm, String id, String name) {\n             Long loaded = cache.getCurrentRevision(cacheKey);\n             Set<RoleModel> model = getRealmDelegate().getRealmRoles(realm);", "originalCommit": "40ea3e6b7cf3637006813ad9712be177890f2687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4NTcwOA==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459885708", "bodyText": "We discussed this with @hmlnarik and @sguilhen and we agreed on this solution. Problem here is the cashing of role ids. If you obtain a stream here, it will be spend by transformation to Stream (for cashing) and therefore the stream couldn't be returned later.", "author": "martin-kanis", "createdAt": "2020-07-24T07:09:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NDk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxODEzMg==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459918132", "bodyText": "This is an excellent question.\nGenerally, this is the case. In this case, it is however justified, as the cache provider is the final recipient of all the roles that it needs to cache, and it needs to process all of them, so it would collect them anyway.\nLater, we can think of optimizations like lazy-loading of the role details, and only returning stubs with IDs that would load the details only after when they are accessed. This would help across multiple places in caching.", "author": "hmlnarik", "createdAt": "2020-07-24T08:26:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NDk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1NzM0Ng==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459957346", "bodyText": "So maybe we shouldn't deprecate the method(s) after all. As far as I understand there are cases when using non-stream method is actually more efficient, right?", "author": "vramik", "createdAt": "2020-07-24T09:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NDk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NTQ3Mg==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459985472", "bodyText": "So after discussion with @hmlnarik we agreed we should add comment something like // this method is used intentionally here because ... to places where the deprecated methods are used.", "author": "vramik", "createdAt": "2020-07-24T10:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NDk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NDkxMA==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459994910", "bodyText": "comments added", "author": "martin-kanis", "createdAt": "2020-07-24T11:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NDk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f953d1f6d54d06448e7d09a182d8d1e187fce80d", "changed_code": [{"header": "diff --git a/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java b/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java\nindex 0ef6fa983f..61790595d4 100755\n--- a/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java\n+++ b/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java\n", "chunk": "@@ -620,6 +620,7 @@ public class RealmCacheSession implements CacheRealmProvider {\n \n         if (query == null) {\n             Long loaded = cache.getCurrentRevision(cacheKey);\n+            // intentionally using deprecated method here because role ids needs to be collected for cashing while the stream returned\n             Set<RoleModel> model = getRealmDelegate().getRealmRoles(realm);\n             if (model == null) return null;\n             Set<String> ids = model.stream().map(RoleModel::getId).collect(Collectors.toSet());\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NjU3NA==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459746574", "body": "the same here, `getClientRoles(realm, client, null, null)` is now deprecated.", "bodyText": "the same here, getClientRoles(realm, client, null, null) is now deprecated.", "bodyHTML": "<p dir=\"auto\">the same here, <code>getClientRoles(realm, client, null, null)</code> is now deprecated.</p>", "author": "vramik", "createdAt": "2020-07-23T21:46:51Z", "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java", "diffHunk": "@@ -654,46 +655,45 @@ public RoleModel addRealmRole(RealmModel realm, String id, String name) {\n \n         if (query == null) {\n             Long loaded = cache.getCurrentRevision(cacheKey);\n-            Set<RoleModel> model = getRealmDelegate().getClientRoles(realm, client);\n+            Set<RoleModel> model = getRealmDelegate().getClientRoles(realm, client, null, null);", "originalCommit": "40ea3e6b7cf3637006813ad9712be177890f2687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4NTg1Nw==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459885857", "bodyText": "Same as above", "author": "martin-kanis", "createdAt": "2020-07-24T07:09:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NjU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "f953d1f6d54d06448e7d09a182d8d1e187fce80d", "changed_code": [{"header": "diff --git a/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java b/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java\nindex 0ef6fa983f..61790595d4 100755\n--- a/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java\n+++ b/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java\n", "chunk": "@@ -655,6 +656,7 @@ public class RealmCacheSession implements CacheRealmProvider {\n \n         if (query == null) {\n             Long loaded = cache.getCurrentRevision(cacheKey);\n+            // intentionally using deprecated method here because role ids needs to be collected for cashing while the stream returned\n             Set<RoleModel> model = getRealmDelegate().getClientRoles(realm, client, null, null);\n             if (model == null) return null;\n             Set<String> ids = model.stream().map(RoleModel::getId).collect(Collectors.toSet());\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTExMg==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459749112", "body": "Why is new method `getClientsStream` added here in `RealmProvider`? I think we should leave original methods here as deprecated and add the new 'Stream' ones into `ClientProvider`.", "bodyText": "Why is new method getClientsStream added here in RealmProvider? I think we should leave original methods here as deprecated and add the new 'Stream' ones into ClientProvider.", "bodyHTML": "<p dir=\"auto\">Why is new method <code>getClientsStream</code> added here in <code>RealmProvider</code>? I think we should leave original methods here as deprecated and add the new 'Stream' ones into <code>ClientProvider</code>.</p>", "author": "vramik", "createdAt": "2020-07-23T21:53:02Z", "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -147,14 +177,14 @@ default ClientModel addClient(RealmModel realm, String clientId) {\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    default List<ClientModel> getClients(RealmModel realm) {\n-        return this.getClients(realm, null, null);\n+    default Stream<ClientModel> getClientsStream(RealmModel realm) {", "originalCommit": "40ea3e6b7cf3637006813ad9712be177890f2687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MTg4NA==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459991884", "bodyText": "reverted", "author": "martin-kanis", "createdAt": "2020-07-24T11:15:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTExMg=="}], "type": "inlineReview", "revised_code": {"commit": "3d703b9c15f1450c9bdce7d296379c6bd8420c06", "changed_code": [{"header": "diff --git a/server-spi/src/main/java/org/keycloak/models/RealmProvider.java b/server-spi/src/main/java/org/keycloak/models/RealmProvider.java\nindex 6fb3b1ad57..54bf6623bf 100755\n--- a/server-spi/src/main/java/org/keycloak/models/RealmProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/models/RealmProvider.java\n", "chunk": "@@ -177,20 +179,15 @@ public interface RealmProvider extends Provider /* TODO: Remove in future versio\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    default Stream<ClientModel> getClientsStream(RealmModel realm) {\n-        return this.getClientsStream(realm, null, null);\n+    default List<ClientModel> getClients(RealmModel realm) {\n+        return this.getClients(realm, null, null);\n     }\n \n-    /**\n-     * @deprecated Use the corresponding method from {@link ClientProvider}. */\n-    @Override\n-    public Stream<ClientModel> getClientsStream(RealmModel realm, Integer firstResult, Integer maxResults);\n-\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n     default List<ClientModel> searchClientsByClientId(String clientId, Integer firstResult, Integer maxResults, RealmModel realm) {\n-        return searchClientsByClientId(realm, clientId, firstResult, maxResults);\n+        return searchClientsByClientId(clientId, firstResult, maxResults, realm);\n     }\n \n     /**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTQzNQ==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459749435", "body": "dtto", "bodyText": "dtto", "bodyHTML": "<p dir=\"auto\">dtto</p>", "author": "vramik", "createdAt": "2020-07-23T21:53:45Z", "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -147,14 +177,14 @@ default ClientModel addClient(RealmModel realm, String clientId) {\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    default List<ClientModel> getClients(RealmModel realm) {\n-        return this.getClients(realm, null, null);\n+    default Stream<ClientModel> getClientsStream(RealmModel realm) {\n+        return this.getClientsStream(realm, null, null);\n     }\n \n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    public List<ClientModel> getClients(RealmModel realm, Integer firstResult, Integer maxResults);\n+    public Stream<ClientModel> getClientsStream(RealmModel realm, Integer firstResult, Integer maxResults);", "originalCommit": "40ea3e6b7cf3637006813ad9712be177890f2687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NTYwMA==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459985600", "bodyText": "In case I revert this I have to implement the method in JpaRealmProvider and RealmCacheSession or the method has to be removed from RealmProvider.", "author": "martin-kanis", "createdAt": "2020-07-24T10:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MTc1MA==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459991750", "bodyText": "I proceeded with removing the method from RealmProvider.", "author": "martin-kanis", "createdAt": "2020-07-24T11:15:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTQzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d703b9c15f1450c9bdce7d296379c6bd8420c06", "changed_code": [{"header": "diff --git a/server-spi/src/main/java/org/keycloak/models/RealmProvider.java b/server-spi/src/main/java/org/keycloak/models/RealmProvider.java\nindex 6fb3b1ad57..54bf6623bf 100755\n--- a/server-spi/src/main/java/org/keycloak/models/RealmProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/models/RealmProvider.java\n", "chunk": "@@ -177,20 +179,15 @@ public interface RealmProvider extends Provider /* TODO: Remove in future versio\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    default Stream<ClientModel> getClientsStream(RealmModel realm) {\n-        return this.getClientsStream(realm, null, null);\n+    default List<ClientModel> getClients(RealmModel realm) {\n+        return this.getClients(realm, null, null);\n     }\n \n-    /**\n-     * @deprecated Use the corresponding method from {@link ClientProvider}. */\n-    @Override\n-    public Stream<ClientModel> getClientsStream(RealmModel realm, Integer firstResult, Integer maxResults);\n-\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n     default List<ClientModel> searchClientsByClientId(String clientId, Integer firstResult, Integer maxResults, RealmModel realm) {\n-        return searchClientsByClientId(realm, clientId, firstResult, maxResults);\n+        return searchClientsByClientId(clientId, firstResult, maxResults, realm);\n     }\n \n     /**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTUwOQ==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459749509", "body": "dtto", "bodyText": "dtto", "bodyHTML": "<p dir=\"auto\">dtto</p>", "author": "vramik", "createdAt": "2020-07-23T21:53:56Z", "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -176,7 +206,7 @@ default ClientModel addClient(RealmModel realm, String clientId) {\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    public List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults);\n+    public Stream<ClientModel> searchClientsByClientIdStream(RealmModel realm, String clientId, Integer firstResult, Integer maxResults);", "originalCommit": "40ea3e6b7cf3637006813ad9712be177890f2687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MTYyOA==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459991628", "bodyText": "removed", "author": "martin-kanis", "createdAt": "2020-07-24T11:14:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTUwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d703b9c15f1450c9bdce7d296379c6bd8420c06", "changed_code": [{"header": "diff --git a/server-spi/src/main/java/org/keycloak/models/RealmProvider.java b/server-spi/src/main/java/org/keycloak/models/RealmProvider.java\nindex 6fb3b1ad57..54bf6623bf 100755\n--- a/server-spi/src/main/java/org/keycloak/models/RealmProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/models/RealmProvider.java\n", "chunk": "@@ -203,11 +200,6 @@ public interface RealmProvider extends Provider /* TODO: Remove in future versio\n     @Override\n     default ClientModel getClientById(String id, RealmModel realm) { return getClientById(realm, id); }\n \n-    /**\n-     * @deprecated Use the corresponding method from {@link ClientProvider}. */\n-    @Override\n-    public Stream<ClientModel> searchClientsByClientIdStream(RealmModel realm, String clientId, Integer firstResult, Integer maxResults);\n-\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTU5MQ==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459749591", "body": "dtto", "bodyText": "dtto", "bodyHTML": "<p dir=\"auto\">dtto</p>", "author": "vramik", "createdAt": "2020-07-23T21:54:06Z", "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -200,6 +230,6 @@ default ClientModel addClient(RealmModel realm, String clientId) {\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    public List<ClientModel> getAlwaysDisplayInConsoleClients(RealmModel realm);\n+    public Stream<ClientModel> getAlwaysDisplayInConsoleClientsStream(RealmModel realm);", "originalCommit": "40ea3e6b7cf3637006813ad9712be177890f2687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NjQ2MQ==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459986461", "bodyText": "In case I revert this I have to implement the method in JpaRealmProvider and RealmCacheSession or the method has to be removed from RealmProvider.", "author": "martin-kanis", "createdAt": "2020-07-24T11:01:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTU5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MTA0MQ==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459991041", "bodyText": "I proceeded with removing the method from RealmProvider.", "author": "martin-kanis", "createdAt": "2020-07-24T11:13:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d703b9c15f1450c9bdce7d296379c6bd8420c06", "changed_code": [{"header": "diff --git a/server-spi/src/main/java/org/keycloak/models/RealmProvider.java b/server-spi/src/main/java/org/keycloak/models/RealmProvider.java\nindex 6fb3b1ad57..54bf6623bf 100755\n--- a/server-spi/src/main/java/org/keycloak/models/RealmProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/models/RealmProvider.java\n", "chunk": "@@ -226,10 +218,4 @@ public interface RealmProvider extends Provider /* TODO: Remove in future versio\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     default boolean removeClient(String id, RealmModel realm) { return this.removeClient(realm, id); }\n-\n-    /**\n-     * @deprecated Use the corresponding method from {@link ClientProvider}. */\n-    @Override\n-    public Stream<ClientModel> getAlwaysDisplayInConsoleClientsStream(RealmModel realm);\n-\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MzEwMQ==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459753101", "body": "This method is now deprecated but still used across the codebase.", "bodyText": "This method is now deprecated but still used across the codebase.", "bodyHTML": "<p dir=\"auto\">This method is now deprecated but still used across the codebase.</p>", "author": "vramik", "createdAt": "2020-07-23T22:02:18Z", "path": "server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java", "diffHunk": "@@ -47,12 +49,27 @@\n \n     boolean removeRole(RoleModel role);\n \n-    Set<RoleModel> getRoles();\n-    \n-    Set<RoleModel> getRoles(Integer firstResult, Integer maxResults);\n+    @Deprecated\n+    default Set<RoleModel> getRoles() {", "originalCommit": "40ea3e6b7cf3637006813ad9712be177890f2687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4NzA0NA==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459887044", "bodyText": "This was intentionally left for a separate commit together with the rest of methods like getClients(). The PR would be huge if it was done at once. I've the second commit WIP.", "author": "martin-kanis", "createdAt": "2020-07-24T07:13:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MzEwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2MDE4NQ==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459960185", "bodyText": "so maybe it'd be good to add //TODO?", "author": "vramik", "createdAt": "2020-07-24T09:56:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MzEwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MDY1MA==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459990650", "bodyText": "TODO added to multiple places", "author": "martin-kanis", "createdAt": "2020-07-24T11:12:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MzEwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d703b9c15f1450c9bdce7d296379c6bd8420c06", "changed_code": [{"header": "diff --git a/server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java b/server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java\nindex 68d582a296..435a3ce0e5 100755\n--- a/server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java\n+++ b/server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java\n", "chunk": "@@ -49,6 +49,7 @@ public interface RoleContainerModel {\n \n     boolean removeRole(RoleModel role);\n \n+    // TODO switch all usages to the stream variant\n     @Deprecated\n     default Set<RoleModel> getRoles() {\n         return getRolesStream().collect(Collectors.toSet());\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MzMxNw==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459753317", "body": "the same here", "bodyText": "the same here", "bodyHTML": "<p dir=\"auto\">the same here</p>", "author": "vramik", "createdAt": "2020-07-23T22:02:51Z", "path": "server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java", "diffHunk": "@@ -47,12 +49,27 @@\n \n     boolean removeRole(RoleModel role);\n \n-    Set<RoleModel> getRoles();\n-    \n-    Set<RoleModel> getRoles(Integer firstResult, Integer maxResults);\n+    @Deprecated\n+    default Set<RoleModel> getRoles() {\n+        return getRolesStream().collect(Collectors.toSet());\n+    }\n+\n+    Stream<RoleModel> getRolesStream();\n+\n+    @Deprecated\n+    default Set<RoleModel> getRoles(Integer firstResult, Integer maxResults) {", "originalCommit": "40ea3e6b7cf3637006813ad9712be177890f2687", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d703b9c15f1450c9bdce7d296379c6bd8420c06", "changed_code": [{"header": "diff --git a/server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java b/server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java\nindex 68d582a296..435a3ce0e5 100755\n--- a/server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java\n+++ b/server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java\n", "chunk": "@@ -56,6 +57,7 @@ public interface RoleContainerModel {\n \n     Stream<RoleModel> getRolesStream();\n \n+    // TODO switch all usages to the stream variant\n     @Deprecated\n     default Set<RoleModel> getRoles(Integer firstResult, Integer maxResults) {\n         return getRolesStream(firstResult, maxResults).collect(Collectors.toSet());\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MzU0Mg==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459753542", "body": "the same here", "bodyText": "the same here", "bodyHTML": "<p dir=\"auto\">the same here</p>", "author": "vramik", "createdAt": "2020-07-23T22:03:27Z", "path": "server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java", "diffHunk": "@@ -47,12 +49,27 @@\n \n     boolean removeRole(RoleModel role);\n \n-    Set<RoleModel> getRoles();\n-    \n-    Set<RoleModel> getRoles(Integer firstResult, Integer maxResults);\n+    @Deprecated\n+    default Set<RoleModel> getRoles() {\n+        return getRolesStream().collect(Collectors.toSet());\n+    }\n+\n+    Stream<RoleModel> getRolesStream();\n+\n+    @Deprecated\n+    default Set<RoleModel> getRoles(Integer firstResult, Integer maxResults) {\n+        return getRolesStream(firstResult, maxResults).collect(Collectors.toSet());\n+    }\n+\n+    Stream<RoleModel> getRolesStream(Integer firstResult, Integer maxResults);\n+\n+    @Deprecated\n+    default Set<RoleModel> searchForRoles(String search, Integer first, Integer max) {", "originalCommit": "40ea3e6b7cf3637006813ad9712be177890f2687", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d703b9c15f1450c9bdce7d296379c6bd8420c06", "changed_code": [{"header": "diff --git a/server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java b/server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java\nindex 68d582a296..435a3ce0e5 100755\n--- a/server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java\n+++ b/server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java\n", "chunk": "@@ -63,6 +65,7 @@ public interface RoleContainerModel {\n \n     Stream<RoleModel> getRolesStream(Integer firstResult, Integer maxResults);\n \n+    // TODO switch all usages to the stream variant\n     @Deprecated\n     default Set<RoleModel> searchForRoles(String search, Integer first, Integer max) {\n         return searchForRolesStream(search, first, max).collect(Collectors.toSet());\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1NzgzMQ==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459757831", "body": "Line 164-167: `public List<ClientModel> getClients(RealmModel realm)` doesn't have to be implemented here, right? It's deprecated and it's used nowhere.", "bodyText": "Line 164-167: public List<ClientModel> getClients(RealmModel realm) doesn't have to be implemented here, right? It's deprecated and it's used nowhere.", "bodyHTML": "<p dir=\"auto\">Line 164-167: <code>public List&lt;ClientModel&gt; getClients(RealmModel realm)</code> doesn't have to be implemented here, right? It's deprecated and it's used nowhere.</p>", "author": "vramik", "createdAt": "2020-07-23T22:14:20Z", "path": "model/map/src/main/java/org/keycloak/models/map/client/MapClientProvider.java", "diffHunk": "@@ -152,7 +152,7 @@ public void unregisterNode(String nodeHost) {\n         return Stream.concat(tx.createdValuesStream(clientStore.keySet()), updatedAndNotRemovedClientsStream);\n     }\n \n-//    @Override\n+    @Override", "originalCommit": "40ea3e6b7cf3637006813ad9712be177890f2687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MDQ3MA==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459990470", "bodyText": "removed", "author": "martin-kanis", "createdAt": "2020-07-24T11:11:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1NzgzMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NDQyNQ==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459764425", "body": "This method wasn't declared in previous version of Keycloak, so I believe we don't have to deprecate it and we can remove it instead.", "bodyText": "This method wasn't declared in previous version of Keycloak, so I believe we don't have to deprecate it and we can remove it instead.", "bodyHTML": "<p dir=\"auto\">This method wasn't declared in previous version of Keycloak, so I believe we don't have to deprecate it and we can remove it instead.</p>", "author": "vramik", "createdAt": "2020-07-23T22:32:07Z", "path": "server-spi/src/main/java/org/keycloak/storage/client/ClientLookupProvider.java", "diffHunk": "@@ -71,22 +73,38 @@\n      * @param clientId Searched substring of the public client\n      *   identifier ({@code client_id} in OIDC or {@code entityID} in SAML.)\n      * @param firstResult First result to return. Ignored if negative or {@code null}.\n-     * @param maxResults Maximim number of results to return. Ignored if negative or {@code null}.\n-     * @return Model of the client, or {@code null} if no client is found.\n+     * @param maxResults Maximum number of results to return. Ignored if negative or {@code null}.\n+     * @return List of ClientModel or an empty list if no client is found.\n+     * @deprecated Use {@link #searchClientsByClientIdStream(org.keycloak.models.RealmModel, java.lang.String, java.lang.Integer, java.lang.Integer)} instead.\n      */\n-    List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults);\n+    @Deprecated\n+    default List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {", "originalCommit": "40ea3e6b7cf3637006813ad9712be177890f2687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MDM1Ng==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459990356", "bodyText": "removed", "author": "martin-kanis", "createdAt": "2020-07-24T11:11:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NDQyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d703b9c15f1450c9bdce7d296379c6bd8420c06", "changed_code": [{"header": "diff --git a/server-spi/src/main/java/org/keycloak/storage/client/ClientLookupProvider.java b/server-spi/src/main/java/org/keycloak/storage/client/ClientLookupProvider.java\nindex 0d33833e50..2ba36e8908 100644\n--- a/server-spi/src/main/java/org/keycloak/storage/client/ClientLookupProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/storage/client/ClientLookupProvider.java\n", "chunk": "@@ -78,23 +78,8 @@ public interface ClientLookupProvider {\n      * @deprecated Use {@link #searchClientsByClientIdStream(org.keycloak.models.RealmModel, java.lang.String, java.lang.Integer, java.lang.Integer)} instead.\n      */\n     @Deprecated\n-    default List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {\n-        return searchClientsByClientIdStream(realm, clientId, firstResult, maxResults).collect(Collectors.toList());\n-    }\n-\n-    /**\n-     * Case-insensitive search for clients that contain the given string in their public client identifier.\n-     * @param realm Realm to limit the search for clients.\n-     * @param clientId Searched substring of the public client\n-     *   identifier ({@code client_id} in OIDC or {@code entityID} in SAML.)\n-     * @param firstResult First result to return. Ignored if negative or {@code null}.\n-     * @param maxResults Maximum number of results to return. Ignored if negative or {@code null}.\n-     * @return List of ClientModel or an empty list if no client is found.\n-     * @deprecated Use {@link #searchClientsByClientId(org.keycloak.models.RealmModel, java.lang.String, java.lang.Integer, java.lang.Integer)} instead.\n-     */\n-    @Deprecated\n     default List<ClientModel> searchClientsByClientId(String clientId, Integer firstResult, Integer maxResults, RealmModel realm) {\n-        return searchClientsByClientId(realm, clientId, firstResult, maxResults);\n+        return searchClientsByClientIdStream(realm, clientId, firstResult, maxResults).collect(Collectors.toList());\n     }\n \n     /**\n", "next_change": null}]}}, {"oid": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01", "url": "https://github.com/keycloak/keycloak/commit/1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants", "committedDate": "2020-07-24T05:55:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2ODM3OA==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459868378", "body": "nit: not used", "bodyText": "nit: not used", "bodyHTML": "<p dir=\"auto\">nit: not used</p>", "author": "vramik", "createdAt": "2020-07-24T06:10:39Z", "path": "services/src/main/java/org/keycloak/services/DefaultKeycloakSession.java", "diffHunk": "@@ -16,6 +16,7 @@\n  */\n package org.keycloak.services;\n \n+import org.keycloak.Config;", "originalCommit": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MDI4OQ==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459990289", "bodyText": "removed", "author": "martin-kanis", "createdAt": "2020-07-24T11:11:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2ODM3OA=="}], "type": "inlineReview", "revised_code": {"commit": "3d703b9c15f1450c9bdce7d296379c6bd8420c06", "changed_code": [{"header": "diff --git a/services/src/main/java/org/keycloak/services/DefaultKeycloakSession.java b/services/src/main/java/org/keycloak/services/DefaultKeycloakSession.java\nindex 5edd6f7de5..939c47728f 100644\n--- a/services/src/main/java/org/keycloak/services/DefaultKeycloakSession.java\n+++ b/services/src/main/java/org/keycloak/services/DefaultKeycloakSession.java\n", "chunk": "@@ -16,7 +16,6 @@\n  */\n package org.keycloak.services;\n \n-import org.keycloak.Config;\n import org.keycloak.component.ComponentFactory;\n import org.keycloak.component.ComponentModel;\n import org.keycloak.credential.UserCredentialStoreManager;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MDYwMg==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459870602", "body": "We should add a javadoc for the timeout. What it does and in what units it's expected. Not sure where tha javadoc should be, whether in `DefaultKeycloakSessionFactory` or `DefaultKeycloakSession` or `ClientStorageManager`. Maybe  everywhere? :)", "bodyText": "We should add a javadoc for the timeout. What it does and in what units it's expected. Not sure where tha javadoc should be, whether in DefaultKeycloakSessionFactory or DefaultKeycloakSession or ClientStorageManager. Maybe  everywhere? :)", "bodyHTML": "<p dir=\"auto\">We should add a javadoc for the timeout. What it does and in what units it's expected. Not sure where tha javadoc should be, whether in <code>DefaultKeycloakSessionFactory</code> or <code>DefaultKeycloakSession</code> or <code>ClientStorageManager</code>. Maybe  everywhere? :)</p>", "author": "vramik", "createdAt": "2020-07-24T06:19:39Z", "path": "services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java", "diffHunk": "@@ -59,6 +59,8 @@\n     // TODO: Likely should be changed to int and use Time.currentTime() to be compatible with all our \"time\" reps\n     protected long serverStartupTimestamp;\n \n+    private long clientStorageProviderTimeout;", "originalCommit": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MzI5Ng==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459883296", "bodyText": "I believe DefaultKeycloakSessionFactory is the right place for the time being, since the configuration option should only be parsed once rather than with every DefaultKeycloakSession instantiation.\nSadly, ClientStorageManager is not instantiated as other SPIs so lacks ability to be configured in the init() method, and we have to simulate it from here. In the future, once we refactor the ClientStorageManager to be more SPI-like, it will be moved accordingly.", "author": "hmlnarik", "createdAt": "2020-07-24T07:01:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MDYwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MDIzNw==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459990237", "bodyText": "done", "author": "martin-kanis", "createdAt": "2020-07-24T11:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MDYwMg=="}], "type": "inlineReview", "revised_code": {"commit": "3d703b9c15f1450c9bdce7d296379c6bd8420c06", "changed_code": [{"header": "diff --git a/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java b/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java\nindex e56053e2c7..1fe799cd8f 100755\n--- a/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java\n+++ b/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java\n", "chunk": "@@ -59,6 +59,10 @@ public class DefaultKeycloakSessionFactory implements KeycloakSessionFactory, Pr\n     // TODO: Likely should be changed to int and use Time.currentTime() to be compatible with all our \"time\" reps\n     protected long serverStartupTimestamp;\n \n+    /**\n+     * Timeout is used as time boundary for obtaining clients from an external client storage. Default value is set\n+     * to 3000 milliseconds and it's configurable.\n+     */\n     private long clientStorageProviderTimeout;\n \n     @Override\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1NjM0Mw==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459956343", "body": "This method IMO should have also javadoc which describes its behavior, because on the first look it's not so obvious.", "bodyText": "This method IMO should have also javadoc which describes its behavior, because on the first look it's not so obvious.", "bodyHTML": "<p dir=\"auto\">This method IMO should have also javadoc which describes its behavior, because on the first look it's not so obvious.</p>", "author": "vramik", "createdAt": "2020-07-24T09:48:01Z", "path": "services/src/main/java/org/keycloak/storage/ClientStorageManager.java", "diffHunk": "@@ -148,16 +159,22 @@ public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n     }\n \n     @Override\n-    public List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {\n-        List<ClientModel> clients = session.clientLocalStorage().searchClientsByClientId(realm, clientId,  firstResult, maxResults);\n-        if (clients != null) {\n-            return clients;\n-        }\n-        for (ClientLookupProvider provider : getEnabledStorageProviders(session, realm, ClientLookupProvider.class)) {\n-            clients = provider.searchClientsByClientId(realm, clientId, firstResult, maxResults);\n-            if (clients != null) return clients;\n+    public Stream<ClientModel> searchClientsByClientIdStream(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {", "originalCommit": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MDE3OA==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459990178", "bodyText": "done", "author": "martin-kanis", "createdAt": "2020-07-24T11:11:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1NjM0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3d703b9c15f1450c9bdce7d296379c6bd8420c06", "changed_code": [{"header": "diff --git a/services/src/main/java/org/keycloak/storage/ClientStorageManager.java b/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\nindex 81a3704e50..2946ee184e 100644\n--- a/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\n+++ b/services/src/main/java/org/keycloak/storage/ClientStorageManager.java\n", "chunk": "@@ -158,21 +152,20 @@ public class ClientStorageManager implements ClientProvider {\n         return null;\n     }\n \n+    /**\n+     * Obtaining clients from an external client storage is time-bounded. In case the external client storage\n+     * isn't available at least clients from a local storage are returned. For this purpose\n+     * the {@link org.keycloak.services.DefaultKeycloakSessionFactory#getClientStorageProviderTimeout()} property is used.\n+     * Default value is 3000 milliseconds and it's configurable.\n+     * See {@link org.keycloak.services.DefaultKeycloakSessionFactory} for details.\n+     */\n     @Override\n     public Stream<ClientModel> searchClientsByClientIdStream(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {\n         Stream<ClientModel> local = session.clientLocalStorage().searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults);\n-\n-        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n-        Callable<Stream<ClientModel>> callableTask = () -> getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n-                .flatMap(p -> p.searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults));\n-        Future<Stream<ClientModel>> future = executor.submit(callableTask);\n-        Stream<ClientModel> ext = Stream.empty();\n-        try {\n-            ext = future.get(clientStorageProviderTimeout, TimeUnit.MILLISECONDS);\n-        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n-            future.cancel(true);\n-            logger.debug(\"External ClientStorageProvider didn't return result on time.\");\n-        }\n+        Stream<ClientModel> ext = getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n+                .flatMap(ServicesUtils.timeBound(session,\n+                        clientStorageProviderTimeout,\n+                        p -> ((ClientLookupProvider) p).searchClientsByClientIdStream(realm, clientId, firstResult, maxResults)));\n \n         return Stream.concat(local, ext);\n     }\n", "next_change": null}]}}, {"oid": "3d703b9c15f1450c9bdce7d296379c6bd8420c06", "url": "https://github.com/keycloak/keycloak/commit/3d703b9c15f1450c9bdce7d296379c6bd8420c06", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants", "committedDate": "2020-07-24T11:10:24Z", "type": "forcePushed"}, {"oid": "f953d1f6d54d06448e7d09a182d8d1e187fce80d", "url": "https://github.com/keycloak/keycloak/commit/f953d1f6d54d06448e7d09a182d8d1e187fce80d", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants", "committedDate": "2020-07-24T11:22:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI2NzE2Nw==", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r460267167", "body": "nit: copyright missing", "bodyText": "nit: copyright missing", "bodyHTML": "<p dir=\"auto\">nit: copyright missing</p>", "author": "vramik", "createdAt": "2020-07-24T20:15:19Z", "path": "services/src/main/java/org/keycloak/utils/ServicesUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package org.keycloak.utils;", "originalCommit": "f953d1f6d54d06448e7d09a182d8d1e187fce80d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94b2c97d293459aed9789fbb3268fcc45f388ff3", "changed_code": [{"header": "diff --git a/services/src/main/java/org/keycloak/utils/ServicesUtils.java b/services/src/main/java/org/keycloak/utils/ServicesUtils.java\nindex b5cb14f521..78825f1bfc 100644\n--- a/services/src/main/java/org/keycloak/utils/ServicesUtils.java\n+++ b/services/src/main/java/org/keycloak/utils/ServicesUtils.java\n", "chunk": "@@ -1,3 +1,20 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.keycloak.utils;\n \n import org.jboss.logging.Logger;\n", "next_change": null}]}}, {"oid": "94b2c97d293459aed9789fbb3268fcc45f388ff3", "url": "https://github.com/keycloak/keycloak/commit/94b2c97d293459aed9789fbb3268fcc45f388ff3", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants", "committedDate": "2020-07-24T20:30:05Z", "type": "commit"}, {"oid": "94b2c97d293459aed9789fbb3268fcc45f388ff3", "url": "https://github.com/keycloak/keycloak/commit/94b2c97d293459aed9789fbb3268fcc45f388ff3", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants", "committedDate": "2020-07-24T20:30:05Z", "type": "forcePushed"}]}