{"pr_number": 7227, "pr_title": "[KEYCLOAK-14646] - Improving permission resolution and evaluation", "pr_author": "pedroigor", "pr_createdAt": "2020-07-02T17:25:00Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7227", "timeline": [{"oid": "dfd18fe97332014c14482f243f8265a1240ade7e", "url": "https://github.com/keycloak/keycloak/commit/dfd18fe97332014c14482f243f8265a1240ade7e", "message": "[KEYCLOAK-14646] - Improving permission resolution and evaluation", "committedDate": "2020-07-02T18:23:33Z", "type": "forcePushed"}, {"oid": "88283ca8b1ebece93ce649c74ea6c22c7c237593", "url": "https://github.com/keycloak/keycloak/commit/88283ca8b1ebece93ce649c74ea6c22c7c237593", "message": "[KEYCLOAK-14646] - Improving permission resolution and evaluation", "committedDate": "2020-07-03T00:27:59Z", "type": "forcePushed"}, {"oid": "387d02ebf03c271e8aeea411997ce182eb989834", "url": "https://github.com/keycloak/keycloak/commit/387d02ebf03c271e8aeea411997ce182eb989834", "message": "[KEYCLOAK-14646] - Improving permission resolution and evaluation", "committedDate": "2020-07-03T01:17:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4MTkzNg==", "url": "https://github.com/keycloak/keycloak/pull/7227#discussion_r454381936", "body": "Not sure this is intentional, but currently the named query used here is not returning `id` but whole ResourceEntity, so I believe this should be possible:\r\n```suggestion\r\n        query.getResultStream().map(resourceEntity -> new ResourceAdapter(resourceEntity, entityManager, provider.getStoreFactory())).forEach(consumer);\r\n```\r\n\r\nOr if we want to make it possible to use cache for getting ResourceEntities, we should probably make the NamedQueries to return id only.", "bodyText": "Not sure this is intentional, but currently the named query used here is not returning id but whole ResourceEntity, so I believe this should be possible:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    query.getResultStream().map(id -> resourceStore.findById(id.getId(), resourceServerId)).forEach(consumer);\n          \n          \n            \n                    query.getResultStream().map(resourceEntity -> new ResourceAdapter(resourceEntity, entityManager, provider.getStoreFactory())).forEach(consumer);\n          \n      \n    \n    \n  \n\nOr if we want to make it possible to use cache for getting ResourceEntities, we should probably make the NamedQueries to return id only.", "bodyHTML": "<p dir=\"auto\">Not sure this is intentional, but currently the named query used here is not returning <code>id</code> but whole ResourceEntity, so I believe this should be possible:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"148\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        query<span class=\"pl-k\">.</span>getResultStream()<span class=\"pl-k\">.</span>map(<span class=\"x x-first x-last\">id</span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"x x-first\">resourceStore</span><span class=\"pl-k x\">.</span><span class=\"x\">findById(id</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getId(), resourceServerId</span>))<span class=\"pl-k\">.</span>forEach(consumer);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"148\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        query<span class=\"pl-k\">.</span>getResultStream()<span class=\"pl-k\">.</span>map(<span class=\"x x-first x-last\">resourceEntity</span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k x x-first\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">ResourceAdapter</span><span class=\"x\">(resourceEntity, entityManager, provider</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getStoreFactory()</span>))<span class=\"pl-k\">.</span>forEach(consumer);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Or if we want to make it possible to use cache for getting ResourceEntities, we should probably make the NamedQueries to return id only.</p>", "author": "mhajas", "createdAt": "2020-07-14T14:06:00Z", "path": "model/jpa/src/main/java/org/keycloak/authorization/jpa/store/JPAResourceStore.java", "diffHunk": "@@ -145,15 +145,7 @@ private void findByOwnerFilter(String ownerId, String resourceServerId, Consumer\n         }\n \n         ResourceStore resourceStore = provider.getStoreFactory().getResourceStore();\n-        List<String> result = query.getResultList();\n-\n-        for (String entity : result) {\n-            Resource cached = resourceStore.findById(entity, resourceServerId);\n-            \n-            if (cached != null) {\n-                consumer.accept(cached);\n-            }\n-        }\n+        query.getResultStream().map(id -> resourceStore.findById(id.getId(), resourceServerId)).forEach(consumer);", "originalCommit": "387d02ebf03c271e8aeea411997ce182eb989834", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYwNzk2MQ==", "url": "https://github.com/keycloak/keycloak/pull/7227#discussion_r454607961", "bodyText": "It is intentional. If returning id, an additional query will happen later. That code is what I got better results.", "author": "pedroigor", "createdAt": "2020-07-14T19:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4MTkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYyMDk1OA==", "url": "https://github.com/keycloak/keycloak/pull/7227#discussion_r454620958", "bodyText": "But now it is doing a request for the same ResrouceEntity twice. You get a list of ResrouceEntity (not only id but full ResourceEntity), then for each ResrouceEntity you just get id, and then do another request for ResrouceEntity, which was already loaded by the previous query.\nYou probably want to change r to r.id here to not have two queries for the same ResrouceEntity. Or am I missing something?", "author": "mhajas", "createdAt": "2020-07-14T20:22:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4MTkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc0MjEzMg==", "url": "https://github.com/keycloak/keycloak/pull/7227#discussion_r455742132", "bodyText": "You should not end up with two queries because the entity is already loaded into the entity manager. And we call the resourceStore.findById to force going through the cache layer.\nMakes sense now ?", "author": "pedroigor", "createdAt": "2020-07-16T12:17:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4MTkzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4NzYzNw==", "url": "https://github.com/keycloak/keycloak/pull/7227#discussion_r454387637", "body": "I am not sure I have enough knowledge of the Infinispan layer to review this. @hmlnarik @slaskawi Could you please help me on this line? ", "bodyText": "I am not sure I have enough knowledge of the Infinispan layer to review this. @hmlnarik @slaskawi Could you please help me on this line?", "bodyHTML": "<p dir=\"auto\">I am not sure I have enough knowledge of the Infinispan layer to review this. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/hmlnarik/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/hmlnarik\">@hmlnarik</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/slaskawi/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/slaskawi\">@slaskawi</a> Could you please help me on this line?</p>", "author": "mhajas", "createdAt": "2020-07-14T14:14:09Z", "path": "model/infinispan/src/main/java/org/keycloak/connections/infinispan/InfinispanConnectionProvider.java", "diffHunk": "@@ -43,7 +43,7 @@\n     String WORK_CACHE_NAME = \"work\";\n     String AUTHORIZATION_CACHE_NAME = \"authorization\";\n     String AUTHORIZATION_REVISIONS_CACHE_NAME = \"authorizationRevisions\";\n-    int AUTHORIZATION_REVISIONS_CACHE_DEFAULT_MAX = 20000;\n+    int AUTHORIZATION_REVISIONS_CACHE_DEFAULT_MAX = 1000000;", "originalCommit": "387d02ebf03c271e8aeea411997ce182eb989834", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYwNTQ4NA==", "url": "https://github.com/keycloak/keycloak/pull/7227#discussion_r454605484", "bodyText": "This is only changing the defaults using a higher value for the number of entries in cache. Useful when you have lot of authorization related entries.\nBut I'm going to revert this change though, people should be able to change that value. I used that during tests ...", "author": "pedroigor", "createdAt": "2020-07-14T19:53:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4NzYzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5ODE1Ng==", "url": "https://github.com/keycloak/keycloak/pull/7227#discussion_r454398156", "body": "```suggestion\r\n                    (revision, resources) -> new ResourceListQuery(revision, cacheKey, resources.stream().map(Resource::getId).collect(Collectors.toSet()), resourceServerId), resourceServerId, consumer);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                (revision, resources) -> new ResourceListQuery(revision, cacheKey, resources.stream().map(resource -> resource.getId()).collect(Collectors.toSet()), resourceServerId), resourceServerId, consumer);\n          \n          \n            \n                                (revision, resources) -> new ResourceListQuery(revision, cacheKey, resources.stream().map(Resource::getId).collect(Collectors.toSet()), resourceServerId), resourceServerId, consumer);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    (revision, resources) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ResourceListQuery</span>(revision, cacheKey, resources<span class=\"pl-k\">.</span>stream()<span class=\"pl-k\">.</span>map(<span class=\"x x-first\">resource </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x\"> resource</span><span class=\"pl-k x x-last\">.</span>getId<span class=\"x x-first x-last\">()</span>)<span class=\"pl-k\">.</span>collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toSet()), resourceServerId), resourceServerId, consumer);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    (revision, resources) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ResourceListQuery</span>(revision, cacheKey, resources<span class=\"pl-k\">.</span>stream()<span class=\"pl-k\">.</span>map(<span class=\"pl-smi x x-first\">Resource</span><span class=\"pl-k x x-last\">::</span>getId)<span class=\"pl-k\">.</span>collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toSet()), resourceServerId), resourceServerId, consumer);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mhajas", "createdAt": "2020-07-14T14:28:26Z", "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/authorization/StoreFactoryCacheSession.java", "diffHunk": "@@ -672,7 +672,17 @@ public Resource findByName(String name, String ownerId, String resourceServerId)\n         @Override\n         public void findByOwner(String ownerId, String resourceServerId, Consumer<Resource> consumer) {\n             String cacheKey = getResourceByOwnerCacheKey(ownerId, resourceServerId);\n-            cacheQuery(cacheKey, ResourceListQuery.class, () -> getResourceStoreDelegate().findByOwner(ownerId, resourceServerId),\n+            cacheQuery(cacheKey, ResourceListQuery.class, () -> {\n+                        List<Resource> resources = new ArrayList<>();\n+                        getResourceStoreDelegate().findByOwner(ownerId, resourceServerId, new Consumer<Resource>() {\n+                            @Override\n+                            public void accept(Resource resource) {\n+                                resources.add(resource);\n+                                consumer.accept(resource);\n+                            }\n+                        });\n+                        return resources;\n+                    },\n                     (revision, resources) -> new ResourceListQuery(revision, cacheKey, resources.stream().map(resource -> resource.getId()).collect(Collectors.toSet()), resourceServerId), resourceServerId, consumer);", "originalCommit": "387d02ebf03c271e8aeea411997ce182eb989834", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM2OTA0OQ==", "url": "https://github.com/keycloak/keycloak/pull/7227#discussion_r456369049", "bodyText": "@pedroigor there are lot of places within StoreFactoryCacheSession.java where lambda function can be replaced with static reference. I would say it makes sense to replace all occurrences. WDYT?", "author": "mhajas", "createdAt": "2020-07-17T10:50:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5ODE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3NDAzMw==", "url": "https://github.com/keycloak/keycloak/pull/7227#discussion_r456374033", "bodyText": "Sure", "author": "pedroigor", "createdAt": "2020-07-17T11:02:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5ODE1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwNjExNQ==", "url": "https://github.com/keycloak/keycloak/pull/7227#discussion_r454406115", "body": "This was not necessary before, why do we need it now? `cacheQuery` method is calling `consumer.accept()`", "bodyText": "This was not necessary before, why do we need it now? cacheQuery method is calling consumer.accept()", "bodyHTML": "<p dir=\"auto\">This was not necessary before, why do we need it now? <code>cacheQuery</code> method is calling <code>consumer.accept()</code></p>", "author": "mhajas", "createdAt": "2020-07-14T14:38:36Z", "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/authorization/StoreFactoryCacheSession.java", "diffHunk": "@@ -943,7 +998,17 @@ public void findByResource(String resourceId, String resourceServerId, Consumer<\n         @Override\n         public void findByResourceType(String resourceType, String resourceServerId, Consumer<Policy> consumer) {\n             String cacheKey = getPolicyByResourceType(resourceType, resourceServerId);\n-            cacheQuery(cacheKey, PolicyResourceListQuery.class, () -> getPolicyStoreDelegate().findByResourceType(resourceType, resourceServerId),\n+            cacheQuery(cacheKey, PolicyResourceListQuery.class, () -> {\n+                        List<Policy> policies = new ArrayList<>();\n+                        getPolicyStoreDelegate().findByResourceType(resourceType, resourceServerId, new Consumer<Policy>() {\n+                            @Override\n+                            public void accept(Policy policy) {\n+                                policies.add(policy);\n+                                consumer.accept(policy);", "originalCommit": "387d02ebf03c271e8aeea411997ce182eb989834", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYwNDI2OQ==", "url": "https://github.com/keycloak/keycloak/pull/7227#discussion_r454604269", "bodyText": "Otherwise, the query is not cached. I'm fixing this.", "author": "pedroigor", "createdAt": "2020-07-14T19:50:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwNjExNQ=="}], "type": "inlineReview"}, {"oid": "56c0a7372278bf9a7dbb07eed0e55576bad79e17", "url": "https://github.com/keycloak/keycloak/commit/56c0a7372278bf9a7dbb07eed0e55576bad79e17", "message": "[KEYCLOAK-14646] - Improving permission resolution and evaluation", "committedDate": "2020-07-16T13:45:33Z", "type": "commit"}, {"oid": "56c0a7372278bf9a7dbb07eed0e55576bad79e17", "url": "https://github.com/keycloak/keycloak/commit/56c0a7372278bf9a7dbb07eed0e55576bad79e17", "message": "[KEYCLOAK-14646] - Improving permission resolution and evaluation", "committedDate": "2020-07-16T13:45:33Z", "type": "forcePushed"}, {"oid": "8146d18d6daaa48bf3daa81f6f5af2603b47157c", "url": "https://github.com/keycloak/keycloak/commit/8146d18d6daaa48bf3daa81f6f5af2603b47157c", "message": "[KEYCLOAK-14646] - Changing cacheQuery", "committedDate": "2020-07-17T14:27:14Z", "type": "commit"}, {"oid": "8146d18d6daaa48bf3daa81f6f5af2603b47157c", "url": "https://github.com/keycloak/keycloak/commit/8146d18d6daaa48bf3daa81f6f5af2603b47157c", "message": "[KEYCLOAK-14646] - Changing cacheQuery", "committedDate": "2020-07-17T14:27:14Z", "type": "forcePushed"}]}