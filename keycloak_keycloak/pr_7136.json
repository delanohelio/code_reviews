{"pr_number": 7136, "pr_title": "KEYCLOAK-14368 Streams serialization in Jackson", "pr_author": "martin-kanis", "pr_createdAt": "2020-06-03T09:03:33Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7136", "timeline": [{"oid": "cbac29d1f3466e91699a9984befda92594a86891", "url": "https://github.com/keycloak/keycloak/commit/cbac29d1f3466e91699a9984befda92594a86891", "message": "KEYCLOAK-14368 Streams serialization in Jackson", "committedDate": "2020-06-05T09:10:33Z", "type": "forcePushed"}, {"oid": "4f2b77f0519be9e0c3befda2fa9c89db030654ba", "url": "https://github.com/keycloak/keycloak/commit/4f2b77f0519be9e0c3befda2fa9c89db030654ba", "message": "KEYCLOAK-14368 Streams serialization in Jackson", "committedDate": "2020-06-10T07:20:06Z", "type": "forcePushed"}, {"oid": "d1f95738da3ac5fb23ac6430e625af2f443b5257", "url": "https://github.com/keycloak/keycloak/commit/d1f95738da3ac5fb23ac6430e625af2f443b5257", "message": "KEYCLOAK-14368 Streams serialization in Jackson", "committedDate": "2020-06-10T08:00:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk3NDA0MA==", "url": "https://github.com/keycloak/keycloak/pull/7136#discussion_r437974040", "body": "The `response` is available in the `AsyncEvent` object and should not be part of the AsyncListener", "bodyText": "The response is available in the AsyncEvent object and should not be part of the AsyncListener", "bodyHTML": "<p dir=\"auto\">The <code>response</code> is available in the <code>AsyncEvent</code> object and should not be part of the AsyncListener</p>", "author": "hmlnarik", "createdAt": "2020-06-10T09:04:17Z", "path": "wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java", "diffHunk": "@@ -91,28 +94,28 @@ public int getLocalPort() {\n             filterChain.doFilter(servletRequest, servletResponse);\n         } finally {\n             if (servletRequest.isAsyncStarted()) {\n-                servletRequest.getAsyncContext().addListener(createAsyncLifeCycleListener(session));\n+                servletRequest.getAsyncContext().addListener(createAsyncLifeCycleListener(session, response));\n             } else {\n-                closeSession(session);\n+                closeSession(session, response);\n             }\n         }\n     }\n \n-    private AsyncListener createAsyncLifeCycleListener(final KeycloakSession session) {\n+    private AsyncListener createAsyncLifeCycleListener(final KeycloakSession session, final HttpServletResponse response) {", "originalCommit": "d1f95738da3ac5fb23ac6430e625af2f443b5257", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9516fab2774513b5173ab03e19e0b08ce4a757e", "changed_code": [{"header": "diff --git a/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java b/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\nindex 267485ecd7..cff851b279 100755\n--- a/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\n+++ b/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\n", "chunk": "@@ -94,28 +92,28 @@ public class KeycloakSessionServletFilter implements Filter {\n             filterChain.doFilter(servletRequest, servletResponse);\n         } finally {\n             if (servletRequest.isAsyncStarted()) {\n-                servletRequest.getAsyncContext().addListener(createAsyncLifeCycleListener(session, response));\n+                servletRequest.getAsyncContext().addListener(createAsyncLifeCycleListener(session));\n             } else {\n-                closeSession(session, response);\n+                closeSession(session);\n             }\n         }\n     }\n \n-    private AsyncListener createAsyncLifeCycleListener(final KeycloakSession session, final HttpServletResponse response) {\n+    private AsyncListener createAsyncLifeCycleListener(final KeycloakSession session) {\n         return new AsyncListener() {\n             @Override\n             public void onComplete(AsyncEvent event) {\n-                closeSession(session, response);\n+                closeSession(session);\n             }\n \n             @Override\n             public void onTimeout(AsyncEvent event) {\n-                closeSession(session, response);\n+                closeSession(session);\n             }\n \n             @Override\n             public void onError(AsyncEvent event) {\n-                closeSession(session, response);\n+                closeSession(session);\n             }\n \n             @Override\n", "next_change": {"commit": "7cd7c969a555bd5d73e7244dc1afd63c2b234588", "changed_code": [{"header": "diff --git a/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java b/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\ndeleted file mode 100755\nindex cff851b279..0000000000\n--- a/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\n+++ /dev/null\n", "chunk": "@@ -1,145 +0,0 @@\n-/*\n- * Copyright 2016 Red Hat, Inc. and/or its affiliates\n- * and other contributors as indicated by the @author tags.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.keycloak.provider.wildfly;\n-\n-import java.io.IOException;\n-\n-import javax.servlet.AsyncEvent;\n-import javax.servlet.AsyncListener;\n-import javax.servlet.Filter;\n-import javax.servlet.FilterChain;\n-import javax.servlet.FilterConfig;\n-import javax.servlet.ServletException;\n-import javax.servlet.ServletRequest;\n-import javax.servlet.ServletResponse;\n-import javax.servlet.http.HttpServletRequest;\n-\n-import org.keycloak.common.ClientConnection;\n-import org.keycloak.common.util.Resteasy;\n-import org.keycloak.models.KeycloakSession;\n-import org.keycloak.models.KeycloakSessionFactory;\n-import org.keycloak.models.KeycloakTransaction;\n-import org.keycloak.models.KeycloakTransactionManager;\n-\n-/**\n- * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n- * @version $Revision: 1 $\n- */\n-public class KeycloakSessionServletFilter implements Filter {\n-\n-    @Override\n-    public void init(FilterConfig filterConfig) throws ServletException {\n-    }\n-\n-    @Override\n-    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n-        servletRequest.setCharacterEncoding(\"UTF-8\");\n-\n-        final HttpServletRequest request = (HttpServletRequest)servletRequest;\n-\n-        KeycloakSessionFactory sessionFactory = (KeycloakSessionFactory) servletRequest.getServletContext().getAttribute(KeycloakSessionFactory.class.getName());\n-        KeycloakSession session = sessionFactory.create();\n-        Resteasy.pushContext(KeycloakSession.class, session);\n-        ClientConnection connection = new ClientConnection() {\n-            @Override\n-            public String getRemoteAddr() {\n-                return request.getRemoteAddr();\n-            }\n-\n-            @Override\n-            public String getRemoteHost() {\n-                return request.getRemoteHost();\n-            }\n-\n-            @Override\n-            public int getRemotePort() {\n-                return request.getRemotePort();\n-            }\n-\n-            @Override\n-            public String getLocalAddr() {\n-                return request.getLocalAddr();\n-            }\n-\n-            @Override\n-            public int getLocalPort() {\n-                return request.getLocalPort();\n-            }\n-        };\n-        session.getContext().setConnection(connection);\n-        Resteasy.pushContext(ClientConnection.class, connection);\n-\n-        KeycloakTransaction tx = session.getTransactionManager();\n-        Resteasy.pushContext(KeycloakTransaction.class, tx);\n-        tx.begin();\n-\n-        try {\n-            filterChain.doFilter(servletRequest, servletResponse);\n-        } finally {\n-            if (servletRequest.isAsyncStarted()) {\n-                servletRequest.getAsyncContext().addListener(createAsyncLifeCycleListener(session));\n-            } else {\n-                closeSession(session);\n-            }\n-        }\n-    }\n-\n-    private AsyncListener createAsyncLifeCycleListener(final KeycloakSession session) {\n-        return new AsyncListener() {\n-            @Override\n-            public void onComplete(AsyncEvent event) {\n-                closeSession(session);\n-            }\n-\n-            @Override\n-            public void onTimeout(AsyncEvent event) {\n-                closeSession(session);\n-            }\n-\n-            @Override\n-            public void onError(AsyncEvent event) {\n-                closeSession(session);\n-            }\n-\n-            @Override\n-            public void onStartAsync(AsyncEvent event) {\n-            }\n-        };\n-    }\n-\n-    private void closeSession(KeycloakSession session) {\n-        KeycloakTransactionManager transactionManager = session.getTransactionManager();\n-        if (transactionManager != null) {\n-            // transaction was postponed in KeycloakTransactionCommitter, commit it here\n-            if (transactionManager.isPostponedCommit()) {\n-                transactionManager.commit();\n-            } else if (transactionManager.isActive()){\n-                // KeycloakTransactionCommitter is responsible for committing the transaction, but if an exception is thrown it's not invoked and transaction\n-                // should be rolled back\n-                transactionManager.rollback();\n-            }\n-        }\n-\n-        session.close();\n-        Resteasy.clearContextData();\n-    }\n-\n-    @Override\n-    public void destroy() {\n-    }\n-}\n", "next_change": null}]}}]}}, {"oid": "a9516fab2774513b5173ab03e19e0b08ce4a757e", "url": "https://github.com/keycloak/keycloak/commit/a9516fab2774513b5173ab03e19e0b08ce4a757e", "message": "KEYCLOAK-14368 Streams serialization in Jackson", "committedDate": "2020-06-10T09:49:56Z", "type": "forcePushed"}, {"oid": "a2a736bd152b96042e16e8b4b16bf133248f4db0", "url": "https://github.com/keycloak/keycloak/commit/a2a736bd152b96042e16e8b4b16bf133248f4db0", "message": "KEYCLOAK-14368 Streams serialization in Jackson", "committedDate": "2020-06-10T11:39:22Z", "type": "forcePushed"}, {"oid": "e4c9f7972ec5c21eee66f5e6255e32389a72abd3", "url": "https://github.com/keycloak/keycloak/commit/e4c9f7972ec5c21eee66f5e6255e32389a72abd3", "message": "KEYCLOAK-14368 Streams serialization in Jackson", "committedDate": "2020-06-10T13:02:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1NzI2NQ==", "url": "https://github.com/keycloak/keycloak/pull/7136#discussion_r438157265", "body": "```suggestion\r\n        if (transactionManager != null && transactionManager.isActive()) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (transactionManager != null) {\n          \n          \n            \n                    if (transactionManager != null && transactionManager.isActive()) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (transactionManager <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (transactionManager <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span><span class=\"x x-first\"> </span><span class=\"pl-k x\">&amp;&amp;</span><span class=\"x\"> transactionManager</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">isActive()</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "hmlnarik", "createdAt": "2020-06-10T14:16:56Z", "path": "wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java", "diffHunk": "@@ -122,10 +124,17 @@ public void onStartAsync(AsyncEvent event) {\n     }\n \n     private void closeSession(KeycloakSession session) {\n-        // KeycloakTransactionCommitter is responsible for committing the transaction, but if an exception is thrown it's not invoked and transaction\n-        // should be rolled back\n-        if (session.getTransactionManager() != null && session.getTransactionManager().isActive()) {\n-            session.getTransactionManager().rollback();\n+        KeycloakTransactionManager transactionManager = session.getTransactionManager();\n+        if (transactionManager != null) {", "originalCommit": "e4c9f7972ec5c21eee66f5e6255e32389a72abd3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63e4ebfffe3b5fb7c8e66b49721f729e7d15358a", "changed_code": [{"header": "diff --git a/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java b/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\nindex 3f80f427db..c708c02961 100755\n--- a/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\n+++ b/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\n", "chunk": "@@ -125,12 +125,12 @@ public class KeycloakSessionServletFilter implements Filter {\n \n     private void closeSession(KeycloakSession session) {\n         KeycloakTransactionManager transactionManager = session.getTransactionManager();\n-        if (transactionManager != null) {\n+        if (transactionManager != null && transactionManager.isActive()) {\n             // transaction was postponed in KeycloakTransactionCommitter, commit it here\n             if ((transactionManager instanceof SupportsPostponedCommit) &&\n                     ((SupportsPostponedCommit) transactionManager).isPostponedCommit()) {\n                 transactionManager.commit();\n-            } else if (transactionManager.isActive()){\n+            } else {\n                 // KeycloakTransactionCommitter is responsible for committing the transaction, but if an exception is thrown it's not invoked and transaction\n                 // should be rolled back\n                 transactionManager.rollback();\n", "next_change": {"commit": "ccb330128db4b64b5b0bd90ef3ded724629a653f", "changed_code": [{"header": "diff --git a/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java b/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\nindex c708c02961..39d52d46fd 100755\n--- a/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\n+++ b/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\n", "chunk": "@@ -125,20 +125,23 @@ public class KeycloakSessionServletFilter implements Filter {\n \n     private void closeSession(KeycloakSession session) {\n         KeycloakTransactionManager transactionManager = session.getTransactionManager();\n-        if (transactionManager != null && transactionManager.isActive()) {\n-            // transaction was postponed in KeycloakTransactionCommitter, commit it here\n-            if ((transactionManager instanceof SupportsPostponedCommit) &&\n-                    ((SupportsPostponedCommit) transactionManager).isPostponedCommit()) {\n-                transactionManager.commit();\n-            } else {\n-                // KeycloakTransactionCommitter is responsible for committing the transaction, but if an exception is thrown it's not invoked and transaction\n-                // should be rolled back\n-                transactionManager.rollback();\n+\n+        try {\n+            if (transactionManager != null && transactionManager.isActive()) {\n+                // transaction was postponed in KeycloakTransactionCommitter, commit it here\n+                if ((transactionManager instanceof SupportsPostponedCommit) &&\n+                        ((SupportsPostponedCommit) transactionManager).isPostponedCommit()) {\n+                    transactionManager.commit();\n+                } else {\n+                    // KeycloakTransactionCommitter is responsible for committing the transaction, but if an exception is thrown it's not invoked and transaction\n+                    // should be rolled back\n+                    transactionManager.rollback();\n+                }\n             }\n+        } finally {\n+            session.close();\n+            Resteasy.clearContextData();\n         }\n-\n-        session.close();\n-        Resteasy.clearContextData();\n     }\n \n     @Override\n", "next_change": {"commit": "7cd7c969a555bd5d73e7244dc1afd63c2b234588", "changed_code": [{"header": "diff --git a/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java b/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\ndeleted file mode 100755\nindex 39d52d46fd..0000000000\n--- a/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\n+++ /dev/null\n", "chunk": "@@ -1,150 +0,0 @@\n-/*\n- * Copyright 2016 Red Hat, Inc. and/or its affiliates\n- * and other contributors as indicated by the @author tags.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.keycloak.provider.wildfly;\n-\n-import java.io.IOException;\n-\n-import javax.servlet.AsyncEvent;\n-import javax.servlet.AsyncListener;\n-import javax.servlet.Filter;\n-import javax.servlet.FilterChain;\n-import javax.servlet.FilterConfig;\n-import javax.servlet.ServletException;\n-import javax.servlet.ServletRequest;\n-import javax.servlet.ServletResponse;\n-import javax.servlet.http.HttpServletRequest;\n-\n-import org.keycloak.common.ClientConnection;\n-import org.keycloak.common.util.Resteasy;\n-import org.keycloak.models.KeycloakSession;\n-import org.keycloak.models.KeycloakSessionFactory;\n-import org.keycloak.models.KeycloakTransaction;\n-import org.keycloak.models.KeycloakTransactionManager;\n-import org.keycloak.models.SupportsPostponedCommit;\n-\n-/**\n- * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n- * @version $Revision: 1 $\n- */\n-public class KeycloakSessionServletFilter implements Filter {\n-\n-    @Override\n-    public void init(FilterConfig filterConfig) throws ServletException {\n-    }\n-\n-    @Override\n-    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n-        servletRequest.setCharacterEncoding(\"UTF-8\");\n-\n-        final HttpServletRequest request = (HttpServletRequest)servletRequest;\n-\n-        KeycloakSessionFactory sessionFactory = (KeycloakSessionFactory) servletRequest.getServletContext().getAttribute(KeycloakSessionFactory.class.getName());\n-        KeycloakSession session = sessionFactory.create();\n-        Resteasy.pushContext(KeycloakSession.class, session);\n-        ClientConnection connection = new ClientConnection() {\n-            @Override\n-            public String getRemoteAddr() {\n-                return request.getRemoteAddr();\n-            }\n-\n-            @Override\n-            public String getRemoteHost() {\n-                return request.getRemoteHost();\n-            }\n-\n-            @Override\n-            public int getRemotePort() {\n-                return request.getRemotePort();\n-            }\n-\n-            @Override\n-            public String getLocalAddr() {\n-                return request.getLocalAddr();\n-            }\n-\n-            @Override\n-            public int getLocalPort() {\n-                return request.getLocalPort();\n-            }\n-        };\n-        session.getContext().setConnection(connection);\n-        Resteasy.pushContext(ClientConnection.class, connection);\n-\n-        KeycloakTransaction tx = session.getTransactionManager();\n-        Resteasy.pushContext(KeycloakTransaction.class, tx);\n-        tx.begin();\n-\n-        try {\n-            filterChain.doFilter(servletRequest, servletResponse);\n-        } finally {\n-            if (servletRequest.isAsyncStarted()) {\n-                servletRequest.getAsyncContext().addListener(createAsyncLifeCycleListener(session));\n-            } else {\n-                closeSession(session);\n-            }\n-        }\n-    }\n-\n-    private AsyncListener createAsyncLifeCycleListener(final KeycloakSession session) {\n-        return new AsyncListener() {\n-            @Override\n-            public void onComplete(AsyncEvent event) {\n-                closeSession(session);\n-            }\n-\n-            @Override\n-            public void onTimeout(AsyncEvent event) {\n-                closeSession(session);\n-            }\n-\n-            @Override\n-            public void onError(AsyncEvent event) {\n-                closeSession(session);\n-            }\n-\n-            @Override\n-            public void onStartAsync(AsyncEvent event) {\n-            }\n-        };\n-    }\n-\n-    private void closeSession(KeycloakSession session) {\n-        KeycloakTransactionManager transactionManager = session.getTransactionManager();\n-\n-        try {\n-            if (transactionManager != null && transactionManager.isActive()) {\n-                // transaction was postponed in KeycloakTransactionCommitter, commit it here\n-                if ((transactionManager instanceof SupportsPostponedCommit) &&\n-                        ((SupportsPostponedCommit) transactionManager).isPostponedCommit()) {\n-                    transactionManager.commit();\n-                } else {\n-                    // KeycloakTransactionCommitter is responsible for committing the transaction, but if an exception is thrown it's not invoked and transaction\n-                    // should be rolled back\n-                    transactionManager.rollback();\n-                }\n-            }\n-        } finally {\n-            session.close();\n-            Resteasy.clearContextData();\n-        }\n-    }\n-\n-    @Override\n-    public void destroy() {\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1NzQ4NQ==", "url": "https://github.com/keycloak/keycloak/pull/7136#discussion_r438157485", "body": "```suggestion\r\n            } else {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else if (transactionManager.isActive()){\n          \n          \n            \n                        } else {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            } <span class=\"pl-k\">else</span> <span class=\"pl-k x x-first\">if</span><span class=\"x\"> (transactionManager</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">isActive())</span>{</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "hmlnarik", "createdAt": "2020-06-10T14:17:15Z", "path": "wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java", "diffHunk": "@@ -122,10 +124,17 @@ public void onStartAsync(AsyncEvent event) {\n     }\n \n     private void closeSession(KeycloakSession session) {\n-        // KeycloakTransactionCommitter is responsible for committing the transaction, but if an exception is thrown it's not invoked and transaction\n-        // should be rolled back\n-        if (session.getTransactionManager() != null && session.getTransactionManager().isActive()) {\n-            session.getTransactionManager().rollback();\n+        KeycloakTransactionManager transactionManager = session.getTransactionManager();\n+        if (transactionManager != null) {\n+            // transaction was postponed in KeycloakTransactionCommitter, commit it here\n+            if ((transactionManager instanceof SupportsPostponedCommit) &&\n+                    ((SupportsPostponedCommit) transactionManager).isPostponedCommit()) {\n+                transactionManager.commit();\n+            } else if (transactionManager.isActive()){", "originalCommit": "e4c9f7972ec5c21eee66f5e6255e32389a72abd3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63e4ebfffe3b5fb7c8e66b49721f729e7d15358a", "changed_code": [{"header": "diff --git a/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java b/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\nindex 3f80f427db..c708c02961 100755\n--- a/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\n+++ b/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\n", "chunk": "@@ -125,12 +125,12 @@ public class KeycloakSessionServletFilter implements Filter {\n \n     private void closeSession(KeycloakSession session) {\n         KeycloakTransactionManager transactionManager = session.getTransactionManager();\n-        if (transactionManager != null) {\n+        if (transactionManager != null && transactionManager.isActive()) {\n             // transaction was postponed in KeycloakTransactionCommitter, commit it here\n             if ((transactionManager instanceof SupportsPostponedCommit) &&\n                     ((SupportsPostponedCommit) transactionManager).isPostponedCommit()) {\n                 transactionManager.commit();\n-            } else if (transactionManager.isActive()){\n+            } else {\n                 // KeycloakTransactionCommitter is responsible for committing the transaction, but if an exception is thrown it's not invoked and transaction\n                 // should be rolled back\n                 transactionManager.rollback();\n", "next_change": {"commit": "ccb330128db4b64b5b0bd90ef3ded724629a653f", "changed_code": [{"header": "diff --git a/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java b/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\nindex c708c02961..39d52d46fd 100755\n--- a/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\n+++ b/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\n", "chunk": "@@ -125,20 +125,23 @@ public class KeycloakSessionServletFilter implements Filter {\n \n     private void closeSession(KeycloakSession session) {\n         KeycloakTransactionManager transactionManager = session.getTransactionManager();\n-        if (transactionManager != null && transactionManager.isActive()) {\n-            // transaction was postponed in KeycloakTransactionCommitter, commit it here\n-            if ((transactionManager instanceof SupportsPostponedCommit) &&\n-                    ((SupportsPostponedCommit) transactionManager).isPostponedCommit()) {\n-                transactionManager.commit();\n-            } else {\n-                // KeycloakTransactionCommitter is responsible for committing the transaction, but if an exception is thrown it's not invoked and transaction\n-                // should be rolled back\n-                transactionManager.rollback();\n+\n+        try {\n+            if (transactionManager != null && transactionManager.isActive()) {\n+                // transaction was postponed in KeycloakTransactionCommitter, commit it here\n+                if ((transactionManager instanceof SupportsPostponedCommit) &&\n+                        ((SupportsPostponedCommit) transactionManager).isPostponedCommit()) {\n+                    transactionManager.commit();\n+                } else {\n+                    // KeycloakTransactionCommitter is responsible for committing the transaction, but if an exception is thrown it's not invoked and transaction\n+                    // should be rolled back\n+                    transactionManager.rollback();\n+                }\n             }\n+        } finally {\n+            session.close();\n+            Resteasy.clearContextData();\n         }\n-\n-        session.close();\n-        Resteasy.clearContextData();\n     }\n \n     @Override\n", "next_change": {"commit": "7cd7c969a555bd5d73e7244dc1afd63c2b234588", "changed_code": [{"header": "diff --git a/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java b/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\ndeleted file mode 100755\nindex 39d52d46fd..0000000000\n--- a/wildfly/extensions/src/main/java/org/keycloak/provider/wildfly/KeycloakSessionServletFilter.java\n+++ /dev/null\n", "chunk": "@@ -1,150 +0,0 @@\n-/*\n- * Copyright 2016 Red Hat, Inc. and/or its affiliates\n- * and other contributors as indicated by the @author tags.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.keycloak.provider.wildfly;\n-\n-import java.io.IOException;\n-\n-import javax.servlet.AsyncEvent;\n-import javax.servlet.AsyncListener;\n-import javax.servlet.Filter;\n-import javax.servlet.FilterChain;\n-import javax.servlet.FilterConfig;\n-import javax.servlet.ServletException;\n-import javax.servlet.ServletRequest;\n-import javax.servlet.ServletResponse;\n-import javax.servlet.http.HttpServletRequest;\n-\n-import org.keycloak.common.ClientConnection;\n-import org.keycloak.common.util.Resteasy;\n-import org.keycloak.models.KeycloakSession;\n-import org.keycloak.models.KeycloakSessionFactory;\n-import org.keycloak.models.KeycloakTransaction;\n-import org.keycloak.models.KeycloakTransactionManager;\n-import org.keycloak.models.SupportsPostponedCommit;\n-\n-/**\n- * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n- * @version $Revision: 1 $\n- */\n-public class KeycloakSessionServletFilter implements Filter {\n-\n-    @Override\n-    public void init(FilterConfig filterConfig) throws ServletException {\n-    }\n-\n-    @Override\n-    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n-        servletRequest.setCharacterEncoding(\"UTF-8\");\n-\n-        final HttpServletRequest request = (HttpServletRequest)servletRequest;\n-\n-        KeycloakSessionFactory sessionFactory = (KeycloakSessionFactory) servletRequest.getServletContext().getAttribute(KeycloakSessionFactory.class.getName());\n-        KeycloakSession session = sessionFactory.create();\n-        Resteasy.pushContext(KeycloakSession.class, session);\n-        ClientConnection connection = new ClientConnection() {\n-            @Override\n-            public String getRemoteAddr() {\n-                return request.getRemoteAddr();\n-            }\n-\n-            @Override\n-            public String getRemoteHost() {\n-                return request.getRemoteHost();\n-            }\n-\n-            @Override\n-            public int getRemotePort() {\n-                return request.getRemotePort();\n-            }\n-\n-            @Override\n-            public String getLocalAddr() {\n-                return request.getLocalAddr();\n-            }\n-\n-            @Override\n-            public int getLocalPort() {\n-                return request.getLocalPort();\n-            }\n-        };\n-        session.getContext().setConnection(connection);\n-        Resteasy.pushContext(ClientConnection.class, connection);\n-\n-        KeycloakTransaction tx = session.getTransactionManager();\n-        Resteasy.pushContext(KeycloakTransaction.class, tx);\n-        tx.begin();\n-\n-        try {\n-            filterChain.doFilter(servletRequest, servletResponse);\n-        } finally {\n-            if (servletRequest.isAsyncStarted()) {\n-                servletRequest.getAsyncContext().addListener(createAsyncLifeCycleListener(session));\n-            } else {\n-                closeSession(session);\n-            }\n-        }\n-    }\n-\n-    private AsyncListener createAsyncLifeCycleListener(final KeycloakSession session) {\n-        return new AsyncListener() {\n-            @Override\n-            public void onComplete(AsyncEvent event) {\n-                closeSession(session);\n-            }\n-\n-            @Override\n-            public void onTimeout(AsyncEvent event) {\n-                closeSession(session);\n-            }\n-\n-            @Override\n-            public void onError(AsyncEvent event) {\n-                closeSession(session);\n-            }\n-\n-            @Override\n-            public void onStartAsync(AsyncEvent event) {\n-            }\n-        };\n-    }\n-\n-    private void closeSession(KeycloakSession session) {\n-        KeycloakTransactionManager transactionManager = session.getTransactionManager();\n-\n-        try {\n-            if (transactionManager != null && transactionManager.isActive()) {\n-                // transaction was postponed in KeycloakTransactionCommitter, commit it here\n-                if ((transactionManager instanceof SupportsPostponedCommit) &&\n-                        ((SupportsPostponedCommit) transactionManager).isPostponedCommit()) {\n-                    transactionManager.commit();\n-                } else {\n-                    // KeycloakTransactionCommitter is responsible for committing the transaction, but if an exception is thrown it's not invoked and transaction\n-                    // should be rolled back\n-                    transactionManager.rollback();\n-                }\n-            }\n-        } finally {\n-            session.close();\n-            Resteasy.clearContextData();\n-        }\n-    }\n-\n-    @Override\n-    public void destroy() {\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NjMyNw==", "url": "https://github.com/keycloak/keycloak/pull/7136#discussion_r438176327", "body": "```suggestion\r\n        KeycloakTransaction tx = Resteasy.getContextData(KeycloakTransaction.class);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    KeycloakTransaction tx =  Resteasy.getContextData(KeycloakTransaction.class);\n          \n          \n            \n                    KeycloakTransaction tx = Resteasy.getContextData(KeycloakTransaction.class);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">KeycloakTransaction</span> tx <span class=\"pl-k\">=</span> <span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">Resteasy</span><span class=\"pl-k\">.</span>getContextData(<span class=\"pl-smi\">KeycloakTransaction</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">KeycloakTransaction</span> tx <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Resteasy</span><span class=\"pl-k\">.</span>getContextData(<span class=\"pl-smi\">KeycloakTransaction</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "hmlnarik", "createdAt": "2020-06-10T14:40:26Z", "path": "services/src/main/java/org/keycloak/services/filters/KeycloakTransactionCommitter.java", "diffHunk": "@@ -36,13 +36,20 @@\n public class KeycloakTransactionCommitter implements ContainerResponseFilter {\n \n     @Override\n-    public void filter(ContainerRequestContext containerRequestContext, ContainerResponseContext containerResponseContext) throws IOException {\n-        KeycloakTransaction tx = Resteasy.getContextData(KeycloakTransaction.class);\n+    public void filter(ContainerRequestContext containerRequestContext, ContainerResponseContext containerResponseContext) {\n+        KeycloakTransaction tx =  Resteasy.getContextData(KeycloakTransaction.class);", "originalCommit": "e4c9f7972ec5c21eee66f5e6255e32389a72abd3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63e4ebfffe3b5fb7c8e66b49721f729e7d15358a", "changed_code": [{"header": "diff --git a/services/src/main/java/org/keycloak/services/filters/KeycloakTransactionCommitter.java b/services/src/main/java/org/keycloak/services/filters/KeycloakTransactionCommitter.java\nindex 763c535d1e..f3d7629187 100644\n--- a/services/src/main/java/org/keycloak/services/filters/KeycloakTransactionCommitter.java\n+++ b/services/src/main/java/org/keycloak/services/filters/KeycloakTransactionCommitter.java\n", "chunk": "@@ -37,7 +37,7 @@ public class KeycloakTransactionCommitter implements ContainerResponseFilter {\n \n     @Override\n     public void filter(ContainerRequestContext containerRequestContext, ContainerResponseContext containerResponseContext) {\n-        KeycloakTransaction tx =  Resteasy.getContextData(KeycloakTransaction.class);\n+        KeycloakTransaction tx = Resteasy.getContextData(KeycloakTransaction.class);\n         if (tx != null && tx.isActive()) {\n             if (tx.getRollbackOnly()) {\n                 tx.rollback();\n", "next_change": {"commit": "ccb330128db4b64b5b0bd90ef3ded724629a653f", "changed_code": [{"header": "diff --git a/services/src/main/java/org/keycloak/services/filters/KeycloakTransactionCommitter.java b/services/src/main/java/org/keycloak/services/filters/KeycloakTransactionCommitter.java\nindex f3d7629187..be68055b8b 100644\n--- a/services/src/main/java/org/keycloak/services/filters/KeycloakTransactionCommitter.java\n+++ b/services/src/main/java/org/keycloak/services/filters/KeycloakTransactionCommitter.java\n", "chunk": "@@ -42,13 +42,12 @@ public class KeycloakTransactionCommitter implements ContainerResponseFilter {\n             if (tx.getRollbackOnly()) {\n                 tx.rollback();\n             } else {\n-                if (!(containerResponseContext.getEntity() instanceof java.util.stream.Stream)) {\n-                    tx.commit();\n-                } else if (tx instanceof SupportsPostponedCommit) {\n+                if ((containerResponseContext.getEntity() instanceof java.util.stream.Stream) &&\n+                        tx instanceof SupportsPostponedCommit) {\n                     // postpone the commit after the stream serialization is done\n                     ((SupportsPostponedCommit) tx).postponeCommit();\n                 } else {\n-                    throw new RuntimeException(tx.getClass() + \" doesn't support postponed commit.\");\n+                    tx.commit();\n                 }\n             }\n         }\n", "next_change": {"commit": "f10e05ac9cf2615b38a32363dc8f636065e96b35", "changed_code": [{"header": "diff --git a/services/src/main/java/org/keycloak/services/filters/KeycloakTransactionCommitter.java b/services/src/main/java/org/keycloak/services/filters/KeycloakTransactionCommitter.java\nindex be68055b8b..1ca19a583d 100644\n--- a/services/src/main/java/org/keycloak/services/filters/KeycloakTransactionCommitter.java\n+++ b/services/src/main/java/org/keycloak/services/filters/KeycloakTransactionCommitter.java\n", "chunk": "@@ -41,14 +41,12 @@ public class KeycloakTransactionCommitter implements ContainerResponseFilter {\n         if (tx != null && tx.isActive()) {\n             if (tx.getRollbackOnly()) {\n                 tx.rollback();\n+            } else if ((containerResponseContext.getEntity() instanceof java.util.stream.Stream) &&\n+                    tx instanceof SupportsPostponedCommit) {\n+                // postpone the commit after the stream serialization is done\n+                ((SupportsPostponedCommit) tx).postponeCommit();\n             } else {\n-                if ((containerResponseContext.getEntity() instanceof java.util.stream.Stream) &&\n-                        tx instanceof SupportsPostponedCommit) {\n-                    // postpone the commit after the stream serialization is done\n-                    ((SupportsPostponedCommit) tx).postponeCommit();\n-                } else {\n-                    tx.commit();\n-                }\n+                tx.commit();\n             }\n         }\n     }\n", "next_change": {"commit": "7cd7c969a555bd5d73e7244dc1afd63c2b234588", "changed_code": [{"header": "diff --git a/services/src/main/java/org/keycloak/services/filters/KeycloakTransactionCommitter.java b/services/src/main/java/org/keycloak/services/filters/KeycloakSessionFilter.java\nsimilarity index 58%\nrename from services/src/main/java/org/keycloak/services/filters/KeycloakTransactionCommitter.java\nrename to services/src/main/java/org/keycloak/services/filters/KeycloakSessionFilter.java\nindex 1ca19a583d..c319f17ce3 100644\n--- a/services/src/main/java/org/keycloak/services/filters/KeycloakTransactionCommitter.java\n+++ b/services/src/main/java/org/keycloak/services/filters/KeycloakSessionFilter.java\n", "chunk": "@@ -14,41 +14,28 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n-/*\n- */\n-\n package org.keycloak.services.filters;\n \n import org.keycloak.common.util.Resteasy;\n-import org.keycloak.models.KeycloakTransaction;\n-import org.keycloak.models.SupportsPostponedCommit;\n+import org.keycloak.headers.SecurityHeadersProvider;\n+import org.keycloak.models.KeycloakSession;\n \n-import javax.annotation.Priority;\n import javax.ws.rs.container.ContainerRequestContext;\n import javax.ws.rs.container.ContainerResponseContext;\n import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.container.PreMatching;\n \n /**\n  * @author <a href=\"mailto:sthorger@redhat.com\">Stian Thorgersen</a>\n  */\n-@Priority(2)\n-public class KeycloakTransactionCommitter implements ContainerResponseFilter {\n+@PreMatching\n+public class KeycloakSessionFilter implements ContainerResponseFilter {\n \n     @Override\n     public void filter(ContainerRequestContext containerRequestContext, ContainerResponseContext containerResponseContext) {\n-        KeycloakTransaction tx = Resteasy.getContextData(KeycloakTransaction.class);\n-        if (tx != null && tx.isActive()) {\n-            if (tx.getRollbackOnly()) {\n-                tx.rollback();\n-            } else if ((containerResponseContext.getEntity() instanceof java.util.stream.Stream) &&\n-                    tx instanceof SupportsPostponedCommit) {\n-                // postpone the commit after the stream serialization is done\n-                ((SupportsPostponedCommit) tx).postponeCommit();\n-            } else {\n-                tx.commit();\n-            }\n-        }\n-    }\n+        KeycloakSession session = Resteasy.getContextData(KeycloakSession.class);\n \n+        SecurityHeadersProvider securityHeadersProvider = session.getProvider(SecurityHeadersProvider.class);\n+        securityHeadersProvider.addHeaders(containerRequestContext, containerResponseContext);\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}, {"oid": "63e4ebfffe3b5fb7c8e66b49721f729e7d15358a", "url": "https://github.com/keycloak/keycloak/commit/63e4ebfffe3b5fb7c8e66b49721f729e7d15358a", "message": "KEYCLOAK-14368 Streams serialization in Jackson", "committedDate": "2020-06-10T15:01:15Z", "type": "forcePushed"}, {"oid": "ccb330128db4b64b5b0bd90ef3ded724629a653f", "url": "https://github.com/keycloak/keycloak/commit/ccb330128db4b64b5b0bd90ef3ded724629a653f", "message": "KEYCLOAK-14368 Streams serialization in Jackson", "committedDate": "2020-06-11T10:01:48Z", "type": "forcePushed"}, {"oid": "f10e05ac9cf2615b38a32363dc8f636065e96b35", "url": "https://github.com/keycloak/keycloak/commit/f10e05ac9cf2615b38a32363dc8f636065e96b35", "message": "KEYCLOAK-14368 Streams serialization in Jackson", "committedDate": "2020-06-15T07:41:49Z", "type": "forcePushed"}, {"oid": "e36d65dc3f1275bc0c5fe694573222737f06e5c3", "url": "https://github.com/keycloak/keycloak/commit/e36d65dc3f1275bc0c5fe694573222737f06e5c3", "message": "KEYCLOAK-14368 Streams serialization in Jackson", "committedDate": "2020-06-19T11:32:51Z", "type": "forcePushed"}, {"oid": "7cd7c969a555bd5d73e7244dc1afd63c2b234588", "url": "https://github.com/keycloak/keycloak/commit/7cd7c969a555bd5d73e7244dc1afd63c2b234588", "message": "KEYCLOAK-14368 Streams serialization in Jackson", "committedDate": "2020-06-24T15:45:28Z", "type": "forcePushed"}, {"oid": "18e5fcb18cae5dcd217eda55ef729d50b985f2a5", "url": "https://github.com/keycloak/keycloak/commit/18e5fcb18cae5dcd217eda55ef729d50b985f2a5", "message": "KEYCLOAK-14368 Streams serialization in Jackson", "committedDate": "2020-06-26T12:04:27Z", "type": "forcePushed"}, {"oid": "041043602558ad0d8f56b94ac79c963d5511931d", "url": "https://github.com/keycloak/keycloak/commit/041043602558ad0d8f56b94ac79c963d5511931d", "message": "KEYCLOAK-14368 Streams serialization in Jackson", "committedDate": "2020-06-30T10:11:47Z", "type": "forcePushed"}, {"oid": "8d8de4b9fbb680f94dca0ed34a479c30b26d0303", "url": "https://github.com/keycloak/keycloak/commit/8d8de4b9fbb680f94dca0ed34a479c30b26d0303", "message": "KEYCLOAK-14368 Streams serialization in Jackson", "committedDate": "2020-07-01T08:05:00Z", "type": "forcePushed"}, {"oid": "10dc9fc1104fa95a1c1f5076fee83c730655fae9", "url": "https://github.com/keycloak/keycloak/commit/10dc9fc1104fa95a1c1f5076fee83c730655fae9", "message": "KEYCLOAK-14368 Streams serialization in Jackson", "committedDate": "2020-07-01T11:14:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwNDYyNw==", "url": "https://github.com/keycloak/keycloak/pull/7136#discussion_r448304627", "body": "Ideally this would be addEndHandler but this method is only available with Vert.x 3.9.1 while current quarkus version is on 3.9.0.\r\n@stianst / @pedroigor Is it possible / how feasible is to update quarkus?", "bodyText": "Ideally this would be addEndHandler but this method is only available with Vert.x 3.9.1 while current quarkus version is on 3.9.0.\n@stianst / @pedroigor Is it possible / how feasible is to update quarkus?", "bodyHTML": "<p dir=\"auto\">Ideally this would be addEndHandler but this method is only available with Vert.x 3.9.1 while current quarkus version is on 3.9.0.<br>\n<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/stianst/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/stianst\">@stianst</a> / <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/pedroigor/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/pedroigor\">@pedroigor</a> Is it possible / how feasible is to update quarkus?</p>", "author": "hmlnarik", "createdAt": "2020-07-01T11:40:35Z", "path": "quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusClientConnectionFilter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.provider.quarkus;\n+\n+import io.quarkus.vertx.web.RouteFilter;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.RoutingContext;\n+import org.keycloak.common.ClientConnection;\n+import org.keycloak.common.util.Resteasy;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.services.filters.AbstractClientConnectionServletFilter;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.PreMatching;\n+import javax.ws.rs.ext.Provider;\n+\n+@PreMatching\n+@Provider\n+public class QuarkusClientConnectionFilter implements javax.ws.rs.container.ContainerRequestFilter {\n+\n+    @Inject\n+    RoutingContext routingContext;\n+\n+    @Override\n+    public void filter(ContainerRequestContext containerRequestContext) {\n+        HttpServerRequest request = routingContext.request();\n+        ClientConnection connection = createConnection(request);\n+\n+        AbstractClientConnectionServletFilter servletFilter = new AbstractClientConnectionServletFilter() {\n+            @Override\n+            protected void nextFilter(KeycloakSession session) {\n+                Resteasy.pushContext(KeycloakSession.class, session);\n+                Resteasy.pushContext(ClientConnection.class, connection);\n+\n+                routingContext.put(\"KeycloakSession\", session);\n+            }\n+        };\n+        routingContext.put(\"AbstractClientConnectionServletFilter\", servletFilter);\n+        servletFilter.filter();\n+    }\n+\n+    @RouteFilter()\n+    public void vertxFilter(RoutingContext rc) {\n+        rc.addHeadersEndHandler((Handler) e -> {", "originalCommit": "10dc9fc1104fa95a1c1f5076fee83c730655fae9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyODM1MQ==", "url": "https://github.com/keycloak/keycloak/pull/7136#discussion_r449328351", "bodyText": "We are upgrading every time there is a new release. I'm still developing using Quarkus upstream due to ongoing work that requires upstream.\nBut in general, version upgrade is not a problem.", "author": "pedroigor", "createdAt": "2020-07-03T01:03:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwNDYyNw=="}], "type": "inlineReview", "revised_code": {"commit": "e1c4669538808b351fce6c63ce4fa539205face1", "changed_code": [{"header": "diff --git a/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusClientConnectionFilter.java b/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusClientConnectionFilter.java\nindex 253754154b..e2d7309e37 100644\n--- a/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusClientConnectionFilter.java\n+++ b/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusClientConnectionFilter.java\n", "chunk": "@@ -17,56 +17,49 @@\n \n package org.keycloak.provider.quarkus;\n \n-import io.quarkus.vertx.web.RouteFilter;\n-import io.vertx.core.Handler;\n-import io.vertx.core.http.HttpServerRequest;\n-import io.vertx.ext.web.RoutingContext;\n+import org.jboss.resteasy.plugins.server.servlet.ResteasyContextParameters;\n+import org.jboss.resteasy.spi.ResteasyDeployment;\n import org.keycloak.common.ClientConnection;\n import org.keycloak.common.util.Resteasy;\n-import org.keycloak.models.KeycloakSession;\n-import org.keycloak.services.filters.AbstractClientConnectionServletFilter;\n+import org.keycloak.services.filters.AbstractClientConnectionFilter;\n \n-import javax.inject.Inject;\n-import javax.ws.rs.container.ContainerRequestContext;\n-import javax.ws.rs.container.PreMatching;\n-import javax.ws.rs.ext.Provider;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.RoutingContext;\n \n-@PreMatching\n-@Provider\n-public class QuarkusClientConnectionFilter implements javax.ws.rs.container.ContainerRequestFilter {\n+/**\n+ * <p>This filter is responsible for managing the request lifecycle as well as setting up the necessary context to process incoming\n+ * requests.\n+ * \n+ * <p>The filter itself runs in a event loop and should delegate to worker threads any blocking code (for now, all requests are handled\n+ * as blocking).\n+ */\n+public class QuarkusClientConnectionFilter extends AbstractClientConnectionFilter implements Handler<RoutingContext> {\n \n-    @Inject\n-    RoutingContext routingContext;\n+    private static final Handler<AsyncResult<Object>> EMPTY_RESULT = result -> {\n+        // we don't really care about the result because any exception thrown should be handled by the parent class\n+    };\n \n     @Override\n-    public void filter(ContainerRequestContext containerRequestContext) {\n-        HttpServerRequest request = routingContext.request();\n-        ClientConnection connection = createConnection(request);\n+    public void handle(RoutingContext context) {\n+        ClientConnection clientConnection = createClientConnection(context.request());\n \n-        AbstractClientConnectionServletFilter servletFilter = new AbstractClientConnectionServletFilter() {\n-            @Override\n-            protected void nextFilter(KeycloakSession session) {\n-                Resteasy.pushContext(KeycloakSession.class, session);\n-                Resteasy.pushContext(ClientConnection.class, connection);\n-\n-                routingContext.put(\"KeycloakSession\", session);\n+        // our code should always be run as blocking until we don't provide a better support for running non-blocking code\n+        // in the event loop\n+        context.vertx().executeBlocking(promise -> filter(clientConnection, (session) -> {\n+            try {\n+                context.next();\n+                promise.complete();\n+            } catch (Exception cause) {\n+                promise.fail(cause);\n+                // re-throw so that the any exception is handled from parent\n+                throw new RuntimeException(cause);\n             }\n-        };\n-        routingContext.put(\"AbstractClientConnectionServletFilter\", servletFilter);\n-        servletFilter.filter();\n-    }\n-\n-    @RouteFilter()\n-    public void vertxFilter(RoutingContext rc) {\n-        rc.addHeadersEndHandler((Handler) e -> {\n-            AbstractClientConnectionServletFilter servletFilter = rc.get(\"AbstractClientConnectionServletFilter\");\n-            servletFilter.close(rc.get(\"KeycloakSession\"));\n-        });\n-\n-        rc.next();\n+        }), EMPTY_RESULT);\n     }\n \n-    private ClientConnection createConnection(HttpServerRequest request) {\n+    private ClientConnection createClientConnection(HttpServerRequest request) {\n         return new ClientConnection() {\n             @Override\n             public String getRemoteAddr() {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0NTUwMg==", "url": "https://github.com/keycloak/keycloak/pull/7136#discussion_r449345502", "body": "I'm doing similar changes in another PR. I'm wondering if we should get first my changes even though we need some more discussion around configuration.\r\n\r\nIt should not be a problem as most of the changes are necessary.", "bodyText": "I'm doing similar changes in another PR. I'm wondering if we should get first my changes even though we need some more discussion around configuration.\nIt should not be a problem as most of the changes are necessary.", "bodyHTML": "<p dir=\"auto\">I'm doing similar changes in another PR. I'm wondering if we should get first my changes even though we need some more discussion around configuration.</p>\n<p dir=\"auto\">It should not be a problem as most of the changes are necessary.</p>", "author": "pedroigor", "createdAt": "2020-07-03T02:25:50Z", "path": "quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/KeycloakConfigSourceProvider.java", "diffHunk": "@@ -58,23 +55,16 @@\n         }\n \n         if (filePath != null) {\n-            sources.add(wrap(new KeycloakPropertiesConfigSource.InFileSystem(filePath)));\n+            sources.add(new KeycloakPropertiesConfigSource.InFileSystem(filePath));", "originalCommit": "f5b2fe44387681117990cf50aa3f2317f28bfe10", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0NjUwOA==", "url": "https://github.com/keycloak/keycloak/pull/7136#discussion_r449346508", "body": "I remember using filter differently where we basically dispatch the request from the eventloop so that we can control all the request lifecycle.\r\n\r\nI think it should work better as well as serve as an important point for any other change we might need that affects the thread execution.", "bodyText": "I remember using filter differently where we basically dispatch the request from the eventloop so that we can control all the request lifecycle.\nI think it should work better as well as serve as an important point for any other change we might need that affects the thread execution.", "bodyHTML": "<p dir=\"auto\">I remember using filter differently where we basically dispatch the request from the eventloop so that we can control all the request lifecycle.</p>\n<p dir=\"auto\">I think it should work better as well as serve as an important point for any other change we might need that affects the thread execution.</p>", "author": "pedroigor", "createdAt": "2020-07-03T02:30:49Z", "path": "quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusClientConnectionFilter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.provider.quarkus;\n+\n+import io.quarkus.vertx.web.RouteFilter;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.RoutingContext;\n+import org.keycloak.common.ClientConnection;\n+import org.keycloak.common.util.Resteasy;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.services.filters.AbstractClientConnectionServletFilter;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.PreMatching;\n+import javax.ws.rs.ext.Provider;\n+\n+@PreMatching\n+@Provider\n+public class QuarkusClientConnectionFilter implements javax.ws.rs.container.ContainerRequestFilter {\n+\n+    @Inject\n+    RoutingContext routingContext;\n+\n+    @Override\n+    public void filter(ContainerRequestContext containerRequestContext) {\n+        HttpServerRequest request = routingContext.request();\n+        ClientConnection connection = createConnection(request);\n+\n+        AbstractClientConnectionServletFilter servletFilter = new AbstractClientConnectionServletFilter() {\n+            @Override\n+            protected void nextFilter(KeycloakSession session) {\n+                Resteasy.pushContext(KeycloakSession.class, session);\n+                Resteasy.pushContext(ClientConnection.class, connection);\n+\n+                routingContext.put(\"KeycloakSession\", session);\n+            }\n+        };\n+        routingContext.put(\"AbstractClientConnectionServletFilter\", servletFilter);\n+        servletFilter.filter();\n+    }\n+\n+    @RouteFilter()\n+    public void vertxFilter(RoutingContext rc) {", "originalCommit": "f5b2fe44387681117990cf50aa3f2317f28bfe10", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1c4669538808b351fce6c63ce4fa539205face1", "changed_code": [{"header": "diff --git a/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusClientConnectionFilter.java b/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusClientConnectionFilter.java\nindex f905711718..e2d7309e37 100644\n--- a/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusClientConnectionFilter.java\n+++ b/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusClientConnectionFilter.java\n", "chunk": "@@ -17,56 +17,49 @@\n \n package org.keycloak.provider.quarkus;\n \n-import io.quarkus.vertx.web.RouteFilter;\n-import io.vertx.core.Handler;\n-import io.vertx.core.http.HttpServerRequest;\n-import io.vertx.ext.web.RoutingContext;\n+import org.jboss.resteasy.plugins.server.servlet.ResteasyContextParameters;\n+import org.jboss.resteasy.spi.ResteasyDeployment;\n import org.keycloak.common.ClientConnection;\n import org.keycloak.common.util.Resteasy;\n-import org.keycloak.models.KeycloakSession;\n-import org.keycloak.services.filters.AbstractClientConnectionServletFilter;\n+import org.keycloak.services.filters.AbstractClientConnectionFilter;\n \n-import javax.inject.Inject;\n-import javax.ws.rs.container.ContainerRequestContext;\n-import javax.ws.rs.container.PreMatching;\n-import javax.ws.rs.ext.Provider;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.RoutingContext;\n \n-@PreMatching\n-@Provider\n-public class QuarkusClientConnectionFilter implements javax.ws.rs.container.ContainerRequestFilter {\n+/**\n+ * <p>This filter is responsible for managing the request lifecycle as well as setting up the necessary context to process incoming\n+ * requests.\n+ * \n+ * <p>The filter itself runs in a event loop and should delegate to worker threads any blocking code (for now, all requests are handled\n+ * as blocking).\n+ */\n+public class QuarkusClientConnectionFilter extends AbstractClientConnectionFilter implements Handler<RoutingContext> {\n \n-    @Inject\n-    RoutingContext routingContext;\n+    private static final Handler<AsyncResult<Object>> EMPTY_RESULT = result -> {\n+        // we don't really care about the result because any exception thrown should be handled by the parent class\n+    };\n \n     @Override\n-    public void filter(ContainerRequestContext containerRequestContext) {\n-        HttpServerRequest request = routingContext.request();\n-        ClientConnection connection = createConnection(request);\n+    public void handle(RoutingContext context) {\n+        ClientConnection clientConnection = createClientConnection(context.request());\n \n-        AbstractClientConnectionServletFilter servletFilter = new AbstractClientConnectionServletFilter() {\n-            @Override\n-            protected void nextFilter(KeycloakSession session) {\n-                Resteasy.pushContext(KeycloakSession.class, session);\n-                Resteasy.pushContext(ClientConnection.class, connection);\n-\n-                routingContext.put(\"KeycloakSession\", session);\n+        // our code should always be run as blocking until we don't provide a better support for running non-blocking code\n+        // in the event loop\n+        context.vertx().executeBlocking(promise -> filter(clientConnection, (session) -> {\n+            try {\n+                context.next();\n+                promise.complete();\n+            } catch (Exception cause) {\n+                promise.fail(cause);\n+                // re-throw so that the any exception is handled from parent\n+                throw new RuntimeException(cause);\n             }\n-        };\n-        routingContext.put(\"AbstractClientConnectionServletFilter\", servletFilter);\n-        servletFilter.filter();\n-    }\n-\n-    @RouteFilter()\n-    public void vertxFilter(RoutingContext rc) {\n-        rc.addEndHandler((Handler) e -> {\n-            AbstractClientConnectionServletFilter servletFilter = rc.get(\"AbstractClientConnectionServletFilter\");\n-            servletFilter.close(rc.get(\"KeycloakSession\"));\n-        });\n-\n-        rc.next();\n+        }), EMPTY_RESULT);\n     }\n \n-    private ClientConnection createConnection(HttpServerRequest request) {\n+    private ClientConnection createClientConnection(HttpServerRequest request) {\n         return new ClientConnection() {\n             @Override\n             public String getRemoteAddr() {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0NjgxMQ==", "url": "https://github.com/keycloak/keycloak/pull/7136#discussion_r449346811", "body": "If you use private you are forcing reflection. That is why the method is marked with default/package.", "bodyText": "If you use private you are forcing reflection. That is why the method is marked with default/package.", "bodyHTML": "<p dir=\"auto\">If you use private you are forcing reflection. That is why the method is marked with default/package.</p>", "author": "pedroigor", "createdAt": "2020-07-03T02:32:15Z", "path": "quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusLifecycleObserver.java", "diffHunk": "@@ -38,10 +37,7 @@\n     private static final String KEYCLOAK_ADMIN_ENV_VAR = \"KEYCLOAK_ADMIN\";\n     private static final String KEYCLOAK_ADMIN_PASSWORD_ENV_VAR = \"KEYCLOAK_ADMIN_PASSWORD\";\n \n-    @Inject\n-    KeycloakApplication application;\n-\n-    void onStartupEvent(@Observes StartupEvent event) {\n+    private void onStartupEvent(@Observes StartupEvent event) {", "originalCommit": "f5b2fe44387681117990cf50aa3f2317f28bfe10", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1c4669538808b351fce6c63ce4fa539205face1", "changed_code": [{"header": "diff --git a/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusLifecycleObserver.java b/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusLifecycleObserver.java\nindex 4253cd03b7..d426c4d87c 100644\n--- a/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusLifecycleObserver.java\n+++ b/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusLifecycleObserver.java\n", "chunk": "@@ -37,15 +40,13 @@ public class QuarkusLifecycleObserver {\n     private static final String KEYCLOAK_ADMIN_ENV_VAR = \"KEYCLOAK_ADMIN\";\n     private static final String KEYCLOAK_ADMIN_PASSWORD_ENV_VAR = \"KEYCLOAK_ADMIN_PASSWORD\";\n \n-    private void onStartupEvent(@Observes StartupEvent event) {\n-\n+    void onStartupEvent(@Observes StartupEvent event) {\n         Runnable startupHook = ((QuarkusPlatform) Platform.getPlatform()).startupHook;\n \n         if (startupHook != null) {\n             startupHook.run();\n             createAdminUser();\n         }\n-\n     }\n \n     void onShutdownEvent(@Observes ShutdownEvent event) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxMjQwNg==", "url": "https://github.com/keycloak/keycloak/pull/7136#discussion_r449612406", "body": "The fact we are creating instances of `AbstractClientConnectionServletFilter` on every request is not ideal. As well as duplicating code when pushing context data.\r\n\r\nWe could potentially override methods and have the main logic from the abstract class.", "bodyText": "The fact we are creating instances of AbstractClientConnectionServletFilter on every request is not ideal. As well as duplicating code when pushing context data.\nWe could potentially override methods and have the main logic from the abstract class.", "bodyHTML": "<p dir=\"auto\">The fact we are creating instances of <code>AbstractClientConnectionServletFilter</code> on every request is not ideal. As well as duplicating code when pushing context data.</p>\n<p dir=\"auto\">We could potentially override methods and have the main logic from the abstract class.</p>", "author": "pedroigor", "createdAt": "2020-07-03T14:32:43Z", "path": "quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusClientConnectionFilter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.provider.quarkus;\n+\n+import io.quarkus.vertx.web.RouteFilter;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.RoutingContext;\n+import org.keycloak.common.ClientConnection;\n+import org.keycloak.common.util.Resteasy;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.services.filters.AbstractClientConnectionServletFilter;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.PreMatching;\n+import javax.ws.rs.ext.Provider;\n+\n+@PreMatching\n+@Provider\n+public class QuarkusClientConnectionFilter implements javax.ws.rs.container.ContainerRequestFilter {\n+\n+    @Inject\n+    RoutingContext routingContext;\n+\n+    @Override\n+    public void filter(ContainerRequestContext containerRequestContext) {\n+        HttpServerRequest request = routingContext.request();\n+        ClientConnection connection = createConnection(request);\n+\n+        AbstractClientConnectionServletFilter servletFilter = new AbstractClientConnectionServletFilter() {", "originalCommit": "f5b2fe44387681117990cf50aa3f2317f28bfe10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0OTcxMg==", "url": "https://github.com/keycloak/keycloak/pull/7136#discussion_r449649712", "bodyText": "That would be ideal if the same approach could be used in Wildfly, however it seems that this is not possible, servlet filter approach is not compatible with the vert.x filters, and it does not seem possible to use a common approach. So instantiating a small instance seemed an acceptable alternative. Yet if you find a better alternative that would work for both, that would be indeed better.", "author": "hmlnarik", "createdAt": "2020-07-03T16:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxMjQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "e1c4669538808b351fce6c63ce4fa539205face1", "changed_code": [{"header": "diff --git a/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusClientConnectionFilter.java b/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusClientConnectionFilter.java\nindex f905711718..e2d7309e37 100644\n--- a/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusClientConnectionFilter.java\n+++ b/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusClientConnectionFilter.java\n", "chunk": "@@ -17,56 +17,49 @@\n \n package org.keycloak.provider.quarkus;\n \n-import io.quarkus.vertx.web.RouteFilter;\n-import io.vertx.core.Handler;\n-import io.vertx.core.http.HttpServerRequest;\n-import io.vertx.ext.web.RoutingContext;\n+import org.jboss.resteasy.plugins.server.servlet.ResteasyContextParameters;\n+import org.jboss.resteasy.spi.ResteasyDeployment;\n import org.keycloak.common.ClientConnection;\n import org.keycloak.common.util.Resteasy;\n-import org.keycloak.models.KeycloakSession;\n-import org.keycloak.services.filters.AbstractClientConnectionServletFilter;\n+import org.keycloak.services.filters.AbstractClientConnectionFilter;\n \n-import javax.inject.Inject;\n-import javax.ws.rs.container.ContainerRequestContext;\n-import javax.ws.rs.container.PreMatching;\n-import javax.ws.rs.ext.Provider;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.RoutingContext;\n \n-@PreMatching\n-@Provider\n-public class QuarkusClientConnectionFilter implements javax.ws.rs.container.ContainerRequestFilter {\n+/**\n+ * <p>This filter is responsible for managing the request lifecycle as well as setting up the necessary context to process incoming\n+ * requests.\n+ * \n+ * <p>The filter itself runs in a event loop and should delegate to worker threads any blocking code (for now, all requests are handled\n+ * as blocking).\n+ */\n+public class QuarkusClientConnectionFilter extends AbstractClientConnectionFilter implements Handler<RoutingContext> {\n \n-    @Inject\n-    RoutingContext routingContext;\n+    private static final Handler<AsyncResult<Object>> EMPTY_RESULT = result -> {\n+        // we don't really care about the result because any exception thrown should be handled by the parent class\n+    };\n \n     @Override\n-    public void filter(ContainerRequestContext containerRequestContext) {\n-        HttpServerRequest request = routingContext.request();\n-        ClientConnection connection = createConnection(request);\n+    public void handle(RoutingContext context) {\n+        ClientConnection clientConnection = createClientConnection(context.request());\n \n-        AbstractClientConnectionServletFilter servletFilter = new AbstractClientConnectionServletFilter() {\n-            @Override\n-            protected void nextFilter(KeycloakSession session) {\n-                Resteasy.pushContext(KeycloakSession.class, session);\n-                Resteasy.pushContext(ClientConnection.class, connection);\n-\n-                routingContext.put(\"KeycloakSession\", session);\n+        // our code should always be run as blocking until we don't provide a better support for running non-blocking code\n+        // in the event loop\n+        context.vertx().executeBlocking(promise -> filter(clientConnection, (session) -> {\n+            try {\n+                context.next();\n+                promise.complete();\n+            } catch (Exception cause) {\n+                promise.fail(cause);\n+                // re-throw so that the any exception is handled from parent\n+                throw new RuntimeException(cause);\n             }\n-        };\n-        routingContext.put(\"AbstractClientConnectionServletFilter\", servletFilter);\n-        servletFilter.filter();\n-    }\n-\n-    @RouteFilter()\n-    public void vertxFilter(RoutingContext rc) {\n-        rc.addEndHandler((Handler) e -> {\n-            AbstractClientConnectionServletFilter servletFilter = rc.get(\"AbstractClientConnectionServletFilter\");\n-            servletFilter.close(rc.get(\"KeycloakSession\"));\n-        });\n-\n-        rc.next();\n+        }), EMPTY_RESULT);\n     }\n \n-    private ClientConnection createConnection(HttpServerRequest request) {\n+    private ClientConnection createClientConnection(HttpServerRequest request) {\n         return new ClientConnection() {\n             @Override\n             public String getRemoteAddr() {\n", "next_change": null}]}}, {"oid": "e1c4669538808b351fce6c63ce4fa539205face1", "url": "https://github.com/keycloak/keycloak/commit/e1c4669538808b351fce6c63ce4fa539205face1", "message": "[KEYCLOAK-14147] - Request filter refactoring\n\nCo-authored-by: Stian Thorgersen <stian@redhat.com>\nCo-authored-by: Martin Kanis <mkanis@redhat.com>", "committedDate": "2020-07-03T16:56:43Z", "type": "commit"}, {"oid": "e1c4669538808b351fce6c63ce4fa539205face1", "url": "https://github.com/keycloak/keycloak/commit/e1c4669538808b351fce6c63ce4fa539205face1", "message": "[KEYCLOAK-14147] - Request filter refactoring\n\nCo-authored-by: Stian Thorgersen <stian@redhat.com>\nCo-authored-by: Martin Kanis <mkanis@redhat.com>", "committedDate": "2020-07-03T16:56:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkwMTU2OA==", "url": "https://github.com/keycloak/keycloak/pull/7136#discussion_r450901568", "body": "Rename to something like AbstractRequestFilter, including renaming subclasses.", "bodyText": "Rename to something like AbstractRequestFilter, including renaming subclasses.", "bodyHTML": "<p dir=\"auto\">Rename to something like AbstractRequestFilter, including renaming subclasses.</p>", "author": "stianst", "createdAt": "2020-07-07T14:20:15Z", "path": "services/src/main/java/org/keycloak/services/filters/AbstractClientConnectionFilter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.keycloak.services.filters;\n+\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.keycloak.common.ClientConnection;\n+import org.keycloak.common.util.Resteasy;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.KeycloakTransactionManager;\n+import org.keycloak.services.resources.KeycloakApplication;\n+\n+\n+public abstract class AbstractClientConnectionFilter {", "originalCommit": "e1c4669538808b351fce6c63ce4fa539205face1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}