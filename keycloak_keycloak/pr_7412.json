{"pr_number": 7412, "pr_title": "KEYCLOAK-15429 Add CORS origin on permission request with invalid access token", "pr_author": "FrodeI", "pr_createdAt": "2020-09-11T05:48:44Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7412", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjExNzIwOA==", "url": "https://github.com/keycloak/keycloak/pull/7412#discussion_r492117208", "body": "You don't need to fake-verify the token just to parse it. You can do something like:\r\n```suggestion\r\n                    AccessToken invalidToken = new JWSInput(accessTokenString).readJsonContent(AccessToken.class);\r\n```\r\nMaybe there's even more efficient solution, I'm not sure.", "bodyText": "You don't need to fake-verify the token just to parse it. You can do something like:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                TokenVerifier<AccessToken> verifier = TokenVerifier.create(accessTokenString, AccessToken.class)\n          \n          \n            \n                                        .withDefaultChecks()\n          \n          \n            \n                                        .realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(), realm.getName()))\n          \n          \n            \n                                        .checkActive(false);\n          \n          \n            \n                                String kid = verifier.getHeader().getKeyId();\n          \n          \n            \n                                String algorithm = verifier.getHeader().getAlgorithm().name();\n          \n          \n            \n                                SignatureVerifierContext signatureVerifier = session.getProvider(SignatureProvider.class, algorithm).verifier(kid);\n          \n          \n            \n                                verifier.verifierContext(signatureVerifier);\n          \n          \n            \n                                AccessToken invalidToken = verifier.verify().getToken();\n          \n          \n            \n                                AccessToken invalidToken = new JWSInput(accessTokenString).readJsonContent(AccessToken.class);\n          \n      \n    \n    \n  \n\nMaybe there's even more efficient solution, I'm not sure.", "bodyHTML": "<p dir=\"auto\">You don't need to fake-verify the token just to parse it. You can do something like:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">TokenVerifier&lt;<span class=\"pl-smi\">AccessToken</span>&gt;</span> verifier <span class=\"pl-k\">=</span> <span class=\"pl-smi\">TokenVerifier</span><span class=\"pl-k\">.</span>create(accessTokenString, <span class=\"pl-smi\">AccessToken</span><span class=\"pl-k\">.</span>class)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            .withDefaultChecks()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            .realmUrl(<span class=\"pl-smi\">Urls</span><span class=\"pl-k\">.</span>realmIssuer(session<span class=\"pl-k\">.</span>getContext()<span class=\"pl-k\">.</span>getUri()<span class=\"pl-k\">.</span>getBaseUri(), realm<span class=\"pl-k\">.</span>getName()))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            .checkActive(<span class=\"pl-c1\">false</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-smi\">String</span> kid <span class=\"pl-k\">=</span> verifier<span class=\"pl-k\">.</span>getHeader()<span class=\"pl-k\">.</span>getKeyId();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-smi\">String</span> algorithm <span class=\"pl-k\">=</span> verifier<span class=\"pl-k\">.</span>getHeader()<span class=\"pl-k\">.</span>getAlgorithm()<span class=\"pl-k\">.</span>name();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-smi\">SignatureVerifierContext</span> signatureVerifier <span class=\"pl-k\">=</span> session<span class=\"pl-k\">.</span>getProvider(<span class=\"pl-smi\">SignatureProvider</span><span class=\"pl-k\">.</span>class, algorithm)<span class=\"pl-k\">.</span>verifier(kid);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    verifier<span class=\"pl-k\">.</span>verifierContext(signatureVerifier);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-smi\">AccessToken</span> invalidToken <span class=\"pl-k\">=</span> verifier<span class=\"pl-k\">.</span>verify()<span class=\"pl-k\">.</span>getToken();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-smi\">AccessToken</span> invalidToken <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JWSInput</span>(accessTokenString)<span class=\"pl-k\">.</span>readJsonContent(<span class=\"pl-smi\">AccessToken</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Maybe there's even more efficient solution, I'm not sure.</p>", "author": "vmuzikar", "createdAt": "2020-09-21T14:58:09Z", "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "diffHunk": "@@ -1210,6 +1214,22 @@ public Response permissionGrant() {\n             AccessToken accessToken = Tokens.getAccessToken(session);\n \n             if (accessToken == null) {\n+                try {\n+                    // In case the access token is invalid because it's expired or the user is disabled, identify the client\n+                    // from the access token anyway in order to set correct CORS headers.\n+                    TokenVerifier<AccessToken> verifier = TokenVerifier.create(accessTokenString, AccessToken.class)\n+                            .withDefaultChecks()\n+                            .realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(), realm.getName()))\n+                            .checkActive(false);\n+                    String kid = verifier.getHeader().getKeyId();\n+                    String algorithm = verifier.getHeader().getAlgorithm().name();\n+                    SignatureVerifierContext signatureVerifier = session.getProvider(SignatureProvider.class, algorithm).verifier(kid);\n+                    verifier.verifierContext(signatureVerifier);\n+                    AccessToken invalidToken = verifier.verify().getToken();", "originalCommit": "09ad2b240e3e79a389f3c8663307f8130d23692e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ4NjgzOQ==", "url": "https://github.com/keycloak/keycloak/pull/7412#discussion_r492486839", "bodyText": "Is it just as correct then to allow any origin for the error response, and ignore the client setting completely? I see that has been done for some of the other checks in TokenEndpoint: (checkSsl, checkRealm)\n                    cors.allowAllOrigins();", "author": "FrodeI", "createdAt": "2020-09-22T05:49:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjExNzIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ5ODIyMg==", "url": "https://github.com/keycloak/keycloak/pull/7412#discussion_r492498222", "bodyText": "I haven't checked what other verifications do, but I see no real reason why we should allow all origins here. Just parse the token, get the client and you're good to go. :)", "author": "vmuzikar", "createdAt": "2020-09-22T06:27:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjExNzIwOA=="}], "type": "inlineReview"}, {"oid": "c878b78ffafda3c4e952f676259c53b5e7f4bc24", "url": "https://github.com/keycloak/keycloak/commit/c878b78ffafda3c4e952f676259c53b5e7f4bc24", "message": "KEYCLOAK-15429 Add CORS origin on permission request with invalid access token", "committedDate": "2020-09-22T06:42:04Z", "type": "commit"}]}