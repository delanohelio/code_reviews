{"pr_number": 7346, "pr_title": "KEYCLOAK-14973 Add GroupStorageManager", "pr_author": "mhajas", "pr_createdAt": "2020-08-17T08:56:35Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7346", "timeline": [{"oid": "859e34ebe0ccdd2d1809d74d48394480b1e51af2", "url": "https://github.com/keycloak/keycloak/commit/859e34ebe0ccdd2d1809d74d48394480b1e51af2", "message": "KEYCLOAK-14973 Remove CreatedType abstraction, create method for time bounded execution on providers", "committedDate": "2020-08-18T14:38:02Z", "type": "forcePushed"}, {"oid": "eaa36b990e0c1d19549b29af43b74146461a399d", "url": "https://github.com/keycloak/keycloak/commit/eaa36b990e0c1d19549b29af43b74146461a399d", "message": "KEYCLOAK-14973 Remove CreatedType abstraction, create method for time bounded execution on providers", "committedDate": "2020-08-19T08:31:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcxMzA1NA==", "url": "https://github.com/keycloak/keycloak/pull/7346#discussion_r474713054", "body": "I believe this can be omitted. Failing the check would cause and exception raised here in runtime, or some sort of exception (likely related to class-casting) later. From my POV, a proper check should be rather on the factory level.", "bodyText": "I believe this can be omitted. Failing the check would cause and exception raised here in runtime, or some sort of exception (likely related to class-casting) later. From my POV, a proper check should be rather on the factory level.", "bodyHTML": "<p dir=\"auto\">I believe this can be omitted. Failing the check would cause and exception raised here in runtime, or some sort of exception (likely related to class-casting) later. From my POV, a proper check should be rather on the factory level.</p>", "author": "hmlnarik", "createdAt": "2020-08-21T13:54:37Z", "path": "services/src/main/java/org/keycloak/storage/AbstractStorageManager.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.storage;\n+\n+import org.keycloak.Config;\n+import org.keycloak.component.ComponentFactory;\n+import org.keycloak.component.ComponentModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.provider.Provider;\n+import org.keycloak.utils.ServicesUtils;\n+\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+/**\n+ *\n+ * @param <ProviderType> This type will be used for looking for factories that produce instances of desired providers\n+ * @param <StorageProviderModelType> Type of model used for creating provider, it needs to extend \n+ *                                  CacheableStorageProviderModel as it has {@code isEnabled()} method and also extend\n+ *                                  PrioritizedComponentModel which is required for sorting providers based on its\n+ *                                  priorities\n+ */\n+public abstract class AbstractStorageManager<ProviderType extends Provider,\n+        StorageProviderModelType extends CacheableStorageProviderModel> {\n+\n+    /**\n+     * Timeouts are used as time boundary for obtaining models from an external storage. Default value is set\n+     * to 3000 milliseconds and it's configurable.\n+     */\n+    private static final Long STORAGE_PROVIDER_DEFAULT_TIMEOUT = 3000L;\n+    protected final KeycloakSession session;\n+    private Long storageProviderTimeout;\n+\n+    public AbstractStorageManager(KeycloakSession session) {\n+        this.session = session;\n+    }\n+\n+    /**\n+     * Turns ComponentModel class, to desired StorageProviderModelType.\n+     *\n+     * @param componentModel ComponentModel obtained from database/storage\n+     * @return desired StorageProviderModelType\n+     */\n+    protected abstract StorageProviderModelType toStorageProviderModelType(ComponentModel componentModel);\n+\n+    /**\n+     *\n+     * @return Class of ProviderType, used for obtaining factories, that produce desired CreatedProviderType,\n+     * and ComponentModels\n+     */\n+    protected abstract Class<ProviderType> getProviderTypeClass();\n+    protected abstract String getConfigScope();\n+\n+    protected Long getStorageProviderTimeout() {\n+        if (storageProviderTimeout == null) {\n+            storageProviderTimeout = Config.scope(getConfigScope()).getLong(\"storageProviderTimeout\", STORAGE_PROVIDER_DEFAULT_TIMEOUT);\n+        }\n+        return storageProviderTimeout;\n+    }\n+\n+    /**\n+     * Returns a factory with the providerId, which produce instances of type CreatedProviderType\n+     * @param providerId id of factory that produce desired instances\n+     * @return A factory that implements {@code ComponentFactory<CreatedProviderType, ProviderType>}\n+     */\n+    protected <T extends ProviderType> ComponentFactory<T, ProviderType> getStorageProviderFactory(String providerId) {\n+        return (ComponentFactory<T, ProviderType>) session.getKeycloakSessionFactory()\n+                .getProviderFactory(getProviderTypeClass(), providerId);\n+    }\n+\n+    /**\n+     *\n+     * @param realm realm\n+     * @return enabled storage providers for realm and @{code getProviderTypeClass()}\n+     */\n+    protected Stream<ProviderType> getEnabledStorageProviders(RealmModel realm) {\n+        return getStorageProviderModels(realm, getProviderTypeClass())\n+                .map(this::toStorageProviderModelType)\n+                .filter(StorageProviderModelType::isEnabled)\n+                .sorted(StorageProviderModelType.comparator)\n+                .map(this::getStorageProviderInstance);\n+    }\n+\n+    /**\n+     * Gets all enabled StorageProviders, applies applyFunction on each of them and then join the results together.\n+     *\n+     * !! Each StorageProvider has a limited time to respond, if it fails to do it, empty stream is returned !!\n+     *\n+     * @param realm realm\n+     * @param applyFunction function that is applied on StorageProviders\n+     * @param <R> result of applyFunction\n+     * @return a stream with all results from all StorageProviders\n+     */\n+    protected <R> Stream<R> applyOnEnabledStorageProvidersWithTimeout(RealmModel realm, Function<ProviderType, ? extends Stream<R>> applyFunction) {\n+        return getEnabledStorageProviders(realm).flatMap(ServicesUtils.timeBound(session,\n+                    getStorageProviderTimeout(), applyFunction));\n+    }\n+\n+    /**\n+     * Returns an instance of provider with the providerId within the realm.\n+     * @param realm realm\n+     * @param providerId id of ComponentModel within database/storage\n+     * @return an instance of type CreatedProviderType\n+     */\n+    protected ProviderType getStorageProviderInstance(RealmModel realm, String providerId) {\n+        ComponentModel componentModel = realm.getComponent(providerId);\n+        if (componentModel == null) {\n+            return null;\n+        }\n+        \n+        return getStorageProviderInstance(toStorageProviderModelType(componentModel));\n+    }\n+\n+    /**\n+     * Returns an instance of provider for the model\n+     * @param model StorageProviderModel obtained from database/storage\n+     * @return an instance of type CreatedProviderType\n+     */\n+    protected ProviderType getStorageProviderInstance(StorageProviderModelType model) {\n+        // TODO: Add type checking.", "originalCommit": "eaa36b990e0c1d19549b29af43b74146461a399d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQyMTU5Nw==", "url": "https://github.com/keycloak/keycloak/pull/7346#discussion_r475421597", "bodyText": "I agree I will remove the TODO comment.", "author": "mhajas", "createdAt": "2020-08-24T08:22:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcxMzA1NA=="}], "type": "inlineReview"}, {"oid": "61ced7f4d6d177654d69259308297d2b2e43cfb4", "url": "https://github.com/keycloak/keycloak/commit/61ced7f4d6d177654d69259308297d2b2e43cfb4", "message": "KEYCLOAK-14973 Create GroupStorageManager", "committedDate": "2020-08-24T08:23:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYwMjExMA==", "url": "https://github.com/keycloak/keycloak/pull/7346#discussion_r475602110", "body": "Could be \r\n```suggestion\r\n        super(session, GroupStorageProvider.class, GroupStorageProviderModel::new);\r\n```", "bodyText": "Could be\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    super(session);\n          \n          \n            \n                    super(session, GroupStorageProvider.class, GroupStorageProviderModel::new);", "bodyHTML": "<p dir=\"auto\">Could be</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c1\">super</span>(session);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c1\">super</span>(session<span class=\"x x-first\">, </span><span class=\"pl-smi x\">GroupStorageProvider</span><span class=\"pl-k x\">.</span><span class=\"x\">class, </span><span class=\"pl-smi x\">GroupStorageProviderModel</span><span class=\"pl-k x\">::</span><span class=\"pl-k x x-last\">new</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "hmlnarik", "createdAt": "2020-08-24T13:33:06Z", "path": "services/src/main/java/org/keycloak/storage/GroupStorageManager.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.storage;\n+\n+import org.keycloak.component.ComponentModel;\n+import org.keycloak.models.GroupModel;\n+import org.keycloak.models.GroupProvider;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.RoleModel;\n+import org.keycloak.storage.group.GroupLookupProvider;\n+import org.keycloak.storage.group.GroupStorageProvider;\n+import org.keycloak.storage.group.GroupStorageProviderModel;\n+import org.keycloak.utils.ServicesUtils;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class GroupStorageManager extends AbstractStorageManager<GroupStorageProvider, GroupStorageProviderModel> implements GroupProvider {\n+\n+    public GroupStorageManager(KeycloakSession session) {\n+        super(session);", "originalCommit": "61ced7f4d6d177654d69259308297d2b2e43cfb4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYwMzE3Ng==", "url": "https://github.com/keycloak/keycloak/pull/7346#discussion_r475603176", "body": "Could be \r\n```suggestion\r\n    public AbstractStorageManager(KeycloakSession session, Class<ProviderType> providerTypeClass, Function<ComponentModel, StorageProviderModelType> componentToStorageProvider) {\r\n```", "bodyText": "Could be\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public AbstractStorageManager(KeycloakSession session) {\n          \n          \n            \n                public AbstractStorageManager(KeycloakSession session, Class<ProviderType> providerTypeClass, Function<ComponentModel, StorageProviderModelType> componentToStorageProvider) {", "bodyHTML": "<p dir=\"auto\">Could be</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> AbstractStorageManager(<span class=\"pl-smi\">KeycloakSession</span> session) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> AbstractStorageManager(<span class=\"pl-smi\">KeycloakSession</span> session<span class=\"x x-first\">, </span><span class=\"pl-k\"><span class=\"x\">Class&lt;</span><span class=\"pl-smi x\">ProviderType</span><span class=\"x\">&gt;</span></span><span class=\"x\"> providerTypeClass, </span><span class=\"pl-k\"><span class=\"x\">Function&lt;</span><span class=\"pl-smi x\">ComponentModel</span><span class=\"x\">, </span><span class=\"pl-smi x\">StorageProviderModelType</span><span class=\"x\">&gt;</span></span><span class=\"x x-last\"> componentToStorageProvider</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "hmlnarik", "createdAt": "2020-08-24T13:34:46Z", "path": "services/src/main/java/org/keycloak/storage/AbstractStorageManager.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.storage;\n+\n+import org.keycloak.Config;\n+import org.keycloak.component.ComponentFactory;\n+import org.keycloak.component.ComponentModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.provider.Provider;\n+import org.keycloak.utils.ServicesUtils;\n+\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+/**\n+ *\n+ * @param <ProviderType> This type will be used for looking for factories that produce instances of desired providers\n+ * @param <StorageProviderModelType> Type of model used for creating provider, it needs to extend \n+ *                                  CacheableStorageProviderModel as it has {@code isEnabled()} method and also extend\n+ *                                  PrioritizedComponentModel which is required for sorting providers based on its\n+ *                                  priorities\n+ */\n+public abstract class AbstractStorageManager<ProviderType extends Provider,\n+        StorageProviderModelType extends CacheableStorageProviderModel> {\n+\n+    /**\n+     * Timeouts are used as time boundary for obtaining models from an external storage. Default value is set\n+     * to 3000 milliseconds and it's configurable.\n+     */\n+    private static final Long STORAGE_PROVIDER_DEFAULT_TIMEOUT = 3000L;\n+    protected final KeycloakSession session;\n+    private Long storageProviderTimeout;\n+\n+    public AbstractStorageManager(KeycloakSession session) {", "originalCommit": "61ced7f4d6d177654d69259308297d2b2e43cfb4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1c5326966354082382500e4d20cd462448cc3273", "url": "https://github.com/keycloak/keycloak/commit/1c5326966354082382500e4d20cd462448cc3273", "message": "KEYCLOAK-14973 Create GroupStorageManager", "committedDate": "2020-08-25T10:13:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2NTQ0OQ==", "url": "https://github.com/keycloak/keycloak/pull/7346#discussion_r477465449", "body": "Is this still valid?", "bodyText": "Is this still valid?", "bodyHTML": "<p dir=\"auto\">Is this still valid?</p>", "author": "vramik", "createdAt": "2020-08-26T17:23:38Z", "path": "services/src/main/java/org/keycloak/storage/GroupStorageManager.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.storage;\n+\n+import org.keycloak.component.ComponentModel;\n+import org.keycloak.models.GroupModel;\n+import org.keycloak.models.GroupProvider;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.RoleModel;\n+import org.keycloak.storage.group.GroupLookupProvider;\n+import org.keycloak.storage.group.GroupStorageProvider;\n+import org.keycloak.storage.group.GroupStorageProviderModel;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class GroupStorageManager extends AbstractStorageManager<GroupStorageProvider, GroupStorageProviderModel> implements GroupProvider {\n+\n+    public GroupStorageManager(KeycloakSession session) {\n+        super(session, GroupStorageProvider.class, GroupStorageProviderModel::new, \"group\");\n+    }\n+\n+    /* GROUP PROVIDER LOOKUP METHODS - implemented by group storage providers */\n+\n+    @Override\n+    public GroupModel getGroupById(RealmModel realm, String id) {\n+        StorageId storageId = new StorageId(id);\n+        if (storageId.getProviderId() == null) {\n+            return session.groupLocalStorage().getGroupById(realm, id);\n+        }\n+\n+        GroupLookupProvider provider = getStorageProviderInstance(realm, storageId.getProviderId());\n+        if (provider == null) return null;\n+\n+        return provider.getGroupById(realm, id);\n+    }\n+\n+    /**\n+     * Obtaining groups from an external client storage is time-bounded. In case the external group storage\n+     * isn't available at least groups from a local storage are returned. For this purpose\n+     * the {@link org.keycloak.services.DefaultKeycloakSessionFactory#getClientStorageProviderTimeout()} property is used.\n+     * Default value is 3000 milliseconds and it's configurable.\n+     * See {@link org.keycloak.services.DefaultKeycloakSessionFactory} for details.\n+     *\n+     * TODO: Remove stream() and .collect(Collectors.toList()) during streamification", "originalCommit": "1c5326966354082382500e4d20cd462448cc3273", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIzMzQxMA==", "url": "https://github.com/keycloak/keycloak/pull/7346#discussion_r478233410", "bodyText": "I think so. This PR: #7328 should be merged first and then I will resolve this TODO", "author": "mhajas", "createdAt": "2020-08-27T08:05:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2NTQ0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5ODAzNA==", "url": "https://github.com/keycloak/keycloak/pull/7346#discussion_r478598034", "bodyText": "oh I see, I thought this is another way around, thanks", "author": "vramik", "createdAt": "2020-08-27T17:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2NTQ0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ4MjA0OQ==", "url": "https://github.com/keycloak/keycloak/pull/7346#discussion_r479482049", "bodyText": "#7328 has been merged just now.", "author": "hmlnarik", "createdAt": "2020-08-28T18:57:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2NTQ0OQ=="}], "type": "inlineReview"}, {"oid": "a145b910e5927b0fbf799b5b8b3c32d50bd12e04", "url": "https://github.com/keycloak/keycloak/commit/a145b910e5927b0fbf799b5b8b3c32d50bd12e04", "message": "KEYCLOAK-14973 Create GroupStorageManager", "committedDate": "2020-08-31T10:54:10Z", "type": "forcePushed"}, {"oid": "d3038bed99921f6038984503429c8cc41621e34b", "url": "https://github.com/keycloak/keycloak/commit/d3038bed99921f6038984503429c8cc41621e34b", "message": "KEYCLOAK-14973 Create GroupStorageManager", "committedDate": "2020-08-31T11:05:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDUyNDM0NQ==", "url": "https://github.com/keycloak/keycloak/pull/7346#discussion_r480524345", "body": "nitpicking: shouldn't the comment read \"acrsoss all GroupStorageProvider implementations\" instead?", "bodyText": "nitpicking: shouldn't the comment read \"acrsoss all GroupStorageProvider implementations\" instead?", "bodyHTML": "<p dir=\"auto\">nitpicking: shouldn't the comment read \"acrsoss all GroupStorageProvider implementations\" instead?</p>", "author": "sguilhen", "createdAt": "2020-09-01T01:02:08Z", "path": "server-spi-private/src/main/java/org/keycloak/storage/group/GroupStorageProviderFactory.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.storage.group;\n+\n+import org.keycloak.Config;\n+import org.keycloak.component.ComponentFactory;\n+import org.keycloak.component.ComponentModel;\n+import org.keycloak.component.ComponentValidationException;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.provider.ProviderConfigProperty;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public interface GroupStorageProviderFactory<T extends GroupStorageProvider> extends ComponentFactory<T, GroupStorageProvider> {\n+\n+\n+    /**\n+     * called per Keycloak transaction.\n+     *\n+     * @param session\n+     * @param model\n+     * @return\n+     */\n+    @Override\n+    T create(KeycloakSession session, ComponentModel model);\n+\n+    /**\n+     * This is the name of the provider.\n+     *\n+     * @return\n+     */\n+    @Override\n+    String getId();\n+\n+    @Override\n+    default void init(Config.Scope config) {\n+    }\n+\n+    @Override\n+    default void postInit(KeycloakSessionFactory factory) {\n+    }\n+\n+    @Override\n+    default void close() {\n+    }\n+\n+    @Override\n+    default String getHelpText() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    default List<ProviderConfigProperty> getConfigProperties() {\n+        return Collections.EMPTY_LIST;\n+    }\n+\n+    @Override\n+    default void validateConfiguration(KeycloakSession session, RealmModel realm, ComponentModel config) throws ComponentValidationException {\n+    }\n+\n+    /**\n+     * Called when RoleStorageProviderModel is created.  This allows you to do initialization of any additional configuration\n+     * you need to add.\n+     *\n+     * @param session\n+     * @param realm\n+     * @param model\n+     */\n+    @Override\n+    default void onCreate(KeycloakSession session, RealmModel realm, ComponentModel model) {\n+    }\n+\n+    /**\n+     * configuration properties that are common across all RoleStorageProvider implementations", "originalCommit": "d3038bed99921f6038984503429c8cc41621e34b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDU0NjY2Ng==", "url": "https://github.com/keycloak/keycloak/pull/7346#discussion_r480546666", "body": "nitpicking: \"name\"", "bodyText": "nitpicking: \"name\"", "bodyHTML": "<p dir=\"auto\">nitpicking: \"name\"</p>", "author": "sguilhen", "createdAt": "2020-09-01T01:23:06Z", "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/HardcodedGroupStorageProviderFactory.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.testsuite.federation;\n+\n+import org.keycloak.component.ComponentModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.provider.ProviderConfigProperty;\n+import org.keycloak.provider.ProviderConfigurationBuilder;\n+import org.keycloak.storage.group.GroupStorageProviderFactory;\n+import org.keycloak.storage.group.GroupStorageProviderModel;\n+\n+import java.util.List;\n+\n+public class HardcodedGroupStorageProviderFactory implements GroupStorageProviderFactory<HardcodedGroupStorageProvider> {\n+    @Override\n+    public HardcodedGroupStorageProvider create(KeycloakSession session, ComponentModel model) {\n+        return new HardcodedGroupStorageProvider(new GroupStorageProviderModel(model));\n+    }\n+\n+    public static final String PROVIDER_ID = \"hardcoded-group\";\n+    public static final String GROUP_NAME = \"gorup_name\";\n+    public static final String DELAYED_SEARCH = \"delayed_search\";\n+\n+    protected static final List<ProviderConfigProperty> CONFIG_PROPERTIES;\n+\n+    static {\n+        CONFIG_PROPERTIES = ProviderConfigurationBuilder.create()\n+                .property().name(GROUP_NAME)\n+                .type(ProviderConfigProperty.STRING_TYPE)\n+                .label(\"Hardcoded Group Name\")\n+                .helpText(\"Only this group naem is available for lookup\")", "originalCommit": "d3038bed99921f6038984503429c8cc41621e34b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDU1MTUxNA==", "url": "https://github.com/keycloak/keycloak/pull/7346#discussion_r480551514", "body": "hardcodedGroup?", "bodyText": "hardcodedGroup?", "bodyHTML": "<p dir=\"auto\">hardcodedGroup?</p>", "author": "sguilhen", "createdAt": "2020-09-01T01:27:42Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/storage/GroupStorageTest.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.testsuite.federation.storage;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.keycloak.common.util.MultivaluedHashMap;\n+import org.keycloak.component.ComponentModel;\n+import org.keycloak.models.GroupModel;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.jpa.GroupAdapter;\n+import org.keycloak.representations.idm.ComponentRepresentation;\n+import org.keycloak.representations.idm.RealmRepresentation;\n+import org.keycloak.storage.StorageId;\n+import org.keycloak.storage.group.GroupStorageProvider;\n+import org.keycloak.testsuite.AbstractTestRealmKeycloakTest;\n+import org.keycloak.testsuite.admin.ApiUtil;\n+import org.keycloak.testsuite.arquillian.annotation.AuthServerContainerExclude;\n+import org.keycloak.testsuite.arquillian.annotation.AuthServerContainerExclude.AuthServer;\n+import org.keycloak.testsuite.auth.page.AuthRealm;\n+import org.keycloak.testsuite.federation.HardcodedGroupStorageProviderFactory;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.not;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+\n+@AuthServerContainerExclude(AuthServer.REMOTE)\n+public class GroupStorageTest extends AbstractTestRealmKeycloakTest {\n+\n+    private String providerId;\n+\n+    @Override\n+    public void configureTestRealm(RealmRepresentation testRealm) {\n+    }\n+\n+    protected String addComponent(ComponentRepresentation component) {\n+        try (Response resp = adminClient.realm(\"test\").components().add(component)) {\n+            String id = ApiUtil.getCreatedId(resp);\n+            getCleanup().addComponentId(id);\n+            return id;\n+        }\n+    }\n+\n+    @Before\n+    public void addProvidersBeforeTest() throws URISyntaxException, IOException {\n+        ComponentRepresentation provider = new ComponentRepresentation();\n+        provider.setName(\"group-storage-hardcoded\");\n+        provider.setProviderId(HardcodedGroupStorageProviderFactory.PROVIDER_ID);\n+        provider.setProviderType(GroupStorageProvider.class.getName());\n+        provider.setConfig(new MultivaluedHashMap<>());\n+        provider.getConfig().putSingle(HardcodedGroupStorageProviderFactory.GROUP_NAME, \"hardcoded-group\");\n+        provider.getConfig().putSingle(HardcodedGroupStorageProviderFactory.DELAYED_SEARCH, Boolean.toString(false));\n+\n+        providerId = addComponent(provider);\n+    }\n+\n+    @Test\n+    public void testGetGroupById() {\n+        String providerId = this.providerId;\n+        testingClient.server().run(session -> {\n+            RealmModel realm = session.realms().getRealmByName(\"test\");\n+            StorageId storageId = new StorageId(providerId, \"hardcoded-group\");\n+            GroupModel hardcoded = session.groups().getGroupById(realm, storageId.getId());\n+            assertNotNull(hardcoded);\n+        });\n+    }\n+\n+    @Test(timeout = 4000)\n+    public void testSearchTimeout() {\n+        String hardcodedRole = HardcodedGroupStorageProviderFactory.PROVIDER_ID;", "originalCommit": "d3038bed99921f6038984503429c8cc41621e34b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "95bfac8375b27e6ce78d8df3c9fe3e39e025eae1", "url": "https://github.com/keycloak/keycloak/commit/95bfac8375b27e6ce78d8df3c9fe3e39e025eae1", "message": "KEYCLOAK-14973 Create GroupStorageManager", "committedDate": "2020-09-01T07:17:30Z", "type": "commit"}, {"oid": "95bfac8375b27e6ce78d8df3c9fe3e39e025eae1", "url": "https://github.com/keycloak/keycloak/commit/95bfac8375b27e6ce78d8df3c9fe3e39e025eae1", "message": "KEYCLOAK-14973 Create GroupStorageManager", "committedDate": "2020-09-01T07:17:30Z", "type": "forcePushed"}]}