{"pr_number": 7554, "pr_title": "KEYCLOAK-15841 Upgrade rest of the minor forms to PF4", "pr_author": "mabartos", "pr_createdAt": "2020-10-30T09:38:57Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7554", "merge_commit": "7522d5ac74963fe6632f048a0616e39d87165ed9", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0MzUwMw==", "url": "https://github.com/keycloak/keycloak/pull/7554#discussion_r517243503", "body": "This PO represents a page in the old Account Console, not the login page. It shouldn't be modified.", "bodyText": "This PO represents a page in the old Account Console, not the login page. It shouldn't be modified.", "bodyHTML": "<p dir=\"auto\">This PO represents a page in the old Account Console, not the login page. It shouldn't be modified.</p>", "author": "vmuzikar", "createdAt": "2020-11-04T10:28:29Z", "path": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/AccountUpdateProfilePage.java", "diffHunk": "@@ -180,8 +184,16 @@ public String getSuccess(){\n         return successMessage.getText();\n     }\n \n-    public String getError() {\n-        return errorMessage.getText();\n+    public String getAlertError() {\n+        try {\n+            return errorMessage.getText();\n+        } catch (NoSuchElementException e) {\n+            return null;\n+        }\n+    }\n+\n+    public UpdateProfileErrors getInputErrors() {\n+        return errorsPage;", "originalCommit": "9ad14856e4c8b43cbb0122d40dd6993fb94bd886", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ0NjExNw==", "url": "https://github.com/keycloak/keycloak/pull/7554#discussion_r517446117", "bodyText": "Ok", "author": "mabartos", "createdAt": "2020-11-04T15:53:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0MzUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "2e2f584b2695e4bc1791b8eb55e5d566374549c8", "changed_code": [{"header": "diff --git a/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/AccountUpdateProfilePage.java b/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/AccountUpdateProfilePage.java\nindex 14515a910b..bb35777e70 100755\n--- a/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/AccountUpdateProfilePage.java\n+++ b/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/AccountUpdateProfilePage.java\n", "chunk": "@@ -184,16 +180,8 @@ public class AccountUpdateProfilePage extends AbstractAccountPage {\n         return successMessage.getText();\n     }\n \n-    public String getAlertError() {\n-        try {\n-            return errorMessage.getText();\n-        } catch (NoSuchElementException e) {\n-            return null;\n-        }\n-    }\n-\n-    public UpdateProfileErrors getInputErrors() {\n-        return errorsPage;\n+    public String getError() {\n+        return errorMessage.getText();\n     }\n \n     public boolean isPasswordUpdateSupported() {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "7522d5ac74963fe6632f048a0616e39d87165ed9", "changed_code": [{"header": "diff --git a/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/AccountUpdateProfilePage.java b/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/AccountUpdateProfilePage.java\nindex 14515a910b..bb35777e70 100755\n--- a/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/AccountUpdateProfilePage.java\n+++ b/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/AccountUpdateProfilePage.java\n", "chunk": "@@ -184,16 +180,8 @@ public class AccountUpdateProfilePage extends AbstractAccountPage {\n         return successMessage.getText();\n     }\n \n-    public String getAlertError() {\n-        try {\n-            return errorMessage.getText();\n-        } catch (NoSuchElementException e) {\n-            return null;\n-        }\n-    }\n-\n-    public UpdateProfileErrors getInputErrors() {\n-        return errorsPage;\n+    public String getError() {\n+        return errorMessage.getText();\n     }\n \n     public boolean isPasswordUpdateSupported() {\n", "next_change": {"commit": "612fe33ade6d2bd34b1c539c918215d897c1374c", "changed_code": [{"header": "diff --git a/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/AccountUpdateProfilePage.java b/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/AccountUpdateProfilePage.java\ndeleted file mode 100755\nindex bb35777e70..0000000000\n--- a/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/AccountUpdateProfilePage.java\n+++ /dev/null\n", "chunk": "@@ -1,195 +0,0 @@\n-/*\n- * Copyright 2016 Red Hat, Inc. and/or its affiliates\n- * and other contributors as indicated by the @author tags.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.keycloak.testsuite.pages;\n-\n-import org.keycloak.models.Constants;\n-import org.keycloak.services.resources.RealmsResource;\n-import org.keycloak.testsuite.util.DroneUtils;\n-import org.openqa.selenium.By;\n-import org.openqa.selenium.NoSuchElementException;\n-import org.openqa.selenium.WebElement;\n-import org.openqa.selenium.WebDriver;\n-import org.openqa.selenium.support.FindBy;\n-\n-import javax.ws.rs.core.UriBuilder;\n-\n-/**\n- * @author <a href=\"mailto:sthorger@redhat.com\">Stian Thorgersen</a>\n- */\n-public class AccountUpdateProfilePage extends AbstractAccountPage {\n-\n-    @FindBy(id = \"username\")\n-    private WebElement usernameInput;\n-\n-    @FindBy(id = \"firstName\")\n-    private WebElement firstNameInput;\n-\n-    @FindBy(id = \"lastName\")\n-    private WebElement lastNameInput;\n-\n-    @FindBy(id = \"email\")\n-    private WebElement emailInput;\n-\n-\n-    @FindBy(id = \"referrer\")\n-    private WebElement backToApplicationLink;\n-\n-    @FindBy(css = \"button[type=\\\"submit\\\"][value=\\\"Save\\\"]\")\n-    private WebElement submitButton;\n-\n-    @FindBy(css = \"button[type=\\\"submit\\\"][value=\\\"Cancel\\\"]\")\n-    private WebElement cancelButton;\n-\n-    @FindBy(className = \"alert-success\")\n-    private WebElement successMessage;\n-\n-    @FindBy(className = \"alert-error\")\n-    private WebElement errorMessage;\n-\n-    public String getPath() {\n-        return RealmsResource.accountUrl(UriBuilder.fromUri(getAuthServerRoot())).build(\"test\").toString();\n-    }\n-\n-    public String getPath(String realm) {\n-        return RealmsResource.accountUrl(UriBuilder.fromUri(getAuthServerRoot())).build(realm).toString();\n-    }\n-\n-    public void updateProfile(String firstName, String lastName, String email) {\n-        firstNameInput.clear();\n-        firstNameInput.sendKeys(firstName);\n-        lastNameInput.clear();\n-        lastNameInput.sendKeys(lastName);\n-        emailInput.clear();\n-        emailInput.sendKeys(email);\n-\n-        submitButton.click();\n-    }\n-\n-    public void updateProfile(String username, String firstName, String lastName, String email) {\n-        usernameInput.clear();\n-        usernameInput.sendKeys(username);\n-        firstNameInput.clear();\n-        firstNameInput.sendKeys(firstName);\n-        lastNameInput.clear();\n-        lastNameInput.sendKeys(lastName);\n-        emailInput.clear();\n-        emailInput.sendKeys(email);\n-\n-        submitButton.click();\n-    }\n-\n-    public void updateUsername(String username) {\n-        usernameInput.clear();\n-        usernameInput.sendKeys(username);\n-        submitButton.click();\n-    }\n-\n-    public void updateEmail(String email) {\n-        emailInput.clear();\n-        emailInput.sendKeys(email);\n-        submitButton.click();\n-    }\n-\n-    public void updateAttribute(String attrName, String attrValue) {\n-        WebElement attrElement = findAttributeInputElement(attrName);\n-        attrElement.clear();\n-        attrElement.sendKeys(attrValue);\n-        submitButton.click();\n-    }\n-\n-\n-    public void clickCancel() {\n-        cancelButton.click();\n-    }\n-\n-\n-    public String getUsername() {\n-        return usernameInput.getAttribute(\"value\");\n-    }\n-\n-    public String getFirstName() {\n-        return firstNameInput.getAttribute(\"value\");\n-    }\n-\n-    public String getLastName() {\n-        return lastNameInput.getAttribute(\"value\");\n-    }\n-\n-    public String getEmail() {\n-        return emailInput.getAttribute(\"value\");\n-    }\n-\n-    public String getAttribute(String attrName) {\n-        WebElement attrElement = findAttributeInputElement(attrName);\n-        return attrElement.getAttribute(\"value\");\n-    }\n-\n-    @Override\n-    public boolean isCurrent() {\n-        WebDriver currentDriver = DroneUtils.getCurrentDriver();\n-        return currentDriver.getTitle().contains(\"Account Management\") && currentDriver.getPageSource().contains(\"Edit Account\");\n-    }\n-\n-    @Override\n-    public void open() {\n-        driver.navigate().to(getPath());\n-    }\n-\n-    public void open(String realm) {\n-        driver.navigate().to(getPath(realm));\n-    }\n-\n-    public void backToApplication() {\n-        backToApplicationLink.click();\n-    }\n-    \n-    public String getBackToApplicationLinkText() {\n-        try {\n-            // Optional screen element, may not be present\n-            return backToApplicationLink.getText();\n-        } catch (NoSuchElementException ignored) {\n-            return null;\n-        }\n-    }\n-    \n-    public String getBackToApplicationLinkHref() {\n-        try {\n-            // Optional screen element, may not be present\n-            return backToApplicationLink.getAttribute(\"href\");\n-        } catch (NoSuchElementException ignored) {\n-            return null;\n-        }\n-    }\n-\n-    public String getSuccess(){\n-        return successMessage.getText();\n-    }\n-\n-    public String getError() {\n-        return errorMessage.getText();\n-    }\n-\n-    public boolean isPasswordUpdateSupported() {\n-        return driver.getPageSource().contains(getPath() + \"/password\");\n-    }\n-\n-    private WebElement findAttributeInputElement(String attrName) {\n-        String attrId = Constants.USER_ATTRIBUTES_PREFIX + attrName;\n-        return driver.findElement(By.id(attrId));\n-    }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "7522d5ac74963fe6632f048a0616e39d87165ed9", "message": "Merge commit", "committedDate": null}, {"oid": "3af1134975f8cb93264035fb64edce953e2e7bbf", "committedDate": "2022-09-14 08:02:17 -0300", "message": "Update IDP link username when sync mode is \"force\""}, {"oid": "7cff8572387e6bbfca160aa60e9a8191d22e5c85", "committedDate": "2023-04-27 13:36:54 +0200", "message": "Migrate packages from javax.* to jakarta.*"}, {"oid": "612fe33ade6d2bd34b1c539c918215d897c1374c", "committedDate": "2023-06-02 11:46:49 +0200", "message": "Remove AccountUpdateProfilePage from the testsuite (#19362)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0NzA5OQ==", "url": "https://github.com/keycloak/keycloak/pull/7554#discussion_r517247099", "body": "Why to make this change in this PR? Shouldn't it belong to https://github.com/keycloak/keycloak/pull/7516 which addresses migration of this file?", "bodyText": "Why to make this change in this PR? Shouldn't it belong to #7516 which addresses migration of this file?", "bodyHTML": "<p dir=\"auto\">Why to make this change in this PR? Shouldn't it belong to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"725086313\" data-permission-text=\"Title is private\" data-url=\"https://github.com/keycloak/keycloak/issues/7516\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/keycloak/keycloak/pull/7516/hovercard\" href=\"https://github.com/keycloak/keycloak/pull/7516\">#7516</a> which addresses migration of this file?</p>", "author": "vmuzikar", "createdAt": "2020-11-04T10:34:17Z", "path": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/LoginTotpPage.java", "diffHunk": "@@ -45,15 +45,30 @@\n     @FindBy(className = \"alert-error\")\n     private WebElement loginErrorMessage;\n \n+    @FindBy(id = \"input-error-otp-code\")\n+    private WebElement totpInputCodeError;\n+\n     public void login(String totp) {\n         otpInput.clear();\n         if (totp != null) otpInput.sendKeys(totp);\n \n         submitButton.click();\n     }\n \n-    public String getError() {\n-        return loginErrorMessage != null ? loginErrorMessage.getText() : null;\n+    public String getAlertError() {\n+        try {\n+            return UIUtils.getTextFromElement(loginErrorMessage);\n+        } catch (NoSuchElementException e) {\n+            return null;\n+        }\n+    }\n+\n+    public String getInputError(){\n+        try {\n+            return UIUtils.getTextFromElement(totpInputCodeError);\n+        } catch (NoSuchElementException e) {\n+            return null;\n+        }", "originalCommit": "9ad14856e4c8b43cbb0122d40dd6993fb94bd886", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2OTUzNQ==", "url": "https://github.com/keycloak/keycloak/pull/7554#discussion_r517369535", "bodyText": "Commented above.", "author": "mabartos", "createdAt": "2020-11-04T14:10:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0NzA5OQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "7522d5ac74963fe6632f048a0616e39d87165ed9", "message": "Merge commit", "committedDate": null}, {"oid": "c8a2f82a503d2b5702d45c37cfb305cb292cb912", "committedDate": "2020-12-03 16:00:36 +0100", "message": "KEYCLOAK-14138 Upgrade OTP login screen"}, {"oid": "0033b7daf798860b3131d9deeb1a778dcabd2230", "committedDate": "2021-03-29 15:46:34 +0200", "message": "[KEYCLOAK-17166] Use radio buttons for otp select"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0OTI0Ng==", "url": "https://github.com/keycloak/keycloak/pull/7554#discussion_r517249246", "body": "Why to have this as a separate PO (or in fact a page fragment)? I believe it won't be used anywhere but in `LoginUpdateProfilePage`, correct?", "bodyText": "Why to have this as a separate PO (or in fact a page fragment)? I believe it won't be used anywhere but in LoginUpdateProfilePage, correct?", "bodyHTML": "<p dir=\"auto\">Why to have this as a separate PO (or in fact a page fragment)? I believe it won't be used anywhere but in <code>LoginUpdateProfilePage</code>, correct?</p>", "author": "vmuzikar", "createdAt": "2020-11-04T10:37:46Z", "path": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/UpdateProfileErrors.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.testsuite.pages;\n+\n+import org.openqa.selenium.NoSuchElementException;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.FindBy;\n+\n+import static org.keycloak.testsuite.util.UIUtils.getTextFromElement;\n+\n+/**\n+ * @author <a href=\"mailto:mabartos@redhat.com\">Martin Bartos</a>\n+ */\n+public class UpdateProfileErrors {", "originalCommit": "9ad14856e4c8b43cbb0122d40dd6993fb94bd886", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM3MTc0Mw==", "url": "https://github.com/keycloak/keycloak/pull/7554#discussion_r517371743", "bodyText": "I didn't want to hide main components in LoginUpdateProfilePage by a lot of error fields. So, IMO, it's nicer to separate errors from the other components. WDYT @vmuzikar ?", "author": "mabartos", "createdAt": "2020-11-04T14:12:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0OTI0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM3NDc0OQ==", "url": "https://github.com/keycloak/keycloak/pull/7554#discussion_r517374749", "bodyText": "If you really want to put it inside a separate class, I'd make it a nested class inside LoginUpdateProfilePage as it really belongs to it. ;)", "author": "vmuzikar", "createdAt": "2020-11-04T14:17:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0OTI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2e2f584b2695e4bc1791b8eb55e5d566374549c8", "changed_code": [{"header": "diff --git a/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/UpdateProfileErrors.java b/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/UpdateProfileErrors.java\ndeleted file mode 100644\nindex 90f77f9b0e..0000000000\n--- a/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/UpdateProfileErrors.java\n+++ /dev/null\n", "chunk": "@@ -1,74 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates\n- * and other contributors as indicated by the @author tags.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.keycloak.testsuite.pages;\n-\n-import org.openqa.selenium.NoSuchElementException;\n-import org.openqa.selenium.WebElement;\n-import org.openqa.selenium.support.FindBy;\n-\n-import static org.keycloak.testsuite.util.UIUtils.getTextFromElement;\n-\n-/**\n- * @author <a href=\"mailto:mabartos@redhat.com\">Martin Bartos</a>\n- */\n-public class UpdateProfileErrors {\n-\n-    @FindBy(id = \"input-error-firstname\")\n-    private WebElement inputErrorFirstName;\n-\n-    @FindBy(id = \"input-error-lastname\")\n-    private WebElement inputErrorLastName;\n-\n-    @FindBy(id = \"input-error-email\")\n-    private WebElement inputErrorEmail;\n-\n-    @FindBy(id = \"input-error-username\")\n-    private WebElement inputErrorUsername;\n-\n-    public String getFirstNameError() {\n-        try {\n-            return getTextFromElement(inputErrorFirstName);\n-        } catch (NoSuchElementException e) {\n-            return null;\n-        }\n-    }\n-\n-    public String getLastNameError() {\n-        try {\n-            return getTextFromElement(inputErrorLastName);\n-        } catch (NoSuchElementException e) {\n-            return null;\n-        }\n-    }\n-\n-    public String getEmailError() {\n-        try {\n-            return getTextFromElement(inputErrorEmail);\n-        } catch (NoSuchElementException e) {\n-            return null;\n-        }\n-    }\n-\n-    public String getUsernameError() {\n-        try {\n-            return getTextFromElement(inputErrorUsername);\n-        } catch (NoSuchElementException e) {\n-            return null;\n-        }\n-    }\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "7522d5ac74963fe6632f048a0616e39d87165ed9", "changed_code": [{"header": "diff --git a/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/UpdateProfileErrors.java b/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/UpdateProfileErrors.java\ndeleted file mode 100644\nindex 90f77f9b0e..0000000000\n--- a/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/UpdateProfileErrors.java\n+++ /dev/null\n", "chunk": "@@ -1,74 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates\n- * and other contributors as indicated by the @author tags.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.keycloak.testsuite.pages;\n-\n-import org.openqa.selenium.NoSuchElementException;\n-import org.openqa.selenium.WebElement;\n-import org.openqa.selenium.support.FindBy;\n-\n-import static org.keycloak.testsuite.util.UIUtils.getTextFromElement;\n-\n-/**\n- * @author <a href=\"mailto:mabartos@redhat.com\">Martin Bartos</a>\n- */\n-public class UpdateProfileErrors {\n-\n-    @FindBy(id = \"input-error-firstname\")\n-    private WebElement inputErrorFirstName;\n-\n-    @FindBy(id = \"input-error-lastname\")\n-    private WebElement inputErrorLastName;\n-\n-    @FindBy(id = \"input-error-email\")\n-    private WebElement inputErrorEmail;\n-\n-    @FindBy(id = \"input-error-username\")\n-    private WebElement inputErrorUsername;\n-\n-    public String getFirstNameError() {\n-        try {\n-            return getTextFromElement(inputErrorFirstName);\n-        } catch (NoSuchElementException e) {\n-            return null;\n-        }\n-    }\n-\n-    public String getLastNameError() {\n-        try {\n-            return getTextFromElement(inputErrorLastName);\n-        } catch (NoSuchElementException e) {\n-            return null;\n-        }\n-    }\n-\n-    public String getEmailError() {\n-        try {\n-            return getTextFromElement(inputErrorEmail);\n-        } catch (NoSuchElementException e) {\n-            return null;\n-        }\n-    }\n-\n-    public String getUsernameError() {\n-        try {\n-            return getTextFromElement(inputErrorUsername);\n-        } catch (NoSuchElementException e) {\n-            return null;\n-        }\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "7522d5ac74963fe6632f048a0616e39d87165ed9", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI1MDEwMQ==", "url": "https://github.com/keycloak/keycloak/pull/7554#discussion_r517250101", "body": "This is an old Account Console test. It shouldn't be modified at all.", "bodyText": "This is an old Account Console test. It shouldn't be modified at all.", "bodyHTML": "<p dir=\"auto\">This is an old Account Console test. It shouldn't be modified at all.</p>", "author": "vmuzikar", "createdAt": "2020-11-04T10:39:16Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java", "diffHunk": "@@ -265,11 +265,11 @@ public void changePassword() {\n         String userId = event.getUserId();\n \n         changePasswordPage.changePassword(\"\", \"new-password\", \"new-password\");\n-        Assert.assertEquals(\"Please specify password.\", profilePage.getError());\n+        Assert.assertEquals(\"Please specify password.\", profilePage.getAlertError());", "originalCommit": "9ad14856e4c8b43cbb0122d40dd6993fb94bd886", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM3MTgzMA==", "url": "https://github.com/keycloak/keycloak/pull/7554#discussion_r517371830", "bodyText": "Ok", "author": "mabartos", "createdAt": "2020-11-04T14:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI1MDEwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "2e2f584b2695e4bc1791b8eb55e5d566374549c8", "changed_code": [{"header": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java\nindex c7bf48a8cc..fb6e9f6e78 100644\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java\n", "chunk": "@@ -265,11 +265,11 @@ public class AccountFormServiceTest extends AbstractTestRealmKeycloakTest {\n         String userId = event.getUserId();\n \n         changePasswordPage.changePassword(\"\", \"new-password\", \"new-password\");\n-        Assert.assertEquals(\"Please specify password.\", profilePage.getAlertError());\n+        Assert.assertEquals(\"Please specify password.\", profilePage.getError());\n         events.expectAccount(EventType.UPDATE_PASSWORD_ERROR).error(Errors.PASSWORD_MISSING).assertEvent();\n \n         changePasswordPage.changePassword(\"password\", \"new-password\", \"new-password2\");\n-        Assert.assertEquals(\"Password confirmation doesn't match.\", profilePage.getAlertError());\n+        Assert.assertEquals(\"Password confirmation doesn't match.\", profilePage.getError());\n         events.expectAccount(EventType.UPDATE_PASSWORD_ERROR).error(Errors.PASSWORD_CONFIRM_ERROR).assertEvent();\n \n         changePasswordPage.changePassword(\"password\", \"new-password\", \"new-password\");\n", "next_change": null}]}, "revised_code_in_main": {"commit": "7522d5ac74963fe6632f048a0616e39d87165ed9", "changed_code": [{"header": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java\nindex c7bf48a8cc..fb6e9f6e78 100644\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java\n", "chunk": "@@ -265,11 +265,11 @@ public class AccountFormServiceTest extends AbstractTestRealmKeycloakTest {\n         String userId = event.getUserId();\n \n         changePasswordPage.changePassword(\"\", \"new-password\", \"new-password\");\n-        Assert.assertEquals(\"Please specify password.\", profilePage.getAlertError());\n+        Assert.assertEquals(\"Please specify password.\", profilePage.getError());\n         events.expectAccount(EventType.UPDATE_PASSWORD_ERROR).error(Errors.PASSWORD_MISSING).assertEvent();\n \n         changePasswordPage.changePassword(\"password\", \"new-password\", \"new-password2\");\n-        Assert.assertEquals(\"Password confirmation doesn't match.\", profilePage.getAlertError());\n+        Assert.assertEquals(\"Password confirmation doesn't match.\", profilePage.getError());\n         events.expectAccount(EventType.UPDATE_PASSWORD_ERROR).error(Errors.PASSWORD_CONFIRM_ERROR).assertEvent();\n \n         changePasswordPage.changePassword(\"password\", \"new-password\", \"new-password\");\n", "next_change": {"commit": "17117820cc14f87f5990ddce80ef38a0e2e7f314", "changed_code": [{"header": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java\ndeleted file mode 100644\nindex fb6e9f6e78..0000000000\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java\n+++ /dev/null\n", "chunk": "@@ -1,1415 +0,0 @@\n-/*\n- * Copyright 2016 Red Hat, Inc. and/or its affiliates\n- * and other contributors as indicated by the @author tags.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.keycloak.testsuite.account;\n-\n-import org.jboss.arquillian.drone.api.annotation.Drone;\n-import org.jboss.arquillian.graphene.page.Page;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.keycloak.admin.client.resource.RealmResource;\n-import org.keycloak.admin.client.resource.UserResource;\n-import org.keycloak.credential.CredentialModel;\n-import org.keycloak.events.Details;\n-import org.keycloak.events.Errors;\n-import org.keycloak.events.EventType;\n-import org.keycloak.models.AccountRoles;\n-import org.keycloak.models.AdminRoles;\n-import org.keycloak.models.Constants;\n-import org.keycloak.models.PasswordPolicy;\n-import org.keycloak.models.RealmModel;\n-import org.keycloak.models.UserModel;\n-import org.keycloak.models.credential.OTPCredentialModel;\n-import org.keycloak.models.utils.TimeBasedOTP;\n-import org.keycloak.representations.idm.ClientRepresentation;\n-import org.keycloak.representations.idm.CredentialRepresentation;\n-import org.keycloak.representations.idm.EventRepresentation;\n-import org.keycloak.representations.idm.RealmRepresentation;\n-import org.keycloak.representations.idm.UserRepresentation;\n-import org.keycloak.testsuite.AbstractTestRealmKeycloakTest;\n-import org.keycloak.testsuite.AssertEvents;\n-import org.keycloak.testsuite.admin.ApiUtil;\n-import org.keycloak.testsuite.arquillian.AuthServerTestEnricher;\n-import org.keycloak.testsuite.arquillian.annotation.AuthServerContainerExclude;\n-import org.keycloak.testsuite.drone.Different;\n-import org.keycloak.testsuite.pages.AccountApplicationsPage;\n-import org.keycloak.testsuite.pages.AccountFederatedIdentityPage;\n-import org.keycloak.testsuite.pages.AccountLogPage;\n-import org.keycloak.testsuite.pages.AccountPasswordPage;\n-import org.keycloak.testsuite.pages.AccountSessionsPage;\n-import org.keycloak.testsuite.pages.AccountTotpPage;\n-import org.keycloak.testsuite.pages.AccountUpdateProfilePage;\n-import org.keycloak.testsuite.pages.AppPage;\n-import org.keycloak.testsuite.pages.AppPage.RequestType;\n-import org.keycloak.testsuite.pages.ErrorPage;\n-import org.keycloak.testsuite.pages.LoginPage;\n-import org.keycloak.testsuite.pages.RegisterPage;\n-import org.keycloak.testsuite.updaters.ClientAttributeUpdater;\n-import org.keycloak.testsuite.updaters.RoleScopeUpdater;\n-import org.keycloak.testsuite.util.DroneUtils;\n-import org.keycloak.testsuite.util.IdentityProviderBuilder;\n-import org.keycloak.testsuite.util.OAuthClient;\n-import org.keycloak.testsuite.util.RealmBuilder;\n-import org.keycloak.testsuite.util.UIUtils;\n-import org.keycloak.testsuite.util.URLUtils;\n-import org.keycloak.testsuite.util.UserBuilder;\n-import java.util.Collections;\n-import org.openqa.selenium.By;\n-import org.openqa.selenium.NoSuchElementException;\n-import org.openqa.selenium.WebDriver;\n-\n-import java.util.Arrays;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.hamcrest.Matchers;\n-import org.junit.Assume;\n-\n-import static org.hamcrest.Matchers.anyOf;\n-import static org.hamcrest.Matchers.containsInAnyOrder;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.hasItems;\n-import static org.hamcrest.Matchers.hasSize;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.assertTrue;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SSL_REQUIRED;\n-import static org.keycloak.testsuite.util.ServerURLs.getAuthServerContextRoot;\n-\n-import org.keycloak.testsuite.arquillian.annotation.AuthServerContainerExclude.AuthServer;\n-\n-/**\n- * @author <a href=\"mailto:sthorger@redhat.com\">Stian Thorgersen</a>\n- * @author Stan Silvert ssilvert@redhat.com (C) 2016 Red Hat Inc.\n- */\n-public class AccountFormServiceTest extends AbstractTestRealmKeycloakTest {\n-\n-    public static final String ROOT_URL_CLIENT = \"root-url-client\";\n-    public static final String REALM_NAME = \"test\";\n-\n-    @Override\n-    public void configureTestRealm(RealmRepresentation testRealm) {\n-        //UserRepresentation user = findUserInRealmRep(testRealm, \"test-user@localhost\");\n-        //ClientRepresentation accountApp = findClientInRealmRep(testRealm, ACCOUNT_MANAGEMENT_CLIENT_ID);\n-        UserRepresentation user2 = UserBuilder.create()\n-                .enabled(true)\n-                .username(\"test-user-no-access@localhost\")\n-                .email(\"test-user-no-access@localhost\")\n-                .password(\"password\")\n-                .build();\n-        UserRepresentation realmAdmin = UserBuilder.create()\n-                .enabled(true)\n-                .username(\"realm-admin\")\n-                .password(\"password\")\n-                .role(Constants.REALM_MANAGEMENT_CLIENT_ID, AdminRoles.REALM_ADMIN)\n-                .role(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID, AccountRoles.MANAGE_ACCOUNT)\n-                .build();\n-\n-        testRealm.addIdentityProvider(IdentityProviderBuilder.create()\n-                                              .providerId(\"github\")\n-                                              .alias(\"github\")\n-                                              .build());\n-        testRealm.addIdentityProvider(IdentityProviderBuilder.create()\n-                                              .providerId(\"saml\")\n-                                              .alias(\"mysaml\")\n-                                              .build());\n-        testRealm.addIdentityProvider(IdentityProviderBuilder.create()\n-                                              .providerId(\"oidc\")\n-                                              .alias(\"myoidc\")\n-                                              .displayName(\"MyOIDC\")\n-                                              .build());\n-        testRealm.addIdentityProvider(IdentityProviderBuilder.create()\n-                                              .providerId(\"oidc\")\n-                                              .alias(\"myhiddenoidc\")\n-                                              .displayName(\"MyHiddenOIDC\")\n-                                              .hideOnLoginPage()\n-                                              .build());\n-\n-        RealmBuilder.edit(testRealm)\n-                    .user(user2)\n-                    .user(realmAdmin);\n-\n-        if (AUTH_SERVER_SSL_REQUIRED) {\n-            // Some scenarios here use redirections, so we need to fix the base url\n-            findTestApp(testRealm)\n-                  .setBaseUrl(String.format(\"%s/auth/realms/master/app/auth\", getAuthServerContextRoot()));\n-        }\n-    }\n-\n-    // Create second session\n-    @Drone\n-    @Different\n-    WebDriver driver2;\n-\n-    @Rule\n-    public AssertEvents events = new AssertEvents(this);\n-\n-    @Page\n-    protected AppPage appPage;\n-\n-    @Page\n-    protected LoginPage loginPage;\n-\n-    @Page\n-    protected RegisterPage registerPage;\n-\n-    @Page\n-    protected AccountPasswordPage changePasswordPage;\n-\n-    @Page\n-    protected AccountUpdateProfilePage profilePage;\n-\n-    @Page\n-    protected AccountTotpPage totpPage;\n-\n-    @Page\n-    protected AccountLogPage logPage;\n-\n-    @Page\n-    protected AccountSessionsPage sessionsPage;\n-\n-    @Page\n-    protected AccountApplicationsPage applicationsPage;\n-    \n-    @Page\n-    protected AccountFederatedIdentityPage federatedIdentityPage;\n-\n-    @Page\n-    protected ErrorPage errorPage;\n-\n-    private TimeBasedOTP totp = new TimeBasedOTP();\n-    private String userId;\n-\n-    @Before\n-    public void before() {\n-        UserRepresentation user = findUser(\"test-user@localhost\");\n-\n-        user.setEmail(\"test-user@localhost\");\n-        updateUser(user);\n-\n-        userId = user.getId();\n-\n-        // Revert any password policy and user password changes\n-        setPasswordPolicy(\"\");\n-        ApiUtil.resetUserPassword(testRealm().users().get(userId), \"password\", false);\n-    }\n-\n-    @Test\n-    public void returnToAppFromQueryParam() {\n-        driver.navigate().to(profilePage.getPath() + \"?referrer=test-app\");\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-        Assert.assertTrue(profilePage.isCurrent());\n-        profilePage.backToApplication();\n-\n-        Assert.assertTrue(appPage.isCurrent());\n-\n-        driver.navigate().to(String.format(\"%s?referrer=test-app&referrer_uri=%s/auth/realms/master/app/auth?test\", profilePage.getPath(), getAuthServerContextRoot()));\n-        Assert.assertTrue(profilePage.isCurrent());\n-        profilePage.backToApplication();\n-\n-        Assert.assertTrue(appPage.isCurrent());\n-        Assert.assertEquals(oauth.APP_AUTH_ROOT + \"?test\", driver.getCurrentUrl());\n-\n-        driver.navigate().to(profilePage.getPath() + \"?referrer=test-app\");\n-        Assert.assertTrue(profilePage.isCurrent());\n-\n-        driver.findElement(By.linkText(\"Authenticator\")).click();\n-        Assert.assertTrue(totpPage.isCurrent());\n-\n-        driver.findElement(By.linkText(\"Account\")).click();\n-        Assert.assertTrue(profilePage.isCurrent());\n-\n-        profilePage.backToApplication();\n-\n-        Assert.assertTrue(appPage.isCurrent());\n-\n-        events.clear();\n-    }\n-\n-    @Test\n-    public void referrerEscaped() {\n-        profilePage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-\n-        driver.navigate().to(profilePage.getPath() + \"?referrer=test-app&referrer_uri=http%3A%2F%2Flocalhost%3A8180%2Fauth%2Frealms%2Fmaster%2Fapp%2Fauth%2Ftest%2Ffkrenu%3Fq%3D%2522%253E%253Cscript%253Ealert%25281%2529%253C%252fscript%253E\");\n-        profilePage.assertCurrent();\n-\n-        assertFalse(driver.getPageSource().contains(\"<script>alert\"));\n-    }\n-\n-    @Test\n-    public void changePassword() {\n-        changePasswordPage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-\n-        EventRepresentation event = events.expectLogin().client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl() + \"?path=password\").assertEvent();\n-        String sessionId = event.getSessionId();\n-        String userId = event.getUserId();\n-\n-        changePasswordPage.changePassword(\"\", \"new-password\", \"new-password\");\n-        Assert.assertEquals(\"Please specify password.\", profilePage.getError());\n-        events.expectAccount(EventType.UPDATE_PASSWORD_ERROR).error(Errors.PASSWORD_MISSING).assertEvent();\n-\n-        changePasswordPage.changePassword(\"password\", \"new-password\", \"new-password2\");\n-        Assert.assertEquals(\"Password confirmation doesn't match.\", profilePage.getError());\n-        events.expectAccount(EventType.UPDATE_PASSWORD_ERROR).error(Errors.PASSWORD_CONFIRM_ERROR).assertEvent();\n-\n-        changePasswordPage.changePassword(\"password\", \"new-password\", \"new-password\");\n-        Assert.assertEquals(\"Your password has been updated.\", profilePage.getSuccess());\n-        events.expectAccount(EventType.UPDATE_PASSWORD).assertEvent();\n-\n-        changePasswordPage.logout();\n-        events.expectLogout(sessionId).detail(Details.REDIRECT_URI, changePasswordPage.getPath()).assertEvent();\n-\n-        loginPage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-\n-        Assert.assertEquals(\"Invalid username or password.\", loginPage.getInputError());\n-\n-        events.expectLogin().session((String) null).error(Errors.INVALID_USER_CREDENTIALS)\n-                .removeDetail(Details.CONSENT)\n-                .assertEvent();\n-\n-        loginPage.open();\n-        loginPage.login(\"test-user@localhost\", \"new-password\");\n-\n-        Assert.assertEquals(RequestType.AUTH_RESPONSE, appPage.getRequestType());\n-\n-        events.expectLogin().assertEvent();\n-    }\n-\n-    private void setPasswordPolicy(String policy) {\n-        RealmRepresentation testRealm = testRealm().toRepresentation();\n-        testRealm.setPasswordPolicy(policy);\n-        testRealm().update(testRealm);\n-    }\n-\n-    @Test\n-    public void changePasswordWithBlankCurrentPassword() {\n-        changePasswordPage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-        events.expectLogin().client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl() + \"?path=password\").assertEvent();\n-\n-        changePasswordPage.changePassword(\"\", \"new\", \"new\");\n-        Assert.assertEquals(\"Please specify password.\", profilePage.getError());\n-        events.expectAccount(EventType.UPDATE_PASSWORD_ERROR).error(Errors.PASSWORD_MISSING).assertEvent();\n-\n-        changePasswordPage.changePassword(\"password\", \"new\", \"new\");\n-        Assert.assertEquals(\"Your password has been updated.\", profilePage.getSuccess());\n-        events.expectAccount(EventType.UPDATE_PASSWORD).assertEvent();\n-    }\n-\n-    @Test\n-    public void changePasswordWithLengthPasswordPolicy() {\n-        setPasswordPolicy(\"length(8)\");\n-\n-        changePasswordPage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-        events.expectLogin().client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl() + \"?path=password\").assertEvent();\n-\n-        changePasswordPage.changePassword(\"password\", \"1234\", \"1234\");\n-        Assert.assertEquals(\"Invalid password: minimum length 8.\", profilePage.getError());\n-        events.expectAccount(EventType.UPDATE_PASSWORD_ERROR).error(Errors.PASSWORD_REJECTED).assertEvent();\n-\n-        changePasswordPage.changePassword(\"password\", \"12345678\", \"12345678\");\n-        Assert.assertEquals(\"Your password has been updated.\", profilePage.getSuccess());\n-        events.expectAccount(EventType.UPDATE_PASSWORD).assertEvent();\n-    }\n-\n-    @Test\n-    public void changePasswordWithDigitsPolicy() {\n-        setPasswordPolicy(\"digits(2)\");\n-\n-        changePasswordPage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-        events.expectLogin().client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl() + \"?path=password\").assertEvent();\n-\n-        changePasswordPage.changePassword(\"password\", \"invalidPassword1\", \"invalidPassword1\");\n-        Assert.assertEquals(\"Invalid password: must contain at least 2 numerical digits.\", profilePage.getError());\n-        events.expectAccount(EventType.UPDATE_PASSWORD_ERROR).error(Errors.PASSWORD_REJECTED).assertEvent();\n-\n-        changePasswordPage.changePassword(\"password\", \"validPassword12\", \"validPassword12\");\n-        Assert.assertEquals(\"Your password has been updated.\", profilePage.getSuccess());\n-        events.expectAccount(EventType.UPDATE_PASSWORD).assertEvent();\n-    }\n-\n-    @Test\n-    public void changePasswordWithLowerCasePolicy() {\n-        setPasswordPolicy(\"lowerCase(2)\");\n-\n-        changePasswordPage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-        events.expectLogin().client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl() + \"?path=password\").assertEvent();\n-\n-        changePasswordPage.changePassword(\"password\", \"iNVALIDPASSWORD\", \"iNVALIDPASSWORD\");\n-        Assert.assertEquals(\"Invalid password: must contain at least 2 lower case characters.\", profilePage.getError());\n-        events.expectAccount(EventType.UPDATE_PASSWORD_ERROR).error(Errors.PASSWORD_REJECTED).assertEvent();\n-\n-        changePasswordPage.changePassword(\"password\", \"vaLIDPASSWORD\", \"vaLIDPASSWORD\");\n-        Assert.assertEquals(\"Your password has been updated.\", profilePage.getSuccess());\n-        events.expectAccount(EventType.UPDATE_PASSWORD).assertEvent();\n-    }\n-\n-    @Test\n-    public void changePasswordWithUpperCasePolicy() {\n-        setPasswordPolicy(\"upperCase(2)\");\n-\n-        changePasswordPage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-        events.expectLogin().client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl() + \"?path=password\").assertEvent();\n-\n-        changePasswordPage.changePassword(\"password\", \"Invalidpassword\", \"Invalidpassword\");\n-        Assert.assertEquals(\"Invalid password: must contain at least 2 upper case characters.\", profilePage.getError());\n-        events.expectAccount(EventType.UPDATE_PASSWORD_ERROR).error(Errors.PASSWORD_REJECTED).assertEvent();\n-\n-\n-        changePasswordPage.changePassword(\"password\", \"VAlidpassword\", \"VAlidpassword\");\n-        Assert.assertEquals(\"Your password has been updated.\", profilePage.getSuccess());\n-        events.expectAccount(EventType.UPDATE_PASSWORD).assertEvent();\n-    }\n-\n-    @Test\n-    public void changePasswordWithSpecialCharsPolicy() {\n-        setPasswordPolicy(\"specialChars(2)\");\n-\n-        changePasswordPage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-        events.expectLogin().client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl() + \"?path=password\").assertEvent();\n-\n-        changePasswordPage.changePassword(\"password\", \"invalidPassword*\", \"invalidPassword*\");\n-        Assert.assertEquals(\"Invalid password: must contain at least 2 special characters.\", profilePage.getError());\n-        events.expectAccount(EventType.UPDATE_PASSWORD_ERROR).error(Errors.PASSWORD_REJECTED).assertEvent();\n-\n-\n-        changePasswordPage.changePassword(\"password\", \"validPassword*#\", \"validPassword*#\");\n-        Assert.assertEquals(\"Your password has been updated.\", profilePage.getSuccess());\n-        events.expectAccount(EventType.UPDATE_PASSWORD).assertEvent();\n-    }\n-\n-    @Test\n-    public void changePasswordWithNotUsernamePolicy() {\n-        setPasswordPolicy(\"notUsername(1)\");\n-\n-        changePasswordPage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-        events.expectLogin().client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl() + \"?path=password\").assertEvent();\n-\n-        changePasswordPage.changePassword(\"password\", \"test-user@localhost\", \"test-user@localhost\");\n-        Assert.assertEquals(\"Invalid password: must not be equal to the username.\", profilePage.getError());\n-        events.expectAccount(EventType.UPDATE_PASSWORD_ERROR).error(Errors.PASSWORD_REJECTED).assertEvent();\n-\n-\n-        changePasswordPage.changePassword(\"password\", \"newPassword\", \"newPassword\");\n-        Assert.assertEquals(\"Your password has been updated.\", profilePage.getSuccess());\n-        events.expectAccount(EventType.UPDATE_PASSWORD).assertEvent();\n-    }\n-\n-    // KEYCLOAK-12729\n-    @Test\n-    public void changePasswordWithNotEmailPolicy() {\n-        setPasswordPolicy(\"notEmail(1)\");\n-\n-        changePasswordPage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-        events.expectLogin().client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl() + \"?path=password\").assertEvent();\n-\n-        changePasswordPage.changePassword(\"password\", \"test-user@localhost\", \"test-user@localhost\");\n-        Assert.assertEquals(\"Invalid password: must not be equal to the email.\", profilePage.getError());\n-        events.expectAccount(EventType.UPDATE_PASSWORD_ERROR).error(Errors.PASSWORD_REJECTED).assertEvent();\n-\n-        changePasswordPage.changePassword(\"password\", \"newPassword\", \"newPassword\");\n-        Assert.assertEquals(\"Your password has been updated.\", profilePage.getSuccess());\n-        events.expectAccount(EventType.UPDATE_PASSWORD).assertEvent();\n-    }\n-\n-    @Test\n-    public void changePasswordWithRegexPatternsPolicy() {\n-        setPasswordPolicy(\"regexPattern(^[A-Z]+#[a-z]{8}$)\");\n-\n-        changePasswordPage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-        events.expectLogin().client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl() + \"?path=password\").assertEvent();\n-\n-        changePasswordPage.changePassword(\"password\", \"invalidPassword\", \"invalidPassword\");\n-        Assert.assertEquals(\"Invalid password: fails to match regex pattern(s).\", profilePage.getError());\n-        events.expectAccount(EventType.UPDATE_PASSWORD_ERROR).error(Errors.PASSWORD_REJECTED).assertEvent();\n-\n-\n-        changePasswordPage.changePassword(\"password\", \"VALID#password\", \"VALID#password\");\n-        Assert.assertEquals(\"Your password has been updated.\", profilePage.getSuccess());\n-        events.expectAccount(EventType.UPDATE_PASSWORD).assertEvent();\n-    }\n-\n-     private void assertChangePasswordSucceeds(String currentPassword, String newPassword) {\n-        changePasswordPage.changePassword(currentPassword, newPassword, newPassword);\n-        Assert.assertEquals(\"Your password has been updated.\", profilePage.getSuccess());\n-        events.expectAccount(EventType.UPDATE_PASSWORD).user(userId).assertEvent();\n-    }\n-\n-     private void assertChangePasswordFails(String currentPassword, String newPassword) {\n-        changePasswordPage.changePassword(currentPassword, newPassword, newPassword);\n-        Assert.assertThat(profilePage.getError(), containsString(\"Invalid password: must not be equal to any of last\"));\n-        events.expectAccount(EventType.UPDATE_PASSWORD_ERROR).user(userId).error(Errors.PASSWORD_REJECTED).assertEvent();\n-    }\n-\n-    private void assertNumberOfStoredCredentials(int expectedNumberOfStoredCredentials) {\n-        Assume.assumeTrue(\"Works only on auth-server-undertow\",\n-                AuthServerTestEnricher.AUTH_SERVER_CONTAINER.equals(AuthServerTestEnricher.AUTH_SERVER_CONTAINER_DEFAULT));\n-\n-        final String uId = userId;  // Needed for run-on-server\n-        testingClient.server(\"test\").run(session -> {\n-            RealmModel realm = session.getContext().getRealm();\n-            UserModel user = session.users().getUserById(uId, realm);\n-            assertThat(user, Matchers.notNullValue());\n-            List<CredentialModel> storedCredentials = session.userCredentialManager().getStoredCredentials(realm, user);\n-            assertThat(storedCredentials, Matchers.hasSize(expectedNumberOfStoredCredentials));\n-        });\n-    }\n-\n-    @Test\n-    public void changePasswordWithPasswordHistoryPolicyThreePasswords() {\n-        userId = createUser(\"test\", \"user-changePasswordWithPasswordHistoryPolicyThreePasswords\", \"password\");\n-\n-        setPasswordPolicy(PasswordPolicy.PASSWORD_HISTORY_ID + \"(3)\");\n-\n-        changePasswordPage.open();\n-        loginPage.login(\"user-changePasswordWithPasswordHistoryPolicyThreePasswords\", \"password\");\n-        events.expectLogin().user(userId).client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl() + \"?path=password\").assertEvent();\n-\n-        assertChangePasswordFails   (\"password\",  \"password\");  // current: password\n-        assertNumberOfStoredCredentials(1);\n-        assertChangePasswordSucceeds(\"password\",  \"password3\"); // current: password\n-        assertNumberOfStoredCredentials(2);\n-\n-        assertChangePasswordFails   (\"password3\", \"password\");  // current: password3, history: password\n-        assertNumberOfStoredCredentials(2);\n-        assertChangePasswordFails   (\"password3\", \"password3\"); // current: password1, history: password\n-        assertNumberOfStoredCredentials(2);\n-        assertChangePasswordSucceeds(\"password3\", \"password4\"); // current: password1, history: password\n-        assertNumberOfStoredCredentials(3);\n-\n-        assertChangePasswordFails   (\"password4\", \"password\");  // current: password4, history: password3, password\n-        assertNumberOfStoredCredentials(3);\n-        assertChangePasswordFails   (\"password4\", \"password3\"); // current: password4, history: password3, password\n-        assertNumberOfStoredCredentials(3);\n-        assertChangePasswordFails   (\"password4\", \"password4\"); // current: password4, history: password3, password\n-        assertNumberOfStoredCredentials(3);\n-        assertChangePasswordSucceeds(\"password4\", \"password5\"); // current: password4, history: password3, password\n-        assertNumberOfStoredCredentials(3);\n-\n-        assertChangePasswordSucceeds(\"password5\", \"password\");  // current: password5, history: password4, password3\n-        assertNumberOfStoredCredentials(3);\n-    }\n-\n-    @Test\n-    public void changePasswordWithPasswordHistoryPolicyTwoPasswords() {\n-        userId = createUser(\"test\", \"user-changePasswordWithPasswordHistoryPolicyTwoPasswords\", \"password\");\n-\n-        setPasswordPolicy(PasswordPolicy.PASSWORD_HISTORY_ID + \"(2)\");\n-\n-        changePasswordPage.open();\n-        loginPage.login(\"user-changePasswordWithPasswordHistoryPolicyTwoPasswords\", \"password\");\n-        events.expectLogin().user(userId).client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl() + \"?path=password\").assertEvent();\n-\n-        assertChangePasswordFails   (\"password\",  \"password\");  // current: password\n-        assertNumberOfStoredCredentials(1);\n-        assertChangePasswordSucceeds(\"password\",  \"password1\"); // current: password\n-        assertNumberOfStoredCredentials(2);\n-\n-        assertChangePasswordFails   (\"password1\", \"password\");  // current: password1, history: password\n-        assertNumberOfStoredCredentials(2);\n-        assertChangePasswordFails   (\"password1\", \"password1\"); // current: password1, history: password\n-        assertNumberOfStoredCredentials(2);\n-        assertChangePasswordSucceeds(\"password1\", \"password2\"); // current: password1, history: password\n-        assertNumberOfStoredCredentials(2);\n-\n-        assertChangePasswordFails   (\"password2\", \"password1\"); // current: password2, history: password1\n-        assertNumberOfStoredCredentials(2);\n-        assertChangePasswordFails   (\"password2\", \"password2\"); // current: password2, history: password1\n-        assertNumberOfStoredCredentials(2);\n-        assertChangePasswordSucceeds(\"password2\", \"password\");  // current: password2, history: password1\n-        assertNumberOfStoredCredentials(2);\n-    }\n-\n-    @Test\n-    public void changePasswordWithPasswordHistoryPolicyOnePwds() {\n-        userId = createUser(\"test\", \"user-changePasswordWithPasswordHistoryPolicyOnePwds\", \"password\");\n-\n-        // One password means only the active password is checked\n-        setPasswordPolicy(PasswordPolicy.PASSWORD_HISTORY_ID + \"(1)\");\n-\n-        changePasswordPage.open();\n-        loginPage.login(\"user-changePasswordWithPasswordHistoryPolicyOnePwds\", \"password\");\n-        events.expectLogin().user(userId).client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl() + \"?path=password\").assertEvent();\n-\n-        assertChangePasswordFails   (\"password\",  \"password\");  // current: password\n-        assertNumberOfStoredCredentials(1);\n-        assertChangePasswordSucceeds(\"password\",  \"password6\"); // current: password\n-        assertNumberOfStoredCredentials(1);\n-\n-        assertChangePasswordFails   (\"password6\", \"password6\"); // current: password1\n-        assertNumberOfStoredCredentials(1);\n-        assertChangePasswordSucceeds(\"password6\", \"password\");  // current: password1\n-        assertNumberOfStoredCredentials(1);\n-    }\n-\n-    @Test\n-    public void changePasswordWithPasswordHistoryPolicyZeroPwdsInHistory() {\n-        userId = createUser(\"test\", \"user-changePasswordWithPasswordHistoryPolicyZeroPwdsInHistory\", \"password\");\n-\n-        setPasswordPolicy(PasswordPolicy.PASSWORD_HISTORY_ID + \"(0)\");\n-\n-        changePasswordPage.open();\n-        loginPage.login(\"user-changePasswordWithPasswordHistoryPolicyZeroPwdsInHistory\", \"password\");\n-        events.expectLogin().user(userId).client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl() + \"?path=password\").assertEvent();\n-\n-        assertChangePasswordFails   (\"password\",  \"password\");  // current: password\n-        assertNumberOfStoredCredentials(1);\n-        assertChangePasswordSucceeds(\"password\",  \"password1\"); // current: password\n-        assertNumberOfStoredCredentials(1);\n-\n-        assertChangePasswordFails   (\"password1\", \"password1\"); // current: password1\n-        assertNumberOfStoredCredentials(1);\n-        assertChangePasswordSucceeds(\"password1\", \"password\");  // current: password1\n-        assertNumberOfStoredCredentials(1);\n-    }\n-\n-    @Test\n-    public void changePasswordToOldOneAfterPasswordHistoryPolicyExpirationChange() {\n-        userId = createUser(\"test\", \"user-changePasswordToOldOneAfterPasswordHistoryPolicyExpirationChange\", \"password\");\n-\n-        setPasswordPolicy(PasswordPolicy.PASSWORD_HISTORY_ID + \"(3)\");\n-\n-        changePasswordPage.open();\n-        loginPage.login(\"user-changePasswordToOldOneAfterPasswordHistoryPolicyExpirationChange\", \"password\");\n-        events.expectLogin().user(userId).client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl() + \"?path=password\").assertEvent();\n-\n-        assertNumberOfStoredCredentials(1);\n-        assertChangePasswordSucceeds(\"password\", \"password1\");\n-        assertNumberOfStoredCredentials(2);\n-        assertChangePasswordSucceeds(\"password1\", \"password2\");\n-        assertNumberOfStoredCredentials(3);\n-\n-        setPasswordPolicy(PasswordPolicy.PASSWORD_HISTORY_ID + \"(2)\");\n-        assertChangePasswordSucceeds(\"password2\", \"password\");\n-    }\n-\n-    @Test\n-    public void changePasswordWithPasswordHistoryPolicyExpiration() {\n-        userId = createUser(\"test\", \"user-changePasswordWithPasswordHistoryPolicyExpiration\", \"password\");\n-\n-        setPasswordPolicy(PasswordPolicy.PASSWORD_HISTORY_ID + \"(3)\");\n-\n-        changePasswordPage.open();\n-        loginPage.login(\"user-changePasswordWithPasswordHistoryPolicyExpiration\", \"password\");\n-        events.expectLogin().user(userId).client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl() + \"?path=password\").assertEvent();\n-\n-        assertNumberOfStoredCredentials(1);\n-        assertChangePasswordSucceeds(\"password\",  \"password2\"); // current: password\n-        assertNumberOfStoredCredentials(2);\n-        assertChangePasswordSucceeds(\"password2\", \"password4\"); // current: password2, history: password\n-        assertNumberOfStoredCredentials(3);\n-\n-        setPasswordPolicy(PasswordPolicy.PASSWORD_HISTORY_ID + \"(2)\");\n-        assertChangePasswordSucceeds(\"password4\", \"password5\"); // current: password4, history: password2\n-        assertNumberOfStoredCredentials(2);\n-\n-        setPasswordPolicy(PasswordPolicy.PASSWORD_HISTORY_ID + \"(1)\");\n-        assertChangePasswordSucceeds(\"password5\", \"password6\"); // current: password5, history: -\n-        assertNumberOfStoredCredentials(1);\n-\n-        setPasswordPolicy(PasswordPolicy.PASSWORD_HISTORY_ID + \"(2)\");\n-        assertChangePasswordSucceeds(\"password6\", \"password7\"); // current: password6, history: password5\n-        assertNumberOfStoredCredentials(2);\n-\n-        setPasswordPolicy(PasswordPolicy.PASSWORD_HISTORY_ID + \"(0)\");\n-        assertChangePasswordSucceeds(\"password7\", \"password8\"); // current: password5, history: -\n-        assertNumberOfStoredCredentials(1);\n-    }\n-\n-    @Test\n-    public void changeProfile() throws Exception {\n-        setEditUsernameAllowed(false);\n-        setRegistrationEmailAsUsername(false);\n-\n-        profilePage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-\n-        events.expectLogin().client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl()).assertEvent();\n-\n-        Assert.assertEquals(\"test-user@localhost\", profilePage.getUsername());\n-        Assert.assertEquals(\"Tom\", profilePage.getFirstName());\n-        Assert.assertEquals(\"Brady\", profilePage.getLastName());\n-        Assert.assertEquals(\"test-user@localhost\", profilePage.getEmail());\n-\n-        // All fields are required, so there should be an error when something is missing.\n-        profilePage.updateProfile(\"\", \"New last\", \"new@email.com\");\n-\n-        Assert.assertEquals(\"Please specify first name.\", profilePage.getError());\n-        Assert.assertEquals(\"test-user@localhost\", profilePage.getUsername());\n-        Assert.assertEquals(\"\", profilePage.getFirstName());\n-        Assert.assertEquals(\"New last\", profilePage.getLastName());\n-        Assert.assertEquals(\"new@email.com\", profilePage.getEmail());\n-\n-        events.assertEmpty();\n-\n-        profilePage.updateProfile(\"New first\", \"\", \"new@email.com\");\n-\n-        Assert.assertEquals(\"Please specify last name.\", profilePage.getError());\n-        Assert.assertEquals(\"New first\", profilePage.getFirstName());\n-        Assert.assertEquals(\"\", profilePage.getLastName());\n-        Assert.assertEquals(\"new@email.com\", profilePage.getEmail());\n-\n-        events.assertEmpty();\n-\n-        profilePage.updateProfile(\"New first\", \"New last\", \"\");\n-\n-        Assert.assertEquals(\"Please specify email.\", profilePage.getError());\n-        Assert.assertEquals(\"New first\", profilePage.getFirstName());\n-        Assert.assertEquals(\"New last\", profilePage.getLastName());\n-        Assert.assertEquals(\"\", profilePage.getEmail());\n-\n-        events.assertEmpty();\n-\n-        profilePage.clickCancel();\n-\n-        Assert.assertEquals(\"test-user@localhost\", profilePage.getUsername());\n-        Assert.assertEquals(\"Tom\", profilePage.getFirstName());\n-        Assert.assertEquals(\"Brady\", profilePage.getLastName());\n-        Assert.assertEquals(\"test-user@localhost\", profilePage.getEmail());\n-\n-        events.assertEmpty();\n-\n-        profilePage.updateProfile(\"New first\", \"New last\", \"new@email.com\");\n-\n-        Assert.assertEquals(\"Your account has been updated.\", profilePage.getSuccess());\n-        Assert.assertEquals(\"test-user@localhost\", profilePage.getUsername());\n-        Assert.assertEquals(\"New first\", profilePage.getFirstName());\n-        Assert.assertEquals(\"New last\", profilePage.getLastName());\n-        Assert.assertEquals(\"new@email.com\", profilePage.getEmail());\n-\n-        events.expectAccount(EventType.UPDATE_EMAIL).detail(Details.PREVIOUS_EMAIL, \"test-user@localhost\").detail(Details.UPDATED_EMAIL, \"new@email.com\").assertEvent();\n-        events.expectAccount(EventType.UPDATE_PROFILE).assertEvent();\n-\n-        // reset user for other tests\n-        profilePage.updateProfile(\"Tom\", \"Brady\", \"test-user@localhost\");\n-        events.clear();\n-\n-        // Revert\n-        setEditUsernameAllowed(true);\n-    }\n-\n-    @Test\n-    public void changeProfileEmailAsUsernameEnabled() throws Exception {\n-        setRegistrationEmailAsUsername(true);\n-\n-        profilePage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-        assertFalse(driver.findElements(By.id(\"username\")).size() > 0);\n-\n-        // Revert\n-        setRegistrationEmailAsUsername(false);\n-\n-    }\n-\n-    // KEYCLOAK-5443\n-    @Test\n-    public void changeProfileEmailAsUsernameAndEditUsernameEnabled() throws Exception {\n-        setEditUsernameAllowed(true);\n-        setRegistrationEmailAsUsername(true);\n-\n-        profilePage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-        assertFalse(driver.findElements(By.id(\"username\")).size() > 0);\n-\n-        profilePage.updateProfile(\"New First\", \"New Last\", \"new-email@email\");\n-\n-        Assert.assertEquals(\"Your account has been updated.\", profilePage.getSuccess());\n-        Assert.assertEquals(\"New First\", profilePage.getFirstName());\n-        Assert.assertEquals(\"New Last\", profilePage.getLastName());\n-        Assert.assertEquals(\"new-email@email\", profilePage.getEmail());\n-\n-        List<UserRepresentation> list = adminClient.realm(\"test\").users().search(null, null, null, \"new-email@email\", null, null);\n-        assertEquals(1, list.size());\n-\n-        UserRepresentation user = list.get(0);\n-\n-        assertEquals(\"new-email@email\", user.getUsername());\n-\n-        // Revert\n-\n-        user.setUsername(\"test-user@localhost\");\n-        user.setFirstName(\"Tom\");\n-        user.setLastName(\"Brady\");\n-        user.setEmail(\"test-user@localhost\");\n-        adminClient.realm(\"test\").users().get(user.getId()).update(user);\n-\n-        setRegistrationEmailAsUsername(false);\n-        setEditUsernameAllowed(false);\n-    }\n-\n-    private void setEditUsernameAllowed(boolean allowed) {\n-        RealmRepresentation testRealm = testRealm().toRepresentation();\n-        testRealm.setEditUsernameAllowed(allowed);\n-        testRealm().update(testRealm);\n-    }\n-\n-    private void setRegistrationEmailAsUsername(boolean allowed) {\n-        RealmRepresentation testRealm = testRealm().toRepresentation();\n-        testRealm.setRegistrationEmailAsUsername(allowed);\n-        testRealm().update(testRealm);\n-    }\n-\n-    private void setDuplicateEmailsAllowed(boolean allowed) {\n-        RealmRepresentation testRealm = testRealm().toRepresentation();\n-        testRealm.setDuplicateEmailsAllowed(allowed);\n-        testRealm().update(testRealm);\n-    }\n-\n-    @Test\n-    public void changeUsername() {\n-        // allow to edit the username in realm\n-        setEditUsernameAllowed(true);\n-\n-        profilePage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-\n-        events.expectLogin().client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl()).assertEvent();\n-\n-        Assert.assertEquals(\"test-user@localhost\", profilePage.getUsername());\n-        Assert.assertEquals(\"Tom\", profilePage.getFirstName());\n-        Assert.assertEquals(\"Brady\", profilePage.getLastName());\n-        Assert.assertEquals(\"test-user@localhost\", profilePage.getEmail());\n-\n-        // All fields are required, so there should be an error when something is missing.\n-        profilePage.updateProfile(\"\", \"New first\", \"New last\", \"new@email.com\");\n-\n-        Assert.assertEquals(\"Please specify username.\", profilePage.getError());\n-        Assert.assertEquals(\"\", profilePage.getUsername());\n-        Assert.assertEquals(\"New first\", profilePage.getFirstName());\n-        Assert.assertEquals(\"New last\", profilePage.getLastName());\n-        Assert.assertEquals(\"new@email.com\", profilePage.getEmail());\n-\n-        events.assertEmpty();\n-\n-        // Change to the username already occupied by other user\n-        profilePage.updateProfile(\"test-user-no-access@localhost\", \"New first\", \"New last\", \"new@email.com\");\n-\n-        Assert.assertEquals(\"Username already exists.\", profilePage.getError());\n-        Assert.assertEquals(\"test-user-no-access@localhost\", profilePage.getUsername());\n-        Assert.assertEquals(\"New first\", profilePage.getFirstName());\n-        Assert.assertEquals(\"New last\", profilePage.getLastName());\n-        Assert.assertEquals(\"new@email.com\", profilePage.getEmail());\n-\n-        events.assertEmpty();\n-\n-        profilePage.updateProfile(\"test-user-new@localhost\", \"New first\", \"New last\", \"new@email.com\");\n-\n-        Assert.assertEquals(\"Your account has been updated.\", profilePage.getSuccess());\n-        Assert.assertEquals(\"test-user-new@localhost\", profilePage.getUsername());\n-        Assert.assertEquals(\"New first\", profilePage.getFirstName());\n-        Assert.assertEquals(\"New last\", profilePage.getLastName());\n-        Assert.assertEquals(\"new@email.com\", profilePage.getEmail());\n-\n-        // Revert\n-        profilePage.updateProfile(\"test-user@localhost\", \"Tom\", \"Brady\", \"test-user@localhost\");\n-    }\n-\n-    private void addUser(String username, String email) {\n-        UserRepresentation user = UserBuilder.create()\n-                                             .username(username)\n-                                             .enabled(true)\n-                                             .email(email)\n-                                             .firstName(\"first\")\n-                                             .lastName(\"last\")\n-                                             .build();\n-        ApiUtil.createUserAndResetPasswordWithAdminClient(testRealm(), user, \"password\");\n-    }\n-\n-    @Test\n-    public void changeUsernameLoginWithOldUsername() {\n-        addUser(\"change-username\", \"change-username@localhost\");\n-        setEditUsernameAllowed(true);\n-\n-        profilePage.open();\n-        loginPage.login(\"change-username\", \"password\");\n-\n-        profilePage.updateUsername(\"change-username-updated\");\n-\n-        Assert.assertEquals(\"Your account has been updated.\", profilePage.getSuccess());\n-\n-        profilePage.logout();\n-\n-        profilePage.open();\n-\n-        Assert.assertTrue(loginPage.isCurrent());\n-\n-        loginPage.login(\"change-username\", \"password\");\n-\n-        Assert.assertTrue(loginPage.isCurrent());\n-        Assert.assertEquals(\"Invalid username or password.\", loginPage.getInputError());\n-\n-        loginPage.login(\"change-username-updated\", \"password\");\n-    }\n-\n-    @Test\n-    public void changeEmailLoginWithOldEmail() {\n-        addUser(\"change-email\", \"change-username@localhost\");\n-        setEditUsernameAllowed(true);\n-\n-        profilePage.open();\n-        loginPage.login(\"change-username@localhost\", \"password\");\n-        profilePage.updateEmail(\"change-username-updated@localhost\");\n-\n-        Assert.assertEquals(\"Your account has been updated.\", profilePage.getSuccess());\n-\n-        profilePage.logout();\n-\n-        profilePage.open();\n-\n-        Assert.assertTrue(loginPage.isCurrent());\n-\n-        loginPage.login(\"change-username@localhost\", \"password\");\n-\n-        Assert.assertTrue(loginPage.isCurrent());\n-        Assert.assertEquals(\"Invalid username or password.\", loginPage.getInputError());\n-\n-        loginPage.login(\"change-username-updated@localhost\", \"password\");\n-    }\n-\n-    // KEYCLOAK-1534\n-    @Test\n-    public void changeEmailToExistingForbidden() {\n-        profilePage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-\n-        events.expectLogin().client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl()).assertEvent();\n-\n-        Assert.assertEquals(\"test-user@localhost\", profilePage.getUsername());\n-        Assert.assertEquals(\"test-user@localhost\", profilePage.getEmail());\n-\n-        // Change to the email, which some other user has\n-        profilePage.updateProfile(\"New first\", \"New last\", \"test-user-no-access@localhost\");\n-\n-        profilePage.assertCurrent();\n-        Assert.assertEquals(\"Email already exists.\", profilePage.getError());\n-        Assert.assertEquals(\"New first\", profilePage.getFirstName());\n-        Assert.assertEquals(\"New last\", profilePage.getLastName());\n-        Assert.assertEquals(\"test-user-no-access@localhost\", profilePage.getEmail());\n-\n-        events.assertEmpty();\n-\n-        // Change some other things, but not email\n-        profilePage.updateProfile(\"New first\", \"New last\", \"test-user@localhost\");\n-\n-        Assert.assertEquals(\"Your account has been updated.\", profilePage.getSuccess());\n-        Assert.assertEquals(\"New first\", profilePage.getFirstName());\n-        Assert.assertEquals(\"New last\", profilePage.getLastName());\n-        Assert.assertEquals(\"test-user@localhost\", profilePage.getEmail());\n-\n-        events.expectAccount(EventType.UPDATE_PROFILE).assertEvent();\n-\n-        // Change email and other things to original values\n-        profilePage.updateProfile(\"Tom\", \"Brady\", \"test-user@localhost\");\n-        events.expectAccount(EventType.UPDATE_PROFILE).assertEvent();\n-    }\n- \n-    @Test\n-    public void changeEmailToExistingAllowed() {\n-        setDuplicateEmailsAllowed(true); \n-        \n-        profilePage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-\n-        events.expectLogin().client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl()).assertEvent();\n-\n-        Assert.assertEquals(\"test-user@localhost\", profilePage.getUsername());\n-        Assert.assertEquals(\"test-user@localhost\", profilePage.getEmail());\n-\n-        // Change to the email, which some other user has\n-        profilePage.updateProfile(\"New first\", \"New last\", \"test-user-no-access@localhost\");\n-\n-        Assert.assertEquals(\"Your account has been updated.\", profilePage.getSuccess());\n-    }\n-\n-    public void totpPageSetup() {\n-        String pageSource = driver.getPageSource();\n-\n-        assertTrue(pageSource.contains(\"Install one of the following applications on your mobile\"));\n-        assertTrue(pageSource.contains(\"FreeOTP\"));\n-        assertTrue(pageSource.contains(\"Google Authenticator\"));\n-\n-        assertTrue(pageSource.contains(\"Open the application and scan the barcode\"));\n-        assertFalse(pageSource.contains(\"Open the application and enter the key\"));\n-\n-        assertTrue(pageSource.contains(\"Unable to scan?\"));\n-        assertFalse(pageSource.contains(\"Scan barcode?\"));\n-    }\n-\n-    public void totpPageSetupManual() {\n-        String pageSource = driver.getPageSource();\n-\n-        assertTrue(pageSource.contains(\"Install one of the following applications on your mobile\"));\n-        assertTrue(pageSource.contains(\"FreeOTP\"));\n-        assertTrue(pageSource.contains(\"Google Authenticator\"));\n-\n-        assertFalse(pageSource.contains(\"Open the application and scan the barcode\"));\n-        assertTrue(pageSource.contains(\"Open the application and enter the key\"));\n-\n-        assertFalse(pageSource.contains(\"Unable to scan?\"));\n-        assertTrue(pageSource.contains(\"Scan barcode?\"));\n-    }\n-\n-    @Test\n-    public void setupTotp() {\n-        totpPage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-\n-        events.expectLogin().client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl() + \"?path=totp\").assertEvent();\n-\n-        Assert.assertTrue(totpPage.isCurrent());\n-\n-        assertFalse(driver.getPageSource().contains(\"Remove Google\"));\n-\n-        totpPageSetup();\n-\n-        totpPage.clickManual();\n-\n-        assertTrue(UIUtils.getTextFromElement(driver.findElement(By.id(\"kc-totp-secret-key\"))).matches(\"[\\\\w]{4}( [\\\\w]{4}){7}\"));\n-\n-        assertEquals(\"Type: Time-based\", driver.findElement(By.id(\"kc-totp-type\")).getText());\n-        assertEquals(\"Algorithm: SHA1\", driver.findElement(By.id(\"kc-totp-algorithm\")).getText());\n-        assertEquals(\"Digits: 6\", driver.findElement(By.id(\"kc-totp-digits\")).getText());\n-        assertEquals(\"Interval: 30\", driver.findElement(By.id(\"kc-totp-period\")).getText());\n-\n-        // Error with false code\n-        totpPage.configure(totp.generateTOTP(totpPage.getTotpSecret() + \"123\"));\n-\n-        Assert.assertEquals(\"Invalid authenticator code.\", profilePage.getError());\n-\n-        totpPage.configure(totp.generateTOTP(totpPage.getTotpSecret()));\n-\n-        Assert.assertEquals(\"Mobile authenticator configured.\", profilePage.getSuccess());\n-\n-        events.expectAccount(EventType.UPDATE_TOTP).assertEvent();\n-\n-        Assert.assertTrue(driver.getPageSource().contains(\"pficon-delete\"));\n-\n-        totpPage.removeTotp();\n-\n-        events.expectAccount(EventType.REMOVE_TOTP).assertEvent();\n-        // KEYCLOAK-12163\n-        totpPageSetupManual();\n-\n-        accountPage.logOut();\n-\n-        assertFalse(errorPage.isCurrent());\n-    }\n-\n-\n-    @Test\n-    public void removeTotpAsDifferentUser() {\n-        UserResource user1 = ApiUtil.findUserByUsernameId(testRealm(), \"user-with-one-configured-otp\");\n-        CredentialRepresentation otpCredential = user1.credentials().stream()\n-                .filter(credentialRep -> OTPCredentialModel.TYPE.equals(credentialRep.getType()))\n-                .findFirst()\n-                .get();\n-\n-        // Login as evil user (test-user@localhost) and setup TOTP\n-        totpPage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-        Assert.assertTrue(totpPage.isCurrent());\n-\n-        totpPageSetup();\n-\n-        totpPage.configure(totp.generateTOTP(totpPage.getTotpSecret()));\n-\n-        Assert.assertEquals(\"Mobile authenticator configured.\", profilePage.getSuccess());\n-\n-        String currentStateChecker = driver.findElement(By.id(\"stateChecker\")).getAttribute(\"value\");\n-\n-\n-        // Try to delete TOTP of \"user-with-one-configured-otp\" by replace ID of the TOTP credential in the request\n-        String currentURL = driver.getCurrentUrl();\n-\n-        String formParameters = \"stateChecker=\" + currentStateChecker\n-                + \"&submitAction=Delete\"\n-                + \"&credentialId=\" + otpCredential.getId();\n-\n-        URLUtils.sendPOSTRequestWithWebDriver(currentURL, formParameters);\n-\n-        // Assert credential of \"user-with-one-configured-otp\" was NOT deleted and is still present for the user\n-        Assert.assertTrue(user1.credentials().stream()\n-                .anyMatch(credentialRepresentation -> credentialRepresentation.getType().equals(OTPCredentialModel.TYPE)));\n-\n-        // Remove TOTP for \"test-user\" and logout\n-        totpPage.removeTotp();\n-        totpPage.logout();\n-    }\n-\n-    @Test\n-    public void changeProfileNoAccess() throws Exception {\n-        profilePage.open();\n-        loginPage.login(\"test-user-no-access@localhost\", \"password\");\n-\n-        UserRepresentation noAccessUser = this.findUser(\"test-user-no-access@localhost\");\n-        events.expectLogin().client(\"account\").user(noAccessUser.getId())\n-                .detail(Details.USERNAME, \"test-user-no-access@localhost\")\n-                .detail(Details.REDIRECT_URI, getAccountRedirectUrl()).assertEvent();\n-\n-        Assert.assertTrue(\"Expected errorPage but was \" + driver.getTitle() + \" (\" + driver.getCurrentUrl() + \"). Page source: \" + driver.getPageSource(), errorPage.isCurrent());\n-        Assert.assertEquals(\"No access\", errorPage.getError());\n-    }\n-\n-    private void setEventsEnabled(boolean eventsEnabled) {\n-        RealmRepresentation testRealm = testRealm().toRepresentation();\n-        testRealm.setEventsEnabled(eventsEnabled);\n-        testRealm().update(testRealm);\n-    }\n-\n-\n-    @Test\n-    public void viewLogNotEnabled() {\n-        logPage.open();\n-        assertTrue(errorPage.isCurrent());\n-        assertEquals(\"Page not found\", errorPage.getError());\n-    }\n-\n-    @Test\n-    public void viewLog() {\n-        setEventsEnabled(true);\n-\n-        List<EventRepresentation> expectedEvents = new LinkedList<>();\n-\n-        loginPage.open();\n-        loginPage.clickRegister();\n-\n-        registerPage.register(\"view\", \"log\", \"view-log@localhost\", \"view-log\", \"password\", \"password\");\n-\n-        expectedEvents.add(events.poll());\n-        expectedEvents.add(events.poll());\n-\n-        profilePage.open();\n-        profilePage.updateProfile(\"view\", \"log2\", \"view-log@localhost\");\n-\n-        expectedEvents.add(events.poll());\n-\n-        logPage.open();\n-\n-        Assert.assertTrue(logPage.isCurrent());\n-\n-        List<List<String>> actualEvents = logPage.getEvents();\n-\n-        Assert.assertEquals(expectedEvents.size(), actualEvents.size());\n-\n-        for (EventRepresentation e : expectedEvents) {\n-            boolean match = false;\n-            for (List<String> a : logPage.getEvents()) {\n-                if (e.getType().toString().replace('_', ' ').toLowerCase().equals(a.get(1)) &&\n-                        e.getIpAddress().equals(a.get(2)) &&\n-                        e.getClientId().equals(a.get(3))) {\n-                    match = true;\n-                    break;\n-                }\n-            }\n-            if (!match) {\n-                Assert.fail(\"Event not found \" + e.getType());\n-            }\n-        }\n-\n-        setEventsEnabled(false);\n-    }\n-\n-    @Test\n-    @AuthServerContainerExclude(AuthServer.REMOTE) // we need to do domain name -> ip address to make this test work in remote testing\n-    public void sessions() {\n-        loginPage.open();\n-        loginPage.clickRegister();\n-\n-        registerPage.register(\"view\", \"sessions\", \"view-sessions@localhost\", \"view-sessions\", \"password\", \"password\");\n-\n-        EventRepresentation registerEvent = events.expectRegister(\"view-sessions\", \"view-sessions@localhost\").assertEvent();\n-        String userId = registerEvent.getUserId();\n-\n-        events.expectLogin().user(userId).detail(Details.USERNAME, \"view-sessions\").assertEvent();\n-\n-        sessionsPage.open();\n-\n-        Assert.assertTrue(sessionsPage.isCurrent());\n-\n-        List<List<String>> sessions = sessionsPage.getSessions();\n-        assertThat(sessions, hasSize(1));\n-        assertThat(sessions.get(0).get(0), anyOf(equalTo(\"127.0.0.1\"), equalTo(\"0:0:0:0:0:0:0:1\")));\n-\n-        // Create second session\n-        try {\n-            OAuthClient oauth2 = new OAuthClient();\n-            oauth2.init(driver2);\n-            oauth2.doLogin(\"view-sessions\", \"password\");\n-\n-            EventRepresentation login2Event = events.expectLogin().user(userId).detail(Details.USERNAME, \"view-sessions\").assertEvent();\n-\n-            sessionsPage.open();\n-            sessions = sessionsPage.getSessions();\n-            Assert.assertEquals(2, sessions.size());\n-\n-            sessionsPage.logoutAll();\n-\n-            events.expectLogout(registerEvent.getSessionId());\n-            events.expectLogout(login2Event.getSessionId());\n-        } finally {\n-            driver2.close();\n-        }\n-    }\n-\n-    // KEYCLOAK-5155\n-    @Test\n-    public void testConsoleListedInApplications() {\n-        applicationsPage.open();\n-        loginPage.login(\"realm-admin\", \"password\");\n-        Assert.assertTrue(applicationsPage.isCurrent());\n-        Map<String, AccountApplicationsPage.AppEntry> apps = applicationsPage.getApplications();\n-        Assert.assertThat(apps.keySet(), hasItems(\"Admin CLI\", \"Security Admin Console\"));\n-        events.clear();\n-    }\n-\n-    @Test\n-    @AuthServerContainerExclude(AuthServer.REMOTE)\n-    public void applicationsVisibilityNoScopesNoConsent() throws Exception {\n-        try (ClientAttributeUpdater cau = ClientAttributeUpdater.forClient(adminClient, REALM_NAME, ROOT_URL_CLIENT)\n-          .setConsentRequired(false)\n-          .setFullScopeAllowed(false)\n-          .setDefaultClientScopes(Collections.EMPTY_LIST)\n-          .setOptionalClientScopes(Collections.EMPTY_LIST)\n-          .update();\n-          RoleScopeUpdater rsu = cau.realmRoleScope().update()) {\n-            applicationsPage.open();\n-            loginPage.login(\"john-doh@localhost\", \"password\");\n-            applicationsPage.assertCurrent();\n-\n-            Map<String, AccountApplicationsPage.AppEntry> apps = applicationsPage.getApplications();\n-            Assert.assertThat(apps.keySet(), containsInAnyOrder(\n-              /* \"root-url-client\", */ \"Account\", \"Account Console\", \"test-app\", \"test-app-scope\", \"third-party\", \"test-app-authz\", \"My Named Test App\", \"Test App Named - ${client_account}\", \"direct-grant\", \"custom-audience\"));\n-\n-            rsu.add(testRealm().roles().get(\"user\").toRepresentation())\n-              .update();\n-\n-            driver.navigate().refresh();\n-            apps = applicationsPage.getApplications();\n-            Assert.assertThat(apps.keySet(), containsInAnyOrder(\n-              \"root-url-client\", \"Account\", \"Account Console\", \"test-app\", \"test-app-scope\", \"third-party\", \"test-app-authz\", \"My Named Test App\", \"Test App Named - ${client_account}\", \"direct-grant\", \"custom-audience\"));\n-        }\n-    }\n-\n-    @Test\n-    @AuthServerContainerExclude(AuthServer.REMOTE)\n-    public void applicationsVisibilityNoScopesAndConsent() throws Exception {\n-        try (ClientAttributeUpdater cau = ClientAttributeUpdater.forClient(adminClient, REALM_NAME, ROOT_URL_CLIENT)\n-          .setConsentRequired(true)\n-          .setFullScopeAllowed(false)\n-          .setDefaultClientScopes(Collections.EMPTY_LIST)\n-          .setOptionalClientScopes(Collections.EMPTY_LIST)\n-          .update()) {\n-            applicationsPage.open();\n-            loginPage.login(\"john-doh@localhost\", \"password\");\n-            applicationsPage.assertCurrent();\n-\n-            Map<String, AccountApplicationsPage.AppEntry> apps = applicationsPage.getApplications();\n-            Assert.assertThat(apps.keySet(), containsInAnyOrder(\n-              \"root-url-client\", \"Account\", \"Account Console\", \"test-app\", \"test-app-scope\", \"third-party\", \"test-app-authz\", \"My Named Test App\", \"Test App Named - ${client_account}\", \"direct-grant\", \"custom-audience\"));\n-        }\n-    }\n-\n-    // More tests (including revoke) are in OAuthGrantTest and OfflineTokenTest\n-    @Test\n-    @AuthServerContainerExclude(AuthServer.REMOTE)\n-    public void applications() {\n-        applicationsPage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-\n-        events.expectLogin().client(\"account\").detail(Details.REDIRECT_URI, getAccountRedirectUrl() + \"?path=applications\").assertEvent();\n-        applicationsPage.assertCurrent();\n-\n-        Map<String, AccountApplicationsPage.AppEntry> apps = applicationsPage.getApplications();\n-        Assert.assertThat(apps.keySet(), containsInAnyOrder(\"root-url-client\", \"Account\", \"Account Console\", \"Broker\", \"test-app\", \"test-app-scope\", \"third-party\", \"test-app-authz\", \"My Named Test App\", \"Test App Named - ${client_account}\", \"direct-grant\", \"custom-audience\"));\n-\n-        AccountApplicationsPage.AppEntry accountEntry = apps.get(\"Account\");\n-        Assert.assertThat(accountEntry.getRolesAvailable(), containsInAnyOrder(\n-          \"Manage account links in Account\",\n-          \"Manage account in Account\",\n-          \"View profile in Account\",\n-          \"Offline access\"\n-        ));\n-        Assert.assertThat(accountEntry.getClientScopesGranted(), containsInAnyOrder(\"Full Access\"));\n-        Assert.assertEquals(oauth.AUTH_SERVER_ROOT + \"/realms/test/account/\", accountEntry.getHref());\n-\n-        AccountApplicationsPage.AppEntry testAppEntry = apps.get(\"test-app\");\n-        Assert.assertEquals(6, testAppEntry.getRolesAvailable().size());\n-        Assert.assertTrue(testAppEntry.getRolesAvailable().contains(\"Offline access\"));\n-        Assert.assertTrue(testAppEntry.getClientScopesGranted().contains(\"Full Access\"));\n-        Assert.assertEquals(oauth.APP_AUTH_ROOT, testAppEntry.getHref());\n-\n-        AccountApplicationsPage.AppEntry thirdPartyEntry = apps.get(\"third-party\");\n-        Assert.assertEquals(3, thirdPartyEntry.getRolesAvailable().size());\n-        Assert.assertTrue(thirdPartyEntry.getRolesAvailable().contains(\"Have User privileges\"));\n-        Assert.assertTrue(thirdPartyEntry.getRolesAvailable().contains(\"Have Customer User privileges in test-app\"));\n-        Assert.assertEquals(0, thirdPartyEntry.getClientScopesGranted().size());\n-        Assert.assertEquals(\"http://localhost:8180/auth/realms/master/app/auth\", thirdPartyEntry.getHref());\n-\n-        AccountApplicationsPage.AppEntry testAppNamed = apps.get(\"Test App Named - ${client_account}\");\n-        Assert.assertEquals(\"http://localhost:8180/varnamedapp/base\", testAppNamed.getHref());\n-\n-        AccountApplicationsPage.AppEntry rootUrlClient = apps.get(\"root-url-client\");\n-        Assert.assertEquals(\"http://localhost:8180/foo/bar/baz\", rootUrlClient.getHref());\n-\n-        AccountApplicationsPage.AppEntry authzApp = apps.get(\"test-app-authz\");\n-        Assert.assertEquals(oauth.SERVER_ROOT + \"/test-app-authz\", authzApp.getHref());\n-\n-        AccountApplicationsPage.AppEntry namedApp = apps.get(\"My Named Test App\");\n-        Assert.assertEquals(\"http://localhost:8180/namedapp/base\", namedApp.getHref());\n-\n-        AccountApplicationsPage.AppEntry testAppScope = apps.get(\"test-app-scope\");\n-        Assert.assertNull(testAppScope.getHref());\n-    }\n-\n-    @Test\n-    public void loginToSpecificPage() {\n-        changePasswordPage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-\n-        Assert.assertTrue(changePasswordPage.isCurrent());\n-\n-        events.clear();\n-    }\n-\n-    @Test\n-    public void loginToSpecificPageWithReferrer() {\n-        driver.navigate().to(changePasswordPage.getPath() + \"?referrer=account\");\n-        System.out.println(driver.getCurrentUrl());\n-\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-        System.out.println(driver.getCurrentUrl());\n-\n-        Assert.assertTrue(changePasswordPage.isCurrent());\n-\n-        events.clear();\n-    }\n-\n-    @Test\n-    public void testIdentityProviderCapitalization(){\n-        loginPage.open();\n-        Assert.assertEquals(\"GitHub\", loginPage.findSocialButton(\"github\").getText());\n-        Assert.assertEquals(\"mysaml\", loginPage.findSocialButton(\"mysaml\").getText());\n-        Assert.assertEquals(\"MyOIDC\", loginPage.findSocialButton(\"myoidc\").getText());\n-    }\n-    \n-    @Test\n-    public void testIdentityProviderHiddenOnLoginPageIsVisbleInAccount(){\n-        federatedIdentityPage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-        Assert.assertNotNull(federatedIdentityPage.findAddProvider(\"myhiddenoidc\"));\n-    }\n-\n-    @Test\n-    public void testInvalidReferrer() {\n-        driver.navigate().to(profilePage.getPath() + \"?referrer=test-app\");\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-        Assert.assertTrue(profilePage.isCurrent());\n-        profilePage.backToApplication();\n-\n-        Assert.assertTrue(appPage.isCurrent());\n-\n-        driver.navigate().to(profilePage.getPath() + \"?referrer=test-invalid&referrer_uri=http://localhost:8180/auth/realms/master/app/auth?test\");\n-        Assert.assertTrue(profilePage.isCurrent());\n-\n-        events.clear();\n-    }\n-\n-    @Test\n-    public void testReferrerLinkContents() {\n-        RealmResource testRealm = testRealm();\n-        List<ClientRepresentation> foundClients = testRealm.clients().findByClientId(\"named-test-app\");\n-        if (foundClients.isEmpty()) {\n-            Assert.fail(\"Unable to find named-test-app\");\n-        }\n-        ClientRepresentation namedClient = foundClients.get(0);\n-        \n-        driver.navigate().to(profilePage.getPath() + \"?referrer=\" + namedClient.getClientId());\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-        Assert.assertTrue(profilePage.isCurrent());\n-        // When a client has a name provided, the name should be available to the back link\n-        Assert.assertEquals(\"Back to \" + namedClient.getName(), profilePage.getBackToApplicationLinkText());\n-        Assert.assertEquals(namedClient.getBaseUrl(), profilePage.getBackToApplicationLinkHref());\n-\n-        foundClients = testRealm.clients().findByClientId(\"var-named-test-app\");\n-        if (foundClients.isEmpty()) {\n-            Assert.fail(\"Unable to find var-named-test-app\");\n-        }\n-        namedClient = foundClients.get(0);\n-\n-        driver.navigate().to(profilePage.getPath() + \"?referrer=\" + namedClient.getClientId());\n-        Assert.assertTrue(profilePage.isCurrent());\n-        // When a client has a name provided as a variable, the name should be resolved using a localized bundle and available to the back link\n-        Assert.assertEquals(\"Back to Test App Named - Account\", profilePage.getBackToApplicationLinkText());\n-        Assert.assertEquals(namedClient.getBaseUrl(), profilePage.getBackToApplicationLinkHref());\n-\n-\n-        foundClients = testRealm.clients().findByClientId(\"test-app\");\n-        if (foundClients.isEmpty()) {\n-            Assert.fail(\"Unable to find test-app\");\n-        }\n-        ClientRepresentation namelessClient = foundClients.get(0);\n-        \n-        driver.navigate().to(profilePage.getPath() + \"?referrer=\" + namelessClient.getClientId());\n-        Assert.assertTrue(profilePage.isCurrent());\n-        // When a client has no name provided, the client-id should be available to the back link\n-        Assert.assertEquals(\"Back to \" + namelessClient.getClientId(), profilePage.getBackToApplicationLinkText());\n-        Assert.assertEquals(namelessClient.getBaseUrl(), profilePage.getBackToApplicationLinkHref());\n-\n-        driver.navigate().to(profilePage.getPath() + \"?referrer=test-invalid\");\n-        Assert.assertTrue(profilePage.isCurrent());\n-        // When a client is invalid, the back link should not exist\n-        Assert.assertNull(profilePage.getBackToApplicationLinkText());\n-\n-        events.clear();\n-    }\n-\n-    @Test\n-    public void testNoPublicKeyCredentialRelatedElementsPresentOnEditAccountScreen() {\n-        profilePage.open();\n-        loginPage.login(\"test-user@localhost\", \"password\");\n-        Assert.assertTrue(profilePage.isCurrent());\n-\n-        int noSuchElementExceptionCount = 0;\n-        for (String pkcElementId : Arrays.asList(\"user.attributes.public_key_credential_id\",\n-                                                 \"user.attributes.public_key_credential_label\",\n-                                                 \"user.attributes.public_key_credential_aaguid\")) {\n-            try {\n-                DroneUtils.getCurrentDriver().findElement(By.id(pkcElementId));\n-            } catch (NoSuchElementException nsee) {\n-                // Expected to happen in every iteration of the for loop\n-                noSuchElementExceptionCount++;\n-            }\n-        }\n-        // None of PK credential ID, label, and AAGUID can be present on Edit Account screen\n-        assertEquals(3, noSuchElementExceptionCount);\n-    }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "7522d5ac74963fe6632f048a0616e39d87165ed9", "message": "Merge commit", "committedDate": null}, {"oid": "0afd55f32c8f833dba9958cb3dd7c297dccb3edc", "committedDate": "2020-11-23 20:56:05 +0100", "message": "KEYCLOAK-14547: Make New Account Console the default."}, {"oid": "edef93cd491e545de642fd39d0df0a53cecee830", "committedDate": "2020-12-07 19:48:35 +0100", "message": "[KEYCLOAK-16232] Streamify the UserCredentialStore and UserCredentialManager interfaces"}, {"oid": "ba8e2fef6b0a47727f03d58f4fe2809d6e65c017", "committedDate": "2021-01-18 16:56:10 +0100", "message": "KEYCLOAK-15524 Cleanup user related interfaces"}, {"oid": "ca2a761d4b58940e1a2af31b1d7258e85159d50e", "committedDate": "2021-02-12 12:01:50 -0300", "message": "[KEYCLOAK-16886] - Updating user account removes attributes"}, {"oid": "9356843c6c3d7097d010b3bb6f91e25fcaba378c", "committedDate": "2021-02-19 08:38:49 +0100", "message": "[KEYCLOAK-16521] - Fixing secret for non-confidential clients"}, {"oid": "23bfaef4bb9482914fe3a980091496b9f379759a", "committedDate": "2021-03-04 08:06:36 +0100", "message": "KEYCLOAK-15535 Account Log of user login with realm not available details when update profile"}, {"oid": "61aa4e6a70f2f68052483fc699abe930abc15886", "committedDate": "2021-07-19 11:19:29 -0300", "message": "KEYCLOAK-18750 - Set \"Email Verified\" to false when email changed in UserProfile Provider"}, {"oid": "2be5f528e45d89778f8bbdea0556806a1d20d569", "committedDate": "2021-09-15 08:26:01 -0300", "message": "KEYCLOAK-18700 - consistently record User profile attribute changes in UPDATE_PROFILE event"}, {"oid": "722ce950bfa477008016b148a07d20568a364b6b", "committedDate": "2022-03-04 14:15:14 +0100", "message": "Improve user search performance"}, {"oid": "caebe50d7e82aba9a55d9b09cb52066a88a218f8", "committedDate": "2022-04-06 13:00:38 +0200", "message": "Updates patternfly libs and fixes breaking changes (#10748)"}, {"oid": "ac79fd0c23c6947a04073afc61e30d341498438e", "committedDate": "2022-04-20 15:53:15 +0200", "message": "Disallow special characters in usernames to prevent confusion with similarly looking usernames (#11531)"}, {"oid": "6f287e7ded58bf31cab2c9e88dad256029faf791", "committedDate": "2022-06-21 08:53:06 +0200", "message": "Avoid using methods on UserCredentialStoreManager"}, {"oid": "e396d0daa1fed0cb82cf761fe3b461ba24118a10", "committedDate": "2022-06-21 08:53:06 +0200", "message": "Renaming SingleUserCredentialManager and UserModel.getUserCredentialManager(): - class SingleUserCredentialManager to SingleEntityCredentialManager - method UserModel.getUserCredentialManager() to credentialManager()"}, {"oid": "aa5a4e3d843ccadfa2a07d104cae9bcfa8e14d7f", "committedDate": "2022-09-13 12:49:40 +0200", "message": "Remove remote WildFly server from the testsuite (#14321)"}, {"oid": "17117820cc14f87f5990ddce80ef38a0e2e7f314", "committedDate": "2022-10-28 12:26:59 +0200", "message": "Remove AccountFormServiceTest (#15197)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI1NDg1NQ==", "url": "https://github.com/keycloak/keycloak/pull/7554#discussion_r517254855", "body": "Did you try to run the SSSD tests? I believe they are excluded by default.", "bodyText": "Did you try to run the SSSD tests? I believe they are excluded by default.", "bodyHTML": "<p dir=\"auto\">Did you try to run the SSSD tests? I believe they are excluded by default.</p>", "author": "vmuzikar", "createdAt": "2020-11-04T10:47:18Z", "path": "testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java", "diffHunk": "@@ -188,7 +185,7 @@ public void changeReadOnlyProfile() throws Exception {\n \n         profilePage.updateProfile(\"New first\", \"New last\", \"new@email.com\");\n \n-        Assert.assertEquals(\"You can't update your account as it is read-only.\", profilePage.getError());", "originalCommit": "9ad14856e4c8b43cbb0122d40dd6993fb94bd886", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM3NTk2NA==", "url": "https://github.com/keycloak/keycloak/pull/7554#discussion_r517375964", "bodyText": "I'm not sure, I'll take a look at this. Thanks!", "author": "mabartos", "createdAt": "2020-11-04T14:18:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI1NDg1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "2e2f584b2695e4bc1791b8eb55e5d566374549c8", "changed_code": [{"header": "diff --git a/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java b/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java\nindex 5724d7cb8b..fab7c6b011 100644\n--- a/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java\n+++ b/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java\n", "chunk": "@@ -185,7 +185,7 @@ public class SSSDTest extends AbstractKeycloakTest {\n \n         profilePage.updateProfile(\"New first\", \"New last\", \"new@email.com\");\n \n-        Assert.assertEquals(\"You can't update your account as it is read-only.\", profilePage.getAlertError());\n+        Assert.assertEquals(\"You can't update your account as it is read-only.\", profilePage.getError());\n     }\n \n     @Test\n", "next_change": null}]}, "revised_code_in_main": {"commit": "7522d5ac74963fe6632f048a0616e39d87165ed9", "changed_code": [{"header": "diff --git a/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java b/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java\nindex 5724d7cb8b..fab7c6b011 100644\n--- a/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java\n+++ b/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java\n", "chunk": "@@ -185,7 +185,7 @@ public class SSSDTest extends AbstractKeycloakTest {\n \n         profilePage.updateProfile(\"New first\", \"New last\", \"new@email.com\");\n \n-        Assert.assertEquals(\"You can't update your account as it is read-only.\", profilePage.getAlertError());\n+        Assert.assertEquals(\"You can't update your account as it is read-only.\", profilePage.getError());\n     }\n \n     @Test\n", "next_change": {"commit": "bfce612641a70e106b20b136431f0e4046b5c37f", "changed_code": [{"header": "diff --git a/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java b/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java\nindex fab7c6b011..02cf26c651 100644\n--- a/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java\n+++ b/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java\n", "chunk": "@@ -160,32 +166,32 @@ public class SSSDTest extends AbstractKeycloakTest {\n \n         profilePage.open();\n         String username = getUsername();\n-        Assert.assertEquals(\"Browser should be on login page now\", \"Sign in to \" + REALM_NAME, driver.getTitle());\n+        assertThat(\"Browser should be on login page now\", driver.getTitle(), is(\"Sign in to \" + REALM_NAME));\n         accountLoginPage.login(username, getPassword(username));\n-        Assert.assertTrue(profilePage.isCurrent());\n+        assertThat(profilePage.isCurrent(), is(true));\n         verifyUserGroups(username, getGroups(username));\n \n         int componentsListSize = adminClient.realm(REALM_NAME).components().query().size();\n         adminClient.realm(REALM_NAME).components().component(SSSDFederationID).remove();\n-        Assert.assertEquals(componentsListSize - 1, adminClient.realm(REALM_NAME).components().query().size());\n+        assertThat(adminClient.realm(REALM_NAME).components().query().size(), is(componentsListSize - 1));\n     }\n \n \n     @Test\n-    public void changeReadOnlyProfile() throws Exception {\n+    public void changeReadOnlyProfile() {\n \n         String username = getUsername();\n         profilePage.open();\n         accountLoginPage.login(username, getPassword(username));\n \n-        Assert.assertEquals(username, profilePage.getUsername());\n-        Assert.assertEquals(sssdConfig.getProperty(\"user.\" + username + \".firstname\"), profilePage.getFirstName());\n-        Assert.assertEquals(sssdConfig.getProperty(\"user.\" + username + \".lastname\"), profilePage.getLastName());\n-        Assert.assertEquals(sssdConfig.getProperty(\"user.\" + username + \".mail\"), profilePage.getEmail());\n+        assertThat(profilePage.getUsername(), is(username));\n+        assertThat(sssdConfig.getProperty(\"user.\" + username + \".firstname\"), is(profilePage.getFirstName()));\n+        assertThat(sssdConfig.getProperty(\"user.\" + username + \".lastname\"), is(profilePage.getLastName()));\n+        assertThat(sssdConfig.getProperty(\"user.\" + username + \".mail\"), is(profilePage.getEmail()));\n \n         profilePage.updateProfile(\"New first\", \"New last\", \"new@email.com\");\n \n-        Assert.assertEquals(\"You can't update your account as it is read-only.\", profilePage.getError());\n+        assertThat(profilePage.getError(), is(\"You can't update your account as it is read-only.\"));\n     }\n \n     @Test\n", "next_change": {"commit": "ff27f6c77c7d99ba341921d8335241bc5eceae91", "changed_code": [{"header": "diff --git a/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java b/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java\nindex 02cf26c651..9a4dc90d23 100644\n--- a/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java\n+++ b/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java\n", "chunk": "@@ -197,10 +195,10 @@ public class SSSDTest extends AbstractKeycloakTest {\n     @Test\n     public void changeReadOnlyPassword() {\n         String username = getUsername();\n-        changePasswordPage.open();\n+        accountLoginPage.open();\n         accountLoginPage.login(username, getPassword(username));\n \n-        changePasswordPage.changePassword(getPassword(username), \"new-password\", \"new-password\");\n+        Assert.assertFalse(AccountHelper.updatePassword(adminClient.realm(REALM_NAME), getPassword(username), \"new-password\"));\n         assertThat(profilePage.getError(), is(\"You can't update your password as your account is read only.\"));\n     }\n \n", "next_change": {"commit": "025778fe9c745316f80b53fe3052aeb314e868ef", "changed_code": [{"header": "diff --git a/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java b/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java\nindex 9a4dc90d23..54e8f541b9 100644\n--- a/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java\n+++ b/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java\n", "chunk": "@@ -179,27 +195,39 @@ public class SSSDTest extends AbstractKeycloakTest {\n     public void changeReadOnlyProfile() {\n \n         String username = getUsername();\n-        profilePage.open();\n-        accountLoginPage.login(username, getPassword(username));\n \n-        assertThat(profilePage.getUsername(), is(username));\n-        assertThat(sssdConfig.getProperty(\"user.\" + username + \".firstname\"), is(profilePage.getFirstName()));\n-        assertThat(sssdConfig.getProperty(\"user.\" + username + \".lastname\"), is(profilePage.getLastName()));\n-        assertThat(sssdConfig.getProperty(\"user.\" + username + \".mail\"), is(profilePage.getEmail()));\n+        testLoginSuccess(username);\n \n-        profilePage.updateProfile(\"New first\", \"New last\", \"new@email.com\");\n+        RealmResource realm = adminClient.realm(REALM_NAME);\n+        List<UserRepresentation> users = realm.users().search(username, true);\n+        Assert.assertEquals(1, users.size());\n+        UserRepresentation user = users.iterator().next();\n+        user.setLastName(\"changed\");\n \n-        assertThat(profilePage.getError(), is(\"You can't update your account as it is read-only.\"));\n+        BadRequestException e = Assert.assertThrows(BadRequestException.class,\n+                () -> realm.users().get(users.iterator().next().getId()).update(user));\n+        ErrorRepresentation error = e.getResponse().readEntity(ErrorRepresentation.class);\n+        Assert.assertEquals(\"User is read only!\", error.getErrorMessage());\n     }\n \n     @Test\n     public void changeReadOnlyPassword() {\n         String username = getUsername();\n-        accountLoginPage.open();\n-        accountLoginPage.login(username, getPassword(username));\n \n-        Assert.assertFalse(AccountHelper.updatePassword(adminClient.realm(REALM_NAME), getPassword(username), \"new-password\"));\n-        assertThat(profilePage.getError(), is(\"You can't update your password as your account is read only.\"));\n+        testLoginSuccess(username);\n+\n+        RealmResource realm = adminClient.realm(REALM_NAME);\n+        List<UserRepresentation> users = realm.users().search(username, true);\n+        Assert.assertEquals(1, users.size());\n+        CredentialRepresentation newPassword = new CredentialRepresentation();\n+        newPassword.setType(CredentialRepresentation.PASSWORD);\n+        newPassword.setValue(\"new-password-123!\");\n+        newPassword.setTemporary(false);\n+\n+        BadRequestException e = Assert.assertThrows(BadRequestException.class,\n+                () -> realm.users().get(users.iterator().next().getId()).resetPassword(newPassword));\n+        OAuth2ErrorRepresentation error = e.getResponse().readEntity(OAuth2ErrorRepresentation.class);\n+        Assert.assertEquals(\"Can't reset password as account is read only\", error.getError());\n     }\n \n     private void verifyUserGroups(String username, List<String> groups) {\n", "next_change": null}, {"header": "diff --git a/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java b/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java\nindex 9a4dc90d23..54e8f541b9 100644\n--- a/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java\n+++ b/testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java\n", "chunk": "@@ -207,11 +235,8 @@ public class SSSDTest extends AbstractKeycloakTest {\n         assertThat(\"There must be at least one user\", users.size(), greaterThan(0));\n         assertThat(\"Exactly our test user\", users.get(0).getUsername(), is(username));\n         List<GroupRepresentation> assignedGroups = adminClient.realm(REALM_NAME).users().get(users.get(0).getId()).groups();\n-        assertThat(\"User must have exactly \" + groups.size() + \" groups\", assignedGroups.size(), is(groups.size()));\n-\n-        for (GroupRepresentation group : assignedGroups) {\n-            assertThat(groups.contains(group.getName()), is(true));\n-        }\n+        List<String> assignedGroupNames = assignedGroups.stream().map(GroupRepresentation::getName).collect(Collectors.toList());\n+        MatcherAssert.assertThat(assignedGroupNames, Matchers.hasItems(groups.toArray(new String[0])));\n     }\n \n     private String getUsername() {\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "7522d5ac74963fe6632f048a0616e39d87165ed9", "message": "Merge commit", "committedDate": null}, {"oid": "0afd55f32c8f833dba9958cb3dd7c297dccb3edc", "committedDate": "2020-11-23 20:56:05 +0100", "message": "KEYCLOAK-14547: Make New Account Console the default."}, {"oid": "bfce612641a70e106b20b136431f0e4046b5c37f", "committedDate": "2021-11-02 08:42:07 +0100", "message": "KEYCLOAK-18338 Fix update user account with configured SSSD"}, {"oid": "ff27f6c77c7d99ba341921d8335241bc5eceae91", "committedDate": "2023-03-29 21:54:00 +0200", "message": "Fix SSSDTest closes #19397"}, {"oid": "025778fe9c745316f80b53fe3052aeb314e868ef", "committedDate": "2023-05-09 11:32:52 +0200", "message": "SSSD User Federation integration for quarkus distribution Closes https://github.com/keycloak/keycloak/issues/16165"}]}, {"oid": "2e2f584b2695e4bc1791b8eb55e5d566374549c8", "url": "https://github.com/keycloak/keycloak/commit/2e2f584b2695e4bc1791b8eb55e5d566374549c8", "message": "Remove separate error class", "committedDate": "2020-11-04T15:59:40Z", "type": "forcePushed"}, {"oid": "e32fb16b1c9a401f685ac5a11f2336cec5e227c5", "url": "https://github.com/keycloak/keycloak/commit/e32fb16b1c9a401f685ac5a11f2336cec5e227c5", "message": "KEYCLOAK-15841 Upgrade rest of the minor forms to PF4", "committedDate": "2020-11-05T10:23:25Z", "type": "commit"}, {"oid": "e32fb16b1c9a401f685ac5a11f2336cec5e227c5", "url": "https://github.com/keycloak/keycloak/commit/e32fb16b1c9a401f685ac5a11f2336cec5e227c5", "message": "KEYCLOAK-15841 Upgrade rest of the minor forms to PF4", "committedDate": "2020-11-05T10:23:25Z", "type": "forcePushed"}]}