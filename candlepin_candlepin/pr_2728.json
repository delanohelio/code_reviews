{"pr_number": 2728, "pr_title": "[Bug 1844258]: Job Manager Logging Format Changes for Splunk (ENT-2480)", "pr_author": "wolfdale", "pr_createdAt": "2020-06-18T10:41:25Z", "pr_url": "https://github.com/candlepin/candlepin/pull/2728", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE5ODg2OA==", "url": "https://github.com/candlepin/candlepin/pull/2728#discussion_r442198868", "body": "For the displayed value, we want to use snake case, so \"job_key\" here is more appropriate.", "bodyText": "For the displayed value, we want to use snake case, so \"job_key\" here is more appropriate.", "bodyHTML": "<p dir=\"auto\">For the displayed value, we want to use snake case, so \"job_key\" here is more appropriate.</p>", "author": "Ceiu", "createdAt": "2020-06-18T12:47:06Z", "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -1293,6 +1295,9 @@ private void setupJobRuntimeEnvironment(AsyncJobStatus status) {\n         MDC.put(MDC_REQUEST_TYPE_KEY, \"job\");\n         MDC.put(MDC_REQUEST_UUID_KEY, status.getId());\n \n+        MDC.put(MDC_REQUEST_SUB_TYPE_KEY, \"jobKey\");", "originalCommit": "8ca73f3ee33fcf39c2f73d566184e2cd9dba0902", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMTc0Ng==", "url": "https://github.com/candlepin/candlepin/pull/2728#discussion_r442311746", "bodyText": "Dropped this key from here.", "author": "wolfdale", "createdAt": "2020-06-18T15:26:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE5ODg2OA=="}], "type": "inlineReview"}, {"oid": "88e56a51bc860a9df97f1f868e4e2f0587ec2610", "url": "https://github.com/candlepin/candlepin/commit/88e56a51bc860a9df97f1f868e4e2f0587ec2610", "message": "1844258: Job Manager Logging Format Changes for Splunk", "committedDate": "2020-06-18T15:18:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxNjI5NQ==", "url": "https://github.com/candlepin/candlepin/pull/2728#discussion_r442316295", "body": "Looks like a refactor artifact here.", "bodyText": "Looks like a refactor artifact here.", "bodyHTML": "<p dir=\"auto\">Looks like a refactor artifact here.</p>", "author": "Ceiu", "createdAt": "2020-06-18T15:32:52Z", "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -1197,7 +1198,7 @@ public AsyncJobStatus executeJob(JobMessage message) throws JobException {\n         // rather than failing directly. This would allow use of aliases and explicit job\n         // classes.\n         if (jobClass == null) {\n-            String errmsg = String.format(\"No registered job class for job: %s\", status.getJobKey());\n+            String errmsg = String.format(\"No registered job class for jobKey=%s\", status.getJobKey());", "originalCommit": "88e56a51bc860a9df97f1f868e4e2f0587ec2610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyOTUzMQ==", "url": "https://github.com/candlepin/candlepin/pull/2728#discussion_r442329531", "bodyText": "Changed it to job_key.", "author": "wolfdale", "createdAt": "2020-06-18T15:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxNjI5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxODAwNQ==", "url": "https://github.com/candlepin/candlepin/pull/2728#discussion_r442318005", "body": "```MDC_JOB_KEY_KEY```\r\n\r\nThe name sounds a bit silly and redundant, but it is the key for the job key.", "bodyText": "MDC_JOB_KEY_KEY\nThe name sounds a bit silly and redundant, but it is the key for the job key.", "bodyHTML": "<p dir=\"auto\"><code>MDC_JOB_KEY_KEY</code></p>\n<p dir=\"auto\">The name sounds a bit silly and redundant, but it is the key for the job key.</p>", "author": "Ceiu", "createdAt": "2020-06-18T15:35:14Z", "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -93,6 +93,7 @@\n \n     private static final String MDC_REQUEST_TYPE_KEY = \"requestType\";\n     private static final String MDC_REQUEST_UUID_KEY = \"requestUuid\";\n+    private static final String MDC_REQUEST_JOB_KEY = \"jobKey\";", "originalCommit": "88e56a51bc860a9df97f1f868e4e2f0587ec2610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyOTYxOA==", "url": "https://github.com/candlepin/candlepin/pull/2728#discussion_r442329618", "bodyText": "Done.", "author": "wolfdale", "createdAt": "2020-06-18T15:52:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxODAwNQ=="}], "type": "inlineReview"}, {"oid": "cb27a0f8a23f5a85c286f1237546ae89b14b6565", "url": "https://github.com/candlepin/candlepin/commit/cb27a0f8a23f5a85c286f1237546ae89b14b6565", "message": "1844258: Job Manager Logging Format Changes for Splunk", "committedDate": "2020-06-18T15:44:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzNTQwNw==", "url": "https://github.com/candlepin/candlepin/pull/2728#discussion_r442335407", "body": "I'm guessing the intent here is to make this particular line searchable as part of the same log query? If so, changing the message isn't the way to go here. This block can safely live in the try block below immediately following the ```setupJobRuntimeEnvironment``` call (with proper whitespace).\r\n\r\nI also noticed a bug unrelated to your code in the log message below regarding job instantiation. We can fix that here as well:\r\n\r\n```\r\n        try {\r\n            this.setupJobRuntimeEnvironment(status);\r\n\r\n            // Maybe in this case it'd be better to attempt to use the job key as the job class\r\n            // rather than failing directly. This would allow use of aliases and explicit job\r\n            // classes.\r\n            Class<? extends AsyncJob> jobClass = getJobClass(status.getJobKey());\r\n            if (jobClass == null) {\r\n                String errmsg = String.format(\"No registered job class for job: %s\", status.getJobKey());\r\n\r\n                this.updateJobStatus(status, JobState.FAILED, errmsg);\r\n\r\n                log.error(errmsg);\r\n                throw new JobInitializationException(errmsg, true);\r\n            }\r\n\r\n            EventSink eventSink = injector.getInstance(EventSink.class);\r\n            AsyncJob job = injector.getInstance(jobClass);\r\n\r\n            if (job == null) {\r\n                String errmsg = String.format(\"Unable to instantiate job class \\\"%s\\\" for job: %s\",\r\n                    jobClass.getName(), status.getJobKey());\r\n\r\n                log.error(errmsg);\r\n                throw new JobInitializationException(errmsg);\r\n            }\r\n```", "bodyText": "I'm guessing the intent here is to make this particular line searchable as part of the same log query? If so, changing the message isn't the way to go here. This block can safely live in the try block below immediately following the setupJobRuntimeEnvironment call (with proper whitespace).\nI also noticed a bug unrelated to your code in the log message below regarding job instantiation. We can fix that here as well:\n        try {\n            this.setupJobRuntimeEnvironment(status);\n\n            // Maybe in this case it'd be better to attempt to use the job key as the job class\n            // rather than failing directly. This would allow use of aliases and explicit job\n            // classes.\n            Class<? extends AsyncJob> jobClass = getJobClass(status.getJobKey());\n            if (jobClass == null) {\n                String errmsg = String.format(\"No registered job class for job: %s\", status.getJobKey());\n\n                this.updateJobStatus(status, JobState.FAILED, errmsg);\n\n                log.error(errmsg);\n                throw new JobInitializationException(errmsg, true);\n            }\n\n            EventSink eventSink = injector.getInstance(EventSink.class);\n            AsyncJob job = injector.getInstance(jobClass);\n\n            if (job == null) {\n                String errmsg = String.format(\"Unable to instantiate job class \\\"%s\\\" for job: %s\",\n                    jobClass.getName(), status.getJobKey());\n\n                log.error(errmsg);\n                throw new JobInitializationException(errmsg);\n            }", "bodyHTML": "<p dir=\"auto\">I'm guessing the intent here is to make this particular line searchable as part of the same log query? If so, changing the message isn't the way to go here. This block can safely live in the try block below immediately following the <code>setupJobRuntimeEnvironment</code> call (with proper whitespace).</p>\n<p dir=\"auto\">I also noticed a bug unrelated to your code in the log message below regarding job instantiation. We can fix that here as well:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        try {\n            this.setupJobRuntimeEnvironment(status);\n\n            // Maybe in this case it'd be better to attempt to use the job key as the job class\n            // rather than failing directly. This would allow use of aliases and explicit job\n            // classes.\n            Class&lt;? extends AsyncJob&gt; jobClass = getJobClass(status.getJobKey());\n            if (jobClass == null) {\n                String errmsg = String.format(&quot;No registered job class for job: %s&quot;, status.getJobKey());\n\n                this.updateJobStatus(status, JobState.FAILED, errmsg);\n\n                log.error(errmsg);\n                throw new JobInitializationException(errmsg, true);\n            }\n\n            EventSink eventSink = injector.getInstance(EventSink.class);\n            AsyncJob job = injector.getInstance(jobClass);\n\n            if (job == null) {\n                String errmsg = String.format(&quot;Unable to instantiate job class \\&quot;%s\\&quot; for job: %s&quot;,\n                    jobClass.getName(), status.getJobKey());\n\n                log.error(errmsg);\n                throw new JobInitializationException(errmsg);\n            }\"><pre><code>        try {\n            this.setupJobRuntimeEnvironment(status);\n\n            // Maybe in this case it'd be better to attempt to use the job key as the job class\n            // rather than failing directly. This would allow use of aliases and explicit job\n            // classes.\n            Class&lt;? extends AsyncJob&gt; jobClass = getJobClass(status.getJobKey());\n            if (jobClass == null) {\n                String errmsg = String.format(\"No registered job class for job: %s\", status.getJobKey());\n\n                this.updateJobStatus(status, JobState.FAILED, errmsg);\n\n                log.error(errmsg);\n                throw new JobInitializationException(errmsg, true);\n            }\n\n            EventSink eventSink = injector.getInstance(EventSink.class);\n            AsyncJob job = injector.getInstance(jobClass);\n\n            if (job == null) {\n                String errmsg = String.format(\"Unable to instantiate job class \\\"%s\\\" for job: %s\",\n                    jobClass.getName(), status.getJobKey());\n\n                log.error(errmsg);\n                throw new JobInitializationException(errmsg);\n            }\n</code></pre></div>", "author": "Ceiu", "createdAt": "2020-06-18T16:00:29Z", "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -1197,7 +1198,7 @@ public AsyncJobStatus executeJob(JobMessage message) throws JobException {\n         // rather than failing directly. This would allow use of aliases and explicit job\n         // classes.\n         if (jobClass == null) {\n-            String errmsg = String.format(\"No registered job class for job: %s\", status.getJobKey());\n+            String errmsg = String.format(\"No registered job class for job_key=%s\", status.getJobKey());", "originalCommit": "cb27a0f8a23f5a85c286f1237546ae89b14b6565", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0MjA4MA==", "url": "https://github.com/candlepin/candlepin/pull/2728#discussion_r442642080", "bodyText": "Done.", "author": "wolfdale", "createdAt": "2020-06-19T05:44:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzNTQwNw=="}], "type": "inlineReview"}, {"oid": "942c5c3d495e00b1e1e73a47dad39f1e40687cb3", "url": "https://github.com/candlepin/candlepin/commit/942c5c3d495e00b1e1e73a47dad39f1e40687cb3", "message": "1844258: Job Manager Logging Format Changes for Splunk", "committedDate": "2020-06-19T05:41:44Z", "type": "commit"}, {"oid": "942c5c3d495e00b1e1e73a47dad39f1e40687cb3", "url": "https://github.com/candlepin/candlepin/commit/942c5c3d495e00b1e1e73a47dad39f1e40687cb3", "message": "1844258: Job Manager Logging Format Changes for Splunk", "committedDate": "2020-06-19T05:41:44Z", "type": "forcePushed"}]}