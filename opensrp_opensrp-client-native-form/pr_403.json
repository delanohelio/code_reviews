{"pr_number": 403, "pr_title": "Adds a native form testing app", "pr_author": "rkodev", "pr_createdAt": "2020-04-06T08:01:23Z", "pr_url": "https://github.com/opensrp/opensrp-client-native-form/pull/403", "merge_commit": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "timeline": [{"oid": "c670dba5845da2666cf863f0076d965b81ea9ddd", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/c670dba5845da2666cf863f0076d965b81ea9ddd", "message": "Adds a native form testing app", "committedDate": "2020-04-06T08:00:55Z", "type": "commit"}, {"oid": "32daab0d84d3d6d6ea98e1705fb8b502f0ae88f9", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/32daab0d84d3d6d6ea98e1705fb8b502f0ae88f9", "message": "Merge branch 'master' into native_form_tester", "committedDate": "2020-04-06T08:01:29Z", "type": "commit"}, {"oid": "0b8163277a8c08657bda53171cd23430945d15f7", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/0b8163277a8c08657bda53171cd23430945d15f7", "message": "Update sample form structure", "committedDate": "2020-04-06T10:52:25Z", "type": "commit"}, {"oid": "da0bf1c3ba1642cb33a8212f975293a47dc21288", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/da0bf1c3ba1642cb33a8212f975293a47dc21288", "message": "Update form data source", "committedDate": "2020-04-07T12:42:18Z", "type": "commit"}, {"oid": "7fab70629397ae47d6f6ff502ff1451fd2f444e4", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/7fab70629397ae47d6f6ff502ff1451fd2f444e4", "message": "Read 'Form' config object from disk", "committedDate": "2020-04-07T15:01:33Z", "type": "commit"}, {"oid": "b2327e548b5e7a01a8ed75e250e9e33145983deb", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/b2327e548b5e7a01a8ed75e250e9e33145983deb", "message": "Adds custom config forms", "committedDate": "2020-04-07T16:40:12Z", "type": "commit"}, {"oid": "df3b56e50d8a4730041a512908b52d8c8e2839f3", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/df3b56e50d8a4730041a512908b52d8c8e2839f3", "message": "Fix codacy strikes", "committedDate": "2020-04-07T16:44:46Z", "type": "commit"}, {"oid": "602e102d95601f333ab4a3151d5a11a82953add3", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/602e102d95601f333ab4a3151d5a11a82953add3", "message": "Run device read threads on executor", "committedDate": "2020-04-07T16:54:18Z", "type": "commit"}, {"oid": "ea90807def0185c1d12a2c25faba62bdea3f04bc", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/ea90807def0185c1d12a2c25faba62bdea3f04bc", "message": "Merge branch 'master' into native_form_tester", "committedDate": "2020-04-07T16:54:38Z", "type": "commit"}, {"oid": "9040cb1ee36ec10938b460948e8fc7a11e35a0c9", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/9040cb1ee36ec10938b460948e8fc7a11e35a0c9", "message": "Merge branch 'master' into native_form_tester", "committedDate": "2020-04-20T10:12:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM5OTI3NQ==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r411399275", "body": "This class looks very similar to ` com.vijay.jsonwizard.domain.Form`.", "bodyText": "This class looks very similar to  com.vijay.jsonwizard.domain.Form.", "bodyHTML": "<p dir=\"auto\">This class looks very similar to <code> com.vijay.jsonwizard.domain.Form</code>.</p>", "author": "vincent-karuri", "createdAt": "2020-04-20T13:57:29Z", "path": "sample/src/main/java/org/smartregister/nativeform/domain/ConfigForm.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.smartregister.nativeform.domain;\n+\n+import android.content.Context;\n+\n+import com.vijay.jsonwizard.domain.Form;\n+\n+import org.smartregister.nativeform.util.FileReaderUtil;\n+import org.smartregister.nativeform.util.ResourceType;\n+\n+import java.util.Set;\n+\n+public class ConfigForm {", "originalCommit": "7fab70629397ae47d6f6ff502ff1451fd2f444e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI3NzM5Mg==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r412277392", "bodyText": "This was by design, its a wrapper class to enable serialization and deserialization of the Form class. The shortcoming with the form class is it has links to dynamic referenced constants\nIt's converted back to form here\norg.smartregister.nativeform.domain.ConfigForm#toForm", "author": "rkodev", "createdAt": "2020-04-21T15:17:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM5OTI3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyNTkxMw==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r412725913", "bodyText": "Is there no way to share common fields using inheritance?", "author": "vincent-karuri", "createdAt": "2020-04-22T07:08:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM5OTI3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI5MDkzMQ==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r462290931", "bodyText": "Direct inheritance is not possible in this case. Unless the config object changes the names of the parameters, getters and setters will not work.  All these fields are changing types\n\n    private int homeAsUpIndicator;\n\n    private int actionBarBackground;\n    private int navigationBackground;\n\n    private int backIcon;\n\nto\n    private Integer homeAsUpIndicator;\n\n    private String actionBarBackground;\n    private String navigationBackground;\n\n    private String backIcon;", "author": "rkodev", "createdAt": "2020-07-29T13:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM5OTI3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI5MjU1MA==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r462292550", "bodyText": "Cool.", "author": "vincent-karuri", "createdAt": "2020-07-29T13:21:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM5OTI3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "69289264fa3c96141920da0631fb6a05b1098588", "changed_code": [{"header": "diff --git a/sample/src/main/java/org/smartregister/nativeform/domain/ConfigForm.java b/sample/src/main/java/org/smartregister/nativeform/domain/ConfigForm.java\nindex 86c0b19d..3fcf8d95 100644\n--- a/sample/src/main/java/org/smartregister/nativeform/domain/ConfigForm.java\n+++ b/sample/src/main/java/org/smartregister/nativeform/domain/ConfigForm.java\n", "chunk": "@@ -3,9 +3,9 @@ package org.smartregister.nativeform.domain;\n import android.content.Context;\n \n import com.vijay.jsonwizard.domain.Form;\n+import com.vijay.jsonwizard.utils.FileReaderUtil;\n+import com.vijay.jsonwizard.utils.ResourceType;\n \n-import org.smartregister.nativeform.util.FileReaderUtil;\n-import org.smartregister.nativeform.util.ResourceType;\n \n import java.util.Set;\n \n", "next_change": {"commit": "5348ec346467b4aef3414100d8f2985e942f8656", "changed_code": [{"header": "diff --git a/sample/src/main/java/org/smartregister/nativeform/domain/ConfigForm.java b/form_tester/src/main/java/org/smartregister/nativeform_tester/domain/ConfigForm.java\nsimilarity index 90%\nrename from sample/src/main/java/org/smartregister/nativeform/domain/ConfigForm.java\nrename to form_tester/src/main/java/org/smartregister/nativeform_tester/domain/ConfigForm.java\nindex 3fcf8d95..0eb8c541 100644\n--- a/sample/src/main/java/org/smartregister/nativeform/domain/ConfigForm.java\n+++ b/form_tester/src/main/java/org/smartregister/nativeform_tester/domain/ConfigForm.java\n", "chunk": "@@ -1,10 +1,10 @@\n-package org.smartregister.nativeform.domain;\n+package org.smartregister.nativeform_tester.domain;\n \n import android.content.Context;\n \n import com.vijay.jsonwizard.domain.Form;\n-import com.vijay.jsonwizard.utils.FileReaderUtil;\n import com.vijay.jsonwizard.utils.ResourceType;\n+import com.vijay.jsonwizard.utils.Utils;\n \n \n import java.util.Set;\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "changed_code": [{"header": "diff --git a/sample/src/main/java/org/smartregister/nativeform/domain/ConfigForm.java b/form_tester/src/main/java/org/smartregister/nativeform_tester/domain/ConfigForm.java\nsimilarity index 70%\nrename from sample/src/main/java/org/smartregister/nativeform/domain/ConfigForm.java\nrename to form_tester/src/main/java/org/smartregister/nativeform_tester/domain/ConfigForm.java\nindex 86c0b19d..94e610c2 100644\n--- a/sample/src/main/java/org/smartregister/nativeform/domain/ConfigForm.java\n+++ b/form_tester/src/main/java/org/smartregister/nativeform_tester/domain/ConfigForm.java\n", "chunk": "@@ -1,11 +1,10 @@\n-package org.smartregister.nativeform.domain;\n+package org.smartregister.nativeform_tester.domain;\n \n import android.content.Context;\n \n import com.vijay.jsonwizard.domain.Form;\n-\n-import org.smartregister.nativeform.util.FileReaderUtil;\n-import org.smartregister.nativeform.util.ResourceType;\n+import com.vijay.jsonwizard.utils.ResourceType;\n+import com.vijay.jsonwizard.utils.Utils;\n \n import java.util.Set;\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNjE5Mw==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r411426193", "body": "`json.form` this appears throughout the code, maybe use a constant in it's place?", "bodyText": "json.form this appears throughout the code, maybe use a constant in it's place?", "bodyHTML": "<p dir=\"auto\"><code>json.form</code> this appears throughout the code, maybe use a constant in it's place?</p>", "author": "vincent-karuri", "createdAt": "2020-04-20T14:31:06Z", "path": "sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package org.smartregister.nativeform.interactor;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+import android.os.Environment;\n+import android.os.Handler;\n+import android.os.Looper;\n+import android.support.annotation.Nullable;\n+\n+import com.google.gson.Gson;\n+import com.vijay.jsonwizard.constants.JsonFormConstants;\n+import com.vijay.jsonwizard.domain.Form;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.smartregister.nativeform.contract.FormTesterContract;\n+import org.smartregister.nativeform.domain.ConfigForm;\n+import org.smartregister.nativeform.domain.JsonForm;\n+import org.smartregister.nativeform.util.FileReaderUtil;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+public class FormTesterInteractor implements FormTesterContract.Interactor {\n+    private Gson gson = null;\n+    private ExecutorService executorService = Executors.newFixedThreadPool(1);\n+\n+    @Override\n+    public void exportDefaultForms(Context context, FormTesterContract.Presenter presenter) {\n+        executorService.execute(() -> {\n+            AssetManager assetManager = context.getAssets();\n+            try {\n+                String root = verifyOrCreateDiskDirectory();\n+\n+                String[] image_source = {\"json.form\", \"json.form.config\", \"img\", \"image\", \"rule\"};", "originalCommit": "9040cb1ee36ec10938b460948e8fc7a11e35a0c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0NTQxMg==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r411445412", "bodyText": "Also, snake case? :)", "author": "vincent-karuri", "createdAt": "2020-04-20T14:55:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNjE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI4NTA4Ng==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r412285086", "bodyText": "resolved", "author": "rkodev", "createdAt": "2020-04-21T15:26:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNjE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cefc53359d6e5af6847a2890b25faa44d7182131", "changed_code": [{"header": "diff --git a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java b/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\nindex 564a6368..6db305d5 100644\n--- a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n+++ b/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n", "chunk": "@@ -38,8 +38,8 @@ public class FormTesterInteractor implements FormTesterContract.Interactor {\n             try {\n                 String root = verifyOrCreateDiskDirectory();\n \n-                String[] image_source = {\"json.form\", \"json.form.config\", \"img\", \"image\", \"rule\"};\n-                for (String sourceDir : image_source) {\n+                String[] imageSources = {JsonFormConstants.JSON_FORM_DIRECTORY, \"json.form.config\", \"img\", \"image\", \"rule\"};\n+                for (String sourceDir : imageSources) {\n                     exportDirectory(assetManager, sourceDir, context, root, true);\n                 }\n \n", "next_change": {"commit": "6b7b8ec6bf8b0f284cc0cb362a83f0ef203760c5", "changed_code": [{"header": "diff --git a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java b/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\nindex 6db305d5..564a6368 100644\n--- a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n+++ b/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n", "chunk": "@@ -38,8 +38,8 @@ public class FormTesterInteractor implements FormTesterContract.Interactor {\n             try {\n                 String root = verifyOrCreateDiskDirectory();\n \n-                String[] imageSources = {JsonFormConstants.JSON_FORM_DIRECTORY, \"json.form.config\", \"img\", \"image\", \"rule\"};\n-                for (String sourceDir : imageSources) {\n+                String[] image_source = {\"json.form\", \"json.form.config\", \"img\", \"image\", \"rule\"};\n+                for (String sourceDir : image_source) {\n                     exportDirectory(assetManager, sourceDir, context, root, true);\n                 }\n \n", "next_change": {"commit": "cfd076f295f8ad28072e32dfa788d98fc45a0992", "changed_code": [{"header": "diff --git a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java b/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\nindex 564a6368..6db305d5 100644\n--- a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n+++ b/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n", "chunk": "@@ -38,8 +38,8 @@ public class FormTesterInteractor implements FormTesterContract.Interactor {\n             try {\n                 String root = verifyOrCreateDiskDirectory();\n \n-                String[] image_source = {\"json.form\", \"json.form.config\", \"img\", \"image\", \"rule\"};\n-                for (String sourceDir : image_source) {\n+                String[] imageSources = {JsonFormConstants.JSON_FORM_DIRECTORY, \"json.form.config\", \"img\", \"image\", \"rule\"};\n+                for (String sourceDir : imageSources) {\n                     exportDirectory(assetManager, sourceDir, context, root, true);\n                 }\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "changed_code": [{"header": "diff --git a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java b/form_tester/src/main/java/org/smartregister/nativeform_tester/interactor/FormTesterInteractor.java\nsimilarity index 85%\nrename from sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\nrename to form_tester/src/main/java/org/smartregister/nativeform_tester/interactor/FormTesterInteractor.java\nindex 564a6368..b9a57cf3 100644\n--- a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n+++ b/form_tester/src/main/java/org/smartregister/nativeform_tester/interactor/FormTesterInteractor.java\n", "chunk": "@@ -38,8 +38,8 @@ public class FormTesterInteractor implements FormTesterContract.Interactor {\n             try {\n                 String root = verifyOrCreateDiskDirectory();\n \n-                String[] image_source = {\"json.form\", \"json.form.config\", \"img\", \"image\", \"rule\"};\n-                for (String sourceDir : image_source) {\n+                String[] imageSources = {JsonFormConstants.JSON_FORM_DIRECTORY, \"json.form.config\", \"img\", \"image\", \"rule\"};\n+                for (String sourceDir : imageSources) {\n                     exportDirectory(assetManager, sourceDir, context, root, true);\n                 }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyODM0NA==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r411428344", "body": "Snake case?", "bodyText": "Snake case?", "bodyHTML": "<p dir=\"auto\">Snake case?</p>", "author": "vincent-karuri", "createdAt": "2020-04-20T14:33:47Z", "path": "sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package org.smartregister.nativeform.interactor;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+import android.os.Environment;\n+import android.os.Handler;\n+import android.os.Looper;\n+import android.support.annotation.Nullable;\n+\n+import com.google.gson.Gson;\n+import com.vijay.jsonwizard.constants.JsonFormConstants;\n+import com.vijay.jsonwizard.domain.Form;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.smartregister.nativeform.contract.FormTesterContract;\n+import org.smartregister.nativeform.domain.ConfigForm;\n+import org.smartregister.nativeform.domain.JsonForm;\n+import org.smartregister.nativeform.util.FileReaderUtil;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+public class FormTesterInteractor implements FormTesterContract.Interactor {\n+    private Gson gson = null;\n+    private ExecutorService executorService = Executors.newFixedThreadPool(1);\n+\n+    @Override\n+    public void exportDefaultForms(Context context, FormTesterContract.Presenter presenter) {\n+        executorService.execute(() -> {\n+            AssetManager assetManager = context.getAssets();\n+            try {\n+                String root = verifyOrCreateDiskDirectory();\n+\n+                String[] image_source = {\"json.form\", \"json.form.config\", \"img\", \"image\", \"rule\"};\n+                for (String sourceDir : image_source) {\n+                    exportDirectory(assetManager, sourceDir, context, root, true);\n+                }\n+\n+                readForms(context, presenter);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+    }\n+\n+    private void exportDirectory(AssetManager assetManager, String sourceDir, Context context, String root, boolean createRoot) throws IOException {\n+        String[] local_assets = assetManager.list(sourceDir);\n+        if (local_assets != null && local_assets.length > 0) {\n+            for (String assetName : local_assets) {\n+                // export all in\n+                try {\n+\n+                    // if the assetName is a folder extract this\n+                    String[] child_assets = assetManager.list(sourceDir + \"/\" + assetName);", "originalCommit": "9040cb1ee36ec10938b460948e8fc7a11e35a0c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cefc53359d6e5af6847a2890b25faa44d7182131", "changed_code": [{"header": "diff --git a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java b/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\nindex 564a6368..6db305d5 100644\n--- a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n+++ b/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n", "chunk": "@@ -51,9 +51,9 @@ public class FormTesterInteractor implements FormTesterContract.Interactor {\n     }\n \n     private void exportDirectory(AssetManager assetManager, String sourceDir, Context context, String root, boolean createRoot) throws IOException {\n-        String[] local_assets = assetManager.list(sourceDir);\n-        if (local_assets != null && local_assets.length > 0) {\n-            for (String assetName : local_assets) {\n+        String[] localAssets = assetManager.list(sourceDir);\n+        if (localAssets != null && localAssets.length > 0) {\n+            for (String assetName : localAssets) {\n                 // export all in\n                 try {\n \n", "next_change": {"commit": "6b7b8ec6bf8b0f284cc0cb362a83f0ef203760c5", "changed_code": [{"header": "diff --git a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java b/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\nindex 6db305d5..564a6368 100644\n--- a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n+++ b/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n", "chunk": "@@ -51,9 +51,9 @@ public class FormTesterInteractor implements FormTesterContract.Interactor {\n     }\n \n     private void exportDirectory(AssetManager assetManager, String sourceDir, Context context, String root, boolean createRoot) throws IOException {\n-        String[] localAssets = assetManager.list(sourceDir);\n-        if (localAssets != null && localAssets.length > 0) {\n-            for (String assetName : localAssets) {\n+        String[] local_assets = assetManager.list(sourceDir);\n+        if (local_assets != null && local_assets.length > 0) {\n+            for (String assetName : local_assets) {\n                 // export all in\n                 try {\n \n", "next_change": {"commit": "cfd076f295f8ad28072e32dfa788d98fc45a0992", "changed_code": [{"header": "diff --git a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java b/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\nindex 564a6368..6db305d5 100644\n--- a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n+++ b/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n", "chunk": "@@ -51,9 +51,9 @@ public class FormTesterInteractor implements FormTesterContract.Interactor {\n     }\n \n     private void exportDirectory(AssetManager assetManager, String sourceDir, Context context, String root, boolean createRoot) throws IOException {\n-        String[] local_assets = assetManager.list(sourceDir);\n-        if (local_assets != null && local_assets.length > 0) {\n-            for (String assetName : local_assets) {\n+        String[] localAssets = assetManager.list(sourceDir);\n+        if (localAssets != null && localAssets.length > 0) {\n+            for (String assetName : localAssets) {\n                 // export all in\n                 try {\n \n", "next_change": {"commit": "66ddee69eba592a20da41d13b7a66488d45dd0f4", "changed_code": [{"header": "diff --git a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java b/form_tester/src/main/java/org/smartregister/nativeform_tester/interactor/FormTesterInteractor.java\nsimilarity index 93%\nrename from sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\nrename to form_tester/src/main/java/org/smartregister/nativeform_tester/interactor/FormTesterInteractor.java\nindex 6db305d5..9f1f13ce 100644\n--- a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n+++ b/form_tester/src/main/java/org/smartregister/nativeform_tester/interactor/FormTesterInteractor.java\n", "chunk": "@@ -58,8 +58,8 @@ public class FormTesterInteractor implements FormTesterContract.Interactor {\n                 try {\n \n                     // if the assetName is a folder extract this\n-                    String[] child_assets = assetManager.list(sourceDir + \"/\" + assetName);\n-                    if (child_assets != null && child_assets.length > 0) {\n+                    String[] childAssets = assetManager.list(sourceDir + \"/\" + assetName);\n+                    if (childAssets != null && childAssets.length > 0) {\n                         String destinationRoot = root + \"/\" + assetName;\n                         File myDir = new File(destinationRoot);\n                         if (!myDir.exists())\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "changed_code": [{"header": "diff --git a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java b/form_tester/src/main/java/org/smartregister/nativeform_tester/interactor/FormTesterInteractor.java\nsimilarity index 85%\nrename from sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\nrename to form_tester/src/main/java/org/smartregister/nativeform_tester/interactor/FormTesterInteractor.java\nindex 564a6368..b9a57cf3 100644\n--- a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n+++ b/form_tester/src/main/java/org/smartregister/nativeform_tester/interactor/FormTesterInteractor.java\n", "chunk": "@@ -51,15 +51,15 @@ public class FormTesterInteractor implements FormTesterContract.Interactor {\n     }\n \n     private void exportDirectory(AssetManager assetManager, String sourceDir, Context context, String root, boolean createRoot) throws IOException {\n-        String[] local_assets = assetManager.list(sourceDir);\n-        if (local_assets != null && local_assets.length > 0) {\n-            for (String assetName : local_assets) {\n+        String[] localAssets = assetManager.list(sourceDir);\n+        if (localAssets != null && localAssets.length > 0) {\n+            for (String assetName : localAssets) {\n                 // export all in\n                 try {\n \n                     // if the assetName is a folder extract this\n-                    String[] child_assets = assetManager.list(sourceDir + \"/\" + assetName);\n-                    if (child_assets != null && child_assets.length > 0) {\n+                    String[] childAssets = assetManager.list(sourceDir + \"/\" + assetName);\n+                    if (childAssets != null && childAssets.length > 0) {\n                         String destinationRoot = root + \"/\" + assetName;\n                         File myDir = new File(destinationRoot);\n                         if (!myDir.exists())\n", "next_change": null}]}, "commits_in_main": [{"oid": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMTYxMg==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r411431612", "body": "Why not use `convertStreamToString` here?", "bodyText": "Why not use convertStreamToString here?", "bodyHTML": "<p dir=\"auto\">Why not use <code>convertStreamToString</code> here?</p>", "author": "vincent-karuri", "createdAt": "2020-04-20T14:38:05Z", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.vijay.jsonwizard.filesource;\n+\n+import android.content.Context;\n+\n+import com.vijay.jsonwizard.interfaces.FormFileSource;\n+\n+import org.jeasy.rules.api.Rules;\n+import org.jeasy.rules.mvel.MVELRuleFactory;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+import timber.log.Timber;\n+\n+/***\n+ * used to read files stored on the APP's asset folder\n+ *\n+ */\n+public class AssetsFileSource implements FormFileSource {\n+\n+    public static AssetsFileSource INSTANCE = new AssetsFileSource();\n+\n+    private AssetsFileSource() {\n+    }\n+\n+    @Override\n+    public Rules getRulesFromFile(Context context, String fileName) throws Exception {\n+        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(context.getAssets().open(fileName)));\n+        return MVELRuleFactory.createRulesFrom(bufferedReader);\n+    }\n+\n+    @Override\n+    public JSONObject getFormFromFile(Context context, String fileName) {\n+        try {\n+            String newFileName = \"json.form/\" + fileName + \".json\";\n+\n+            InputStream inputStream = context.getAssets()\n+                    .open(newFileName);\n+\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream,\n+                    \"UTF-8\"));\n+            String jsonString;\n+            StringBuilder stringBuilder = new StringBuilder();\n+            while ((jsonString = reader.readLine()) != null) {", "originalCommit": "9040cb1ee36ec10938b460948e8fc7a11e35a0c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI4ODc5OA==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r412288798", "bodyText": "The file reader util resides in the sample directory but Asset File Reader exists in the native form directory", "author": "rkodev", "createdAt": "2020-04-21T15:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMTYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyNzM4Mg==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r412727382", "bodyText": "Wouldn't it be easier to move the file reader utils to the native form library then?\nThese will be useful to other apps as well.", "author": "vincent-karuri", "createdAt": "2020-04-22T07:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMTYxMg=="}], "type": "inlineReview", "revised_code": {"commit": "69289264fa3c96141920da0631fb6a05b1098588", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\nindex 20fd9dcc..f446d751 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n", "chunk": "@@ -36,21 +38,12 @@ public class AssetsFileSource implements FormFileSource {\n     @Override\n     public JSONObject getFormFromFile(Context context, String fileName) {\n         try {\n-            String newFileName = \"json.form/\" + fileName + \".json\";\n+            String newFileName = JsonFormConstants.JSON_FORM_DIRECTORY + \"/\" + fileName + \".json\";\n \n             InputStream inputStream = context.getAssets()\n                     .open(newFileName);\n \n-            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream,\n-                    \"UTF-8\"));\n-            String jsonString;\n-            StringBuilder stringBuilder = new StringBuilder();\n-            while ((jsonString = reader.readLine()) != null) {\n-                stringBuilder.append(jsonString);\n-            }\n-            inputStream.close();\n-\n-            return new JSONObject(stringBuilder.toString());\n+            return new JSONObject(FileReaderUtil.convertStreamToString(inputStream));\n         } catch (IOException e) {\n             Timber.e(e);\n         } catch (JSONException e) {\n", "next_change": {"commit": "5348ec346467b4aef3414100d8f2985e942f8656", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\nindex f446d751..a3781b38 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n", "chunk": "@@ -43,7 +43,7 @@ public class AssetsFileSource implements FormFileSource {\n             InputStream inputStream = context.getAssets()\n                     .open(newFileName);\n \n-            return new JSONObject(FileReaderUtil.convertStreamToString(inputStream));\n+            return new JSONObject(Utils.convertStreamToString(inputStream));\n         } catch (IOException e) {\n             Timber.e(e);\n         } catch (JSONException e) {\n", "next_change": {"commit": "32a12cdfb2e6875ffb1f7163cf995f388a4d6584", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\nindex a3781b38..95a31b74 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n", "chunk": "@@ -36,20 +32,9 @@ public class AssetsFileSource implements FormFileSource {\n     }\n \n     @Override\n-    public JSONObject getFormFromFile(Context context, String fileName) {\n-        try {\n-            String newFileName = JsonFormConstants.JSON_FORM_DIRECTORY + \"/\" + fileName + \".json\";\n-\n-            InputStream inputStream = context.getAssets()\n-                    .open(newFileName);\n-\n-            return new JSONObject(Utils.convertStreamToString(inputStream));\n-        } catch (IOException e) {\n-            Timber.e(e);\n-        } catch (JSONException e) {\n-            Timber.e(e);\n-        }\n-        return null;\n+    public JSONObject getFormFromFile(Context context, String fileName) throws Exception {\n+        String newFileName = JsonFormConstants.JSON_FORM_DIRECTORY + \"/\" + fileName + \".json\";\n+        return new JSONObject(Utils.convertStreamToString(getFileInputStream(context, newFileName)));\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\nindex 20fd9dcc..95a31b74 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n", "chunk": "@@ -34,29 +32,9 @@ public class AssetsFileSource implements FormFileSource {\n     }\n \n     @Override\n-    public JSONObject getFormFromFile(Context context, String fileName) {\n-        try {\n-            String newFileName = \"json.form/\" + fileName + \".json\";\n-\n-            InputStream inputStream = context.getAssets()\n-                    .open(newFileName);\n-\n-            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream,\n-                    \"UTF-8\"));\n-            String jsonString;\n-            StringBuilder stringBuilder = new StringBuilder();\n-            while ((jsonString = reader.readLine()) != null) {\n-                stringBuilder.append(jsonString);\n-            }\n-            inputStream.close();\n-\n-            return new JSONObject(stringBuilder.toString());\n-        } catch (IOException e) {\n-            Timber.e(e);\n-        } catch (JSONException e) {\n-            Timber.e(e);\n-        }\n-        return null;\n+    public JSONObject getFormFromFile(Context context, String fileName) throws Exception {\n+        String newFileName = JsonFormConstants.JSON_FORM_DIRECTORY + \"/\" + fileName + \".json\";\n+        return new JSONObject(Utils.convertStreamToString(getFileInputStream(context, newFileName)));\n     }\n \n     @Override\n", "next_change": null}]}, "commits_in_main": [{"oid": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "message": "Merge commit", "committedDate": null}, {"oid": "2b4ad91f57cf47191ed66e7fa93ac7b8d932d158", "committedDate": "2022-06-17 11:03:05 +0300", "message": "Migrate JEasy library verion"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMjQwNw==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r411432407", "body": "Why not use `getFileInputStream` here?", "bodyText": "Why not use getFileInputStream here?", "bodyHTML": "<p dir=\"auto\">Why not use <code>getFileInputStream</code> here?</p>", "author": "vincent-karuri", "createdAt": "2020-04-20T14:39:07Z", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.vijay.jsonwizard.filesource;\n+\n+import android.content.Context;\n+\n+import com.vijay.jsonwizard.interfaces.FormFileSource;\n+\n+import org.jeasy.rules.api.Rules;\n+import org.jeasy.rules.mvel.MVELRuleFactory;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+import timber.log.Timber;\n+\n+/***\n+ * used to read files stored on the APP's asset folder\n+ *\n+ */\n+public class AssetsFileSource implements FormFileSource {\n+\n+    public static AssetsFileSource INSTANCE = new AssetsFileSource();\n+\n+    private AssetsFileSource() {\n+    }\n+\n+    @Override\n+    public Rules getRulesFromFile(Context context, String fileName) throws Exception {\n+        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(context.getAssets().open(fileName)));\n+        return MVELRuleFactory.createRulesFrom(bufferedReader);\n+    }\n+\n+    @Override\n+    public JSONObject getFormFromFile(Context context, String fileName) {\n+        try {\n+            String newFileName = \"json.form/\" + fileName + \".json\";\n+\n+            InputStream inputStream = context.getAssets()", "originalCommit": "9040cb1ee36ec10938b460948e8fc7a11e35a0c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cefc53359d6e5af6847a2890b25faa44d7182131", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\nindex 20fd9dcc..831e2ab8 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n", "chunk": "@@ -36,7 +37,7 @@ public class AssetsFileSource implements FormFileSource {\n     @Override\n     public JSONObject getFormFromFile(Context context, String fileName) {\n         try {\n-            String newFileName = \"json.form/\" + fileName + \".json\";\n+            String newFileName = JsonFormConstants.JSON_FORM_DIRECTORY + \"/\" + fileName + \".json\";\n \n             InputStream inputStream = context.getAssets()\n                     .open(newFileName);\n", "next_change": {"commit": "6b7b8ec6bf8b0f284cc0cb362a83f0ef203760c5", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\nindex 831e2ab8..20fd9dcc 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n", "chunk": "@@ -37,7 +36,7 @@ public class AssetsFileSource implements FormFileSource {\n     @Override\n     public JSONObject getFormFromFile(Context context, String fileName) {\n         try {\n-            String newFileName = JsonFormConstants.JSON_FORM_DIRECTORY + \"/\" + fileName + \".json\";\n+            String newFileName = \"json.form/\" + fileName + \".json\";\n \n             InputStream inputStream = context.getAssets()\n                     .open(newFileName);\n", "next_change": {"commit": "cfd076f295f8ad28072e32dfa788d98fc45a0992", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\nindex 20fd9dcc..831e2ab8 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n", "chunk": "@@ -36,7 +37,7 @@ public class AssetsFileSource implements FormFileSource {\n     @Override\n     public JSONObject getFormFromFile(Context context, String fileName) {\n         try {\n-            String newFileName = \"json.form/\" + fileName + \".json\";\n+            String newFileName = JsonFormConstants.JSON_FORM_DIRECTORY + \"/\" + fileName + \".json\";\n \n             InputStream inputStream = context.getAssets()\n                     .open(newFileName);\n", "next_change": {"commit": "69289264fa3c96141920da0631fb6a05b1098588", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\nindex 831e2ab8..f446d751 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n", "chunk": "@@ -42,16 +43,7 @@ public class AssetsFileSource implements FormFileSource {\n             InputStream inputStream = context.getAssets()\n                     .open(newFileName);\n \n-            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream,\n-                    \"UTF-8\"));\n-            String jsonString;\n-            StringBuilder stringBuilder = new StringBuilder();\n-            while ((jsonString = reader.readLine()) != null) {\n-                stringBuilder.append(jsonString);\n-            }\n-            inputStream.close();\n-\n-            return new JSONObject(stringBuilder.toString());\n+            return new JSONObject(FileReaderUtil.convertStreamToString(inputStream));\n         } catch (IOException e) {\n             Timber.e(e);\n         } catch (JSONException e) {\n", "next_change": {"commit": "5348ec346467b4aef3414100d8f2985e942f8656", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\nindex f446d751..a3781b38 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n", "chunk": "@@ -43,7 +43,7 @@ public class AssetsFileSource implements FormFileSource {\n             InputStream inputStream = context.getAssets()\n                     .open(newFileName);\n \n-            return new JSONObject(FileReaderUtil.convertStreamToString(inputStream));\n+            return new JSONObject(Utils.convertStreamToString(inputStream));\n         } catch (IOException e) {\n             Timber.e(e);\n         } catch (JSONException e) {\n", "next_change": {"commit": "32a12cdfb2e6875ffb1f7163cf995f388a4d6584", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\nindex a3781b38..95a31b74 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n", "chunk": "@@ -36,20 +32,9 @@ public class AssetsFileSource implements FormFileSource {\n     }\n \n     @Override\n-    public JSONObject getFormFromFile(Context context, String fileName) {\n-        try {\n-            String newFileName = JsonFormConstants.JSON_FORM_DIRECTORY + \"/\" + fileName + \".json\";\n-\n-            InputStream inputStream = context.getAssets()\n-                    .open(newFileName);\n-\n-            return new JSONObject(Utils.convertStreamToString(inputStream));\n-        } catch (IOException e) {\n-            Timber.e(e);\n-        } catch (JSONException e) {\n-            Timber.e(e);\n-        }\n-        return null;\n+    public JSONObject getFormFromFile(Context context, String fileName) throws Exception {\n+        String newFileName = JsonFormConstants.JSON_FORM_DIRECTORY + \"/\" + fileName + \".json\";\n+        return new JSONObject(Utils.convertStreamToString(getFileInputStream(context, newFileName)));\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\nindex 20fd9dcc..95a31b74 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n", "chunk": "@@ -34,29 +32,9 @@ public class AssetsFileSource implements FormFileSource {\n     }\n \n     @Override\n-    public JSONObject getFormFromFile(Context context, String fileName) {\n-        try {\n-            String newFileName = \"json.form/\" + fileName + \".json\";\n-\n-            InputStream inputStream = context.getAssets()\n-                    .open(newFileName);\n-\n-            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream,\n-                    \"UTF-8\"));\n-            String jsonString;\n-            StringBuilder stringBuilder = new StringBuilder();\n-            while ((jsonString = reader.readLine()) != null) {\n-                stringBuilder.append(jsonString);\n-            }\n-            inputStream.close();\n-\n-            return new JSONObject(stringBuilder.toString());\n-        } catch (IOException e) {\n-            Timber.e(e);\n-        } catch (JSONException e) {\n-            Timber.e(e);\n-        }\n-        return null;\n+    public JSONObject getFormFromFile(Context context, String fileName) throws Exception {\n+        String newFileName = JsonFormConstants.JSON_FORM_DIRECTORY + \"/\" + fileName + \".json\";\n+        return new JSONObject(Utils.convertStreamToString(getFileInputStream(context, newFileName)));\n     }\n \n     @Override\n", "next_change": null}]}, "commits_in_main": [{"oid": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "message": "Merge commit", "committedDate": null}, {"oid": "2b4ad91f57cf47191ed66e7fa93ac7b8d932d158", "committedDate": "2022-06-17 11:03:05 +0300", "message": "Migrate JEasy library verion"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0MzM1MA==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r411443350", "body": "Snake case?", "bodyText": "Snake case?", "bodyHTML": "<p dir=\"auto\">Snake case?</p>", "author": "vincent-karuri", "createdAt": "2020-04-20T14:52:45Z", "path": "sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package org.smartregister.nativeform.interactor;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+import android.os.Environment;\n+import android.os.Handler;\n+import android.os.Looper;\n+import android.support.annotation.Nullable;\n+\n+import com.google.gson.Gson;\n+import com.vijay.jsonwizard.constants.JsonFormConstants;\n+import com.vijay.jsonwizard.domain.Form;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.smartregister.nativeform.contract.FormTesterContract;\n+import org.smartregister.nativeform.domain.ConfigForm;\n+import org.smartregister.nativeform.domain.JsonForm;\n+import org.smartregister.nativeform.util.FileReaderUtil;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+public class FormTesterInteractor implements FormTesterContract.Interactor {\n+    private Gson gson = null;\n+    private ExecutorService executorService = Executors.newFixedThreadPool(1);\n+\n+    @Override\n+    public void exportDefaultForms(Context context, FormTesterContract.Presenter presenter) {\n+        executorService.execute(() -> {\n+            AssetManager assetManager = context.getAssets();\n+            try {\n+                String root = verifyOrCreateDiskDirectory();\n+\n+                String[] image_source = {\"json.form\", \"json.form.config\", \"img\", \"image\", \"rule\"};\n+                for (String sourceDir : image_source) {\n+                    exportDirectory(assetManager, sourceDir, context, root, true);\n+                }\n+\n+                readForms(context, presenter);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+    }\n+\n+    private void exportDirectory(AssetManager assetManager, String sourceDir, Context context, String root, boolean createRoot) throws IOException {\n+        String[] local_assets = assetManager.list(sourceDir);", "originalCommit": "9040cb1ee36ec10938b460948e8fc7a11e35a0c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI4Nzk4Nw==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r462287987", "bodyText": "Resolved", "author": "rkodev", "createdAt": "2020-07-29T13:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0MzM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "cefc53359d6e5af6847a2890b25faa44d7182131", "changed_code": [{"header": "diff --git a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java b/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\nindex 564a6368..6db305d5 100644\n--- a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n+++ b/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n", "chunk": "@@ -51,9 +51,9 @@ public class FormTesterInteractor implements FormTesterContract.Interactor {\n     }\n \n     private void exportDirectory(AssetManager assetManager, String sourceDir, Context context, String root, boolean createRoot) throws IOException {\n-        String[] local_assets = assetManager.list(sourceDir);\n-        if (local_assets != null && local_assets.length > 0) {\n-            for (String assetName : local_assets) {\n+        String[] localAssets = assetManager.list(sourceDir);\n+        if (localAssets != null && localAssets.length > 0) {\n+            for (String assetName : localAssets) {\n                 // export all in\n                 try {\n \n", "next_change": {"commit": "6b7b8ec6bf8b0f284cc0cb362a83f0ef203760c5", "changed_code": [{"header": "diff --git a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java b/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\nindex 6db305d5..564a6368 100644\n--- a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n+++ b/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n", "chunk": "@@ -51,9 +51,9 @@ public class FormTesterInteractor implements FormTesterContract.Interactor {\n     }\n \n     private void exportDirectory(AssetManager assetManager, String sourceDir, Context context, String root, boolean createRoot) throws IOException {\n-        String[] localAssets = assetManager.list(sourceDir);\n-        if (localAssets != null && localAssets.length > 0) {\n-            for (String assetName : localAssets) {\n+        String[] local_assets = assetManager.list(sourceDir);\n+        if (local_assets != null && local_assets.length > 0) {\n+            for (String assetName : local_assets) {\n                 // export all in\n                 try {\n \n", "next_change": {"commit": "cfd076f295f8ad28072e32dfa788d98fc45a0992", "changed_code": [{"header": "diff --git a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java b/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\nindex 564a6368..6db305d5 100644\n--- a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n+++ b/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n", "chunk": "@@ -51,9 +51,9 @@ public class FormTesterInteractor implements FormTesterContract.Interactor {\n     }\n \n     private void exportDirectory(AssetManager assetManager, String sourceDir, Context context, String root, boolean createRoot) throws IOException {\n-        String[] local_assets = assetManager.list(sourceDir);\n-        if (local_assets != null && local_assets.length > 0) {\n-            for (String assetName : local_assets) {\n+        String[] localAssets = assetManager.list(sourceDir);\n+        if (localAssets != null && localAssets.length > 0) {\n+            for (String assetName : localAssets) {\n                 // export all in\n                 try {\n \n", "next_change": {"commit": "66ddee69eba592a20da41d13b7a66488d45dd0f4", "changed_code": [{"header": "diff --git a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java b/form_tester/src/main/java/org/smartregister/nativeform_tester/interactor/FormTesterInteractor.java\nsimilarity index 93%\nrename from sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\nrename to form_tester/src/main/java/org/smartregister/nativeform_tester/interactor/FormTesterInteractor.java\nindex 6db305d5..9f1f13ce 100644\n--- a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n+++ b/form_tester/src/main/java/org/smartregister/nativeform_tester/interactor/FormTesterInteractor.java\n", "chunk": "@@ -58,8 +58,8 @@ public class FormTesterInteractor implements FormTesterContract.Interactor {\n                 try {\n \n                     // if the assetName is a folder extract this\n-                    String[] child_assets = assetManager.list(sourceDir + \"/\" + assetName);\n-                    if (child_assets != null && child_assets.length > 0) {\n+                    String[] childAssets = assetManager.list(sourceDir + \"/\" + assetName);\n+                    if (childAssets != null && childAssets.length > 0) {\n                         String destinationRoot = root + \"/\" + assetName;\n                         File myDir = new File(destinationRoot);\n                         if (!myDir.exists())\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "changed_code": [{"header": "diff --git a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java b/form_tester/src/main/java/org/smartregister/nativeform_tester/interactor/FormTesterInteractor.java\nsimilarity index 85%\nrename from sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\nrename to form_tester/src/main/java/org/smartregister/nativeform_tester/interactor/FormTesterInteractor.java\nindex 564a6368..b9a57cf3 100644\n--- a/sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java\n+++ b/form_tester/src/main/java/org/smartregister/nativeform_tester/interactor/FormTesterInteractor.java\n", "chunk": "@@ -51,15 +51,15 @@ public class FormTesterInteractor implements FormTesterContract.Interactor {\n     }\n \n     private void exportDirectory(AssetManager assetManager, String sourceDir, Context context, String root, boolean createRoot) throws IOException {\n-        String[] local_assets = assetManager.list(sourceDir);\n-        if (local_assets != null && local_assets.length > 0) {\n-            for (String assetName : local_assets) {\n+        String[] localAssets = assetManager.list(sourceDir);\n+        if (localAssets != null && localAssets.length > 0) {\n+            for (String assetName : localAssets) {\n                 // export all in\n                 try {\n \n                     // if the assetName is a folder extract this\n-                    String[] child_assets = assetManager.list(sourceDir + \"/\" + assetName);\n-                    if (child_assets != null && child_assets.length > 0) {\n+                    String[] childAssets = assetManager.list(sourceDir + \"/\" + assetName);\n+                    if (childAssets != null && childAssets.length > 0) {\n                         String destinationRoot = root + \"/\" + assetName;\n                         File myDir = new File(destinationRoot);\n                         if (!myDir.exists())\n", "next_change": null}]}, "commits_in_main": [{"oid": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "message": "Merge commit", "committedDate": null}]}, {"oid": "cefc53359d6e5af6847a2890b25faa44d7182131", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/cefc53359d6e5af6847a2890b25faa44d7182131", "message": "Fix file name, Introduce form constants", "committedDate": "2020-04-21T15:33:23Z", "type": "commit"}, {"oid": "6b7b8ec6bf8b0f284cc0cb362a83f0ef203760c5", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/6b7b8ec6bf8b0f284cc0cb362a83f0ef203760c5", "message": "Merge branch 'master' into native_form_tester", "committedDate": "2020-04-21T15:42:21Z", "type": "commit"}, {"oid": "cfd076f295f8ad28072e32dfa788d98fc45a0992", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/cfd076f295f8ad28072e32dfa788d98fc45a0992", "message": "Merge branch 'native_form_tester' of github.com:OpenSRP/opensrp-client-native-form into native_form_tester", "committedDate": "2020-04-21T16:05:53Z", "type": "commit"}, {"oid": "2273fc8d82587b466100397c931c1d5c8e468693", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/2273fc8d82587b466100397c931c1d5c8e468693", "message": "Merge origin master to branch", "committedDate": "2020-07-29T13:06:20Z", "type": "commit"}, {"oid": "69289264fa3c96141920da0631fb6a05b1098588", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/69289264fa3c96141920da0631fb6a05b1098588", "message": "Refactor code", "committedDate": "2020-07-29T13:46:13Z", "type": "commit"}, {"oid": "5c9b5dbebfc9e9e65ec6c47bab682b92e271ec18", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/5c9b5dbebfc9e9e65ec6c47bab682b92e271ec18", "message": "Separate sample app and form tester app", "committedDate": "2020-07-29T14:09:09Z", "type": "commit"}, {"oid": "d35819007ab9b8614bb2873570de7c992c128b57", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/d35819007ab9b8614bb2873570de7c992c128b57", "message": "Fix bug on rules engine", "committedDate": "2020-07-29T14:39:16Z", "type": "commit"}, {"oid": "66ddee69eba592a20da41d13b7a66488d45dd0f4", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/66ddee69eba592a20da41d13b7a66488d45dd0f4", "message": "Add tests", "committedDate": "2020-07-29T15:09:53Z", "type": "commit"}, {"oid": "5348ec346467b4aef3414100d8f2985e942f8656", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/5348ec346467b4aef3414100d8f2985e942f8656", "message": "Reuse Utils class", "committedDate": "2020-07-29T15:43:36Z", "type": "commit"}, {"oid": "31b5dc2ac1ffa2b2080c1261b30c72eb2d039db7", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/31b5dc2ac1ffa2b2080c1261b30c72eb2d039db7", "message": "Remove NPath on ConfigForm", "committedDate": "2020-07-29T15:55:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgwMzU3NQ==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r462803575", "body": "You can use Timber", "bodyText": "You can use Timber", "bodyHTML": "<p dir=\"auto\">You can use Timber</p>", "author": "vincent-karuri", "createdAt": "2020-07-30T07:30:41Z", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java", "diffHunk": "@@ -803,6 +808,16 @@ public static String formatDateToPattern(String date, String inputFormat, String\n         format = new SimpleDateFormat(outputFormat);\n         return format.format(newDate);\n     }\n+\n+    public static int getResourceId(Context context, String name, ResourceType resourceType)\n+    {\n+        try {\n+            return context.getResources().getIdentifier(name, resourceType.getType(), context.getPackageName());\n+        } catch (Exception e) {\n+            e.printStackTrace();", "originalCommit": "5348ec346467b4aef3414100d8f2985e942f8656", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32a12cdfb2e6875ffb1f7163cf995f388a4d6584", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex 97f08372..c30dbd86 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -803,18 +803,17 @@ public class Utils {\n         try {\n             newDate = format.parse(date);\n         } catch (ParseException e) {\n-            e.printStackTrace();\n+            Timber.e(e);\n         }\n         format = new SimpleDateFormat(outputFormat);\n         return format.format(newDate);\n     }\n \n-    public static int getResourceId(Context context, String name, ResourceType resourceType)\n-    {\n+    public static int getResourceId(Context context, String name, ResourceType resourceType) {\n         try {\n             return context.getResources().getIdentifier(name, resourceType.getType(), context.getPackageName());\n         } catch (Exception e) {\n-            e.printStackTrace();\n+            Timber.e(e);\n             return -1;\n         }\n     }\n", "next_change": {"commit": "deaf63a82c5f97df6521dc8fd53bf9addcc3c7ad", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex c30dbd86..e6fe5f9f 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -817,6 +818,10 @@ public class Utils {\n             return -1;\n         }\n     }\n+  \n+    public static boolean isEmptyJsonArray(JSONArray jsonArray) {\n+        return jsonArray == null || jsonArray.length() == 0;\n+    }\n }\n \n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex 97f08372..e6fe5f9f 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -803,21 +803,25 @@ public class Utils {\n         try {\n             newDate = format.parse(date);\n         } catch (ParseException e) {\n-            e.printStackTrace();\n+            Timber.e(e);\n         }\n         format = new SimpleDateFormat(outputFormat);\n         return format.format(newDate);\n     }\n \n-    public static int getResourceId(Context context, String name, ResourceType resourceType)\n-    {\n+\n+    public static int getResourceId(Context context, String name, ResourceType resourceType) {\n         try {\n             return context.getResources().getIdentifier(name, resourceType.getType(), context.getPackageName());\n         } catch (Exception e) {\n-            e.printStackTrace();\n+            Timber.e(e);\n             return -1;\n         }\n     }\n+  \n+    public static boolean isEmptyJsonArray(JSONArray jsonArray) {\n+        return jsonArray == null || jsonArray.length() == 0;\n+    }\n }\n \n \n", "next_change": {"commit": "fb73b06fcf39b585fe005d324b3e19c8404ea1fd", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex e6fe5f9f..910c2b6b 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -766,62 +706,6 @@ public class Utils {\n         }\n         return null;\n     }\n-\n-\n-    /***\n-     * removes the generated dynamic rules by repeating group\n-     */\n-    public static void removeGeneratedDynamicRules(JsonFormFragment formFragment) {\n-        JSONObject form = formFragment.getJsonApi().getmJSONObject();\n-        JSONArray jsonArray = FormUtils.getMultiStepFormFields(form);\n-        for (int i = 0; i < jsonArray.length(); i++) {\n-            JSONObject jsonObject = jsonArray.optJSONObject(i);\n-            if (jsonObject.has(JsonFormConstants.RELEVANCE) &&\n-                    jsonObject.optJSONObject(JsonFormConstants.RELEVANCE).has(RuleConstant.RULES_ENGINE) &&\n-                    jsonObject.optJSONObject(JsonFormConstants.RELEVANCE).optJSONObject(RuleConstant.RULES_ENGINE)\n-                            .has(JsonFormConstants.JSON_FORM_KEY.EX_RULES) &&\n-                    jsonObject.optJSONObject(JsonFormConstants.RELEVANCE).optJSONObject(RuleConstant.RULES_ENGINE)\n-                            .optJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES).has(RuleConstant.RULES_DYNAMIC)) {\n-                jsonArray.optJSONObject(i).remove(JsonFormConstants.RELEVANCE);\n-            }\n-            if (jsonObject.has(JsonFormConstants.CALCULATION) &&\n-                    jsonObject.optJSONObject(JsonFormConstants.CALCULATION).has(RuleConstant.RULES_ENGINE) &&\n-                    jsonObject.optJSONObject(JsonFormConstants.CALCULATION).optJSONObject(RuleConstant.RULES_ENGINE)\n-                            .has(JsonFormConstants.JSON_FORM_KEY.EX_RULES) &&\n-                    jsonObject.optJSONObject(JsonFormConstants.CALCULATION).optJSONObject(RuleConstant.RULES_ENGINE)\n-                            .optJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES).has(RuleConstant.RULES_DYNAMIC)) {\n-                jsonArray.optJSONObject(i).remove(JsonFormConstants.CALCULATION);\n-            }\n-        }\n-    }\n-\n-\n-    public static String formatDateToPattern(String date, String inputFormat, String outputFormat) {\n-        if (StringUtils.isEmpty(date)) return \"\";\n-        SimpleDateFormat format = new SimpleDateFormat(inputFormat);\n-        Date newDate = null;\n-        try {\n-            newDate = format.parse(date);\n-        } catch (ParseException e) {\n-            Timber.e(e);\n-        }\n-        format = new SimpleDateFormat(outputFormat);\n-        return format.format(newDate);\n-    }\n-\n-\n-    public static int getResourceId(Context context, String name, ResourceType resourceType) {\n-        try {\n-            return context.getResources().getIdentifier(name, resourceType.getType(), context.getPackageName());\n-        } catch (Exception e) {\n-            Timber.e(e);\n-            return -1;\n-        }\n-    }\n-  \n-    public static boolean isEmptyJsonArray(JSONArray jsonArray) {\n-        return jsonArray == null || jsonArray.length() == 0;\n-    }\n }\n \n \n", "next_change": {"commit": "af969b7ce6ea7697bc2e575e0d73d19faed28d1d", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex 910c2b6b..bb047d67 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -706,6 +708,19 @@ public class Utils {\n         }\n         return null;\n     }\n+\n+    public static void checkIfStepHasNoRelevance(JsonFormFragment formFragment) {\n+        JSONObject jsonObject = formFragment.getJsonApi().getmJSONObject();\n+        JSONObject jsonObject1 = jsonObject.optJSONObject(formFragment.getJsonApi().nextStep());\n+        JSONArray fields = jsonObject1.optJSONArray(\"fields\");\n+        for (int i = 0; i < fields.length(); i++) {\n+            JSONObject object = fields.optJSONObject(i);\n+            if (object.has(\"type\") && !object.optString(\"type\").equals(\"hidden\") && !object.has(\"relevance\")) {\n+                ((JsonWizardFormFragment) formFragment).setNextStepHaveNoRelevance(true);\n+                break;\n+            }\n+        }\n+    }\n }\n \n \n", "next_change": {"commit": "9652df4748cca4ff137739e4e01c719573b69f2d", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex bb047d67..777638d6 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -709,14 +709,18 @@ public class Utils {\n         return null;\n     }\n \n-    public static void checkIfStepHasNoRelevance(JsonFormFragment formFragment) {\n+    /***\n+     * Checks if step has no skip logic fields and that fields does not have type hidden\n+     * @param formFragment\n+     */\n+    public static void checkIfStepNoSkipLogic(JsonFormFragment formFragment) {\n         JSONObject jsonObject = formFragment.getJsonApi().getmJSONObject();\n         JSONObject jsonObject1 = jsonObject.optJSONObject(formFragment.getJsonApi().nextStep());\n-        JSONArray fields = jsonObject1.optJSONArray(\"fields\");\n+        JSONArray fields = jsonObject1.optJSONArray(JsonFormConstants.FIELDS);\n         for (int i = 0; i < fields.length(); i++) {\n             JSONObject object = fields.optJSONObject(i);\n-            if (object.has(\"type\") && !object.optString(\"type\").equals(\"hidden\") && !object.has(\"relevance\")) {\n-                ((JsonWizardFormFragment) formFragment).setNextStepHaveNoRelevance(true);\n+            if (object.has(JsonFormConstants.TYPE) && !object.optString(JsonFormConstants.TYPE).equals(JsonFormConstants.HIDDEN) && !object.has(JsonFormConstants.RELEVANCE)) {\n+                ((JsonWizardFormFragment) formFragment).setNextStepHasNoRelevance(true);\n                 break;\n             }\n         }\n", "next_change": {"commit": "0efbfe93c33b59447def32c5db09c88761c953b7", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex 777638d6..3cce7a78 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -720,7 +720,7 @@ public class Utils {\n         for (int i = 0; i < fields.length(); i++) {\n             JSONObject object = fields.optJSONObject(i);\n             if (object.has(JsonFormConstants.TYPE) && !object.optString(JsonFormConstants.TYPE).equals(JsonFormConstants.HIDDEN) && !object.has(JsonFormConstants.RELEVANCE)) {\n-                ((JsonWizardFormFragment) formFragment).setNextStepHasNoRelevance(true);\n+                ((JsonWizardFormFragment) formFragment).setNextStepHasNoSkipLogic(true);\n                 break;\n             }\n         }\n", "next_change": {"commit": "69d2874be50fce28aba1e66f5befef7587364401", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex 3cce7a78..f32f2a13 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -711,18 +710,25 @@ public class Utils {\n \n     /***\n      * Checks if step has no skip logic fields and that fields does not have type hidden\n-     * @param formFragment\n+     * @param formFragment {@link JsonFormFragment}\n      */\n-    public static void checkIfStepNoSkipLogic(JsonFormFragment formFragment) {\n-        JSONObject jsonObject = formFragment.getJsonApi().getmJSONObject();\n-        JSONObject jsonObject1 = jsonObject.optJSONObject(formFragment.getJsonApi().nextStep());\n-        JSONArray fields = jsonObject1.optJSONArray(JsonFormConstants.FIELDS);\n-        for (int i = 0; i < fields.length(); i++) {\n-            JSONObject object = fields.optJSONObject(i);\n-            if (object.has(JsonFormConstants.TYPE) && !object.optString(JsonFormConstants.TYPE).equals(JsonFormConstants.HIDDEN) && !object.has(JsonFormConstants.RELEVANCE)) {\n-                ((JsonWizardFormFragment) formFragment).setNextStepHasNoSkipLogic(true);\n-                break;\n+    public static void checkIfStepHasNoSkipLogic(JsonFormFragment formFragment) {\n+        String step = formFragment.getJsonApi().nextStep();\n+        if (formFragment.getJsonApi().stepSkipLogicPresenceMap().get(step) == null) {\n+            boolean hasNoSkipLogic = false;\n+            JSONObject jsonObject = formFragment.getJsonApi().getmJSONObject();\n+            JSONObject jsonStepObject = jsonObject.optJSONObject(step);\n+            JSONArray fields = jsonStepObject.optJSONArray(JsonFormConstants.FIELDS);\n+            for (int i = 0; i < fields.length(); i++) {\n+                JSONObject object = fields.optJSONObject(i);\n+                if (object.has(JsonFormConstants.TYPE)\n+                        && !object.optString(JsonFormConstants.TYPE).equals(JsonFormConstants.HIDDEN)\n+                        && !object.has(JsonFormConstants.RELEVANCE)) {\n+                    hasNoSkipLogic = true;\n+                    break;\n+                }\n             }\n+            formFragment.getJsonApi().stepSkipLogicPresenceMap().put(step, hasNoSkipLogic);\n         }\n     }\n }\n", "next_change": {"commit": "5641b10c085b8e65ce0151cfff562f99f04ec757", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex f32f2a13..92010334 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -708,27 +748,31 @@ public class Utils {\n         return null;\n     }\n \n+\n     /***\n-     * Checks if step has no skip logic fields and that fields does not have type hidden\n-     * @param formFragment {@link JsonFormFragment}\n+     * removes the generated dynamic rules by repeating group\n      */\n-    public static void checkIfStepHasNoSkipLogic(JsonFormFragment formFragment) {\n-        String step = formFragment.getJsonApi().nextStep();\n-        if (formFragment.getJsonApi().stepSkipLogicPresenceMap().get(step) == null) {\n-            boolean hasNoSkipLogic = false;\n-            JSONObject jsonObject = formFragment.getJsonApi().getmJSONObject();\n-            JSONObject jsonStepObject = jsonObject.optJSONObject(step);\n-            JSONArray fields = jsonStepObject.optJSONArray(JsonFormConstants.FIELDS);\n-            for (int i = 0; i < fields.length(); i++) {\n-                JSONObject object = fields.optJSONObject(i);\n-                if (object.has(JsonFormConstants.TYPE)\n-                        && !object.optString(JsonFormConstants.TYPE).equals(JsonFormConstants.HIDDEN)\n-                        && !object.has(JsonFormConstants.RELEVANCE)) {\n-                    hasNoSkipLogic = true;\n-                    break;\n-                }\n+    public static void removeGeneratedDynamicRules(JsonFormFragment formFragment) {\n+        JSONObject form = formFragment.getJsonApi().getmJSONObject();\n+        JSONArray jsonArray = FormUtils.getMultiStepFormFields(form);\n+        for (int i = 0; i < jsonArray.length(); i++) {\n+            JSONObject jsonObject = jsonArray.optJSONObject(i);\n+            if (jsonObject.has(JsonFormConstants.RELEVANCE) &&\n+                    jsonObject.optJSONObject(JsonFormConstants.RELEVANCE).has(RuleConstant.RULES_ENGINE) &&\n+                    jsonObject.optJSONObject(JsonFormConstants.RELEVANCE).optJSONObject(RuleConstant.RULES_ENGINE)\n+                            .has(JsonFormConstants.JSON_FORM_KEY.EX_RULES) &&\n+                    jsonObject.optJSONObject(JsonFormConstants.RELEVANCE).optJSONObject(RuleConstant.RULES_ENGINE)\n+                            .optJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES).has(RuleConstant.RULES_DYNAMIC)) {\n+                jsonArray.optJSONObject(i).remove(JsonFormConstants.RELEVANCE);\n+            }\n+            if (jsonObject.has(JsonFormConstants.CALCULATION) &&\n+                    jsonObject.optJSONObject(JsonFormConstants.CALCULATION).has(RuleConstant.RULES_ENGINE) &&\n+                    jsonObject.optJSONObject(JsonFormConstants.CALCULATION).optJSONObject(RuleConstant.RULES_ENGINE)\n+                            .has(JsonFormConstants.JSON_FORM_KEY.EX_RULES) &&\n+                    jsonObject.optJSONObject(JsonFormConstants.CALCULATION).optJSONObject(RuleConstant.RULES_ENGINE)\n+                            .optJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES).has(RuleConstant.RULES_DYNAMIC)) {\n+                jsonArray.optJSONObject(i).remove(JsonFormConstants.CALCULATION);\n             }\n-            formFragment.getJsonApi().stepSkipLogicPresenceMap().put(step, hasNoSkipLogic);\n         }\n     }\n }\n", "next_change": {"commit": "722ad85f86cea883031cf186cf6bec62ac248965", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex 92010334..d45ede2d 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -775,6 +808,10 @@ public class Utils {\n             }\n         }\n     }\n+\n+    public static final boolean isRunningOnUiThread() {\n+        return Looper.getMainLooper().getThread() == Thread.currentThread();\n+    }\n }\n \n \n", "next_change": {"commit": "fe558c861be4d61f9274f1f31b3a3d167634d70f", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex d45ede2d..ee035de1 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -809,8 +790,18 @@ public class Utils {\n         }\n     }\n \n-    public static final boolean isRunningOnUiThread() {\n-        return Looper.getMainLooper().getThread() == Thread.currentThread();\n+\n+    public static String formatDateToPattern(String date, String inputFormat, String outputFormat) {\n+        if (StringUtils.isEmpty(date)) return \"\";\n+        SimpleDateFormat format = new SimpleDateFormat(inputFormat);\n+        Date newDate = null;\n+        try {\n+            newDate = format.parse(date);\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+        format = new SimpleDateFormat(outputFormat);\n+        return format.format(newDate);\n     }\n }\n \n", "next_change": {"commit": "a416154b9f4f8bcb9d9586be8bb993433c984955", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex ee035de1..318d8160 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -798,11 +844,25 @@ public class Utils {\n         try {\n             newDate = format.parse(date);\n         } catch (ParseException e) {\n-            e.printStackTrace();\n+            Timber.e(e);\n         }\n         format = new SimpleDateFormat(outputFormat);\n         return format.format(newDate);\n     }\n+\n+\n+    public static int getResourceId(Context context, String name, ResourceType resourceType) {\n+        try {\n+            return context.getResources().getIdentifier(name, resourceType.getType(), context.getPackageName());\n+        } catch (Exception e) {\n+            Timber.e(e);\n+            return -1;\n+        }\n+    }\n+  \n+    public static boolean isEmptyJsonArray(JSONArray jsonArray) {\n+        return jsonArray == null || jsonArray.length() == 0;\n+    }\n }\n \n \n", "next_change": {"commit": "763d944e72141712055783e00e399b7ad73db5d5", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex 318d8160..72020562 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -859,7 +826,7 @@ public class Utils {\n             return -1;\n         }\n     }\n-  \n+\n     public static boolean isEmptyJsonArray(JSONArray jsonArray) {\n         return jsonArray == null || jsonArray.length() == 0;\n     }\n", "next_change": {"commit": "fc38543dc6b8ea8ab6bf2288862de30b9db322a2", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex 72020562..472c5aaa 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -830,6 +878,38 @@ public class Utils {\n     public static boolean isEmptyJsonArray(JSONArray jsonArray) {\n         return jsonArray == null || jsonArray.length() == 0;\n     }\n+\n+    /**\n+     * Returns the object that holds the repeating group count\n+     *\n+     * @return\n+     * @throws JSONException\n+     */\n+    @Nullable\n+    public static JSONObject getRepeatingGroupCountObj(@NotNull WidgetArgs widgetArgs) throws JSONException {\n+        String repeatingGroupCountObjKey = widgetArgs.getJsonObject().get(KEY) + \"_count\";\n+        JSONObject stepJsonObject = widgetArgs.getFormFragment().getStep(widgetArgs.getStepName());\n+        if (stepJsonObject != null) {\n+            JSONArray stepFields = stepJsonObject.optJSONArray(JsonFormConstants.FIELDS);\n+            JSONObject repeatingGroupCountObj = FormUtils.getFieldJSONObject(stepFields, repeatingGroupCountObjKey);\n+            // prevents re-adding the count object during form traversals\n+            if (repeatingGroupCountObj != null) {\n+                return repeatingGroupCountObj;\n+            }\n+\n+            repeatingGroupCountObj = new JSONObject();\n+            repeatingGroupCountObj.put(KEY, repeatingGroupCountObjKey);\n+            repeatingGroupCountObj.put(OPENMRS_ENTITY_PARENT, \"\");\n+            repeatingGroupCountObj.put(OPENMRS_ENTITY, \"\");\n+            repeatingGroupCountObj.put(OPENMRS_ENTITY_ID, \"\");\n+            repeatingGroupCountObj.put(TYPE, \"\");\n+            repeatingGroupCountObj.put(TEXT, widgetArgs.getJsonObject().get(REFERENCE_EDIT_TEXT_HINT));\n+            stepFields.put(repeatingGroupCountObj);\n+            return repeatingGroupCountObj;\n+        } else {\n+            return null;\n+        }\n+    }\n }\n \n \n", "next_change": {"commit": "6998816f6837c92eaf37e0641b79da673cd64189", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex 472c5aaa..361b368e 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -878,38 +874,6 @@ public class Utils {\n     public static boolean isEmptyJsonArray(JSONArray jsonArray) {\n         return jsonArray == null || jsonArray.length() == 0;\n     }\n-\n-    /**\n-     * Returns the object that holds the repeating group count\n-     *\n-     * @return\n-     * @throws JSONException\n-     */\n-    @Nullable\n-    public static JSONObject getRepeatingGroupCountObj(@NotNull WidgetArgs widgetArgs) throws JSONException {\n-        String repeatingGroupCountObjKey = widgetArgs.getJsonObject().get(KEY) + \"_count\";\n-        JSONObject stepJsonObject = widgetArgs.getFormFragment().getStep(widgetArgs.getStepName());\n-        if (stepJsonObject != null) {\n-            JSONArray stepFields = stepJsonObject.optJSONArray(JsonFormConstants.FIELDS);\n-            JSONObject repeatingGroupCountObj = FormUtils.getFieldJSONObject(stepFields, repeatingGroupCountObjKey);\n-            // prevents re-adding the count object during form traversals\n-            if (repeatingGroupCountObj != null) {\n-                return repeatingGroupCountObj;\n-            }\n-\n-            repeatingGroupCountObj = new JSONObject();\n-            repeatingGroupCountObj.put(KEY, repeatingGroupCountObjKey);\n-            repeatingGroupCountObj.put(OPENMRS_ENTITY_PARENT, \"\");\n-            repeatingGroupCountObj.put(OPENMRS_ENTITY, \"\");\n-            repeatingGroupCountObj.put(OPENMRS_ENTITY_ID, \"\");\n-            repeatingGroupCountObj.put(TYPE, \"\");\n-            repeatingGroupCountObj.put(TEXT, widgetArgs.getJsonObject().get(REFERENCE_EDIT_TEXT_HINT));\n-            stepFields.put(repeatingGroupCountObj);\n-            return repeatingGroupCountObj;\n-        } else {\n-            return null;\n-        }\n-    }\n }\n \n \n", "next_change": {"commit": "4392e20851fb8d56373ba20ef2bb1d57ed3834d1", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex 361b368e..e7b1b49c 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -874,6 +882,38 @@ public class Utils {\n     public static boolean isEmptyJsonArray(JSONArray jsonArray) {\n         return jsonArray == null || jsonArray.length() == 0;\n     }\n+\n+    /**\n+     * Returns the object that holds the repeating group count\n+     *\n+     * @return\n+     * @throws JSONException\n+     */\n+    @Nullable\n+    public static JSONObject getRepeatingGroupCountObj(@NotNull WidgetArgs widgetArgs) throws JSONException {\n+        String repeatingGroupCountObjKey = widgetArgs.getJsonObject().get(KEY) + \"_count\";\n+        JSONObject stepJsonObject = widgetArgs.getFormFragment().getStep(widgetArgs.getStepName());\n+        if (stepJsonObject != null) {\n+            JSONArray stepFields = stepJsonObject.optJSONArray(JsonFormConstants.FIELDS);\n+            JSONObject repeatingGroupCountObj = FormUtils.getFieldJSONObject(stepFields, repeatingGroupCountObjKey);\n+            // prevents re-adding the count object during form traversals\n+            if (repeatingGroupCountObj != null) {\n+                return repeatingGroupCountObj;\n+            }\n+\n+            repeatingGroupCountObj = new JSONObject();\n+            repeatingGroupCountObj.put(KEY, repeatingGroupCountObjKey);\n+            repeatingGroupCountObj.put(OPENMRS_ENTITY_PARENT, \"\");\n+            repeatingGroupCountObj.put(OPENMRS_ENTITY, \"\");\n+            repeatingGroupCountObj.put(OPENMRS_ENTITY_ID, \"\");\n+            repeatingGroupCountObj.put(TYPE, \"\");\n+            repeatingGroupCountObj.put(TEXT, widgetArgs.getJsonObject().get(REFERENCE_EDIT_TEXT_HINT));\n+            stepFields.put(repeatingGroupCountObj);\n+            return repeatingGroupCountObj;\n+        } else {\n+            return null;\n+        }\n+    }\n }\n \n \n", "next_change": {"commit": "22af1cc0e32958845608af752ed481e565396708", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex e7b1b49c..8d6981ea 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -893,26 +893,25 @@ public class Utils {\n     public static JSONObject getRepeatingGroupCountObj(@NotNull WidgetArgs widgetArgs) throws JSONException {\n         String repeatingGroupCountObjKey = widgetArgs.getJsonObject().get(KEY) + \"_count\";\n         JSONObject stepJsonObject = widgetArgs.getFormFragment().getStep(widgetArgs.getStepName());\n-        if (stepJsonObject != null) {\n-            JSONArray stepFields = stepJsonObject.optJSONArray(JsonFormConstants.FIELDS);\n-            JSONObject repeatingGroupCountObj = FormUtils.getFieldJSONObject(stepFields, repeatingGroupCountObjKey);\n-            // prevents re-adding the count object during form traversals\n-            if (repeatingGroupCountObj != null) {\n-                return repeatingGroupCountObj;\n-            }\n-\n-            repeatingGroupCountObj = new JSONObject();\n-            repeatingGroupCountObj.put(KEY, repeatingGroupCountObjKey);\n-            repeatingGroupCountObj.put(OPENMRS_ENTITY_PARENT, \"\");\n-            repeatingGroupCountObj.put(OPENMRS_ENTITY, \"\");\n-            repeatingGroupCountObj.put(OPENMRS_ENTITY_ID, \"\");\n-            repeatingGroupCountObj.put(TYPE, \"\");\n-            repeatingGroupCountObj.put(TEXT, widgetArgs.getJsonObject().get(REFERENCE_EDIT_TEXT_HINT));\n-            stepFields.put(repeatingGroupCountObj);\n-            return repeatingGroupCountObj;\n-        } else {\n+        if (stepJsonObject == null) {\n             return null;\n         }\n+        JSONArray stepFields = stepJsonObject.optJSONArray(JsonFormConstants.FIELDS);\n+        JSONObject repeatingGroupCountObj = FormUtils.getFieldJSONObject(stepFields, repeatingGroupCountObjKey);\n+        // prevents re-adding the count object during form traversals\n+        if (repeatingGroupCountObj != null) {\n+            return repeatingGroupCountObj;\n+        }\n+\n+        repeatingGroupCountObj = new JSONObject();\n+        repeatingGroupCountObj.put(KEY, repeatingGroupCountObjKey);\n+        repeatingGroupCountObj.put(OPENMRS_ENTITY_PARENT, \"\");\n+        repeatingGroupCountObj.put(OPENMRS_ENTITY, \"\");\n+        repeatingGroupCountObj.put(OPENMRS_ENTITY_ID, \"\");\n+        repeatingGroupCountObj.put(TYPE, \"\");\n+        repeatingGroupCountObj.put(TEXT, widgetArgs.getJsonObject().get(REFERENCE_EDIT_TEXT_HINT));\n+        stepFields.put(repeatingGroupCountObj);\n+        return repeatingGroupCountObj;\n     }\n }\n \n", "next_change": {"commit": "f356dd9e66aaf74fc50a96358272ed3cf0b257aa", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex 8d6981ea..7df1a5e2 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -882,37 +843,6 @@ public class Utils {\n     public static boolean isEmptyJsonArray(JSONArray jsonArray) {\n         return jsonArray == null || jsonArray.length() == 0;\n     }\n-\n-    /**\n-     * Returns the object that holds the repeating group count\n-     *\n-     * @return\n-     * @throws JSONException\n-     */\n-    @Nullable\n-    public static JSONObject getRepeatingGroupCountObj(@NotNull WidgetArgs widgetArgs) throws JSONException {\n-        String repeatingGroupCountObjKey = widgetArgs.getJsonObject().get(KEY) + \"_count\";\n-        JSONObject stepJsonObject = widgetArgs.getFormFragment().getStep(widgetArgs.getStepName());\n-        if (stepJsonObject == null) {\n-            return null;\n-        }\n-        JSONArray stepFields = stepJsonObject.optJSONArray(JsonFormConstants.FIELDS);\n-        JSONObject repeatingGroupCountObj = FormUtils.getFieldJSONObject(stepFields, repeatingGroupCountObjKey);\n-        // prevents re-adding the count object during form traversals\n-        if (repeatingGroupCountObj != null) {\n-            return repeatingGroupCountObj;\n-        }\n-\n-        repeatingGroupCountObj = new JSONObject();\n-        repeatingGroupCountObj.put(KEY, repeatingGroupCountObjKey);\n-        repeatingGroupCountObj.put(OPENMRS_ENTITY_PARENT, \"\");\n-        repeatingGroupCountObj.put(OPENMRS_ENTITY, \"\");\n-        repeatingGroupCountObj.put(OPENMRS_ENTITY_ID, \"\");\n-        repeatingGroupCountObj.put(TYPE, \"\");\n-        repeatingGroupCountObj.put(TEXT, widgetArgs.getJsonObject().get(REFERENCE_EDIT_TEXT_HINT));\n-        stepFields.put(repeatingGroupCountObj);\n-        return repeatingGroupCountObj;\n-    }\n }\n \n \n", "next_change": {"commit": "4c59c4e0b33af4b0f5fbdc67daa8cee9a683ec76", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex 7df1a5e2..d6081199 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -843,6 +894,37 @@ public class Utils {\n     public static boolean isEmptyJsonArray(JSONArray jsonArray) {\n         return jsonArray == null || jsonArray.length() == 0;\n     }\n+\n+    /**\n+     * Returns the object that holds the repeating group count\n+     *\n+     * @return\n+     * @throws JSONException\n+     */\n+    @Nullable\n+    public static JSONObject getRepeatingGroupCountObj(@NotNull WidgetArgs widgetArgs) throws JSONException {\n+        String repeatingGroupCountObjKey = widgetArgs.getJsonObject().get(KEY) + \"_count\";\n+        JSONObject stepJsonObject = widgetArgs.getFormFragment().getStep(widgetArgs.getStepName());\n+        if (stepJsonObject == null) {\n+            return null;\n+        }\n+        JSONArray stepFields = stepJsonObject.optJSONArray(JsonFormConstants.FIELDS);\n+        JSONObject repeatingGroupCountObj = FormUtils.getFieldJSONObject(stepFields, repeatingGroupCountObjKey);\n+        // prevents re-adding the count object during form traversals\n+        if (repeatingGroupCountObj != null) {\n+            return repeatingGroupCountObj;\n+        }\n+\n+        repeatingGroupCountObj = new JSONObject();\n+        repeatingGroupCountObj.put(KEY, repeatingGroupCountObjKey);\n+        repeatingGroupCountObj.put(OPENMRS_ENTITY_PARENT, \"\");\n+        repeatingGroupCountObj.put(OPENMRS_ENTITY, \"\");\n+        repeatingGroupCountObj.put(OPENMRS_ENTITY_ID, \"\");\n+        repeatingGroupCountObj.put(TYPE, \"\");\n+        repeatingGroupCountObj.put(TEXT, widgetArgs.getJsonObject().get(REFERENCE_EDIT_TEXT_HINT));\n+        stepFields.put(repeatingGroupCountObj);\n+        return repeatingGroupCountObj;\n+    }\n }\n \n \n", "next_change": {"commit": "5d9ec36b4c8f040ba0b878669b823e5fff5288fd", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex d6081199..5a0085d6 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -895,35 +844,8 @@ public class Utils {\n         return jsonArray == null || jsonArray.length() == 0;\n     }\n \n-    /**\n-     * Returns the object that holds the repeating group count\n-     *\n-     * @return\n-     * @throws JSONException\n-     */\n-    @Nullable\n-    public static JSONObject getRepeatingGroupCountObj(@NotNull WidgetArgs widgetArgs) throws JSONException {\n-        String repeatingGroupCountObjKey = widgetArgs.getJsonObject().get(KEY) + \"_count\";\n-        JSONObject stepJsonObject = widgetArgs.getFormFragment().getStep(widgetArgs.getStepName());\n-        if (stepJsonObject == null) {\n-            return null;\n-        }\n-        JSONArray stepFields = stepJsonObject.optJSONArray(JsonFormConstants.FIELDS);\n-        JSONObject repeatingGroupCountObj = FormUtils.getFieldJSONObject(stepFields, repeatingGroupCountObjKey);\n-        // prevents re-adding the count object during form traversals\n-        if (repeatingGroupCountObj != null) {\n-            return repeatingGroupCountObj;\n-        }\n-\n-        repeatingGroupCountObj = new JSONObject();\n-        repeatingGroupCountObj.put(KEY, repeatingGroupCountObjKey);\n-        repeatingGroupCountObj.put(OPENMRS_ENTITY_PARENT, \"\");\n-        repeatingGroupCountObj.put(OPENMRS_ENTITY, \"\");\n-        repeatingGroupCountObj.put(OPENMRS_ENTITY_ID, \"\");\n-        repeatingGroupCountObj.put(TYPE, \"\");\n-        repeatingGroupCountObj.put(TEXT, widgetArgs.getJsonObject().get(REFERENCE_EDIT_TEXT_HINT));\n-        stepFields.put(repeatingGroupCountObj);\n-        return repeatingGroupCountObj;\n+    public static boolean isEmptyJsonObject(JSONObject jsonObject) {\n+        return jsonObject == null || jsonObject.length() == 0;\n     }\n }\n \n", "next_change": {"commit": "ac32b08adb2d40724778f1caf8aa1b04e083cca1", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex 5a0085d6..1d0120d3 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -844,8 +846,23 @@ public class Utils {\n         return jsonArray == null || jsonArray.length() == 0;\n     }\n \n-    public static boolean isEmptyJsonObject(JSONObject jsonObject) {\n-        return jsonObject == null || jsonObject.length() == 0;\n+    public static void showAlertDialog(Context context, String title, String message,\n+                                       String negativeBtnTxt, String positiveBtnTxt,\n+                                       DialogInterface.OnClickListener negativeBtnListener,\n+                                       DialogInterface.OnClickListener positiveBtnListener) {\n+\n+        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(context, R.style.AppThemeAlertDialog).setTitle(title)\n+                .setMessage(message);\n+\n+        if (negativeBtnListener != null) {\n+            alertDialogBuilder.setNegativeButton(negativeBtnTxt, negativeBtnListener);\n+        }\n+\n+        if (positiveBtnListener != null) {\n+            alertDialogBuilder.setPositiveButton(positiveBtnTxt, positiveBtnListener);\n+        }\n+\n+        alertDialogBuilder.create().show();\n     }\n }\n \n", "next_change": {"commit": "f62113b23f32b27b83249ee478dbb289a4dcd467", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex 1d0120d3..742ece75 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -864,6 +864,10 @@ public class Utils {\n \n         alertDialogBuilder.create().show();\n     }\n+\n+    public static boolean isEmptyJsonObject(JSONObject jsonObject) {\n+        return jsonObject == null || jsonObject.length() == 0;\n+    }\n }\n \n \n", "next_change": {"commit": "427ae0c6ccbe23fcc45727fa8ababf980d26e1a9", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex 742ece75..1d81d0d0 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -868,6 +919,38 @@ public class Utils {\n     public static boolean isEmptyJsonObject(JSONObject jsonObject) {\n         return jsonObject == null || jsonObject.length() == 0;\n     }\n+\n+\n+    /**\n+     * Returns the object that holds the repeating group count\n+     *\n+     * @return\n+     * @throws JSONException\n+     */\n+    @Nullable\n+    public static JSONObject getRepeatingGroupCountObj(@NotNull WidgetArgs widgetArgs) throws JSONException {\n+        String repeatingGroupCountObjKey = widgetArgs.getJsonObject().get(KEY) + \"_count\";\n+        JSONObject stepJsonObject = widgetArgs.getFormFragment().getStep(widgetArgs.getStepName());\n+        if (stepJsonObject == null) {\n+            return null;\n+        }\n+        JSONArray stepFields = stepJsonObject.optJSONArray(JsonFormConstants.FIELDS);\n+        JSONObject repeatingGroupCountObj = FormUtils.getFieldJSONObject(stepFields, repeatingGroupCountObjKey);\n+        // prevents re-adding the count object during form traversals\n+        if (repeatingGroupCountObj != null) {\n+            return repeatingGroupCountObj;\n+        }\n+\n+        repeatingGroupCountObj = new JSONObject();\n+        repeatingGroupCountObj.put(KEY, repeatingGroupCountObjKey);\n+        repeatingGroupCountObj.put(OPENMRS_ENTITY_PARENT, \"\");\n+        repeatingGroupCountObj.put(OPENMRS_ENTITY, \"\");\n+        repeatingGroupCountObj.put(OPENMRS_ENTITY_ID, \"\");\n+        repeatingGroupCountObj.put(TYPE, \"\");\n+        repeatingGroupCountObj.put(TEXT, widgetArgs.getJsonObject().get(REFERENCE_EDIT_TEXT_HINT));\n+        stepFields.put(repeatingGroupCountObj);\n+        return repeatingGroupCountObj;\n+    }\n }\n \n \n", "next_change": {"commit": "fb8798b3e9d8869cfee3d95e23ec4a82428c0785", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex 1d81d0d0..7f3313a7 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -947,6 +948,7 @@ public class Utils {\n         repeatingGroupCountObj.put(OPENMRS_ENTITY, \"\");\n         repeatingGroupCountObj.put(OPENMRS_ENTITY_ID, \"\");\n         repeatingGroupCountObj.put(TYPE, \"\");\n+        repeatingGroupCountObj.put(VALUE, \"0\");\n         repeatingGroupCountObj.put(TEXT, widgetArgs.getJsonObject().get(REFERENCE_EDIT_TEXT_HINT));\n         stepFields.put(repeatingGroupCountObj);\n         return repeatingGroupCountObj;\n", "next_change": {"commit": "8f0aabaa5414746f0bb74f34e1df6065040ce789", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex 7f3313a7..da7fc5ff 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -953,6 +820,152 @@ public class Utils {\n         stepFields.put(repeatingGroupCountObj);\n         return repeatingGroupCountObj;\n     }\n+\n+    public List<String> createExpansionPanelChildren(JSONArray jsonArray) throws JSONException {\n+        List<String> stringList = new ArrayList<>();\n+        String label;\n+        for (int i = 0; i < jsonArray.length(); i++) {\n+            if (!jsonArray.isNull(i)) {\n+                JSONObject jsonObject = jsonArray.getJSONObject(i);\n+                if (jsonObject.has(JsonFormConstants.VALUES) && jsonObject.has(JsonFormConstants.LABEL) &&\n+                        !\"\".equals(jsonObject.getString(JsonFormConstants.LABEL))) {\n+                    //Get label and replace any colon in some labels. Not needed at this point\n+                    label = jsonObject.getString(JsonFormConstants.LABEL).replace(\":\", \"\");\n+                    stringList.add(label + \":\" + getStringValue(jsonObject));\n+                }\n+            }\n+        }\n+\n+        return stringList;\n+    }\n+\n+    private String getStringValue(JSONObject jsonObject) throws JSONException {\n+        StringBuilder value = new StringBuilder();\n+        if (jsonObject != null) {\n+            JSONArray jsonArray = jsonObject.getJSONArray(JsonFormConstants.VALUES);\n+            for (int i = 0; i < jsonArray.length(); i++) {\n+                String stringValue = jsonArray.getString(i);\n+                value.append(getValueFromSecondaryValues(stringValue));\n+                value.append(\", \");\n+            }\n+        }\n+\n+        return value.toString().replaceAll(\", $\", \"\");\n+    }\n+\n+    private String getValueFromSecondaryValues(String itemString) {\n+        String[] strings = itemString.split(\":\");\n+        return strings.length > 1 ? strings[1] : strings[0];\n+    }\n+\n+    protected String getKey(JSONObject object) throws JSONException {\n+        return object.has(RuleConstant.IS_RULE_CHECK) && object.getBoolean(RuleConstant.IS_RULE_CHECK) ?\n+                object.get(RuleConstant.STEP) + \"_\" + object.get(KEY) : VALUE;\n+    }\n+\n+    protected Object getValue(JSONObject object) throws JSONException {\n+        Object value;\n+        if (object.has(VALUE)) {\n+            value = returnValue(object);\n+            if (isNumberWidget(object)) {\n+                value = TextUtils.isEmpty(object.optString(VALUE)) ? 0 :\n+                        processNumberValues(object.optString(VALUE));\n+            } else if (value != null && !TextUtils.isEmpty(object.getString(VALUE)) &&\n+                    canHaveNumber(object)) {\n+                value = processNumberValues(value);\n+            }\n+\n+        } else {\n+            value = isNumberWidget(object) ? 0 : \"\";\n+        }\n+\n+        return value;\n+    }\n+\n+    protected boolean isNumberWidget(JSONObject object) throws JSONException {\n+        return object.has(JsonFormConstants.EDIT_TYPE) &&\n+                object.getString(JsonFormConstants.EDIT_TYPE).equals(JsonFormConstants.EDIT_TEXT_TYPE.NUMBER) ||\n+                object.getString(TYPE).equals(JsonFormConstants.NUMBER_SELECTOR);\n+    }\n+\n+    protected Object processNumberValues(Object object) {\n+        Object value = object;\n+        try {\n+            if (value.toString().contains(\".\")) {\n+                value = String.valueOf((float) Math.round(Float.valueOf(value.toString()) * 100) / 100);\n+            } else {\n+                value = Integer.valueOf(value.toString());\n+            }\n+        } catch (NumberFormatException e) {\n+            Timber.e(e);\n+        }\n+        return value;\n+    }\n+\n+    protected boolean canHaveNumber(JSONObject object) throws JSONException {\n+        return isNumberWidget(object) || object.getString(TYPE).equals(JsonFormConstants.HIDDEN) ||\n+                object.getString(TYPE).equals(JsonFormConstants.SPINNER);\n+    }\n+\n+    public void setChildKey(View view, String type, ExpansionPanelGenericPopupDialog genericPopupDialog) {\n+        String childKey;\n+        if (type != null && (type.equals(JsonFormConstants.CHECK_BOX) || type.equals(JsonFormConstants.NATIVE_RADIO_BUTTON) || type.equals(JsonFormConstants.EXTENDED_RADIO_BUTTON))) {\n+            childKey = (String) view.getTag(com.vijay.jsonwizard.R.id.childKey);\n+            genericPopupDialog.setChildKey(childKey);\n+        }\n+    }\n+\n+    public void setExpansionPanelDetails(String type, String toolbarHeader, String container, ExpansionPanelGenericPopupDialog genericPopupDialog) {\n+        if (type != null && type.equals(JsonFormConstants.EXPANSION_PANEL)) {\n+            genericPopupDialog.setHeader(toolbarHeader);\n+            genericPopupDialog.setContainer(container);\n+        }\n+    }\n+\n+    /**\n+     * Gets the {@link android.support.v4.app.FragmentTransaction} from the {@link Context} and removes any {@link android.support.v4.app.Fragment} with the tag `GenericPopup` from the transaction.\n+     * Then nullifies the stack by calling {@link android.support.v4.app.FragmentTransaction#addToBackStack(String)} with a null value.\n+     *\n+     * @param context {@link Activity} The activity context where this transaction called from\n+     * @return fragmentTransaction {@link android.support.v4.app.FragmentTransaction}\n+     */\n+    @NotNull\n+    public FragmentTransaction getFragmentTransaction(Activity context) {\n+        FragmentTransaction fragmentTransaction = context.getFragmentManager().beginTransaction();\n+        Fragment fragment = context.getFragmentManager().findFragmentByTag(\"GenericPopup\");\n+        if (fragment != null) {\n+            fragmentTransaction.remove(fragment);\n+        }\n+\n+        fragmentTransaction.addToBackStack(null);\n+        return fragmentTransaction;\n+    }\n+\n+    /**\n+     * Enabling the expansion panel views after they were disabled on sub form opening.\n+     *\n+     * @param linearLayout {@link LinearLayout}\n+     */\n+    public void enableExpansionPanelViews(LinearLayout linearLayout) {\n+        RelativeLayout layoutHeader = (RelativeLayout) linearLayout.getChildAt(0);\n+        RelativeLayout expansionHeaderLayout = layoutHeader.findViewById(R.id.expansion_header_layout);\n+        expansionHeaderLayout.setEnabled(true);\n+        expansionHeaderLayout.setClickable(true);\n+\n+        ImageView statusImageView = expansionHeaderLayout.findViewById(R.id.statusImageView);\n+        statusImageView.setEnabled(true);\n+        statusImageView.setClickable(true);\n+\n+        CustomTextView topBarTextView = expansionHeaderLayout.findViewById(R.id.topBarTextView);\n+        topBarTextView.setClickable(true);\n+        topBarTextView.setEnabled(true);\n+\n+        LinearLayout contentLayout = (LinearLayout) linearLayout.getChildAt(1);\n+        LinearLayout buttonLayout = contentLayout.findViewById(R.id.accordion_bottom_navigation);\n+        Button okButton = buttonLayout.findViewById(R.id.ok_button);\n+        okButton.setEnabled(true);\n+        okButton.setClickable(true);\n+    }\n }\n \n \n", "next_change": {"commit": "30330138404293485e0ad6ace1ee8c8813513382", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex da7fc5ff..c3685e50 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -966,6 +982,19 @@ public class Utils {\n         okButton.setEnabled(true);\n         okButton.setClickable(true);\n     }\n+\n+    public static JSONObject generateTranslatableValue(String value, JSONObject item, String itemType) throws JSONException {\n+        JSONObject newValue = new JSONObject();\n+        if (itemType.equals(JsonFormConstants.NATIVE_RADIO_BUTTON) ||\n+                itemType.equals(JsonFormConstants.SPINNER) || itemType.equals(JsonFormConstants.CHECK_BOX)) {\n+            JSONArray options = item.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME);\n+            JSONObject selectedOption = formUtils.getOptionFromOptionsUsingKey(options, value);\n+            newValue.put(JsonFormConstants.VALUE, value);\n+            newValue.put(JsonFormConstants.TEXT, selectedOption.optString(JsonFormConstants.TRANSLATION_TEXT, \"\"));\n+        }\n+        return newValue;\n+    }\n+\n }\n \n \n", "next_change": {"commit": "9b9307aefaa4afefb6472bb9ad2f38912058e331", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex c3685e50..d8517d82 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -983,18 +995,6 @@ public class Utils {\n         okButton.setClickable(true);\n     }\n \n-    public static JSONObject generateTranslatableValue(String value, JSONObject item, String itemType) throws JSONException {\n-        JSONObject newValue = new JSONObject();\n-        if (itemType.equals(JsonFormConstants.NATIVE_RADIO_BUTTON) ||\n-                itemType.equals(JsonFormConstants.SPINNER) || itemType.equals(JsonFormConstants.CHECK_BOX)) {\n-            JSONArray options = item.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME);\n-            JSONObject selectedOption = formUtils.getOptionFromOptionsUsingKey(options, value);\n-            newValue.put(JsonFormConstants.VALUE, value);\n-            newValue.put(JsonFormConstants.TEXT, selectedOption.optString(JsonFormConstants.TRANSLATION_TEXT, \"\"));\n-        }\n-        return newValue;\n-    }\n-\n }\n \n \n", "next_change": {"commit": "80dff8bb1ee4c1cedd8510f4f193d3fa04ef3232", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex d8517d82..0307c271 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -821,180 +953,6 @@ public class Utils {\n         stepFields.put(repeatingGroupCountObj);\n         return repeatingGroupCountObj;\n     }\n-\n-\n-    /**\n-     * @param This     function is to return JSON Object of i.e {\"value\":\"widget_item_key\",\"text\":\"translated_text_value\"} for translatable_widgets_keys. It's not specific to the widget_type\n-     * @param item\n-     * @param itemType\n-     * @return\n-     * @throws JSONException\n-     */\n-\n-    public static JSONObject generateTranslatableValue(String value, JSONObject item) throws JSONException {\n-        JSONObject newValue = new JSONObject();\n-        String itemType = item.has(JsonFormConstants.TYPE) ? item.getString(JsonFormConstants.TYPE) : \"\";\n-        if (JsonFormConstants.NATIVE_RADIO_BUTTON.equals(itemType) || JsonFormConstants.SPINNER.equals(itemType) || JsonFormConstants.CHECK_BOX.equals(itemType)) {\n-            if (item.has(JsonFormConstants.OPTIONS_FIELD_NAME)) {\n-                JSONArray options = item.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME);\n-                JSONObject selectedOption = formUtils.getOptionFromOptionsUsingKey(options, value);\n-                newValue.put(JsonFormConstants.VALUE, value);\n-                newValue.put(JsonFormConstants.TEXT, selectedOption.optString(JsonFormConstants.TRANSLATION_TEXT));\n-                return newValue;\n-            }\n-            newValue.put(JsonFormConstants.VALUE, value);\n-            newValue.put(JsonFormConstants.TEXT, item.optString(JsonFormConstants.TRANSLATION_TEXT));\n-            return newValue;\n-        }\n-        return newValue;\n-    }\n-\n-    public List<String> createExpansionPanelChildren(JSONArray jsonArray) throws JSONException {\n-        List<String> stringList = new ArrayList<>();\n-        String label;\n-        for (int i = 0; i < jsonArray.length(); i++) {\n-            if (!jsonArray.isNull(i)) {\n-                JSONObject jsonObject = jsonArray.getJSONObject(i);\n-                if (jsonObject.has(JsonFormConstants.VALUES) && jsonObject.has(JsonFormConstants.LABEL) &&\n-                        !\"\".equals(jsonObject.getString(JsonFormConstants.LABEL))) {\n-                    //Get label and replace any colon in some labels. Not needed at this point\n-                    label = jsonObject.getString(JsonFormConstants.LABEL).replace(\":\", \"\");\n-                    stringList.add(label + \":\" + getStringValue(jsonObject));\n-                }\n-            }\n-        }\n-\n-        return stringList;\n-    }\n-\n-    private String getStringValue(JSONObject jsonObject) throws JSONException {\n-        StringBuilder value = new StringBuilder();\n-        if (jsonObject != null) {\n-            JSONArray jsonArray = jsonObject.getJSONArray(JsonFormConstants.VALUES);\n-            for (int i = 0; i < jsonArray.length(); i++) {\n-                String stringValue = jsonArray.getString(i);\n-                value.append(getValueFromSecondaryValues(stringValue));\n-                value.append(\", \");\n-            }\n-        }\n-\n-        return value.toString().replaceAll(\", $\", \"\");\n-    }\n-\n-    private String getValueFromSecondaryValues(String itemString) {\n-        String[] strings = itemString.split(\":\");\n-        return strings.length > 1 ? strings[1] : strings[0];\n-    }\n-\n-    protected String getKey(JSONObject object) throws JSONException {\n-        return object.has(RuleConstant.IS_RULE_CHECK) && object.getBoolean(RuleConstant.IS_RULE_CHECK) ?\n-                object.get(RuleConstant.STEP) + \"_\" + object.get(KEY) : VALUE;\n-    }\n-\n-    protected Object getValue(JSONObject object) throws JSONException {\n-        Object value;\n-        if (object.has(VALUE)) {\n-            value = returnValue(object);\n-            if (isNumberWidget(object)) {\n-                value = TextUtils.isEmpty(object.optString(VALUE)) ? 0 :\n-                        processNumberValues(object.optString(VALUE));\n-            } else if (value != null && !TextUtils.isEmpty(object.getString(VALUE)) &&\n-                    canHaveNumber(object)) {\n-                value = processNumberValues(value);\n-            }\n-\n-        } else {\n-            value = isNumberWidget(object) ? 0 : \"\";\n-        }\n-\n-        return value;\n-    }\n-\n-    protected boolean isNumberWidget(JSONObject object) throws JSONException {\n-        return object.has(JsonFormConstants.EDIT_TYPE) &&\n-                object.getString(JsonFormConstants.EDIT_TYPE).equals(JsonFormConstants.EDIT_TEXT_TYPE.NUMBER) ||\n-                object.getString(TYPE).equals(JsonFormConstants.NUMBER_SELECTOR);\n-    }\n-\n-    protected Object processNumberValues(Object object) {\n-        Object value = object;\n-        try {\n-            if (value.toString().contains(\".\")) {\n-                value = String.valueOf((float) Math.round(Float.valueOf(value.toString()) * 100) / 100);\n-            } else {\n-                value = Integer.valueOf(value.toString());\n-            }\n-        } catch (NumberFormatException e) {\n-            Timber.e(e);\n-        }\n-        return value;\n-    }\n-\n-    protected boolean canHaveNumber(JSONObject object) throws JSONException {\n-        return isNumberWidget(object) || object.getString(TYPE).equals(JsonFormConstants.HIDDEN) ||\n-                object.getString(TYPE).equals(JsonFormConstants.SPINNER);\n-    }\n-\n-    public void setChildKey(View view, String type, ExpansionPanelGenericPopupDialog genericPopupDialog) {\n-        String childKey;\n-        if (type != null && (type.equals(JsonFormConstants.CHECK_BOX) || type.equals(JsonFormConstants.NATIVE_RADIO_BUTTON) || type.equals(JsonFormConstants.EXTENDED_RADIO_BUTTON))) {\n-            childKey = (String) view.getTag(com.vijay.jsonwizard.R.id.childKey);\n-            genericPopupDialog.setChildKey(childKey);\n-        }\n-    }\n-\n-    public void setExpansionPanelDetails(String type, String toolbarHeader, String container, ExpansionPanelGenericPopupDialog genericPopupDialog) {\n-        if (type != null && type.equals(JsonFormConstants.EXPANSION_PANEL)) {\n-            genericPopupDialog.setHeader(toolbarHeader);\n-            genericPopupDialog.setContainer(container);\n-        }\n-    }\n-\n-    /**\n-     * Gets the {@link android.support.v4.app.FragmentTransaction} from the {@link Context} and removes any {@link android.support.v4.app.Fragment} with the tag `GenericPopup` from the transaction.\n-     * Then nullifies the stack by calling {@link android.support.v4.app.FragmentTransaction#addToBackStack(String)} with a null value.\n-     *\n-     * @param context {@link Activity} The activity context where this transaction called from\n-     * @return fragmentTransaction {@link android.support.v4.app.FragmentTransaction}\n-     */\n-    @NotNull\n-    public FragmentTransaction getFragmentTransaction(Activity context) {\n-        FragmentTransaction fragmentTransaction = context.getFragmentManager().beginTransaction();\n-        Fragment fragment = context.getFragmentManager().findFragmentByTag(\"GenericPopup\");\n-        if (fragment != null) {\n-            fragmentTransaction.remove(fragment);\n-        }\n-\n-        fragmentTransaction.addToBackStack(null);\n-        return fragmentTransaction;\n-    }\n-\n-    /**\n-     * Enabling the expansion panel views after they were disabled on sub form opening.\n-     *\n-     * @param linearLayout {@link LinearLayout}\n-     */\n-    public void enableExpansionPanelViews(LinearLayout linearLayout) {\n-        RelativeLayout layoutHeader = (RelativeLayout) linearLayout.getChildAt(0);\n-        RelativeLayout expansionHeaderLayout = layoutHeader.findViewById(R.id.expansion_header_layout);\n-        expansionHeaderLayout.setEnabled(true);\n-        expansionHeaderLayout.setClickable(true);\n-\n-        ImageView statusImageView = expansionHeaderLayout.findViewById(R.id.statusImageView);\n-        statusImageView.setEnabled(true);\n-        statusImageView.setClickable(true);\n-\n-        CustomTextView topBarTextView = expansionHeaderLayout.findViewById(R.id.topBarTextView);\n-        topBarTextView.setClickable(true);\n-        topBarTextView.setEnabled(true);\n-\n-        LinearLayout contentLayout = (LinearLayout) linearLayout.getChildAt(1);\n-        LinearLayout buttonLayout = contentLayout.findViewById(R.id.accordion_bottom_navigation);\n-        Button okButton = buttonLayout.findViewById(R.id.ok_button);\n-        okButton.setEnabled(true);\n-        okButton.setClickable(true);\n-    }\n-\n }\n \n \n", "next_change": {"commit": "39ab5c42fdf2ab4c8bffc5577d29276dbc71424b", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex 0307c271..e39267cd 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -953,6 +827,196 @@ public class Utils {\n         stepFields.put(repeatingGroupCountObj);\n         return repeatingGroupCountObj;\n     }\n+\n+\n+    /**\n+     * @param This     function is to return JSON Object of i.e {\"value\":\"widget_item_key\",\"text\":\"translated_text_value\"} for translatable_widgets_keys. It's not specific to the widget_type\n+     * @param item\n+     * @param itemType\n+     * @return\n+     * @throws JSONException\n+     */\n+\n+    public static JSONObject generateTranslatableValue(String value, JSONObject item) throws JSONException {\n+        JSONObject newValue = new JSONObject();\n+        if (item.has(JsonFormConstants.OPTIONS_FIELD_NAME)) {\n+            JSONArray options = item.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME);\n+            JSONObject selectedOption = formUtils.getOptionFromOptionsUsingKey(options, value);\n+            newValue.put(VALUE, value);\n+            newValue.put(TEXT, selectedOption.optString(JsonFormConstants.TRANSLATION_TEXT));\n+            return newValue;\n+        }\n+        newValue.put(VALUE, value);\n+        newValue.put(TEXT, item.optString(JsonFormConstants.TRANSLATION_TEXT));\n+        return newValue;\n+    }\n+\n+    public static boolean enabledProperty(String appPropName) {\n+        NativeFormsProperties nativeFormsProperties = JsonFormFragment.getNativeFormProperties();\n+        return nativeFormsProperties != null && nativeFormsProperties.isTrue(appPropName);\n+    }\n+\n+    public static String getValueFromTranslatedObject(JSONObject item) {\n+        try {\n+            if (item != null && item.has(VALUE)) {\n+                if (item.opt(VALUE) != null && item.opt(VALUE).toString().charAt(0) == '{') {\n+                    return new JSONObject(item.opt(VALUE).toString()).optString(VALUE);\n+                }\n+                return item.opt(VALUE) + \"\";\n+            }\n+            return \"\";\n+        } catch (Exception e) {\n+            Timber.e(e, \"----> getValueFromTranslatedObject\");\n+            return \"\";\n+        }\n+    }\n+\n+    public List<String> createExpansionPanelChildren(JSONArray jsonArray) throws JSONException {\n+        List<String> stringList = new ArrayList<>();\n+        String label;\n+        for (int i = 0; i < jsonArray.length(); i++) {\n+            if (!jsonArray.isNull(i)) {\n+                JSONObject jsonObject = jsonArray.getJSONObject(i);\n+                if (jsonObject.has(JsonFormConstants.VALUES) && jsonObject.has(JsonFormConstants.LABEL) &&\n+                        !\"\".equals(jsonObject.getString(JsonFormConstants.LABEL))) {\n+                    //Get label and replace any colon in some labels. Not needed at this point\n+                    label = jsonObject.getString(JsonFormConstants.LABEL).replace(\":\", \"\");\n+                    stringList.add(label + \":\" + getStringValue(jsonObject));\n+                }\n+            }\n+        }\n+\n+        return stringList;\n+    }\n+\n+    private String getStringValue(JSONObject jsonObject) throws JSONException {\n+        StringBuilder value = new StringBuilder();\n+        if (jsonObject != null) {\n+            JSONArray jsonArray = jsonObject.getJSONArray(JsonFormConstants.VALUES);\n+            for (int i = 0; i < jsonArray.length(); i++) {\n+                String stringValue = jsonArray.getString(i);\n+                value.append(getValueFromSecondaryValues(stringValue));\n+                value.append(\", \");\n+            }\n+        }\n+\n+        return value.toString().replaceAll(\", $\", \"\");\n+    }\n+\n+    private String getValueFromSecondaryValues(String itemString) {\n+        String[] strings = itemString.split(\":\");\n+        return strings.length > 1 ? strings[1] : strings[0];\n+    }\n+\n+    protected String getKey(JSONObject object) throws JSONException {\n+        return object.has(RuleConstant.IS_RULE_CHECK) && object.getBoolean(RuleConstant.IS_RULE_CHECK) ?\n+                object.get(RuleConstant.STEP) + \"_\" + object.get(KEY) : VALUE;\n+    }\n+\n+    protected Object getValue(JSONObject object) throws JSONException {\n+        Object value;\n+        if (object.has(VALUE)) {\n+            value = returnValue(object);\n+            if (isNumberWidget(object)) {\n+                value = TextUtils.isEmpty(object.optString(VALUE)) ? 0 :\n+                        processNumberValues(object.optString(VALUE));\n+            } else if (value != null && !TextUtils.isEmpty(object.getString(VALUE)) &&\n+                    canHaveNumber(object)) {\n+                value = processNumberValues(value);\n+            }\n+\n+        } else {\n+            value = isNumberWidget(object) ? 0 : \"\";\n+        }\n+\n+        return value;\n+    }\n+\n+    protected boolean isNumberWidget(JSONObject object) throws JSONException {\n+        return object.has(JsonFormConstants.EDIT_TYPE) &&\n+                object.getString(JsonFormConstants.EDIT_TYPE).equals(JsonFormConstants.EDIT_TEXT_TYPE.NUMBER) ||\n+                object.getString(TYPE).equals(JsonFormConstants.NUMBER_SELECTOR);\n+    }\n+\n+    protected Object processNumberValues(Object object) {\n+        Object value = object;\n+        try {\n+            if (value.toString().contains(\".\")) {\n+                value = String.valueOf((float) Math.round(Float.valueOf(value.toString()) * 100) / 100);\n+            } else {\n+                value = Integer.valueOf(value.toString());\n+            }\n+        } catch (NumberFormatException e) {\n+            Timber.e(e);\n+        }\n+        return value;\n+    }\n+\n+    protected boolean canHaveNumber(JSONObject object) throws JSONException {\n+        return isNumberWidget(object) || object.getString(TYPE).equals(JsonFormConstants.HIDDEN) ||\n+                object.getString(TYPE).equals(JsonFormConstants.SPINNER);\n+    }\n+\n+    public void setChildKey(View view, String type, ExpansionPanelGenericPopupDialog genericPopupDialog) {\n+        String childKey;\n+        if (type != null && (type.equals(JsonFormConstants.CHECK_BOX) || type.equals(JsonFormConstants.NATIVE_RADIO_BUTTON) || type.equals(JsonFormConstants.EXTENDED_RADIO_BUTTON))) {\n+            childKey = (String) view.getTag(com.vijay.jsonwizard.R.id.childKey);\n+            genericPopupDialog.setChildKey(childKey);\n+        }\n+    }\n+\n+    public void setExpansionPanelDetails(String type, String toolbarHeader, String container, ExpansionPanelGenericPopupDialog genericPopupDialog) {\n+        if (type != null && type.equals(JsonFormConstants.EXPANSION_PANEL)) {\n+            genericPopupDialog.setHeader(toolbarHeader);\n+            genericPopupDialog.setContainer(container);\n+        }\n+    }\n+\n+    /**\n+     * Gets the {@link android.support.v4.app.FragmentTransaction} from the {@link Context} and removes any {@link android.support.v4.app.Fragment} with the tag `GenericPopup` from the transaction.\n+     * Then nullifies the stack by calling {@link android.support.v4.app.FragmentTransaction#addToBackStack(String)} with a null value.\n+     *\n+     * @param context {@link Activity} The activity context where this transaction called from\n+     * @return fragmentTransaction {@link android.support.v4.app.FragmentTransaction}\n+     */\n+    @NotNull\n+    public FragmentTransaction getFragmentTransaction(Activity context) {\n+        FragmentTransaction fragmentTransaction = context.getFragmentManager().beginTransaction();\n+        Fragment fragment = context.getFragmentManager().findFragmentByTag(\"GenericPopup\");\n+        if (fragment != null) {\n+            fragmentTransaction.remove(fragment);\n+        }\n+\n+        fragmentTransaction.addToBackStack(null);\n+        return fragmentTransaction;\n+    }\n+\n+    /**\n+     * Enabling the expansion panel views after they were disabled on sub form opening.\n+     *\n+     * @param linearLayout {@link LinearLayout}\n+     */\n+    public void enableExpansionPanelViews(LinearLayout linearLayout) {\n+        RelativeLayout layoutHeader = (RelativeLayout) linearLayout.getChildAt(0);\n+        RelativeLayout expansionHeaderLayout = layoutHeader.findViewById(R.id.expansion_header_layout);\n+        expansionHeaderLayout.setEnabled(true);\n+        expansionHeaderLayout.setClickable(true);\n+\n+        ImageView statusImageView = expansionHeaderLayout.findViewById(R.id.statusImageView);\n+        statusImageView.setEnabled(true);\n+        statusImageView.setClickable(true);\n+\n+        CustomTextView topBarTextView = expansionHeaderLayout.findViewById(R.id.topBarTextView);\n+        topBarTextView.setClickable(true);\n+        topBarTextView.setEnabled(true);\n+\n+        LinearLayout contentLayout = (LinearLayout) linearLayout.getChildAt(1);\n+        LinearLayout buttonLayout = contentLayout.findViewById(R.id.accordion_bottom_navigation);\n+        Button okButton = buttonLayout.findViewById(R.id.ok_button);\n+        okButton.setEnabled(true);\n+        okButton.setClickable(true);\n+    }\n+\n }\n \n \n", "next_change": {"commit": "5fe180eeb17d08b10c8a0afe0067c9eff4dfd3f1", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex e39267cd..a134b43d 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -1017,6 +1020,22 @@ public class Utils {\n         okButton.setClickable(true);\n     }\n \n+    /***\n+     *\n+     * @param jsonArrayString\n+     * @return\n+     */\n+    public static boolean checkIfValidJsonArray(String jsonArrayString) {\n+        if (StringUtils.isNotBlank(jsonArrayString)) {\n+            try {\n+                return new JSONArray(jsonArrayString).length() > 0;\n+            } catch (Exception e) {\n+                return false;\n+            }\n+        }\n+        return false;\n+    }\n+\n }\n \n \n", "next_change": {"commit": "559f2f7610e49706105c4ac1347f386cbb59380d", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\nindex a134b43d..7ba534d2 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java\n", "chunk": "@@ -1020,20 +1010,19 @@ public class Utils {\n         okButton.setClickable(true);\n     }\n \n-    /***\n-     *\n-     * @param jsonArrayString\n-     * @return\n-     */\n-    public static boolean checkIfValidJsonArray(String jsonArrayString) {\n-        if (StringUtils.isNotBlank(jsonArrayString)) {\n-            try {\n-                return new JSONArray(jsonArrayString).length() > 0;\n-            } catch (Exception e) {\n-                return false;\n+    public static String extractValueFromJson(String value)\n+    {\n+        try{\n+            if(!StringUtils.isEmpty(value) && value.startsWith(\"{\") && value.endsWith(\"}\")) {\n+                JSONObject object = new JSONObject(value);\n+                return object.optString(VALUE);\n             }\n         }\n-        return false;\n+        catch (Exception e)\n+        {\n+            Timber.e(e);\n+        }\n+        return  value;\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "message": "Merge commit", "committedDate": null}, {"oid": "fb73b06fcf39b585fe005d324b3e19c8404ea1fd", "committedDate": "2020-04-07 14:57:04 +0300", "message": "Merge branch 'master' into optimize-native-forms"}, {"oid": "020cc12eb26061fa97c102b846d4496df33858f1", "committedDate": "2020-04-09 11:38:54 +0300", "message": "Merge branch 'master' into optimize-native-forms"}, {"oid": "d9faae57dec79960d57ca7bae24c00b6a89da18f", "committedDate": "2020-04-16 09:55:24 +0300", "message": "Merge branch 'master' into optimize-native-forms"}, {"oid": "af969b7ce6ea7697bc2e575e0d73d19faed28d1d", "committedDate": "2020-05-18 12:41:34 +0300", "message": "update skipping step fix"}, {"oid": "9652df4748cca4ff137739e4e01c719573b69f2d", "committedDate": "2020-05-18 13:04:42 +0300", "message": "code cleanup"}, {"oid": "0efbfe93c33b59447def32c5db09c88761c953b7", "committedDate": "2020-05-18 13:06:51 +0300", "message": "code cleanup"}, {"oid": "e246e88861f2a954bc40491ff906f01ea1de1b52", "committedDate": "2020-05-18 14:00:29 +0300", "message": "temporary fix for loop on back press'"}, {"oid": "69d2874be50fce28aba1e66f5befef7587364401", "committedDate": "2020-05-21 12:09:20 +0300", "message": "add map to hold steps, skiplogic presence"}, {"oid": "287c6501fcabc8a8d5514448da71217f17961570", "committedDate": "2020-05-21 12:40:46 +0300", "message": "update comments"}, {"oid": "5641b10c085b8e65ce0151cfff562f99f04ec757", "committedDate": "2020-05-28 17:08:04 +0300", "message": "Merge branch 'master' into optimize-native-forms"}, {"oid": "a120e9799ad3fa3e5dc3eb21091b31cc144893fc", "committedDate": "2020-06-04 18:27:30 +0300", "message": "Merge branch 'optimize-native-forms' of github.com:OpenSRP/opensrp-client-native-form into skip-step-fix"}, {"oid": "c130412f26db0fa674918bb105cf957a15d008d0", "committedDate": "2020-06-12 14:01:06 +0300", "message": "native radio btn fix, repeating group calculation fix"}, {"oid": "722ad85f86cea883031cf186cf6bec62ac248965", "committedDate": "2020-07-09 12:31:40 +0300", "message": "update visibility update to be done on ui thread"}, {"oid": "fe558c861be4d61f9274f1f31b3a3d167634d70f", "committedDate": "2020-07-23 10:01:27 +0300", "message": "Merge branch 'master' into optimize-native-forms"}, {"oid": "e52ad108f73bdb86864d35886188d2d170cdfd00", "committedDate": "2020-07-23 15:04:57 +0300", "message": "Merge branch 'optimize-native-forms' of github.com:OpenSRP/opensrp-client-native-form into skip-step-fix"}, {"oid": "a7120bc9a4f95a63e979b084ba47bc0fbea5e9b7", "committedDate": "2020-08-04 10:11:00 +0300", "message": "remove hidden fields validation"}, {"oid": "a416154b9f4f8bcb9d9586be8bb993433c984955", "committedDate": "2020-08-21 20:47:54 +0300", "message": "Merge branch 'skip-step-fix' into optimize-native-forms"}, {"oid": "763d944e72141712055783e00e399b7ad73db5d5", "committedDate": "2020-09-15 13:50:38 +0300", "message": ":bug: Format date for calculation"}, {"oid": "329d3c59cc5b5adbd0bce1b6445f64c032eac5c4", "committedDate": "2020-09-15 18:20:18 +0300", "message": ":white_check_mark: Pass dateFormat in get date for calculation"}, {"oid": "49641c3a16f515fdc59bc10796b77d1e0c227e87", "committedDate": "2020-09-29 13:00:12 +0300", "message": "Merge branch 'master' of github.com:OpenSRP/opensrp-client-native-form into optimize-native-forms"}, {"oid": "e63e0b8316d838e94d87543fb8d8b20547c3ed45", "committedDate": "2020-10-07 15:28:51 +0500", "message": "Re-format date before date comparison"}, {"oid": "fc38543dc6b8ea8ab6bf2288862de30b9db322a2", "committedDate": "2020-10-13 10:44:28 +0300", "message": "implement feeedback"}, {"oid": "6998816f6837c92eaf37e0641b79da673cd64189", "committedDate": "2020-10-21 11:26:18 +0300", "message": "Merge branch 'master' of github.com:OpenSRP/opensrp-client-native-form into optimize-native-forms"}, {"oid": "4392e20851fb8d56373ba20ef2bb1d57ed3834d1", "committedDate": "2020-10-21 11:27:44 +0300", "message": "Merge branch 'optimize-native-forms' into repeating_grp_fix"}, {"oid": "22af1cc0e32958845608af752ed481e565396708", "committedDate": "2020-10-29 16:29:45 +0300", "message": "cleanup code"}, {"oid": "b6bdad0041abc719e125725fd53efb4325705d99", "committedDate": "2020-10-30 16:55:18 +0300", "message": "fix codacy"}, {"oid": "9a7359cd68af138ab8a746e48332703227cd708e", "committedDate": "2020-11-17 09:22:25 +0300", "message": "code cleanup"}, {"oid": "f356dd9e66aaf74fc50a96358272ed3cf0b257aa", "committedDate": "2020-11-20 16:31:35 +0500", "message": "clear invalid repeating fields at the time of view removal"}, {"oid": "c996024ae1ad88b7a41b8dcae239ca20f4abdbc0", "committedDate": "2020-11-24 11:31:17 +0500", "message": "feedback implemented"}, {"oid": "4c59c4e0b33af4b0f5fbdc67daa8cee9a683ec76", "committedDate": "2020-11-30 11:12:29 +0300", "message": "update tests & resolve merge conflicts"}, {"oid": "5d9ec36b4c8f040ba0b878669b823e5fff5288fd", "committedDate": "2020-12-07 18:14:10 +0300", "message": "Minor refactor to use utils method"}, {"oid": "ac32b08adb2d40724778f1caf8aa1b04e083cca1", "committedDate": "2020-12-10 09:51:04 +0300", "message": "Pass jsonform exception in result intent and display error dialog to user"}, {"oid": "f62113b23f32b27b83249ee478dbb289a4dcd467", "committedDate": "2020-12-10 10:05:01 +0300", "message": "Merge remote-tracking branch 'origin/master' into only-catch-checked-widget-exceptions"}, {"oid": "427ae0c6ccbe23fcc45727fa8ababf980d26e1a9", "committedDate": "2021-01-12 11:38:39 +0300", "message": "Merge branch 'master' of github.com:OpenSRP/opensrp-client-native-form into optimize-native-forms"}, {"oid": "fb8798b3e9d8869cfee3d95e23ec4a82428c0785", "committedDate": "2021-01-12 11:39:40 +0300", "message": "fix test"}, {"oid": "abfdd4059a0e1cdfdc815ae896378761f506ec50", "committedDate": "2021-01-12 11:56:52 +0300", "message": "fix codacy issue"}, {"oid": "726e53856e9a76fe92d8ee7cc69654a135733d5b", "committedDate": "2022-01-07 04:53:32 +0300", "message": ":bug: Fix the next button on the form wizard not working."}, {"oid": "251ff35ec8253a61b20d9723923fb5e67451638b", "committedDate": "2022-01-20 15:11:58 +0300", "message": ":bug: Update the transaltion value"}, {"oid": "8f0aabaa5414746f0bb74f34e1df6065040ce789", "committedDate": "2022-01-27 17:37:52 +0300", "message": "JSON Form Activity addition of native radio"}, {"oid": "69b6a6772244cb12f19956740a4208221da7d3bd", "committedDate": "2022-02-04 16:48:50 +0300", "message": "Transalating checkBoxes"}, {"oid": "6bfad564012e0f58af0085421c3b76131271f273", "committedDate": "2022-02-16 20:06:51 +0300", "message": "Checkbox"}, {"oid": "30330138404293485e0ad6ace1ee8c8813513382", "committedDate": "2022-02-24 19:41:46 +0300", "message": "Addition of ANC translations"}, {"oid": "9b9307aefaa4afefb6472bb9ad2f38912058e331", "committedDate": "2022-02-25 10:39:32 +0300", "message": "Final Refactoring of generateTranslatableValue"}, {"oid": "be3eb74fc6ae54d61da4223c3cb6aae940c1ed06", "committedDate": "2022-03-10 11:12:45 +0300", "message": "Codacy update"}, {"oid": "f272d268f6382d7acfd5f95a5882f36ceb6d580d", "committedDate": "2022-04-27 08:10:48 +0300", "message": "Native values -1"}, {"oid": "ee33c8503b474eb2229c8974a3dd5520beed607a", "committedDate": "2022-04-28 12:38:09 +0300", "message": "Broken spinner rule"}, {"oid": "80dff8bb1ee4c1cedd8510f4f193d3fa04ef3232", "committedDate": "2022-06-17 11:59:48 +0300", "message": "Migrate to Android X"}, {"oid": "39ab5c42fdf2ab4c8bffc5577d29276dbc71424b", "committedDate": "2022-07-01 10:26:46 +0300", "message": "Merge branch 'master' into feature/translate_radio_button_values"}, {"oid": "003472746af0724e735dea44c2655e202bcbce79", "committedDate": "2022-07-05 15:08:09 +0500", "message": "updated a condition in getValueTranslatedObject"}, {"oid": "bbfff6905b05c68a4692724d9fae36b0f69a3976", "committedDate": "2022-07-05 15:08:22 +0500", "message": "Merge branch 'feature/translate_radio_button_values' of https://github.com/opensrp/opensrp-client-native-form into feature/translate_radio_button_values"}, {"oid": "c1debcb173e3e5ebb6f9e7950522e043375f95ab", "committedDate": "2022-07-08 11:39:20 +0300", "message": "Fixing get mothers age codacy"}, {"oid": "d3a6e7b4f6d0da1276f870fb563bb48b45442962", "committedDate": "2022-07-08 13:47:40 +0300", "message": "JsonFormActivity"}, {"oid": "4325f607bb38ba512696a9ba965647aad8b9748f", "committedDate": "2022-07-14 15:56:11 +0300", "message": "Utils amendment"}, {"oid": "f4cb52d62a28afe44cbb5ad0dd161fa61e51c354", "committedDate": "2022-07-14 17:10:51 +0300", "message": "Utils Codacy"}, {"oid": "5fe180eeb17d08b10c8a0afe0067c9eff4dfd3f1", "committedDate": "2022-07-24 12:15:39 +0300", "message": "Comparatives"}, {"oid": "b681fb4da183036a369d5ab9326bfbe936750bab", "committedDate": "2022-09-28 19:25:50 +0300", "message": "Merge remote-tracking branch 'origin/master' into optibp_calibration"}, {"oid": "559f2f7610e49706105c4ac1347f386cbb59380d", "committedDate": "2022-10-11 11:50:17 +0500", "message": "added missing option required for the human readable value population issue ref # https://github.com/opensrp/opensrp-client-anc/issues/906"}, {"oid": "7c121e3421ff9f9ff668cc2587c039558772ee1a", "committedDate": "2023-01-12 09:34:12 +0300", "message": "Merge branch 'master' into optibp_calibration"}, {"oid": "30cbebc8f5007078e0060ba75056454fd1f2f6ac", "committedDate": "2023-03-07 15:17:58 +0300", "message": "Solve build errors"}]}, {"oid": "32a12cdfb2e6875ffb1f7163cf995f388a4d6584", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/32a12cdfb2e6875ffb1f7163cf995f388a4d6584", "message": "Adds unit tests", "committedDate": "2020-07-30T09:37:49Z", "type": "commit"}, {"oid": "b93b62c08b63d425b9c4158318c31058f8397be9", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/b93b62c08b63d425b9c4158318c31058f8397be9", "message": "Fix builf", "committedDate": "2020-07-30T11:39:52Z", "type": "commit"}, {"oid": "deaf63a82c5f97df6521dc8fd53bf9addcc3c7ad", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/deaf63a82c5f97df6521dc8fd53bf9addcc3c7ad", "message": "Merge branch 'master' into native_form_tester", "committedDate": "2020-07-30T11:48:26Z", "type": "commit"}, {"oid": "b5fffd6b1e65b485e2736ec3619bea96645af7fb", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/b5fffd6b1e65b485e2736ec3619bea96645af7fb", "message": "Remove unused imports  in AssetsFileSourceTest", "committedDate": "2020-07-30T11:49:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ0NTEzMw==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r464445133", "body": "Why not call `getFileInputStream(Context context, String fileName)` here?", "bodyText": "Why not call getFileInputStream(Context context, String fileName) here?", "bodyHTML": "<p dir=\"auto\">Why not call <code>getFileInputStream(Context context, String fileName)</code> here?</p>", "author": "vincent-karuri", "createdAt": "2020-08-03T14:21:24Z", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.vijay.jsonwizard.filesource;\n+\n+import android.content.Context;\n+\n+import com.vijay.jsonwizard.constants.JsonFormConstants;\n+import com.vijay.jsonwizard.interfaces.FormFileSource;\n+import com.vijay.jsonwizard.utils.Utils;\n+\n+import org.jeasy.rules.api.Rules;\n+import org.jeasy.rules.mvel.MVELRuleFactory;\n+import org.json.JSONObject;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+/***\n+ * used to read files stored on the APP's asset folder\n+ *\n+ */\n+public class AssetsFileSource implements FormFileSource {\n+\n+    public static AssetsFileSource INSTANCE = new AssetsFileSource();\n+\n+    private AssetsFileSource() {\n+    }\n+\n+    @Override\n+    public Rules getRulesFromFile(Context context, String fileName) throws Exception {\n+        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(context.getAssets().open(fileName)));", "originalCommit": "b5fffd6b1e65b485e2736ec3619bea96645af7fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ2NDQxMQ==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r464464411", "bodyText": "The return type is different. InputStream vs InputStreamReader", "author": "rkodev", "createdAt": "2020-08-03T14:51:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ0NTEzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ2NzA3Ng==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r464467076", "bodyText": "cool", "author": "vincent-karuri", "createdAt": "2020-08-03T14:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ0NTEzMw=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "2b4ad91f57cf47191ed66e7fa93ac7b8d932d158", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\nindex 95a31b74..6b6da5b2 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java\n", "chunk": "@@ -21,14 +22,16 @@ import java.io.InputStreamReader;\n public class AssetsFileSource implements FormFileSource {\n \n     public static AssetsFileSource INSTANCE = new AssetsFileSource();\n+    private MVELRuleFactory mvelRuleFactory;\n \n     private AssetsFileSource() {\n+        this.mvelRuleFactory = new MVELRuleFactory(new YamlRuleDefinitionReader());\n     }\n \n     @Override\n     public Rules getRulesFromFile(Context context, String fileName) throws Exception {\n         BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(context.getAssets().open(fileName)));\n-        return MVELRuleFactory.createRulesFrom(bufferedReader);\n+        return this.mvelRuleFactory.createRules(bufferedReader);\n     }\n \n     @Override\n", "next_change": null}]}, "commits_in_main": [{"oid": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "message": "Merge commit", "committedDate": null}, {"oid": "2b4ad91f57cf47191ed66e7fa93ac7b8d932d158", "committedDate": "2022-06-17 11:03:05 +0300", "message": "Migrate JEasy library verion"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1MjMyMw==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r464452323", "body": "Wouldn't it be better to verify that the content is as expected and not just that it's not empty?", "bodyText": "Wouldn't it be better to verify that the content is as expected and not just that it's not empty?", "bodyHTML": "<p dir=\"auto\">Wouldn't it be better to verify that the content is as expected and not just that it's not empty?</p>", "author": "vincent-karuri", "createdAt": "2020-08-03T14:32:26Z", "path": "android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/DiskFileSourceTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.vijay.jsonwizard.filesource;\n+\n+import android.content.Context;\n+import android.os.Environment;\n+\n+import org.jeasy.rules.api.Rules;\n+import org.json.JSONObject;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.InputStream;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({Environment.class})\n+public class DiskFileSourceTest {\n+\n+    @Rule\n+    public TemporaryFolder storageDirectory = new TemporaryFolder();\n+\n+    @Mock\n+    private Context context;\n+\n+    private DiskFileSource diskFileSource = Mockito.spy(DiskFileSource.INSTANCE);\n+\n+    @Mock\n+    private File externalFile;\n+\n+    @Before\n+    public void setUp() {\n+        Mockito.doReturn(\"/tmp/downloads\").when(externalFile).toString();\n+\n+        PowerMockito.mockStatic(Environment.class);\n+        Mockito.when(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)).thenReturn(externalFile);\n+    }\n+\n+    @Test\n+    public void testGetRulesFromFileConvertsFileToRules() throws Exception {\n+\n+        String specifiedString = \"1\";\n+        String relevance = \"---\\n\" +\n+                \"name: step1_last_name\\n\" +\n+                \"description: last_name\\n\" +\n+                \"priority: 1\\n\" +\n+                \"condition: \\\"step1_first_Name.equalsIgnoreCase('Doe')\\\"\\n\" +\n+                \"actions:\\n\" +\n+                \"    - \\\"calculation = \" + specifiedString + \"\\\"\";\n+\n+        InputStream inputStream = new ByteArrayInputStream(relevance.getBytes());\n+        Mockito.doReturn(inputStream).when(diskFileSource).getInputStream(Mockito.any(File.class));\n+\n+        Rules rules = diskFileSource.getRulesFromFile(context, \"test_rule\");\n+        Assert.assertFalse(rules.isEmpty());", "originalCommit": "32a12cdfb2e6875ffb1f7163cf995f388a4d6584", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ2Nzg0Mg==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r464467842", "bodyText": "The responsibility of the interface is to return the Rules Object when given a rule but not to verify that the Rule object works.  i.e Given a syntactically correct input of type A, you expect an output or type B", "author": "rkodev", "createdAt": "2020-08-03T14:56:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1MjMyMw=="}], "type": "inlineReview", "revised_code": {"commit": "254ea1d8a8cf36ec6c9f74f7b241aa13056519bc", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/DiskFileSourceTest.java b/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/DiskFileSourceTest.java\nindex a33ce045..163d78cf 100644\n--- a/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/DiskFileSourceTest.java\n+++ b/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/DiskFileSourceTest.java\n", "chunk": "@@ -54,13 +60,21 @@ public class DiskFileSourceTest {\n                 \"priority: 1\\n\" +\n                 \"condition: \\\"step1_first_Name.equalsIgnoreCase('Doe')\\\"\\n\" +\n                 \"actions:\\n\" +\n-                \"    - \\\"calculation = \" + specifiedString + \"\\\"\";\n+                \"    - \\\" calculation = \" + specifiedString + \"\\\"\";\n \n         InputStream inputStream = new ByteArrayInputStream(relevance.getBytes());\n         Mockito.doReturn(inputStream).when(diskFileSource).getInputStream(Mockito.any(File.class));\n \n         Rules rules = diskFileSource.getRulesFromFile(context, \"test_rule\");\n         Assert.assertFalse(rules.isEmpty());\n+\n+        RulesEngineParameters parameters = new RulesEngineParameters().skipOnFirstAppliedRule(true);\n+        RulesEngine defaultRulesEngine = new DefaultRulesEngine(parameters);\n+        Facts facts = new Facts();\n+        facts.put(\"step1_first_Name\", \"Doe\");\n+\n+        defaultRulesEngine.fire(rules, facts);\n+        Assert.assertEquals(specifiedString, (facts.get(RuleConstant.CALCULATION)).toString());\n     }\n \n \n", "next_change": {"commit": "1beb9891356c16c9426968b5638dfb2e4dfb4167", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/DiskFileSourceTest.java b/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/DiskFileSourceTest.java\nindex 163d78cf..a5d44721 100644\n--- a/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/DiskFileSourceTest.java\n+++ b/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/DiskFileSourceTest.java\n", "chunk": "@@ -68,13 +62,10 @@ public class DiskFileSourceTest {\n         Rules rules = diskFileSource.getRulesFromFile(context, \"test_rule\");\n         Assert.assertFalse(rules.isEmpty());\n \n-        RulesEngineParameters parameters = new RulesEngineParameters().skipOnFirstAppliedRule(true);\n-        RulesEngine defaultRulesEngine = new DefaultRulesEngine(parameters);\n-        Facts facts = new Facts();\n-        facts.put(\"step1_first_Name\", \"Doe\");\n-\n-        defaultRulesEngine.fire(rules, facts);\n-        Assert.assertEquals(specifiedString, (facts.get(RuleConstant.CALCULATION)).toString());\n+        org.jeasy.rules.api.Rule rule = rules.iterator().next();\n+        Assert.assertEquals(rule.getName(), \"step1_last_name\");\n+        Assert.assertEquals(rule.getDescription(), \"last_name\");\n+        Assert.assertEquals(rule.getPriority(), 1);\n     }\n \n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/DiskFileSourceTest.java b/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/DiskFileSourceTest.java\nindex a33ce045..a5d44721 100644\n--- a/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/DiskFileSourceTest.java\n+++ b/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/DiskFileSourceTest.java\n", "chunk": "@@ -54,13 +54,18 @@ public class DiskFileSourceTest {\n                 \"priority: 1\\n\" +\n                 \"condition: \\\"step1_first_Name.equalsIgnoreCase('Doe')\\\"\\n\" +\n                 \"actions:\\n\" +\n-                \"    - \\\"calculation = \" + specifiedString + \"\\\"\";\n+                \"    - \\\" calculation = \" + specifiedString + \"\\\"\";\n \n         InputStream inputStream = new ByteArrayInputStream(relevance.getBytes());\n         Mockito.doReturn(inputStream).when(diskFileSource).getInputStream(Mockito.any(File.class));\n \n         Rules rules = diskFileSource.getRulesFromFile(context, \"test_rule\");\n         Assert.assertFalse(rules.isEmpty());\n+\n+        org.jeasy.rules.api.Rule rule = rules.iterator().next();\n+        Assert.assertEquals(rule.getName(), \"step1_last_name\");\n+        Assert.assertEquals(rule.getDescription(), \"last_name\");\n+        Assert.assertEquals(rule.getPriority(), 1);\n     }\n \n \n", "next_change": null}]}, "commits_in_main": [{"oid": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1MjQ2Mw==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r464452463", "body": "Wouldn't it be better to verify that the content is as expected and not just that it's not empty?", "bodyText": "Wouldn't it be better to verify that the content is as expected and not just that it's not empty?", "bodyHTML": "<p dir=\"auto\">Wouldn't it be better to verify that the content is as expected and not just that it's not empty?</p>", "author": "vincent-karuri", "createdAt": "2020-08-03T14:32:37Z", "path": "android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/AssetsFileSourceTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.vijay.jsonwizard.filesource;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+\n+import org.jeasy.rules.api.Rules;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class AssetsFileSourceTest {\n+    @Mock\n+    private Context context;\n+\n+    @Mock\n+    private AssetManager assetManager;\n+\n+    private AssetsFileSource assetsFileSource = AssetsFileSource.INSTANCE;\n+\n+    @Before\n+    public void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @Test\n+    public void testInstanceIsNoNull() {\n+        Assert.assertNotNull(AssetsFileSource.INSTANCE);\n+    }\n+\n+    @Test\n+    public void testGetRulesFromFileConvertsFileToRules() throws Exception {\n+        String specifiedString = \"1\";\n+        String relevance = \"---\\n\" +\n+                \"name: step1_last_name\\n\" +\n+                \"description: last_name\\n\" +\n+                \"priority: 1\\n\" +\n+                \"condition: \\\"step1_first_Name.equalsIgnoreCase('Doe')\\\"\\n\" +\n+                \"actions:\\n\" +\n+                \"    - \\\"calculation = \" + specifiedString + \"\\\"\";\n+\n+\n+        Mockito.when(context.getAssets()).thenReturn(assetManager);\n+        InputStream inputStream = new ByteArrayInputStream(relevance.getBytes());\n+        Mockito.when(assetManager.open(\"rule/test\")).thenReturn(inputStream);\n+\n+        Rules rules = assetsFileSource.getRulesFromFile(context, \"rule/test\");\n+        Assert.assertFalse(rules.isEmpty());", "originalCommit": "32a12cdfb2e6875ffb1f7163cf995f388a4d6584", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ2Nzk2NA==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r464467964", "bodyText": "The responsibility of the interface is to return the Rules Object when given a rule but not to verify that the Rule object works. i.e Given a syntactically correct input of type A, you expect an output or type B", "author": "rkodev", "createdAt": "2020-08-03T14:56:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1MjQ2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "254ea1d8a8cf36ec6c9f74f7b241aa13056519bc", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/AssetsFileSourceTest.java b/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/AssetsFileSourceTest.java\nindex 120ae1c4..4a401bac 100644\n--- a/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/AssetsFileSourceTest.java\n+++ b/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/AssetsFileSourceTest.java\n", "chunk": "@@ -41,26 +45,34 @@ public class AssetsFileSourceTest {\n \n     @Test\n     public void testGetRulesFromFileConvertsFileToRules() throws Exception {\n-        String specifiedString = \"1\";\n         String relevance = \"---\\n\" +\n                 \"name: step1_last_name\\n\" +\n                 \"description: last_name\\n\" +\n                 \"priority: 1\\n\" +\n-                \"condition: \\\"step1_first_Name.equalsIgnoreCase('Doe')\\\"\\n\" +\n+                \"condition: \\\"step1_first_name.equalsIgnoreCase('Linet')\\\"\\n\" +\n                 \"actions:\\n\" +\n-                \"    - \\\"calculation = \" + specifiedString + \"\\\"\";\n-\n+                \"    - \\\"isRelevant = true\\\"\";\n \n         Mockito.when(context.getAssets()).thenReturn(assetManager);\n         InputStream inputStream = new ByteArrayInputStream(relevance.getBytes());\n         Mockito.when(assetManager.open(\"rule/test\")).thenReturn(inputStream);\n \n+        // rules are returned\n         Rules rules = assetsFileSource.getRulesFromFile(context, \"rule/test\");\n         Assert.assertFalse(rules.isEmpty());\n+\n+\n+        RulesEngineParameters parameters = new RulesEngineParameters().skipOnFirstAppliedRule(true);\n+        RulesEngine defaultRulesEngine = new DefaultRulesEngine(parameters);\n+        Facts facts = new Facts();\n+        facts.put(\"step1_first_name\", \"Linet\");\n+\n+        defaultRulesEngine.fire(rules, facts);\n+        Assert.assertTrue((Boolean) facts.get(RuleConstant.IS_RELEVANT));\n     }\n \n     @Test\n-    public void testGetFormFromFileReadsFile() throws IOException, JSONException {\n+    public void testGetFormFromFileReadsFile() throws Exception {\n         String expected = \"{\\n\" +\n                 \"        \\\"key\\\": \\\"user_image\\\",\\n\" +\n                 \"        \\\"openmrs_entity_parent\\\": \\\"\\\",\\n\" +\n", "next_change": {"commit": "1beb9891356c16c9426968b5638dfb2e4dfb4167", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/AssetsFileSourceTest.java b/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/AssetsFileSourceTest.java\nindex 4a401bac..d8f0a264 100644\n--- a/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/AssetsFileSourceTest.java\n+++ b/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/AssetsFileSourceTest.java\n", "chunk": "@@ -61,14 +56,10 @@ public class AssetsFileSourceTest {\n         Rules rules = assetsFileSource.getRulesFromFile(context, \"rule/test\");\n         Assert.assertFalse(rules.isEmpty());\n \n-\n-        RulesEngineParameters parameters = new RulesEngineParameters().skipOnFirstAppliedRule(true);\n-        RulesEngine defaultRulesEngine = new DefaultRulesEngine(parameters);\n-        Facts facts = new Facts();\n-        facts.put(\"step1_first_name\", \"Linet\");\n-\n-        defaultRulesEngine.fire(rules, facts);\n-        Assert.assertTrue((Boolean) facts.get(RuleConstant.IS_RELEVANT));\n+        Rule rule = rules.iterator().next();\n+        Assert.assertEquals(rule.getName(), \"step1_last_name\");\n+        Assert.assertEquals(rule.getDescription(), \"last_name\");\n+        Assert.assertEquals(rule.getPriority(), 1);\n     }\n \n     @Test\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "changed_code": [{"header": "diff --git a/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/AssetsFileSourceTest.java b/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/AssetsFileSourceTest.java\nindex 120ae1c4..d8f0a264 100644\n--- a/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/AssetsFileSourceTest.java\n+++ b/android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/AssetsFileSourceTest.java\n", "chunk": "@@ -41,26 +40,30 @@ public class AssetsFileSourceTest {\n \n     @Test\n     public void testGetRulesFromFileConvertsFileToRules() throws Exception {\n-        String specifiedString = \"1\";\n         String relevance = \"---\\n\" +\n                 \"name: step1_last_name\\n\" +\n                 \"description: last_name\\n\" +\n                 \"priority: 1\\n\" +\n-                \"condition: \\\"step1_first_Name.equalsIgnoreCase('Doe')\\\"\\n\" +\n+                \"condition: \\\"step1_first_name.equalsIgnoreCase('Linet')\\\"\\n\" +\n                 \"actions:\\n\" +\n-                \"    - \\\"calculation = \" + specifiedString + \"\\\"\";\n-\n+                \"    - \\\"isRelevant = true\\\"\";\n \n         Mockito.when(context.getAssets()).thenReturn(assetManager);\n         InputStream inputStream = new ByteArrayInputStream(relevance.getBytes());\n         Mockito.when(assetManager.open(\"rule/test\")).thenReturn(inputStream);\n \n+        // rules are returned\n         Rules rules = assetsFileSource.getRulesFromFile(context, \"rule/test\");\n         Assert.assertFalse(rules.isEmpty());\n+\n+        Rule rule = rules.iterator().next();\n+        Assert.assertEquals(rule.getName(), \"step1_last_name\");\n+        Assert.assertEquals(rule.getDescription(), \"last_name\");\n+        Assert.assertEquals(rule.getPriority(), 1);\n     }\n \n     @Test\n-    public void testGetFormFromFileReadsFile() throws IOException, JSONException {\n+    public void testGetFormFromFileReadsFile() throws Exception {\n         String expected = \"{\\n\" +\n                 \"        \\\"key\\\": \\\"user_image\\\",\\n\" +\n                 \"        \\\"openmrs_entity_parent\\\": \\\"\\\",\\n\" +\n", "next_change": null}]}, "commits_in_main": [{"oid": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1MzcwMw==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r464453703", "body": "Do you need to spy the SUT? Is there an alternative?", "bodyText": "Do you need to spy the SUT? Is there an alternative?", "bodyHTML": "<p dir=\"auto\">Do you need to spy the SUT? Is there an alternative?</p>", "author": "vincent-karuri", "createdAt": "2020-08-03T14:34:26Z", "path": "android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/DiskFileSourceTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.vijay.jsonwizard.filesource;\n+\n+import android.content.Context;\n+import android.os.Environment;\n+\n+import org.jeasy.rules.api.Rules;\n+import org.json.JSONObject;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.InputStream;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({Environment.class})\n+public class DiskFileSourceTest {\n+\n+    @Rule\n+    public TemporaryFolder storageDirectory = new TemporaryFolder();\n+\n+    @Mock\n+    private Context context;\n+\n+    private DiskFileSource diskFileSource = Mockito.spy(DiskFileSource.INSTANCE);", "originalCommit": "32a12cdfb2e6875ffb1f7163cf995f388a4d6584", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "2bb091e202ecfce35d4b44ed87f883b1a7134bf9", "message": "Merge commit", "committedDate": null}]}, {"oid": "254ea1d8a8cf36ec6c9f74f7b241aa13056519bc", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/254ea1d8a8cf36ec6c9f74f7b241aa13056519bc", "message": "Add returned rules values", "committedDate": "2020-08-03T15:34:36Z", "type": "commit"}, {"oid": "1beb9891356c16c9426968b5638dfb2e4dfb4167", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/1beb9891356c16c9426968b5638dfb2e4dfb4167", "message": "Check returned rules for DiskFileSource and AssetFileSource", "committedDate": "2020-08-03T15:46:24Z", "type": "commit"}, {"oid": "7134ee0cfae005cf1f74b19f43d18fad6d262457", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/7134ee0cfae005cf1f74b19f43d18fad6d262457", "message": "Merge branch 'master' into native_form_tester", "committedDate": "2020-08-12T08:56:03Z", "type": "commit"}, {"oid": "ddf95b12462627202edd501d9761ce468adc83fd", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/ddf95b12462627202edd501d9761ce468adc83fd", "message": "Merge branch 'master' into native_form_tester", "committedDate": "2020-08-12T11:15:33Z", "type": "commit"}]}