{"pr_number": 2370, "pr_title": "GH-2366 fedx custom executor service", "pr_author": "jeenbroekstra", "pr_createdAt": "2020-07-18T05:22:13Z", "pr_url": "https://github.com/eclipse/rdf4j/pull/2370", "merge_commit": "2efd164cbf5234c722d60b6de39d11ab55dca517", "timeline": [{"oid": "7de2b0daefe7dbfe7b227a1a462d33c3f867df9d", "url": "https://github.com/eclipse/rdf4j/commit/7de2b0daefe7dbfe7b227a1a462d33c3f867df9d", "message": "GH-2366 optional custom ExecutorService injected via FedXConfig", "committedDate": "2020-07-18T05:25:50Z", "type": "forcePushed"}, {"oid": "60ab98f94ae59414d549fe94691d82d20bdded22", "url": "https://github.com/eclipse/rdf4j/commit/60ab98f94ae59414d549fe94691d82d20bdded22", "message": "GH-2366: support wrapping of background tasks in FedX\n\nThis change provides a configurable TaskWrapper infrastructure for\nwrapping background tasks.\n\nA TaskWrapper is a facility to wrap Runnable background tasks before\nthey are passed to the Executor. Use-cases include injection of\nthread-local context variables, or more fine-granular error handling.\n\nAll sub-queries sent by the federation engine that make use of the\nconcurrency infrastructure (e.g. ControlledWorkerScheduler) are passing\nthis wrapper.\n\nThe concrete implementation can be configured using\nFedXConfig.withTaskWrapper(TaskWrapper).\n\n\nSigned-off-by: Andreas Schwarte <aschwarte10@gmail.com>", "committedDate": "2020-07-20T13:27:44Z", "type": "commit"}, {"oid": "60ab98f94ae59414d549fe94691d82d20bdded22", "url": "https://github.com/eclipse/rdf4j/commit/60ab98f94ae59414d549fe94691d82d20bdded22", "message": "GH-2366: support wrapping of background tasks in FedX\n\nThis change provides a configurable TaskWrapper infrastructure for\nwrapping background tasks.\n\nA TaskWrapper is a facility to wrap Runnable background tasks before\nthey are passed to the Executor. Use-cases include injection of\nthread-local context variables, or more fine-granular error handling.\n\nAll sub-queries sent by the federation engine that make use of the\nconcurrency infrastructure (e.g. ControlledWorkerScheduler) are passing\nthis wrapper.\n\nThe concrete implementation can be configured using\nFedXConfig.withTaskWrapper(TaskWrapper).\n\n\nSigned-off-by: Andreas Schwarte <aschwarte10@gmail.com>", "committedDate": "2020-07-20T13:27:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3NTAxOA==", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457575018", "body": "`...which takes care of properly handling...`", "bodyText": "...which takes care of properly handling...", "bodyHTML": "<p dir=\"auto\"><code>...which takes care of properly handling...</code></p>", "author": "jetztgradnet", "createdAt": "2020-07-20T17:28:51Z", "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java", "diffHunk": "@@ -103,28 +104,43 @@ public void reset() {\n \t\t\tlog.debug(\"Scheduler for join and union are reset.\");\n \t\t}\n \n+\t\tTaskWrapper taskWrapper = federationContext.getConfig().getTaskWrapper();\n \t\tif (joinScheduler != null) {\n \t\t\tjoinScheduler.abort();\n \t\t}\n \t\tjoinScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getJoinWorkerThreads(),\n-\t\t\t\t\"Join Scheduler\");\n+\t\t\t\t\"Join Scheduler\", taskWrapper);\n \n \t\tif (unionScheduler != null) {\n \t\t\tunionScheduler.abort();\n \t\t}\n \t\tunionScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getUnionWorkerThreads(),\n-\t\t\t\t\"Union Scheduler\");\n+\t\t\t\t\"Union Scheduler\", taskWrapper);\n \n \t\tif (leftJoinScheduler != null) {\n \t\t\tleftJoinScheduler.abort();\n \t\t}\n \t\tleftJoinScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getLeftJoinWorkerThreads(),\n-\t\t\t\t\"Left Join Scheduler\");\n+\t\t\t\t\"Left Join Scheduler\", taskWrapper);\n \n \t}\n \n+\t/**\n+\t * Returns the managed {@link Executor} which takes for properly handling any configured", "originalCommit": "60ab98f94ae59414d549fe94691d82d20bdded22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37686de23d831d292a113c0248b8af0214b1bc7f", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\nindex 4453a80d31..07900d79e7 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\n", "chunk": "@@ -109,19 +109,22 @@ public class FederationManager {\n \t\t\tjoinScheduler.abort();\n \t\t}\n \t\tjoinScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getJoinWorkerThreads(),\n-\t\t\t\t\"Join Scheduler\", taskWrapper);\n+\t\t\t\t\"Join Scheduler\");\n+\t\tjoinScheduler.setTaskWrapper(taskWrapper);\n \n \t\tif (unionScheduler != null) {\n \t\t\tunionScheduler.abort();\n \t\t}\n \t\tunionScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getUnionWorkerThreads(),\n-\t\t\t\t\"Union Scheduler\", taskWrapper);\n+\t\t\t\t\"Union Scheduler\");\n+\t\tunionScheduler.setTaskWrapper(taskWrapper);\n \n \t\tif (leftJoinScheduler != null) {\n \t\t\tleftJoinScheduler.abort();\n \t\t}\n \t\tleftJoinScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getLeftJoinWorkerThreads(),\n-\t\t\t\t\"Left Join Scheduler\", taskWrapper);\n+\t\t\t\t\"Left Join Scheduler\");\n+\t\tleftJoinScheduler.setTaskWrapper(taskWrapper);\n \n \t}\n \n", "next_change": {"commit": "487f7e7da7f396f5a7505b7e3bf5e9a292b15fb6", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\nindex 07900d79e7..ffef6f4233 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\n", "chunk": "@@ -104,27 +105,27 @@ public class FederationManager {\n \t\t\tlog.debug(\"Scheduler for join and union are reset.\");\n \t\t}\n \n-\t\tTaskWrapper taskWrapper = federationContext.getConfig().getTaskWrapper();\n+\t\tOptional<TaskWrapper> taskWrapper = federationContext.getConfig().getTaskWrapper();\n \t\tif (joinScheduler != null) {\n \t\t\tjoinScheduler.abort();\n \t\t}\n \t\tjoinScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getJoinWorkerThreads(),\n \t\t\t\t\"Join Scheduler\");\n-\t\tjoinScheduler.setTaskWrapper(taskWrapper);\n+\t\ttaskWrapper.ifPresent(joinScheduler::setTaskWrapper);\n \n \t\tif (unionScheduler != null) {\n \t\t\tunionScheduler.abort();\n \t\t}\n \t\tunionScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getUnionWorkerThreads(),\n \t\t\t\t\"Union Scheduler\");\n-\t\tunionScheduler.setTaskWrapper(taskWrapper);\n+\t\ttaskWrapper.ifPresent(unionScheduler::setTaskWrapper);\n \n \t\tif (leftJoinScheduler != null) {\n \t\t\tleftJoinScheduler.abort();\n \t\t}\n \t\tleftJoinScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getLeftJoinWorkerThreads(),\n \t\t\t\t\"Left Join Scheduler\");\n-\t\tleftJoinScheduler.setTaskWrapper(taskWrapper);\n+\t\ttaskWrapper.ifPresent(leftJoinScheduler::setTaskWrapper);\n \n \t}\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "2efd164cbf5234c722d60b6de39d11ab55dca517", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\nindex 4453a80d31..ffef6f4233 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\n", "chunk": "@@ -104,24 +105,27 @@ public class FederationManager {\n \t\t\tlog.debug(\"Scheduler for join and union are reset.\");\n \t\t}\n \n-\t\tTaskWrapper taskWrapper = federationContext.getConfig().getTaskWrapper();\n+\t\tOptional<TaskWrapper> taskWrapper = federationContext.getConfig().getTaskWrapper();\n \t\tif (joinScheduler != null) {\n \t\t\tjoinScheduler.abort();\n \t\t}\n \t\tjoinScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getJoinWorkerThreads(),\n-\t\t\t\t\"Join Scheduler\", taskWrapper);\n+\t\t\t\t\"Join Scheduler\");\n+\t\ttaskWrapper.ifPresent(joinScheduler::setTaskWrapper);\n \n \t\tif (unionScheduler != null) {\n \t\t\tunionScheduler.abort();\n \t\t}\n \t\tunionScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getUnionWorkerThreads(),\n-\t\t\t\t\"Union Scheduler\", taskWrapper);\n+\t\t\t\t\"Union Scheduler\");\n+\t\ttaskWrapper.ifPresent(unionScheduler::setTaskWrapper);\n \n \t\tif (leftJoinScheduler != null) {\n \t\t\tleftJoinScheduler.abort();\n \t\t}\n \t\tleftJoinScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getLeftJoinWorkerThreads(),\n-\t\t\t\t\"Left Join Scheduler\", taskWrapper);\n+\t\t\t\t\"Left Join Scheduler\");\n+\t\ttaskWrapper.ifPresent(leftJoinScheduler::setTaskWrapper);\n \n \t}\n \n", "next_change": {"commit": "79d3f406ec8c96ec06f52087838615c54d2e33b3", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\nindex ffef6f4233..a0b8f64776 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\n", "chunk": "@@ -133,7 +133,6 @@ public class FederationManager {\n \t * Returns the managed {@link Executor} which takes for properly handling any configured\n \t * {@link FedXConfig#getTaskWrapper()}\n \t * \n-\t * @return\n \t */\n \tpublic Executor getExecutor() {\n \t\tfinal Optional<TaskWrapper> taskWrapper = federationContext.getConfig().getTaskWrapper();\n", "next_change": {"commit": "e3eab54dc57b29355f3720ca55f4209045394c7a", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\nindex a0b8f64776..4dd763e5b2 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\n", "chunk": "@@ -132,7 +141,7 @@ public class FederationManager {\n \t/**\n \t * Returns the managed {@link Executor} which takes for properly handling any configured\n \t * {@link FedXConfig#getTaskWrapper()}\n-\t * \n+\t *\n \t */\n \tpublic Executor getExecutor() {\n \t\tfinal Optional<TaskWrapper> taskWrapper = federationContext.getConfig().getTaskWrapper();\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "2efd164cbf5234c722d60b6de39d11ab55dca517", "message": "Merge commit", "committedDate": null}, {"oid": "79d3f406ec8c96ec06f52087838615c54d2e33b3", "committedDate": "2021-11-03 21:57:23 +0100", "message": "GH-3394 Use eclipse javadoc settings to errors to find many javadoc issues and bulk fix them. <tt> changed to html5 <var>"}, {"oid": "3e1e6ebf44d089c921bd124a66492378abc3f402", "committedDate": "2022-01-13 13:37:54 +0100", "message": "GH-3483: refactor federation execution to use a per-query strategy"}, {"oid": "55b5c993e07a08ea55da34b4b53f96dbd6ed3fa7", "committedDate": "2022-01-13 13:37:56 +0100", "message": "GH-3483: instantiate federation strategy through a factory"}, {"oid": "ca2adddb76d402ad43222ebe1e437edafb0c343e", "committedDate": "2022-01-13 13:38:39 +0100", "message": "GH-3483: make the Federation Strategy Factory configurable"}, {"oid": "9b053388b70d92d8e4a867d904cf70477b56a279", "committedDate": "2022-02-01 11:47:59 +0100", "message": "GH-3483: wrap up the use of FederationEvalStrategy per query"}, {"oid": "e3eab54dc57b29355f3720ca55f4209045394c7a", "committedDate": "2022-04-23 11:32:40 +0200", "message": "GH-3807 code cleanup (#3808)"}, {"oid": "fc9e5aa41aac089f09630c7ffb7933a56cbff44b", "committedDate": "2022-07-31 10:56:18 +0200", "message": "GH-4091 changes based on release review (#4095)"}, {"oid": "b849630bfac9c84e0444390179409456da043b15", "committedDate": "2022-07-31 12:10:25 +0200", "message": "GH-4091 add a newline in the copyright header (#4097)"}, {"oid": "418cae743b134e2e75b1206db859e0581de23bbd", "committedDate": "2022-08-04 08:10:05 +0200", "message": "GH-4107 improve shutdown"}, {"oid": "d4146b7b29a03378f71440d3f285be22204a799d", "committedDate": "2022-08-04 08:10:55 +0200", "message": "GH-4107 code cleanup"}, {"oid": "9ac5e53f9aab11d66eedc8b4d39dfd5947750d18", "committedDate": "2023-03-16 09:53:25 +0100", "message": "GH-3843 FedX uses a MapDBCollectionFactory"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3NjUwMQ==", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457576501", "body": "as a TaskWrapper might be a construct also used in other places and there are already quite some constructor parameters and constructor variants I suggest to rather create an interface TaskWrapperAware which allows setting  (and getting) a TaskWrapper and implement that here. This also allows usiing this in other places.", "bodyText": "as a TaskWrapper might be a construct also used in other places and there are already quite some constructor parameters and constructor variants I suggest to rather create an interface TaskWrapperAware which allows setting  (and getting) a TaskWrapper and implement that here. This also allows usiing this in other places.", "bodyHTML": "<p dir=\"auto\">as a TaskWrapper might be a construct also used in other places and there are already quite some constructor parameters and constructor variants I suggest to rather create an interface TaskWrapperAware which allows setting  (and getting) a TaskWrapper and implement that here. This also allows usiing this in other places.</p>", "author": "jetztgradnet", "createdAt": "2020-07-20T17:31:21Z", "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/ControlledWorkerScheduler.java", "diffHunk": "@@ -46,23 +46,41 @@\n \n \tprivate final int nWorkers;\n \tprivate final String name;\n+\tprivate final TaskWrapper taskWrapper;\n \n \t/**\n \t * Construct a new instance with 20 workers.\n+\t * \n+\t * @deprecated use {@link #ControlledWorkerScheduler(int, String, TaskWrapper)}. Scheduled to be removed in 4.0\n \t */\n+\t@Deprecated\n \tpublic ControlledWorkerScheduler() {\n-\t\tthis(20, \"FedX Worker\");\n+\t\tthis(20, \"FedX Worker\", DefaultTaskWrapper.INSTANCE);\n \t}\n \n \t/**\n \t * Construct a new instance with the specified number of workers and the given name.\n \t *\n \t * @param nWorkers\n \t * @param name\n+\t * @deprecated use {@link #ControlledWorkerScheduler(int, String, TaskWrapper)}. Scheduled to be removed in 4.0\n \t */\n+\t@Deprecated\n \tpublic ControlledWorkerScheduler(int nWorkers, String name) {\n+\t\tthis(nWorkers, name, DefaultTaskWrapper.INSTANCE);\n+\t}\n+\n+\t/**\n+\t * Construct a new instance with the specified number of workers, the given name and {@link TaskWrapper}.\n+\t *\n+\t * @param nWorkers\n+\t * @param name\n+\t * @param taskWrapper\n+\t */\n+\tpublic ControlledWorkerScheduler(int nWorkers, String name, TaskWrapper taskWrapper) {", "originalCommit": "60ab98f94ae59414d549fe94691d82d20bdded22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37686de23d831d292a113c0248b8af0214b1bc7f", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/ControlledWorkerScheduler.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/ControlledWorkerScheduler.java\nindex e19ede9831..9c174721ac 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/ControlledWorkerScheduler.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/ControlledWorkerScheduler.java\n", "chunk": "@@ -63,24 +63,10 @@ public class ControlledWorkerScheduler<T> implements Scheduler<T> {\n \t *\n \t * @param nWorkers\n \t * @param name\n-\t * @deprecated use {@link #ControlledWorkerScheduler(int, String, TaskWrapper)}. Scheduled to be removed in 4.0\n \t */\n-\t@Deprecated\n \tpublic ControlledWorkerScheduler(int nWorkers, String name) {\n-\t\tthis(nWorkers, name, DefaultTaskWrapper.INSTANCE);\n-\t}\n-\n-\t/**\n-\t * Construct a new instance with the specified number of workers, the given name and {@link TaskWrapper}.\n-\t *\n-\t * @param nWorkers\n-\t * @param name\n-\t * @param taskWrapper\n-\t */\n-\tpublic ControlledWorkerScheduler(int nWorkers, String name, TaskWrapper taskWrapper) {\n \t\tthis.nWorkers = nWorkers;\n \t\tthis.name = name;\n-\t\tthis.taskWrapper = taskWrapper;\n \t\tthis.executor = createExecutorService();\n \t}\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "2efd164cbf5234c722d60b6de39d11ab55dca517", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/ControlledWorkerScheduler.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/ControlledWorkerScheduler.java\nindex e19ede9831..346bd66eba 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/ControlledWorkerScheduler.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/ControlledWorkerScheduler.java\n", "chunk": "@@ -63,24 +63,10 @@ public class ControlledWorkerScheduler<T> implements Scheduler<T> {\n \t *\n \t * @param nWorkers\n \t * @param name\n-\t * @deprecated use {@link #ControlledWorkerScheduler(int, String, TaskWrapper)}. Scheduled to be removed in 4.0\n \t */\n-\t@Deprecated\n \tpublic ControlledWorkerScheduler(int nWorkers, String name) {\n-\t\tthis(nWorkers, name, DefaultTaskWrapper.INSTANCE);\n-\t}\n-\n-\t/**\n-\t * Construct a new instance with the specified number of workers, the given name and {@link TaskWrapper}.\n-\t *\n-\t * @param nWorkers\n-\t * @param name\n-\t * @param taskWrapper\n-\t */\n-\tpublic ControlledWorkerScheduler(int nWorkers, String name, TaskWrapper taskWrapper) {\n \t\tthis.nWorkers = nWorkers;\n \t\tthis.name = name;\n-\t\tthis.taskWrapper = taskWrapper;\n \t\tthis.executor = createExecutorService();\n \t}\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "2efd164cbf5234c722d60b6de39d11ab55dca517", "message": "Merge commit", "committedDate": null}, {"oid": "927e875b8dc84f67b1d67d0074d4203bc0eb72c3", "committedDate": "2021-07-29 07:33:00 +0200", "message": "GH-3131: fix FedX resource leaks in error / cancel cases"}, {"oid": "fc3d4713b75c2800c4510156df6f4a9f3acc664a", "committedDate": "2022-05-15 10:45:39 +0200", "message": "GH-3886 cleanup imports and some comments"}, {"oid": "fc9e5aa41aac089f09630c7ffb7933a56cbff44b", "committedDate": "2022-07-31 10:56:18 +0200", "message": "GH-4091 changes based on release review (#4095)"}, {"oid": "b849630bfac9c84e0444390179409456da043b15", "committedDate": "2022-07-31 12:10:25 +0200", "message": "GH-4091 add a newline in the copyright header (#4097)"}, {"oid": "dc5809f7ac962b02ecb8f57d0d8a999d5fc9b2e3", "committedDate": "2022-08-04 08:07:39 +0200", "message": "GH-4107 handle interruptions better"}, {"oid": "b1538cb49af818698afd0c329c7dd5e0e699bd4d", "committedDate": "2022-08-04 08:09:15 +0200", "message": "GH-4107 skip tasks if the controller that requires the task is already finished and does not need the results anymore"}, {"oid": "418cae743b134e2e75b1206db859e0581de23bbd", "committedDate": "2022-08-04 08:10:05 +0200", "message": "GH-4107 improve shutdown"}, {"oid": "8e2644ef29f44f4aaf40fbb9088321ceb362c76a", "committedDate": "2022-08-04 09:55:53 +0200", "message": "GH-4107 further improve handling of interrupts"}, {"oid": "174d48c721e6b1ca0da356c8b8ae6020e5859d92", "committedDate": "2022-12-19 16:08:30 +0100", "message": "GH-4333: move 'since' info into 'Deprecated' annotation (#4334)"}, {"oid": "fcbc619012302db161b1d8eaef8bbb522d0d9446", "committedDate": "2022-12-28 11:05:37 +0100", "message": "GH-4328 make sure that we always either call done or call toss on the task control before returning"}, {"oid": "24d1cda578645cabefc12e011f470f2680d12839", "committedDate": "2023-01-13 11:24:33 +0100", "message": "Merge main into develop (#4346)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3Njg1OQ==", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457576859", "body": "I suggest adding a default method here which simply returns the provided runnable.", "bodyText": "I suggest adding a default method here which simply returns the provided runnable.", "bodyHTML": "<p dir=\"auto\">I suggest adding a default method here which simply returns the provided runnable.</p>", "author": "jetztgradnet", "createdAt": "2020-07-20T17:31:59Z", "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.federated.evaluation.concurrent;\n+\n+import java.util.concurrent.Executor;\n+\n+import org.eclipse.rdf4j.federated.FedXConfig;\n+\n+/**\n+ * A {@link TaskWrapper} is a facility to wrap {@link Runnable} background tasks before they are passed to the\n+ * {@link Executor}. Use-cases include injection of thread-local context variables, or more fine-granular error\n+ * handling.\n+ * \n+ * <p>\n+ * All sub-queries sent by the federation engine that make use of the concurrency infrastructure (e.g.\n+ * {@link ControlledWorkerScheduler}) are passing this wrapper.\n+ * </p>\n+ * \n+ * <p>\n+ * The concrete implementation can be configured using {@link FedXConfig#withTaskWrapper(TaskWrapper)}.\n+ * </p>\n+ * \n+ * @author Andreas Schwarte\n+ * @see DefaultTaskWrapper\n+ * @see ControlledWorkerScheduler\n+ * @see FedXConfig#withTaskWrapper(TaskWrapper)\n+ */\n+public interface TaskWrapper {\n+\n+\t/**\n+\t * Wrap the given {@link Runnable} and add custom logic.\n+\t * \n+\t * <p>\n+\t * Use cases include injection of state into the thread-local context, or more fine granular error handling.\n+\t * </p>\n+\t * \n+\t * <p>\n+\t * Note that when modifying state in {@link ThreadLocal} it must be reset properly in a try/finally block.\n+\t * </p>\n+\t * \n+\t * @param runnable the task as generated by the FedX engine\n+\t * @return the wrapped {@link Runnable}\n+\t */\n+\tpublic Runnable wrap(Runnable runnable);", "originalCommit": "60ab98f94ae59414d549fe94691d82d20bdded22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37686de23d831d292a113c0248b8af0214b1bc7f", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\nindex decb021743..320e8c0e19 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n", "chunk": "@@ -46,6 +52,26 @@ public interface TaskWrapper {\n \t * @param runnable the task as generated by the FedX engine\n \t * @return the wrapped {@link Runnable}\n \t */\n-\tpublic Runnable wrap(Runnable runnable);\n+\tdefault Runnable wrap(Runnable runnable) {\n+\t\treturn runnable;\n+\t}\n+\n+\t/**\n+\t * Wrap the given {@link Callable} and add custom logic.\n+\t * \n+\t * <p>\n+\t * Use cases include injection of state into the thread-local context, or more fine granular error handling.\n+\t * </p>\n+\t * \n+\t * <p>\n+\t * Note that when modifying state in {@link ThreadLocal} it must be reset properly in a try/finally block.\n+\t * </p>\n+\t * \n+\t * @param callable the task as generated by the FedX engine\n+\t * @return the wrapped {@link Callable}\n+\t */\n+\tdefault <T> Callable<T> wrap(Callable<T> callable) {\n+\t\treturn callable;\n+\t}\n \n }\n", "next_change": {"commit": "7659cb7a96c46c294bda7a2e1384d829da63e6ed", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\nindex 320e8c0e19..e4f85d74d0 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n", "chunk": "@@ -70,8 +63,6 @@ public interface TaskWrapper {\n \t * @param callable the task as generated by the FedX engine\n \t * @return the wrapped {@link Callable}\n \t */\n-\tdefault <T> Callable<T> wrap(Callable<T> callable) {\n-\t\treturn callable;\n-\t}\n+\t<T> Callable<T> wrap(Callable<T> callable);\n \n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "2efd164cbf5234c722d60b6de39d11ab55dca517", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\nindex decb021743..e555e8fbaf 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n", "chunk": "@@ -46,6 +46,22 @@ public interface TaskWrapper {\n \t * @param runnable the task as generated by the FedX engine\n \t * @return the wrapped {@link Runnable}\n \t */\n-\tpublic Runnable wrap(Runnable runnable);\n+\tRunnable wrap(Runnable runnable);\n+\n+\t/**\n+\t * Wrap the given {@link Callable} and add custom logic.\n+\t * \n+\t * <p>\n+\t * Use cases include injection of state into the thread-local context, or more fine granular error handling.\n+\t * </p>\n+\t * \n+\t * <p>\n+\t * Note that when modifying state in {@link ThreadLocal} it must be reset properly in a try/finally block.\n+\t * </p>\n+\t * \n+\t * @param callable the task as generated by the FedX engine\n+\t * @return the wrapped {@link Callable}\n+\t */\n+\t<T> Callable<T> wrap(Callable<T> callable);\n \n }\n", "next_change": {"commit": "fc3d4713b75c2800c4510156df6f4a9f3acc664a", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\nindex e555e8fbaf..20aa44297a 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n", "chunk": "@@ -50,15 +50,15 @@ public interface TaskWrapper {\n \n \t/**\n \t * Wrap the given {@link Callable} and add custom logic.\n-\t * \n+\t *\n \t * <p>\n \t * Use cases include injection of state into the thread-local context, or more fine granular error handling.\n \t * </p>\n-\t * \n+\t *\n \t * <p>\n \t * Note that when modifying state in {@link ThreadLocal} it must be reset properly in a try/finally block.\n \t * </p>\n-\t * \n+\t *\n \t * @param callable the task as generated by the FedX engine\n \t * @return the wrapped {@link Callable}\n \t */\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "2efd164cbf5234c722d60b6de39d11ab55dca517", "message": "Merge commit", "committedDate": null}, {"oid": "fc3d4713b75c2800c4510156df6f4a9f3acc664a", "committedDate": "2022-05-15 10:45:39 +0200", "message": "GH-3886 cleanup imports and some comments"}, {"oid": "fc9e5aa41aac089f09630c7ffb7933a56cbff44b", "committedDate": "2022-07-31 10:56:18 +0200", "message": "GH-4091 changes based on release review (#4095)"}, {"oid": "b849630bfac9c84e0444390179409456da043b15", "committedDate": "2022-07-31 12:10:25 +0200", "message": "GH-4091 add a newline in the copyright header (#4097)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3OTMxNg==", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457579316", "body": "let's also add a variant for `Callable<T>` because depending on the type of tasks passed to an `(Scheduled)Exectuor(Service)` this is relevant when expecting results from that, e.g. using a `Future`.\r\nThis method should also have a default implementation returning the original callable. That way an implementer can still implement this using a lambda even though the interface has two methods and hence is strictly no SAM interface.", "bodyText": "let's also add a variant for Callable<T> because depending on the type of tasks passed to an (Scheduled)Exectuor(Service) this is relevant when expecting results from that, e.g. using a Future.\nThis method should also have a default implementation returning the original callable. That way an implementer can still implement this using a lambda even though the interface has two methods and hence is strictly no SAM interface.", "bodyHTML": "<p dir=\"auto\">let's also add a variant for <code>Callable&lt;T&gt;</code> because depending on the type of tasks passed to an <code>(Scheduled)Exectuor(Service)</code> this is relevant when expecting results from that, e.g. using a <code>Future</code>.<br>\nThis method should also have a default implementation returning the original callable. That way an implementer can still implement this using a lambda even though the interface has two methods and hence is strictly no SAM interface.</p>", "author": "jetztgradnet", "createdAt": "2020-07-20T17:36:20Z", "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.federated.evaluation.concurrent;\n+\n+import java.util.concurrent.Executor;\n+\n+import org.eclipse.rdf4j.federated.FedXConfig;\n+\n+/**\n+ * A {@link TaskWrapper} is a facility to wrap {@link Runnable} background tasks before they are passed to the\n+ * {@link Executor}. Use-cases include injection of thread-local context variables, or more fine-granular error\n+ * handling.\n+ * \n+ * <p>\n+ * All sub-queries sent by the federation engine that make use of the concurrency infrastructure (e.g.\n+ * {@link ControlledWorkerScheduler}) are passing this wrapper.\n+ * </p>\n+ * \n+ * <p>\n+ * The concrete implementation can be configured using {@link FedXConfig#withTaskWrapper(TaskWrapper)}.\n+ * </p>\n+ * \n+ * @author Andreas Schwarte\n+ * @see DefaultTaskWrapper\n+ * @see ControlledWorkerScheduler\n+ * @see FedXConfig#withTaskWrapper(TaskWrapper)\n+ */\n+public interface TaskWrapper {\n+\n+\t/**\n+\t * Wrap the given {@link Runnable} and add custom logic.\n+\t * \n+\t * <p>\n+\t * Use cases include injection of state into the thread-local context, or more fine granular error handling.\n+\t * </p>\n+\t * \n+\t * <p>\n+\t * Note that when modifying state in {@link ThreadLocal} it must be reset properly in a try/finally block.\n+\t * </p>\n+\t * \n+\t * @param runnable the task as generated by the FedX engine\n+\t * @return the wrapped {@link Runnable}\n+\t */\n+\tpublic Runnable wrap(Runnable runnable);\n+", "originalCommit": "60ab98f94ae59414d549fe94691d82d20bdded22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37686de23d831d292a113c0248b8af0214b1bc7f", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\nindex decb021743..320e8c0e19 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n", "chunk": "@@ -46,6 +52,26 @@ public interface TaskWrapper {\n \t * @param runnable the task as generated by the FedX engine\n \t * @return the wrapped {@link Runnable}\n \t */\n-\tpublic Runnable wrap(Runnable runnable);\n+\tdefault Runnable wrap(Runnable runnable) {\n+\t\treturn runnable;\n+\t}\n+\n+\t/**\n+\t * Wrap the given {@link Callable} and add custom logic.\n+\t * \n+\t * <p>\n+\t * Use cases include injection of state into the thread-local context, or more fine granular error handling.\n+\t * </p>\n+\t * \n+\t * <p>\n+\t * Note that when modifying state in {@link ThreadLocal} it must be reset properly in a try/finally block.\n+\t * </p>\n+\t * \n+\t * @param callable the task as generated by the FedX engine\n+\t * @return the wrapped {@link Callable}\n+\t */\n+\tdefault <T> Callable<T> wrap(Callable<T> callable) {\n+\t\treturn callable;\n+\t}\n \n }\n", "next_change": {"commit": "7659cb7a96c46c294bda7a2e1384d829da63e6ed", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\nindex 320e8c0e19..e4f85d74d0 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n", "chunk": "@@ -70,8 +63,6 @@ public interface TaskWrapper {\n \t * @param callable the task as generated by the FedX engine\n \t * @return the wrapped {@link Callable}\n \t */\n-\tdefault <T> Callable<T> wrap(Callable<T> callable) {\n-\t\treturn callable;\n-\t}\n+\t<T> Callable<T> wrap(Callable<T> callable);\n \n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "2efd164cbf5234c722d60b6de39d11ab55dca517", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\nindex decb021743..e555e8fbaf 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n", "chunk": "@@ -46,6 +46,22 @@ public interface TaskWrapper {\n \t * @param runnable the task as generated by the FedX engine\n \t * @return the wrapped {@link Runnable}\n \t */\n-\tpublic Runnable wrap(Runnable runnable);\n+\tRunnable wrap(Runnable runnable);\n+\n+\t/**\n+\t * Wrap the given {@link Callable} and add custom logic.\n+\t * \n+\t * <p>\n+\t * Use cases include injection of state into the thread-local context, or more fine granular error handling.\n+\t * </p>\n+\t * \n+\t * <p>\n+\t * Note that when modifying state in {@link ThreadLocal} it must be reset properly in a try/finally block.\n+\t * </p>\n+\t * \n+\t * @param callable the task as generated by the FedX engine\n+\t * @return the wrapped {@link Callable}\n+\t */\n+\t<T> Callable<T> wrap(Callable<T> callable);\n \n }\n", "next_change": {"commit": "fc3d4713b75c2800c4510156df6f4a9f3acc664a", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\nindex e555e8fbaf..20aa44297a 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n", "chunk": "@@ -50,15 +50,15 @@ public interface TaskWrapper {\n \n \t/**\n \t * Wrap the given {@link Callable} and add custom logic.\n-\t * \n+\t *\n \t * <p>\n \t * Use cases include injection of state into the thread-local context, or more fine granular error handling.\n \t * </p>\n-\t * \n+\t *\n \t * <p>\n \t * Note that when modifying state in {@link ThreadLocal} it must be reset properly in a try/finally block.\n \t * </p>\n-\t * \n+\t *\n \t * @param callable the task as generated by the FedX engine\n \t * @return the wrapped {@link Callable}\n \t */\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "2efd164cbf5234c722d60b6de39d11ab55dca517", "message": "Merge commit", "committedDate": null}, {"oid": "fc3d4713b75c2800c4510156df6f4a9f3acc664a", "committedDate": "2022-05-15 10:45:39 +0200", "message": "GH-3886 cleanup imports and some comments"}, {"oid": "fc9e5aa41aac089f09630c7ffb7933a56cbff44b", "committedDate": "2022-07-31 10:56:18 +0200", "message": "GH-4091 changes based on release review (#4095)"}, {"oid": "b849630bfac9c84e0444390179409456da043b15", "committedDate": "2022-07-31 12:10:25 +0200", "message": "GH-4091 add a newline in the copyright header (#4097)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4MDczMg==", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457580732", "body": "when providing a default implementation of the methods this class could be avoided and the `INSTANCE` simpyl be moved into the interface.", "bodyText": "when providing a default implementation of the methods this class could be avoided and the INSTANCE simpyl be moved into the interface.", "bodyHTML": "<p dir=\"auto\">when providing a default implementation of the methods this class could be avoided and the <code>INSTANCE</code> simpyl be moved into the interface.</p>", "author": "jetztgradnet", "createdAt": "2020-07-20T17:38:42Z", "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/DefaultTaskWrapper.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.federated.evaluation.concurrent;\n+\n+/**\n+ * Default implementation of {@link TaskWrapper} which returns the unmodified original task\n+ * \n+ * @author Andreas Schwarte\n+ *\n+ */\n+public class DefaultTaskWrapper implements TaskWrapper {", "originalCommit": "60ab98f94ae59414d549fe94691d82d20bdded22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37686de23d831d292a113c0248b8af0214b1bc7f", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/DefaultTaskWrapper.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapperAware.java\nsimilarity index 63%\nrename from tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/DefaultTaskWrapper.java\nrename to tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapperAware.java\nindex 36ad7caf53..fd20be937f 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/DefaultTaskWrapper.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapperAware.java\n", "chunk": "@@ -8,21 +8,18 @@\n package org.eclipse.rdf4j.federated.evaluation.concurrent;\n \n /**\n- * Default implementation of {@link TaskWrapper} which returns the unmodified original task\n+ * Classes implementing this interface can accept a custom {@link TaskWrapper}.\n  * \n  * @author Andreas Schwarte\n  *\n  */\n-public class DefaultTaskWrapper implements TaskWrapper {\n-\n-\tpublic static DefaultTaskWrapper INSTANCE = new DefaultTaskWrapper();\n-\n-\tprivate DefaultTaskWrapper() {\n-\t}\n-\n-\t@Override\n-\tpublic Runnable wrap(Runnable runnable) {\n-\t\treturn runnable;\n-\t}\n+public interface TaskWrapperAware {\n \n+\t/**\n+\t * Set the {@link TaskWrapper} to the respective instance\n+\t * \n+\t * @param taskWrapper\n+\t * @return\n+\t */\n+\tpublic void setTaskWrapper(TaskWrapper taskWrapper);\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "2efd164cbf5234c722d60b6de39d11ab55dca517", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/DefaultTaskWrapper.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapperAware.java\nsimilarity index 63%\nrename from tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/DefaultTaskWrapper.java\nrename to tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapperAware.java\nindex 36ad7caf53..cb12971679 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/DefaultTaskWrapper.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapperAware.java\n", "chunk": "@@ -8,21 +8,19 @@\n package org.eclipse.rdf4j.federated.evaluation.concurrent;\n \n /**\n- * Default implementation of {@link TaskWrapper} which returns the unmodified original task\n+ * Classes implementing this interface can accept a custom {@link TaskWrapper}.\n  * \n  * @author Andreas Schwarte\n  *\n  */\n-public class DefaultTaskWrapper implements TaskWrapper {\n+public interface TaskWrapperAware {\n \n-\tpublic static DefaultTaskWrapper INSTANCE = new DefaultTaskWrapper();\n-\n-\tprivate DefaultTaskWrapper() {\n-\t}\n-\n-\t@Override\n-\tpublic Runnable wrap(Runnable runnable) {\n-\t\treturn runnable;\n-\t}\n+\t/**\n+\t * Set the {@link TaskWrapper} to the respective instance\n+\t * \n+\t * @param taskWrapper\n+\t * @return\n+\t */\n+\tpublic void setTaskWrapper(TaskWrapper taskWrapper);\n \n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "2efd164cbf5234c722d60b6de39d11ab55dca517", "message": "Merge commit", "committedDate": null}]}, {"oid": "37686de23d831d292a113c0248b8af0214b1bc7f", "url": "https://github.com/eclipse/rdf4j/commit/37686de23d831d292a113c0248b8af0214b1bc7f", "message": "GH-2366: address review feedback + configurability for FedX repo factory\n\nSigned-off-by: Andreas Schwarte <aschwarte10@gmail.com>", "committedDate": "2020-07-20T20:04:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3NjEyOA==", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457776128", "body": "Instead of adding a default no-op impl here (which automatically gets inherited by every implementation of TaskWrapper, imho a bit of a code smell) I suggest we instead allow TaskWrapper to be undefined (null or empty) and check for that in relevant places. Also removes the need for default implementations of methods in this interface (which makes discovering what methods to implement easier as well). ", "bodyText": "Instead of adding a default no-op impl here (which automatically gets inherited by every implementation of TaskWrapper, imho a bit of a code smell) I suggest we instead allow TaskWrapper to be undefined (null or empty) and check for that in relevant places. Also removes the need for default implementations of methods in this interface (which makes discovering what methods to implement easier as well).", "bodyHTML": "<p dir=\"auto\">Instead of adding a default no-op impl here (which automatically gets inherited by every implementation of TaskWrapper, imho a bit of a code smell) I suggest we instead allow TaskWrapper to be undefined (null or empty) and check for that in relevant places. Also removes the need for default implementations of methods in this interface (which makes discovering what methods to implement easier as well).</p>", "author": "jeenbroekstra", "createdAt": "2020-07-21T01:07:14Z", "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.federated.evaluation.concurrent;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Executor;\n+\n+import org.eclipse.rdf4j.federated.FedXConfig;\n+\n+/**\n+ * A {@link TaskWrapper} is a facility to wrap {@link Runnable} background tasks before they are passed to the\n+ * {@link Executor}. Use-cases include injection of thread-local context variables, or more fine-granular error\n+ * handling.\n+ * \n+ * <p>\n+ * All sub-queries sent by the federation engine that make use of the concurrency infrastructure (e.g.\n+ * {@link ControlledWorkerScheduler}) are passing this wrapper.\n+ * </p>\n+ * \n+ * <p>\n+ * The concrete implementation can be configured using {@link FedXConfig#withTaskWrapper(TaskWrapper)}.\n+ * </p>\n+ * \n+ * @author Andreas Schwarte\n+ * @see ControlledWorkerScheduler\n+ * @see FedXConfig#withTaskWrapper(TaskWrapper)\n+ */\n+public interface TaskWrapper {\n+\n+\t/**\n+\t * Default implementation of {@link TaskWrapper} which returns the unmodified original task\n+\t */\n+\tstatic final TaskWrapper DEFAULT = new TaskWrapper() {\n+\t};", "originalCommit": "37686de23d831d292a113c0248b8af0214b1bc7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzMTMyMw==", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457831323", "bodyText": "Done, comment is addressed. Let me know if this works for you", "author": "aschwarte10", "createdAt": "2020-07-21T04:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3NjEyOA=="}], "type": "inlineReview", "revised_code": {"commit": "7659cb7a96c46c294bda7a2e1384d829da63e6ed", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\nindex 320e8c0e19..e4f85d74d0 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n", "chunk": "@@ -32,11 +32,6 @@ import org.eclipse.rdf4j.federated.FedXConfig;\n  */\n public interface TaskWrapper {\n \n-\t/**\n-\t * Default implementation of {@link TaskWrapper} which returns the unmodified original task\n-\t */\n-\tstatic final TaskWrapper DEFAULT = new TaskWrapper() {\n-\t};\n \n \t/**\n \t * Wrap the given {@link Runnable} and add custom logic.\n", "next_change": {"commit": "de2e229b9ba1ad9eb517d6e75cffaea4a3de31fd", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\nindex e4f85d74d0..e555e8fbaf 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n", "chunk": "@@ -32,7 +32,6 @@ import org.eclipse.rdf4j.federated.FedXConfig;\n  */\n public interface TaskWrapper {\n \n-\n \t/**\n \t * Wrap the given {@link Runnable} and add custom logic.\n \t * \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "2efd164cbf5234c722d60b6de39d11ab55dca517", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\nindex 320e8c0e19..e555e8fbaf 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n", "chunk": "@@ -32,12 +32,6 @@ import org.eclipse.rdf4j.federated.FedXConfig;\n  */\n public interface TaskWrapper {\n \n-\t/**\n-\t * Default implementation of {@link TaskWrapper} which returns the unmodified original task\n-\t */\n-\tstatic final TaskWrapper DEFAULT = new TaskWrapper() {\n-\t};\n-\n \t/**\n \t * Wrap the given {@link Runnable} and add custom logic.\n \t * \n", "next_change": {"commit": "fc3d4713b75c2800c4510156df6f4a9f3acc664a", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\nindex e555e8fbaf..20aa44297a 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/evaluation/concurrent/TaskWrapper.java\n", "chunk": "@@ -34,15 +34,15 @@ public interface TaskWrapper {\n \n \t/**\n \t * Wrap the given {@link Runnable} and add custom logic.\n-\t * \n+\t *\n \t * <p>\n \t * Use cases include injection of state into the thread-local context, or more fine granular error handling.\n \t * </p>\n-\t * \n+\t *\n \t * <p>\n \t * Note that when modifying state in {@link ThreadLocal} it must be reset properly in a try/finally block.\n \t * </p>\n-\t * \n+\t *\n \t * @param runnable the task as generated by the FedX engine\n \t * @return the wrapped {@link Runnable}\n \t */\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "2efd164cbf5234c722d60b6de39d11ab55dca517", "message": "Merge commit", "committedDate": null}, {"oid": "fc3d4713b75c2800c4510156df6f4a9f3acc664a", "committedDate": "2022-05-15 10:45:39 +0200", "message": "GH-3886 cleanup imports and some comments"}, {"oid": "fc9e5aa41aac089f09630c7ffb7933a56cbff44b", "committedDate": "2022-07-31 10:56:18 +0200", "message": "GH-4091 changes based on release review (#4095)"}, {"oid": "b849630bfac9c84e0444390179409456da043b15", "committedDate": "2022-07-31 12:10:25 +0200", "message": "GH-4091 add a newline in the copyright header (#4097)"}]}, {"oid": "7659cb7a96c46c294bda7a2e1384d829da63e6ed", "url": "https://github.com/eclipse/rdf4j/commit/7659cb7a96c46c294bda7a2e1384d829da63e6ed", "message": "GH-2366: refine interface definition\n\nSigned-off-by: Andreas Schwarte <aschwarte10@gmail.com>", "committedDate": "2020-07-21T04:36:37Z", "type": "commit"}, {"oid": "de2e229b9ba1ad9eb517d6e75cffaea4a3de31fd", "url": "https://github.com/eclipse/rdf4j/commit/de2e229b9ba1ad9eb517d6e75cffaea4a3de31fd", "message": "GH-2366: formatting\n\nSigned-off-by: Andreas Schwarte <aschwarte10@gmail.com>", "committedDate": "2020-07-21T04:42:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzMjYyMQ==", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457832621", "body": "You're passing the Optional, rather than the TaskWrapper - will that work?", "bodyText": "You're passing the Optional, rather than the TaskWrapper - will that work?", "bodyHTML": "<p dir=\"auto\">You're passing the Optional, rather than the TaskWrapper - will that work?</p>", "author": "jeenbroekstra", "createdAt": "2020-07-21T04:43:59Z", "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java", "diffHunk": "@@ -103,28 +105,46 @@ public void reset() {\n \t\t\tlog.debug(\"Scheduler for join and union are reset.\");\n \t\t}\n \n+\t\tOptional<TaskWrapper> taskWrapper = federationContext.getConfig().getTaskWrapper();\n \t\tif (joinScheduler != null) {\n \t\t\tjoinScheduler.abort();\n \t\t}\n \t\tjoinScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getJoinWorkerThreads(),\n \t\t\t\t\"Join Scheduler\");\n+\t\tjoinScheduler.setTaskWrapper(taskWrapper);", "originalCommit": "de2e229b9ba1ad9eb517d6e75cffaea4a3de31fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzMzI1OA==", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457833258", "bodyText": "Ah never mind I see what you did - added an overloaded setter.\nI personally prefer handling the Optional at the point of message passing rather than inside the setter:\nfederationContext.getConfig().getTaskWrapper().ifPresent(joinScheduler::setTaskWrapper);\n\nbut YMMV.", "author": "jeenbroekstra", "createdAt": "2020-07-21T04:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzMjYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzNDY1MQ==", "url": "https://github.com/eclipse/rdf4j/pull/2370#discussion_r457834651", "bodyText": "That looks better, will change and remove the default implementation for optional. Thanks", "author": "aschwarte10", "createdAt": "2020-07-21T04:51:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzMjYyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "487f7e7da7f396f5a7505b7e3bf5e9a292b15fb6", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\nindex f2c5084ddf..ffef6f4233 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\n", "chunk": "@@ -111,21 +111,21 @@ public class FederationManager {\n \t\t}\n \t\tjoinScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getJoinWorkerThreads(),\n \t\t\t\t\"Join Scheduler\");\n-\t\tjoinScheduler.setTaskWrapper(taskWrapper);\n+\t\ttaskWrapper.ifPresent(joinScheduler::setTaskWrapper);\n \n \t\tif (unionScheduler != null) {\n \t\t\tunionScheduler.abort();\n \t\t}\n \t\tunionScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getUnionWorkerThreads(),\n \t\t\t\t\"Union Scheduler\");\n-\t\tunionScheduler.setTaskWrapper(taskWrapper);\n+\t\ttaskWrapper.ifPresent(unionScheduler::setTaskWrapper);\n \n \t\tif (leftJoinScheduler != null) {\n \t\t\tleftJoinScheduler.abort();\n \t\t}\n \t\tleftJoinScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getLeftJoinWorkerThreads(),\n \t\t\t\t\"Left Join Scheduler\");\n-\t\tleftJoinScheduler.setTaskWrapper(taskWrapper);\n+\t\ttaskWrapper.ifPresent(leftJoinScheduler::setTaskWrapper);\n \n \t}\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "2efd164cbf5234c722d60b6de39d11ab55dca517", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\nindex f2c5084ddf..ffef6f4233 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\n", "chunk": "@@ -111,21 +111,21 @@ public class FederationManager {\n \t\t}\n \t\tjoinScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getJoinWorkerThreads(),\n \t\t\t\t\"Join Scheduler\");\n-\t\tjoinScheduler.setTaskWrapper(taskWrapper);\n+\t\ttaskWrapper.ifPresent(joinScheduler::setTaskWrapper);\n \n \t\tif (unionScheduler != null) {\n \t\t\tunionScheduler.abort();\n \t\t}\n \t\tunionScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getUnionWorkerThreads(),\n \t\t\t\t\"Union Scheduler\");\n-\t\tunionScheduler.setTaskWrapper(taskWrapper);\n+\t\ttaskWrapper.ifPresent(unionScheduler::setTaskWrapper);\n \n \t\tif (leftJoinScheduler != null) {\n \t\t\tleftJoinScheduler.abort();\n \t\t}\n \t\tleftJoinScheduler = new ControlledWorkerScheduler<>(federationContext.getConfig().getLeftJoinWorkerThreads(),\n \t\t\t\t\"Left Join Scheduler\");\n-\t\tleftJoinScheduler.setTaskWrapper(taskWrapper);\n+\t\ttaskWrapper.ifPresent(leftJoinScheduler::setTaskWrapper);\n \n \t}\n \n", "next_change": {"commit": "79d3f406ec8c96ec06f52087838615c54d2e33b3", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\nindex ffef6f4233..a0b8f64776 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\n", "chunk": "@@ -133,7 +133,6 @@ public class FederationManager {\n \t * Returns the managed {@link Executor} which takes for properly handling any configured\n \t * {@link FedXConfig#getTaskWrapper()}\n \t * \n-\t * @return\n \t */\n \tpublic Executor getExecutor() {\n \t\tfinal Optional<TaskWrapper> taskWrapper = federationContext.getConfig().getTaskWrapper();\n", "next_change": {"commit": "e3eab54dc57b29355f3720ca55f4209045394c7a", "changed_code": [{"header": "diff --git a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\nindex a0b8f64776..4dd763e5b2 100644\n--- a/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\n+++ b/tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java\n", "chunk": "@@ -132,7 +141,7 @@ public class FederationManager {\n \t/**\n \t * Returns the managed {@link Executor} which takes for properly handling any configured\n \t * {@link FedXConfig#getTaskWrapper()}\n-\t * \n+\t *\n \t */\n \tpublic Executor getExecutor() {\n \t\tfinal Optional<TaskWrapper> taskWrapper = federationContext.getConfig().getTaskWrapper();\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "2efd164cbf5234c722d60b6de39d11ab55dca517", "message": "Merge commit", "committedDate": null}, {"oid": "79d3f406ec8c96ec06f52087838615c54d2e33b3", "committedDate": "2021-11-03 21:57:23 +0100", "message": "GH-3394 Use eclipse javadoc settings to errors to find many javadoc issues and bulk fix them. <tt> changed to html5 <var>"}, {"oid": "3e1e6ebf44d089c921bd124a66492378abc3f402", "committedDate": "2022-01-13 13:37:54 +0100", "message": "GH-3483: refactor federation execution to use a per-query strategy"}, {"oid": "55b5c993e07a08ea55da34b4b53f96dbd6ed3fa7", "committedDate": "2022-01-13 13:37:56 +0100", "message": "GH-3483: instantiate federation strategy through a factory"}, {"oid": "ca2adddb76d402ad43222ebe1e437edafb0c343e", "committedDate": "2022-01-13 13:38:39 +0100", "message": "GH-3483: make the Federation Strategy Factory configurable"}, {"oid": "9b053388b70d92d8e4a867d904cf70477b56a279", "committedDate": "2022-02-01 11:47:59 +0100", "message": "GH-3483: wrap up the use of FederationEvalStrategy per query"}, {"oid": "e3eab54dc57b29355f3720ca55f4209045394c7a", "committedDate": "2022-04-23 11:32:40 +0200", "message": "GH-3807 code cleanup (#3808)"}, {"oid": "fc9e5aa41aac089f09630c7ffb7933a56cbff44b", "committedDate": "2022-07-31 10:56:18 +0200", "message": "GH-4091 changes based on release review (#4095)"}, {"oid": "b849630bfac9c84e0444390179409456da043b15", "committedDate": "2022-07-31 12:10:25 +0200", "message": "GH-4091 add a newline in the copyright header (#4097)"}, {"oid": "418cae743b134e2e75b1206db859e0581de23bbd", "committedDate": "2022-08-04 08:10:05 +0200", "message": "GH-4107 improve shutdown"}, {"oid": "d4146b7b29a03378f71440d3f285be22204a799d", "committedDate": "2022-08-04 08:10:55 +0200", "message": "GH-4107 code cleanup"}, {"oid": "9ac5e53f9aab11d66eedc8b4d39dfd5947750d18", "committedDate": "2023-03-16 09:53:25 +0100", "message": "GH-3843 FedX uses a MapDBCollectionFactory"}]}, {"oid": "487f7e7da7f396f5a7505b7e3bf5e9a292b15fb6", "url": "https://github.com/eclipse/rdf4j/commit/487f7e7da7f396f5a7505b7e3bf5e9a292b15fb6", "message": "GH-2366: minor editorial call change\n\nSigned-off-by: Andreas Schwarte <aschwarte10@gmail.com>", "committedDate": "2020-07-21T04:55:28Z", "type": "commit"}]}