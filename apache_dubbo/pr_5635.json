{"pr_number": 5635, "pr_title": "allow user to pass AsyncMethodInfo at runtime.", "pr_createdAt": "2020-01-10T11:39:17Z", "pr_url": "https://github.com/apache/dubbo/pull/5635", "merge_commit": "80646ba28fd5c06aeeabaa81e90c469b91e5745d", "timeline": [{"oid": "b74507b582ba90f4f2d4806c25f5c7952ca1846b", "url": "https://github.com/apache/dubbo/commit/b74507b582ba90f4f2d4806c25f5c7952ca1846b", "message": "allow AsyncMethodInfo on Invocation to override the configured AsyncMethodInfo, to give user a chance to change AsyncMethodInfo on the fly", "committedDate": "2020-01-10T11:35:54Z", "type": "commit"}, {"oid": "587b870ad7e23eb616a6f1cf70b984bafb4a50da", "url": "https://github.com/apache/dubbo/commit/587b870ad7e23eb616a6f1cf70b984bafb4a50da", "message": "avoid NPE when return type is primitive", "committedDate": "2020-01-13T08:55:12Z", "type": "commit"}, {"oid": "8c05550d233def81a22784bac5d5af21369b77d0", "url": "https://github.com/apache/dubbo/commit/8c05550d233def81a22784bac5d5af21369b77d0", "message": "allow find consumer-model from invocation", "committedDate": "2020-01-13T13:51:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMzAwMA==", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367213000", "body": "I think it would be better to put ConsumerModel in the constructor,because it wouldn't change and will get better performance", "bodyText": "I think it would be better to put ConsumerModel in the constructor,because it wouldn't change and will get better performance", "bodyHTML": "<p dir=\"auto\">I think it would be better to put ConsumerModel in the constructor,because it wouldn't change and will get better performance</p>", "author": "qinliujie", "createdAt": "2020-01-16T03:15:45Z", "path": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java", "diffHunk": "@@ -55,7 +57,12 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n             return invoker.equals(args[0]);\n         }\n         RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), args);\n-        rpcInvocation.setTargetServiceUniqueName(invoker.getUrl().getServiceKey());\n+        String serviceKey = invoker.getUrl().getServiceKey();\n+        if (serviceKey != null) {\n+            rpcInvocation.setTargetServiceUniqueName(serviceKey);\n+            ConsumerModel consumerModel = ApplicationModel.getConsumerModel(serviceKey);", "originalCommit": "8c05550d233def81a22784bac5d5af21369b77d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NDIzNQ==", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367244235", "bodyText": "done.", "author": "beiwei30", "createdAt": "2020-01-16T06:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMzAwMA=="}], "type": "inlineReview", "revised_code": {"commit": "5bc85f15b2d6bc7893238369a392d74c54e0866a", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\nindex b464f262c..f7417bf15 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n", "chunk": "@@ -58,10 +64,9 @@ public class InvokerInvocationHandler implements InvocationHandler {\n         }\n         RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), args);\n         String serviceKey = invoker.getUrl().getServiceKey();\n-        if (serviceKey != null) {\n-            rpcInvocation.setTargetServiceUniqueName(serviceKey);\n-            ConsumerModel consumerModel = ApplicationModel.getConsumerModel(serviceKey);\n-            rpcInvocation.put(\"consumerModel\", consumerModel);\n+        rpcInvocation.setTargetServiceUniqueName(serviceKey);\n+        if (consumerModel != null) {\n+            rpcInvocation.put(Constants.CONSUMER_MODEL, consumerModel);\n         }\n \n         return invoker.invoke(rpcInvocation).recreate();\n", "next_change": {"commit": "2524a2254a7b08cc8d16b85451c5ce1bedc7a0a0", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\nindex f7417bf15..fc0f8b333 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n", "chunk": "@@ -67,6 +67,7 @@ public class InvokerInvocationHandler implements InvocationHandler {\n         rpcInvocation.setTargetServiceUniqueName(serviceKey);\n         if (consumerModel != null) {\n             rpcInvocation.put(Constants.CONSUMER_MODEL, consumerModel);\n+            rpcInvocation.put(Constants.METHOD_MODEL, consumerModel.getMethodModel(method));\n         }\n \n         return invoker.invoke(rpcInvocation).recreate();\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMzU4Nw==", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367213587", "body": "I think you could get  consumerModel directly from invocation attributes ", "bodyText": "I think you could get  consumerModel directly from invocation attributes", "bodyHTML": "<p dir=\"auto\">I think you could get  consumerModel directly from invocation attributes</p>", "author": "qinliujie", "createdAt": "2020-01-16T03:19:00Z", "path": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java", "diffHunk": "@@ -144,7 +148,12 @@ public Result getAppResponse() {\n             // This should never happen;\n             logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n         }\n-        return new AppResponse();\n+\n+        ConsumerModel consumerModel = ApplicationModel.getConsumerModel(invocation.getTargetServiceUniqueName());\n+        String methodName = invocation.getMethodName();", "originalCommit": "8c05550d233def81a22784bac5d5af21369b77d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NTk0Ng==", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367245946", "bodyText": "done.", "author": "beiwei30", "createdAt": "2020-01-16T06:10:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMzU4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5bc85f15b2d6bc7893238369a392d74c54e0866a", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\nindex ab9241300..8bc4ad48e 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n", "chunk": "@@ -149,11 +148,7 @@ public class AsyncRpcResult implements Result {\n             logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n         }\n \n-        ConsumerModel consumerModel = ApplicationModel.getConsumerModel(invocation.getTargetServiceUniqueName());\n-        String methodName = invocation.getMethodName();\n-        String params = ReflectUtils.getDesc(invocation.getParameterTypes());\n-        MethodDescriptor method = consumerModel.getServiceModel().getMethod(methodName, params);\n-        return new AppResponse(ReflectUtils.defaultReturn(method.getReturnClass()));\n+        return createDefaultValue(invocation);\n     }\n \n     /**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "80646ba28fd5c06aeeabaa81e90c469b91e5745d", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\nindex ab9241300..751715b4e 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n", "chunk": "@@ -149,11 +148,7 @@ public class AsyncRpcResult implements Result {\n             logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n         }\n \n-        ConsumerModel consumerModel = ApplicationModel.getConsumerModel(invocation.getTargetServiceUniqueName());\n-        String methodName = invocation.getMethodName();\n-        String params = ReflectUtils.getDesc(invocation.getParameterTypes());\n-        MethodDescriptor method = consumerModel.getServiceModel().getMethod(methodName, params);\n-        return new AppResponse(ReflectUtils.defaultReturn(method.getReturnClass()));\n+        return createDefaultValue(invocation);\n     }\n \n     /**\n", "next_change": {"commit": "c783e55ec955beb93916d1cdd5dbdf0ef1451796", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\nindex 751715b4e..5daf5cb01 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n", "chunk": "@@ -144,8 +146,9 @@ public class AsyncRpcResult implements Result {\n                 return responseFuture.get();\n             }\n         } catch (Exception e) {\n-            // This should never happen;\n-            logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n+            // This should not happen in normal request process;\n+            logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\");\n+            throw new RpcException(e);\n         }\n \n         return createDefaultValue(invocation);\n", "next_change": {"commit": "6ed4cc2457fbcb2380d11d9f6d6c885e723bc08b", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\nindex 5daf5cb01..4814ce0ac 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n", "chunk": "@@ -147,7 +162,7 @@ public class AsyncRpcResult implements Result {\n             }\n         } catch (Exception e) {\n             // This should not happen in normal request process;\n-            logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\");\n+            logger.error(PROXY_ERROR_ASYNC_RESPONSE, \"\", \"\", \"Got exception when trying to fetch the underlying result from AsyncRpcResult.\");\n             throw new RpcException(e);\n         }\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "80646ba28fd5c06aeeabaa81e90c469b91e5745d", "message": "Merge commit", "committedDate": null}, {"oid": "c783e55ec955beb93916d1cdd5dbdf0ef1451796", "committedDate": "2020-02-28 16:50:52 +0800", "message": "mrege 2.7.5-release into master branch (#5642)"}, {"oid": "abd38c7c2d705b3de68bacee82ccc01bee6e9a9f", "committedDate": "2020-03-13 14:18:00 +0800", "message": "add compatible setAttachment methods (#5851)"}, {"oid": "60c55b83bc27282dabb93a31ccb3e35e29ae087e", "committedDate": "2021-05-10 16:10:31 +0800", "message": "[3.0] Seperate RpcContext to client and server (#7556)"}, {"oid": "8bc9257f4e09b2937e21842b90984dfcaefe97b6", "committedDate": "2021-06-01 14:14:35 +0800", "message": "Migrate master bugfix (#7927)"}, {"oid": "6a37d45ee9c7adca9750ed9538452e99281569ed", "committedDate": "2021-10-23 22:33:53 +0800", "message": "Add some test cases and adjust the code format (#9102)"}, {"oid": "098787a4ef95c53f43f2130c90995cbf4c8e732f", "committedDate": "2021-12-25 20:24:22 +0800", "message": "fix async call issues, rpc context and response future callback race conditions (#9464)"}, {"oid": "2759f386b1c91f284d2afbb478b6a1943885ce65", "committedDate": "2021-12-26 17:26:13 +0800", "message": "try moving finally block (#9496)"}, {"oid": "e8e2d8f7032860120ed599eb68a524b3b1535cc2", "committedDate": "2022-01-11 15:50:57 +0800", "message": "[3.0] Support Optional Clear Future (#9560)"}, {"oid": "d6e14980a5a17bcfebab6190cb0ae31ab8d931c2", "committedDate": "2022-05-12 13:57:18 +0800", "message": "[3.0] Support Injvm invoke server async (#10026)"}, {"oid": "6ed4cc2457fbcb2380d11d9f6d6c885e723bc08b", "committedDate": "2022-10-27 10:40:13 +0800", "message": "3.1-Error code is managed with constants (#10771) (#10837)"}, {"oid": "1470c7ca1eeba0ad4bcb309678e5c432bbfc002f", "committedDate": "2022-12-05 15:37:33 +0800", "message": "Cache jvm system parameters to prevent each call from being executed, affecting performance (#10839)"}, {"oid": "a795ff73dff7318c564a3d38a19be97b92ce496a", "committedDate": "2022-12-06 15:45:45 +0800", "message": "Get system properties from context (#11082)"}, {"oid": "705b32788598f1b1fc80a359d21cfec2f55b664d", "committedDate": "2022-12-16 12:53:22 +0800", "message": "Revert #10839, #11082 and #11086 (#11160)"}, {"oid": "0eb0e01b39d425b2e0546c6dd46a851fa3026439", "committedDate": "2023-02-10 15:31:32 +0800", "message": "Modifier optimization, add 'final' modifier. (#11503)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxNjMwMg==", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367216302", "body": "why do you need a default value? just null is it ok?", "bodyText": "why do you need a default value? just null is it ok?", "bodyHTML": "<p dir=\"auto\">why do you need a default value? just null is it ok?</p>", "author": "qinliujie", "createdAt": "2020-01-16T03:33:19Z", "path": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java", "diffHunk": "@@ -144,7 +148,12 @@ public Result getAppResponse() {\n             // This should never happen;\n             logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n         }\n-        return new AppResponse();\n+\n+        ConsumerModel consumerModel = ApplicationModel.getConsumerModel(invocation.getTargetServiceUniqueName());\n+        String methodName = invocation.getMethodName();\n+        String params = ReflectUtils.getDesc(invocation.getParameterTypes());\n+        MethodDescriptor method = consumerModel.getServiceModel().getMethod(methodName, params);\n+        return new AppResponse(ReflectUtils.defaultReturn(method.getReturnClass()));", "originalCommit": "8c05550d233def81a22784bac5d5af21369b77d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0MzE5OA==", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367243198", "bodyText": "when the return type is primitive type, it will cause class cast exception in proxy object.", "author": "beiwei30", "createdAt": "2020-01-16T05:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxNjMwMg=="}], "type": "inlineReview", "revised_code": {"commit": "5bc85f15b2d6bc7893238369a392d74c54e0866a", "changed_code": [{"header": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\nindex ab9241300..8bc4ad48e 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n", "chunk": "@@ -149,11 +148,7 @@ public class AsyncRpcResult implements Result {\n             logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n         }\n \n-        ConsumerModel consumerModel = ApplicationModel.getConsumerModel(invocation.getTargetServiceUniqueName());\n-        String methodName = invocation.getMethodName();\n-        String params = ReflectUtils.getDesc(invocation.getParameterTypes());\n-        MethodDescriptor method = consumerModel.getServiceModel().getMethod(methodName, params);\n-        return new AppResponse(ReflectUtils.defaultReturn(method.getReturnClass()));\n+        return createDefaultValue(invocation);\n     }\n \n     /**\n", "next_change": null}]}}, {"oid": "5bc85f15b2d6bc7893238369a392d74c54e0866a", "url": "https://github.com/apache/dubbo/commit/5bc85f15b2d6bc7893238369a392d74c54e0866a", "message": "enhance consumer model logic", "committedDate": "2020-01-16T06:11:24Z", "type": "commit"}, {"oid": "2524a2254a7b08cc8d16b85451c5ce1bedc7a0a0", "url": "https://github.com/apache/dubbo/commit/2524a2254a7b08cc8d16b85451c5ce1bedc7a0a0", "message": "introduce method model in rpc invocation", "committedDate": "2020-01-16T06:39:32Z", "type": "commit"}, {"oid": "812efdf8cce31cefbaa09293a0d7ce22e157bfe8", "url": "https://github.com/apache/dubbo/commit/812efdf8cce31cefbaa09293a0d7ce22e157bfe8", "message": "fix unit test failure", "committedDate": "2020-01-16T08:10:36Z", "type": "commit"}]}