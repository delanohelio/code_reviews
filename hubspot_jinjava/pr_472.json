{"pr_number": 472, "pr_title": "Divide by zero", "pr_author": "bszabo", "pr_createdAt": "2020-08-08T02:59:05Z", "pr_url": "https://github.com/HubSpot/jinjava/pull/472", "timeline": [{"oid": "6710644c1a1f7d7b817114e722c76379ff002bf2", "url": "https://github.com/HubSpot/jinjava/commit/6710644c1a1f7d7b817114e722c76379ff002bf2", "message": "Detect attempt to test for divisibility by zero", "committedDate": "2020-08-08T02:32:30Z", "type": "commit"}, {"oid": "d99e819f3c3910863eff1eb882c1e53a4de18598", "url": "https://github.com/HubSpot/jinjava/commit/d99e819f3c3910863eff1eb882c1e53a4de18598", "message": "Fix typo in is divisible code snippet", "committedDate": "2020-08-08T02:51:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDAxOQ==", "url": "https://github.com/HubSpot/jinjava/pull/472#discussion_r467464019", "body": "good catch on the typo here", "bodyText": "good catch on the typo here", "bodyHTML": "<p dir=\"auto\">good catch on the typo here</p>", "author": "boulter", "createdAt": "2020-08-08T13:15:12Z", "path": "src/main/java/com/hubspot/jinjava/lib/exptest/IsDivisibleByExpTest.java", "diffHunk": "@@ -19,7 +19,7 @@\n   ),\n   snippets = {\n     @JinjavaSnippet(\n-      code = \"{% if variable is divisbleby 5 %}\\n\" +\n+      code = \"% if variable is divisibleby 5 %\\n\" +", "originalCommit": "d99e819f3c3910863eff1eb882c1e53a4de18598", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDI3OA==", "url": "https://github.com/HubSpot/jinjava/pull/472#discussion_r467464278", "bodyText": "I think we still need the { and } though.", "author": "boulter", "createdAt": "2020-08-08T13:18:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDAxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "2ffedb79488266bf40cb87fb5dce467c0d9a86f2", "changed_code": [{"header": "diff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsDivisibleByExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsDivisibleByExpTest.java\nindex caf49cff..bf39c00a 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsDivisibleByExpTest.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsDivisibleByExpTest.java\n", "chunk": "@@ -19,12 +19,12 @@ import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n   ),\n   snippets = {\n     @JinjavaSnippet(\n-      code = \"% if variable is divisibleby 5 %\\n\" +\n+      code = \"{% if variable is divisibleby 5 %}\\n\" +\n       \"   <!--code to render if variable can be divided by 5-->\\n\" +\n       \"{% else %}\\n\" +\n       \"   <!--code to render if variable cannot be divided by 5-->\\n\" +\n       \"{% endif %}\"\n-    )\n+    ),\n   }\n )\n public class IsDivisibleByExpTest implements ExpTest {\n", "next_change": {"commit": "1405adc62f47e61300c3bb15698e3fe4db35ac33", "changed_code": [{"header": "diff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsDivisibleByExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsDivisibleByExpTest.java\nindex bf39c00a..bf44fe35 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsDivisibleByExpTest.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsDivisibleByExpTest.java\n", "chunk": "@@ -24,7 +24,7 @@ import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n       \"{% else %}\\n\" +\n       \"   <!--code to render if variable cannot be divided by 5-->\\n\" +\n       \"{% endif %}\"\n-    ),\n+    )\n   }\n )\n public class IsDivisibleByExpTest implements ExpTest {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDE0Mg==", "url": "https://github.com/HubSpot/jinjava/pull/472#discussion_r467464142", "body": "Thanks for adding test coverage here. Can you check for the NUMBER_FORMAT exception as well?", "bodyText": "Thanks for adding test coverage here. Can you check for the NUMBER_FORMAT exception as well?", "bodyHTML": "<p dir=\"auto\">Thanks for adding test coverage here. Can you check for the NUMBER_FORMAT exception as well?</p>", "author": "boulter", "createdAt": "2020-08-08T13:16:44Z", "path": "src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.Assert.assertEquals;\n+\n+import com.hubspot.jinjava.Jinjava;\n+import java.util.HashMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class isDivisibleByExpTestTest {\n+  private static final String DIVISIBLE_BY_TEMPLATE = \"{{ %s is divisibleby %s }}\";\n+\n+  private Jinjava jinjava;\n+\n+  @Before\n+  public void setup() {\n+    jinjava = new Jinjava();\n+  }\n+\n+  @Test\n+  public void itRequiresDividend() {\n+    assertEquals(\n+      jinjava.render(String.format(DIVISIBLE_BY_TEMPLATE, \"null\", \"3\"), new HashMap<>()),\n+      \"false\"\n+    );\n+  }\n+\n+  @Test\n+  public void itRequiresNumericalDividend() {\n+    assertEquals(\n+      jinjava.render(\n+        String.format(DIVISIBLE_BY_TEMPLATE, \"thirty\", \"3\"),\n+        new HashMap<>()\n+      ),\n+      \"false\"\n+    );\n+  }\n+\n+  @Test\n+  public void itRequiresDivisor() {\n+    assertEquals(\n+      jinjava.render(String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"null\"), new HashMap<>()),\n+      \"false\"\n+    );\n+  }\n+\n+  @Test\n+  public void itRequiresNumericalDivisor() {\n+    // Question for PR: It seems that InvalidArgumentExceptions are caught before my middleware. How to know it failed for the right reason?\n+    assertEquals(\n+      jinjava.render(String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"five\"), new HashMap<>()),\n+      \"false\"\n+    );\n+  }\n+\n+  @Test\n+  public void itRequiresDividendIsMultipleOfDivisor() {\n+    assertEquals(\n+      jinjava.render(String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"5\"), new HashMap<>()),\n+      \"true\"\n+    );\n+\n+    assertEquals(\n+      jinjava.render(String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"3\"), new HashMap<>()),\n+      \"false\"\n+    );\n+  }\n+\n+  @Test\n+  public void itRequiresNonZeroDivisor() {\n+    assertThatThrownBy(\n+        () ->\n+          jinjava.render(String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"0\"), new HashMap<>())\n+      )\n+      .hasMessageContaining(\"1st argument with value 0 must be non-zero\");\n+  }", "originalCommit": "d99e819f3c3910863eff1eb882c1e53a4de18598", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwNTk2OQ==", "url": "https://github.com/HubSpot/jinjava/pull/472#discussion_r467505969", "bodyText": "I don't know how to get the jinjava interpreter to take input provided as a string template into an object whose type falls outside the Number inheritance tree. That is, I don't know how to structure the test call to induce this condition.\nIn the process of trying I found that a template of  { 123.4 is divisibleby 3} returns \"true\". I would have expected a return value of false. This seems like a logic error in jinjava, though fixing it may well prove to be a breaking change, in case any client has assumed the opposite.", "author": "bszabo", "createdAt": "2020-08-08T21:30:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkyNzk2Nw==", "url": "https://github.com/HubSpot/jinjava/pull/472#discussion_r467927967", "bodyText": "not sure what you mean in the first paragraph. What have you tried?\nAs for the second one, I think it's worth fixing.", "author": "boulter", "createdAt": "2020-08-10T14:06:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2Mzk0OA==", "url": "https://github.com/HubSpot/jinjava/pull/472#discussion_r467963948", "bodyText": "I'm fixing the non-integer case to return false if it's the dividend that's fractional, and to throw an InvalidArgumentException if it's the divisor that's fractional. (Testing for fractional nature by comparing Math.ceil() with Math.floor() for equality).\nFor the first paragraph, what I mean is that all my tests invoke the system under test by passing down a string like \"{10 is divisibleby 5}\" or \"{10 is divisibleby null}\". I don't know what I might pass just before the closing \"}\" for a test case that violates the NUMBER_FORMAT requirement. I don't think that calling renderForResult() instead of render() in the test would buy me anything. It would appear that testing this condition requires mocking some internal jinjava interpreter class. What am I missing?", "author": "bszabo", "createdAt": "2020-08-10T14:57:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2NjE1NA==", "url": "https://github.com/HubSpot/jinjava/pull/472#discussion_r467966154", "bodyText": "Can you try 10 is divisibleby 'foo'?", "author": "boulter", "createdAt": "2020-08-10T15:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDE0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2ffedb79488266bf40cb87fb5dce467c0d9a86f2", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\nindex 3a355e07..0a89c21c 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\n", "chunk": "@@ -69,10 +59,17 @@ public class isDivisibleByExpTestTest {\n \n   @Test\n   public void itRequiresNonZeroDivisor() {\n-    assertThatThrownBy(\n-        () ->\n-          jinjava.render(String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"0\"), new HashMap<>())\n-      )\n-      .hasMessageContaining(\"1st argument with value 0 must be non-zero\");\n+    RenderResult result = jinjava.renderForResult(\n+      String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"0\"),\n+      new HashMap<>()\n+    );\n+    assertEquals(result.getErrors().size(), 1);\n+    TemplateError error = result.getErrors().get(0);\n+    assertEquals(error.getSeverity(), ErrorType.FATAL);\n+    assertEquals(error.getReason(), ErrorReason.INVALID_ARGUMENT);\n+    assertEquals(\n+      error.getMessage().contains(\"1st argument with value 0 must be non-zero\"),\n+      true\n+    );\n   }\n }\n", "next_change": {"commit": "1405adc62f47e61300c3bb15698e3fe4db35ac33", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\nindex 0a89c21c..997a8563 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\n", "chunk": "@@ -58,18 +102,33 @@ public class isDivisibleByExpTestTest {\n   }\n \n   @Test\n-  public void itRequiresNonZeroDivisor() {\n+  public void itReturnsFalseForFractionalDivisor() {\n     RenderResult result = jinjava.renderForResult(\n-      String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"0\"),\n+      String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"5.00001\"),\n       new HashMap<>()\n     );\n+    assertOnInvalidArgument(result, \"must be non-zero\");\n+  }\n+\n+  @Test\n+  public void itReturnsTrueForDecimalDivisorWithNoFractionalPart() {\n+    assertEquals(\n+      jinjava.render(\n+        String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"5.00000\"),\n+        new HashMap<>()\n+      ),\n+      \"true\"\n+    );\n+  }\n+\n+  private void assertOnInvalidArgument(\n+    RenderResult result,\n+    String expectedMessageIfInvalid\n+  ) {\n     assertEquals(result.getErrors().size(), 1);\n     TemplateError error = result.getErrors().get(0);\n     assertEquals(error.getSeverity(), ErrorType.FATAL);\n     assertEquals(error.getReason(), ErrorReason.INVALID_ARGUMENT);\n-    assertEquals(\n-      error.getMessage().contains(\"1st argument with value 0 must be non-zero\"),\n-      true\n-    );\n+    assertEquals(error.getMessage().contains(expectedMessageIfInvalid), true);\n   }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDE5OQ==", "url": "https://github.com/HubSpot/jinjava/pull/472#discussion_r467464199", "body": "Might be good to add at least one positive test case as well to confirm we didn't break anything.", "bodyText": "Might be good to add at least one positive test case as well to confirm we didn't break anything.", "bodyHTML": "<p dir=\"auto\">Might be good to add at least one positive test case as well to confirm we didn't break anything.</p>", "author": "boulter", "createdAt": "2020-08-08T13:17:37Z", "path": "src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.Assert.assertEquals;\n+\n+import com.hubspot.jinjava.Jinjava;\n+import java.util.HashMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class isDivisibleByExpTestTest {\n+  private static final String DIVISIBLE_BY_TEMPLATE = \"{{ %s is divisibleby %s }}\";\n+\n+  private Jinjava jinjava;\n+\n+  @Before\n+  public void setup() {\n+    jinjava = new Jinjava();\n+  }\n+\n+  @Test", "originalCommit": "d99e819f3c3910863eff1eb882c1e53a4de18598", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NTY1MQ==", "url": "https://github.com/HubSpot/jinjava/pull/472#discussion_r467465651", "bodyText": "I'll break out the one positive test on line 59 (currently embedded in a negative test) to be its own test", "author": "bszabo", "createdAt": "2020-08-08T13:35:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDE5OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDY3NA==", "url": "https://github.com/HubSpot/jinjava/pull/472#discussion_r467464674", "body": "you can look at the errors on the interpreter by using `jinjava.renderForResult`. [Example](https://github.com/HubSpot/jinjava/blob/c2d7df73cc9b91c90ee0ea4c89f85dcb3abbe532/src/test/java/com/hubspot/jinjava/lib/filter/SortFilterTest.java#L92)", "bodyText": "you can look at the errors on the interpreter by using jinjava.renderForResult. Example", "bodyHTML": "<p dir=\"auto\">you can look at the errors on the interpreter by using <code>jinjava.renderForResult</code>. <a href=\"https://github.com/HubSpot/jinjava/blob/c2d7df73cc9b91c90ee0ea4c89f85dcb3abbe532/src/test/java/com/hubspot/jinjava/lib/filter/SortFilterTest.java#L92\">Example</a></p>", "author": "boulter", "createdAt": "2020-08-08T13:23:37Z", "path": "src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.Assert.assertEquals;\n+\n+import com.hubspot.jinjava.Jinjava;\n+import java.util.HashMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class isDivisibleByExpTestTest {\n+  private static final String DIVISIBLE_BY_TEMPLATE = \"{{ %s is divisibleby %s }}\";\n+\n+  private Jinjava jinjava;\n+\n+  @Before\n+  public void setup() {\n+    jinjava = new Jinjava();\n+  }\n+\n+  @Test\n+  public void itRequiresDividend() {\n+    assertEquals(\n+      jinjava.render(String.format(DIVISIBLE_BY_TEMPLATE, \"null\", \"3\"), new HashMap<>()),\n+      \"false\"\n+    );\n+  }\n+\n+  @Test\n+  public void itRequiresNumericalDividend() {\n+    assertEquals(\n+      jinjava.render(\n+        String.format(DIVISIBLE_BY_TEMPLATE, \"thirty\", \"3\"),\n+        new HashMap<>()\n+      ),\n+      \"false\"\n+    );\n+  }\n+\n+  @Test\n+  public void itRequiresDivisor() {\n+    assertEquals(\n+      jinjava.render(String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"null\"), new HashMap<>()),\n+      \"false\"\n+    );\n+  }\n+\n+  @Test\n+  public void itRequiresNumericalDivisor() {\n+    // Question for PR: It seems that InvalidArgumentExceptions are caught before my middleware. How to know it failed for the right reason?", "originalCommit": "d99e819f3c3910863eff1eb882c1e53a4de18598", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwNjEzMg==", "url": "https://github.com/HubSpot/jinjava/pull/472#discussion_r467506132", "bodyText": "Yes. I followed your suggestion and this addresses my need.", "author": "bszabo", "createdAt": "2020-08-08T21:32:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDY3NA=="}], "type": "inlineReview", "revised_code": {"commit": "2ffedb79488266bf40cb87fb5dce467c0d9a86f2", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\nindex 3a355e07..0a89c21c 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\n", "chunk": "@@ -46,21 +42,15 @@ public class isDivisibleByExpTestTest {\n   }\n \n   @Test\n-  public void itRequiresNumericalDivisor() {\n-    // Question for PR: It seems that InvalidArgumentExceptions are caught before my middleware. How to know it failed for the right reason?\n-    assertEquals(\n-      jinjava.render(String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"five\"), new HashMap<>()),\n-      \"false\"\n-    );\n-  }\n-\n-  @Test\n-  public void itRequiresDividendIsMultipleOfDivisor() {\n+  public void itPassesWhenDividendIsDivisibleByDivisor() {\n     assertEquals(\n       jinjava.render(String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"5\"), new HashMap<>()),\n       \"true\"\n     );\n+  }\n \n+  @Test\n+  public void itFailsWhenDividendIsNotMultipleOfDivisor() {\n     assertEquals(\n       jinjava.render(String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"3\"), new HashMap<>()),\n       \"false\"\n", "next_change": {"commit": "1405adc62f47e61300c3bb15698e3fe4db35ac33", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\nindex 0a89c21c..997a8563 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\n", "chunk": "@@ -50,7 +83,18 @@ public class isDivisibleByExpTestTest {\n   }\n \n   @Test\n-  public void itFailsWhenDividendIsNotMultipleOfDivisor() {\n+  public void itReturnsTrueForDecimalDividendWithNoFractionalPart() {\n+    assertEquals(\n+      jinjava.render(\n+        String.format(DIVISIBLE_BY_TEMPLATE, \"10.00000\", \"5\"),\n+        new HashMap<>()\n+      ),\n+      \"true\"\n+    );\n+  }\n+\n+  @Test\n+  public void itReturnsFalseWhenDividendIsNotMultipleOfDivisor() {\n     assertEquals(\n       jinjava.render(String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"3\"), new HashMap<>()),\n       \"false\"\n", "next_change": null}, {"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\nindex 0a89c21c..997a8563 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\n", "chunk": "@@ -58,18 +102,33 @@ public class isDivisibleByExpTestTest {\n   }\n \n   @Test\n-  public void itRequiresNonZeroDivisor() {\n+  public void itReturnsFalseForFractionalDivisor() {\n     RenderResult result = jinjava.renderForResult(\n-      String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"0\"),\n+      String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"5.00001\"),\n       new HashMap<>()\n     );\n+    assertOnInvalidArgument(result, \"must be non-zero\");\n+  }\n+\n+  @Test\n+  public void itReturnsTrueForDecimalDivisorWithNoFractionalPart() {\n+    assertEquals(\n+      jinjava.render(\n+        String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"5.00000\"),\n+        new HashMap<>()\n+      ),\n+      \"true\"\n+    );\n+  }\n+\n+  private void assertOnInvalidArgument(\n+    RenderResult result,\n+    String expectedMessageIfInvalid\n+  ) {\n     assertEquals(result.getErrors().size(), 1);\n     TemplateError error = result.getErrors().get(0);\n     assertEquals(error.getSeverity(), ErrorType.FATAL);\n     assertEquals(error.getReason(), ErrorReason.INVALID_ARGUMENT);\n-    assertEquals(\n-      error.getMessage().contains(\"1st argument with value 0 must be non-zero\"),\n-      true\n-    );\n+    assertEquals(error.getMessage().contains(expectedMessageIfInvalid), true);\n   }\n }\n", "next_change": null}]}}]}}, {"oid": "2ffedb79488266bf40cb87fb5dce467c0d9a86f2", "url": "https://github.com/HubSpot/jinjava/commit/2ffedb79488266bf40cb87fb5dce467c0d9a86f2", "message": "Pull request feedback to fix template syntax and add positive test case", "committedDate": "2020-08-08T21:39:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkyNTc0Ng==", "url": "https://github.com/HubSpot/jinjava/pull/472#discussion_r467925746", "body": "nit: doesn't really fail, just returns false. It works correctly!", "bodyText": "nit: doesn't really fail, just returns false. It works correctly!", "bodyHTML": "<p dir=\"auto\">nit: doesn't really fail, just returns false. It works correctly!</p>", "author": "boulter", "createdAt": "2020-08-10T14:03:02Z", "path": "src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java", "diffHunk": "@@ -46,21 +42,15 @@ public void itRequiresDivisor() {\n   }\n \n   @Test\n-  public void itRequiresNumericalDivisor() {\n-    // Question for PR: It seems that InvalidArgumentExceptions are caught before my middleware. How to know it failed for the right reason?\n-    assertEquals(\n-      jinjava.render(String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"five\"), new HashMap<>()),\n-      \"false\"\n-    );\n-  }\n-\n-  @Test\n-  public void itRequiresDividendIsMultipleOfDivisor() {\n+  public void itPassesWhenDividendIsDivisibleByDivisor() {\n     assertEquals(\n       jinjava.render(String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"5\"), new HashMap<>()),\n       \"true\"\n     );\n+  }\n \n+  @Test\n+  public void itFailsWhenDividendIsNotMultipleOfDivisor() {", "originalCommit": "2ffedb79488266bf40cb87fb5dce467c0d9a86f2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1405adc62f47e61300c3bb15698e3fe4db35ac33", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\nindex 0a89c21c..997a8563 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\n", "chunk": "@@ -42,7 +57,25 @@ public class isDivisibleByExpTestTest {\n   }\n \n   @Test\n-  public void itPassesWhenDividendIsDivisibleByDivisor() {\n+  public void itRequiresNumericalDivisor() {\n+    RenderResult result = jinjava.renderForResult(\n+      String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"'foo'\"),\n+      new HashMap<>()\n+    );\n+    assertOnInvalidArgument(result, \"must be a number\");\n+  }\n+\n+  @Test\n+  public void itRequiresNonZeroDivisor() {\n+    RenderResult result = jinjava.renderForResult(\n+      String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"0\"),\n+      new HashMap<>()\n+    );\n+    assertOnInvalidArgument(result, \"1st argument with value 0 must be non-zero\");\n+  }\n+\n+  @Test\n+  public void itReturnsTrueWhenDividendIsDivisibleByDivisor() {\n     assertEquals(\n       jinjava.render(String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"5\"), new HashMap<>()),\n       \"true\"\n", "next_change": null}, {"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\nindex 0a89c21c..997a8563 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/isDivisibleByExpTestTest.java\n", "chunk": "@@ -50,7 +83,18 @@ public class isDivisibleByExpTestTest {\n   }\n \n   @Test\n-  public void itFailsWhenDividendIsNotMultipleOfDivisor() {\n+  public void itReturnsTrueForDecimalDividendWithNoFractionalPart() {\n+    assertEquals(\n+      jinjava.render(\n+        String.format(DIVISIBLE_BY_TEMPLATE, \"10.00000\", \"5\"),\n+        new HashMap<>()\n+      ),\n+      \"true\"\n+    );\n+  }\n+\n+  @Test\n+  public void itReturnsFalseWhenDividendIsNotMultipleOfDivisor() {\n     assertEquals(\n       jinjava.render(String.format(DIVISIBLE_BY_TEMPLATE, \"10\", \"3\"), new HashMap<>()),\n       \"false\"\n", "next_change": null}]}}, {"oid": "1405adc62f47e61300c3bb15698e3fe4db35ac33", "url": "https://github.com/HubSpot/jinjava/commit/1405adc62f47e61300c3bb15698e3fe4db35ac33", "message": "PR changes - more tests", "committedDate": "2020-08-12T17:24:12Z", "type": "commit"}, {"oid": "7927a6b4f722f9c5797c0f660fa97641f21f651e", "url": "https://github.com/HubSpot/jinjava/commit/7927a6b4f722f9c5797c0f660fa97641f21f651e", "message": "Remove two debugging lines of code with problematic content", "committedDate": "2020-08-12T18:04:13Z", "type": "commit"}]}