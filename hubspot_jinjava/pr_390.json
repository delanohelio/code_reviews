{"pr_number": 390, "pr_title": "adds PyList support to ForTag", "pr_author": "gabru-md", "pr_createdAt": "2020-01-21T18:51:38Z", "pr_url": "https://github.com/HubSpot/jinjava/pull/390", "merge_commit": "4661af3f34e4cffc1f85d09829f089b807c172ab", "timeline": [{"oid": "c166c881c601bd4ebb2357ca57cae9031f6d3147", "url": "https://github.com/HubSpot/jinjava/commit/c166c881c601bd4ebb2357ca57cae9031f6d3147", "message": "adds PyList support to ForTag", "committedDate": "2020-01-21T18:30:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3OTc3NA==", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r369279774", "body": "any reason for running this through the escape filter (e) here? ", "bodyText": "any reason for running this through the escape filter (e) here?", "bodyHTML": "<p dir=\"auto\">any reason for running this through the escape filter (e) here?</p>", "author": "boulter", "createdAt": "2020-01-21T22:33:16Z", "path": "src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java", "diffHunk": "@@ -205,6 +205,27 @@ public void testForLoopWithDates() {\n     assertEquals(new PyishDate(testDate).toString(), rendered);\n   }\n \n+  @Test\n+  public void testTuplesWithPyList() {\n+\t  String template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n+\t  \t\t\"<li><a href=\\\"{{href|e}}\\\">{{caption|e}}</a></li>\\n\" + ", "originalCommit": "c166c881c601bd4ebb2357ca57cae9031f6d3147", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3MDE3OA==", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r369370178", "bodyText": "this was mentioned in issue #321, therefore, I used the exact same thing to test the functionality out. there is no specific reason for choosing this template. \ud83d\ude05", "author": "gabru-md", "createdAt": "2020-01-22T04:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3OTc3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMxNzIxMA==", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r371317210", "bodyText": "Ok, can you remove anything that's not relevant to the test then? We don't want to be testing the escape filter here.", "author": "boulter", "createdAt": "2020-01-27T15:45:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3OTc3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM1MjMwNQ==", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r371352305", "bodyText": "done!", "author": "gabru-md", "createdAt": "2020-01-27T16:41:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3OTc3NA=="}], "type": "inlineReview", "revised_code": {"commit": "9f23d1086a70c0fcf83f1063c4634e50825343dd", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex 7ffa97d3..e38ab5ef 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -207,23 +209,55 @@ public class ForTagTest {\n \n   @Test\n   public void testTuplesWithPyList() {\n-\t  String template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n+\tString template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n \t  \t\t\"<li><a href=\\\"{{href|e}}\\\">{{caption|e}}</a></li>\\n\" + \n \t  \t\t\"{% endfor %}\";\n-\t  String expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n+\tString expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n \t  \t\t\"<li><a href=\\\"downloads.html\\\">Downloads</a></li>\\n\" +\n \t  \t\t\"<li><a href=\\\"products.html\\\">Products</a></li>\\n\";\n \t  \n-\t  String rendered = jinjava.render(template, context);\n-\t  assertEquals(rendered, expected);\n-\t  \n-\t  template = \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\"\n-\t  \t\t+ \"<p>{{a}} {{b}} {{c}}</p>\\n\"\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testTuplesWithThreeValues() {\n+\tString template = \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\"\n+\t\t  \t\t+ \"<p>{{a}} {{b}} {{c}}</p>\\n\"\n+\t\t  \t\t+ \"{% endfor %}\";\n+    String expected = \"<p>1 2 3</p>\\n\"\n+  \t\t+ \"<p>4 5 6</p>\\n\";\n+    String rendered = jinjava.render(template, context);\n+    assertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testWithSingleTuple() {\n+\tString template = \"{% for a, b, c, d in [(43, 21, 33, 54)] %}\"\n+\t  \t\t+ \"<h1>{{a}} - {{b}}, {{c}} - {{d}}</h1>\"\n+\t  \t\t+ \"{% endfor %}\";\n+\tString expected = \"<h1>43 - 21, 33 - 54</h1>\";\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testTuplesWithNonStringValues() {\n+\tString template = \"{% for firstVal, secondVal in [(32, 21)] %}\"\n+\t\t\t+ \"{{firstVal + secondVal}}\"\n+\t\t\t+ \"{% endfor %}\";\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, \"53\");\n+  }\n+  \n+  @Test\n+  public void testRenderingFailsForLessValues() {\n+\t  String template = \"{% for a,b,c in [(1,2)] %}\"\n+\t  \t\t+ \"{{a}} {{b}} {{c}}\"\n \t  \t\t+ \"{% endfor %}\";\n-\t  expected = \"<p>1 2 3</p>\\n\"\n-\t  \t\t+ \"<p>4 5 6</p>\\n\";\n-\t  rendered = jinjava.render(template, context);\n-\t  assertEquals(rendered, expected);\n+\t  assertThatThrownBy(() -> jinjava.render(template, context))\n+\t  \t\t.isInstanceOf(InterpretException.class)\n+\t  \t\t.hasMessageContaining(\"Error rendering tag\");\n   }\n   \n   private Node fixture(String name) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "4661af3f34e4cffc1f85d09829f089b807c172ab", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex 7ffa97d3..7a92fb1c 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -207,23 +209,55 @@ public class ForTagTest {\n \n   @Test\n   public void testTuplesWithPyList() {\n-\t  String template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n-\t  \t\t\"<li><a href=\\\"{{href|e}}\\\">{{caption|e}}</a></li>\\n\" + \n+\tString template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n+\t  \t\t\"<li><a href=\\\"{{href}}\\\">{{caption}}</a></li>\\n\" + \n \t  \t\t\"{% endfor %}\";\n-\t  String expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n+\tString expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n \t  \t\t\"<li><a href=\\\"downloads.html\\\">Downloads</a></li>\\n\" +\n \t  \t\t\"<li><a href=\\\"products.html\\\">Products</a></li>\\n\";\n \t  \n-\t  String rendered = jinjava.render(template, context);\n-\t  assertEquals(rendered, expected);\n-\t  \n-\t  template = \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\"\n-\t  \t\t+ \"<p>{{a}} {{b}} {{c}}</p>\\n\"\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testTuplesWithThreeValues() {\n+\tString template = \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\"\n+\t\t  \t\t+ \"<p>{{a}} {{b}} {{c}}</p>\\n\"\n+\t\t  \t\t+ \"{% endfor %}\";\n+    String expected = \"<p>1 2 3</p>\\n\"\n+  \t\t+ \"<p>4 5 6</p>\\n\";\n+    String rendered = jinjava.render(template, context);\n+    assertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testWithSingleTuple() {\n+\tString template = \"{% for a, b, c, d in [(43, 21, 33, 54)] %}\"\n+\t  \t\t+ \"<h1>{{a}} - {{b}}, {{c}} - {{d}}</h1>\"\n+\t  \t\t+ \"{% endfor %}\";\n+\tString expected = \"<h1>43 - 21, 33 - 54</h1>\";\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testTuplesWithNonStringValues() {\n+\tString template = \"{% for firstVal, secondVal in [(32, 21)] %}\"\n+\t\t\t+ \"{{firstVal + secondVal}}\"\n+\t\t\t+ \"{% endfor %}\";\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, \"53\");\n+  }\n+  \n+  @Test\n+  public void testRenderingFailsForLessValues() {\n+\t  String template = \"{% for a,b,c in [(1,2)] %}\"\n+\t  \t\t+ \"{{a}} {{b}} {{c}}\"\n \t  \t\t+ \"{% endfor %}\";\n-\t  expected = \"<p>1 2 3</p>\\n\"\n-\t  \t\t+ \"<p>4 5 6</p>\\n\";\n-\t  rendered = jinjava.render(template, context);\n-\t  assertEquals(rendered, expected);\n+\t  assertThatThrownBy(() -> jinjava.render(template, context))\n+\t  \t\t.isInstanceOf(InterpretException.class)\n+\t  \t\t.hasMessageContaining(\"Error rendering tag\");\n   }\n   \n   private Node fixture(String name) {\n", "next_change": {"commit": "14aaf67251dbf41eab5bdffb96db59f46ff3c9f3", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex 7a92fb1c..ae0ccab3 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -204,62 +203,61 @@ public class ForTagTest {\n     String template = \"\"\n         + \"{% for i in the_list %}{{i}}{% endfor %}\";\n     String rendered = jinjava.render(template, context);\n+    System.out.println(rendered);\n     assertEquals(new PyishDate(testDate).toString(), rendered);\n   }\n \n   @Test\n-  public void testTuplesWithPyList() {\n-\tString template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n-\t  \t\t\"<li><a href=\\\"{{href}}\\\">{{caption}}</a></li>\\n\" + \n-\t  \t\t\"{% endfor %}\";\n-\tString expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n-\t  \t\t\"<li><a href=\\\"downloads.html\\\">Downloads</a></li>\\n\" +\n-\t  \t\t\"<li><a href=\\\"products.html\\\">Products</a></li>\\n\";\n-\t  \n-\tString rendered = jinjava.render(template, context);\n-\tassertEquals(rendered, expected);\n-  }\n-  \n-  @Test\n-  public void testTuplesWithThreeValues() {\n-\tString template = \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\"\n-\t\t  \t\t+ \"<p>{{a}} {{b}} {{c}}</p>\\n\"\n-\t\t  \t\t+ \"{% endfor %}\";\n-    String expected = \"<p>1 2 3</p>\\n\"\n-  \t\t+ \"<p>4 5 6</p>\\n\";\n+  public void testForLoopWithBooleanFromNamespaceVariable() {\n+    // given\n+    jinjava = new Jinjava();\n+    interpreter = jinjava.newInterpreter();\n+    context = interpreter.getContext();\n+    String template = \"{% set ns = namespace(found=false) %}\" +\n+        \"{% for item in items %}\" +\n+          \"{% if item=='B' %}\" +\n+            \"{% set ns.found=true %}\" +\n+          \"{% endif %}\" +\n+        \"{% endfor %}\" +\n+        \"Found item having something: {{ ns.found }}\";\n+\n+    context.put(\"items\", Lists.newArrayList(\"A\", \"B\"));\n+\n+    // when\n     String rendered = jinjava.render(template, context);\n-    assertEquals(rendered, expected);\n-  }\n-  \n-  @Test\n-  public void testWithSingleTuple() {\n-\tString template = \"{% for a, b, c, d in [(43, 21, 33, 54)] %}\"\n-\t  \t\t+ \"<h1>{{a}} - {{b}}, {{c}} - {{d}}</h1>\"\n-\t  \t\t+ \"{% endfor %}\";\n-\tString expected = \"<h1>43 - 21, 33 - 54</h1>\";\n-\tString rendered = jinjava.render(template, context);\n-\tassertEquals(rendered, expected);\n-  }\n-  \n-  @Test\n-  public void testTuplesWithNonStringValues() {\n-\tString template = \"{% for firstVal, secondVal in [(32, 21)] %}\"\n-\t\t\t+ \"{{firstVal + secondVal}}\"\n-\t\t\t+ \"{% endfor %}\";\n-\tString rendered = jinjava.render(template, context);\n-\tassertEquals(rendered, \"53\");\n+\n+    // debug\n+    System.out.println(rendered);\n+\n+    // then\n+    assertThat(rendered).isEqualTo(\"Found item having something: true\");\n   }\n-  \n+\n   @Test\n-  public void testRenderingFailsForLessValues() {\n-\t  String template = \"{% for a,b,c in [(1,2)] %}\"\n-\t  \t\t+ \"{{a}} {{b}} {{c}}\"\n-\t  \t\t+ \"{% endfor %}\";\n-\t  assertThatThrownBy(() -> jinjava.render(template, context))\n-\t  \t\t.isInstanceOf(InterpretException.class)\n-\t  \t\t.hasMessageContaining(\"Error rendering tag\");\n+  public void forLoopShouldCountUsingNamespaceVariable() {\n+    // given\n+    jinjava = new Jinjava();\n+    interpreter = jinjava.newInterpreter();\n+    context = interpreter.getContext();\n+    String template = \"{% set ns = namespace(found=2) %}\" +\n+        \"{% for item in items %}\" +\n+        \"{% set ns.found= ns.found + 1 %}\" +\n+        \"{% endfor %}\" +\n+        \"Found item having something: {{ ns.found }}\";\n+\n+    context.put(\"items\", Lists.newArrayList(\"A\", \"B\"));\n+\n+    // when\n+    String rendered = jinjava.render(template, context);\n+\n+    // debug\n+    System.out.println(rendered);\n+\n+    // then\n+    assertThat(rendered).isEqualTo(\"Found item having something: 4\");\n   }\n-  \n+\n+\n   private Node fixture(String name) {\n     try {\n       return new TreeParser(interpreter, Resources.toString(\n", "next_change": {"commit": "5cb246370d8f2bdb304fdcfa22cfa57dfab2c14f", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex ae0ccab3..efec7bcd 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -200,72 +199,80 @@ public class ForTagTest {\n     Map<String, Object> context = Maps.newHashMap();\n     Date testDate = new Date();\n     context.put(\"the_list\", Lists.newArrayList(testDate));\n-    String template = \"\"\n-        + \"{% for i in the_list %}{{i}}{% endfor %}\";\n+    String template = \"\" + \"{% for i in the_list %}{{i}}{% endfor %}\";\n     String rendered = jinjava.render(template, context);\n-    System.out.println(rendered);\n     assertEquals(new PyishDate(testDate).toString(), rendered);\n   }\n \n   @Test\n-  public void testForLoopWithBooleanFromNamespaceVariable() {\n-    // given\n-    jinjava = new Jinjava();\n-    interpreter = jinjava.newInterpreter();\n-    context = interpreter.getContext();\n-    String template = \"{% set ns = namespace(found=false) %}\" +\n-        \"{% for item in items %}\" +\n-          \"{% if item=='B' %}\" +\n-            \"{% set ns.found=true %}\" +\n-          \"{% endif %}\" +\n-        \"{% endfor %}\" +\n-        \"Found item having something: {{ ns.found }}\";\n-\n-    context.put(\"items\", Lists.newArrayList(\"A\", \"B\"));\n+  public void testTuplesWithPyList() {\n+    String template =\n+      \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" +\n+      \"<li><a href=\\\"{{href}}\\\">{{caption}}</a></li>\\n\" +\n+      \"{% endfor %}\";\n+    String expected =\n+      \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n+      \"<li><a href=\\\"downloads.html\\\">Downloads</a></li>\\n\" +\n+      \"<li><a href=\\\"products.html\\\">Products</a></li>\\n\";\n \n-    // when\n     String rendered = jinjava.render(template, context);\n-\n-    // debug\n-    System.out.println(rendered);\n-\n-    // then\n-    assertThat(rendered).isEqualTo(\"Found item having something: true\");\n+    assertEquals(rendered, expected);\n   }\n \n   @Test\n-  public void forLoopShouldCountUsingNamespaceVariable() {\n-    // given\n-    jinjava = new Jinjava();\n-    interpreter = jinjava.newInterpreter();\n-    context = interpreter.getContext();\n-    String template = \"{% set ns = namespace(found=2) %}\" +\n-        \"{% for item in items %}\" +\n-        \"{% set ns.found= ns.found + 1 %}\" +\n-        \"{% endfor %}\" +\n-        \"Found item having something: {{ ns.found }}\";\n-\n-    context.put(\"items\", Lists.newArrayList(\"A\", \"B\"));\n-\n-    // when\n+  public void testTuplesWithThreeValues() {\n+    String template =\n+      \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\" +\n+      \"<p>{{a}} {{b}} {{c}}</p>\\n\" +\n+      \"{% endfor %}\";\n+    String expected = \"<p>1 2 3</p>\\n\" + \"<p>4 5 6</p>\\n\";\n     String rendered = jinjava.render(template, context);\n+    assertEquals(rendered, expected);\n+  }\n \n-    // debug\n-    System.out.println(rendered);\n+  @Test\n+  public void testWithSingleTuple() {\n+    String template =\n+      \"{% for a, b, c, d in [(43, 21, 33, 54)] %}\" +\n+      \"<h1>{{a}} - {{b}}, {{c}} - {{d}}</h1>\" +\n+      \"{% endfor %}\";\n+    String expected = \"<h1>43 - 21, 33 - 54</h1>\";\n+    String rendered = jinjava.render(template, context);\n+    assertEquals(rendered, expected);\n+  }\n \n-    // then\n-    assertThat(rendered).isEqualTo(\"Found item having something: 4\");\n+  @Test\n+  public void testTuplesWithNonStringValues() {\n+    String template =\n+      \"{% for firstVal, secondVal in [(32, 21)] %}\" +\n+      \"{{firstVal + secondVal}}\" +\n+      \"{% endfor %}\";\n+    String rendered = jinjava.render(template, context);\n+    assertEquals(rendered, \"53\");\n   }\n \n+  @Test\n+  public void testRenderingFailsForLessValues() {\n+    String template = \"{% for a,b,c in [(1,2)] %}\" + \"{{a}} {{b}} {{c}}\" + \"{% endfor %}\";\n+    assertThatThrownBy(() -> jinjava.render(template, context))\n+      .isInstanceOf(InterpretException.class)\n+      .hasMessageContaining(\"Error rendering tag\");\n+  }\n \n   private Node fixture(String name) {\n     try {\n-      return new TreeParser(interpreter, Resources.toString(\n-          Resources.getResource(String.format(\"tags/fortag/%s.jinja\", name)), StandardCharsets.UTF_8))\n-              .buildTree().getChildren().getFirst();\n+      return new TreeParser(\n+        interpreter,\n+        Resources.toString(\n+          Resources.getResource(String.format(\"tags/fortag/%s.jinja\", name)),\n+          StandardCharsets.UTF_8\n+        )\n+      )\n+        .buildTree()\n+        .getChildren()\n+        .getFirst();\n     } catch (IOException e) {\n       throw new RuntimeException(e);\n     }\n   }\n-\n }\n", "next_change": {"commit": "4ae010ad0bb17999b8d450d39abff957d5694835", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex efec7bcd..84e3b3fd 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -275,4 +334,19 @@ public class ForTagTest {\n       throw new RuntimeException(e);\n     }\n   }\n+\n+  @Test\n+  public void itCatchesConcurrentModificationInLoop() {\n+    Map<String, Object> context = Maps.newHashMap();\n+    String template =\n+      \"{% set test = [1, 2, 3] %}{% for i in test %}{% if i == 1 %}{{ test.append(4) }}{% endif %}{% endfor %}{{ test }}\";\n+\n+    RenderResult rendered = jinjava.renderForResult(template, context);\n+    assertEquals(\"[1, 2, 3, 4]\", rendered.getOutput());\n+    assertThat(rendered.getErrors()).hasSize(1);\n+    assertThat(rendered.getErrors().get(0).getSeverity())\n+      .isEqualTo(TemplateError.ErrorType.FATAL);\n+    assertThat(rendered.getErrors().get(0).getMessage())\n+      .contains(\"Cannot modify collection in 'for' loop\");\n+  }\n }\n", "next_change": {"commit": "56375d23e1761216ffe78ff851fe6bff52c9dfac", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex 84e3b3fd..aed12269 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -339,10 +339,10 @@ public class ForTagTest extends BaseInterpretingTest {\n   public void itCatchesConcurrentModificationInLoop() {\n     Map<String, Object> context = Maps.newHashMap();\n     String template =\n-      \"{% set test = [1, 2, 3] %}{% for i in test %}{% if i == 1 %}{{ test.append(4) }}{% endif %}{% endfor %}{{ test }}\";\n+      \"{% set test = [1, 2, 3] %}{% for i in test %}{{ 'hello' }}{% if i == 1 %}{{ test.append(4) }}{% endif %}{% endfor %}{{ test }}\";\n \n     RenderResult rendered = jinjava.renderForResult(template, context);\n-    assertEquals(\"[1, 2, 3, 4]\", rendered.getOutput());\n+    assertEquals(\"hellotrue[1, 2, 3, 4]\", rendered.getOutput());\n     assertThat(rendered.getErrors()).hasSize(1);\n     assertThat(rendered.getErrors().get(0).getSeverity())\n       .isEqualTo(TemplateError.ErrorType.FATAL);\n", "next_change": {"commit": "65e1b72e6ceae96198732f8ee64e8c25e50a0287", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex aed12269..f42c4587 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -349,4 +350,27 @@ public class ForTagTest extends BaseInterpretingTest {\n     assertThat(rendered.getErrors().get(0).getMessage())\n       .contains(\"Cannot modify collection in 'for' loop\");\n   }\n+\n+  @Test\n+  public void itAllowsCheckingOfWithinForLoop() throws NoSuchMethodException {\n+    Map<String, Object> context = Maps.newHashMap();\n+    String template =\n+      \"{% set test = [1, 2] %}{{ in_for_loop() }} {% for i in test %}{{ in_for_loop() }} {% endfor %}{{ in_for_loop() }}\";\n+\n+    jinjava.registerFunction(\n+      new ELFunctionDefinition(\n+        \"\",\n+        \"in_for_loop\",\n+        this.getClass().getDeclaredMethod(\"inForLoop\")\n+      )\n+    );\n+\n+    RenderResult rendered = jinjava.renderForResult(template, context);\n+    assertThat(rendered.getOutput()).isEqualTo(\"false true true false\");\n+  }\n+\n+  public static boolean inForLoop() {\n+    JinjavaInterpreter interpreter = JinjavaInterpreter.getCurrent();\n+    return interpreter.getContext().isInForLoop();\n+  }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "4661af3f34e4cffc1f85d09829f089b807c172ab", "message": "Merge commit", "committedDate": null}, {"oid": "14aaf67251dbf41eab5bdffb96db59f46ff3c9f3", "committedDate": "2019-03-12 14:03:05 +0000", "message": "Add namespace functionality"}, {"oid": "5cb246370d8f2bdb304fdcfa22cfa57dfab2c14f", "committedDate": "2020-02-28 12:38:37 -0500", "message": "Enable prettier-java for formatting"}, {"oid": "28e159ec59ead31aaf80bdd8939c22ef19228f53", "committedDate": "2020-10-28 11:17:14 -0400", "message": "Extend BaseTagTest to reduce duplication"}, {"oid": "6717eb80406751e3afbb862fc020dec282524fe3", "committedDate": "2020-10-28 12:40:47 -0400", "message": "Add abstract tests for Jinjava and Interpreter usages"}, {"oid": "9d656d4d9cc55de330fba1cff76a6b5830c2541f", "committedDate": "2021-04-20 12:41:32 -0400", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into namespaces"}, {"oid": "36c7c34d511f8c0c1576d7497b63b558045143d2", "committedDate": "2021-04-20 16:21:58 -0400", "message": "Allow namespace to be initialized from a dictionary"}, {"oid": "362c19f21158d3d7d4b502d903e29f1fa44adc58", "committedDate": "2021-06-30 12:57:41 -0400", "message": "Better handle spaces within for loop expressions"}, {"oid": "11a7b513830d9f0d7d516eb394845631b25acef4", "committedDate": "2021-06-30 13:17:42 -0400", "message": "Add test for looping through maps with spaces"}, {"oid": "d8860b2e95f77b6de249279d4e12ec83b9b184b6", "committedDate": "2021-07-14 13:45:47 -0400", "message": "Use regex to check for spacing around \" in \""}, {"oid": "207285eae8cb1b210178f8b70a499540d782b3f8", "committedDate": "2021-07-14 14:12:54 -0400", "message": "Fix formatting and serialization and tests"}, {"oid": "3f771ee2cc12f86acafcd1ee83b9df3e68c8f8f1", "committedDate": "2021-07-14 14:15:20 -0400", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into for-in-whitespace"}, {"oid": "4ae010ad0bb17999b8d450d39abff957d5694835", "committedDate": "2021-09-23 14:07:01 -0400", "message": "Catch concurrent modification in for loop"}, {"oid": "56375d23e1761216ffe78ff851fe6bff52c9dfac", "committedDate": "2021-09-23 14:13:26 -0400", "message": "Move to lower level"}, {"oid": "65e1b72e6ceae96198732f8ee64e8c25e50a0287", "committedDate": "2023-03-02 15:07:01 -0500", "message": "Create context method for checking if in for loop"}, {"oid": "75cedd9569dfe1774595cb11f3fef27b833cff24", "committedDate": "2023-03-02 15:10:59 -0500", "message": "setup and teardown"}, {"oid": "7b0bf13289ec48fe81899988085bb4ff232b3da5", "committedDate": "2023-03-02 15:13:04 -0500", "message": "move some stuff around again"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3OTk4OQ==", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r369279989", "body": "this could be broken out into a separate test", "bodyText": "this could be broken out into a separate test", "bodyHTML": "<p dir=\"auto\">this could be broken out into a separate test</p>", "author": "boulter", "createdAt": "2020-01-21T22:33:50Z", "path": "src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java", "diffHunk": "@@ -205,6 +205,27 @@ public void testForLoopWithDates() {\n     assertEquals(new PyishDate(testDate).toString(), rendered);\n   }\n \n+  @Test\n+  public void testTuplesWithPyList() {\n+\t  String template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n+\t  \t\t\"<li><a href=\\\"{{href|e}}\\\">{{caption|e}}</a></li>\\n\" + \n+\t  \t\t\"{% endfor %}\";\n+\t  String expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n+\t  \t\t\"<li><a href=\\\"downloads.html\\\">Downloads</a></li>\\n\" +\n+\t  \t\t\"<li><a href=\\\"products.html\\\">Products</a></li>\\n\";\n+\t  \n+\t  String rendered = jinjava.render(template, context);", "originalCommit": "c166c881c601bd4ebb2357ca57cae9031f6d3147", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3ODQ2OA==", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r369378468", "bodyText": "done \ud83d\udc4d", "author": "gabru-md", "createdAt": "2020-01-22T05:42:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3OTk4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9f23d1086a70c0fcf83f1063c4634e50825343dd", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex 7ffa97d3..e38ab5ef 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -207,23 +209,55 @@ public class ForTagTest {\n \n   @Test\n   public void testTuplesWithPyList() {\n-\t  String template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n+\tString template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n \t  \t\t\"<li><a href=\\\"{{href|e}}\\\">{{caption|e}}</a></li>\\n\" + \n \t  \t\t\"{% endfor %}\";\n-\t  String expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n+\tString expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n \t  \t\t\"<li><a href=\\\"downloads.html\\\">Downloads</a></li>\\n\" +\n \t  \t\t\"<li><a href=\\\"products.html\\\">Products</a></li>\\n\";\n \t  \n-\t  String rendered = jinjava.render(template, context);\n-\t  assertEquals(rendered, expected);\n-\t  \n-\t  template = \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\"\n-\t  \t\t+ \"<p>{{a}} {{b}} {{c}}</p>\\n\"\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testTuplesWithThreeValues() {\n+\tString template = \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\"\n+\t\t  \t\t+ \"<p>{{a}} {{b}} {{c}}</p>\\n\"\n+\t\t  \t\t+ \"{% endfor %}\";\n+    String expected = \"<p>1 2 3</p>\\n\"\n+  \t\t+ \"<p>4 5 6</p>\\n\";\n+    String rendered = jinjava.render(template, context);\n+    assertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testWithSingleTuple() {\n+\tString template = \"{% for a, b, c, d in [(43, 21, 33, 54)] %}\"\n+\t  \t\t+ \"<h1>{{a}} - {{b}}, {{c}} - {{d}}</h1>\"\n+\t  \t\t+ \"{% endfor %}\";\n+\tString expected = \"<h1>43 - 21, 33 - 54</h1>\";\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testTuplesWithNonStringValues() {\n+\tString template = \"{% for firstVal, secondVal in [(32, 21)] %}\"\n+\t\t\t+ \"{{firstVal + secondVal}}\"\n+\t\t\t+ \"{% endfor %}\";\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, \"53\");\n+  }\n+  \n+  @Test\n+  public void testRenderingFailsForLessValues() {\n+\t  String template = \"{% for a,b,c in [(1,2)] %}\"\n+\t  \t\t+ \"{{a}} {{b}} {{c}}\"\n \t  \t\t+ \"{% endfor %}\";\n-\t  expected = \"<p>1 2 3</p>\\n\"\n-\t  \t\t+ \"<p>4 5 6</p>\\n\";\n-\t  rendered = jinjava.render(template, context);\n-\t  assertEquals(rendered, expected);\n+\t  assertThatThrownBy(() -> jinjava.render(template, context))\n+\t  \t\t.isInstanceOf(InterpretException.class)\n+\t  \t\t.hasMessageContaining(\"Error rendering tag\");\n   }\n   \n   private Node fixture(String name) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "4661af3f34e4cffc1f85d09829f089b807c172ab", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex 7ffa97d3..7a92fb1c 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -207,23 +209,55 @@ public class ForTagTest {\n \n   @Test\n   public void testTuplesWithPyList() {\n-\t  String template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n-\t  \t\t\"<li><a href=\\\"{{href|e}}\\\">{{caption|e}}</a></li>\\n\" + \n+\tString template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n+\t  \t\t\"<li><a href=\\\"{{href}}\\\">{{caption}}</a></li>\\n\" + \n \t  \t\t\"{% endfor %}\";\n-\t  String expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n+\tString expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n \t  \t\t\"<li><a href=\\\"downloads.html\\\">Downloads</a></li>\\n\" +\n \t  \t\t\"<li><a href=\\\"products.html\\\">Products</a></li>\\n\";\n \t  \n-\t  String rendered = jinjava.render(template, context);\n-\t  assertEquals(rendered, expected);\n-\t  \n-\t  template = \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\"\n-\t  \t\t+ \"<p>{{a}} {{b}} {{c}}</p>\\n\"\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testTuplesWithThreeValues() {\n+\tString template = \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\"\n+\t\t  \t\t+ \"<p>{{a}} {{b}} {{c}}</p>\\n\"\n+\t\t  \t\t+ \"{% endfor %}\";\n+    String expected = \"<p>1 2 3</p>\\n\"\n+  \t\t+ \"<p>4 5 6</p>\\n\";\n+    String rendered = jinjava.render(template, context);\n+    assertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testWithSingleTuple() {\n+\tString template = \"{% for a, b, c, d in [(43, 21, 33, 54)] %}\"\n+\t  \t\t+ \"<h1>{{a}} - {{b}}, {{c}} - {{d}}</h1>\"\n+\t  \t\t+ \"{% endfor %}\";\n+\tString expected = \"<h1>43 - 21, 33 - 54</h1>\";\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testTuplesWithNonStringValues() {\n+\tString template = \"{% for firstVal, secondVal in [(32, 21)] %}\"\n+\t\t\t+ \"{{firstVal + secondVal}}\"\n+\t\t\t+ \"{% endfor %}\";\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, \"53\");\n+  }\n+  \n+  @Test\n+  public void testRenderingFailsForLessValues() {\n+\t  String template = \"{% for a,b,c in [(1,2)] %}\"\n+\t  \t\t+ \"{{a}} {{b}} {{c}}\"\n \t  \t\t+ \"{% endfor %}\";\n-\t  expected = \"<p>1 2 3</p>\\n\"\n-\t  \t\t+ \"<p>4 5 6</p>\\n\";\n-\t  rendered = jinjava.render(template, context);\n-\t  assertEquals(rendered, expected);\n+\t  assertThatThrownBy(() -> jinjava.render(template, context))\n+\t  \t\t.isInstanceOf(InterpretException.class)\n+\t  \t\t.hasMessageContaining(\"Error rendering tag\");\n   }\n   \n   private Node fixture(String name) {\n", "next_change": {"commit": "14aaf67251dbf41eab5bdffb96db59f46ff3c9f3", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex 7a92fb1c..ae0ccab3 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -204,62 +203,61 @@ public class ForTagTest {\n     String template = \"\"\n         + \"{% for i in the_list %}{{i}}{% endfor %}\";\n     String rendered = jinjava.render(template, context);\n+    System.out.println(rendered);\n     assertEquals(new PyishDate(testDate).toString(), rendered);\n   }\n \n   @Test\n-  public void testTuplesWithPyList() {\n-\tString template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n-\t  \t\t\"<li><a href=\\\"{{href}}\\\">{{caption}}</a></li>\\n\" + \n-\t  \t\t\"{% endfor %}\";\n-\tString expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n-\t  \t\t\"<li><a href=\\\"downloads.html\\\">Downloads</a></li>\\n\" +\n-\t  \t\t\"<li><a href=\\\"products.html\\\">Products</a></li>\\n\";\n-\t  \n-\tString rendered = jinjava.render(template, context);\n-\tassertEquals(rendered, expected);\n-  }\n-  \n-  @Test\n-  public void testTuplesWithThreeValues() {\n-\tString template = \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\"\n-\t\t  \t\t+ \"<p>{{a}} {{b}} {{c}}</p>\\n\"\n-\t\t  \t\t+ \"{% endfor %}\";\n-    String expected = \"<p>1 2 3</p>\\n\"\n-  \t\t+ \"<p>4 5 6</p>\\n\";\n+  public void testForLoopWithBooleanFromNamespaceVariable() {\n+    // given\n+    jinjava = new Jinjava();\n+    interpreter = jinjava.newInterpreter();\n+    context = interpreter.getContext();\n+    String template = \"{% set ns = namespace(found=false) %}\" +\n+        \"{% for item in items %}\" +\n+          \"{% if item=='B' %}\" +\n+            \"{% set ns.found=true %}\" +\n+          \"{% endif %}\" +\n+        \"{% endfor %}\" +\n+        \"Found item having something: {{ ns.found }}\";\n+\n+    context.put(\"items\", Lists.newArrayList(\"A\", \"B\"));\n+\n+    // when\n     String rendered = jinjava.render(template, context);\n-    assertEquals(rendered, expected);\n-  }\n-  \n-  @Test\n-  public void testWithSingleTuple() {\n-\tString template = \"{% for a, b, c, d in [(43, 21, 33, 54)] %}\"\n-\t  \t\t+ \"<h1>{{a}} - {{b}}, {{c}} - {{d}}</h1>\"\n-\t  \t\t+ \"{% endfor %}\";\n-\tString expected = \"<h1>43 - 21, 33 - 54</h1>\";\n-\tString rendered = jinjava.render(template, context);\n-\tassertEquals(rendered, expected);\n-  }\n-  \n-  @Test\n-  public void testTuplesWithNonStringValues() {\n-\tString template = \"{% for firstVal, secondVal in [(32, 21)] %}\"\n-\t\t\t+ \"{{firstVal + secondVal}}\"\n-\t\t\t+ \"{% endfor %}\";\n-\tString rendered = jinjava.render(template, context);\n-\tassertEquals(rendered, \"53\");\n+\n+    // debug\n+    System.out.println(rendered);\n+\n+    // then\n+    assertThat(rendered).isEqualTo(\"Found item having something: true\");\n   }\n-  \n+\n   @Test\n-  public void testRenderingFailsForLessValues() {\n-\t  String template = \"{% for a,b,c in [(1,2)] %}\"\n-\t  \t\t+ \"{{a}} {{b}} {{c}}\"\n-\t  \t\t+ \"{% endfor %}\";\n-\t  assertThatThrownBy(() -> jinjava.render(template, context))\n-\t  \t\t.isInstanceOf(InterpretException.class)\n-\t  \t\t.hasMessageContaining(\"Error rendering tag\");\n+  public void forLoopShouldCountUsingNamespaceVariable() {\n+    // given\n+    jinjava = new Jinjava();\n+    interpreter = jinjava.newInterpreter();\n+    context = interpreter.getContext();\n+    String template = \"{% set ns = namespace(found=2) %}\" +\n+        \"{% for item in items %}\" +\n+        \"{% set ns.found= ns.found + 1 %}\" +\n+        \"{% endfor %}\" +\n+        \"Found item having something: {{ ns.found }}\";\n+\n+    context.put(\"items\", Lists.newArrayList(\"A\", \"B\"));\n+\n+    // when\n+    String rendered = jinjava.render(template, context);\n+\n+    // debug\n+    System.out.println(rendered);\n+\n+    // then\n+    assertThat(rendered).isEqualTo(\"Found item having something: 4\");\n   }\n-  \n+\n+\n   private Node fixture(String name) {\n     try {\n       return new TreeParser(interpreter, Resources.toString(\n", "next_change": {"commit": "5cb246370d8f2bdb304fdcfa22cfa57dfab2c14f", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex ae0ccab3..efec7bcd 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -200,72 +199,80 @@ public class ForTagTest {\n     Map<String, Object> context = Maps.newHashMap();\n     Date testDate = new Date();\n     context.put(\"the_list\", Lists.newArrayList(testDate));\n-    String template = \"\"\n-        + \"{% for i in the_list %}{{i}}{% endfor %}\";\n+    String template = \"\" + \"{% for i in the_list %}{{i}}{% endfor %}\";\n     String rendered = jinjava.render(template, context);\n-    System.out.println(rendered);\n     assertEquals(new PyishDate(testDate).toString(), rendered);\n   }\n \n   @Test\n-  public void testForLoopWithBooleanFromNamespaceVariable() {\n-    // given\n-    jinjava = new Jinjava();\n-    interpreter = jinjava.newInterpreter();\n-    context = interpreter.getContext();\n-    String template = \"{% set ns = namespace(found=false) %}\" +\n-        \"{% for item in items %}\" +\n-          \"{% if item=='B' %}\" +\n-            \"{% set ns.found=true %}\" +\n-          \"{% endif %}\" +\n-        \"{% endfor %}\" +\n-        \"Found item having something: {{ ns.found }}\";\n-\n-    context.put(\"items\", Lists.newArrayList(\"A\", \"B\"));\n+  public void testTuplesWithPyList() {\n+    String template =\n+      \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" +\n+      \"<li><a href=\\\"{{href}}\\\">{{caption}}</a></li>\\n\" +\n+      \"{% endfor %}\";\n+    String expected =\n+      \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n+      \"<li><a href=\\\"downloads.html\\\">Downloads</a></li>\\n\" +\n+      \"<li><a href=\\\"products.html\\\">Products</a></li>\\n\";\n \n-    // when\n     String rendered = jinjava.render(template, context);\n-\n-    // debug\n-    System.out.println(rendered);\n-\n-    // then\n-    assertThat(rendered).isEqualTo(\"Found item having something: true\");\n+    assertEquals(rendered, expected);\n   }\n \n   @Test\n-  public void forLoopShouldCountUsingNamespaceVariable() {\n-    // given\n-    jinjava = new Jinjava();\n-    interpreter = jinjava.newInterpreter();\n-    context = interpreter.getContext();\n-    String template = \"{% set ns = namespace(found=2) %}\" +\n-        \"{% for item in items %}\" +\n-        \"{% set ns.found= ns.found + 1 %}\" +\n-        \"{% endfor %}\" +\n-        \"Found item having something: {{ ns.found }}\";\n-\n-    context.put(\"items\", Lists.newArrayList(\"A\", \"B\"));\n-\n-    // when\n+  public void testTuplesWithThreeValues() {\n+    String template =\n+      \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\" +\n+      \"<p>{{a}} {{b}} {{c}}</p>\\n\" +\n+      \"{% endfor %}\";\n+    String expected = \"<p>1 2 3</p>\\n\" + \"<p>4 5 6</p>\\n\";\n     String rendered = jinjava.render(template, context);\n+    assertEquals(rendered, expected);\n+  }\n \n-    // debug\n-    System.out.println(rendered);\n+  @Test\n+  public void testWithSingleTuple() {\n+    String template =\n+      \"{% for a, b, c, d in [(43, 21, 33, 54)] %}\" +\n+      \"<h1>{{a}} - {{b}}, {{c}} - {{d}}</h1>\" +\n+      \"{% endfor %}\";\n+    String expected = \"<h1>43 - 21, 33 - 54</h1>\";\n+    String rendered = jinjava.render(template, context);\n+    assertEquals(rendered, expected);\n+  }\n \n-    // then\n-    assertThat(rendered).isEqualTo(\"Found item having something: 4\");\n+  @Test\n+  public void testTuplesWithNonStringValues() {\n+    String template =\n+      \"{% for firstVal, secondVal in [(32, 21)] %}\" +\n+      \"{{firstVal + secondVal}}\" +\n+      \"{% endfor %}\";\n+    String rendered = jinjava.render(template, context);\n+    assertEquals(rendered, \"53\");\n   }\n \n+  @Test\n+  public void testRenderingFailsForLessValues() {\n+    String template = \"{% for a,b,c in [(1,2)] %}\" + \"{{a}} {{b}} {{c}}\" + \"{% endfor %}\";\n+    assertThatThrownBy(() -> jinjava.render(template, context))\n+      .isInstanceOf(InterpretException.class)\n+      .hasMessageContaining(\"Error rendering tag\");\n+  }\n \n   private Node fixture(String name) {\n     try {\n-      return new TreeParser(interpreter, Resources.toString(\n-          Resources.getResource(String.format(\"tags/fortag/%s.jinja\", name)), StandardCharsets.UTF_8))\n-              .buildTree().getChildren().getFirst();\n+      return new TreeParser(\n+        interpreter,\n+        Resources.toString(\n+          Resources.getResource(String.format(\"tags/fortag/%s.jinja\", name)),\n+          StandardCharsets.UTF_8\n+        )\n+      )\n+        .buildTree()\n+        .getChildren()\n+        .getFirst();\n     } catch (IOException e) {\n       throw new RuntimeException(e);\n     }\n   }\n-\n }\n", "next_change": {"commit": "4ae010ad0bb17999b8d450d39abff957d5694835", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex efec7bcd..84e3b3fd 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -275,4 +334,19 @@ public class ForTagTest {\n       throw new RuntimeException(e);\n     }\n   }\n+\n+  @Test\n+  public void itCatchesConcurrentModificationInLoop() {\n+    Map<String, Object> context = Maps.newHashMap();\n+    String template =\n+      \"{% set test = [1, 2, 3] %}{% for i in test %}{% if i == 1 %}{{ test.append(4) }}{% endif %}{% endfor %}{{ test }}\";\n+\n+    RenderResult rendered = jinjava.renderForResult(template, context);\n+    assertEquals(\"[1, 2, 3, 4]\", rendered.getOutput());\n+    assertThat(rendered.getErrors()).hasSize(1);\n+    assertThat(rendered.getErrors().get(0).getSeverity())\n+      .isEqualTo(TemplateError.ErrorType.FATAL);\n+    assertThat(rendered.getErrors().get(0).getMessage())\n+      .contains(\"Cannot modify collection in 'for' loop\");\n+  }\n }\n", "next_change": {"commit": "56375d23e1761216ffe78ff851fe6bff52c9dfac", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex 84e3b3fd..aed12269 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -339,10 +339,10 @@ public class ForTagTest extends BaseInterpretingTest {\n   public void itCatchesConcurrentModificationInLoop() {\n     Map<String, Object> context = Maps.newHashMap();\n     String template =\n-      \"{% set test = [1, 2, 3] %}{% for i in test %}{% if i == 1 %}{{ test.append(4) }}{% endif %}{% endfor %}{{ test }}\";\n+      \"{% set test = [1, 2, 3] %}{% for i in test %}{{ 'hello' }}{% if i == 1 %}{{ test.append(4) }}{% endif %}{% endfor %}{{ test }}\";\n \n     RenderResult rendered = jinjava.renderForResult(template, context);\n-    assertEquals(\"[1, 2, 3, 4]\", rendered.getOutput());\n+    assertEquals(\"hellotrue[1, 2, 3, 4]\", rendered.getOutput());\n     assertThat(rendered.getErrors()).hasSize(1);\n     assertThat(rendered.getErrors().get(0).getSeverity())\n       .isEqualTo(TemplateError.ErrorType.FATAL);\n", "next_change": {"commit": "65e1b72e6ceae96198732f8ee64e8c25e50a0287", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex aed12269..f42c4587 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -349,4 +350,27 @@ public class ForTagTest extends BaseInterpretingTest {\n     assertThat(rendered.getErrors().get(0).getMessage())\n       .contains(\"Cannot modify collection in 'for' loop\");\n   }\n+\n+  @Test\n+  public void itAllowsCheckingOfWithinForLoop() throws NoSuchMethodException {\n+    Map<String, Object> context = Maps.newHashMap();\n+    String template =\n+      \"{% set test = [1, 2] %}{{ in_for_loop() }} {% for i in test %}{{ in_for_loop() }} {% endfor %}{{ in_for_loop() }}\";\n+\n+    jinjava.registerFunction(\n+      new ELFunctionDefinition(\n+        \"\",\n+        \"in_for_loop\",\n+        this.getClass().getDeclaredMethod(\"inForLoop\")\n+      )\n+    );\n+\n+    RenderResult rendered = jinjava.renderForResult(template, context);\n+    assertThat(rendered.getOutput()).isEqualTo(\"false true true false\");\n+  }\n+\n+  public static boolean inForLoop() {\n+    JinjavaInterpreter interpreter = JinjavaInterpreter.getCurrent();\n+    return interpreter.getContext().isInForLoop();\n+  }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "4661af3f34e4cffc1f85d09829f089b807c172ab", "message": "Merge commit", "committedDate": null}, {"oid": "14aaf67251dbf41eab5bdffb96db59f46ff3c9f3", "committedDate": "2019-03-12 14:03:05 +0000", "message": "Add namespace functionality"}, {"oid": "5cb246370d8f2bdb304fdcfa22cfa57dfab2c14f", "committedDate": "2020-02-28 12:38:37 -0500", "message": "Enable prettier-java for formatting"}, {"oid": "28e159ec59ead31aaf80bdd8939c22ef19228f53", "committedDate": "2020-10-28 11:17:14 -0400", "message": "Extend BaseTagTest to reduce duplication"}, {"oid": "6717eb80406751e3afbb862fc020dec282524fe3", "committedDate": "2020-10-28 12:40:47 -0400", "message": "Add abstract tests for Jinjava and Interpreter usages"}, {"oid": "9d656d4d9cc55de330fba1cff76a6b5830c2541f", "committedDate": "2021-04-20 12:41:32 -0400", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into namespaces"}, {"oid": "36c7c34d511f8c0c1576d7497b63b558045143d2", "committedDate": "2021-04-20 16:21:58 -0400", "message": "Allow namespace to be initialized from a dictionary"}, {"oid": "362c19f21158d3d7d4b502d903e29f1fa44adc58", "committedDate": "2021-06-30 12:57:41 -0400", "message": "Better handle spaces within for loop expressions"}, {"oid": "11a7b513830d9f0d7d516eb394845631b25acef4", "committedDate": "2021-06-30 13:17:42 -0400", "message": "Add test for looping through maps with spaces"}, {"oid": "d8860b2e95f77b6de249279d4e12ec83b9b184b6", "committedDate": "2021-07-14 13:45:47 -0400", "message": "Use regex to check for spacing around \" in \""}, {"oid": "207285eae8cb1b210178f8b70a499540d782b3f8", "committedDate": "2021-07-14 14:12:54 -0400", "message": "Fix formatting and serialization and tests"}, {"oid": "3f771ee2cc12f86acafcd1ee83b9df3e68c8f8f1", "committedDate": "2021-07-14 14:15:20 -0400", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into for-in-whitespace"}, {"oid": "4ae010ad0bb17999b8d450d39abff957d5694835", "committedDate": "2021-09-23 14:07:01 -0400", "message": "Catch concurrent modification in for loop"}, {"oid": "56375d23e1761216ffe78ff851fe6bff52c9dfac", "committedDate": "2021-09-23 14:13:26 -0400", "message": "Move to lower level"}, {"oid": "65e1b72e6ceae96198732f8ee64e8c25e50a0287", "committedDate": "2023-03-02 15:07:01 -0500", "message": "Create context method for checking if in for loop"}, {"oid": "75cedd9569dfe1774595cb11f3fef27b833cff24", "committedDate": "2023-03-02 15:10:59 -0500", "message": "setup and teardown"}, {"oid": "7b0bf13289ec48fe81899988085bb4ff232b3da5", "committedDate": "2023-03-02 15:13:04 -0500", "message": "move some stuff around again"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4MDUxOA==", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r369280518", "body": "could you also add a test that confirms that this works for non-string values? Perhaps add 1 + 2 + 3?", "bodyText": "could you also add a test that confirms that this works for non-string values? Perhaps add 1 + 2 + 3?", "bodyHTML": "<p dir=\"auto\">could you also add a test that confirms that this works for non-string values? Perhaps add 1 + 2 + 3?</p>", "author": "boulter", "createdAt": "2020-01-21T22:35:09Z", "path": "src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java", "diffHunk": "@@ -205,6 +205,27 @@ public void testForLoopWithDates() {\n     assertEquals(new PyishDate(testDate).toString(), rendered);\n   }\n \n+  @Test\n+  public void testTuplesWithPyList() {\n+\t  String template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n+\t  \t\t\"<li><a href=\\\"{{href|e}}\\\">{{caption|e}}</a></li>\\n\" + \n+\t  \t\t\"{% endfor %}\";\n+\t  String expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n+\t  \t\t\"<li><a href=\\\"downloads.html\\\">Downloads</a></li>\\n\" +\n+\t  \t\t\"<li><a href=\\\"products.html\\\">Products</a></li>\\n\";\n+\t  \n+\t  String rendered = jinjava.render(template, context);\n+\t  assertEquals(rendered, expected);\n+\t  \n+\t  template = \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\"\n+\t  \t\t+ \"<p>{{a}} {{b}} {{c}}</p>\\n\"\n+\t  \t\t+ \"{% endfor %}\";\n+\t  expected = \"<p>1 2 3</p>\\n\"\n+\t  \t\t+ \"<p>4 5 6</p>\\n\";\n+\t  rendered = jinjava.render(template, context);\n+\t  assertEquals(rendered, expected);", "originalCommit": "c166c881c601bd4ebb2357ca57cae9031f6d3147", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3ODU5Mg==", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r369378592", "bodyText": "I've added tests for the same.\nAlso, I've modified the ForTag.java file to accommodate the changes.", "author": "gabru-md", "createdAt": "2020-01-22T05:43:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4MDUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "9f23d1086a70c0fcf83f1063c4634e50825343dd", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex 7ffa97d3..e38ab5ef 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -207,23 +209,55 @@ public class ForTagTest {\n \n   @Test\n   public void testTuplesWithPyList() {\n-\t  String template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n+\tString template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n \t  \t\t\"<li><a href=\\\"{{href|e}}\\\">{{caption|e}}</a></li>\\n\" + \n \t  \t\t\"{% endfor %}\";\n-\t  String expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n+\tString expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n \t  \t\t\"<li><a href=\\\"downloads.html\\\">Downloads</a></li>\\n\" +\n \t  \t\t\"<li><a href=\\\"products.html\\\">Products</a></li>\\n\";\n \t  \n-\t  String rendered = jinjava.render(template, context);\n-\t  assertEquals(rendered, expected);\n-\t  \n-\t  template = \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\"\n-\t  \t\t+ \"<p>{{a}} {{b}} {{c}}</p>\\n\"\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testTuplesWithThreeValues() {\n+\tString template = \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\"\n+\t\t  \t\t+ \"<p>{{a}} {{b}} {{c}}</p>\\n\"\n+\t\t  \t\t+ \"{% endfor %}\";\n+    String expected = \"<p>1 2 3</p>\\n\"\n+  \t\t+ \"<p>4 5 6</p>\\n\";\n+    String rendered = jinjava.render(template, context);\n+    assertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testWithSingleTuple() {\n+\tString template = \"{% for a, b, c, d in [(43, 21, 33, 54)] %}\"\n+\t  \t\t+ \"<h1>{{a}} - {{b}}, {{c}} - {{d}}</h1>\"\n+\t  \t\t+ \"{% endfor %}\";\n+\tString expected = \"<h1>43 - 21, 33 - 54</h1>\";\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testTuplesWithNonStringValues() {\n+\tString template = \"{% for firstVal, secondVal in [(32, 21)] %}\"\n+\t\t\t+ \"{{firstVal + secondVal}}\"\n+\t\t\t+ \"{% endfor %}\";\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, \"53\");\n+  }\n+  \n+  @Test\n+  public void testRenderingFailsForLessValues() {\n+\t  String template = \"{% for a,b,c in [(1,2)] %}\"\n+\t  \t\t+ \"{{a}} {{b}} {{c}}\"\n \t  \t\t+ \"{% endfor %}\";\n-\t  expected = \"<p>1 2 3</p>\\n\"\n-\t  \t\t+ \"<p>4 5 6</p>\\n\";\n-\t  rendered = jinjava.render(template, context);\n-\t  assertEquals(rendered, expected);\n+\t  assertThatThrownBy(() -> jinjava.render(template, context))\n+\t  \t\t.isInstanceOf(InterpretException.class)\n+\t  \t\t.hasMessageContaining(\"Error rendering tag\");\n   }\n   \n   private Node fixture(String name) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "4661af3f34e4cffc1f85d09829f089b807c172ab", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex 7ffa97d3..7a92fb1c 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -207,23 +209,55 @@ public class ForTagTest {\n \n   @Test\n   public void testTuplesWithPyList() {\n-\t  String template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n-\t  \t\t\"<li><a href=\\\"{{href|e}}\\\">{{caption|e}}</a></li>\\n\" + \n+\tString template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n+\t  \t\t\"<li><a href=\\\"{{href}}\\\">{{caption}}</a></li>\\n\" + \n \t  \t\t\"{% endfor %}\";\n-\t  String expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n+\tString expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n \t  \t\t\"<li><a href=\\\"downloads.html\\\">Downloads</a></li>\\n\" +\n \t  \t\t\"<li><a href=\\\"products.html\\\">Products</a></li>\\n\";\n \t  \n-\t  String rendered = jinjava.render(template, context);\n-\t  assertEquals(rendered, expected);\n-\t  \n-\t  template = \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\"\n-\t  \t\t+ \"<p>{{a}} {{b}} {{c}}</p>\\n\"\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testTuplesWithThreeValues() {\n+\tString template = \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\"\n+\t\t  \t\t+ \"<p>{{a}} {{b}} {{c}}</p>\\n\"\n+\t\t  \t\t+ \"{% endfor %}\";\n+    String expected = \"<p>1 2 3</p>\\n\"\n+  \t\t+ \"<p>4 5 6</p>\\n\";\n+    String rendered = jinjava.render(template, context);\n+    assertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testWithSingleTuple() {\n+\tString template = \"{% for a, b, c, d in [(43, 21, 33, 54)] %}\"\n+\t  \t\t+ \"<h1>{{a}} - {{b}}, {{c}} - {{d}}</h1>\"\n+\t  \t\t+ \"{% endfor %}\";\n+\tString expected = \"<h1>43 - 21, 33 - 54</h1>\";\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testTuplesWithNonStringValues() {\n+\tString template = \"{% for firstVal, secondVal in [(32, 21)] %}\"\n+\t\t\t+ \"{{firstVal + secondVal}}\"\n+\t\t\t+ \"{% endfor %}\";\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, \"53\");\n+  }\n+  \n+  @Test\n+  public void testRenderingFailsForLessValues() {\n+\t  String template = \"{% for a,b,c in [(1,2)] %}\"\n+\t  \t\t+ \"{{a}} {{b}} {{c}}\"\n \t  \t\t+ \"{% endfor %}\";\n-\t  expected = \"<p>1 2 3</p>\\n\"\n-\t  \t\t+ \"<p>4 5 6</p>\\n\";\n-\t  rendered = jinjava.render(template, context);\n-\t  assertEquals(rendered, expected);\n+\t  assertThatThrownBy(() -> jinjava.render(template, context))\n+\t  \t\t.isInstanceOf(InterpretException.class)\n+\t  \t\t.hasMessageContaining(\"Error rendering tag\");\n   }\n   \n   private Node fixture(String name) {\n", "next_change": {"commit": "14aaf67251dbf41eab5bdffb96db59f46ff3c9f3", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex 7a92fb1c..ae0ccab3 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -204,62 +203,61 @@ public class ForTagTest {\n     String template = \"\"\n         + \"{% for i in the_list %}{{i}}{% endfor %}\";\n     String rendered = jinjava.render(template, context);\n+    System.out.println(rendered);\n     assertEquals(new PyishDate(testDate).toString(), rendered);\n   }\n \n   @Test\n-  public void testTuplesWithPyList() {\n-\tString template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n-\t  \t\t\"<li><a href=\\\"{{href}}\\\">{{caption}}</a></li>\\n\" + \n-\t  \t\t\"{% endfor %}\";\n-\tString expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n-\t  \t\t\"<li><a href=\\\"downloads.html\\\">Downloads</a></li>\\n\" +\n-\t  \t\t\"<li><a href=\\\"products.html\\\">Products</a></li>\\n\";\n-\t  \n-\tString rendered = jinjava.render(template, context);\n-\tassertEquals(rendered, expected);\n-  }\n-  \n-  @Test\n-  public void testTuplesWithThreeValues() {\n-\tString template = \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\"\n-\t\t  \t\t+ \"<p>{{a}} {{b}} {{c}}</p>\\n\"\n-\t\t  \t\t+ \"{% endfor %}\";\n-    String expected = \"<p>1 2 3</p>\\n\"\n-  \t\t+ \"<p>4 5 6</p>\\n\";\n+  public void testForLoopWithBooleanFromNamespaceVariable() {\n+    // given\n+    jinjava = new Jinjava();\n+    interpreter = jinjava.newInterpreter();\n+    context = interpreter.getContext();\n+    String template = \"{% set ns = namespace(found=false) %}\" +\n+        \"{% for item in items %}\" +\n+          \"{% if item=='B' %}\" +\n+            \"{% set ns.found=true %}\" +\n+          \"{% endif %}\" +\n+        \"{% endfor %}\" +\n+        \"Found item having something: {{ ns.found }}\";\n+\n+    context.put(\"items\", Lists.newArrayList(\"A\", \"B\"));\n+\n+    // when\n     String rendered = jinjava.render(template, context);\n-    assertEquals(rendered, expected);\n-  }\n-  \n-  @Test\n-  public void testWithSingleTuple() {\n-\tString template = \"{% for a, b, c, d in [(43, 21, 33, 54)] %}\"\n-\t  \t\t+ \"<h1>{{a}} - {{b}}, {{c}} - {{d}}</h1>\"\n-\t  \t\t+ \"{% endfor %}\";\n-\tString expected = \"<h1>43 - 21, 33 - 54</h1>\";\n-\tString rendered = jinjava.render(template, context);\n-\tassertEquals(rendered, expected);\n-  }\n-  \n-  @Test\n-  public void testTuplesWithNonStringValues() {\n-\tString template = \"{% for firstVal, secondVal in [(32, 21)] %}\"\n-\t\t\t+ \"{{firstVal + secondVal}}\"\n-\t\t\t+ \"{% endfor %}\";\n-\tString rendered = jinjava.render(template, context);\n-\tassertEquals(rendered, \"53\");\n+\n+    // debug\n+    System.out.println(rendered);\n+\n+    // then\n+    assertThat(rendered).isEqualTo(\"Found item having something: true\");\n   }\n-  \n+\n   @Test\n-  public void testRenderingFailsForLessValues() {\n-\t  String template = \"{% for a,b,c in [(1,2)] %}\"\n-\t  \t\t+ \"{{a}} {{b}} {{c}}\"\n-\t  \t\t+ \"{% endfor %}\";\n-\t  assertThatThrownBy(() -> jinjava.render(template, context))\n-\t  \t\t.isInstanceOf(InterpretException.class)\n-\t  \t\t.hasMessageContaining(\"Error rendering tag\");\n+  public void forLoopShouldCountUsingNamespaceVariable() {\n+    // given\n+    jinjava = new Jinjava();\n+    interpreter = jinjava.newInterpreter();\n+    context = interpreter.getContext();\n+    String template = \"{% set ns = namespace(found=2) %}\" +\n+        \"{% for item in items %}\" +\n+        \"{% set ns.found= ns.found + 1 %}\" +\n+        \"{% endfor %}\" +\n+        \"Found item having something: {{ ns.found }}\";\n+\n+    context.put(\"items\", Lists.newArrayList(\"A\", \"B\"));\n+\n+    // when\n+    String rendered = jinjava.render(template, context);\n+\n+    // debug\n+    System.out.println(rendered);\n+\n+    // then\n+    assertThat(rendered).isEqualTo(\"Found item having something: 4\");\n   }\n-  \n+\n+\n   private Node fixture(String name) {\n     try {\n       return new TreeParser(interpreter, Resources.toString(\n", "next_change": {"commit": "5cb246370d8f2bdb304fdcfa22cfa57dfab2c14f", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex ae0ccab3..efec7bcd 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -200,72 +199,80 @@ public class ForTagTest {\n     Map<String, Object> context = Maps.newHashMap();\n     Date testDate = new Date();\n     context.put(\"the_list\", Lists.newArrayList(testDate));\n-    String template = \"\"\n-        + \"{% for i in the_list %}{{i}}{% endfor %}\";\n+    String template = \"\" + \"{% for i in the_list %}{{i}}{% endfor %}\";\n     String rendered = jinjava.render(template, context);\n-    System.out.println(rendered);\n     assertEquals(new PyishDate(testDate).toString(), rendered);\n   }\n \n   @Test\n-  public void testForLoopWithBooleanFromNamespaceVariable() {\n-    // given\n-    jinjava = new Jinjava();\n-    interpreter = jinjava.newInterpreter();\n-    context = interpreter.getContext();\n-    String template = \"{% set ns = namespace(found=false) %}\" +\n-        \"{% for item in items %}\" +\n-          \"{% if item=='B' %}\" +\n-            \"{% set ns.found=true %}\" +\n-          \"{% endif %}\" +\n-        \"{% endfor %}\" +\n-        \"Found item having something: {{ ns.found }}\";\n-\n-    context.put(\"items\", Lists.newArrayList(\"A\", \"B\"));\n+  public void testTuplesWithPyList() {\n+    String template =\n+      \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" +\n+      \"<li><a href=\\\"{{href}}\\\">{{caption}}</a></li>\\n\" +\n+      \"{% endfor %}\";\n+    String expected =\n+      \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n+      \"<li><a href=\\\"downloads.html\\\">Downloads</a></li>\\n\" +\n+      \"<li><a href=\\\"products.html\\\">Products</a></li>\\n\";\n \n-    // when\n     String rendered = jinjava.render(template, context);\n-\n-    // debug\n-    System.out.println(rendered);\n-\n-    // then\n-    assertThat(rendered).isEqualTo(\"Found item having something: true\");\n+    assertEquals(rendered, expected);\n   }\n \n   @Test\n-  public void forLoopShouldCountUsingNamespaceVariable() {\n-    // given\n-    jinjava = new Jinjava();\n-    interpreter = jinjava.newInterpreter();\n-    context = interpreter.getContext();\n-    String template = \"{% set ns = namespace(found=2) %}\" +\n-        \"{% for item in items %}\" +\n-        \"{% set ns.found= ns.found + 1 %}\" +\n-        \"{% endfor %}\" +\n-        \"Found item having something: {{ ns.found }}\";\n-\n-    context.put(\"items\", Lists.newArrayList(\"A\", \"B\"));\n-\n-    // when\n+  public void testTuplesWithThreeValues() {\n+    String template =\n+      \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\" +\n+      \"<p>{{a}} {{b}} {{c}}</p>\\n\" +\n+      \"{% endfor %}\";\n+    String expected = \"<p>1 2 3</p>\\n\" + \"<p>4 5 6</p>\\n\";\n     String rendered = jinjava.render(template, context);\n+    assertEquals(rendered, expected);\n+  }\n \n-    // debug\n-    System.out.println(rendered);\n+  @Test\n+  public void testWithSingleTuple() {\n+    String template =\n+      \"{% for a, b, c, d in [(43, 21, 33, 54)] %}\" +\n+      \"<h1>{{a}} - {{b}}, {{c}} - {{d}}</h1>\" +\n+      \"{% endfor %}\";\n+    String expected = \"<h1>43 - 21, 33 - 54</h1>\";\n+    String rendered = jinjava.render(template, context);\n+    assertEquals(rendered, expected);\n+  }\n \n-    // then\n-    assertThat(rendered).isEqualTo(\"Found item having something: 4\");\n+  @Test\n+  public void testTuplesWithNonStringValues() {\n+    String template =\n+      \"{% for firstVal, secondVal in [(32, 21)] %}\" +\n+      \"{{firstVal + secondVal}}\" +\n+      \"{% endfor %}\";\n+    String rendered = jinjava.render(template, context);\n+    assertEquals(rendered, \"53\");\n   }\n \n+  @Test\n+  public void testRenderingFailsForLessValues() {\n+    String template = \"{% for a,b,c in [(1,2)] %}\" + \"{{a}} {{b}} {{c}}\" + \"{% endfor %}\";\n+    assertThatThrownBy(() -> jinjava.render(template, context))\n+      .isInstanceOf(InterpretException.class)\n+      .hasMessageContaining(\"Error rendering tag\");\n+  }\n \n   private Node fixture(String name) {\n     try {\n-      return new TreeParser(interpreter, Resources.toString(\n-          Resources.getResource(String.format(\"tags/fortag/%s.jinja\", name)), StandardCharsets.UTF_8))\n-              .buildTree().getChildren().getFirst();\n+      return new TreeParser(\n+        interpreter,\n+        Resources.toString(\n+          Resources.getResource(String.format(\"tags/fortag/%s.jinja\", name)),\n+          StandardCharsets.UTF_8\n+        )\n+      )\n+        .buildTree()\n+        .getChildren()\n+        .getFirst();\n     } catch (IOException e) {\n       throw new RuntimeException(e);\n     }\n   }\n-\n }\n", "next_change": {"commit": "4ae010ad0bb17999b8d450d39abff957d5694835", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex efec7bcd..84e3b3fd 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -275,4 +334,19 @@ public class ForTagTest {\n       throw new RuntimeException(e);\n     }\n   }\n+\n+  @Test\n+  public void itCatchesConcurrentModificationInLoop() {\n+    Map<String, Object> context = Maps.newHashMap();\n+    String template =\n+      \"{% set test = [1, 2, 3] %}{% for i in test %}{% if i == 1 %}{{ test.append(4) }}{% endif %}{% endfor %}{{ test }}\";\n+\n+    RenderResult rendered = jinjava.renderForResult(template, context);\n+    assertEquals(\"[1, 2, 3, 4]\", rendered.getOutput());\n+    assertThat(rendered.getErrors()).hasSize(1);\n+    assertThat(rendered.getErrors().get(0).getSeverity())\n+      .isEqualTo(TemplateError.ErrorType.FATAL);\n+    assertThat(rendered.getErrors().get(0).getMessage())\n+      .contains(\"Cannot modify collection in 'for' loop\");\n+  }\n }\n", "next_change": {"commit": "56375d23e1761216ffe78ff851fe6bff52c9dfac", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex 84e3b3fd..aed12269 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -339,10 +339,10 @@ public class ForTagTest extends BaseInterpretingTest {\n   public void itCatchesConcurrentModificationInLoop() {\n     Map<String, Object> context = Maps.newHashMap();\n     String template =\n-      \"{% set test = [1, 2, 3] %}{% for i in test %}{% if i == 1 %}{{ test.append(4) }}{% endif %}{% endfor %}{{ test }}\";\n+      \"{% set test = [1, 2, 3] %}{% for i in test %}{{ 'hello' }}{% if i == 1 %}{{ test.append(4) }}{% endif %}{% endfor %}{{ test }}\";\n \n     RenderResult rendered = jinjava.renderForResult(template, context);\n-    assertEquals(\"[1, 2, 3, 4]\", rendered.getOutput());\n+    assertEquals(\"hellotrue[1, 2, 3, 4]\", rendered.getOutput());\n     assertThat(rendered.getErrors()).hasSize(1);\n     assertThat(rendered.getErrors().get(0).getSeverity())\n       .isEqualTo(TemplateError.ErrorType.FATAL);\n", "next_change": {"commit": "65e1b72e6ceae96198732f8ee64e8c25e50a0287", "changed_code": [{"header": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex aed12269..f42c4587 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n", "chunk": "@@ -349,4 +350,27 @@ public class ForTagTest extends BaseInterpretingTest {\n     assertThat(rendered.getErrors().get(0).getMessage())\n       .contains(\"Cannot modify collection in 'for' loop\");\n   }\n+\n+  @Test\n+  public void itAllowsCheckingOfWithinForLoop() throws NoSuchMethodException {\n+    Map<String, Object> context = Maps.newHashMap();\n+    String template =\n+      \"{% set test = [1, 2] %}{{ in_for_loop() }} {% for i in test %}{{ in_for_loop() }} {% endfor %}{{ in_for_loop() }}\";\n+\n+    jinjava.registerFunction(\n+      new ELFunctionDefinition(\n+        \"\",\n+        \"in_for_loop\",\n+        this.getClass().getDeclaredMethod(\"inForLoop\")\n+      )\n+    );\n+\n+    RenderResult rendered = jinjava.renderForResult(template, context);\n+    assertThat(rendered.getOutput()).isEqualTo(\"false true true false\");\n+  }\n+\n+  public static boolean inForLoop() {\n+    JinjavaInterpreter interpreter = JinjavaInterpreter.getCurrent();\n+    return interpreter.getContext().isInForLoop();\n+  }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "4661af3f34e4cffc1f85d09829f089b807c172ab", "message": "Merge commit", "committedDate": null}, {"oid": "14aaf67251dbf41eab5bdffb96db59f46ff3c9f3", "committedDate": "2019-03-12 14:03:05 +0000", "message": "Add namespace functionality"}, {"oid": "5cb246370d8f2bdb304fdcfa22cfa57dfab2c14f", "committedDate": "2020-02-28 12:38:37 -0500", "message": "Enable prettier-java for formatting"}, {"oid": "28e159ec59ead31aaf80bdd8939c22ef19228f53", "committedDate": "2020-10-28 11:17:14 -0400", "message": "Extend BaseTagTest to reduce duplication"}, {"oid": "6717eb80406751e3afbb862fc020dec282524fe3", "committedDate": "2020-10-28 12:40:47 -0400", "message": "Add abstract tests for Jinjava and Interpreter usages"}, {"oid": "9d656d4d9cc55de330fba1cff76a6b5830c2541f", "committedDate": "2021-04-20 12:41:32 -0400", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into namespaces"}, {"oid": "36c7c34d511f8c0c1576d7497b63b558045143d2", "committedDate": "2021-04-20 16:21:58 -0400", "message": "Allow namespace to be initialized from a dictionary"}, {"oid": "362c19f21158d3d7d4b502d903e29f1fa44adc58", "committedDate": "2021-06-30 12:57:41 -0400", "message": "Better handle spaces within for loop expressions"}, {"oid": "11a7b513830d9f0d7d516eb394845631b25acef4", "committedDate": "2021-06-30 13:17:42 -0400", "message": "Add test for looping through maps with spaces"}, {"oid": "d8860b2e95f77b6de249279d4e12ec83b9b184b6", "committedDate": "2021-07-14 13:45:47 -0400", "message": "Use regex to check for spacing around \" in \""}, {"oid": "207285eae8cb1b210178f8b70a499540d782b3f8", "committedDate": "2021-07-14 14:12:54 -0400", "message": "Fix formatting and serialization and tests"}, {"oid": "3f771ee2cc12f86acafcd1ee83b9df3e68c8f8f1", "committedDate": "2021-07-14 14:15:20 -0400", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into for-in-whitespace"}, {"oid": "4ae010ad0bb17999b8d450d39abff957d5694835", "committedDate": "2021-09-23 14:07:01 -0400", "message": "Catch concurrent modification in for loop"}, {"oid": "56375d23e1761216ffe78ff851fe6bff52c9dfac", "committedDate": "2021-09-23 14:13:26 -0400", "message": "Move to lower level"}, {"oid": "65e1b72e6ceae96198732f8ee64e8c25e50a0287", "committedDate": "2023-03-02 15:07:01 -0500", "message": "Create context method for checking if in for loop"}, {"oid": "75cedd9569dfe1774595cb11f3fef27b833cff24", "committedDate": "2023-03-02 15:10:59 -0500", "message": "setup and teardown"}, {"oid": "7b0bf13289ec48fe81899988085bb4ff232b3da5", "committedDate": "2023-03-02 15:13:04 -0500", "message": "move some stuff around again"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4MjIyMA==", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r369282220", "body": "can you add a test for this case?", "bodyText": "can you add a test for this case?", "bodyHTML": "<p dir=\"auto\">can you add a test for this case?</p>", "author": "boulter", "createdAt": "2020-01-21T22:39:25Z", "path": "src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java", "diffHunk": "@@ -159,6 +162,14 @@ public String interpret(TagNode tagNode, JinjavaInterpreter interpreter) {\n                 entryVal = entry.getValue();\n               }\n \n+              interpreter.getContext().put(loopVar, entryVal);\n+            } else if (List.class.isAssignableFrom(val.getClass())) {\n+              List<Object> entries = ((PyList) val).toList();\n+              String entryVal = null;\n+              // safety check for size\n+              if (entries.size() >= loopVarIndex) {\n+                entryVal = Objects.toString(entries.get(loopVarIndex));", "originalCommit": "c166c881c601bd4ebb2357ca57cae9031f6d3147", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3ODc5MA==", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r369378790", "bodyText": "This is a safety check only but I've added tests where the jinjava.render is expected to throw an exception when there are lesses values to unpack. \ud83d\udc4d", "author": "gabru-md", "createdAt": "2020-01-22T05:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4MjIyMA=="}], "type": "inlineReview", "revised_code": {"commit": "9f23d1086a70c0fcf83f1063c4634e50825343dd", "changed_code": [{"header": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\nindex 4b465972..46ad7358 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n", "chunk": "@@ -165,10 +164,10 @@ public class ForTag implements Tag {\n               interpreter.getContext().put(loopVar, entryVal);\n             } else if (List.class.isAssignableFrom(val.getClass())) {\n               List<Object> entries = ((PyList) val).toList();\n-              String entryVal = null;\n+              Object entryVal = null;\n               // safety check for size\n               if (entries.size() >= loopVarIndex) {\n-                entryVal = Objects.toString(entries.get(loopVarIndex));\n+                entryVal = entries.get(loopVarIndex);\n               }\n               interpreter.getContext().put(loopVar, entryVal);\n             } else {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "4661af3f34e4cffc1f85d09829f089b807c172ab", "changed_code": [{"header": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\nindex 4b465972..46ad7358 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n", "chunk": "@@ -165,10 +164,10 @@ public class ForTag implements Tag {\n               interpreter.getContext().put(loopVar, entryVal);\n             } else if (List.class.isAssignableFrom(val.getClass())) {\n               List<Object> entries = ((PyList) val).toList();\n-              String entryVal = null;\n+              Object entryVal = null;\n               // safety check for size\n               if (entries.size() >= loopVarIndex) {\n-                entryVal = Objects.toString(entries.get(loopVarIndex));\n+                entryVal = entries.get(loopVarIndex);\n               }\n               interpreter.getContext().put(loopVar, entryVal);\n             } else {\n", "next_change": {"commit": "5cb246370d8f2bdb304fdcfa22cfa57dfab2c14f", "changed_code": [{"header": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\nindex 46ad7358..9c953393 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n", "chunk": "@@ -172,15 +178,24 @@ public class ForTag implements Tag {\n               interpreter.getContext().put(loopVar, entryVal);\n             } else {\n               try {\n-                PropertyDescriptor[] valProps = Introspector.getBeanInfo(val.getClass()).getPropertyDescriptors();\n+                PropertyDescriptor[] valProps = Introspector\n+                  .getBeanInfo(val.getClass())\n+                  .getPropertyDescriptors();\n                 for (PropertyDescriptor valProp : valProps) {\n                   if (loopVar.equals(valProp.getName())) {\n-                    interpreter.getContext().put(loopVar, valProp.getReadMethod().invoke(val));\n+                    interpreter\n+                      .getContext()\n+                      .put(loopVar, valProp.getReadMethod().invoke(val));\n                     break;\n                   }\n                 }\n               } catch (Exception e) {\n-                throw new InterpretException(e.getMessage(), e, tagNode.getLineNumber(), tagNode.getStartPosition());\n+                throw new InterpretException(\n+                  e.getMessage(),\n+                  e,\n+                  tagNode.getLineNumber(),\n+                  tagNode.getStartPosition()\n+                );\n               }\n             }\n           }\n", "next_change": {"commit": "336549d53fba39ac4d26815c96118b4966b344d7", "changed_code": [{"header": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\nindex 9c953393..ad70cb3a 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n", "chunk": "@@ -201,11 +202,21 @@ public class ForTag implements Tag {\n           }\n         }\n \n+        int numDeferredNodesBefore = interpreter.getContext().getDeferredNodes().size();\n         for (Node node : tagNode.getChildren()) {\n           if (interpreter.getContext().isValidationMode()) {\n             node.render(interpreter);\n           } else {\n             buff.append(node.render(interpreter));\n+            if (\n+              interpreter.getContext().getDeferredNodes().size() > numDeferredNodesBefore\n+            ) {\n+              throw new DeferredValueException(\n+                \"for loop\",\n+                interpreter.getLineNumber(),\n+                interpreter.getPosition()\n+              );\n+            }\n           }\n         }\n       }\n", "next_change": {"commit": "c28417bafb4a962bd57ec47f34c88c5e29c845d5", "changed_code": [{"header": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\nindex ad70cb3a..c00e6f93 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n", "chunk": "@@ -202,20 +204,15 @@ public class ForTag implements Tag {\n           }\n         }\n \n-        int numDeferredNodesBefore = interpreter.getContext().getDeferredNodes().size();\n         for (Node node : tagNode.getChildren()) {\n           if (interpreter.getContext().isValidationMode()) {\n             node.render(interpreter);\n           } else {\n-            buff.append(node.render(interpreter));\n-            if (\n-              interpreter.getContext().getDeferredNodes().size() > numDeferredNodesBefore\n-            ) {\n-              throw new DeferredValueException(\n-                \"for loop\",\n-                interpreter.getLineNumber(),\n-                interpreter.getPosition()\n-              );\n+            try {\n+              buff.append(node.render(interpreter));\n+            } catch (OutputTooBigException e) {\n+              interpreter.addError(TemplateError.fromOutputTooBigException(e));\n+              return buff.toString();\n             }\n           }\n         }\n", "next_change": {"commit": "ef122811d5cdf96a51c0b7404ac9d369fd54fd2d", "changed_code": [{"header": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\nindex c00e6f93..da1718f1 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n", "chunk": "@@ -212,45 +240,56 @@ public class ForTag implements Tag {\n               buff.append(node.render(interpreter));\n             } catch (OutputTooBigException e) {\n               interpreter.addError(TemplateError.fromOutputTooBigException(e));\n-              return buff.toString();\n+              return checkLoopVariable(interpreter, buff);\n             }\n           }\n         }\n       }\n+      return checkLoopVariable(interpreter, buff);\n+    }\n+  }\n \n-      return buff.toString();\n+  private String checkLoopVariable(\n+    JinjavaInterpreter interpreter,\n+    LengthLimitingStringBuilder buff\n+  ) {\n+    if (interpreter.getContext().get(\"loop\") instanceof DeferredValue) {\n+      throw new DeferredValueException(\n+        \"loop variable deferred\",\n+        interpreter.getLineNumber(),\n+        interpreter.getPosition()\n+      );\n     }\n+    return buff.toString();\n   }\n \n-  public static String getWhitespaceAdjustedHelpers(String helpers) {\n-    /* apdlv72@gmail.com\n-     * Fix for issues with for-loops that contain whitespace in their range, e.g.\n-     * \"{% for i in range(1 * 1, 2 * 2) %}\"\n-     * This is because HelperStringTokenizer will split the range expressions also\n-     * at white spaces and end up with [i, in, range(1, *, 1, 2, *, 2)].\n-     * To avoid this, the below fix will remove white space from the expression\n-     * on the right side of the keyword \"in\". It will do so however only if there\n-     * are no characters in this expression that indicate strings - namely ' and \".\n-     * This avoids messing up expressions like {% for i in ['a ','b'] %} that\n-     * contain spaces in the arguments.\n-     * TODO A somewhat more sophisticated tokenizing/parsing of the for-loop expression.\n-     */\n-    String[] parts = helpers.split(\"\\\\s+in\\\\s+\");\n-    if (parts.length == 2 && !parts[1].contains(\"'\") && !parts[1].contains(\"\\\"\")) {\n-      helpers = parts[0] + \" in \" + parts[1].replace(\" \", \"\");\n+  public Pair<List<String>, String> getLoopVarsAndExpression(TagToken tagToken) {\n+    List<String> helperTokens = new HelperStringTokenizer(tagToken.getHelpers())\n+      .splitComma(true)\n+      .allTokens();\n+    List<String> loopVars = getLoopVars(helperTokens);\n+    Optional<String> maybeLoopExpr = getLoopExpression(tagToken.getHelpers());\n+\n+    if (loopVars.size() >= helperTokens.size() || !maybeLoopExpr.isPresent()) {\n+      throw new TemplateSyntaxException(\n+        tagToken.getHelpers().trim(),\n+        \"Tag 'for' expects valid 'in' clause, got: \" + tagToken.getHelpers(),\n+        tagToken.getLineNumber(),\n+        tagToken.getStartPosition()\n+      );\n     }\n-    return helpers;\n+    return Pair.of(loopVars, maybeLoopExpr.get());\n   }\n \n-  public String getLoopExpression(List<String> helper, List<String> loopVars) {\n-    String loopExpr = StringUtils.join(\n-      helper.subList(loopVars.size() + 1, helper.size()),\n-      \",\"\n-    );\n-    return loopExpr;\n+  private Optional<String> getLoopExpression(String helpers) {\n+    Matcher matcher = IN_PATTERN.matcher(helpers);\n+    if (matcher.find()) {\n+      return Optional.of(helpers.substring(matcher.end()).trim());\n+    }\n+    return Optional.empty();\n   }\n \n-  public List<String> getLoopVars(List<String> helper) {\n+  private List<String> getLoopVars(List<String> helper) {\n     List<String> loopVars = Lists.newArrayList();\n     while (loopVars.size() < helper.size()) {\n       String val = helper.get(loopVars.size());\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\nindex ad70cb3a..c00e6f93 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n", "chunk": "@@ -225,6 +222,48 @@ public class ForTag implements Tag {\n     }\n   }\n \n+  public static String getWhitespaceAdjustedHelpers(String helpers) {\n+    /* apdlv72@gmail.com\n+     * Fix for issues with for-loops that contain whitespace in their range, e.g.\n+     * \"{% for i in range(1 * 1, 2 * 2) %}\"\n+     * This is because HelperStringTokenizer will split the range expressions also\n+     * at white spaces and end up with [i, in, range(1, *, 1, 2, *, 2)].\n+     * To avoid this, the below fix will remove white space from the expression\n+     * on the right side of the keyword \"in\". It will do so however only if there\n+     * are no characters in this expression that indicate strings - namely ' and \".\n+     * This avoids messing up expressions like {% for i in ['a ','b'] %} that\n+     * contain spaces in the arguments.\n+     * TODO A somewhat more sophisticated tokenizing/parsing of the for-loop expression.\n+     */\n+    String[] parts = helpers.split(\"\\\\s+in\\\\s+\");\n+    if (parts.length == 2 && !parts[1].contains(\"'\") && !parts[1].contains(\"\\\"\")) {\n+      helpers = parts[0] + \" in \" + parts[1].replace(\" \", \"\");\n+    }\n+    return helpers;\n+  }\n+\n+  public String getLoopExpression(List<String> helper, List<String> loopVars) {\n+    String loopExpr = StringUtils.join(\n+      helper.subList(loopVars.size() + 1, helper.size()),\n+      \",\"\n+    );\n+    return loopExpr;\n+  }\n+\n+  public List<String> getLoopVars(List<String> helper) {\n+    List<String> loopVars = Lists.newArrayList();\n+    while (loopVars.size() < helper.size()) {\n+      String val = helper.get(loopVars.size());\n+\n+      if (\"in\".equals(val)) {\n+        break;\n+      } else {\n+        loopVars.add(val);\n+      }\n+    }\n+    return loopVars;\n+  }\n+\n   @Override\n   public String getName() {\n     return TAG_NAME;\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "4661af3f34e4cffc1f85d09829f089b807c172ab", "message": "Merge commit", "committedDate": null}, {"oid": "5cb246370d8f2bdb304fdcfa22cfa57dfab2c14f", "committedDate": "2020-02-28 12:38:37 -0500", "message": "Enable prettier-java for formatting"}, {"oid": "336549d53fba39ac4d26815c96118b4966b344d7", "committedDate": "2020-07-20 12:59:28 +0100", "message": "Reoutput for loop if anything deferred inside"}, {"oid": "ff6af24b69406d76c404fcd29dc301cc027b567d", "committedDate": "2020-11-05 15:02:50 -0500", "message": "handle more tags"}, {"oid": "c28417bafb4a962bd57ec47f34c88c5e29c845d5", "committedDate": "2020-11-30 15:59:41 -0500", "message": "Checkout eager for tag"}, {"oid": "de7ce256e3b0c5b034f84f33290190855bc6b224", "committedDate": "2021-02-10 09:51:38 -0500", "message": "Added code body"}, {"oid": "2c22ebba8c4efd9ca2fe25aca7a6404ceacaabb5", "committedDate": "2021-02-26 13:13:45 -0500", "message": "Final cleannup of snippets"}, {"oid": "1de8eedcea4d1a5dc93f39bcb999a9dbab7ca8b5", "committedDate": "2021-05-13 13:49:27 -0400", "message": "Allow changes in deferred for token"}, {"oid": "362c19f21158d3d7d4b502d903e29f1fa44adc58", "committedDate": "2021-06-30 12:57:41 -0400", "message": "Better handle spaces within for loop expressions"}, {"oid": "21ed8c362a980162ac331fecba5ef9416a9f6ce3", "committedDate": "2021-06-30 13:08:10 -0400", "message": "Refactor shared code to method"}, {"oid": "d8860b2e95f77b6de249279d4e12ec83b9b184b6", "committedDate": "2021-07-14 13:45:47 -0400", "message": "Use regex to check for spacing around \" in \""}, {"oid": "cb30678d8c8302b0d3d762b9ab2cf112d887d8ef", "committedDate": "2021-09-01 16:17:05 -0400", "message": "Handle when loop variable ends up getting deferred by switching over to eager for loop"}, {"oid": "4ae010ad0bb17999b8d450d39abff957d5694835", "committedDate": "2021-09-23 14:07:01 -0400", "message": "Catch concurrent modification in for loop"}, {"oid": "56375d23e1761216ffe78ff851fe6bff52c9dfac", "committedDate": "2021-09-23 14:13:26 -0400", "message": "Move to lower level"}, {"oid": "aad0a7db65f283f0b5e3f21bdbeaeac5d8688527", "committedDate": "2021-12-09 12:09:16 -0500", "message": "We don't need to defer the for tag if the loop variable was deferred in a parent and there are no new eager tokens"}, {"oid": "ef122811d5cdf96a51c0b7404ac9d369fd54fd2d", "committedDate": "2021-12-09 12:34:16 -0500", "message": "Specifically check if loop is deferred in the for loop's child scope"}, {"oid": "553de327bd4778962c6f1113753786b2ea915a06", "committedDate": "2022-05-12 16:53:52 -0400", "message": "When there are large loops with many deferred tokens, defer the loop evaluation"}, {"oid": "014a49d435eebc5b215feccea4403ce17b14d602", "committedDate": "2022-06-14 15:23:33 -0400", "message": "Refactor, add comments, and fix boolean expression to fix the other test cases"}, {"oid": "03069f2b2d9a6bea86f8da8772aacd07f82b1c3d", "committedDate": "2022-06-17 17:11:52 -0400", "message": "Defer too large of for loop bodies in eager execution"}, {"oid": "2a248798c9021cd15b11dd0c84ce5e147fe670b3", "committedDate": "2022-06-24 13:39:29 -0400", "message": "Change terminology of EagerToken over to DeferredToken"}, {"oid": "ad87f01411265ca52349f8a9fe22cd1f6bb6a822", "committedDate": "2023-01-06 17:09:09 -0500", "message": "update textmate snippets"}, {"oid": "65e1b72e6ceae96198732f8ee64e8c25e50a0287", "committedDate": "2023-03-02 15:07:01 -0500", "message": "Create context method for checking if in for loop"}, {"oid": "6b6461c9bb594118126f6707c3b66077ec27eb6f", "committedDate": "2023-04-13 15:18:41 -0400", "message": "Improve for loop explosion success rate. Now that we have better tracking of the prefix to preserve state, we can separate the collection expression execution from the iterating of the for loop. This leads to better explosion success where we can now support exploding for loops even when there are modifications inside for loops with deferred tokens Additionally, for loop evaluation will be faster as we don't need to re-run the for loop"}, {"oid": "97cac1dbf78902eaf635f7f24ea689dc19bf8214", "committedDate": "2023-04-19 13:59:57 -0400", "message": "Revert \"Improve for loop explosion success with deferred tokens\""}, {"oid": "3f221d6cc744dcf14c28cfc549444615285291c1", "committedDate": "2023-04-19 15:16:35 -0400", "message": "Revert \"Revert \"Improve for loop explosion success with deferred tokens\"\""}, {"oid": "0099ea9dcc3777f03f7a272781e88931a1e02244", "committedDate": "2023-04-24 13:16:49 +0100", "message": "Revert \"Revert 1055 revert 1048 improve for loop success\" (#1058)"}, {"oid": "c1e2e0fc6ef24ed02f6b86bfc6bcc79efe6f33a3", "committedDate": "2023-04-24 18:11:49 +0100", "message": "Revert \"Revert \"Revert 1055 revert 1048 improve for loop success\"\" (#1059)"}]}, {"oid": "9f23d1086a70c0fcf83f1063c4634e50825343dd", "url": "https://github.com/HubSpot/jinjava/commit/9f23d1086a70c0fcf83f1063c4634e50825343dd", "message": "adds tests for ForTag", "committedDate": "2020-01-22T05:40:16Z", "type": "commit"}, {"oid": "78a0226b47f010344c884b2b6682561e19717781", "url": "https://github.com/HubSpot/jinjava/commit/78a0226b47f010344c884b2b6682561e19717781", "message": "removes escape filter from fortag test", "committedDate": "2020-01-27T16:39:19Z", "type": "commit"}]}