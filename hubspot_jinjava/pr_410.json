{"pr_number": 410, "pr_title": "adds support for Custom Token Scanner Symbols", "pr_author": "gabru-md", "pr_createdAt": "2020-03-10T12:57:26Z", "pr_url": "https://github.com/HubSpot/jinjava/pull/410", "timeline": [{"oid": "14086a6c6de13eb915084ae6cbbb91ab2cef84ac", "url": "https://github.com/HubSpot/jinjava/commit/14086a6c6de13eb915084ae6cbbb91ab2cef84ac", "message": "adds support for Custom Token Scanner Symbols", "committedDate": "2020-03-10T13:35:28Z", "type": "commit"}, {"oid": "14086a6c6de13eb915084ae6cbbb91ab2cef84ac", "url": "https://github.com/HubSpot/jinjava/commit/14086a6c6de13eb915084ae6cbbb91ab2cef84ac", "message": "adds support for Custom Token Scanner Symbols", "committedDate": "2020-03-10T13:35:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0MTM0Ng==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r392441346", "body": "Looks like this should use the scanner symbols as well.", "bodyText": "Looks like this should use the scanner symbols as well.", "bodyHTML": "<p dir=\"auto\">Looks like this should use the scanner symbols as well.</p>", "author": "boulter", "createdAt": "2020-03-13T20:02:35Z", "path": "src/main/java/com/hubspot/jinjava/tree/ExpressionNode.java", "diffHunk": "@@ -51,7 +51,10 @@ public OutputNode render(JinjavaInterpreter interpreter) {\n     if (interpreter.getConfig().isNestedInterpretationEnabled()) {\n       if (\n         !StringUtils.equals(result, master.getImage()) &&\n-        (StringUtils.contains(result, \"{{\") || StringUtils.contains(result, \"{%\"))\n+        (\n+          StringUtils.contains(result, \"{{\") ||", "originalCommit": "96ec8ef273ed63c800194a845116ea8cd4744760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU2MzQyNg==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r392563426", "bodyText": "I've made the changes. Although I'm not quite sure to if the {{ is to be replaced by\nTOKEN_PREFIX_CHAR + TOKEN_EXPR_START_CHAR\nor is it just\nTOKEN_EXPR_START_CHAR + TOKEN_EXPR_START_CHAR.\nPlease review it once again.\nCheers!", "author": "gabru-md", "createdAt": "2020-03-14T06:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0MTM0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0MTY4Mg==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r392441682", "body": "Use `TOKEN_NOTE_CHAR` here?", "bodyText": "Use TOKEN_NOTE_CHAR here?", "bodyHTML": "<p dir=\"auto\">Use <code>TOKEN_NOTE_CHAR</code> here?</p>", "author": "boulter", "createdAt": "2020-03-13T20:03:33Z", "path": "src/main/java/com/hubspot/jinjava/tree/TreeParser.java", "diffHunk": "@@ -89,40 +89,38 @@ public Node buildTree() {\n   private Node nextNode() {\n     Token token = scanner.next();\n \n-    switch (token.getType()) {\n-      case TOKEN_FIXED:\n-        return text((TextToken) token);\n-      case TOKEN_EXPR_START:\n-        return expression((ExpressionToken) token);\n-      case TOKEN_TAG:\n-        return tag((TagToken) token);\n-      case TOKEN_NOTE:\n-        if (!token.getImage().endsWith(\"#}\")) {\n-          interpreter.addError(\n-            new TemplateError(\n-              ErrorType.WARNING,\n-              ErrorReason.SYNTAX_ERROR,\n-              ErrorItem.TAG,\n-              \"Unclosed comment\",\n-              \"comment\",\n-              token.getLineNumber(),\n-              token.getStartPosition(),\n-              null\n-            )\n-          );\n-        }\n-        break;\n-      default:\n+    if (token.getType() == symbols.TOKEN_FIXED()) return text(\n+      (TextToken) token\n+    ); else if (\n+      token.getType() == symbols.TOKEN_EXPR_START()\n+    ) return expression((ExpressionToken) token); else if (\n+      token.getType() == symbols.TOKEN_TAG()\n+    ) return tag((TagToken) token); else if (\n+      token.getType() == symbols.TOKEN_NOTE()\n+    ) {\n+      if (!token.getImage().endsWith(\"#}\")) {", "originalCommit": "96ec8ef273ed63c800194a845116ea8cd4744760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU2MzQyOA==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r392563428", "bodyText": "done", "author": "gabru-md", "createdAt": "2020-03-14T06:59:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0MTY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0MTk3Mg==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r392441972", "body": "should be `getTokenPrefix()`. Same for the others below.", "bodyText": "should be getTokenPrefix(). Same for the others below.", "bodyHTML": "<p dir=\"auto\">should be <code>getTokenPrefix()</code>. Same for the others below.</p>", "author": "boulter", "createdAt": "2020-03-13T20:04:25Z", "path": "src/main/java/com/hubspot/jinjava/tree/parse/DefaultTokenScannerSymbols.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.hubspot.jinjava.tree.parse;\n+\n+public class DefaultTokenScannerSymbols extends TokenScannerSymbols {\n+  char TOKEN_PREFIX_CHAR = '{';\n+  char TOKEN_POSTFIX_CHAR = '}';\n+  char TOKEN_FIXED_CHAR = 0;\n+  char TOKEN_NOTE_CHAR = '#';\n+  char TOKEN_TAG_CHAR = '%';\n+  char TOKEN_EXPR_START_CHAR = '{';\n+  char TOKEN_EXPR_END_CHAR = '}';\n+  char TOKEN_NEWLINE_CHAR = '\\n';\n+  char TOKEN_TRIM_CHAR = '-';\n+\n+  @Override\n+  public char TOKEN_PREFIX_CHAR() {", "originalCommit": "96ec8ef273ed63c800194a845116ea8cd4744760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU2MzQzNA==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r392563434", "bodyText": "changes made!", "author": "gabru-md", "createdAt": "2020-03-14T07:00:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0MTk3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0MjQ0OQ==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r392442449", "body": "`else if` should be on a new line", "bodyText": "else if should be on a new line", "bodyHTML": "<p dir=\"auto\"><code>else if</code> should be on a new line</p>", "author": "boulter", "createdAt": "2020-03-13T20:05:42Z", "path": "src/main/java/com/hubspot/jinjava/tree/parse/Token.java", "diffHunk": "@@ -93,22 +88,33 @@ public String toString() {\n \n   public abstract int getType();\n \n-  static Token newToken(int tokenKind, String image, int lineNumber, int startPosition) {\n-    switch (tokenKind) {\n-      case TOKEN_FIXED:\n-        return new TextToken(image, lineNumber, startPosition);\n-      case TOKEN_NOTE:\n-        return new NoteToken(image, lineNumber, startPosition);\n-      case TOKEN_EXPR_START:\n-        return new ExpressionToken(image, lineNumber, startPosition);\n-      case TOKEN_TAG:\n-        return new TagToken(image, lineNumber, startPosition);\n-      default:\n-        throw new UnexpectedTokenException(\n-          String.valueOf((char) tokenKind),\n-          lineNumber,\n-          startPosition\n-        );\n-    }\n+  static Token newToken(\n+    int tokenKind,\n+    TokenScannerSymbols symbols,\n+    String image,\n+    int lineNumber,\n+    int startPosition\n+  ) {\n+    if (tokenKind == symbols.TOKEN_FIXED()) return new TextToken(\n+      image,\n+      lineNumber,\n+      startPosition\n+    ); else if (tokenKind == symbols.TOKEN_NOTE()) return new NoteToken(\n+      image,\n+      lineNumber,\n+      startPosition\n+    ); else if (\n+      tokenKind == symbols.TOKEN_EXPR_START()\n+    ) return new ExpressionToken(image, lineNumber, startPosition); else if (", "originalCommit": "96ec8ef273ed63c800194a845116ea8cd4744760", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0Mjc0MA==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r392442740", "body": "please always wrap bodies of if statements in `{ }`", "bodyText": "please always wrap bodies of if statements in { }", "bodyHTML": "<p dir=\"auto\">please always wrap bodies of if statements in <code>{ }</code></p>", "author": "boulter", "createdAt": "2020-03-13T20:06:23Z", "path": "src/main/java/com/hubspot/jinjava/tree/parse/Token.java", "diffHunk": "@@ -93,22 +88,33 @@ public String toString() {\n \n   public abstract int getType();\n \n-  static Token newToken(int tokenKind, String image, int lineNumber, int startPosition) {\n-    switch (tokenKind) {\n-      case TOKEN_FIXED:\n-        return new TextToken(image, lineNumber, startPosition);\n-      case TOKEN_NOTE:\n-        return new NoteToken(image, lineNumber, startPosition);\n-      case TOKEN_EXPR_START:\n-        return new ExpressionToken(image, lineNumber, startPosition);\n-      case TOKEN_TAG:\n-        return new TagToken(image, lineNumber, startPosition);\n-      default:\n-        throw new UnexpectedTokenException(\n-          String.valueOf((char) tokenKind),\n-          lineNumber,\n-          startPosition\n-        );\n-    }\n+  static Token newToken(\n+    int tokenKind,\n+    TokenScannerSymbols symbols,\n+    String image,\n+    int lineNumber,\n+    int startPosition\n+  ) {\n+    if (tokenKind == symbols.TOKEN_FIXED()) return new TextToken(", "originalCommit": "96ec8ef273ed63c800194a845116ea8cd4744760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU2MzQ2Mw==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r392563463", "bodyText": "done.", "author": "gabru-md", "createdAt": "2020-03-14T07:00:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0Mjc0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0MzQwMg==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r392443402", "body": "same comment as before", "bodyText": "same comment as before", "bodyHTML": "<p dir=\"auto\">same comment as before</p>", "author": "boulter", "createdAt": "2020-03-13T20:08:22Z", "path": "src/main/java/com/hubspot/jinjava/tree/parse/TokenScannerSymbols.java", "diffHunk": "@@ -15,24 +15,59 @@\n  **********************************************************************/\n package com.hubspot.jinjava.tree.parse;\n \n-public interface TokenScannerSymbols {\n-  char TOKEN_PREFIX_CHAR = '{';\n-  char TOKEN_POSTFIX_CHAR = '}';\n-  char TOKEN_FIXED_CHAR = 0;\n-  char TOKEN_NOTE_CHAR = '#';\n-  char TOKEN_TAG_CHAR = '%';\n-  char TOKEN_EXPR_START_CHAR = '{';\n-  char TOKEN_EXPR_END_CHAR = '}';\n-  char TOKEN_NEWLINE_CHAR = '\\n';\n-  char TOKEN_TRIM_CHAR = '-';\n-\n-  int TOKEN_PREFIX = TOKEN_PREFIX_CHAR;\n-  int TOKEN_POSTFIX = TOKEN_POSTFIX_CHAR;\n-  int TOKEN_FIXED = TOKEN_FIXED_CHAR;\n-  int TOKEN_NOTE = TOKEN_NOTE_CHAR;\n-  int TOKEN_TAG = TOKEN_TAG_CHAR;\n-  int TOKEN_EXPR_START = TOKEN_EXPR_START_CHAR;\n-  int TOKEN_EXPR_END = TOKEN_EXPR_END_CHAR;\n-  int TOKEN_NEWLINE = TOKEN_NEWLINE_CHAR;\n-  int TOKEN_TRIM = TOKEN_TRIM_CHAR;\n+public abstract class TokenScannerSymbols {\n+\n+  public abstract char TOKEN_PREFIX_CHAR();", "originalCommit": "96ec8ef273ed63c800194a845116ea8cd4744760", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "10bdb169739257157e3e0bf6884116f048990c9f", "url": "https://github.com/HubSpot/jinjava/commit/10bdb169739257157e3e0bf6884116f048990c9f", "message": "renames functions + review changes", "committedDate": "2020-03-14T06:55:20Z", "type": "commit"}, {"oid": "10bdb169739257157e3e0bf6884116f048990c9f", "url": "https://github.com/HubSpot/jinjava/commit/10bdb169739257157e3e0bf6884116f048990c9f", "message": "renames functions + review changes", "committedDate": "2020-03-14T06:55:20Z", "type": "forcePushed"}, {"oid": "f51d0906834cbe45c11c88ed1f3d56b2fa0d5e59", "url": "https://github.com/HubSpot/jinjava/commit/f51d0906834cbe45c11c88ed1f3d56b2fa0d5e59", "message": "ran mvn clean verify + diff applied", "committedDate": "2020-03-17T15:47:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyNzQwOA==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r393827408", "body": "Could you create these once and make it accessible from the `TokenScannerSymbols` class? ", "bodyText": "Could you create these once and make it accessible from the TokenScannerSymbols class?", "bodyHTML": "<p dir=\"auto\">Could you create these once and make it accessible from the <code>TokenScannerSymbols</code> class?</p>", "author": "boulter", "createdAt": "2020-03-17T16:55:03Z", "path": "src/main/java/com/hubspot/jinjava/tree/ExpressionNode.java", "diffHunk": "@@ -48,10 +49,23 @@ public OutputNode render(JinjavaInterpreter interpreter) {\n \n     String result = Objects.toString(var, \"\");\n \n+    TokenScannerSymbols symbols = interpreter.getConfig().getTokenScannerSymbols();\n+    String expressionBegins = new StringBuilder()", "originalCommit": "f51d0906834cbe45c11c88ed1f3d56b2fa0d5e59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyOTczNA==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r394129734", "bodyText": "I didn't quite get what you're trying to say. Can you please explain a little bit so that I can make the changes?", "author": "gabru-md", "createdAt": "2020-03-18T06:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyNzQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxNTEzOA==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r394415138", "bodyText": "Sure. Add getExpressionStart() and getExpressionEnd() methods to TokenScannerSymbols and ensure they're only built once, rather than every time a node is rendered.", "author": "boulter", "createdAt": "2020-03-18T15:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyNzQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyODY0MQ==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r393828641", "body": "this can also be defined once.", "bodyText": "this can also be defined once.", "bodyHTML": "<p dir=\"auto\">this can also be defined once.</p>", "author": "boulter", "createdAt": "2020-03-17T16:56:54Z", "path": "src/main/java/com/hubspot/jinjava/tree/TreeParser.java", "diffHunk": "@@ -89,39 +87,41 @@ public Node buildTree() {\n   private Node nextNode() {\n     Token token = scanner.next();\n \n-    switch (token.getType()) {\n-      case TOKEN_FIXED:\n-        return text((TextToken) token);\n-      case TOKEN_EXPR_START:\n-        return expression((ExpressionToken) token);\n-      case TOKEN_TAG:\n-        return tag((TagToken) token);\n-      case TOKEN_NOTE:\n-        if (!token.getImage().endsWith(\"#}\")) {\n-          interpreter.addError(\n-            new TemplateError(\n-              ErrorType.WARNING,\n-              ErrorReason.SYNTAX_ERROR,\n-              ErrorItem.TAG,\n-              \"Unclosed comment\",\n-              \"comment\",\n-              token.getLineNumber(),\n-              token.getStartPosition(),\n-              null\n-            )\n-          );\n-        }\n-        break;\n-      default:\n+    if (token.getType() == symbols.getTokenFixed()) {\n+      return text((TextToken) token);\n+    } else if (token.getType() == symbols.getTokenExprStart()) {\n+      return expression((ExpressionToken) token);\n+    } else if (token.getType() == symbols.getTokenTag()) {\n+      return tag((TagToken) token);\n+    } else if (token.getType() == symbols.getTokenNote()) {\n+      String commentClosed = new StringBuilder()", "originalCommit": "f51d0906834cbe45c11c88ed1f3d56b2fa0d5e59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyOTI5NQ==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r393829295", "body": "all of these start with `getToken` so the `Token` part is redundant. Can you remove that part? ", "bodyText": "all of these start with getToken so the Token part is redundant. Can you remove that part?", "bodyHTML": "<p dir=\"auto\">all of these start with <code>getToken</code> so the <code>Token</code> part is redundant. Can you remove that part?</p>", "author": "boulter", "createdAt": "2020-03-17T16:57:54Z", "path": "src/main/java/com/hubspot/jinjava/tree/parse/DefaultTokenScannerSymbols.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.hubspot.jinjava.tree.parse;\n+\n+public class DefaultTokenScannerSymbols extends TokenScannerSymbols {\n+  char TOKEN_PREFIX_CHAR = '{';\n+  char TOKEN_POSTFIX_CHAR = '}';\n+  char TOKEN_FIXED_CHAR = 0;\n+  char TOKEN_NOTE_CHAR = '#';\n+  char TOKEN_TAG_CHAR = '%';\n+  char TOKEN_EXPR_START_CHAR = '{';\n+  char TOKEN_EXPR_END_CHAR = '}';\n+  char TOKEN_NEWLINE_CHAR = '\\n';\n+  char TOKEN_TRIM_CHAR = '-';\n+\n+  @Override\n+  public char getTokenPrefixChar() {", "originalCommit": "f51d0906834cbe45c11c88ed1f3d56b2fa0d5e59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyODQyNQ==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r394128425", "bodyText": "okay. I will remove that !", "author": "gabru-md", "createdAt": "2020-03-18T06:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyOTI5NQ=="}], "type": "inlineReview"}, {"oid": "ce4d826b9a0f30ea65498c6d9dcfd77c2559aa8b", "url": "https://github.com/HubSpot/jinjava/commit/ce4d826b9a0f30ea65498c6d9dcfd77c2559aa8b", "message": "adds changes to TokenScannerSymbols", "committedDate": "2020-03-18T18:14:55Z", "type": "commit"}, {"oid": "018d77d8f7bd78b47d3c125c7f617c3328c65839", "url": "https://github.com/HubSpot/jinjava/commit/018d77d8f7bd78b47d3c125c7f617c3328c65839", "message": "reformats CustomTokenScannerSymbolsTest.java", "committedDate": "2020-03-18T18:32:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0NzM3Mg==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395047372", "body": "unnecessary variables as they are only used once.", "bodyText": "unnecessary variables as they are only used once.", "bodyHTML": "<p dir=\"auto\">unnecessary variables as they are only used once.</p>", "author": "boulter", "createdAt": "2020-03-19T14:01:45Z", "path": "src/main/java/com/hubspot/jinjava/tree/ExpressionNode.java", "diffHunk": "@@ -48,10 +49,17 @@ public OutputNode render(JinjavaInterpreter interpreter) {\n \n     String result = Objects.toString(var, \"\");\n \n+    TokenScannerSymbols symbols = interpreter.getConfig().getTokenScannerSymbols();\n+    String expressionBegins = symbols.getExpressionStart();\n+    String expressionWithTag = symbols.getExpressionStartWithTag();", "originalCommit": "018d77d8f7bd78b47d3c125c7f617c3328c65839", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4MjM0Ng==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r398882346", "bodyText": "@gabru-md", "author": "boulter", "createdAt": "2020-03-26T20:48:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0NzM3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0ODE5Mw==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395048193", "body": "can you add a method to construct this string once as well?", "bodyText": "can you add a method to construct this string once as well?", "bodyHTML": "<p dir=\"auto\">can you add a method to construct this string once as well?</p>", "author": "boulter", "createdAt": "2020-03-19T14:02:50Z", "path": "src/main/java/com/hubspot/jinjava/tree/TagNode.java", "diffHunk": "@@ -108,24 +108,25 @@ public String reconstructImage() {\n   }\n \n   public String reconstructEnd() {\n+    TokenScannerSymbols symbols = JinjavaInterpreter\n+      .getCurrent()\n+      .getConfig()\n+      .getTokenScannerSymbols();\n     StringBuilder stringBuilder = new StringBuilder();\n-    stringBuilder\n-      .append(TokenScannerSymbols.TOKEN_EXPR_START_CHAR)\n-      .append(TokenScannerSymbols.TOKEN_TAG_CHAR);\n+    stringBuilder.append(symbols.getExprStartChar()).append(symbols.getTagChar());", "originalCommit": "018d77d8f7bd78b47d3c125c7f617c3328c65839", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5OTMxNA==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395099314", "bodyText": "sure. I might have missed this out in the last commit.\nI will add this to the changes as well.", "author": "gabru-md", "createdAt": "2020-03-19T15:09:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0ODE5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0ODkyMA==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395048920", "body": "same here", "bodyText": "same here", "bodyHTML": "<p dir=\"auto\">same here</p>", "author": "boulter", "createdAt": "2020-03-19T14:03:55Z", "path": "src/main/java/com/hubspot/jinjava/tree/TagNode.java", "diffHunk": "@@ -108,24 +108,25 @@ public String reconstructImage() {\n   }\n \n   public String reconstructEnd() {\n+    TokenScannerSymbols symbols = JinjavaInterpreter\n+      .getCurrent()\n+      .getConfig()\n+      .getTokenScannerSymbols();\n     StringBuilder stringBuilder = new StringBuilder();\n-    stringBuilder\n-      .append(TokenScannerSymbols.TOKEN_EXPR_START_CHAR)\n-      .append(TokenScannerSymbols.TOKEN_TAG_CHAR);\n+    stringBuilder.append(symbols.getExprStartChar()).append(symbols.getTagChar());\n     if (\n       getChildren() != null &&\n       !getChildren().isEmpty() &&\n       getChildren().getLast().getMaster().isRightTrim()\n     ) {\n-      stringBuilder.append(TokenScannerSymbols.TOKEN_TRIM_CHAR);\n+      stringBuilder.append(symbols.getTrimChar());\n     }\n     stringBuilder.append(\" \").append(getEndName()).append(\" \");\n     if (getMaster().isRightTrimAfterEnd()) {\n-      stringBuilder.append(TokenScannerSymbols.TOKEN_TRIM_CHAR);\n+      stringBuilder.append(symbols.getTrimChar());\n     }\n-    stringBuilder\n-      .append(TokenScannerSymbols.TOKEN_TAG_CHAR)\n-      .append(TokenScannerSymbols.TOKEN_EXPR_END_CHAR);\n+\n+    stringBuilder.append(symbols.getTagChar()).append(symbols.getExprEndChar());", "originalCommit": "018d77d8f7bd78b47d3c125c7f617c3328c65839", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDA2MA==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395050060", "body": "```suggestion\r\n  private final int tokenTag;\r\n```\r\nonly static variables should be in upper case. ", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final int TOKEN_TAG;\n          \n          \n            \n              private final int tokenTag;\n          \n      \n    \n    \n  \n\nonly static variables should be in upper case.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"pl-c1 x x-first x-last\">TOKEN_TAG</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"x x-first x-last\">tokenTag</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">only static variables should be in upper case.</p>", "author": "boulter", "createdAt": "2020-03-19T14:05:36Z", "path": "src/main/java/com/hubspot/jinjava/tree/parse/TagToken.java", "diffHunk": "@@ -15,20 +15,22 @@\n  **********************************************************************/\n package com.hubspot.jinjava.tree.parse;\n \n-import static com.hubspot.jinjava.tree.parse.TokenScannerSymbols.TOKEN_TAG;\n-\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n import com.hubspot.jinjava.util.WhitespaceUtils;\n \n public class TagToken extends Token {\n   private static final long serialVersionUID = -4927751270481832992L;\n+  private final int TOKEN_TAG;", "originalCommit": "018d77d8f7bd78b47d3c125c7f617c3328c65839", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDI0Mg==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395050242", "body": "```suggestion\r\n    tokenTag =\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                TOKEN_TAG =\n          \n          \n            \n                tokenTag =", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-c1 x x-first x-last\">TOKEN_TAG</span> <span class=\"pl-k\">=</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"x x-first x-last\">tokenTag</span> <span class=\"pl-k\">=</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "boulter", "createdAt": "2020-03-19T14:05:50Z", "path": "src/main/java/com/hubspot/jinjava/tree/parse/TagToken.java", "diffHunk": "@@ -15,20 +15,22 @@\n  **********************************************************************/\n package com.hubspot.jinjava.tree.parse;\n \n-import static com.hubspot.jinjava.tree.parse.TokenScannerSymbols.TOKEN_TAG;\n-\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n import com.hubspot.jinjava.util.WhitespaceUtils;\n \n public class TagToken extends Token {\n   private static final long serialVersionUID = -4927751270481832992L;\n+  private final int TOKEN_TAG;\n \n   private String tagName;\n   private String rawTagName;\n   private String helpers;\n \n   public TagToken(String image, int lineNumber, int startPosition) {\n     super(image, lineNumber, startPosition);\n+    TOKEN_TAG =", "originalCommit": "018d77d8f7bd78b47d3c125c7f617c3328c65839", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDM1Ng==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395050356", "body": "```suggestion\r\n  private final int tokenFixed;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final int TOKEN_FIXED;\n          \n          \n            \n              private final int tokenFixed;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"pl-c1 x x-first x-last\">TOKEN_FIXED</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"x x-first x-last\">tokenFixed</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "boulter", "createdAt": "2020-03-19T14:06:00Z", "path": "src/main/java/com/hubspot/jinjava/tree/parse/TextToken.java", "diffHunk": "@@ -15,15 +15,17 @@\n  **********************************************************************/\n package com.hubspot.jinjava.tree.parse;\n \n-import static com.hubspot.jinjava.tree.parse.TokenScannerSymbols.TOKEN_FIXED;\n-\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import org.apache.commons.lang3.StringUtils;\n \n public class TextToken extends Token {\n   private static final long serialVersionUID = -6168990984496468543L;\n+  private final int TOKEN_FIXED;", "originalCommit": "018d77d8f7bd78b47d3c125c7f617c3328c65839", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDU0OA==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395050548", "body": "```suggestion\r\n    tokenFixed =\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                TOKEN_FIXED =\n          \n          \n            \n                tokenFixed =", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-c1 x x-first x-last\">TOKEN_FIXED</span> <span class=\"pl-k\">=</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"x x-first x-last\">tokenFixed</span> <span class=\"pl-k\">=</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "boulter", "createdAt": "2020-03-19T14:06:16Z", "path": "src/main/java/com/hubspot/jinjava/tree/parse/TextToken.java", "diffHunk": "@@ -15,15 +15,17 @@\n  **********************************************************************/\n package com.hubspot.jinjava.tree.parse;\n \n-import static com.hubspot.jinjava.tree.parse.TokenScannerSymbols.TOKEN_FIXED;\n-\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import org.apache.commons.lang3.StringUtils;\n \n public class TextToken extends Token {\n   private static final long serialVersionUID = -6168990984496468543L;\n+  private final int TOKEN_FIXED;\n \n   public TextToken(String image, int lineNumber, int startPosition) {\n     super(image, lineNumber, startPosition);\n+    TOKEN_FIXED =", "originalCommit": "018d77d8f7bd78b47d3c125c7f617c3328c65839", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MjY4Mw==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395052683", "body": "it would good to fill this out with all the other starting and closing sequences that we'll eventually need.", "bodyText": "it would good to fill this out with all the other starting and closing sequences that we'll eventually need.", "bodyHTML": "<p dir=\"auto\">it would good to fill this out with all the other starting and closing sequences that we'll eventually need.</p>", "author": "boulter", "createdAt": "2020-03-19T14:09:11Z", "path": "src/main/java/com/hubspot/jinjava/tree/parse/TokenScannerSymbols.java", "diffHunk": "@@ -15,24 +15,86 @@\n  **********************************************************************/\n package com.hubspot.jinjava.tree.parse;\n \n-public interface TokenScannerSymbols {\n-  char TOKEN_PREFIX_CHAR = '{';\n-  char TOKEN_POSTFIX_CHAR = '}';\n-  char TOKEN_FIXED_CHAR = 0;\n-  char TOKEN_NOTE_CHAR = '#';\n-  char TOKEN_TAG_CHAR = '%';\n-  char TOKEN_EXPR_START_CHAR = '{';\n-  char TOKEN_EXPR_END_CHAR = '}';\n-  char TOKEN_NEWLINE_CHAR = '\\n';\n-  char TOKEN_TRIM_CHAR = '-';\n-\n-  int TOKEN_PREFIX = TOKEN_PREFIX_CHAR;\n-  int TOKEN_POSTFIX = TOKEN_POSTFIX_CHAR;\n-  int TOKEN_FIXED = TOKEN_FIXED_CHAR;\n-  int TOKEN_NOTE = TOKEN_NOTE_CHAR;\n-  int TOKEN_TAG = TOKEN_TAG_CHAR;\n-  int TOKEN_EXPR_START = TOKEN_EXPR_START_CHAR;\n-  int TOKEN_EXPR_END = TOKEN_EXPR_END_CHAR;\n-  int TOKEN_NEWLINE = TOKEN_NEWLINE_CHAR;\n-  int TOKEN_TRIM = TOKEN_TRIM_CHAR;\n+public abstract class TokenScannerSymbols {\n+  private String expressionStart = null;\n+  private String expressionStartWithTag = null;\n+  private String closingComment = null;\n+\n+  public abstract char getPrefixChar();\n+\n+  public abstract char getPostfixChar();\n+\n+  public abstract char getFixedChar();\n+\n+  public abstract char getNoteChar();\n+\n+  public abstract char getTagChar();\n+\n+  public abstract char getExprStartChar();\n+\n+  public abstract char getExprEndChar();\n+\n+  public abstract char getNewlineChar();\n+\n+  public abstract char getTrimChar();\n+\n+  public int getPrefix() {\n+    return getPrefixChar();\n+  }\n+\n+  public int getPostfix() {\n+    return getPostfixChar();\n+  }\n+\n+  public int getFixed() {\n+    return getFixedChar();\n+  }\n+\n+  public int getNote() {\n+    return getNoteChar();\n+  }\n+\n+  public int getTag() {\n+    return getTagChar();\n+  }\n+\n+  public int getExprStart() {\n+    return getExprStartChar();\n+  }\n+\n+  public int getExprEnd() {\n+    return getExprEndChar();\n+  }\n+\n+  public int getNewline() {\n+    return getNewlineChar();\n+  }\n+\n+  public int getTrim() {\n+    return getTrimChar();\n+  }\n+\n+  public String getExpressionStart() {", "originalCommit": "018d77d8f7bd78b47d3c125c7f617c3328c65839", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEwMDE5Ng==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395100196", "bodyText": "\ud83d\udc4d", "author": "gabru-md", "createdAt": "2020-03-19T15:10:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MjY4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4Mjc1Nw==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r398882757", "bodyText": "@gabru-md are all these in there now?", "author": "boulter", "createdAt": "2020-03-26T20:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MjY4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwMDA1NA==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r399200054", "bodyText": "Yes, all the required combinations of sequences are in here right now.", "author": "gabru-md", "createdAt": "2020-03-27T11:29:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MjY4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MzAxMw==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395053013", "body": "why are all these methods that just call abstract methods needed?", "bodyText": "why are all these methods that just call abstract methods needed?", "bodyHTML": "<p dir=\"auto\">why are all these methods that just call abstract methods needed?</p>", "author": "boulter", "createdAt": "2020-03-19T14:09:42Z", "path": "src/main/java/com/hubspot/jinjava/tree/parse/TokenScannerSymbols.java", "diffHunk": "@@ -15,24 +15,86 @@\n  **********************************************************************/\n package com.hubspot.jinjava.tree.parse;\n \n-public interface TokenScannerSymbols {\n-  char TOKEN_PREFIX_CHAR = '{';\n-  char TOKEN_POSTFIX_CHAR = '}';\n-  char TOKEN_FIXED_CHAR = 0;\n-  char TOKEN_NOTE_CHAR = '#';\n-  char TOKEN_TAG_CHAR = '%';\n-  char TOKEN_EXPR_START_CHAR = '{';\n-  char TOKEN_EXPR_END_CHAR = '}';\n-  char TOKEN_NEWLINE_CHAR = '\\n';\n-  char TOKEN_TRIM_CHAR = '-';\n-\n-  int TOKEN_PREFIX = TOKEN_PREFIX_CHAR;\n-  int TOKEN_POSTFIX = TOKEN_POSTFIX_CHAR;\n-  int TOKEN_FIXED = TOKEN_FIXED_CHAR;\n-  int TOKEN_NOTE = TOKEN_NOTE_CHAR;\n-  int TOKEN_TAG = TOKEN_TAG_CHAR;\n-  int TOKEN_EXPR_START = TOKEN_EXPR_START_CHAR;\n-  int TOKEN_EXPR_END = TOKEN_EXPR_END_CHAR;\n-  int TOKEN_NEWLINE = TOKEN_NEWLINE_CHAR;\n-  int TOKEN_TRIM = TOKEN_TRIM_CHAR;\n+public abstract class TokenScannerSymbols {\n+  private String expressionStart = null;\n+  private String expressionStartWithTag = null;\n+  private String closingComment = null;\n+\n+  public abstract char getPrefixChar();\n+\n+  public abstract char getPostfixChar();\n+\n+  public abstract char getFixedChar();\n+\n+  public abstract char getNoteChar();\n+\n+  public abstract char getTagChar();\n+\n+  public abstract char getExprStartChar();\n+\n+  public abstract char getExprEndChar();\n+\n+  public abstract char getNewlineChar();\n+\n+  public abstract char getTrimChar();\n+\n+  public int getPrefix() {", "originalCommit": "018d77d8f7bd78b47d3c125c7f617c3328c65839", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5NTEzMA==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395095130", "bodyText": "there are places when an integer is being required and there are separate places where a character is required during parsing the template. Also, it will be better if the user is allowed to fill in the functions which return char and not the ASCII value instead. Somebody who wants custom tokens will only have to fill in the tokens in form of characters and do not need to write down their ASCII values.\nAlso, I could've used those abstract methods instead since they can be cast to integers as well but the problem lies with the fact that when I was writing the if..else conditions then it was becoming a lot unclear since the casting had to be done during the comparison. Therefore I thought It'd be better to not mess up the code readability a lot and simply have users fill out the functions which return char and then return their int value using the getPrefix functions instead. I believe it was a better way to make changes.\nI hope my explanation is fine. If you feel that it is not okay then I'd try and make the changes.", "author": "gabru-md", "createdAt": "2020-03-19T15:03:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MzAxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MzgxMA==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395053810", "body": "can you make these rspec-style? `itRendersWithCustomTokens`, etc.", "bodyText": "can you make these rspec-style? itRendersWithCustomTokens, etc.", "bodyHTML": "<p dir=\"auto\">can you make these rspec-style? <code>itRendersWithCustomTokens</code>, etc.</p>", "author": "boulter", "createdAt": "2020-03-19T14:10:47Z", "path": "src/test/java/com/hubspot/jinjava/tree/parse/CustomTokenScannerSymbolsTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.hubspot.jinjava.tree.parse;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Lists;\n+import com.hubspot.jinjava.Jinjava;\n+import com.hubspot.jinjava.JinjavaConfig;\n+import com.hubspot.jinjava.lib.filter.JoinFilterTest.User;\n+import java.util.HashMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class CustomTokenScannerSymbolsTest {\n+  private Jinjava jinjava;\n+  private JinjavaConfig config;\n+\n+  @Before\n+  public void setup() {\n+    config =\n+      JinjavaConfig.newBuilder().withTokenScannerSymbols(new CustomTokens()).build();\n+    jinjava = new Jinjava(config);\n+    jinjava.getGlobalContext().put(\"numbers\", Lists.newArrayList(1L, 2L, 3L, 4L, 5L));\n+  }\n+\n+  @Test\n+  public void testsThatCustomTokensDoesNotFail() {", "originalCommit": "018d77d8f7bd78b47d3c125c7f617c3328c65839", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5OTkyNw==", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395099927", "bodyText": "sure.", "author": "gabru-md", "createdAt": "2020-03-19T15:10:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MzgxMA=="}], "type": "inlineReview"}, {"oid": "6b12da6e28763832f81fec1728801fc16c23ca18", "url": "https://github.com/HubSpot/jinjava/commit/6b12da6e28763832f81fec1728801fc16c23ca18", "message": "adds getOrDefaultToken to Token.java", "committedDate": "2020-03-22T16:42:42Z", "type": "commit"}, {"oid": "313d956e5e186d90ed283c7f9a0ab1892d1daa04", "url": "https://github.com/HubSpot/jinjava/commit/313d956e5e186d90ed283c7f9a0ab1892d1daa04", "message": "removes popCurrent() from Tests", "committedDate": "2020-03-22T16:52:53Z", "type": "commit"}, {"oid": "9610f1a002366b9b959ba2256ff76056ed71cda6", "url": "https://github.com/HubSpot/jinjava/commit/9610f1a002366b9b959ba2256ff76056ed71cda6", "message": "removes unnecessary variables", "committedDate": "2020-03-27T11:27:42Z", "type": "commit"}]}