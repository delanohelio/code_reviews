{"pr_number": 1310, "pr_title": "HBASE-23957 [flakey test] client.TestMultiParallel fails to read hbas\u2026", "pr_author": "qiaoandxiang", "pr_createdAt": "2020-03-18T23:19:04Z", "pr_url": "https://github.com/apache/hbase/pull/1310", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5ODg1Nw==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r394698857", "body": "Does it have to be static? Can these be done in @Before per test?", "bodyText": "Does it have to be static? Can these be done in @before per test?", "bodyHTML": "<p dir=\"auto\">Does it have to be static? Can these be done in <a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/before/hovercard\" href=\"https://github.com/before\">@before</a> per test?</p>", "author": "saintstack", "createdAt": "2020-03-18T23:34:42Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java", "diffHunk": "@@ -65,19 +67,47 @@\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private final Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n-  private final Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n-  private final Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n+  private static Path newCnfPath, newCnf2Path, newCnf3Path;", "originalCommit": "d63899057271ec7b2f2bb124d7f59548453be86b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwOTgxMQ==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r394709811", "bodyText": "There are shared across all test cases and just need  to be initialized once.", "author": "qiaoandxiang", "createdAt": "2020-03-19T00:12:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5ODg1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "59e4fa1318244e34319e32d8e3fa5aab8accba6b", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex 46a69fe141..1255661c07 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -67,38 +67,42 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private static Path newCnfPath, newCnf2Path, newCnf3Path;\n+  private static List<Path> newCnfPathes = new ArrayList<>();\n \n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n-    Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n-    Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n-    Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n-\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n     String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-    String dataBasePath = System.getProperty(HBaseCommonTestingUtility.BASE_TEST_DIRECTORY_KEY,\n-      HBaseCommonTestingUtility.DEFAULT_BASE_TEST_DIRECTORY);\n-\n+    String dataBasePath = TEST_UTIL.getBaseTestDir().toString();\n     String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n-    newCnfPath = Paths.get(dataPath + \"/hbase-site.xml\");\n-    newCnf2Path = Paths.get(dataPath + \"/hbase-site2.xml\");\n-    newCnf3Path = Paths.get(dataPath + \"/hbase-site3.xml\");\n-\n     // Copy Files from target/test-classes to data directory, this is to avoid messing up\n     // the config file under target/test-class, which is supposed to be immutable.\n     Files.createDirectories(Paths.get(dataPath));\n-    Files.copy(cnfPath, newCnfPath);\n-    Files.copy(cnf2Path, newCnf2Path);\n-    Files.copy(cnf3Path, newCnf3Path);\n \n-    // Add the new custom config file to Configuration\n-    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n+    for (String conf : confs) {\n+      Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes\" + conf);\n+      Path newConfPath = Paths.get(dataPath + conf);\n+      Files.copy(cnfPath, newConfPath);\n+      newCnfPathes.add(newConfPath);\n+    }\n \n     TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT, 0);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 60000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, 120000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 2);\n     TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY, 0);\n+\n+    // Add the new custom config file to Configuration\n+    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n \n", "next_change": {"commit": "72fa7605843c19bb626e1370c84f330d1d946577", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex 1255661c07..bbcd31c109 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -106,11 +109,14 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n \n-    // The resources added to TEST_UTIL.conf is lost during Region Server Creation, hack it here\n-    // again.\n-    for (int i = 0; i < 2; i ++) {\n-      TEST_UTIL.getMiniHBaseCluster().getRegionServer(i).getConfiguration().\n-        addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n+    // the master Configuration. The create() just copies config params over, it does not do\n+    // a clone for a historic reason. Properties such as resources are lost during this process.\n+    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n+    // under test-data directory is added to RegionServer's configuration as a workaround.\n+    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n+      rsThread.getRegionServer().getConfiguration().addResource(\n+        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     }\n   }\n \n", "next_change": {"commit": "2200d1a5bd5f2cb072f410202c0196f764ab6212", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex bbcd31c109..0116a6e4a3 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -67,57 +61,19 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private static final int SERVER_CONFIG_INDEX  = 0;\n-  private static final int OVERWRITE_SERVER_CONFIG_INDEX  = 1;\n-  private static final int BACKUP_SERVER_CONFIG_INDEX  = 2;\n-  private static List<Path> newCnfPathes = new ArrayList<>();\n-\n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n-    // Before this change, the test will update hbase-site.xml under target/test-classes and\n-    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n-    // other testing cases at the same time, this update will break other testing cases so it will\n-    // be flakey in nature.\n-    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n-    // hbase-site.xml will be created under its test data directory, i.e,\n-    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n-    // config, new update will be applied to this new file and only visible to this specific test\n-    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n-\n-    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-\n-    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n-    // the config file under target/test-class, which is supposed to be immutable.\n-    Files.createDirectories(Paths.get(absoluteDataPath));\n-\n-    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n-    for (String conf : confs) {\n-      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(absoluteDataPath + conf);\n-      Files.copy(cnfPath, newConfPath);\n-      newCnfPathes.add(newConfPath);\n-    }\n \n+    setUpConfigurationFiles(TEST_UTIL);\n     TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT, 0);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 60000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, 120000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 2);\n     TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY, 0);\n \n-    // Add the new custom config file to Configuration\n-    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n-\n-    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n-    // the master Configuration. The create() just copies config params over, it does not do\n-    // a clone for a historic reason. Properties such as resources are lost during this process.\n-    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n-    // under test-data directory is added to RegionServer's configuration as a workaround.\n-    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n-      rsThread.getRegionServer().getConfiguration().addResource(\n-        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n-    }\n+    addResourceToRegionServerConfiguration(TEST_UTIL);\n   }\n \n   @Test\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5OTIzNA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r394699234", "body": "This is interesting. Do you not trust what you get from TEST_UTIL#getDataTestDir?", "bodyText": "This is interesting. Do you not trust what you get from TEST_UTIL#getDataTestDir?", "bodyHTML": "<p dir=\"auto\">This is interesting. Do you not trust what you get from TEST_UTIL#getDataTestDir?</p>", "author": "saintstack", "createdAt": "2020-03-18T23:35:51Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java", "diffHunk": "@@ -65,19 +67,47 @@\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private final Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n-  private final Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n-  private final Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n+  private static Path newCnfPath, newCnf2Path, newCnf3Path;\n \n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n+    Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n+    Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n+    Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n+\n+    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n+    String dataBasePath = System.getProperty(HBaseCommonTestingUtility.BASE_TEST_DIRECTORY_KEY,\n+      HBaseCommonTestingUtility.DEFAULT_BASE_TEST_DIRECTORY);", "originalCommit": "d63899057271ec7b2f2bb124d7f59548453be86b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcxMjQyMg==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r394712422", "bodyText": "The one from getDataTestDir is the absolute path. It needs to get the relative path here so need to have base directory. Maybe it should not expose such details from internal, let me wrap up an API from TEST_UTIL.", "author": "qiaoandxiang", "createdAt": "2020-03-19T00:15:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5OTIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExMzYxMA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395113610", "bodyText": "Hi @saintstack, I made HBaseCommonTestingUtility#getBaseTestDir public as I need this API to avoid hack the details of how base test dir is created in the testing code.", "author": "qiaoandxiang", "createdAt": "2020-03-19T15:28:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5OTIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4NTMzNQ==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395185335", "bodyText": "Sounds good.", "author": "saintstack", "createdAt": "2020-03-19T17:08:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5OTIzNA=="}], "type": "inlineReview", "revised_code": {"commit": "59e4fa1318244e34319e32d8e3fa5aab8accba6b", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex 46a69fe141..1255661c07 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -67,38 +67,42 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private static Path newCnfPath, newCnf2Path, newCnf3Path;\n+  private static List<Path> newCnfPathes = new ArrayList<>();\n \n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n-    Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n-    Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n-    Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n-\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n     String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-    String dataBasePath = System.getProperty(HBaseCommonTestingUtility.BASE_TEST_DIRECTORY_KEY,\n-      HBaseCommonTestingUtility.DEFAULT_BASE_TEST_DIRECTORY);\n-\n+    String dataBasePath = TEST_UTIL.getBaseTestDir().toString();\n     String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n-    newCnfPath = Paths.get(dataPath + \"/hbase-site.xml\");\n-    newCnf2Path = Paths.get(dataPath + \"/hbase-site2.xml\");\n-    newCnf3Path = Paths.get(dataPath + \"/hbase-site3.xml\");\n-\n     // Copy Files from target/test-classes to data directory, this is to avoid messing up\n     // the config file under target/test-class, which is supposed to be immutable.\n     Files.createDirectories(Paths.get(dataPath));\n-    Files.copy(cnfPath, newCnfPath);\n-    Files.copy(cnf2Path, newCnf2Path);\n-    Files.copy(cnf3Path, newCnf3Path);\n \n-    // Add the new custom config file to Configuration\n-    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n+    for (String conf : confs) {\n+      Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes\" + conf);\n+      Path newConfPath = Paths.get(dataPath + conf);\n+      Files.copy(cnfPath, newConfPath);\n+      newCnfPathes.add(newConfPath);\n+    }\n \n     TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT, 0);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 60000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, 120000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 2);\n     TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY, 0);\n+\n+    // Add the new custom config file to Configuration\n+    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n \n", "next_change": {"commit": "72fa7605843c19bb626e1370c84f330d1d946577", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex 1255661c07..bbcd31c109 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -106,11 +109,14 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n \n-    // The resources added to TEST_UTIL.conf is lost during Region Server Creation, hack it here\n-    // again.\n-    for (int i = 0; i < 2; i ++) {\n-      TEST_UTIL.getMiniHBaseCluster().getRegionServer(i).getConfiguration().\n-        addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n+    // the master Configuration. The create() just copies config params over, it does not do\n+    // a clone for a historic reason. Properties such as resources are lost during this process.\n+    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n+    // under test-data directory is added to RegionServer's configuration as a workaround.\n+    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n+      rsThread.getRegionServer().getConfiguration().addResource(\n+        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     }\n   }\n \n", "next_change": {"commit": "2200d1a5bd5f2cb072f410202c0196f764ab6212", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex bbcd31c109..0116a6e4a3 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -67,57 +61,19 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private static final int SERVER_CONFIG_INDEX  = 0;\n-  private static final int OVERWRITE_SERVER_CONFIG_INDEX  = 1;\n-  private static final int BACKUP_SERVER_CONFIG_INDEX  = 2;\n-  private static List<Path> newCnfPathes = new ArrayList<>();\n-\n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n-    // Before this change, the test will update hbase-site.xml under target/test-classes and\n-    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n-    // other testing cases at the same time, this update will break other testing cases so it will\n-    // be flakey in nature.\n-    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n-    // hbase-site.xml will be created under its test data directory, i.e,\n-    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n-    // config, new update will be applied to this new file and only visible to this specific test\n-    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n-\n-    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-\n-    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n-    // the config file under target/test-class, which is supposed to be immutable.\n-    Files.createDirectories(Paths.get(absoluteDataPath));\n-\n-    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n-    for (String conf : confs) {\n-      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(absoluteDataPath + conf);\n-      Files.copy(cnfPath, newConfPath);\n-      newCnfPathes.add(newConfPath);\n-    }\n \n+    setUpConfigurationFiles(TEST_UTIL);\n     TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT, 0);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 60000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, 120000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 2);\n     TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY, 0);\n \n-    // Add the new custom config file to Configuration\n-    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n-\n-    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n-    // the master Configuration. The create() just copies config params over, it does not do\n-    // a clone for a historic reason. Properties such as resources are lost during this process.\n-    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n-    // under test-data directory is added to RegionServer's configuration as a workaround.\n-    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n-      rsThread.getRegionServer().getConfiguration().addResource(\n-        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n-    }\n+    addResourceToRegionServerConfiguration(TEST_UTIL);\n   }\n \n   @Test\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5OTY1Nw==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r394699657", "body": "This is the dir above the test dir?", "bodyText": "This is the dir above the test dir?", "bodyHTML": "<p dir=\"auto\">This is the dir above the test dir?</p>", "author": "saintstack", "createdAt": "2020-03-18T23:37:07Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java", "diffHunk": "@@ -65,19 +67,47 @@\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private final Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n-  private final Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n-  private final Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n+  private static Path newCnfPath, newCnf2Path, newCnf3Path;\n \n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n+    Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n+    Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n+    Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n+\n+    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n+    String dataBasePath = System.getProperty(HBaseCommonTestingUtility.BASE_TEST_DIRECTORY_KEY,\n+      HBaseCommonTestingUtility.DEFAULT_BASE_TEST_DIRECTORY);\n+\n+    String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n+    newCnfPath = Paths.get(dataPath + \"/hbase-site.xml\");\n+    newCnf2Path = Paths.get(dataPath + \"/hbase-site2.xml\");\n+    newCnf3Path = Paths.get(dataPath + \"/hbase-site3.xml\");", "originalCommit": "d63899057271ec7b2f2bb124d7f59548453be86b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5OTg2Mg==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r394699862", "bodyText": "Is this inside the test dir?", "author": "saintstack", "createdAt": "2020-03-18T23:37:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5OTY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcxMzE4Nw==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r394713187", "bodyText": "Yeah, now the mutable hbase-site.xml goes to test-data dir instead of test-classes.", "author": "qiaoandxiang", "createdAt": "2020-03-19T00:16:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5OTY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyMTE1Ng==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r394721156", "bodyText": "Maybe in comment give example so can see better what is going in here.", "author": "saintstack", "createdAt": "2020-03-19T00:28:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5OTY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyMjEyNw==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r394722127", "bodyText": "Will add  more comments to explain why these changes are needed, thanks!", "author": "qiaoandxiang", "createdAt": "2020-03-19T00:32:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5OTY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExNDAwNA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395114004", "bodyText": "Comments are added to explain how it works and what is the cause for this change.", "author": "qiaoandxiang", "createdAt": "2020-03-19T15:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5OTY1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "59e4fa1318244e34319e32d8e3fa5aab8accba6b", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex 46a69fe141..1255661c07 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -67,38 +67,42 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private static Path newCnfPath, newCnf2Path, newCnf3Path;\n+  private static List<Path> newCnfPathes = new ArrayList<>();\n \n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n-    Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n-    Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n-    Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n-\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n     String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-    String dataBasePath = System.getProperty(HBaseCommonTestingUtility.BASE_TEST_DIRECTORY_KEY,\n-      HBaseCommonTestingUtility.DEFAULT_BASE_TEST_DIRECTORY);\n-\n+    String dataBasePath = TEST_UTIL.getBaseTestDir().toString();\n     String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n-    newCnfPath = Paths.get(dataPath + \"/hbase-site.xml\");\n-    newCnf2Path = Paths.get(dataPath + \"/hbase-site2.xml\");\n-    newCnf3Path = Paths.get(dataPath + \"/hbase-site3.xml\");\n-\n     // Copy Files from target/test-classes to data directory, this is to avoid messing up\n     // the config file under target/test-class, which is supposed to be immutable.\n     Files.createDirectories(Paths.get(dataPath));\n-    Files.copy(cnfPath, newCnfPath);\n-    Files.copy(cnf2Path, newCnf2Path);\n-    Files.copy(cnf3Path, newCnf3Path);\n \n-    // Add the new custom config file to Configuration\n-    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n+    for (String conf : confs) {\n+      Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes\" + conf);\n+      Path newConfPath = Paths.get(dataPath + conf);\n+      Files.copy(cnfPath, newConfPath);\n+      newCnfPathes.add(newConfPath);\n+    }\n \n     TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT, 0);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 60000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, 120000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 2);\n     TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY, 0);\n+\n+    // Add the new custom config file to Configuration\n+    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n \n", "next_change": {"commit": "72fa7605843c19bb626e1370c84f330d1d946577", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex 1255661c07..bbcd31c109 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -106,11 +109,14 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n \n-    // The resources added to TEST_UTIL.conf is lost during Region Server Creation, hack it here\n-    // again.\n-    for (int i = 0; i < 2; i ++) {\n-      TEST_UTIL.getMiniHBaseCluster().getRegionServer(i).getConfiguration().\n-        addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n+    // the master Configuration. The create() just copies config params over, it does not do\n+    // a clone for a historic reason. Properties such as resources are lost during this process.\n+    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n+    // under test-data directory is added to RegionServer's configuration as a workaround.\n+    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n+      rsThread.getRegionServer().getConfiguration().addResource(\n+        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     }\n   }\n \n", "next_change": {"commit": "2200d1a5bd5f2cb072f410202c0196f764ab6212", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex bbcd31c109..0116a6e4a3 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -67,57 +61,19 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private static final int SERVER_CONFIG_INDEX  = 0;\n-  private static final int OVERWRITE_SERVER_CONFIG_INDEX  = 1;\n-  private static final int BACKUP_SERVER_CONFIG_INDEX  = 2;\n-  private static List<Path> newCnfPathes = new ArrayList<>();\n-\n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n-    // Before this change, the test will update hbase-site.xml under target/test-classes and\n-    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n-    // other testing cases at the same time, this update will break other testing cases so it will\n-    // be flakey in nature.\n-    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n-    // hbase-site.xml will be created under its test data directory, i.e,\n-    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n-    // config, new update will be applied to this new file and only visible to this specific test\n-    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n-\n-    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-\n-    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n-    // the config file under target/test-class, which is supposed to be immutable.\n-    Files.createDirectories(Paths.get(absoluteDataPath));\n-\n-    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n-    for (String conf : confs) {\n-      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(absoluteDataPath + conf);\n-      Files.copy(cnfPath, newConfPath);\n-      newCnfPathes.add(newConfPath);\n-    }\n \n+    setUpConfigurationFiles(TEST_UTIL);\n     TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT, 0);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 60000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, 120000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 2);\n     TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY, 0);\n \n-    // Add the new custom config file to Configuration\n-    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n-\n-    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n-    // the master Configuration. The create() just copies config params over, it does not do\n-    // a clone for a historic reason. Properties such as resources are lost during this process.\n-    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n-    // under test-data directory is added to RegionServer's configuration as a workaround.\n-    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n-      rsThread.getRegionServer().getConfiguration().addResource(\n-        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n-    }\n+    addResourceToRegionServerConfiguration(TEST_UTIL);\n   }\n \n   @Test\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwMDIwNg==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r394700206", "body": "loop?", "bodyText": "loop?", "bodyHTML": "<p dir=\"auto\">loop?</p>", "author": "saintstack", "createdAt": "2020-03-18T23:38:44Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java", "diffHunk": "@@ -65,19 +67,47 @@\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private final Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n-  private final Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n-  private final Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n+  private static Path newCnfPath, newCnf2Path, newCnf3Path;\n \n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n+    Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n+    Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n+    Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n+\n+    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n+    String dataBasePath = System.getProperty(HBaseCommonTestingUtility.BASE_TEST_DIRECTORY_KEY,\n+      HBaseCommonTestingUtility.DEFAULT_BASE_TEST_DIRECTORY);\n+\n+    String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n+    newCnfPath = Paths.get(dataPath + \"/hbase-site.xml\");\n+    newCnf2Path = Paths.get(dataPath + \"/hbase-site2.xml\");\n+    newCnf3Path = Paths.get(dataPath + \"/hbase-site3.xml\");\n+\n+    // Copy Files from target/test-classes to data directory, this is to avoid messing up\n+    // the config file under target/test-class, which is supposed to be immutable.\n+    Files.createDirectories(Paths.get(dataPath));\n+    Files.copy(cnfPath, newCnfPath);\n+    Files.copy(cnf2Path, newCnf2Path);\n+    Files.copy(cnf3Path, newCnf3Path);", "originalCommit": "d63899057271ec7b2f2bb124d7f59548453be86b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcxNjQzNw==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r394716437", "bodyText": "Does not seem have a good way to make these in a loop.", "author": "qiaoandxiang", "createdAt": "2020-03-19T00:20:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwMDIwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyNjk0Ng==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r394726946", "bodyText": "Just have a new idea and will make it a loop to remove duplicates.", "author": "qiaoandxiang", "createdAt": "2020-03-19T00:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwMDIwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExNDM4Nw==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395114387", "bodyText": "Improve the code a bit to avoid duplicate code.", "author": "qiaoandxiang", "createdAt": "2020-03-19T15:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwMDIwNg=="}], "type": "inlineReview", "revised_code": {"commit": "59e4fa1318244e34319e32d8e3fa5aab8accba6b", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex 46a69fe141..1255661c07 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -67,38 +67,42 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private static Path newCnfPath, newCnf2Path, newCnf3Path;\n+  private static List<Path> newCnfPathes = new ArrayList<>();\n \n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n-    Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n-    Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n-    Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n-\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n     String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-    String dataBasePath = System.getProperty(HBaseCommonTestingUtility.BASE_TEST_DIRECTORY_KEY,\n-      HBaseCommonTestingUtility.DEFAULT_BASE_TEST_DIRECTORY);\n-\n+    String dataBasePath = TEST_UTIL.getBaseTestDir().toString();\n     String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n-    newCnfPath = Paths.get(dataPath + \"/hbase-site.xml\");\n-    newCnf2Path = Paths.get(dataPath + \"/hbase-site2.xml\");\n-    newCnf3Path = Paths.get(dataPath + \"/hbase-site3.xml\");\n-\n     // Copy Files from target/test-classes to data directory, this is to avoid messing up\n     // the config file under target/test-class, which is supposed to be immutable.\n     Files.createDirectories(Paths.get(dataPath));\n-    Files.copy(cnfPath, newCnfPath);\n-    Files.copy(cnf2Path, newCnf2Path);\n-    Files.copy(cnf3Path, newCnf3Path);\n \n-    // Add the new custom config file to Configuration\n-    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n+    for (String conf : confs) {\n+      Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes\" + conf);\n+      Path newConfPath = Paths.get(dataPath + conf);\n+      Files.copy(cnfPath, newConfPath);\n+      newCnfPathes.add(newConfPath);\n+    }\n \n     TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT, 0);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 60000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, 120000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 2);\n     TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY, 0);\n+\n+    // Add the new custom config file to Configuration\n+    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n \n", "next_change": {"commit": "72fa7605843c19bb626e1370c84f330d1d946577", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex 1255661c07..bbcd31c109 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -106,11 +109,14 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n \n-    // The resources added to TEST_UTIL.conf is lost during Region Server Creation, hack it here\n-    // again.\n-    for (int i = 0; i < 2; i ++) {\n-      TEST_UTIL.getMiniHBaseCluster().getRegionServer(i).getConfiguration().\n-        addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n+    // the master Configuration. The create() just copies config params over, it does not do\n+    // a clone for a historic reason. Properties such as resources are lost during this process.\n+    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n+    // under test-data directory is added to RegionServer's configuration as a workaround.\n+    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n+      rsThread.getRegionServer().getConfiguration().addResource(\n+        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     }\n   }\n \n", "next_change": {"commit": "2200d1a5bd5f2cb072f410202c0196f764ab6212", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex bbcd31c109..0116a6e4a3 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -67,57 +61,19 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private static final int SERVER_CONFIG_INDEX  = 0;\n-  private static final int OVERWRITE_SERVER_CONFIG_INDEX  = 1;\n-  private static final int BACKUP_SERVER_CONFIG_INDEX  = 2;\n-  private static List<Path> newCnfPathes = new ArrayList<>();\n-\n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n-    // Before this change, the test will update hbase-site.xml under target/test-classes and\n-    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n-    // other testing cases at the same time, this update will break other testing cases so it will\n-    // be flakey in nature.\n-    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n-    // hbase-site.xml will be created under its test data directory, i.e,\n-    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n-    // config, new update will be applied to this new file and only visible to this specific test\n-    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n-\n-    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-\n-    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n-    // the config file under target/test-class, which is supposed to be immutable.\n-    Files.createDirectories(Paths.get(absoluteDataPath));\n-\n-    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n-    for (String conf : confs) {\n-      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(absoluteDataPath + conf);\n-      Files.copy(cnfPath, newConfPath);\n-      newCnfPathes.add(newConfPath);\n-    }\n \n+    setUpConfigurationFiles(TEST_UTIL);\n     TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT, 0);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 60000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, 120000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 2);\n     TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY, 0);\n \n-    // Add the new custom config file to Configuration\n-    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n-\n-    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n-    // the master Configuration. The create() just copies config params over, it does not do\n-    // a clone for a historic reason. Properties such as resources are lost during this process.\n-    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n-    // under test-data directory is added to RegionServer's configuration as a workaround.\n-    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n-      rsThread.getRegionServer().getConfiguration().addResource(\n-        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n-    }\n+    addResourceToRegionServerConfiguration(TEST_UTIL);\n   }\n \n   @Test\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwMDQ4Mw==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r394700483", "body": "Did this get copied into the dir above? Which part?", "bodyText": "Did this get copied into the dir above? Which part?", "bodyHTML": "<p dir=\"auto\">Did this get copied into the dir above? Which part?</p>", "author": "saintstack", "createdAt": "2020-03-18T23:39:41Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java", "diffHunk": "@@ -65,19 +67,47 @@\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private final Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n-  private final Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n-  private final Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n+  private static Path newCnfPath, newCnf2Path, newCnf3Path;\n \n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n+    Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n+    Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n+    Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n+\n+    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n+    String dataBasePath = System.getProperty(HBaseCommonTestingUtility.BASE_TEST_DIRECTORY_KEY,\n+      HBaseCommonTestingUtility.DEFAULT_BASE_TEST_DIRECTORY);\n+\n+    String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n+    newCnfPath = Paths.get(dataPath + \"/hbase-site.xml\");\n+    newCnf2Path = Paths.get(dataPath + \"/hbase-site2.xml\");\n+    newCnf3Path = Paths.get(dataPath + \"/hbase-site3.xml\");\n+\n+    // Copy Files from target/test-classes to data directory, this is to avoid messing up\n+    // the config file under target/test-class, which is supposed to be immutable.\n+    Files.createDirectories(Paths.get(dataPath));\n+    Files.copy(cnfPath, newCnfPath);\n+    Files.copy(cnf2Path, newCnf2Path);\n+    Files.copy(cnf3Path, newCnf3Path);\n+\n+    // Add the new custom config file to Configuration\n+    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));", "originalCommit": "d63899057271ec7b2f2bb124d7f59548453be86b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcxNTM1Mw==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r394715353", "bodyText": "yeah, the above copies hbase-site.xml from test-classes to test-data, then the copy under test-data is added to config resources. When hbase-site.xml under test-data is updated, Configuration can be reloaded to include changes.", "author": "qiaoandxiang", "createdAt": "2020-03-19T00:19:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwMDQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExNTkwMQ==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395115901", "bodyText": "So there are three resources for the config now, the default are\nhbase-defaults.xml/hbase-site.xml under test-classes, which are immutable and shared across different testing cases. hbase-site.xml under test-data is per test case and only this file will be changed to avoid bumping into other tests.", "author": "qiaoandxiang", "createdAt": "2020-03-19T15:31:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwMDQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4NTc4MA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395185780", "bodyText": "Hurray", "author": "saintstack", "createdAt": "2020-03-19T17:09:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwMDQ4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "59e4fa1318244e34319e32d8e3fa5aab8accba6b", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex 46a69fe141..1255661c07 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -67,38 +67,42 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private static Path newCnfPath, newCnf2Path, newCnf3Path;\n+  private static List<Path> newCnfPathes = new ArrayList<>();\n \n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n-    Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n-    Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n-    Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n-\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n     String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-    String dataBasePath = System.getProperty(HBaseCommonTestingUtility.BASE_TEST_DIRECTORY_KEY,\n-      HBaseCommonTestingUtility.DEFAULT_BASE_TEST_DIRECTORY);\n-\n+    String dataBasePath = TEST_UTIL.getBaseTestDir().toString();\n     String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n-    newCnfPath = Paths.get(dataPath + \"/hbase-site.xml\");\n-    newCnf2Path = Paths.get(dataPath + \"/hbase-site2.xml\");\n-    newCnf3Path = Paths.get(dataPath + \"/hbase-site3.xml\");\n-\n     // Copy Files from target/test-classes to data directory, this is to avoid messing up\n     // the config file under target/test-class, which is supposed to be immutable.\n     Files.createDirectories(Paths.get(dataPath));\n-    Files.copy(cnfPath, newCnfPath);\n-    Files.copy(cnf2Path, newCnf2Path);\n-    Files.copy(cnf3Path, newCnf3Path);\n \n-    // Add the new custom config file to Configuration\n-    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n+    for (String conf : confs) {\n+      Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes\" + conf);\n+      Path newConfPath = Paths.get(dataPath + conf);\n+      Files.copy(cnfPath, newConfPath);\n+      newCnfPathes.add(newConfPath);\n+    }\n \n     TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT, 0);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 60000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, 120000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 2);\n     TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY, 0);\n+\n+    // Add the new custom config file to Configuration\n+    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n \n", "next_change": {"commit": "72fa7605843c19bb626e1370c84f330d1d946577", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex 1255661c07..bbcd31c109 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -106,11 +109,14 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n \n-    // The resources added to TEST_UTIL.conf is lost during Region Server Creation, hack it here\n-    // again.\n-    for (int i = 0; i < 2; i ++) {\n-      TEST_UTIL.getMiniHBaseCluster().getRegionServer(i).getConfiguration().\n-        addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n+    // the master Configuration. The create() just copies config params over, it does not do\n+    // a clone for a historic reason. Properties such as resources are lost during this process.\n+    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n+    // under test-data directory is added to RegionServer's configuration as a workaround.\n+    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n+      rsThread.getRegionServer().getConfiguration().addResource(\n+        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     }\n   }\n \n", "next_change": {"commit": "2200d1a5bd5f2cb072f410202c0196f764ab6212", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex bbcd31c109..0116a6e4a3 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -67,57 +61,19 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private static final int SERVER_CONFIG_INDEX  = 0;\n-  private static final int OVERWRITE_SERVER_CONFIG_INDEX  = 1;\n-  private static final int BACKUP_SERVER_CONFIG_INDEX  = 2;\n-  private static List<Path> newCnfPathes = new ArrayList<>();\n-\n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n-    // Before this change, the test will update hbase-site.xml under target/test-classes and\n-    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n-    // other testing cases at the same time, this update will break other testing cases so it will\n-    // be flakey in nature.\n-    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n-    // hbase-site.xml will be created under its test data directory, i.e,\n-    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n-    // config, new update will be applied to this new file and only visible to this specific test\n-    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n-\n-    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-\n-    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n-    // the config file under target/test-class, which is supposed to be immutable.\n-    Files.createDirectories(Paths.get(absoluteDataPath));\n-\n-    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n-    for (String conf : confs) {\n-      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(absoluteDataPath + conf);\n-      Files.copy(cnfPath, newConfPath);\n-      newCnfPathes.add(newConfPath);\n-    }\n \n+    setUpConfigurationFiles(TEST_UTIL);\n     TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT, 0);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 60000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, 120000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 2);\n     TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY, 0);\n \n-    // Add the new custom config file to Configuration\n-    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n-\n-    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n-    // the master Configuration. The create() just copies config params over, it does not do\n-    // a clone for a historic reason. Properties such as resources are lost during this process.\n-    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n-    // under test-data directory is added to RegionServer's configuration as a workaround.\n-    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n-      rsThread.getRegionServer().getConfiguration().addResource(\n-        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n-    }\n+    addResourceToRegionServerConfiguration(TEST_UTIL);\n   }\n \n   @Test\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwMDY5MQ==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r394700691", "body": "Interesting. Can we fix the base problem? Good find though.", "bodyText": "Interesting. Can we fix the base problem? Good find though.", "bodyHTML": "<p dir=\"auto\">Interesting. Can we fix the base problem? Good find though.</p>", "author": "saintstack", "createdAt": "2020-03-18T23:40:26Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java", "diffHunk": "@@ -65,19 +67,47 @@\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private final Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n-  private final Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n-  private final Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n+  private static Path newCnfPath, newCnf2Path, newCnf3Path;\n \n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n+    Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n+    Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n+    Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n+\n+    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n+    String dataBasePath = System.getProperty(HBaseCommonTestingUtility.BASE_TEST_DIRECTORY_KEY,\n+      HBaseCommonTestingUtility.DEFAULT_BASE_TEST_DIRECTORY);\n+\n+    String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n+    newCnfPath = Paths.get(dataPath + \"/hbase-site.xml\");\n+    newCnf2Path = Paths.get(dataPath + \"/hbase-site2.xml\");\n+    newCnf3Path = Paths.get(dataPath + \"/hbase-site3.xml\");\n+\n+    // Copy Files from target/test-classes to data directory, this is to avoid messing up\n+    // the config file under target/test-class, which is supposed to be immutable.\n+    Files.createDirectories(Paths.get(dataPath));\n+    Files.copy(cnfPath, newCnfPath);\n+    Files.copy(cnf2Path, newCnf2Path);\n+    Files.copy(cnf3Path, newCnf3Path);\n+\n+    // Add the new custom config file to Configuration\n+    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+\n     TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT, 0);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 60000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, 120000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 2);\n     TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY, 0);\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n+\n+    // The resources added to TEST_UTIL.conf is lost during Region Server Creation, hack it here\n+    // again.\n+    for (int i = 0; i < 2; i ++) {\n+      TEST_UTIL.getMiniHBaseCluster().getRegionServer(i).getConfiguration().\n+        addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));", "originalCommit": "d63899057271ec7b2f2bb124d7f59548453be86b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyMTcyNA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r394721724", "bodyText": "The issue is like that, the following code tries to clone a copy of conf for region servers. However, it is not really a clone, it just copies attributes over and other infos such as resources are lost which is important to test the updated config for region servers. Check the history of why cloning Configuration is not used (the clone one was used before and got reverted). Adding another method in HBaseConfiguration for this testing purpose seems an overkill and causes confusion.  Hence the hack in testing code instead of making changes in common code.\nhttps://github.com/apache/hbase/blob/master/hbase-server/src/test/java/org/apache/hadoop/hbase/MiniHBaseCluster.java#L246", "author": "qiaoandxiang", "createdAt": "2020-03-19T00:30:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwMDY5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4NjQyMQ==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395186421", "bodyText": "oh... i remember that. Ok. Add comment here to explain why you have to do this. Good stuff.", "author": "saintstack", "createdAt": "2020-03-19T17:10:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwMDY5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "59e4fa1318244e34319e32d8e3fa5aab8accba6b", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex 46a69fe141..1255661c07 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -67,38 +67,42 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private static Path newCnfPath, newCnf2Path, newCnf3Path;\n+  private static List<Path> newCnfPathes = new ArrayList<>();\n \n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n-    Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n-    Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n-    Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n-\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n     String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-    String dataBasePath = System.getProperty(HBaseCommonTestingUtility.BASE_TEST_DIRECTORY_KEY,\n-      HBaseCommonTestingUtility.DEFAULT_BASE_TEST_DIRECTORY);\n-\n+    String dataBasePath = TEST_UTIL.getBaseTestDir().toString();\n     String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n-    newCnfPath = Paths.get(dataPath + \"/hbase-site.xml\");\n-    newCnf2Path = Paths.get(dataPath + \"/hbase-site2.xml\");\n-    newCnf3Path = Paths.get(dataPath + \"/hbase-site3.xml\");\n-\n     // Copy Files from target/test-classes to data directory, this is to avoid messing up\n     // the config file under target/test-class, which is supposed to be immutable.\n     Files.createDirectories(Paths.get(dataPath));\n-    Files.copy(cnfPath, newCnfPath);\n-    Files.copy(cnf2Path, newCnf2Path);\n-    Files.copy(cnf3Path, newCnf3Path);\n \n-    // Add the new custom config file to Configuration\n-    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n+    for (String conf : confs) {\n+      Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes\" + conf);\n+      Path newConfPath = Paths.get(dataPath + conf);\n+      Files.copy(cnfPath, newConfPath);\n+      newCnfPathes.add(newConfPath);\n+    }\n \n     TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT, 0);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 60000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, 120000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 2);\n     TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY, 0);\n+\n+    // Add the new custom config file to Configuration\n+    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n \n", "next_change": {"commit": "72fa7605843c19bb626e1370c84f330d1d946577", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex 1255661c07..bbcd31c109 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -106,11 +109,14 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n \n-    // The resources added to TEST_UTIL.conf is lost during Region Server Creation, hack it here\n-    // again.\n-    for (int i = 0; i < 2; i ++) {\n-      TEST_UTIL.getMiniHBaseCluster().getRegionServer(i).getConfiguration().\n-        addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n+    // the master Configuration. The create() just copies config params over, it does not do\n+    // a clone for a historic reason. Properties such as resources are lost during this process.\n+    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n+    // under test-data directory is added to RegionServer's configuration as a workaround.\n+    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n+      rsThread.getRegionServer().getConfiguration().addResource(\n+        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     }\n   }\n \n", "next_change": {"commit": "2200d1a5bd5f2cb072f410202c0196f764ab6212", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex bbcd31c109..0116a6e4a3 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -67,57 +61,19 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private static final int SERVER_CONFIG_INDEX  = 0;\n-  private static final int OVERWRITE_SERVER_CONFIG_INDEX  = 1;\n-  private static final int BACKUP_SERVER_CONFIG_INDEX  = 2;\n-  private static List<Path> newCnfPathes = new ArrayList<>();\n-\n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n-    // Before this change, the test will update hbase-site.xml under target/test-classes and\n-    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n-    // other testing cases at the same time, this update will break other testing cases so it will\n-    // be flakey in nature.\n-    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n-    // hbase-site.xml will be created under its test data directory, i.e,\n-    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n-    // config, new update will be applied to this new file and only visible to this specific test\n-    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n-\n-    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-\n-    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n-    // the config file under target/test-class, which is supposed to be immutable.\n-    Files.createDirectories(Paths.get(absoluteDataPath));\n-\n-    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n-    for (String conf : confs) {\n-      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(absoluteDataPath + conf);\n-      Files.copy(cnfPath, newConfPath);\n-      newCnfPathes.add(newConfPath);\n-    }\n \n+    setUpConfigurationFiles(TEST_UTIL);\n     TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT, 0);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 60000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, 120000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 2);\n     TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY, 0);\n \n-    // Add the new custom config file to Configuration\n-    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n-\n-    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n-    // the master Configuration. The create() just copies config params over, it does not do\n-    // a clone for a historic reason. Properties such as resources are lost during this process.\n-    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n-    // under test-data directory is added to RegionServer's configuration as a workaround.\n-    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n-      rsThread.getRegionServer().getConfiguration().addResource(\n-        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n-    }\n+    addResourceToRegionServerConfiguration(TEST_UTIL);\n   }\n \n   @Test\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwMDk4MA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r394700980", "body": "Duped code. Any way of sharing ?", "bodyText": "Duped code. Any way of sharing ?", "bodyHTML": "<p dir=\"auto\">Duped code. Any way of sharing ?</p>", "author": "saintstack", "createdAt": "2020-03-18T23:41:25Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java", "diffHunk": "@@ -47,31 +49,56 @@\n   private static final Logger LOG = LoggerFactory.getLogger(TestUpdateConfiguration.class);\n   private final static HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n \n+  private static Path newCnfPath, newCnf2Path, newCnf3Path;\n+\n   @BeforeClass\n   public static void setup() throws Exception {\n-    // Set master number and use default values for other options.\n+    Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n+    Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n+    Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n+\n+    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n+    String dataBasePath = System.getProperty(HBaseCommonTestingUtility.BASE_TEST_DIRECTORY_KEY,\n+      HBaseCommonTestingUtility.DEFAULT_BASE_TEST_DIRECTORY);\n+\n+    String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n+    newCnfPath = Paths.get(dataPath + \"/hbase-site.xml\");\n+    newCnf2Path = Paths.get(dataPath + \"/hbase-site2.xml\");\n+    newCnf3Path = Paths.get(dataPath + \"/hbase-site3.xml\");\n+\n+    // Copy Files from target/test-classes to data directory, this is to avoid messing up\n+    // the config file under target/test-class, which is supposed to be immutable.\n+    Files.createDirectories(Paths.get(dataPath));\n+    Files.copy(cnfPath, newCnfPath);\n+    Files.copy(cnf2Path, newCnf2Path);\n+    Files.copy(cnf3Path, newCnf3Path);", "originalCommit": "d63899057271ec7b2f2bb124d7f59548453be86b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcxNzQzMw==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r394717433", "bodyText": "Thought about it, let me come back to see if there is good way to share code between these two testing classes.", "author": "qiaoandxiang", "createdAt": "2020-03-19T00:21:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwMDk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExNjQ3MQ==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395116471", "bodyText": "Will leave it as it is now, do not look that bad after changing to loop, :)", "author": "qiaoandxiang", "createdAt": "2020-03-19T15:31:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwMDk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4NjYxMQ==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395186611", "bodyText": "Sweet", "author": "saintstack", "createdAt": "2020-03-19T17:10:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwMDk4MA=="}], "type": "inlineReview", "revised_code": {"commit": "59e4fa1318244e34319e32d8e3fa5aab8accba6b", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\nindex 5957f8ebe1..5452b83068 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n", "chunk": "@@ -49,29 +51,34 @@ public class TestUpdateConfiguration {\n   private static final Logger LOG = LoggerFactory.getLogger(TestUpdateConfiguration.class);\n   private final static HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n \n-  private static Path newCnfPath, newCnf2Path, newCnf3Path;\n+  private static List<Path> newCnfPathes = new ArrayList<>();\n \n   @BeforeClass\n   public static void setup() throws Exception {\n-    Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n-    Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n-    Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n-\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n     String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-    String dataBasePath = System.getProperty(HBaseCommonTestingUtility.BASE_TEST_DIRECTORY_KEY,\n-      HBaseCommonTestingUtility.DEFAULT_BASE_TEST_DIRECTORY);\n+    String dataBasePath = TEST_UTIL.getBaseTestDir().toString();\n \n     String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n-    newCnfPath = Paths.get(dataPath + \"/hbase-site.xml\");\n-    newCnf2Path = Paths.get(dataPath + \"/hbase-site2.xml\");\n-    newCnf3Path = Paths.get(dataPath + \"/hbase-site3.xml\");\n-\n     // Copy Files from target/test-classes to data directory, this is to avoid messing up\n     // the config file under target/test-class, which is supposed to be immutable.\n     Files.createDirectories(Paths.get(dataPath));\n-    Files.copy(cnfPath, newCnfPath);\n-    Files.copy(cnf2Path, newCnf2Path);\n-    Files.copy(cnf3Path, newCnf3Path);\n+\n+    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n+    for (String conf : confs) {\n+      Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes\" + conf);\n+      Path newConfPath = Paths.get(dataPath + conf);\n+      Files.copy(cnfPath, newConfPath);\n+      newCnfPathes.add(newConfPath);\n+    }\n \n     // Add the new custom config file to Configuration\n     TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n", "next_change": {"commit": "72fa7605843c19bb626e1370c84f330d1d946577", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\nindex 5452b83068..96ca45e271 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n", "chunk": "@@ -64,18 +69,17 @@ public class TestUpdateConfiguration {\n     // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n     // config, new update will be applied to this new file and only visible to this specific test\n     // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n+\n     String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-    String dataBasePath = TEST_UTIL.getBaseTestDir().toString();\n \n-    String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n-    // Copy Files from target/test-classes to data directory, this is to avoid messing up\n+    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n     // the config file under target/test-class, which is supposed to be immutable.\n-    Files.createDirectories(Paths.get(dataPath));\n+    Files.createDirectories(Paths.get(absoluteDataPath));\n \n     List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n     for (String conf : confs) {\n-      Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(dataPath + conf);\n+      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n+      Path newConfPath = Paths.get(absoluteDataPath + conf);\n       Files.copy(cnfPath, newConfPath);\n       newCnfPathes.add(newConfPath);\n     }\n", "next_change": {"commit": "2200d1a5bd5f2cb072f410202c0196f764ab6212", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\nindex 96ca45e271..f8406a99b1 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n", "chunk": "@@ -53,51 +45,12 @@ public class TestUpdateConfiguration {\n   private static final Logger LOG = LoggerFactory.getLogger(TestUpdateConfiguration.class);\n   private final static HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n \n-  private static final int SERVER_CONFIG_INDEX  = 0;\n-  private static final int OVERWRITE_SERVER_CONFIG_INDEX  = 1;\n-  private static final int BACKUP_SERVER_CONFIG_INDEX  = 2;\n-  private static List<Path> newCnfPathes = new ArrayList<>();\n-\n   @BeforeClass\n   public static void setup() throws Exception {\n-    // Before this change, the test will update hbase-site.xml under target/test-classes and\n-    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n-    // other testing cases at the same time, this update will break other testing cases so it will\n-    // be flakey in nature.\n-    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n-    // hbase-site.xml will be created under its test data directory, i.e,\n-    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n-    // config, new update will be applied to this new file and only visible to this specific test\n-    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n-\n-    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-\n-    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n-    // the config file under target/test-class, which is supposed to be immutable.\n-    Files.createDirectories(Paths.get(absoluteDataPath));\n-\n-    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n-    for (String conf : confs) {\n-      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(absoluteDataPath + conf);\n-      Files.copy(cnfPath, newConfPath);\n-      newCnfPathes.add(newConfPath);\n-    }\n-\n-    // Add the new custom config file to Configuration\n-    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    setUpConfigurationFiles(TEST_UTIL);\n     StartMiniClusterOption option = StartMiniClusterOption.builder().numMasters(2).build();\n     TEST_UTIL.startMiniCluster(option);\n-\n-    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n-    // the master Configuration. The create() just copies config params over, it does not do\n-    // a clone for a historic reason. Properties such as resources are lost during this process.\n-    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n-    // under test-data directory is added to RegionServer's configuration as a workaround.\n-    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n-      rsThread.getRegionServer().getConfiguration().addResource(\n-        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n-    }\n+    addResourceToRegionServerConfiguration(TEST_UTIL);\n   }\n \n   @Rule\n", "next_change": {"commit": "0ed5ab9de16a48a50d18f296a986bef7c53d1753", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\nindex f8406a99b1..8147f1374a 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n", "chunk": "@@ -58,7 +58,7 @@ public class TestUpdateConfiguration extends AbstractTestUpdateConfiguration {\n \n   @Test\n   public void testOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test \" + name.getMethodName());\n+    LOG.debug(\"Starting the test {}\", name.getMethodName());\n     Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName();\n     admin.updateConfiguration(server);\n", "next_change": null}]}}]}}, {"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\nindex 5452b83068..96ca45e271 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n", "chunk": "@@ -85,52 +89,67 @@ public class TestUpdateConfiguration {\n     StartMiniClusterOption option = StartMiniClusterOption.builder().numMasters(2).build();\n     TEST_UTIL.startMiniCluster(option);\n \n-    // The resources added to TEST_UTIL.conf is lost during Region Server Creation, hack it here\n-    // again.\n-    TEST_UTIL.getMiniHBaseCluster().getRegionServer(0).getConfiguration().\n-      addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n+    // the master Configuration. The create() just copies config params over, it does not do\n+    // a clone for a historic reason. Properties such as resources are lost during this process.\n+    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n+    // under test-data directory is added to RegionServer's configuration as a workaround.\n+    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n+      rsThread.getRegionServer().getConfiguration().addResource(\n+        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    }\n   }\n \n+  @Rule\n+  public TestName name = new TestName();\n+\n   @Test\n   public void testOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test testOnlineConfigChange\");\n+    LOG.debug(\"Starting the test \" + name.getMethodName());\n     Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName();\n     admin.updateConfiguration(server);\n   }\n \n-  @Test\n-  public void testMasterOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test testMasterOnlineConfigChange\");\n+  private void replaceHBaseSiteXML() throws IOException {\n     // make a backup of hbase-site.xml\n-    Files.copy(newCnfPathes.get(0), newCnfPathes.get(2), StandardCopyOption.REPLACE_EXISTING);\n+    Files.copy(newCnfPathes.get(SERVER_CONFIG_INDEX),\n+      newCnfPathes.get(BACKUP_SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n     // update hbase-site.xml by overwriting it\n-    Files.copy(newCnfPathes.get(1), newCnfPathes.get(0), StandardCopyOption.REPLACE_EXISTING);\n+    Files.copy(newCnfPathes.get(OVERWRITE_SERVER_CONFIG_INDEX),\n+      newCnfPathes.get(SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n+  }\n \n+  private void restoreHBaseSiteXML() throws IOException {\n+    // restore hbase-site.xml\n+    Files.copy(newCnfPathes.get(BACKUP_SERVER_CONFIG_INDEX),\n+      newCnfPathes.get(SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n+  }\n+\n+  @Test\n+  public void testMasterOnlineConfigChange() throws IOException {\n+    LOG.debug(\"Starting the test \" + name.getMethodName());\n+    replaceHBaseSiteXML();\n     Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getMaster().getServerName();\n     admin.updateConfiguration(server);\n     Configuration conf = TEST_UTIL.getMiniHBaseCluster().getMaster().getConfiguration();\n     int custom = conf.getInt(\"hbase.custom.config\", 0);\n     assertEquals(1000, custom);\n-    // restore hbase-site.xml\n-    Files.copy(newCnfPathes.get(2), newCnfPathes.get(0), StandardCopyOption.REPLACE_EXISTING);\n+    restoreHBaseSiteXML();\n   }\n \n   @Test\n   public void testAllOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test testAllOnlineConfigChange\");\n+    LOG.debug(\"Starting the test \" + name.getMethodName());\n     Admin admin = TEST_UTIL.getAdmin();\n     admin.updateConfiguration();\n   }\n \n   @Test\n   public void testAllCustomOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test testAllCustomOnlineConfigChange\");\n-    // make a backup of hbase-site.xml\n-    Files.copy(newCnfPathes.get(0), newCnfPathes.get(2), StandardCopyOption.REPLACE_EXISTING);\n-    // update hbase-site.xml by overwriting it\n-    Files.copy(newCnfPathes.get(1), newCnfPathes.get(0), StandardCopyOption.REPLACE_EXISTING);\n+    LOG.debug(\"Starting the test \" + name.getMethodName());\n+    replaceHBaseSiteXML();\n \n     Admin admin = TEST_UTIL.getAdmin();\n     admin.updateConfiguration();\n", "next_change": {"commit": "0ed5ab9de16a48a50d18f296a986bef7c53d1753", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\nindex 96ca45e271..8147f1374a 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n", "chunk": "@@ -148,7 +86,7 @@ public class TestUpdateConfiguration {\n \n   @Test\n   public void testAllCustomOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test \" + name.getMethodName());\n+    LOG.debug(\"Starting the test {}\", name.getMethodName());\n     replaceHBaseSiteXML();\n \n     Admin admin = TEST_UTIL.getAdmin();\n", "next_change": null}]}}]}}]}}, {"oid": "59e4fa1318244e34319e32d8e3fa5aab8accba6b", "url": "https://github.com/apache/hbase/commit/59e4fa1318244e34319e32d8e3fa5aab8accba6b", "message": "HBASE-23957 [flakey test] client.TestMultiParallel fails to read hbase-site.xml", "committedDate": "2020-03-19T15:22:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4NzE0Ng==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395187146", "body": "Good comment.", "bodyText": "Good comment.", "bodyHTML": "<p dir=\"auto\">Good comment.</p>", "author": "saintstack", "createdAt": "2020-03-19T17:11:35Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java", "diffHunk": "@@ -65,19 +67,51 @@\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private final Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n-  private final Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n-  private final Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n+  private static List<Path> newCnfPathes = new ArrayList<>();\n \n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.", "originalCommit": "59e4fa1318244e34319e32d8e3fa5aab8accba6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxNDcyMg==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395214722", "bodyText": "\ud83d\udc4d", "author": "ndimiduk", "createdAt": "2020-03-19T17:53:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4NzE0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "72fa7605843c19bb626e1370c84f330d1d946577", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex 1255661c07..bbcd31c109 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -67,6 +67,9 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n+  private static final int SERVER_CONFIG_INDEX  = 0;\n+  private static final int OVERWRITE_SERVER_CONFIG_INDEX  = 1;\n+  private static final int BACKUP_SERVER_CONFIG_INDEX  = 2;\n   private static List<Path> newCnfPathes = new ArrayList<>();\n \n   @BeforeClass\n", "next_change": {"commit": "2200d1a5bd5f2cb072f410202c0196f764ab6212", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex bbcd31c109..0116a6e4a3 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -67,57 +61,19 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private static final int SERVER_CONFIG_INDEX  = 0;\n-  private static final int OVERWRITE_SERVER_CONFIG_INDEX  = 1;\n-  private static final int BACKUP_SERVER_CONFIG_INDEX  = 2;\n-  private static List<Path> newCnfPathes = new ArrayList<>();\n-\n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n-    // Before this change, the test will update hbase-site.xml under target/test-classes and\n-    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n-    // other testing cases at the same time, this update will break other testing cases so it will\n-    // be flakey in nature.\n-    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n-    // hbase-site.xml will be created under its test data directory, i.e,\n-    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n-    // config, new update will be applied to this new file and only visible to this specific test\n-    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n-\n-    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-\n-    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n-    // the config file under target/test-class, which is supposed to be immutable.\n-    Files.createDirectories(Paths.get(absoluteDataPath));\n-\n-    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n-    for (String conf : confs) {\n-      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(absoluteDataPath + conf);\n-      Files.copy(cnfPath, newConfPath);\n-      newCnfPathes.add(newConfPath);\n-    }\n \n+    setUpConfigurationFiles(TEST_UTIL);\n     TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT, 0);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 60000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, 120000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 2);\n     TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY, 0);\n \n-    // Add the new custom config file to Configuration\n-    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n-\n-    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n-    // the master Configuration. The create() just copies config params over, it does not do\n-    // a clone for a historic reason. Properties such as resources are lost during this process.\n-    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n-    // under test-data directory is added to RegionServer's configuration as a workaround.\n-    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n-      rsThread.getRegionServer().getConfiguration().addResource(\n-        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n-    }\n+    addResourceToRegionServerConfiguration(TEST_UTIL);\n   }\n \n   @Test\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4NzQ0MQ==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395187441", "body": "Excellent", "bodyText": "Excellent", "bodyHTML": "<p dir=\"auto\">Excellent</p>", "author": "saintstack", "createdAt": "2020-03-19T17:12:02Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java", "diffHunk": "@@ -65,19 +67,51 @@\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private final Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n-  private final Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n-  private final Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n+  private static List<Path> newCnfPathes = new ArrayList<>();\n \n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.", "originalCommit": "59e4fa1318244e34319e32d8e3fa5aab8accba6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72fa7605843c19bb626e1370c84f330d1d946577", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex 1255661c07..bbcd31c109 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -80,17 +83,17 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n     // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n     // config, new update will be applied to this new file and only visible to this specific test\n     // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n+\n     String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-    String dataBasePath = TEST_UTIL.getBaseTestDir().toString();\n-    String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n-    // Copy Files from target/test-classes to data directory, this is to avoid messing up\n+\n+    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n     // the config file under target/test-class, which is supposed to be immutable.\n-    Files.createDirectories(Paths.get(dataPath));\n+    Files.createDirectories(Paths.get(absoluteDataPath));\n \n     List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n     for (String conf : confs) {\n-      Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(dataPath + conf);\n+      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n+      Path newConfPath = Paths.get(absoluteDataPath + conf);\n       Files.copy(cnfPath, newConfPath);\n       newCnfPathes.add(newConfPath);\n     }\n", "next_change": {"commit": "2200d1a5bd5f2cb072f410202c0196f764ab6212", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex bbcd31c109..0116a6e4a3 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -67,57 +61,19 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private static final int SERVER_CONFIG_INDEX  = 0;\n-  private static final int OVERWRITE_SERVER_CONFIG_INDEX  = 1;\n-  private static final int BACKUP_SERVER_CONFIG_INDEX  = 2;\n-  private static List<Path> newCnfPathes = new ArrayList<>();\n-\n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n-    // Before this change, the test will update hbase-site.xml under target/test-classes and\n-    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n-    // other testing cases at the same time, this update will break other testing cases so it will\n-    // be flakey in nature.\n-    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n-    // hbase-site.xml will be created under its test data directory, i.e,\n-    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n-    // config, new update will be applied to this new file and only visible to this specific test\n-    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n-\n-    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-\n-    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n-    // the config file under target/test-class, which is supposed to be immutable.\n-    Files.createDirectories(Paths.get(absoluteDataPath));\n-\n-    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n-    for (String conf : confs) {\n-      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(absoluteDataPath + conf);\n-      Files.copy(cnfPath, newConfPath);\n-      newCnfPathes.add(newConfPath);\n-    }\n \n+    setUpConfigurationFiles(TEST_UTIL);\n     TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT, 0);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 60000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, 120000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 2);\n     TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY, 0);\n \n-    // Add the new custom config file to Configuration\n-    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n-\n-    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n-    // the master Configuration. The create() just copies config params over, it does not do\n-    // a clone for a historic reason. Properties such as resources are lost during this process.\n-    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n-    // under test-data directory is added to RegionServer's configuration as a workaround.\n-    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n-      rsThread.getRegionServer().getConfiguration().addResource(\n-        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n-    }\n+    addResourceToRegionServerConfiguration(TEST_UTIL);\n   }\n \n   @Test\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMzM3MQ==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395213371", "body": "You sure you should change the privacy here? The javadoc comment here literally says \"Should not be used by the unit tests, hence its's private.\" Seems like callers are supposed to use `getDataTestDir`", "bodyText": "You sure you should change the privacy here? The javadoc comment here literally says \"Should not be used by the unit tests, hence its's private.\" Seems like callers are supposed to use getDataTestDir", "bodyHTML": "<p dir=\"auto\">You sure you should change the privacy here? The javadoc comment here literally says \"Should not be used by the unit tests, hence its's private.\" Seems like callers are supposed to use <code>getDataTestDir</code></p>", "author": "ndimiduk", "createdAt": "2020-03-19T17:51:39Z", "path": "hbase-common/src/test/java/org/apache/hadoop/hbase/HBaseCommonTestingUtility.java", "diffHunk": "@@ -207,7 +207,7 @@ boolean cleanupTestDir(final String subdir) {\n    *    Unit test will use a subdirectory of this directory.\n    * @see #setupDataTestDir()\n    */\n-  private Path getBaseTestDir() {\n+  public Path getBaseTestDir() {", "originalCommit": "59e4fa1318244e34319e32d8e3fa5aab8accba6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMxMTEyOA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395311128", "bodyText": "I will go back to check if getDataTestDir is enough for this test.", "author": "qiaoandxiang", "createdAt": "2020-03-19T20:48:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMzM3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2NjE3MA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395366170", "bodyText": "I debugged more and found that indeed this change is not needed.", "author": "qiaoandxiang", "createdAt": "2020-03-19T23:00:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMzM3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "72fa7605843c19bb626e1370c84f330d1d946577", "changed_code": [{"header": "diff --git a/hbase-common/src/test/java/org/apache/hadoop/hbase/HBaseCommonTestingUtility.java b/hbase-common/src/test/java/org/apache/hadoop/hbase/HBaseCommonTestingUtility.java\nindex d82f059fbc..e8a2a79dee 100644\n--- a/hbase-common/src/test/java/org/apache/hadoop/hbase/HBaseCommonTestingUtility.java\n+++ b/hbase-common/src/test/java/org/apache/hadoop/hbase/HBaseCommonTestingUtility.java\n", "chunk": "@@ -207,7 +207,7 @@ public class HBaseCommonTestingUtility {\n    *    Unit test will use a subdirectory of this directory.\n    * @see #setupDataTestDir()\n    */\n-  public Path getBaseTestDir() {\n+  private Path getBaseTestDir() {\n     String PathName = System.getProperty(\n         BASE_TEST_DIRECTORY_KEY, DEFAULT_BASE_TEST_DIRECTORY);\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxNTU2MA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395215560", "body": "Yikes! Can you use the `File` or `Path` APIs instead of doing string manipulation?\r\n\r\nWhy is a relative path necessary anyway?", "bodyText": "Yikes! Can you use the File or Path APIs instead of doing string manipulation?\nWhy is a relative path necessary anyway?", "bodyHTML": "<p dir=\"auto\">Yikes! Can you use the <code>File</code> or <code>Path</code> APIs instead of doing string manipulation?</p>\n<p dir=\"auto\">Why is a relative path necessary anyway?</p>", "author": "ndimiduk", "createdAt": "2020-03-19T17:55:14Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java", "diffHunk": "@@ -65,19 +67,51 @@\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private final Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n-  private final Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n-  private final Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n+  private static List<Path> newCnfPathes = new ArrayList<>();\n \n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n+    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n+    String dataBasePath = TEST_UTIL.getBaseTestDir().toString();\n+    String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));", "originalCommit": "59e4fa1318244e34319e32d8e3fa5aab8accba6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwNzI0Nw==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395307247", "bodyText": "I actually tried to use absolute path at first and run into exceptions. I did not dig further and backed to the relative path.\nLet me debug a bit more here and then getBaseTestDir can keep private.", "author": "qiaoandxiang", "createdAt": "2020-03-19T20:41:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxNTU2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2Njk3Mw==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395366973", "bodyText": "Yeah, just debugged and found this change is not needed. Will upload a new patch.", "author": "qiaoandxiang", "createdAt": "2020-03-19T23:03:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxNTU2MA=="}], "type": "inlineReview", "revised_code": {"commit": "72fa7605843c19bb626e1370c84f330d1d946577", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex 1255661c07..bbcd31c109 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -80,17 +83,17 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n     // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n     // config, new update will be applied to this new file and only visible to this specific test\n     // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n+\n     String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-    String dataBasePath = TEST_UTIL.getBaseTestDir().toString();\n-    String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n-    // Copy Files from target/test-classes to data directory, this is to avoid messing up\n+\n+    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n     // the config file under target/test-class, which is supposed to be immutable.\n-    Files.createDirectories(Paths.get(dataPath));\n+    Files.createDirectories(Paths.get(absoluteDataPath));\n \n     List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n     for (String conf : confs) {\n-      Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(dataPath + conf);\n+      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n+      Path newConfPath = Paths.get(absoluteDataPath + conf);\n       Files.copy(cnfPath, newConfPath);\n       newCnfPathes.add(newConfPath);\n     }\n", "next_change": {"commit": "2200d1a5bd5f2cb072f410202c0196f764ab6212", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex bbcd31c109..0116a6e4a3 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -67,57 +61,19 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private static final int SERVER_CONFIG_INDEX  = 0;\n-  private static final int OVERWRITE_SERVER_CONFIG_INDEX  = 1;\n-  private static final int BACKUP_SERVER_CONFIG_INDEX  = 2;\n-  private static List<Path> newCnfPathes = new ArrayList<>();\n-\n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n-    // Before this change, the test will update hbase-site.xml under target/test-classes and\n-    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n-    // other testing cases at the same time, this update will break other testing cases so it will\n-    // be flakey in nature.\n-    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n-    // hbase-site.xml will be created under its test data directory, i.e,\n-    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n-    // config, new update will be applied to this new file and only visible to this specific test\n-    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n-\n-    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-\n-    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n-    // the config file under target/test-class, which is supposed to be immutable.\n-    Files.createDirectories(Paths.get(absoluteDataPath));\n-\n-    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n-    for (String conf : confs) {\n-      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(absoluteDataPath + conf);\n-      Files.copy(cnfPath, newConfPath);\n-      newCnfPathes.add(newConfPath);\n-    }\n \n+    setUpConfigurationFiles(TEST_UTIL);\n     TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT, 0);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 60000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, 120000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 2);\n     TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY, 0);\n \n-    // Add the new custom config file to Configuration\n-    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n-\n-    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n-    // the master Configuration. The create() just copies config params over, it does not do\n-    // a clone for a historic reason. Properties such as resources are lost during this process.\n-    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n-    // under test-data directory is added to RegionServer's configuration as a workaround.\n-    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n-      rsThread.getRegionServer().getConfiguration().addResource(\n-        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n-    }\n+    addResourceToRegionServerConfiguration(TEST_UTIL);\n   }\n \n   @Test\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxNjY5Ng==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395216696", "body": "Please use the API of `Path` to build these. For example, `Path(Path parent, String child)` lets you create an instance from a base path plus a string for the child component.", "bodyText": "Please use the API of Path to build these. For example, Path(Path parent, String child) lets you create an instance from a base path plus a string for the child component.", "bodyHTML": "<p dir=\"auto\">Please use the API of <code>Path</code> to build these. For example, <code>Path(Path parent, String child)</code> lets you create an instance from a base path plus a string for the child component.</p>", "author": "ndimiduk", "createdAt": "2020-03-19T17:57:05Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java", "diffHunk": "@@ -65,19 +67,51 @@\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private final Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n-  private final Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n-  private final Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n+  private static List<Path> newCnfPathes = new ArrayList<>();\n \n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n+    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n+    String dataBasePath = TEST_UTIL.getBaseTestDir().toString();\n+    String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n+    // Copy Files from target/test-classes to data directory, this is to avoid messing up\n+    // the config file under target/test-class, which is supposed to be immutable.\n+    Files.createDirectories(Paths.get(dataPath));\n+\n+    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n+    for (String conf : confs) {\n+      Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes\" + conf);", "originalCommit": "59e4fa1318244e34319e32d8e3fa5aab8accba6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwNzQ0NA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395307444", "bodyText": "Let me change that.", "author": "qiaoandxiang", "createdAt": "2020-03-19T20:41:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxNjY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2OTc2NA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395369764", "bodyText": "Path here is the Jvm path, not the hadoop path, changed it to Paths.get() to be more maintainable.", "author": "qiaoandxiang", "createdAt": "2020-03-19T23:12:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxNjY5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "72fa7605843c19bb626e1370c84f330d1d946577", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex 1255661c07..bbcd31c109 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -80,17 +83,17 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n     // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n     // config, new update will be applied to this new file and only visible to this specific test\n     // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n+\n     String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-    String dataBasePath = TEST_UTIL.getBaseTestDir().toString();\n-    String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n-    // Copy Files from target/test-classes to data directory, this is to avoid messing up\n+\n+    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n     // the config file under target/test-class, which is supposed to be immutable.\n-    Files.createDirectories(Paths.get(dataPath));\n+    Files.createDirectories(Paths.get(absoluteDataPath));\n \n     List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n     for (String conf : confs) {\n-      Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(dataPath + conf);\n+      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n+      Path newConfPath = Paths.get(absoluteDataPath + conf);\n       Files.copy(cnfPath, newConfPath);\n       newCnfPathes.add(newConfPath);\n     }\n", "next_change": {"commit": "2200d1a5bd5f2cb072f410202c0196f764ab6212", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex bbcd31c109..0116a6e4a3 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -67,57 +61,19 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private static final int SERVER_CONFIG_INDEX  = 0;\n-  private static final int OVERWRITE_SERVER_CONFIG_INDEX  = 1;\n-  private static final int BACKUP_SERVER_CONFIG_INDEX  = 2;\n-  private static List<Path> newCnfPathes = new ArrayList<>();\n-\n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n-    // Before this change, the test will update hbase-site.xml under target/test-classes and\n-    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n-    // other testing cases at the same time, this update will break other testing cases so it will\n-    // be flakey in nature.\n-    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n-    // hbase-site.xml will be created under its test data directory, i.e,\n-    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n-    // config, new update will be applied to this new file and only visible to this specific test\n-    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n-\n-    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-\n-    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n-    // the config file under target/test-class, which is supposed to be immutable.\n-    Files.createDirectories(Paths.get(absoluteDataPath));\n-\n-    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n-    for (String conf : confs) {\n-      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(absoluteDataPath + conf);\n-      Files.copy(cnfPath, newConfPath);\n-      newCnfPathes.add(newConfPath);\n-    }\n \n+    setUpConfigurationFiles(TEST_UTIL);\n     TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT, 0);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 60000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, 120000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 2);\n     TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY, 0);\n \n-    // Add the new custom config file to Configuration\n-    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n-\n-    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n-    // the master Configuration. The create() just copies config params over, it does not do\n-    // a clone for a historic reason. Properties such as resources are lost during this process.\n-    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n-    // under test-data directory is added to RegionServer's configuration as a workaround.\n-    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n-      rsThread.getRegionServer().getConfiguration().addResource(\n-        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n-    }\n+    addResourceToRegionServerConfiguration(TEST_UTIL);\n   }\n \n   @Test\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyMDczOQ==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395220739", "body": "Two questions:\r\n1. can this test get away with starting only one region server instead of 2?\r\n2. can you use a non-indexed for-loop over `MiniHBaseCluster$getRegionServerThreads()` instead of an indexed for-loop?", "bodyText": "Two questions:\n\ncan this test get away with starting only one region server instead of 2?\ncan you use a non-indexed for-loop over MiniHBaseCluster$getRegionServerThreads() instead of an indexed for-loop?", "bodyHTML": "<p dir=\"auto\">Two questions:</p>\n<ol dir=\"auto\">\n<li>can this test get away with starting only one region server instead of 2?</li>\n<li>can you use a non-indexed for-loop over <code>MiniHBaseCluster$getRegionServerThreads()</code> instead of an indexed for-loop?</li>\n</ol>", "author": "ndimiduk", "createdAt": "2020-03-19T18:03:36Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java", "diffHunk": "@@ -65,19 +67,51 @@\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private final Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n-  private final Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n-  private final Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n+  private static List<Path> newCnfPathes = new ArrayList<>();\n \n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n+    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n+    String dataBasePath = TEST_UTIL.getBaseTestDir().toString();\n+    String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n+    // Copy Files from target/test-classes to data directory, this is to avoid messing up\n+    // the config file under target/test-class, which is supposed to be immutable.\n+    Files.createDirectories(Paths.get(dataPath));\n+\n+    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n+    for (String conf : confs) {\n+      Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes\" + conf);\n+      Path newConfPath = Paths.get(dataPath + conf);\n+      Files.copy(cnfPath, newConfPath);\n+      newCnfPathes.add(newConfPath);\n+    }\n+\n     TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT, 0);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 60000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, 120000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 2);\n     TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY, 0);\n+\n+    // Add the new custom config file to Configuration\n+    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n+\n+    // The resources added to TEST_UTIL.conf is lost during Region Server Creation, hack it here\n+    // again.\n+    for (int i = 0; i < 2; i ++) {", "originalCommit": "59e4fa1318244e34319e32d8e3fa5aab8accba6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwODI5Mg==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395308292", "bodyText": "Hmm, I think it is possible to use 1 region server. The original test uses 2 region servers so I kept that way.\nFor 2, yeah, definitely possible and I will make change in my next patch.", "author": "qiaoandxiang", "createdAt": "2020-03-19T20:43:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyMDczOQ=="}], "type": "inlineReview", "revised_code": {"commit": "72fa7605843c19bb626e1370c84f330d1d946577", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex 1255661c07..bbcd31c109 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -106,11 +109,14 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n \n-    // The resources added to TEST_UTIL.conf is lost during Region Server Creation, hack it here\n-    // again.\n-    for (int i = 0; i < 2; i ++) {\n-      TEST_UTIL.getMiniHBaseCluster().getRegionServer(i).getConfiguration().\n-        addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n+    // the master Configuration. The create() just copies config params over, it does not do\n+    // a clone for a historic reason. Properties such as resources are lost during this process.\n+    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n+    // under test-data directory is added to RegionServer's configuration as a workaround.\n+    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n+      rsThread.getRegionServer().getConfiguration().addResource(\n+        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     }\n   }\n \n", "next_change": {"commit": "2200d1a5bd5f2cb072f410202c0196f764ab6212", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex bbcd31c109..0116a6e4a3 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -67,57 +61,19 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestAsyncClusterAdminApi.class);\n \n-  private static final int SERVER_CONFIG_INDEX  = 0;\n-  private static final int OVERWRITE_SERVER_CONFIG_INDEX  = 1;\n-  private static final int BACKUP_SERVER_CONFIG_INDEX  = 2;\n-  private static List<Path> newCnfPathes = new ArrayList<>();\n-\n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n-    // Before this change, the test will update hbase-site.xml under target/test-classes and\n-    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n-    // other testing cases at the same time, this update will break other testing cases so it will\n-    // be flakey in nature.\n-    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n-    // hbase-site.xml will be created under its test data directory, i.e,\n-    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n-    // config, new update will be applied to this new file and only visible to this specific test\n-    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n-\n-    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-\n-    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n-    // the config file under target/test-class, which is supposed to be immutable.\n-    Files.createDirectories(Paths.get(absoluteDataPath));\n-\n-    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n-    for (String conf : confs) {\n-      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(absoluteDataPath + conf);\n-      Files.copy(cnfPath, newConfPath);\n-      newCnfPathes.add(newConfPath);\n-    }\n \n+    setUpConfigurationFiles(TEST_UTIL);\n     TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT, 0);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 60000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, 120000);\n     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 2);\n     TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY, 0);\n \n-    // Add the new custom config file to Configuration\n-    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     TEST_UTIL.startMiniCluster(2);\n     ASYNC_CONN = ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();\n-\n-    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n-    // the master Configuration. The create() just copies config params over, it does not do\n-    // a clone for a historic reason. Properties such as resources are lost during this process.\n-    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n-    // under test-data directory is added to RegionServer's configuration as a workaround.\n-    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n-      rsThread.getRegionServer().getConfiguration().addResource(\n-        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n-    }\n+    addResourceToRegionServerConfiguration(TEST_UTIL);\n   }\n \n   @Test\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyMzAxMQ==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395223011", "body": "nit for other readers: since you're here cleaning up, can you use descriptive names for these variables? Instead of `cnfPath{1,2,3}` or this array of paths, how about\r\n* `rsConfigFilePath` instead of `cnfPath`\r\n* `overwriteFilePath` instead of `cnf1Path`\r\n* `rsConfigFileBackup` instead of `cnf3Path`\r\n\r\nIMHO, descriptive variable names are better than comments. Just a suggestion :)", "bodyText": "nit for other readers: since you're here cleaning up, can you use descriptive names for these variables? Instead of cnfPath{1,2,3} or this array of paths, how about\n\nrsConfigFilePath instead of cnfPath\noverwriteFilePath instead of cnf1Path\nrsConfigFileBackup instead of cnf3Path\n\nIMHO, descriptive variable names are better than comments. Just a suggestion :)", "bodyHTML": "<p dir=\"auto\">nit for other readers: since you're here cleaning up, can you use descriptive names for these variables? Instead of <code>cnfPath{1,2,3}</code> or this array of paths, how about</p>\n<ul dir=\"auto\">\n<li><code>rsConfigFilePath</code> instead of <code>cnfPath</code></li>\n<li><code>overwriteFilePath</code> instead of <code>cnf1Path</code></li>\n<li><code>rsConfigFileBackup</code> instead of <code>cnf3Path</code></li>\n</ul>\n<p dir=\"auto\">IMHO, descriptive variable names are better than comments. Just a suggestion :)</p>", "author": "ndimiduk", "createdAt": "2020-03-19T18:07:30Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java", "diffHunk": "@@ -139,14 +173,14 @@ public void testAllClusterOnlineConfigChange() throws IOException {\n \n   private void replaceHBaseSiteXML() throws IOException {\n     // make a backup of hbase-site.xml\n-    Files.copy(cnfPath, cnf3Path, StandardCopyOption.REPLACE_EXISTING);\n+    Files.copy(newCnfPathes.get(0), newCnfPathes.get(2), StandardCopyOption.REPLACE_EXISTING);", "originalCommit": "59e4fa1318244e34319e32d8e3fa5aab8accba6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwODU1NA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395308554", "bodyText": "Sure, will do, :)", "author": "qiaoandxiang", "createdAt": "2020-03-19T20:43:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyMzAxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "72fa7605843c19bb626e1370c84f330d1d946577", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex 1255661c07..bbcd31c109 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -173,14 +179,17 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n \n   private void replaceHBaseSiteXML() throws IOException {\n     // make a backup of hbase-site.xml\n-    Files.copy(newCnfPathes.get(0), newCnfPathes.get(2), StandardCopyOption.REPLACE_EXISTING);\n+    Files.copy(newCnfPathes.get(SERVER_CONFIG_INDEX),\n+      newCnfPathes.get(BACKUP_SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n     // update hbase-site.xml by overwriting it\n-    Files.copy(newCnfPathes.get(1), newCnfPathes.get(0), StandardCopyOption.REPLACE_EXISTING);\n+    Files.copy(newCnfPathes.get(OVERWRITE_SERVER_CONFIG_INDEX),\n+      newCnfPathes.get(SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n   }\n \n   private void restoreHBaseSiteXML() throws IOException {\n     // restore hbase-site.xml\n-    Files.copy(newCnfPathes.get(2), newCnfPathes.get(0), StandardCopyOption.REPLACE_EXISTING);\n+    Files.copy(newCnfPathes.get(BACKUP_SERVER_CONFIG_INDEX),\n+      newCnfPathes.get(SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n   }\n \n   @Test\n", "next_change": {"commit": "2200d1a5bd5f2cb072f410202c0196f764ab6212", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\nindex bbcd31c109..0116a6e4a3 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java\n", "chunk": "@@ -177,21 +133,6 @@ public class TestAsyncClusterAdminApi extends TestAsyncAdminBase {\n     restoreHBaseSiteXML();\n   }\n \n-  private void replaceHBaseSiteXML() throws IOException {\n-    // make a backup of hbase-site.xml\n-    Files.copy(newCnfPathes.get(SERVER_CONFIG_INDEX),\n-      newCnfPathes.get(BACKUP_SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n-    // update hbase-site.xml by overwriting it\n-    Files.copy(newCnfPathes.get(OVERWRITE_SERVER_CONFIG_INDEX),\n-      newCnfPathes.get(SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n-  }\n-\n-  private void restoreHBaseSiteXML() throws IOException {\n-    // restore hbase-site.xml\n-    Files.copy(newCnfPathes.get(BACKUP_SERVER_CONFIG_INDEX),\n-      newCnfPathes.get(SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n-  }\n-\n   @Test\n   public void testRollWALWALWriter() throws Exception {\n     setUpforLogRolling();\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyMzk4Ng==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395223986", "body": "same comments about using `File` or `Path` api instead of string manipulation.", "bodyText": "same comments about using File or Path api instead of string manipulation.", "bodyHTML": "<p dir=\"auto\">same comments about using <code>File</code> or <code>Path</code> api instead of string manipulation.</p>", "author": "ndimiduk", "createdAt": "2020-03-19T18:09:11Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java", "diffHunk": "@@ -47,31 +51,61 @@\n   private static final Logger LOG = LoggerFactory.getLogger(TestUpdateConfiguration.class);\n   private final static HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n \n+  private static List<Path> newCnfPathes = new ArrayList<>();\n+\n   @BeforeClass\n   public static void setup() throws Exception {\n-    // Set master number and use default values for other options.\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n+    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();", "originalCommit": "59e4fa1318244e34319e32d8e3fa5aab8accba6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72fa7605843c19bb626e1370c84f330d1d946577", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\nindex 5452b83068..96ca45e271 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n", "chunk": "@@ -64,18 +69,17 @@ public class TestUpdateConfiguration {\n     // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n     // config, new update will be applied to this new file and only visible to this specific test\n     // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n+\n     String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-    String dataBasePath = TEST_UTIL.getBaseTestDir().toString();\n \n-    String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n-    // Copy Files from target/test-classes to data directory, this is to avoid messing up\n+    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n     // the config file under target/test-class, which is supposed to be immutable.\n-    Files.createDirectories(Paths.get(dataPath));\n+    Files.createDirectories(Paths.get(absoluteDataPath));\n \n     List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n     for (String conf : confs) {\n-      Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(dataPath + conf);\n+      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n+      Path newConfPath = Paths.get(absoluteDataPath + conf);\n       Files.copy(cnfPath, newConfPath);\n       newCnfPathes.add(newConfPath);\n     }\n", "next_change": {"commit": "2200d1a5bd5f2cb072f410202c0196f764ab6212", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\nindex 96ca45e271..f8406a99b1 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n", "chunk": "@@ -53,51 +45,12 @@ public class TestUpdateConfiguration {\n   private static final Logger LOG = LoggerFactory.getLogger(TestUpdateConfiguration.class);\n   private final static HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n \n-  private static final int SERVER_CONFIG_INDEX  = 0;\n-  private static final int OVERWRITE_SERVER_CONFIG_INDEX  = 1;\n-  private static final int BACKUP_SERVER_CONFIG_INDEX  = 2;\n-  private static List<Path> newCnfPathes = new ArrayList<>();\n-\n   @BeforeClass\n   public static void setup() throws Exception {\n-    // Before this change, the test will update hbase-site.xml under target/test-classes and\n-    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n-    // other testing cases at the same time, this update will break other testing cases so it will\n-    // be flakey in nature.\n-    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n-    // hbase-site.xml will be created under its test data directory, i.e,\n-    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n-    // config, new update will be applied to this new file and only visible to this specific test\n-    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n-\n-    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n-\n-    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n-    // the config file under target/test-class, which is supposed to be immutable.\n-    Files.createDirectories(Paths.get(absoluteDataPath));\n-\n-    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n-    for (String conf : confs) {\n-      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(absoluteDataPath + conf);\n-      Files.copy(cnfPath, newConfPath);\n-      newCnfPathes.add(newConfPath);\n-    }\n-\n-    // Add the new custom config file to Configuration\n-    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    setUpConfigurationFiles(TEST_UTIL);\n     StartMiniClusterOption option = StartMiniClusterOption.builder().numMasters(2).build();\n     TEST_UTIL.startMiniCluster(option);\n-\n-    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n-    // the master Configuration. The create() just copies config params over, it does not do\n-    // a clone for a historic reason. Properties such as resources are lost during this process.\n-    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n-    // under test-data directory is added to RegionServer's configuration as a workaround.\n-    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n-      rsThread.getRegionServer().getConfiguration().addResource(\n-        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n-    }\n+    addResourceToRegionServerConfiguration(TEST_UTIL);\n   }\n \n   @Rule\n", "next_change": {"commit": "0ed5ab9de16a48a50d18f296a986bef7c53d1753", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\nindex f8406a99b1..8147f1374a 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n", "chunk": "@@ -58,7 +58,7 @@ public class TestUpdateConfiguration extends AbstractTestUpdateConfiguration {\n \n   @Test\n   public void testOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test \" + name.getMethodName());\n+    LOG.debug(\"Starting the test {}\", name.getMethodName());\n     Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName();\n     admin.updateConfiguration(server);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNDM5Nw==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395224397", "body": "same comment about using iteration over all cluster members instead of hard-coding an assumed number.", "bodyText": "same comment about using iteration over all cluster members instead of hard-coding an assumed number.", "bodyHTML": "<p dir=\"auto\">same comment about using iteration over all cluster members instead of hard-coding an assumed number.</p>", "author": "ndimiduk", "createdAt": "2020-03-19T18:09:56Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java", "diffHunk": "@@ -47,31 +51,61 @@\n   private static final Logger LOG = LoggerFactory.getLogger(TestUpdateConfiguration.class);\n   private final static HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n \n+  private static List<Path> newCnfPathes = new ArrayList<>();\n+\n   @BeforeClass\n   public static void setup() throws Exception {\n-    // Set master number and use default values for other options.\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n+    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n+    String dataBasePath = TEST_UTIL.getBaseTestDir().toString();\n+\n+    String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n+    // Copy Files from target/test-classes to data directory, this is to avoid messing up\n+    // the config file under target/test-class, which is supposed to be immutable.\n+    Files.createDirectories(Paths.get(dataPath));\n+\n+    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n+    for (String conf : confs) {\n+      Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes\" + conf);\n+      Path newConfPath = Paths.get(dataPath + conf);\n+      Files.copy(cnfPath, newConfPath);\n+      newCnfPathes.add(newConfPath);\n+    }\n+\n+    // Add the new custom config file to Configuration\n+    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     StartMiniClusterOption option = StartMiniClusterOption.builder().numMasters(2).build();\n     TEST_UTIL.startMiniCluster(option);\n+\n+    // The resources added to TEST_UTIL.conf is lost during Region Server Creation, hack it here\n+    // again.\n+    TEST_UTIL.getMiniHBaseCluster().getRegionServer(0).getConfiguration().", "originalCommit": "59e4fa1318244e34319e32d8e3fa5aab8accba6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72fa7605843c19bb626e1370c84f330d1d946577", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\nindex 5452b83068..96ca45e271 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n", "chunk": "@@ -85,52 +89,67 @@ public class TestUpdateConfiguration {\n     StartMiniClusterOption option = StartMiniClusterOption.builder().numMasters(2).build();\n     TEST_UTIL.startMiniCluster(option);\n \n-    // The resources added to TEST_UTIL.conf is lost during Region Server Creation, hack it here\n-    // again.\n-    TEST_UTIL.getMiniHBaseCluster().getRegionServer(0).getConfiguration().\n-      addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n+    // the master Configuration. The create() just copies config params over, it does not do\n+    // a clone for a historic reason. Properties such as resources are lost during this process.\n+    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n+    // under test-data directory is added to RegionServer's configuration as a workaround.\n+    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n+      rsThread.getRegionServer().getConfiguration().addResource(\n+        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    }\n   }\n \n+  @Rule\n+  public TestName name = new TestName();\n+\n   @Test\n   public void testOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test testOnlineConfigChange\");\n+    LOG.debug(\"Starting the test \" + name.getMethodName());\n     Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName();\n     admin.updateConfiguration(server);\n   }\n \n-  @Test\n-  public void testMasterOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test testMasterOnlineConfigChange\");\n+  private void replaceHBaseSiteXML() throws IOException {\n     // make a backup of hbase-site.xml\n-    Files.copy(newCnfPathes.get(0), newCnfPathes.get(2), StandardCopyOption.REPLACE_EXISTING);\n+    Files.copy(newCnfPathes.get(SERVER_CONFIG_INDEX),\n+      newCnfPathes.get(BACKUP_SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n     // update hbase-site.xml by overwriting it\n-    Files.copy(newCnfPathes.get(1), newCnfPathes.get(0), StandardCopyOption.REPLACE_EXISTING);\n+    Files.copy(newCnfPathes.get(OVERWRITE_SERVER_CONFIG_INDEX),\n+      newCnfPathes.get(SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n+  }\n \n+  private void restoreHBaseSiteXML() throws IOException {\n+    // restore hbase-site.xml\n+    Files.copy(newCnfPathes.get(BACKUP_SERVER_CONFIG_INDEX),\n+      newCnfPathes.get(SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n+  }\n+\n+  @Test\n+  public void testMasterOnlineConfigChange() throws IOException {\n+    LOG.debug(\"Starting the test \" + name.getMethodName());\n+    replaceHBaseSiteXML();\n     Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getMaster().getServerName();\n     admin.updateConfiguration(server);\n     Configuration conf = TEST_UTIL.getMiniHBaseCluster().getMaster().getConfiguration();\n     int custom = conf.getInt(\"hbase.custom.config\", 0);\n     assertEquals(1000, custom);\n-    // restore hbase-site.xml\n-    Files.copy(newCnfPathes.get(2), newCnfPathes.get(0), StandardCopyOption.REPLACE_EXISTING);\n+    restoreHBaseSiteXML();\n   }\n \n   @Test\n   public void testAllOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test testAllOnlineConfigChange\");\n+    LOG.debug(\"Starting the test \" + name.getMethodName());\n     Admin admin = TEST_UTIL.getAdmin();\n     admin.updateConfiguration();\n   }\n \n   @Test\n   public void testAllCustomOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test testAllCustomOnlineConfigChange\");\n-    // make a backup of hbase-site.xml\n-    Files.copy(newCnfPathes.get(0), newCnfPathes.get(2), StandardCopyOption.REPLACE_EXISTING);\n-    // update hbase-site.xml by overwriting it\n-    Files.copy(newCnfPathes.get(1), newCnfPathes.get(0), StandardCopyOption.REPLACE_EXISTING);\n+    LOG.debug(\"Starting the test \" + name.getMethodName());\n+    replaceHBaseSiteXML();\n \n     Admin admin = TEST_UTIL.getAdmin();\n     admin.updateConfiguration();\n", "next_change": {"commit": "0ed5ab9de16a48a50d18f296a986bef7c53d1753", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\nindex 96ca45e271..8147f1374a 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n", "chunk": "@@ -148,7 +86,7 @@ public class TestUpdateConfiguration {\n \n   @Test\n   public void testAllCustomOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test \" + name.getMethodName());\n+    LOG.debug(\"Starting the test {}\", name.getMethodName());\n     replaceHBaseSiteXML();\n \n     Admin admin = TEST_UTIL.getAdmin();\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNTA2Ng==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395225066", "body": "for places where you want to refer to the test's method name, JUnit provides an API for this. Check out `org.junit.rules.TestName`. It's used throughout the code base.", "bodyText": "for places where you want to refer to the test's method name, JUnit provides an API for this. Check out org.junit.rules.TestName. It's used throughout the code base.", "bodyHTML": "<p dir=\"auto\">for places where you want to refer to the test's method name, JUnit provides an API for this. Check out <code>org.junit.rules.TestName</code>. It's used throughout the code base.</p>", "author": "ndimiduk", "createdAt": "2020-03-19T18:11:10Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java", "diffHunk": "@@ -47,31 +51,61 @@\n   private static final Logger LOG = LoggerFactory.getLogger(TestUpdateConfiguration.class);\n   private final static HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n \n+  private static List<Path> newCnfPathes = new ArrayList<>();\n+\n   @BeforeClass\n   public static void setup() throws Exception {\n-    // Set master number and use default values for other options.\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n+    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n+    String dataBasePath = TEST_UTIL.getBaseTestDir().toString();\n+\n+    String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n+    // Copy Files from target/test-classes to data directory, this is to avoid messing up\n+    // the config file under target/test-class, which is supposed to be immutable.\n+    Files.createDirectories(Paths.get(dataPath));\n+\n+    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n+    for (String conf : confs) {\n+      Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes\" + conf);\n+      Path newConfPath = Paths.get(dataPath + conf);\n+      Files.copy(cnfPath, newConfPath);\n+      newCnfPathes.add(newConfPath);\n+    }\n+\n+    // Add the new custom config file to Configuration\n+    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     StartMiniClusterOption option = StartMiniClusterOption.builder().numMasters(2).build();\n     TEST_UTIL.startMiniCluster(option);\n+\n+    // The resources added to TEST_UTIL.conf is lost during Region Server Creation, hack it here\n+    // again.\n+    TEST_UTIL.getMiniHBaseCluster().getRegionServer(0).getConfiguration().\n+      addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n   }\n \n   @Test\n   public void testOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test\");\n+    LOG.debug(\"Starting the test testOnlineConfigChange\");", "originalCommit": "59e4fa1318244e34319e32d8e3fa5aab8accba6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMxMDIzMg==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395310232", "bodyText": "Thanks for bringing up my old memory, I know there is a way to avoid hardcoded method name, just forgot, :)", "author": "qiaoandxiang", "createdAt": "2020-03-19T20:47:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNTA2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5NjQxMA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395396410", "bodyText": "Hi @ndimiduk, I updated the patch. Hopefully I did not miss some. There are duplicate codes between these two testing cases. I thought about it and did not find a good way to avoid it. Any suggestions are welcome, thanks.", "author": "qiaoandxiang", "createdAt": "2020-03-20T00:55:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNTA2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "72fa7605843c19bb626e1370c84f330d1d946577", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\nindex 5452b83068..96ca45e271 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n", "chunk": "@@ -85,52 +89,67 @@ public class TestUpdateConfiguration {\n     StartMiniClusterOption option = StartMiniClusterOption.builder().numMasters(2).build();\n     TEST_UTIL.startMiniCluster(option);\n \n-    // The resources added to TEST_UTIL.conf is lost during Region Server Creation, hack it here\n-    // again.\n-    TEST_UTIL.getMiniHBaseCluster().getRegionServer(0).getConfiguration().\n-      addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n+    // the master Configuration. The create() just copies config params over, it does not do\n+    // a clone for a historic reason. Properties such as resources are lost during this process.\n+    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n+    // under test-data directory is added to RegionServer's configuration as a workaround.\n+    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n+      rsThread.getRegionServer().getConfiguration().addResource(\n+        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    }\n   }\n \n+  @Rule\n+  public TestName name = new TestName();\n+\n   @Test\n   public void testOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test testOnlineConfigChange\");\n+    LOG.debug(\"Starting the test \" + name.getMethodName());\n     Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName();\n     admin.updateConfiguration(server);\n   }\n \n-  @Test\n-  public void testMasterOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test testMasterOnlineConfigChange\");\n+  private void replaceHBaseSiteXML() throws IOException {\n     // make a backup of hbase-site.xml\n-    Files.copy(newCnfPathes.get(0), newCnfPathes.get(2), StandardCopyOption.REPLACE_EXISTING);\n+    Files.copy(newCnfPathes.get(SERVER_CONFIG_INDEX),\n+      newCnfPathes.get(BACKUP_SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n     // update hbase-site.xml by overwriting it\n-    Files.copy(newCnfPathes.get(1), newCnfPathes.get(0), StandardCopyOption.REPLACE_EXISTING);\n+    Files.copy(newCnfPathes.get(OVERWRITE_SERVER_CONFIG_INDEX),\n+      newCnfPathes.get(SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n+  }\n \n+  private void restoreHBaseSiteXML() throws IOException {\n+    // restore hbase-site.xml\n+    Files.copy(newCnfPathes.get(BACKUP_SERVER_CONFIG_INDEX),\n+      newCnfPathes.get(SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n+  }\n+\n+  @Test\n+  public void testMasterOnlineConfigChange() throws IOException {\n+    LOG.debug(\"Starting the test \" + name.getMethodName());\n+    replaceHBaseSiteXML();\n     Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getMaster().getServerName();\n     admin.updateConfiguration(server);\n     Configuration conf = TEST_UTIL.getMiniHBaseCluster().getMaster().getConfiguration();\n     int custom = conf.getInt(\"hbase.custom.config\", 0);\n     assertEquals(1000, custom);\n-    // restore hbase-site.xml\n-    Files.copy(newCnfPathes.get(2), newCnfPathes.get(0), StandardCopyOption.REPLACE_EXISTING);\n+    restoreHBaseSiteXML();\n   }\n \n   @Test\n   public void testAllOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test testAllOnlineConfigChange\");\n+    LOG.debug(\"Starting the test \" + name.getMethodName());\n     Admin admin = TEST_UTIL.getAdmin();\n     admin.updateConfiguration();\n   }\n \n   @Test\n   public void testAllCustomOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test testAllCustomOnlineConfigChange\");\n-    // make a backup of hbase-site.xml\n-    Files.copy(newCnfPathes.get(0), newCnfPathes.get(2), StandardCopyOption.REPLACE_EXISTING);\n-    // update hbase-site.xml by overwriting it\n-    Files.copy(newCnfPathes.get(1), newCnfPathes.get(0), StandardCopyOption.REPLACE_EXISTING);\n+    LOG.debug(\"Starting the test \" + name.getMethodName());\n+    replaceHBaseSiteXML();\n \n     Admin admin = TEST_UTIL.getAdmin();\n     admin.updateConfiguration();\n", "next_change": {"commit": "0ed5ab9de16a48a50d18f296a986bef7c53d1753", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\nindex 96ca45e271..8147f1374a 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n", "chunk": "@@ -148,7 +86,7 @@ public class TestUpdateConfiguration {\n \n   @Test\n   public void testAllCustomOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test \" + name.getMethodName());\n+    LOG.debug(\"Starting the test {}\", name.getMethodName());\n     replaceHBaseSiteXML();\n \n     Admin admin = TEST_UTIL.getAdmin();\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNTIzMA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395225230", "body": "same comment about descriptive variable names.", "bodyText": "same comment about descriptive variable names.", "bodyHTML": "<p dir=\"auto\">same comment about descriptive variable names.</p>", "author": "ndimiduk", "createdAt": "2020-03-19T18:11:29Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java", "diffHunk": "@@ -47,31 +51,61 @@\n   private static final Logger LOG = LoggerFactory.getLogger(TestUpdateConfiguration.class);\n   private final static HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n \n+  private static List<Path> newCnfPathes = new ArrayList<>();\n+\n   @BeforeClass\n   public static void setup() throws Exception {\n-    // Set master number and use default values for other options.\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n+    String absoluteDataPath = TEST_UTIL.getDataTestDir().toString();\n+    String dataBasePath = TEST_UTIL.getBaseTestDir().toString();\n+\n+    String dataPath = absoluteDataPath.substring(absoluteDataPath.indexOf(dataBasePath));\n+    // Copy Files from target/test-classes to data directory, this is to avoid messing up\n+    // the config file under target/test-class, which is supposed to be immutable.\n+    Files.createDirectories(Paths.get(dataPath));\n+\n+    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n+    for (String conf : confs) {\n+      Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes\" + conf);\n+      Path newConfPath = Paths.get(dataPath + conf);\n+      Files.copy(cnfPath, newConfPath);\n+      newCnfPathes.add(newConfPath);\n+    }\n+\n+    // Add the new custom config file to Configuration\n+    TEST_UTIL.getConfiguration().addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n     StartMiniClusterOption option = StartMiniClusterOption.builder().numMasters(2).build();\n     TEST_UTIL.startMiniCluster(option);\n+\n+    // The resources added to TEST_UTIL.conf is lost during Region Server Creation, hack it here\n+    // again.\n+    TEST_UTIL.getMiniHBaseCluster().getRegionServer(0).getConfiguration().\n+      addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n   }\n \n   @Test\n   public void testOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test\");\n+    LOG.debug(\"Starting the test testOnlineConfigChange\");\n     Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName();\n     admin.updateConfiguration(server);\n   }\n \n   @Test\n   public void testMasterOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test\");\n-    Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");", "originalCommit": "59e4fa1318244e34319e32d8e3fa5aab8accba6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72fa7605843c19bb626e1370c84f330d1d946577", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\nindex 5452b83068..96ca45e271 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n", "chunk": "@@ -85,52 +89,67 @@ public class TestUpdateConfiguration {\n     StartMiniClusterOption option = StartMiniClusterOption.builder().numMasters(2).build();\n     TEST_UTIL.startMiniCluster(option);\n \n-    // The resources added to TEST_UTIL.conf is lost during Region Server Creation, hack it here\n-    // again.\n-    TEST_UTIL.getMiniHBaseCluster().getRegionServer(0).getConfiguration().\n-      addResource(TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n+    // the master Configuration. The create() just copies config params over, it does not do\n+    // a clone for a historic reason. Properties such as resources are lost during this process.\n+    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n+    // under test-data directory is added to RegionServer's configuration as a workaround.\n+    for (RegionServerThread rsThread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {\n+      rsThread.getRegionServer().getConfiguration().addResource(\n+        TEST_UTIL.getDataTestDir(\"hbase-site.xml\"));\n+    }\n   }\n \n+  @Rule\n+  public TestName name = new TestName();\n+\n   @Test\n   public void testOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test testOnlineConfigChange\");\n+    LOG.debug(\"Starting the test \" + name.getMethodName());\n     Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName();\n     admin.updateConfiguration(server);\n   }\n \n-  @Test\n-  public void testMasterOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test testMasterOnlineConfigChange\");\n+  private void replaceHBaseSiteXML() throws IOException {\n     // make a backup of hbase-site.xml\n-    Files.copy(newCnfPathes.get(0), newCnfPathes.get(2), StandardCopyOption.REPLACE_EXISTING);\n+    Files.copy(newCnfPathes.get(SERVER_CONFIG_INDEX),\n+      newCnfPathes.get(BACKUP_SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n     // update hbase-site.xml by overwriting it\n-    Files.copy(newCnfPathes.get(1), newCnfPathes.get(0), StandardCopyOption.REPLACE_EXISTING);\n+    Files.copy(newCnfPathes.get(OVERWRITE_SERVER_CONFIG_INDEX),\n+      newCnfPathes.get(SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n+  }\n \n+  private void restoreHBaseSiteXML() throws IOException {\n+    // restore hbase-site.xml\n+    Files.copy(newCnfPathes.get(BACKUP_SERVER_CONFIG_INDEX),\n+      newCnfPathes.get(SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n+  }\n+\n+  @Test\n+  public void testMasterOnlineConfigChange() throws IOException {\n+    LOG.debug(\"Starting the test \" + name.getMethodName());\n+    replaceHBaseSiteXML();\n     Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getMaster().getServerName();\n     admin.updateConfiguration(server);\n     Configuration conf = TEST_UTIL.getMiniHBaseCluster().getMaster().getConfiguration();\n     int custom = conf.getInt(\"hbase.custom.config\", 0);\n     assertEquals(1000, custom);\n-    // restore hbase-site.xml\n-    Files.copy(newCnfPathes.get(2), newCnfPathes.get(0), StandardCopyOption.REPLACE_EXISTING);\n+    restoreHBaseSiteXML();\n   }\n \n   @Test\n   public void testAllOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test testAllOnlineConfigChange\");\n+    LOG.debug(\"Starting the test \" + name.getMethodName());\n     Admin admin = TEST_UTIL.getAdmin();\n     admin.updateConfiguration();\n   }\n \n   @Test\n   public void testAllCustomOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test testAllCustomOnlineConfigChange\");\n-    // make a backup of hbase-site.xml\n-    Files.copy(newCnfPathes.get(0), newCnfPathes.get(2), StandardCopyOption.REPLACE_EXISTING);\n-    // update hbase-site.xml by overwriting it\n-    Files.copy(newCnfPathes.get(1), newCnfPathes.get(0), StandardCopyOption.REPLACE_EXISTING);\n+    LOG.debug(\"Starting the test \" + name.getMethodName());\n+    replaceHBaseSiteXML();\n \n     Admin admin = TEST_UTIL.getAdmin();\n     admin.updateConfiguration();\n", "next_change": {"commit": "0ed5ab9de16a48a50d18f296a986bef7c53d1753", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\nindex 96ca45e271..8147f1374a 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n", "chunk": "@@ -148,7 +86,7 @@ public class TestUpdateConfiguration {\n \n   @Test\n   public void testAllCustomOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test \" + name.getMethodName());\n+    LOG.debug(\"Starting the test {}\", name.getMethodName());\n     replaceHBaseSiteXML();\n \n     Admin admin = TEST_UTIL.getAdmin();\n", "next_change": null}]}}]}}, {"oid": "72fa7605843c19bb626e1370c84f330d1d946577", "url": "https://github.com/apache/hbase/commit/72fa7605843c19bb626e1370c84f330d1d946577", "message": "HBASE-23957 [flakey test] client.TestMultiParallel fails to read hbase-site.xml", "committedDate": "2020-03-20T00:45:23Z", "type": "forcePushed"}, {"oid": "2200d1a5bd5f2cb072f410202c0196f764ab6212", "url": "https://github.com/apache/hbase/commit/2200d1a5bd5f2cb072f410202c0196f764ab6212", "message": "HBASE-23957 [flakey test] client.TestMultiParallel fails to read hbase-site.xml", "committedDate": "2020-03-20T17:05:51Z", "type": "forcePushed"}, {"oid": "e4d6677e4335ecd109fe31c4987da83ed95237dd", "url": "https://github.com/apache/hbase/commit/e4d6677e4335ecd109fe31c4987da83ed95237dd", "message": "HBASE-23957 [flakey test] client.TestMultiParallel fails to read hbase-site.xml", "committedDate": "2020-03-20T19:15:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NDQxNA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395884414", "body": "nit: This class could have comment up here on what it is for and what it provides?", "bodyText": "nit: This class could have comment up here on what it is for and what it provides?", "bodyHTML": "<p dir=\"auto\">nit: This class could have comment up here on what it is for and what it provides?</p>", "author": "saintstack", "createdAt": "2020-03-20T20:52:15Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.util.JVMClusterUtil.RegionServerThread;\n+\n+/**\n+ * Base class to test Configuration Update logic.\n+ */", "originalCommit": "e4d6677e4335ecd109fe31c4987da83ed95237dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMjAxNg==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395902016", "bodyText": "+1", "author": "ndimiduk", "createdAt": "2020-03-20T21:40:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NDQxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNDEzMw==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395904133", "bodyText": "Uploaded a patch which explains what it is and what it provides.", "author": "qiaoandxiang", "createdAt": "2020-03-20T21:46:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NDQxNA=="}], "type": "inlineReview", "revised_code": {"commit": "f80dd68d3c2104ba5d96c8dea97cb37b784aa896", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\nindex 66fc5a4d58..923faa3907 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n", "chunk": "@@ -29,7 +29,9 @@ import org.apache.hadoop.hbase.HBaseTestingUtility;\n import org.apache.hadoop.hbase.util.JVMClusterUtil.RegionServerThread;\n \n /**\n- * Base class to test Configuration Update logic.\n+ * Base class to test Configuration Update logic. It wraps up things needed to\n+ * test configuration change and provides utility methods for test cluster setup,\n+ * updating/restoring configuration file.\n  */\n public abstract class AbstractTestUpdateConfiguration {\n   private static final int SERVER_CONFIG_INDEX  = 0;\n", "next_change": {"commit": "267b803a3b77472ad50db266121ef24553000599", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\nindex 923faa3907..854bd68da9 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n", "chunk": "@@ -34,10 +31,13 @@ import org.apache.hadoop.hbase.util.JVMClusterUtil.RegionServerThread;\n  * updating/restoring configuration file.\n  */\n public abstract class AbstractTestUpdateConfiguration {\n-  private static final int SERVER_CONFIG_INDEX  = 0;\n-  private static final int OVERWRITE_SERVER_CONFIG_INDEX  = 1;\n-  private static final int BACKUP_SERVER_CONFIG_INDEX  = 2;\n-  private static List<Path> newCnfPathes = new ArrayList<>();\n+  private static final String SERVER_CONFIG = \"hbase-site.xml\";\n+  private static final String OVERWRITE_SERVER_CONFIG  = \"overwrite-hbase-site.xml\";\n+  private static final String BACKUP_SERVER_CONFIG  = \"backup-hbase-site.xml\";\n+\n+  private static Path configFileUnderTestDataDir;\n+  private static Path overwriteConfigFileUnderTestDataDir;\n+  private static Path backupConfigFileUnderTestDataDir;\n \n   protected static void setUpConfigurationFiles(final HBaseTestingUtility testUtil)\n     throws Exception {\n", "next_change": {"commit": "0ed5ab9de16a48a50d18f296a986bef7c53d1753", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\nindex 854bd68da9..92df8e0e29 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n", "chunk": "@@ -32,11 +32,11 @@ import org.apache.hadoop.hbase.util.JVMClusterUtil.RegionServerThread;\n  */\n public abstract class AbstractTestUpdateConfiguration {\n   private static final String SERVER_CONFIG = \"hbase-site.xml\";\n-  private static final String OVERWRITE_SERVER_CONFIG  = \"overwrite-hbase-site.xml\";\n+  private static final String OVERRIDE_SERVER_CONFIG  = \"override-hbase-site.xml\";\n   private static final String BACKUP_SERVER_CONFIG  = \"backup-hbase-site.xml\";\n \n   private static Path configFileUnderTestDataDir;\n-  private static Path overwriteConfigFileUnderTestDataDir;\n+  private static Path overrideConfigFileUnderTestDataDir;\n   private static Path backupConfigFileUnderTestDataDir;\n \n   protected static void setUpConfigurationFiles(final HBaseTestingUtility testUtil)\n", "next_change": null}]}}]}}]}}, {"oid": "f80dd68d3c2104ba5d96c8dea97cb37b784aa896", "url": "https://github.com/apache/hbase/commit/f80dd68d3c2104ba5d96c8dea97cb37b784aa896", "message": "HBASE-23957 [flakey test] client.TestMultiParallel fails to read hbase-site.xml", "committedDate": "2020-03-20T21:44:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMzg1OA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395903858", "body": "Why track indices when you could just have three variables like\r\n\r\n```java\r\nprivate static final String SERVER_CONFIG = \"hbase-site.xml\";\r\nprivate static final String OVERWRITE_SERVER_CONFIG = \"hbase-site2.xml\";\r\n...\r\n```\r\n\r\nThis is what I meant in my earlier comment about descriptive variable names.\r\n\r\nAnd for easier debugging, why call the file names 1, 2, 3 -- they can be named whatever we want since we're manually adding them as resources. Might as well make the file names descriptive too, so someone doing forensics later can have a clue. Something like \"copy-of-hbase-site.xml\", \"overrides-for-test-hbase-site.xml\", &c.", "bodyText": "Why track indices when you could just have three variables like\nprivate static final String SERVER_CONFIG = \"hbase-site.xml\";\nprivate static final String OVERWRITE_SERVER_CONFIG = \"hbase-site2.xml\";\n...\nThis is what I meant in my earlier comment about descriptive variable names.\nAnd for easier debugging, why call the file names 1, 2, 3 -- they can be named whatever we want since we're manually adding them as resources. Might as well make the file names descriptive too, so someone doing forensics later can have a clue. Something like \"copy-of-hbase-site.xml\", \"overrides-for-test-hbase-site.xml\", &c.", "bodyHTML": "<p dir=\"auto\">Why track indices when you could just have three variables like</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"private static final String SERVER_CONFIG = &quot;hbase-site.xml&quot;;\nprivate static final String OVERWRITE_SERVER_CONFIG = &quot;hbase-site2.xml&quot;;\n...\n\"><pre><span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1\">SERVER_CONFIG</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hbase-site.xml<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1\">OVERWRITE_SERVER_CONFIG</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hbase-site2.xml<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-c1\">...</span></pre></div>\n<p dir=\"auto\">This is what I meant in my earlier comment about descriptive variable names.</p>\n<p dir=\"auto\">And for easier debugging, why call the file names 1, 2, 3 -- they can be named whatever we want since we're manually adding them as resources. Might as well make the file names descriptive too, so someone doing forensics later can have a clue. Something like \"copy-of-hbase-site.xml\", \"overrides-for-test-hbase-site.xml\", &amp;c.</p>", "author": "ndimiduk", "createdAt": "2020-03-20T21:45:51Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.util.JVMClusterUtil.RegionServerThread;\n+\n+/**\n+ * Base class to test Configuration Update logic.\n+ */\n+public abstract class AbstractTestUpdateConfiguration {\n+  private static final int SERVER_CONFIG_INDEX  = 0;", "originalCommit": "e4d6677e4335ecd109fe31c4987da83ed95237dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzMyMw==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395907323", "bodyText": "IMHO, the tests as they were before you started were illegible and obtuse. I'm arguing that they should be easily understood by casual observation, not deep study. One way to achieve that is by well-considered, meaningful variable names and simple logic without lots of flow control.", "author": "ndimiduk", "createdAt": "2020-03-20T21:56:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMzg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxMDgzNg==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395910836", "bodyText": "Agreed, was trying to avoid duplicate codes, let me update and upload a new patch.", "author": "qiaoandxiang", "createdAt": "2020-03-20T22:08:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMzg1OA=="}], "type": "inlineReview", "revised_code": {"commit": "267b803a3b77472ad50db266121ef24553000599", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\nindex 66fc5a4d58..854bd68da9 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n", "chunk": "@@ -22,20 +22,22 @@ import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.nio.file.StandardCopyOption;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n import org.apache.hadoop.hbase.HBaseTestingUtility;\n import org.apache.hadoop.hbase.util.JVMClusterUtil.RegionServerThread;\n \n /**\n- * Base class to test Configuration Update logic.\n+ * Base class to test Configuration Update logic. It wraps up things needed to\n+ * test configuration change and provides utility methods for test cluster setup,\n+ * updating/restoring configuration file.\n  */\n public abstract class AbstractTestUpdateConfiguration {\n-  private static final int SERVER_CONFIG_INDEX  = 0;\n-  private static final int OVERWRITE_SERVER_CONFIG_INDEX  = 1;\n-  private static final int BACKUP_SERVER_CONFIG_INDEX  = 2;\n-  private static List<Path> newCnfPathes = new ArrayList<>();\n+  private static final String SERVER_CONFIG = \"hbase-site.xml\";\n+  private static final String OVERWRITE_SERVER_CONFIG  = \"overwrite-hbase-site.xml\";\n+  private static final String BACKUP_SERVER_CONFIG  = \"backup-hbase-site.xml\";\n+\n+  private static Path configFileUnderTestDataDir;\n+  private static Path overwriteConfigFileUnderTestDataDir;\n+  private static Path backupConfigFileUnderTestDataDir;\n \n   protected static void setUpConfigurationFiles(final HBaseTestingUtility testUtil)\n     throws Exception {\n", "next_change": {"commit": "0ed5ab9de16a48a50d18f296a986bef7c53d1753", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\nindex 854bd68da9..92df8e0e29 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n", "chunk": "@@ -32,11 +32,11 @@ import org.apache.hadoop.hbase.util.JVMClusterUtil.RegionServerThread;\n  */\n public abstract class AbstractTestUpdateConfiguration {\n   private static final String SERVER_CONFIG = \"hbase-site.xml\";\n-  private static final String OVERWRITE_SERVER_CONFIG  = \"overwrite-hbase-site.xml\";\n+  private static final String OVERRIDE_SERVER_CONFIG  = \"override-hbase-site.xml\";\n   private static final String BACKUP_SERVER_CONFIG  = \"backup-hbase-site.xml\";\n \n   private static Path configFileUnderTestDataDir;\n-  private static Path overwriteConfigFileUnderTestDataDir;\n+  private static Path overrideConfigFileUnderTestDataDir;\n   private static Path backupConfigFileUnderTestDataDir;\n \n   protected static void setUpConfigurationFiles(final HBaseTestingUtility testUtil)\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNDY3Ng==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395904676", "body": "Again you're concatenating strings instead of using the API as provided. How about\r\n\r\n```java\r\nfinal Path confPath = Paths.get(\"target\", \"test-classes\", \"hbase-site.xml\");\r\n```", "bodyText": "Again you're concatenating strings instead of using the API as provided. How about\nfinal Path confPath = Paths.get(\"target\", \"test-classes\", \"hbase-site.xml\");", "bodyHTML": "<p dir=\"auto\">Again you're concatenating strings instead of using the API as provided. How about</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"final Path confPath = Paths.get(&quot;target&quot;, &quot;test-classes&quot;, &quot;hbase-site.xml&quot;);\n\"><pre><span class=\"pl-k\">final</span> <span class=\"pl-smi\">Path</span> confPath <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Paths</span><span class=\"pl-k\">.</span>get(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>target<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test-classes<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hbase-site.xml<span class=\"pl-pds\">\"</span></span>);</pre></div>", "author": "ndimiduk", "createdAt": "2020-03-20T21:48:12Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.util.JVMClusterUtil.RegionServerThread;\n+\n+/**\n+ * Base class to test Configuration Update logic. It wraps up things needed to\n+ * test configuration change and provides utility methods for test cluster setup,\n+ * updating/restoring configuration file.\n+ */\n+public abstract class AbstractTestUpdateConfiguration {\n+  private static final int SERVER_CONFIG_INDEX  = 0;\n+  private static final int OVERWRITE_SERVER_CONFIG_INDEX  = 1;\n+  private static final int BACKUP_SERVER_CONFIG_INDEX  = 2;\n+  private static List<Path> newCnfPathes = new ArrayList<>();\n+\n+  protected static void setUpConfigurationFiles(final HBaseTestingUtility testUtil)\n+    throws Exception {\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n+\n+    String absoluteDataPath = testUtil.getDataTestDir().toString();\n+\n+    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n+    // the config file under target/test-class, which is supposed to be immutable.\n+    Files.createDirectories(Paths.get(absoluteDataPath));\n+\n+    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n+    for (String conf : confs) {\n+      Path cnfPath = Paths.get(\"target/test-classes\" + conf);", "originalCommit": "f80dd68d3c2104ba5d96c8dea97cb37b784aa896", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkyMjU3Ng==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395922576", "bodyText": "Done.", "author": "qiaoandxiang", "createdAt": "2020-03-20T22:50:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNDY3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "267b803a3b77472ad50db266121ef24553000599", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\nindex 923faa3907..854bd68da9 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n", "chunk": "@@ -53,24 +53,25 @@ public abstract class AbstractTestUpdateConfiguration {\n \n     String absoluteDataPath = testUtil.getDataTestDir().toString();\n \n-    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n-    // the config file under target/test-class, which is supposed to be immutable.\n+    // Create test-data directories.\n     Files.createDirectories(Paths.get(absoluteDataPath));\n \n-    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n-    for (String conf : confs) {\n-      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(absoluteDataPath + conf);\n+    // Copy hbase-site.xml from target/test-class to target/test-data/UUID directory.\n+    Path configFile = Paths.get(\"target\", \"test-classes\", SERVER_CONFIG);\n+    configFileUnderTestDataDir = Paths.get(absoluteDataPath, SERVER_CONFIG);\n+    Files.copy(configFile, configFileUnderTestDataDir);\n \n-      // Do not copy the last one as it does not exist\n-      if (!conf.equals(\"/hbase-site3.xml\")) {\n-        Files.copy(cnfPath, newConfPath);\n-      }\n-      newCnfPathes.add(newConfPath);\n-    }\n+    // Copy overwrite config file overwrite-hbase-site.xml from target/test-class to\n+    // target/test-data/UUID directory.\n+    Path overwriteConfigFile = Paths.get(\"target\", \"test-classes\",\n+      OVERWRITE_SERVER_CONFIG);\n+    overwriteConfigFileUnderTestDataDir = Paths.get(absoluteDataPath, OVERWRITE_SERVER_CONFIG);\n+    Files.copy(overwriteConfigFile, overwriteConfigFileUnderTestDataDir);\n+\n+    backupConfigFileUnderTestDataDir = Paths.get(absoluteDataPath, BACKUP_SERVER_CONFIG);\n \n     // Add the new custom config file to Configuration\n-    testUtil.getConfiguration().addResource(testUtil.getDataTestDir(\"hbase-site.xml\"));\n+    testUtil.getConfiguration().addResource(testUtil.getDataTestDir(SERVER_CONFIG));\n   }\n \n   protected static void addResourceToRegionServerConfiguration(final HBaseTestingUtility testUtil) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNTA1MA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395905050", "body": "good.", "bodyText": "good.", "bodyHTML": "<p dir=\"auto\">good.</p>", "author": "ndimiduk", "createdAt": "2020-03-20T21:49:24Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.util.JVMClusterUtil.RegionServerThread;\n+\n+/**\n+ * Base class to test Configuration Update logic. It wraps up things needed to\n+ * test configuration change and provides utility methods for test cluster setup,\n+ * updating/restoring configuration file.\n+ */\n+public abstract class AbstractTestUpdateConfiguration {\n+  private static final int SERVER_CONFIG_INDEX  = 0;\n+  private static final int OVERWRITE_SERVER_CONFIG_INDEX  = 1;\n+  private static final int BACKUP_SERVER_CONFIG_INDEX  = 2;\n+  private static List<Path> newCnfPathes = new ArrayList<>();\n+\n+  protected static void setUpConfigurationFiles(final HBaseTestingUtility testUtil)\n+    throws Exception {\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n+\n+    String absoluteDataPath = testUtil.getDataTestDir().toString();\n+\n+    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n+    // the config file under target/test-class, which is supposed to be immutable.\n+    Files.createDirectories(Paths.get(absoluteDataPath));\n+\n+    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n+    for (String conf : confs) {\n+      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n+      Path newConfPath = Paths.get(absoluteDataPath + conf);\n+\n+      // Do not copy the last one as it does not exist\n+      if (!conf.equals(\"/hbase-site3.xml\")) {\n+        Files.copy(cnfPath, newConfPath);\n+      }\n+      newCnfPathes.add(newConfPath);\n+    }\n+\n+    // Add the new custom config file to Configuration\n+    testUtil.getConfiguration().addResource(testUtil.getDataTestDir(\"hbase-site.xml\"));\n+  }\n+\n+  protected static void addResourceToRegionServerConfiguration(final HBaseTestingUtility testUtil) {\n+    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n+    // the master Configuration. The create() just copies config params over, it does not do\n+    // a clone for a historic reason. Properties such as resources are lost during this process.\n+    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n+    // under test-data directory is added to RegionServer's configuration as a workaround.\n+    for (RegionServerThread rsThread : testUtil.getMiniHBaseCluster().getRegionServerThreads()) {", "originalCommit": "f80dd68d3c2104ba5d96c8dea97cb37b784aa896", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "267b803a3b77472ad50db266121ef24553000599", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\nindex 923faa3907..854bd68da9 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n", "chunk": "@@ -81,22 +82,22 @@ public abstract class AbstractTestUpdateConfiguration {\n     // under test-data directory is added to RegionServer's configuration as a workaround.\n     for (RegionServerThread rsThread : testUtil.getMiniHBaseCluster().getRegionServerThreads()) {\n       rsThread.getRegionServer().getConfiguration().addResource(\n-        testUtil.getDataTestDir(\"hbase-site.xml\"));\n+        testUtil.getDataTestDir(SERVER_CONFIG));\n     }\n   }\n \n   protected void replaceHBaseSiteXML() throws IOException {\n     // make a backup of hbase-site.xml\n-    Files.copy(newCnfPathes.get(SERVER_CONFIG_INDEX),\n-      newCnfPathes.get(BACKUP_SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n+    Files.copy(configFileUnderTestDataDir,\n+      backupConfigFileUnderTestDataDir, StandardCopyOption.REPLACE_EXISTING);\n     // update hbase-site.xml by overwriting it\n-    Files.copy(newCnfPathes.get(OVERWRITE_SERVER_CONFIG_INDEX),\n-      newCnfPathes.get(SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n+    Files.copy(overwriteConfigFileUnderTestDataDir,\n+      configFileUnderTestDataDir, StandardCopyOption.REPLACE_EXISTING);\n   }\n \n   protected void restoreHBaseSiteXML() throws IOException {\n     // restore hbase-site.xml\n-    Files.copy(newCnfPathes.get(BACKUP_SERVER_CONFIG_INDEX),\n-      newCnfPathes.get(SERVER_CONFIG_INDEX), StandardCopyOption.REPLACE_EXISTING);\n+    Files.copy(backupConfigFileUnderTestDataDir,\n+      configFileUnderTestDataDir, StandardCopyOption.REPLACE_EXISTING);\n   }\n }\n", "next_change": {"commit": "0ed5ab9de16a48a50d18f296a986bef7c53d1753", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\nindex 854bd68da9..92df8e0e29 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n", "chunk": "@@ -86,15 +86,28 @@ public abstract class AbstractTestUpdateConfiguration {\n     }\n   }\n \n+  /**\n+   * Replace the hbase-site.xml file under this test's data directory with the content of the\n+   * override-hbase-site.xml file. Stashes the current existing file so that it can be restored\n+   * using {@link #restoreHBaseSiteXML()}.\n+   *\n+   * @throws IOException\n+   */\n   protected void replaceHBaseSiteXML() throws IOException {\n     // make a backup of hbase-site.xml\n     Files.copy(configFileUnderTestDataDir,\n       backupConfigFileUnderTestDataDir, StandardCopyOption.REPLACE_EXISTING);\n     // update hbase-site.xml by overwriting it\n-    Files.copy(overwriteConfigFileUnderTestDataDir,\n+    Files.copy(overrideConfigFileUnderTestDataDir,\n       configFileUnderTestDataDir, StandardCopyOption.REPLACE_EXISTING);\n   }\n \n+  /**\n+   * Restores the hbase-site.xml file that was stashed by a previous call to\n+   * {@link #replaceHBaseSiteXML()}.\n+   *\n+   * @throws IOException\n+   */\n   protected void restoreHBaseSiteXML() throws IOException {\n     // restore hbase-site.xml\n     Files.copy(backupConfigFileUnderTestDataDir,\n", "next_change": {"commit": "8c549399506762365a239882b4825a3928121830", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\nindex 92df8e0e29..ec6204dbe1 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n", "chunk": "@@ -106,7 +106,7 @@ public abstract class AbstractTestUpdateConfiguration {\n    * Restores the hbase-site.xml file that was stashed by a previous call to\n    * {@link #replaceHBaseSiteXML()}.\n    *\n-   * @throws IOException\n+   * @throws IOException if an I/O error occurs\n    */\n   protected void restoreHBaseSiteXML() throws IOException {\n     // restore hbase-site.xml\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNTI5MQ==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395905291", "body": "i'm surprised an `hbase-site2.xml` exists.", "bodyText": "i'm surprised an hbase-site2.xml exists.", "bodyHTML": "<p dir=\"auto\">i'm surprised an <code>hbase-site2.xml</code> exists.</p>", "author": "ndimiduk", "createdAt": "2020-03-20T21:50:18Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.util.JVMClusterUtil.RegionServerThread;\n+\n+/**\n+ * Base class to test Configuration Update logic. It wraps up things needed to\n+ * test configuration change and provides utility methods for test cluster setup,\n+ * updating/restoring configuration file.\n+ */\n+public abstract class AbstractTestUpdateConfiguration {\n+  private static final int SERVER_CONFIG_INDEX  = 0;\n+  private static final int OVERWRITE_SERVER_CONFIG_INDEX  = 1;\n+  private static final int BACKUP_SERVER_CONFIG_INDEX  = 2;\n+  private static List<Path> newCnfPathes = new ArrayList<>();\n+\n+  protected static void setUpConfigurationFiles(final HBaseTestingUtility testUtil)\n+    throws Exception {\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n+\n+    String absoluteDataPath = testUtil.getDataTestDir().toString();\n+\n+    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n+    // the config file under target/test-class, which is supposed to be immutable.\n+    Files.createDirectories(Paths.get(absoluteDataPath));\n+\n+    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n+    for (String conf : confs) {\n+      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n+      Path newConfPath = Paths.get(absoluteDataPath + conf);\n+\n+      // Do not copy the last one as it does not exist", "originalCommit": "f80dd68d3c2104ba5d96c8dea97cb37b784aa896", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkyMjc4MQ==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395922781", "bodyText": "It is actually named as backup-hbase-site.xml now, :)", "author": "qiaoandxiang", "createdAt": "2020-03-20T22:51:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNTI5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "267b803a3b77472ad50db266121ef24553000599", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\nindex 923faa3907..854bd68da9 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n", "chunk": "@@ -53,24 +53,25 @@ public abstract class AbstractTestUpdateConfiguration {\n \n     String absoluteDataPath = testUtil.getDataTestDir().toString();\n \n-    // Copy Files from target/test-classes to test-data directory, this is to avoid messing up\n-    // the config file under target/test-class, which is supposed to be immutable.\n+    // Create test-data directories.\n     Files.createDirectories(Paths.get(absoluteDataPath));\n \n-    List<String> confs = Arrays.asList(\"/hbase-site.xml\", \"/hbase-site2.xml\", \"/hbase-site3.xml\");\n-    for (String conf : confs) {\n-      Path cnfPath = Paths.get(\"target/test-classes\" + conf);\n-      Path newConfPath = Paths.get(absoluteDataPath + conf);\n+    // Copy hbase-site.xml from target/test-class to target/test-data/UUID directory.\n+    Path configFile = Paths.get(\"target\", \"test-classes\", SERVER_CONFIG);\n+    configFileUnderTestDataDir = Paths.get(absoluteDataPath, SERVER_CONFIG);\n+    Files.copy(configFile, configFileUnderTestDataDir);\n \n-      // Do not copy the last one as it does not exist\n-      if (!conf.equals(\"/hbase-site3.xml\")) {\n-        Files.copy(cnfPath, newConfPath);\n-      }\n-      newCnfPathes.add(newConfPath);\n-    }\n+    // Copy overwrite config file overwrite-hbase-site.xml from target/test-class to\n+    // target/test-data/UUID directory.\n+    Path overwriteConfigFile = Paths.get(\"target\", \"test-classes\",\n+      OVERWRITE_SERVER_CONFIG);\n+    overwriteConfigFileUnderTestDataDir = Paths.get(absoluteDataPath, OVERWRITE_SERVER_CONFIG);\n+    Files.copy(overwriteConfigFile, overwriteConfigFileUnderTestDataDir);\n+\n+    backupConfigFileUnderTestDataDir = Paths.get(absoluteDataPath, BACKUP_SERVER_CONFIG);\n \n     // Add the new custom config file to Configuration\n-    testUtil.getConfiguration().addResource(testUtil.getDataTestDir(\"hbase-site.xml\"));\n+    testUtil.getConfiguration().addResource(testUtil.getDataTestDir(SERVER_CONFIG));\n   }\n \n   protected static void addResourceToRegionServerConfiguration(final HBaseTestingUtility testUtil) {\n", "next_change": null}]}}, {"oid": "267b803a3b77472ad50db266121ef24553000599", "url": "https://github.com/apache/hbase/commit/267b803a3b77472ad50db266121ef24553000599", "message": "HBASE-23957 [flakey test] client.TestMultiParallel fails to read hbase-site.xml", "committedDate": "2020-03-20T23:26:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzMjkwMQ==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395932901", "body": "Hey! it makes a bit of sense now. Much easier to read!", "bodyText": "Hey! it makes a bit of sense now. Much easier to read!", "bodyHTML": "<p dir=\"auto\">Hey! it makes a bit of sense now. Much easier to read!</p>", "author": "ndimiduk", "createdAt": "2020-03-20T23:38:08Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.util.JVMClusterUtil.RegionServerThread;\n+\n+/**\n+ * Base class to test Configuration Update logic. It wraps up things needed to\n+ * test configuration change and provides utility methods for test cluster setup,\n+ * updating/restoring configuration file.\n+ */\n+public abstract class AbstractTestUpdateConfiguration {\n+  private static final String SERVER_CONFIG = \"hbase-site.xml\";\n+  private static final String OVERWRITE_SERVER_CONFIG  = \"overwrite-hbase-site.xml\";\n+  private static final String BACKUP_SERVER_CONFIG  = \"backup-hbase-site.xml\";\n+\n+  private static Path configFileUnderTestDataDir;\n+  private static Path overwriteConfigFileUnderTestDataDir;\n+  private static Path backupConfigFileUnderTestDataDir;\n+\n+  protected static void setUpConfigurationFiles(final HBaseTestingUtility testUtil)\n+    throws Exception {\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n+\n+    String absoluteDataPath = testUtil.getDataTestDir().toString();\n+\n+    // Create test-data directories.\n+    Files.createDirectories(Paths.get(absoluteDataPath));\n+\n+    // Copy hbase-site.xml from target/test-class to target/test-data/UUID directory.\n+    Path configFile = Paths.get(\"target\", \"test-classes\", SERVER_CONFIG);\n+    configFileUnderTestDataDir = Paths.get(absoluteDataPath, SERVER_CONFIG);\n+    Files.copy(configFile, configFileUnderTestDataDir);\n+\n+    // Copy overwrite config file overwrite-hbase-site.xml from target/test-class to\n+    // target/test-data/UUID directory.\n+    Path overwriteConfigFile = Paths.get(\"target\", \"test-classes\",", "originalCommit": "267b803a3b77472ad50db266121ef24553000599", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzOTEwNw==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395939107", "bodyText": ":)", "author": "qiaoandxiang", "createdAt": "2020-03-21T00:12:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzMjkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0ed5ab9de16a48a50d18f296a986bef7c53d1753", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\nindex 854bd68da9..92df8e0e29 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n", "chunk": "@@ -61,12 +61,12 @@ public abstract class AbstractTestUpdateConfiguration {\n     configFileUnderTestDataDir = Paths.get(absoluteDataPath, SERVER_CONFIG);\n     Files.copy(configFile, configFileUnderTestDataDir);\n \n-    // Copy overwrite config file overwrite-hbase-site.xml from target/test-class to\n+    // Copy override config file overrider-hbase-site.xml from target/test-class to\n     // target/test-data/UUID directory.\n-    Path overwriteConfigFile = Paths.get(\"target\", \"test-classes\",\n-      OVERWRITE_SERVER_CONFIG);\n-    overwriteConfigFileUnderTestDataDir = Paths.get(absoluteDataPath, OVERWRITE_SERVER_CONFIG);\n-    Files.copy(overwriteConfigFile, overwriteConfigFileUnderTestDataDir);\n+    Path overrideConfigFile = Paths.get(\"target\", \"test-classes\",\n+      OVERRIDE_SERVER_CONFIG);\n+    overrideConfigFileUnderTestDataDir = Paths.get(absoluteDataPath, OVERRIDE_SERVER_CONFIG);\n+    Files.copy(overrideConfigFile, overrideConfigFileUnderTestDataDir);\n \n     backupConfigFileUnderTestDataDir = Paths.get(absoluteDataPath, BACKUP_SERVER_CONFIG);\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzMzM0NQ==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395933345", "body": "nit: `testUtil.getDataTestDir(SERVER_CONFIG)` is the same path as `configFileUnderTestDataDir` ? why not reuse that existing variable?", "bodyText": "nit: testUtil.getDataTestDir(SERVER_CONFIG) is the same path as configFileUnderTestDataDir ? why not reuse that existing variable?", "bodyHTML": "<p dir=\"auto\">nit: <code>testUtil.getDataTestDir(SERVER_CONFIG)</code> is the same path as <code>configFileUnderTestDataDir</code> ? why not reuse that existing variable?</p>", "author": "ndimiduk", "createdAt": "2020-03-20T23:40:30Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.util.JVMClusterUtil.RegionServerThread;\n+\n+/**\n+ * Base class to test Configuration Update logic. It wraps up things needed to\n+ * test configuration change and provides utility methods for test cluster setup,\n+ * updating/restoring configuration file.\n+ */\n+public abstract class AbstractTestUpdateConfiguration {\n+  private static final String SERVER_CONFIG = \"hbase-site.xml\";\n+  private static final String OVERWRITE_SERVER_CONFIG  = \"overwrite-hbase-site.xml\";\n+  private static final String BACKUP_SERVER_CONFIG  = \"backup-hbase-site.xml\";\n+\n+  private static Path configFileUnderTestDataDir;\n+  private static Path overwriteConfigFileUnderTestDataDir;\n+  private static Path backupConfigFileUnderTestDataDir;\n+\n+  protected static void setUpConfigurationFiles(final HBaseTestingUtility testUtil)\n+    throws Exception {\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n+\n+    String absoluteDataPath = testUtil.getDataTestDir().toString();\n+\n+    // Create test-data directories.\n+    Files.createDirectories(Paths.get(absoluteDataPath));\n+\n+    // Copy hbase-site.xml from target/test-class to target/test-data/UUID directory.\n+    Path configFile = Paths.get(\"target\", \"test-classes\", SERVER_CONFIG);\n+    configFileUnderTestDataDir = Paths.get(absoluteDataPath, SERVER_CONFIG);\n+    Files.copy(configFile, configFileUnderTestDataDir);\n+\n+    // Copy overwrite config file overwrite-hbase-site.xml from target/test-class to\n+    // target/test-data/UUID directory.\n+    Path overwriteConfigFile = Paths.get(\"target\", \"test-classes\",\n+      OVERWRITE_SERVER_CONFIG);\n+    overwriteConfigFileUnderTestDataDir = Paths.get(absoluteDataPath, OVERWRITE_SERVER_CONFIG);\n+    Files.copy(overwriteConfigFile, overwriteConfigFileUnderTestDataDir);\n+\n+    backupConfigFileUnderTestDataDir = Paths.get(absoluteDataPath, BACKUP_SERVER_CONFIG);\n+\n+    // Add the new custom config file to Configuration\n+    testUtil.getConfiguration().addResource(testUtil.getDataTestDir(SERVER_CONFIG));", "originalCommit": "267b803a3b77472ad50db266121ef24553000599", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNzE5Nw==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395937197", "bodyText": "Yeah, you are right!", "author": "qiaoandxiang", "createdAt": "2020-03-21T00:00:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzMzM0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzODk3NA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395938974", "bodyText": "Oh No, my bad. configFileUnderTestDataDir is java Path and addResource() needs a hdfs Path, so cannot reuse here.", "author": "qiaoandxiang", "createdAt": "2020-03-21T00:11:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzMzM0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0ed5ab9de16a48a50d18f296a986bef7c53d1753", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\nindex 854bd68da9..92df8e0e29 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n", "chunk": "@@ -61,12 +61,12 @@ public abstract class AbstractTestUpdateConfiguration {\n     configFileUnderTestDataDir = Paths.get(absoluteDataPath, SERVER_CONFIG);\n     Files.copy(configFile, configFileUnderTestDataDir);\n \n-    // Copy overwrite config file overwrite-hbase-site.xml from target/test-class to\n+    // Copy override config file overrider-hbase-site.xml from target/test-class to\n     // target/test-data/UUID directory.\n-    Path overwriteConfigFile = Paths.get(\"target\", \"test-classes\",\n-      OVERWRITE_SERVER_CONFIG);\n-    overwriteConfigFileUnderTestDataDir = Paths.get(absoluteDataPath, OVERWRITE_SERVER_CONFIG);\n-    Files.copy(overwriteConfigFile, overwriteConfigFileUnderTestDataDir);\n+    Path overrideConfigFile = Paths.get(\"target\", \"test-classes\",\n+      OVERRIDE_SERVER_CONFIG);\n+    overrideConfigFileUnderTestDataDir = Paths.get(absoluteDataPath, OVERRIDE_SERVER_CONFIG);\n+    Files.copy(overrideConfigFile, overrideConfigFileUnderTestDataDir);\n \n     backupConfigFileUnderTestDataDir = Paths.get(absoluteDataPath, BACKUP_SERVER_CONFIG);\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzMzgyNg==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395933826", "body": "I think you mean \"override\", not \"overwrite\", don't you? This is the file that contains _override_ values specific for the given test. It just so happens that it was _overwriting_ the base config file, which was the source of our bugs in the first place :p", "bodyText": "I think you mean \"override\", not \"overwrite\", don't you? This is the file that contains override values specific for the given test. It just so happens that it was overwriting the base config file, which was the source of our bugs in the first place :p", "bodyHTML": "<p dir=\"auto\">I think you mean \"override\", not \"overwrite\", don't you? This is the file that contains <em>override</em> values specific for the given test. It just so happens that it was <em>overwriting</em> the base config file, which was the source of our bugs in the first place :p</p>", "author": "ndimiduk", "createdAt": "2020-03-20T23:42:45Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.util.JVMClusterUtil.RegionServerThread;\n+\n+/**\n+ * Base class to test Configuration Update logic. It wraps up things needed to\n+ * test configuration change and provides utility methods for test cluster setup,\n+ * updating/restoring configuration file.\n+ */\n+public abstract class AbstractTestUpdateConfiguration {\n+  private static final String SERVER_CONFIG = \"hbase-site.xml\";\n+  private static final String OVERWRITE_SERVER_CONFIG  = \"overwrite-hbase-site.xml\";", "originalCommit": "267b803a3b77472ad50db266121ef24553000599", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzODQzMA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395938430", "bodyText": "Got it, :)", "author": "qiaoandxiang", "createdAt": "2020-03-21T00:07:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzMzgyNg=="}], "type": "inlineReview", "revised_code": {"commit": "0ed5ab9de16a48a50d18f296a986bef7c53d1753", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\nindex 854bd68da9..92df8e0e29 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n", "chunk": "@@ -32,11 +32,11 @@ import org.apache.hadoop.hbase.util.JVMClusterUtil.RegionServerThread;\n  */\n public abstract class AbstractTestUpdateConfiguration {\n   private static final String SERVER_CONFIG = \"hbase-site.xml\";\n-  private static final String OVERWRITE_SERVER_CONFIG  = \"overwrite-hbase-site.xml\";\n+  private static final String OVERRIDE_SERVER_CONFIG  = \"override-hbase-site.xml\";\n   private static final String BACKUP_SERVER_CONFIG  = \"backup-hbase-site.xml\";\n \n   private static Path configFileUnderTestDataDir;\n-  private static Path overwriteConfigFileUnderTestDataDir;\n+  private static Path overrideConfigFileUnderTestDataDir;\n   private static Path backupConfigFileUnderTestDataDir;\n \n   protected static void setUpConfigurationFiles(final HBaseTestingUtility testUtil)\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNDM3NQ==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395934375", "body": "since these methods are part of an interface consumed by children, some javadoc would be nice here. Something like\r\n\r\n> replace the site.xml file under this test's data directory with the content of the override file. stashes the current existing file so that it can be restored using {@link #restoreHBaseSiteXML()}\r\n\r\nand \r\n\r\n> Restores the site.xml that was stashed by a previous call to {@link #replaceHBaseSiteXML()}.", "bodyText": "since these methods are part of an interface consumed by children, some javadoc would be nice here. Something like\n\nreplace the site.xml file under this test's data directory with the content of the override file. stashes the current existing file so that it can be restored using {@link #restoreHBaseSiteXML()}\n\nand\n\nRestores the site.xml that was stashed by a previous call to {@link #replaceHBaseSiteXML()}.", "bodyHTML": "<p dir=\"auto\">since these methods are part of an interface consumed by children, some javadoc would be nice here. Something like</p>\n<blockquote>\n<p dir=\"auto\">replace the site.xml file under this test's data directory with the content of the override file. stashes the current existing file so that it can be restored using {<a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/link/hovercard\" href=\"https://github.com/link\">@link</a> #restoreHBaseSiteXML()}</p>\n</blockquote>\n<p dir=\"auto\">and</p>\n<blockquote>\n<p dir=\"auto\">Restores the site.xml that was stashed by a previous call to {<a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/link/hovercard\" href=\"https://github.com/link\">@link</a> #replaceHBaseSiteXML()}.</p>\n</blockquote>", "author": "ndimiduk", "createdAt": "2020-03-20T23:45:33Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.util.JVMClusterUtil.RegionServerThread;\n+\n+/**\n+ * Base class to test Configuration Update logic. It wraps up things needed to\n+ * test configuration change and provides utility methods for test cluster setup,\n+ * updating/restoring configuration file.\n+ */\n+public abstract class AbstractTestUpdateConfiguration {\n+  private static final String SERVER_CONFIG = \"hbase-site.xml\";\n+  private static final String OVERWRITE_SERVER_CONFIG  = \"overwrite-hbase-site.xml\";\n+  private static final String BACKUP_SERVER_CONFIG  = \"backup-hbase-site.xml\";\n+\n+  private static Path configFileUnderTestDataDir;\n+  private static Path overwriteConfigFileUnderTestDataDir;\n+  private static Path backupConfigFileUnderTestDataDir;\n+\n+  protected static void setUpConfigurationFiles(final HBaseTestingUtility testUtil)\n+    throws Exception {\n+    // Before this change, the test will update hbase-site.xml under target/test-classes and\n+    // trigger a config reload. Since target/test-classes/hbase-site.xml is being used by\n+    // other testing cases at the same time, this update will break other testing cases so it will\n+    // be flakey in nature.\n+    // To avoid this, the change is to make target/test-classes/hbase-site.xml immutable. A new\n+    // hbase-site.xml will be created under its test data directory, i.e,\n+    // hbase-server/target/test-data/UUID, this new file will be added as a resource for the\n+    // config, new update will be applied to this new file and only visible to this specific test\n+    // case. The target/test-classes/hbase-site.xml will not be changed during the test.\n+\n+    String absoluteDataPath = testUtil.getDataTestDir().toString();\n+\n+    // Create test-data directories.\n+    Files.createDirectories(Paths.get(absoluteDataPath));\n+\n+    // Copy hbase-site.xml from target/test-class to target/test-data/UUID directory.\n+    Path configFile = Paths.get(\"target\", \"test-classes\", SERVER_CONFIG);\n+    configFileUnderTestDataDir = Paths.get(absoluteDataPath, SERVER_CONFIG);\n+    Files.copy(configFile, configFileUnderTestDataDir);\n+\n+    // Copy overwrite config file overwrite-hbase-site.xml from target/test-class to\n+    // target/test-data/UUID directory.\n+    Path overwriteConfigFile = Paths.get(\"target\", \"test-classes\",\n+      OVERWRITE_SERVER_CONFIG);\n+    overwriteConfigFileUnderTestDataDir = Paths.get(absoluteDataPath, OVERWRITE_SERVER_CONFIG);\n+    Files.copy(overwriteConfigFile, overwriteConfigFileUnderTestDataDir);\n+\n+    backupConfigFileUnderTestDataDir = Paths.get(absoluteDataPath, BACKUP_SERVER_CONFIG);\n+\n+    // Add the new custom config file to Configuration\n+    testUtil.getConfiguration().addResource(testUtil.getDataTestDir(SERVER_CONFIG));\n+  }\n+\n+  protected static void addResourceToRegionServerConfiguration(final HBaseTestingUtility testUtil) {\n+    // When RegionServer is created in MiniHBaseCluster, it uses HBaseConfiguration.create(conf) of\n+    // the master Configuration. The create() just copies config params over, it does not do\n+    // a clone for a historic reason. Properties such as resources are lost during this process.\n+    // Exposing a new method in HBaseConfiguration causes confusion. Instead, the new hbase-site.xml\n+    // under test-data directory is added to RegionServer's configuration as a workaround.\n+    for (RegionServerThread rsThread : testUtil.getMiniHBaseCluster().getRegionServerThreads()) {\n+      rsThread.getRegionServer().getConfiguration().addResource(\n+        testUtil.getDataTestDir(SERVER_CONFIG));\n+    }\n+  }\n+\n+  protected void replaceHBaseSiteXML() throws IOException {", "originalCommit": "267b803a3b77472ad50db266121ef24553000599", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNzI4OA==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395937288", "bodyText": "Let me address it.", "author": "qiaoandxiang", "createdAt": "2020-03-21T00:01:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNDM3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0ed5ab9de16a48a50d18f296a986bef7c53d1753", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\nindex 854bd68da9..92df8e0e29 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n", "chunk": "@@ -86,15 +86,28 @@ public abstract class AbstractTestUpdateConfiguration {\n     }\n   }\n \n+  /**\n+   * Replace the hbase-site.xml file under this test's data directory with the content of the\n+   * override-hbase-site.xml file. Stashes the current existing file so that it can be restored\n+   * using {@link #restoreHBaseSiteXML()}.\n+   *\n+   * @throws IOException\n+   */\n   protected void replaceHBaseSiteXML() throws IOException {\n     // make a backup of hbase-site.xml\n     Files.copy(configFileUnderTestDataDir,\n       backupConfigFileUnderTestDataDir, StandardCopyOption.REPLACE_EXISTING);\n     // update hbase-site.xml by overwriting it\n-    Files.copy(overwriteConfigFileUnderTestDataDir,\n+    Files.copy(overrideConfigFileUnderTestDataDir,\n       configFileUnderTestDataDir, StandardCopyOption.REPLACE_EXISTING);\n   }\n \n+  /**\n+   * Restores the hbase-site.xml file that was stashed by a previous call to\n+   * {@link #replaceHBaseSiteXML()}.\n+   *\n+   * @throws IOException\n+   */\n   protected void restoreHBaseSiteXML() throws IOException {\n     // restore hbase-site.xml\n     Files.copy(backupConfigFileUnderTestDataDir,\n", "next_change": {"commit": "8c549399506762365a239882b4825a3928121830", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\nindex 92df8e0e29..ec6204dbe1 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestUpdateConfiguration.java\n", "chunk": "@@ -106,7 +106,7 @@ public abstract class AbstractTestUpdateConfiguration {\n    * Restores the hbase-site.xml file that was stashed by a previous call to\n    * {@link #replaceHBaseSiteXML()}.\n    *\n-   * @throws IOException\n+   * @throws IOException if an I/O error occurs\n    */\n   protected void restoreHBaseSiteXML() throws IOException {\n     // restore hbase-site.xml\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNDYwOQ==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395934609", "body": "nit: we make a habit of using the logger's format string capability. That way it only performs the computation necessary to build the log message if the logger is emitting messages at the target level.\r\n\r\n```java\r\nLOG.debug(\"Starting the test {}\", name.getMethodName());\r\n```", "bodyText": "nit: we make a habit of using the logger's format string capability. That way it only performs the computation necessary to build the log message if the logger is emitting messages at the target level.\nLOG.debug(\"Starting the test {}\", name.getMethodName());", "bodyHTML": "<p dir=\"auto\">nit: we make a habit of using the logger's format string capability. That way it only performs the computation necessary to build the log message if the logger is emitting messages at the target level.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"LOG.debug(&quot;Starting the test {}&quot;, name.getMethodName());\n\"><pre><span class=\"pl-c1\">LOG</span><span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Starting the test {}<span class=\"pl-pds\">\"</span></span>, name<span class=\"pl-k\">.</span>getMethodName());</pre></div>", "author": "ndimiduk", "createdAt": "2020-03-20T23:46:40Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java", "diffHunk": "@@ -49,57 +47,47 @@\n \n   @BeforeClass\n   public static void setup() throws Exception {\n-    // Set master number and use default values for other options.\n+    setUpConfigurationFiles(TEST_UTIL);\n     StartMiniClusterOption option = StartMiniClusterOption.builder().numMasters(2).build();\n     TEST_UTIL.startMiniCluster(option);\n+    addResourceToRegionServerConfiguration(TEST_UTIL);\n   }\n \n+  @Rule\n+  public TestName name = new TestName();\n+\n   @Test\n   public void testOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test\");\n+    LOG.debug(\"Starting the test \" + name.getMethodName());\n     Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName();\n     admin.updateConfiguration(server);\n   }\n \n   @Test\n   public void testMasterOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test\");\n-    Path cnfPath = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site.xml\");\n-    Path cnf2Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site2.xml\");\n-    Path cnf3Path = FileSystems.getDefault().getPath(\"target/test-classes/hbase-site3.xml\");\n-    // make a backup of hbase-site.xml\n-    Files.copy(cnfPath, cnf3Path, StandardCopyOption.REPLACE_EXISTING);\n-    // update hbase-site.xml by overwriting it\n-    Files.copy(cnf2Path, cnfPath, StandardCopyOption.REPLACE_EXISTING);\n-\n+    LOG.debug(\"Starting the test \" + name.getMethodName());\n+    replaceHBaseSiteXML();\n     Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getMaster().getServerName();\n     admin.updateConfiguration(server);\n     Configuration conf = TEST_UTIL.getMiniHBaseCluster().getMaster().getConfiguration();\n     int custom = conf.getInt(\"hbase.custom.config\", 0);\n     assertEquals(1000, custom);\n-    // restore hbase-site.xml\n-    Files.copy(cnf3Path, cnfPath, StandardCopyOption.REPLACE_EXISTING);\n+    restoreHBaseSiteXML();\n   }\n \n   @Test\n   public void testAllOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test\");\n+    LOG.debug(\"Starting the test \" + name.getMethodName());", "originalCommit": "267b803a3b77472ad50db266121ef24553000599", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNjgyMg==", "url": "https://github.com/apache/hbase/pull/1310#discussion_r395936822", "bodyText": "Good to know, let me update.", "author": "qiaoandxiang", "createdAt": "2020-03-20T23:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNDYwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "84cba8e4340615630df726deec8cda5c208cab3c", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\nindex f8406a99b1..e8036fc4e9 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java\n", "chunk": "@@ -79,14 +79,14 @@ public class TestUpdateConfiguration extends AbstractTestUpdateConfiguration {\n \n   @Test\n   public void testAllOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test \" + name.getMethodName());\n+    LOG.debug(\"Starting the test {} \", name.getMethodName());\n     Admin admin = TEST_UTIL.getAdmin();\n     admin.updateConfiguration();\n   }\n \n   @Test\n   public void testAllCustomOnlineConfigChange() throws IOException {\n-    LOG.debug(\"Starting the test \" + name.getMethodName());\n+    LOG.debug(\"Starting the test {}\", name.getMethodName());\n     replaceHBaseSiteXML();\n \n     Admin admin = TEST_UTIL.getAdmin();\n", "next_change": null}]}}, {"oid": "0ed5ab9de16a48a50d18f296a986bef7c53d1753", "url": "https://github.com/apache/hbase/commit/0ed5ab9de16a48a50d18f296a986bef7c53d1753", "message": "HBASE-23957 [flakey test] client.TestMultiParallel fails to read hbase-site.xml", "committedDate": "2020-03-21T06:44:07Z", "type": "forcePushed"}, {"oid": "84cba8e4340615630df726deec8cda5c208cab3c", "url": "https://github.com/apache/hbase/commit/84cba8e4340615630df726deec8cda5c208cab3c", "message": "HBASE-23957 [flakey test] client.TestMultiParallel fails to read hbase-site.xml", "committedDate": "2020-03-21T06:49:35Z", "type": "forcePushed"}, {"oid": "8c549399506762365a239882b4825a3928121830", "url": "https://github.com/apache/hbase/commit/8c549399506762365a239882b4825a3928121830", "message": "HBASE-23957 [flakey test] client.TestMultiParallel fails to read hbase-site.xml", "committedDate": "2020-03-21T16:27:20Z", "type": "commit"}, {"oid": "8c549399506762365a239882b4825a3928121830", "url": "https://github.com/apache/hbase/commit/8c549399506762365a239882b4825a3928121830", "message": "HBASE-23957 [flakey test] client.TestMultiParallel fails to read hbase-site.xml", "committedDate": "2020-03-21T16:27:20Z", "type": "forcePushed"}]}