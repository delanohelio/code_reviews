{"pr_number": 2501, "pr_title": "HBASE-25065 WAL archival to be done by a separate thread", "pr_author": "ramkrish86", "pr_createdAt": "2020-10-05T07:06:44Z", "pr_url": "https://github.com/apache/hbase/pull/2501", "merge_commit": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNDIyOQ==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501434229", "body": "Why the cast? Isn't HRegionServer a Server?", "bodyText": "Why the cast? Isn't HRegionServer a Server?", "bodyHTML": "<p dir=\"auto\">Why the cast? Isn't HRegionServer a Server?</p>", "author": "saintstack", "createdAt": "2020-10-08T03:57:53Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java", "diffHunk": "@@ -1905,8 +1906,8 @@ public boolean isOnline() {\n   private void setupWALAndReplication() throws IOException {\n     boolean isMasterNoTableOrSystemTableOnly = this instanceof HMaster &&\n         !LoadBalancer.isMasterCanHostUserRegions(conf);\n-    WALFactory factory =\n-        new WALFactory(conf, serverName.toString(), !isMasterNoTableOrSystemTableOnly);\n+    WALFactory factory = new WALFactory(conf, serverName.toString(), (Server) this,", "originalCommit": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\nindex 9a4287e0e8..8232965043 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\n", "chunk": "@@ -1906,8 +1906,8 @@ public class HRegionServer extends Thread implements\n   private void setupWALAndReplication() throws IOException {\n     boolean isMasterNoTableOrSystemTableOnly = this instanceof HMaster &&\n         !LoadBalancer.isMasterCanHostUserRegions(conf);\n-    WALFactory factory = new WALFactory(conf, serverName.toString(), (Server) this,\n-        !isMasterNoTableOrSystemTableOnly);\n+    WALFactory factory =\n+        new WALFactory(conf, serverName.toString(), this, !isMasterNoTableOrSystemTableOnly);\n     if (!isMasterNoTableOrSystemTableOnly) {\n       // TODO Replication make assumptions here based on the default filesystem impl\n       Path oldLogDir = new Path(walRootDir, HConstants.HREGION_OLDLOGDIR_NAME);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\nindex 9a4287e0e8..d51eab4ec4 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\n", "chunk": "@@ -1906,8 +1905,8 @@ public class HRegionServer extends Thread implements\n   private void setupWALAndReplication() throws IOException {\n     boolean isMasterNoTableOrSystemTableOnly = this instanceof HMaster &&\n         !LoadBalancer.isMasterCanHostUserRegions(conf);\n-    WALFactory factory = new WALFactory(conf, serverName.toString(), (Server) this,\n-        !isMasterNoTableOrSystemTableOnly);\n+    WALFactory factory =\n+        new WALFactory(conf, serverName.toString(), this, !isMasterNoTableOrSystemTableOnly);\n     if (!isMasterNoTableOrSystemTableOnly) {\n       // TODO Replication make assumptions here based on the default filesystem impl\n       Path oldLogDir = new Path(walRootDir, HConstants.HREGION_OLDLOGDIR_NAME);\n", "next_change": {"commit": "781da1899aad7a50ce9c096be757cc1cab3dc15e", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\nindex d51eab4ec4..e555439e9a 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\n", "chunk": "@@ -1903,11 +1942,10 @@ public class HRegionServer extends Thread implements\n    * be hooked up to WAL.\n    */\n   private void setupWALAndReplication() throws IOException {\n-    boolean isMasterNoTableOrSystemTableOnly = this instanceof HMaster &&\n-        !LoadBalancer.isMasterCanHostUserRegions(conf);\n+    boolean isMaster = this instanceof HMaster;\n     WALFactory factory =\n-        new WALFactory(conf, serverName.toString(), this, !isMasterNoTableOrSystemTableOnly);\n-    if (!isMasterNoTableOrSystemTableOnly) {\n+        new WALFactory(conf, serverName.toString(), this, !isMaster);\n+    if (!isMaster) {\n       // TODO Replication make assumptions here based on the default filesystem impl\n       Path oldLogDir = new Path(walRootDir, HConstants.HREGION_OLDLOGDIR_NAME);\n       String logName = AbstractFSWALProvider.getWALDirectoryName(this.serverName.toString());\n", "next_change": {"commit": "d26bcaaa915901970c4ddd56a9f1e601fedb29c4", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\nindex e555439e9a..efd9fa70f9 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\n", "chunk": "@@ -1942,28 +1635,24 @@ public class HRegionServer extends Thread implements\n    * be hooked up to WAL.\n    */\n   private void setupWALAndReplication() throws IOException {\n-    boolean isMaster = this instanceof HMaster;\n-    WALFactory factory =\n-        new WALFactory(conf, serverName.toString(), this, !isMaster);\n-    if (!isMaster) {\n-      // TODO Replication make assumptions here based on the default filesystem impl\n-      Path oldLogDir = new Path(walRootDir, HConstants.HREGION_OLDLOGDIR_NAME);\n-      String logName = AbstractFSWALProvider.getWALDirectoryName(this.serverName.toString());\n-\n-      Path logDir = new Path(walRootDir, logName);\n-      LOG.debug(\"logDir={}\", logDir);\n-      if (this.walFs.exists(logDir)) {\n-        throw new RegionServerRunningException(\n-            \"Region server has already created directory at \" + this.serverName.toString());\n-      }\n-      // Always create wal directory as now we need this when master restarts to find out the live\n-      // region servers.\n-      if (!this.walFs.mkdirs(logDir)) {\n-        throw new IOException(\"Can not create wal directory \" + logDir);\n-      }\n-      // Instantiate replication if replication enabled. Pass it the log directories.\n-      createNewReplicationInstance(conf, this, this.walFs, logDir, oldLogDir, factory);\n-    }\n+    WALFactory factory = new WALFactory(conf, serverName.toString(), this, true);\n+    // TODO Replication make assumptions here based on the default filesystem impl\n+    Path oldLogDir = new Path(walRootDir, HConstants.HREGION_OLDLOGDIR_NAME);\n+    String logName = AbstractFSWALProvider.getWALDirectoryName(this.serverName.toString());\n+\n+    Path logDir = new Path(walRootDir, logName);\n+    LOG.debug(\"logDir={}\", logDir);\n+    if (this.walFs.exists(logDir)) {\n+      throw new RegionServerRunningException(\n+        \"Region server has already created directory at \" + this.serverName.toString());\n+    }\n+    // Always create wal directory as now we need this when master restarts to find out the live\n+    // region servers.\n+    if (!this.walFs.mkdirs(logDir)) {\n+      throw new IOException(\"Can not create wal directory \" + logDir);\n+    }\n+    // Instantiate replication if replication enabled. Pass it the log directories.\n+    createNewReplicationInstance(conf, this, this.walFs, logDir, oldLogDir, factory);\n     this.walFactory = factory;\n   }\n \n", "next_change": {"commit": "655f19c64573a9a509ec8a657c6e0ef71337b23a", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\nindex efd9fa70f9..0d8a16ffd4 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\n", "chunk": "@@ -1653,9 +1746,23 @@ public class HRegionServer extends HBaseServerBase<RSRpcServices>\n     }\n     // Instantiate replication if replication enabled. Pass it the log directories.\n     createNewReplicationInstance(conf, this, this.walFs, logDir, oldLogDir, factory);\n+\n+    WALActionsListener walEventListener = getWALEventTrackerListener(conf);\n+    if (walEventListener != null && factory.getWALProvider() != null) {\n+      factory.getWALProvider().addWALActionsListener(walEventListener);\n+    }\n     this.walFactory = factory;\n   }\n \n+  private WALActionsListener getWALEventTrackerListener(Configuration conf) {\n+    if (conf.getBoolean(WAL_EVENT_TRACKER_ENABLED_KEY, WAL_EVENT_TRACKER_ENABLED_DEFAULT)) {\n+      WALEventTrackerListener listener =\n+        new WALEventTrackerListener(conf, getNamedQueueRecorder(), getServerName());\n+      return listener;\n+    }\n+    return null;\n+  }\n+\n   /**\n    * Start up replication source and sink handlers.\n    */\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "message": "Merge commit", "committedDate": null}, {"oid": "5c7432f4a9a99674fa3c318d00f8cbee0d83441c", "committedDate": "2020-11-09 12:27:34 +0530", "message": "HBASE-24667 Rename configs that support atypical DNS set ups to put them in hbase.unsafe"}, {"oid": "300b0a650f94567a1b0ca281cbc3d00f7eeb6956", "committedDate": "2020-11-17 08:48:59 +0530", "message": "HBASE-25026 Create a metric to track full region scans RPCs"}, {"oid": "7964d2ec6d2f43a53fd436bace07f53055165472", "committedDate": "2020-11-20 00:04:48 -0800", "message": "HBASE-25068 Pass WALFactory to Replication so it knows of all WALProviders, not just default/user-space"}, {"oid": "89cb0c537010e5625033014844bded7426e798d6", "committedDate": "2020-11-20 00:04:48 -0800", "message": "HBASE-25055 Add ReplicationSource for meta WALs; add enable/disable w\u2026 (#2451)"}, {"oid": "f221d11227049a95bbe1ee531d237bed001a6914", "committedDate": "2020-11-24 15:31:04 +0530", "message": "HBASE-25050 - We initialize Filesystems more than once. (#2419)"}, {"oid": "1726160839368df14602da1618e3538955b25f74", "committedDate": "2020-11-25 14:10:12 -0800", "message": "HBASE-24640 Purge use of VisibleForTesting (#2695)"}, {"oid": "679dd7b8f906b58d709200a48c38c41873fa5fc2", "committedDate": "2020-11-28 21:01:22 +0800", "message": "HBASE-25292 Improve InetSocketAddress usage discipline (#2669)"}, {"oid": "7da90a1e23e6421e2370638b7f2f6f7dab33b984", "committedDate": "2020-11-30 21:04:51 -0800", "message": "HBASE-25345 [Flakey Tests] branch-2 TestReadReplicas#testVerifySecondaryAbilityToReadWithOnFiles (#2727)"}, {"oid": "c96fbf04077fa37555033f88939fdd69ac810b35", "committedDate": "2020-12-29 22:25:36 +0530", "message": "HBASE-25379 Make retry pause time configurable for regionserver short operation RPC (reportRegionStateTransition/reportProcedureDone) (#2757)"}, {"oid": "a37e72799015ce2a0d6ce98566149a17b31c99ea", "committedDate": "2021-01-20 16:10:36 +0800", "message": "HBASE-25509 ChoreService.cancelChore will not call ScheduledChore.cle\u2026 (#2890)"}, {"oid": "618236dd9040625cf38a4d98338ccff8ab35bfec", "committedDate": "2021-02-16 11:12:00 -0800", "message": "HBASE-25547: Thread pools should release unused resources (#2922)"}, {"oid": "c1dacfd57744d0c205dd00e73c9f2d7252a8d869", "committedDate": "2021-03-08 15:00:18 -0800", "message": "HBASE-25547 (addendum): Roll ExecutorType into ExecutorConfig (#2996)"}, {"oid": "1e4639d2ebbff3e100b97e3ed1c863691299be2d", "committedDate": "2021-03-25 10:39:07 -0700", "message": "HBASE-25032 Wait for region server to become online before adding it to online servers in Master (#2769)"}, {"oid": "781da1899aad7a50ce9c096be757cc1cab3dc15e", "committedDate": "2021-04-20 21:31:09 +0800", "message": "HBASE-25290 Remove table on master related code in balancer implementation (#3162)"}, {"oid": "302d9ea8b888762a5a20a5ba5c2be7bc239afaef", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25373 Remove HTrace completely in code base and try to make use of OpenTelemetry"}, {"oid": "b061b0c4ed43cef331d9e0a1d1c93779f2ae3ad7", "committedDate": "2021-04-28 16:46:36 -0700", "message": "HBASE-25779 HRegionServer#compactSplitThread should be private"}, {"oid": "00fec24c9019df36bde73f9cdb72e8791e5924d9", "committedDate": "2021-05-02 21:30:48 +0530", "message": "HBASE-25790 NamedQueue 'BalancerRejection' for recent history of balancer skipping (#3182)"}, {"oid": "17193dae586daeedba0e45bdf99d442ecc3ef94e", "committedDate": "2021-05-04 15:40:17 -0700", "message": "HBASE-25842 move regionserver http-related code into o.a.h.h.regionserver.http"}, {"oid": "02b018cf1a2aa1d3dc8814423043022c01ec45b0", "committedDate": "2021-05-07 18:21:46 -0700", "message": "HBASE-25774 ServerManager.getOnlineServer may miss some region servers when refreshing state in some procedure implementations"}, {"oid": "630c73fda479d587779b35053c452b3219e579a6", "committedDate": "2021-05-11 19:26:57 +0100", "message": "HBASE-25867 Extra doc around ITBLL (#3242)"}, {"oid": "d69d5c24b12d34d73d134d2fe98c6524d1e51d22", "committedDate": "2021-05-14 09:31:06 -0700", "message": "HBASE-25861 Correct the usage of Configuration#addDeprecation (#3249)"}, {"oid": "3f7d2897a1810f4f05c8bc387567636c54422344", "committedDate": "2021-05-28 20:52:07 +0530", "message": "HBASE-25910 - Fix port assignment test (#3308)"}, {"oid": "335305e0cf1ae00b18d6e7fb26a0e3617a4481a6", "committedDate": "2021-06-01 09:57:48 -0700", "message": "HBASE-25911 Replace calls to System.currentTimeMillis with EnvironmentEdgeManager.currentTime (#3302)"}, {"oid": "426c3c16f30c15f9c5cbb198674e11aaa047b60a", "committedDate": "2021-06-03 15:48:03 +0800", "message": "HBASE-25799 add clusterReadRequests and clusterWriteRequests jmx (#3188)"}, {"oid": "51893b9ba334a7a014e649d7b12f59f44b120969", "committedDate": "2021-06-30 08:44:19 +0800", "message": "HBASE-26029 It is not reliable to use nodeDeleted event to track region server's death (#3430)"}, {"oid": "63d4970de451bf234f2ddbda949995b1420e525b", "committedDate": "2021-08-04 23:44:10 +0800", "message": "HBASE-26150 Let region server also carry ClientMetaService (#3550)"}, {"oid": "c8d9d4df80c64fd8e57b0adde51885544a02be62", "committedDate": "2021-08-19 16:16:35 +0800", "message": "HBASE-26172 Deprecated MasterRegistry (#3566)"}, {"oid": "d4593ce8c5ec098ce10c1c78a04bd13f45dad9e8", "committedDate": "2021-08-20 15:35:28 +0800", "message": "HBASE-26181 Region server and master could use itself as ConnectionRegistry (#3603)"}, {"oid": "137c7dcd3d495da5f01fbbd6fd988bda7b3cd504", "committedDate": "2021-08-25 19:20:10 +0800", "message": "HBASE-26214 Introduce a ConnectionRegistryEndpoint interface (#3613)"}, {"oid": "00981643d2fd1b393bd23d9eb43227a4e42d1000", "committedDate": "2021-08-28 22:23:23 +0800", "message": "HBASE-26216 Move HRegionServer.abort(String) to Abortable as a default method (#3642)"}, {"oid": "889049eab666f99bc300c070ced5505d0a59d3c5", "committedDate": "2021-08-30 12:14:10 +0800", "message": "HBASE-26235 We could start RegionServerTracker before becoming active master (#3645)"}, {"oid": "d26bcaaa915901970c4ddd56a9f1e601fedb29c4", "committedDate": "2021-09-13 09:56:13 +0800", "message": "HBASE-25288 Make MasterRpcServices not extends RSRpcServices and also HMaster not extends HRegionServer (#3612)"}, {"oid": "a9abdf49369c81b4fdbc833960b3b5a0b15e3047", "committedDate": "2021-09-22 00:00:35 +0800", "message": "HBASE-26288 Revisit the usage of MetaTableLocator when HRegionServer.TEST_SKIP_REPORTING_TRANSITION is true (#3689)"}, {"oid": "113cc2a591604fc50623750bb3e9a01f64349796", "committedDate": "2021-09-28 23:27:47 +0800", "message": "HBASE-26293 Use reservoir sampling when selecting bootstrap nodes (#3702)"}, {"oid": "1152a61b5b014073f8106ab9730630e1d36ff967", "committedDate": "2021-09-29 21:12:58 +0800", "message": "HBASE-26220 Use P2P communicate between region servers to sync the list for bootstrap node (#3697)"}, {"oid": "0d8e5e5219701b56117f52c9effbd9f5e70ef7cc", "committedDate": "2021-10-22 12:50:45 +0530", "message": "HBASE-26368 Fix checkstyle issues for HRegionServer (#3764)"}, {"oid": "77b6b4dee390c49fb49257f1500ec216fe620819", "committedDate": "2021-12-18 11:58:16 +0800", "message": "HBASE-26340 TableSplit returns false size under 1MB (#3872)"}, {"oid": "a288365f929f46295dff88608f3a1660b9e98a7c", "committedDate": "2021-12-22 15:05:59 -0500", "message": "HBASE-26271 Cleanup the broken store files under data directory (#3786)"}, {"oid": "dbdef5982a05f58321fce0330d0ebd28a4d8ae50", "committedDate": "2021-12-23 10:37:17 +0800", "message": "HBASE-26609 Round the size to MB or KB at the end of calculation in HRegionServer.createRegionLoad (#3967)"}, {"oid": "0b29a7934a2ceda522363bd7aec8e5df6ee92b1b", "committedDate": "2021-12-31 12:29:48 +0800", "message": "HBASE-26413 Limit the total size of buffered region replication entries (#3844)"}, {"oid": "ce2bbaf30a58fcf8bfe0c9181a702a13ad766ffa", "committedDate": "2022-01-05 11:10:16 +0800", "message": "HBASE-26578 CompactedHFilesDischarger should be shutdown when aborting regionserver (#3946)"}, {"oid": "407c6e7b22cfe3672c9347b09a085cbdc3f1e091", "committedDate": "2022-02-15 18:38:18 -0800", "message": "HBASE-26730 Extend hbase shell 'status' command to support an option 'tasks' (#4095)"}, {"oid": "10471944bd2afcd423b604c36a57d686cc15a9e9", "committedDate": "2022-03-08 13:49:02 -0800", "message": "HBASE-26582 Prune use of Random and SecureRandom objects (#4118)"}, {"oid": "fd301ad55f145c3aad5e49f8b4b97b11683d2b74", "committedDate": "2022-03-12 23:21:22 +0800", "message": "HBASE-26323 Introduce a Snapshot Procedure (#4115)"}, {"oid": "4ac600b04b7537d1bb171ba1501ad845dbb37fdb", "committedDate": "2022-03-24 17:08:50 -0700", "message": "HBASE-26810 Add dynamic configuration support for system coprocessors (#4181)"}, {"oid": "805c346e54bffbed2e7c80029855fcabc69be03f", "committedDate": "2022-03-31 21:46:20 +0800", "message": "HBASE-26811 Secondary replica may be disabled for read forever (#4182)"}, {"oid": "ba713ac379a9d2faa2d875eebd9315e7b9485879", "committedDate": "2022-04-27 00:21:57 +0800", "message": "HBASE-26951 HMaster should exit gracefully, when stopped via hbase-daemon.sh (#4358)"}, {"oid": "9c8c9e7fbf8005ea89fa9b13d6d063b9f0240443", "committedDate": "2022-05-01 22:15:09 +0800", "message": "HBASE-26899 Run spotless:apply"}, {"oid": "ed7e15dc9102c10d0a06595e4a7745ab5b9f2d35", "committedDate": "2022-06-10 16:25:55 +0200", "message": "HBASE-26366 Provide meaningful parent spans to ZK interactions"}, {"oid": "5d0f4dc729a471c1dd0b926f0d6fabdbca01d7f7", "committedDate": "2022-06-15 00:41:24 +0800", "message": "HBASE-27091 Speed up the loading of table descriptor from filesystem (#4493)"}, {"oid": "86b7b027b774fdac1f3c93707fcf32564b6ba588", "committedDate": "2022-06-15 00:47:28 +0800", "message": "Revert \"HBASE-27091 Speed up the loading of table descriptor from filesystem (#4493)\""}, {"oid": "c6298c709a10e581f20a5038f2cb2463f01b7195", "committedDate": "2022-06-15 00:48:25 +0800", "message": "HBASE-27091 Speed up the loading of table descriptor from filesystem (#4493)"}, {"oid": "5cf728da5a0fea5fd94bb31f06c9a43158ace6b4", "committedDate": "2022-06-21 10:18:55 +0100", "message": "HBASE-26969:Eliminate MOB renames when SFT is enabled (#4418)"}, {"oid": "acf144717bd85d2486cc33fbb0e3622b06c66717", "committedDate": "2022-07-19 10:00:43 +0800", "message": "HBASE-27220 Apply the spotless format change in HBASE-27208 to our code base"}, {"oid": "63cdd026f08cdde6ac0fde1342ffd050e8e02441", "committedDate": "2022-10-06 18:17:34 +0800", "message": "HBASE-27401 Clean up current broken 'n's in our javadoc (#4812)"}, {"oid": "655f19c64573a9a509ec8a657c6e0ef71337b23a", "committedDate": "2022-11-03 11:27:08 -0700", "message": "HBASE-26913 Replication Observability Framework (#4556)"}, {"oid": "222ec684d68de25d20dac3be2614863c1c4cbd20", "committedDate": "2022-12-16 18:41:05 +0000", "message": "HBASE-27474 Evict blocks on split/merge; Avoid caching reference/hlinks if compaction is enabled (#4868)"}, {"oid": "4add5250ed322628f9e783efca1b33773b98705b", "committedDate": "2023-01-10 14:35:55 +0800", "message": "HBASE-27489 Fix several problems after HBASE-27304 (#4903)"}, {"oid": "f5437b9cebf99bc02c3c5a619e2a2470d7f961bb", "committedDate": "2023-03-28 15:17:16 +0800", "message": "HBASE-27333 Abort RS when the hostname is different from master seen (#4732)"}, {"oid": "18ae733b15ae2bc316f41af1a46e5619d2b35fe2", "committedDate": "2023-04-23 22:25:31 +0800", "message": "HBASE-27806 Support dynamic reinitializing replication peer storage (#5195)"}, {"oid": "d49df8b7a96cbeca60c09f837f2cd4f2067f9ddf", "committedDate": "2023-05-08 21:32:21 +0800", "message": "HBASE-27844 changed type names to avoid conflicts with built-in types (#5223)"}, {"oid": "6d0311c1d968de2750e9efacaaf5f71fb3bb2108", "committedDate": "2023-05-15 22:53:48 +0800", "message": "HBASE-27214 Implement the new replication hfile/log cleaner (#4722)"}, {"oid": "40976b0969d549ed6651c8bbc746ed7da33efd01", "committedDate": "2023-06-06 22:00:50 +0800", "message": "HBASE-27855 Support dynamic adjustment of flusher count (#5247)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNDQ0OQ==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501434449", "body": "Is it a good idea adding 'Server' in here? I think been trying to keep it so this is apart from need for a 'Server'?", "bodyText": "Is it a good idea adding 'Server' in here? I think been trying to keep it so this is apart from need for a 'Server'?", "bodyHTML": "<p dir=\"auto\">Is it a good idea adding 'Server' in here? I think been trying to keep it so this is apart from need for a 'Server'?</p>", "author": "saintstack", "createdAt": "2020-10-08T03:58:46Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -185,6 +190,8 @@\n    */\n   protected final Configuration conf;\n \n+  protected final Server server;", "originalCommit": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 935b1b16a3..83dd26534d 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -190,7 +192,7 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n    */\n   protected final Configuration conf;\n \n-  protected final Server server;\n+  protected final Abortable abortable;\n \n   /** Listeners that are called on WAL events. */\n   protected final List<WALActionsListener> listeners = new CopyOnWriteArrayList<>();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 935b1b16a3..ac99ea671e 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -190,7 +192,7 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n    */\n   protected final Configuration conf;\n \n-  protected final Server server;\n+  protected final Abortable abortable;\n \n   /** Listeners that are called on WAL events. */\n   protected final List<WALActionsListener> listeners = new CopyOnWriteArrayList<>();\n", "next_change": {"commit": "b04c3c77860fe430308a6bfd7dd8aebe1ad3510c", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex ac99ea671e..52f3f7133a 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -197,6 +193,9 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n   /** Listeners that are called on WAL events. */\n   protected final List<WALActionsListener> listeners = new CopyOnWriteArrayList<>();\n \n+  /** Tracks the logs in the process of being closed. */\n+  protected final Map<String, W> inflightWALClosures = new ConcurrentHashMap<>();\n+\n   /**\n    * Class that does accounting of sequenceids in WAL subsystem. Holds oldest outstanding sequence\n    * id as yet not flushed as well as the most recent edit sequence id appended to the WAL. Has\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "message": "Merge commit", "committedDate": null}, {"oid": "1726160839368df14602da1618e3538955b25f74", "committedDate": "2020-11-25 14:10:12 -0800", "message": "HBASE-24640 Purge use of VisibleForTesting (#2695)"}, {"oid": "302d9ea8b888762a5a20a5ba5c2be7bc239afaef", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25373 Remove HTrace completely in code base and try to make use of OpenTelemetry"}, {"oid": "2be2c63f0d3917a243b74af9754cbfc805b858d1", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25484 Add trace support for WAL sync (#2892)"}, {"oid": "b04c3c77860fe430308a6bfd7dd8aebe1ad3510c", "committedDate": "2021-05-31 22:12:47 -0700", "message": "HBASE-25932: Ensure replication reads the trailer bytes from WAL. (#3332)"}, {"oid": "335305e0cf1ae00b18d6e7fb26a0e3617a4481a6", "committedDate": "2021-06-01 09:57:48 -0700", "message": "HBASE-25911 Replace calls to System.currentTimeMillis with EnvironmentEdgeManager.currentTime (#3302)"}, {"oid": "5a19bcfa98b3ccd9f7fb1fb933248c808676d91c", "committedDate": "2021-06-16 14:30:15 -0700", "message": "HBASE-25984: Avoid premature reuse of sync futures in FSHLog (#3371)"}, {"oid": "336d8464cce85a2bc1fc97384ce66e95120b0d6f", "committedDate": "2021-06-17 12:21:05 -0700", "message": "HBASE-25998: Redo synchronization in SyncFuture (#3382)"}, {"oid": "ea824df571e6a80d483c082fcff5bef34f452499", "committedDate": "2021-12-01 09:21:20 -0800", "message": "HBASE-26471 Move tracing semantic attributes to their own class (#3896)"}, {"oid": "ca3ba494cbc322b0824d2d755bcf4191c3a525ed", "committedDate": "2021-12-07 12:26:59 +0800", "message": "HBASE-26526 Introduce a timeout to shutdown of WAL (#3297)"}, {"oid": "a599d528208d0941eea5b06a06f41675799bb90a", "committedDate": "2021-12-27 23:59:13 +0800", "message": "HBASE-26564 Retire the method visitLogEntryBeforeWrite without RegionInfo in WALActionListner (#3938)"}, {"oid": "7286cc00354e78716aa7faffab9b97ef5a0a2dcb", "committedDate": "2021-12-31 12:29:48 +0800", "message": "HBASE-26407 Introduce a region replication sink for sinking WAL edits to secondary replicas directly (#3807)"}, {"oid": "9c037b1be7c35ed715ad471acb93b0d0084394e3", "committedDate": "2022-03-03 12:18:33 +0100", "message": "HBASE-26764 Implement generic exception support for TraceUtil methods over Callables and Runnables"}, {"oid": "b67c16a7636958970d37bfcd775fd55e8de98177", "committedDate": "2022-03-23 14:53:58 +0800", "message": "HBASE-26866 Shutdown WAL may abort region server (#4254)"}, {"oid": "9c8c9e7fbf8005ea89fa9b13d6d063b9f0240443", "committedDate": "2022-05-01 22:15:09 +0800", "message": "HBASE-26899 Run spotless:apply"}, {"oid": "313a37f7ac780a36b51064372868a31849df6727", "committedDate": "2022-06-02 23:55:23 +0800", "message": "HBASE-27046 The filenum in AbstractFSWAL should be monotone increasing (#4449)"}, {"oid": "a0a018d6c3baa53517e3ae56010b181aa7323662", "committedDate": "2022-06-20 23:48:33 +0800", "message": "HBASE-27128 when open archiveRetries totalLogSize calculation mistake (#4546)"}, {"oid": "acf144717bd85d2486cc33fbb0e3622b06c66717", "committedDate": "2022-07-19 10:00:43 +0800", "message": "HBASE-27220 Apply the spotless format change in HBASE-27208 to our code base"}, {"oid": "0ae42ddaee38315e10d7537ec2872a8263bd11c8", "committedDate": "2022-07-24 15:08:03 +0800", "message": "HBASE-27230 RegionServer should be aborted when WAL.sync throws Timeo\u2026 (#4641)"}, {"oid": "63cdd026f08cdde6ac0fde1342ffd050e8e02441", "committedDate": "2022-10-06 18:17:34 +0800", "message": "HBASE-27401 Clean up current broken 'n's in our javadoc (#4812)"}, {"oid": "655f19c64573a9a509ec8a657c6e0ef71337b23a", "committedDate": "2022-11-03 11:27:08 -0700", "message": "HBASE-26913 Replication Observability Framework (#4556)"}, {"oid": "e48c4485db8d9255510ee1cc9cf465e14de637d7", "committedDate": "2023-03-10 21:54:20 +0800", "message": "HBASE-27632 Refactor WAL.Reader implementation so we can better support WAL splitting and replication (#5055)"}, {"oid": "230fdc0b50578144d3e0916c33d4532bb8644763", "committedDate": "2023-03-24 14:17:39 +0800", "message": "HBASE-27732 NPE in TestBasicWALEntryStreamFSHLog.testEOFExceptionInOldWALsDirectory (#5119)"}, {"oid": "e2d8db6dfc1ab70e97560cc7bcaff10c45ba62c4", "committedDate": "2023-05-15 22:53:48 +0800", "message": "HBASE-27212 Implement a new table based replication queue storage and make the minimum replication system work (#4672)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNDU0MQ==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501434541", "body": "s/Log/WAL/g", "bodyText": "s/Log/WAL/g", "bodyHTML": "<p dir=\"auto\">s/Log/WAL/g</p>", "author": "saintstack", "createdAt": "2020-10-08T03:59:13Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -329,6 +336,11 @@ public WalProps(Map<byte[], Long> encodedName2HighestSequenceId, long logSize) {\n \n   protected final AtomicBoolean rollRequested = new AtomicBoolean(false);\n \n+  private final ExecutorService logArchiveExecutor = Executors.newSingleThreadExecutor(\n+    new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"Log-Archiver-%d\").build());", "originalCommit": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzNjI2NQ==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501636265", "bodyText": "Done", "author": "ramkrish86", "createdAt": "2020-10-08T11:08:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNDU0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 935b1b16a3..83dd26534d 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -337,7 +339,7 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n   protected final AtomicBoolean rollRequested = new AtomicBoolean(false);\n \n   private final ExecutorService logArchiveExecutor = Executors.newSingleThreadExecutor(\n-    new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"Log-Archiver-%d\").build());\n+    new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"WAL-Archiver-%d\").build());\n \n   private final int archiveRetries;\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 935b1b16a3..ac99ea671e 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -337,7 +339,7 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n   protected final AtomicBoolean rollRequested = new AtomicBoolean(false);\n \n   private final ExecutorService logArchiveExecutor = Executors.newSingleThreadExecutor(\n-    new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"Log-Archiver-%d\").build());\n+    new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"WAL-Archiver-%d\").build());\n \n   private final int archiveRetries;\n \n", "next_change": {"commit": "ca3ba494cbc322b0824d2d755bcf4191c3a525ed", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex ac99ea671e..5379e29151 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -338,8 +345,8 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n \n   protected final AtomicBoolean rollRequested = new AtomicBoolean(false);\n \n-  private final ExecutorService logArchiveExecutor = Executors.newSingleThreadExecutor(\n-    new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"WAL-Archiver-%d\").build());\n+  private final ExecutorService logArchiveOrShutdownExecutor = Executors.newSingleThreadExecutor(\n+    new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"WAL-Archive-Or-Shutdown-%d\").build());\n \n   private final int archiveRetries;\n \n", "next_change": {"commit": "b67c16a7636958970d37bfcd775fd55e8de98177", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 5379e29151..5416e3a2d6 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -345,8 +347,12 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n \n   protected final AtomicBoolean rollRequested = new AtomicBoolean(false);\n \n-  private final ExecutorService logArchiveOrShutdownExecutor = Executors.newSingleThreadExecutor(\n-    new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"WAL-Archive-Or-Shutdown-%d\").build());\n+  // Run in caller if we get reject execution exception, to avoid aborting region server when we get\n+  // reject execution exception. Usually this should not happen but let's make it more robust.\n+  private final ExecutorService logArchiveExecutor =\n+    new ThreadPoolExecutor(1, 1, 1L, TimeUnit.MINUTES, new LinkedBlockingQueue<Runnable>(),\n+      new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"WAL-Archive-%d\").build(),\n+      new ThreadPoolExecutor.CallerRunsPolicy());\n \n   private final int archiveRetries;\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "message": "Merge commit", "committedDate": null}, {"oid": "1726160839368df14602da1618e3538955b25f74", "committedDate": "2020-11-25 14:10:12 -0800", "message": "HBASE-24640 Purge use of VisibleForTesting (#2695)"}, {"oid": "302d9ea8b888762a5a20a5ba5c2be7bc239afaef", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25373 Remove HTrace completely in code base and try to make use of OpenTelemetry"}, {"oid": "2be2c63f0d3917a243b74af9754cbfc805b858d1", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25484 Add trace support for WAL sync (#2892)"}, {"oid": "b04c3c77860fe430308a6bfd7dd8aebe1ad3510c", "committedDate": "2021-05-31 22:12:47 -0700", "message": "HBASE-25932: Ensure replication reads the trailer bytes from WAL. (#3332)"}, {"oid": "335305e0cf1ae00b18d6e7fb26a0e3617a4481a6", "committedDate": "2021-06-01 09:57:48 -0700", "message": "HBASE-25911 Replace calls to System.currentTimeMillis with EnvironmentEdgeManager.currentTime (#3302)"}, {"oid": "5a19bcfa98b3ccd9f7fb1fb933248c808676d91c", "committedDate": "2021-06-16 14:30:15 -0700", "message": "HBASE-25984: Avoid premature reuse of sync futures in FSHLog (#3371)"}, {"oid": "336d8464cce85a2bc1fc97384ce66e95120b0d6f", "committedDate": "2021-06-17 12:21:05 -0700", "message": "HBASE-25998: Redo synchronization in SyncFuture (#3382)"}, {"oid": "ea824df571e6a80d483c082fcff5bef34f452499", "committedDate": "2021-12-01 09:21:20 -0800", "message": "HBASE-26471 Move tracing semantic attributes to their own class (#3896)"}, {"oid": "ca3ba494cbc322b0824d2d755bcf4191c3a525ed", "committedDate": "2021-12-07 12:26:59 +0800", "message": "HBASE-26526 Introduce a timeout to shutdown of WAL (#3297)"}, {"oid": "a599d528208d0941eea5b06a06f41675799bb90a", "committedDate": "2021-12-27 23:59:13 +0800", "message": "HBASE-26564 Retire the method visitLogEntryBeforeWrite without RegionInfo in WALActionListner (#3938)"}, {"oid": "7286cc00354e78716aa7faffab9b97ef5a0a2dcb", "committedDate": "2021-12-31 12:29:48 +0800", "message": "HBASE-26407 Introduce a region replication sink for sinking WAL edits to secondary replicas directly (#3807)"}, {"oid": "9c037b1be7c35ed715ad471acb93b0d0084394e3", "committedDate": "2022-03-03 12:18:33 +0100", "message": "HBASE-26764 Implement generic exception support for TraceUtil methods over Callables and Runnables"}, {"oid": "b67c16a7636958970d37bfcd775fd55e8de98177", "committedDate": "2022-03-23 14:53:58 +0800", "message": "HBASE-26866 Shutdown WAL may abort region server (#4254)"}, {"oid": "9c8c9e7fbf8005ea89fa9b13d6d063b9f0240443", "committedDate": "2022-05-01 22:15:09 +0800", "message": "HBASE-26899 Run spotless:apply"}, {"oid": "313a37f7ac780a36b51064372868a31849df6727", "committedDate": "2022-06-02 23:55:23 +0800", "message": "HBASE-27046 The filenum in AbstractFSWAL should be monotone increasing (#4449)"}, {"oid": "a0a018d6c3baa53517e3ae56010b181aa7323662", "committedDate": "2022-06-20 23:48:33 +0800", "message": "HBASE-27128 when open archiveRetries totalLogSize calculation mistake (#4546)"}, {"oid": "acf144717bd85d2486cc33fbb0e3622b06c66717", "committedDate": "2022-07-19 10:00:43 +0800", "message": "HBASE-27220 Apply the spotless format change in HBASE-27208 to our code base"}, {"oid": "0ae42ddaee38315e10d7537ec2872a8263bd11c8", "committedDate": "2022-07-24 15:08:03 +0800", "message": "HBASE-27230 RegionServer should be aborted when WAL.sync throws Timeo\u2026 (#4641)"}, {"oid": "63cdd026f08cdde6ac0fde1342ffd050e8e02441", "committedDate": "2022-10-06 18:17:34 +0800", "message": "HBASE-27401 Clean up current broken 'n's in our javadoc (#4812)"}, {"oid": "655f19c64573a9a509ec8a657c6e0ef71337b23a", "committedDate": "2022-11-03 11:27:08 -0700", "message": "HBASE-26913 Replication Observability Framework (#4556)"}, {"oid": "e48c4485db8d9255510ee1cc9cf465e14de637d7", "committedDate": "2023-03-10 21:54:20 +0800", "message": "HBASE-27632 Refactor WAL.Reader implementation so we can better support WAL splitting and replication (#5055)"}, {"oid": "230fdc0b50578144d3e0916c33d4532bb8644763", "committedDate": "2023-03-24 14:17:39 +0800", "message": "HBASE-27732 NPE in TestBasicWALEntryStreamFSHLog.testEOFExceptionInOldWALsDirectory (#5119)"}, {"oid": "e2d8db6dfc1ab70e97560cc7bcaff10c45ba62c4", "committedDate": "2023-05-15 22:53:48 +0800", "message": "HBASE-27212 Implement a new table based replication queue storage and make the minimum replication system work (#4672)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNDk4Mw==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501434983", "body": "s/logroll/walroll/g", "bodyText": "s/logroll/walroll/g", "bodyHTML": "<p dir=\"auto\">s/logroll/walroll/g</p>", "author": "saintstack", "createdAt": "2020-10-08T04:00:47Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -482,6 +503,8 @@ protected SyncFuture initialValue() {\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n+    archiveRetries = this.conf.getInt(\"hbase.regionserver.logroll.archive.retries\", 0);", "originalCommit": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 935b1b16a3..83dd26534d 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -503,7 +505,7 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n-    archiveRetries = this.conf.getInt(\"hbase.regionserver.logroll.archive.retries\", 0);\n+    archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);\n \n   }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 935b1b16a3..ac99ea671e 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -503,7 +505,7 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n-    archiveRetries = this.conf.getInt(\"hbase.regionserver.logroll.archive.retries\", 0);\n+    archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);\n \n   }\n \n", "next_change": {"commit": "ca3ba494cbc322b0824d2d755bcf4191c3a525ed", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex ac99ea671e..5379e29151 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -495,18 +502,14 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n       DEFAULT_SLOW_SYNC_ROLL_INTERVAL_MS);\n     this.walSyncTimeoutNs = TimeUnit.MILLISECONDS.toNanos(conf.getLong(WAL_SYNC_TIMEOUT_MS,\n       DEFAULT_WAL_SYNC_TIMEOUT_MS));\n-    this.cachedSyncFutures = new ThreadLocal<SyncFuture>() {\n-      @Override\n-      protected SyncFuture initialValue() {\n-        return new SyncFuture();\n-      }\n-    };\n+    this.syncFutureCache = new SyncFutureCache(conf);\n     this.implClassName = getClass().getSimpleName();\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n     archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);\n-\n+    this.walShutdownTimeout = conf.getLong(WAL_SHUTDOWN_WAIT_TIMEOUT_MS,\n+      DEFAULT_WAL_SHUTDOWN_WAIT_TIMEOUT_MS);\n   }\n \n   /**\n", "next_change": {"commit": "9c8c9e7fbf8005ea89fa9b13d6d063b9f0240443", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 5379e29151..2c0a656049 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -488,28 +492,28 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n     this.logrollsize = (long) (this.blocksize * multiplier);\n     this.maxLogs = conf.getInt(MAX_LOGS, Math.max(32, calculateMaxLogFiles(conf, logrollsize)));\n \n-    LOG.info(\"WAL configuration: blocksize=\" + StringUtils.byteDesc(blocksize) + \", rollsize=\" +\n-      StringUtils.byteDesc(this.logrollsize) + \", prefix=\" + this.walFilePrefix + \", suffix=\" +\n-      walFileSuffix + \", logDir=\" + this.walDir + \", archiveDir=\" + this.walArchiveDir +\n-      \", maxLogs=\" + this.maxLogs);\n-    this.slowSyncNs = TimeUnit.MILLISECONDS.toNanos(conf.getInt(SLOW_SYNC_TIME_MS,\n-      DEFAULT_SLOW_SYNC_TIME_MS));\n-    this.rollOnSyncNs = TimeUnit.MILLISECONDS.toNanos(conf.getInt(ROLL_ON_SYNC_TIME_MS,\n-      DEFAULT_ROLL_ON_SYNC_TIME_MS));\n-    this.slowSyncRollThreshold = conf.getInt(SLOW_SYNC_ROLL_THRESHOLD,\n-      DEFAULT_SLOW_SYNC_ROLL_THRESHOLD);\n-    this.slowSyncCheckInterval = conf.getInt(SLOW_SYNC_ROLL_INTERVAL_MS,\n-      DEFAULT_SLOW_SYNC_ROLL_INTERVAL_MS);\n-    this.walSyncTimeoutNs = TimeUnit.MILLISECONDS.toNanos(conf.getLong(WAL_SYNC_TIMEOUT_MS,\n-      DEFAULT_WAL_SYNC_TIMEOUT_MS));\n+    LOG.info(\"WAL configuration: blocksize=\" + StringUtils.byteDesc(blocksize) + \", rollsize=\"\n+      + StringUtils.byteDesc(this.logrollsize) + \", prefix=\" + this.walFilePrefix + \", suffix=\"\n+      + walFileSuffix + \", logDir=\" + this.walDir + \", archiveDir=\" + this.walArchiveDir\n+      + \", maxLogs=\" + this.maxLogs);\n+    this.slowSyncNs =\n+      TimeUnit.MILLISECONDS.toNanos(conf.getInt(SLOW_SYNC_TIME_MS, DEFAULT_SLOW_SYNC_TIME_MS));\n+    this.rollOnSyncNs = TimeUnit.MILLISECONDS\n+      .toNanos(conf.getInt(ROLL_ON_SYNC_TIME_MS, DEFAULT_ROLL_ON_SYNC_TIME_MS));\n+    this.slowSyncRollThreshold =\n+      conf.getInt(SLOW_SYNC_ROLL_THRESHOLD, DEFAULT_SLOW_SYNC_ROLL_THRESHOLD);\n+    this.slowSyncCheckInterval =\n+      conf.getInt(SLOW_SYNC_ROLL_INTERVAL_MS, DEFAULT_SLOW_SYNC_ROLL_INTERVAL_MS);\n+    this.walSyncTimeoutNs =\n+      TimeUnit.MILLISECONDS.toNanos(conf.getLong(WAL_SYNC_TIMEOUT_MS, DEFAULT_WAL_SYNC_TIMEOUT_MS));\n     this.syncFutureCache = new SyncFutureCache(conf);\n     this.implClassName = getClass().getSimpleName();\n-    this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n-            SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n+    this.walTooOldNs = TimeUnit.SECONDS\n+      .toNanos(conf.getInt(SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n     archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);\n-    this.walShutdownTimeout = conf.getLong(WAL_SHUTDOWN_WAIT_TIMEOUT_MS,\n-      DEFAULT_WAL_SHUTDOWN_WAIT_TIMEOUT_MS);\n+    this.walShutdownTimeout =\n+      conf.getLong(WAL_SHUTDOWN_WAIT_TIMEOUT_MS, DEFAULT_WAL_SHUTDOWN_WAIT_TIMEOUT_MS);\n   }\n \n   /**\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "message": "Merge commit", "committedDate": null}, {"oid": "1726160839368df14602da1618e3538955b25f74", "committedDate": "2020-11-25 14:10:12 -0800", "message": "HBASE-24640 Purge use of VisibleForTesting (#2695)"}, {"oid": "302d9ea8b888762a5a20a5ba5c2be7bc239afaef", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25373 Remove HTrace completely in code base and try to make use of OpenTelemetry"}, {"oid": "2be2c63f0d3917a243b74af9754cbfc805b858d1", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25484 Add trace support for WAL sync (#2892)"}, {"oid": "b04c3c77860fe430308a6bfd7dd8aebe1ad3510c", "committedDate": "2021-05-31 22:12:47 -0700", "message": "HBASE-25932: Ensure replication reads the trailer bytes from WAL. (#3332)"}, {"oid": "335305e0cf1ae00b18d6e7fb26a0e3617a4481a6", "committedDate": "2021-06-01 09:57:48 -0700", "message": "HBASE-25911 Replace calls to System.currentTimeMillis with EnvironmentEdgeManager.currentTime (#3302)"}, {"oid": "5a19bcfa98b3ccd9f7fb1fb933248c808676d91c", "committedDate": "2021-06-16 14:30:15 -0700", "message": "HBASE-25984: Avoid premature reuse of sync futures in FSHLog (#3371)"}, {"oid": "336d8464cce85a2bc1fc97384ce66e95120b0d6f", "committedDate": "2021-06-17 12:21:05 -0700", "message": "HBASE-25998: Redo synchronization in SyncFuture (#3382)"}, {"oid": "ea824df571e6a80d483c082fcff5bef34f452499", "committedDate": "2021-12-01 09:21:20 -0800", "message": "HBASE-26471 Move tracing semantic attributes to their own class (#3896)"}, {"oid": "ca3ba494cbc322b0824d2d755bcf4191c3a525ed", "committedDate": "2021-12-07 12:26:59 +0800", "message": "HBASE-26526 Introduce a timeout to shutdown of WAL (#3297)"}, {"oid": "a599d528208d0941eea5b06a06f41675799bb90a", "committedDate": "2021-12-27 23:59:13 +0800", "message": "HBASE-26564 Retire the method visitLogEntryBeforeWrite without RegionInfo in WALActionListner (#3938)"}, {"oid": "7286cc00354e78716aa7faffab9b97ef5a0a2dcb", "committedDate": "2021-12-31 12:29:48 +0800", "message": "HBASE-26407 Introduce a region replication sink for sinking WAL edits to secondary replicas directly (#3807)"}, {"oid": "9c037b1be7c35ed715ad471acb93b0d0084394e3", "committedDate": "2022-03-03 12:18:33 +0100", "message": "HBASE-26764 Implement generic exception support for TraceUtil methods over Callables and Runnables"}, {"oid": "b67c16a7636958970d37bfcd775fd55e8de98177", "committedDate": "2022-03-23 14:53:58 +0800", "message": "HBASE-26866 Shutdown WAL may abort region server (#4254)"}, {"oid": "9c8c9e7fbf8005ea89fa9b13d6d063b9f0240443", "committedDate": "2022-05-01 22:15:09 +0800", "message": "HBASE-26899 Run spotless:apply"}, {"oid": "313a37f7ac780a36b51064372868a31849df6727", "committedDate": "2022-06-02 23:55:23 +0800", "message": "HBASE-27046 The filenum in AbstractFSWAL should be monotone increasing (#4449)"}, {"oid": "a0a018d6c3baa53517e3ae56010b181aa7323662", "committedDate": "2022-06-20 23:48:33 +0800", "message": "HBASE-27128 when open archiveRetries totalLogSize calculation mistake (#4546)"}, {"oid": "acf144717bd85d2486cc33fbb0e3622b06c66717", "committedDate": "2022-07-19 10:00:43 +0800", "message": "HBASE-27220 Apply the spotless format change in HBASE-27208 to our code base"}, {"oid": "0ae42ddaee38315e10d7537ec2872a8263bd11c8", "committedDate": "2022-07-24 15:08:03 +0800", "message": "HBASE-27230 RegionServer should be aborted when WAL.sync throws Timeo\u2026 (#4641)"}, {"oid": "63cdd026f08cdde6ac0fde1342ffd050e8e02441", "committedDate": "2022-10-06 18:17:34 +0800", "message": "HBASE-27401 Clean up current broken 'n's in our javadoc (#4812)"}, {"oid": "655f19c64573a9a509ec8a657c6e0ef71337b23a", "committedDate": "2022-11-03 11:27:08 -0700", "message": "HBASE-26913 Replication Observability Framework (#4556)"}, {"oid": "e48c4485db8d9255510ee1cc9cf465e14de637d7", "committedDate": "2023-03-10 21:54:20 +0800", "message": "HBASE-27632 Refactor WAL.Reader implementation so we can better support WAL splitting and replication (#5055)"}, {"oid": "230fdc0b50578144d3e0916c33d4532bb8644763", "committedDate": "2023-03-24 14:17:39 +0800", "message": "HBASE-27732 NPE in TestBasicWALEntryStreamFSHLog.testEOFExceptionInOldWALsDirectory (#5119)"}, {"oid": "e2d8db6dfc1ab70e97560cc7bcaff10c45ba62c4", "committedDate": "2023-05-15 22:53:48 +0800", "message": "HBASE-27212 Implement a new table based replication queue storage and make the minimum replication system work (#4672)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNTMyOA==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501435328", "body": "Why not put this inside the doShutdown?", "bodyText": "Why not put this inside the doShutdown?", "bodyHTML": "<p dir=\"auto\">Why not put this inside the doShutdown?</p>", "author": "saintstack", "createdAt": "2020-10-08T04:02:27Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -907,6 +959,9 @@ public void shutdown() throws IOException {\n     rollWriterLock.lock();\n     try {\n       doShutdown();\n+      if (logArchiveExecutor != null) {", "originalCommit": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzNjA0OA==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501636048", "bodyText": "doShutDown is abstract method. So its better we do in the Parent class.", "author": "ramkrish86", "createdAt": "2020-10-08T11:08:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNTMyOA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "5a19bcfa98b3ccd9f7fb1fb933248c808676d91c", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 935b1b16a3..68d39db434 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -959,6 +982,9 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n     rollWriterLock.lock();\n     try {\n       doShutdown();\n+      if (syncFutureCache != null) {\n+        syncFutureCache.clear();\n+      }\n       if (logArchiveExecutor != null) {\n         logArchiveExecutor.shutdownNow();\n       }\n", "next_change": {"commit": "ca3ba494cbc322b0824d2d755bcf4191c3a525ed", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 68d39db434..5379e29151 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -979,17 +990,42 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n         i.logCloseRequested();\n       }\n     }\n-    rollWriterLock.lock();\n-    try {\n-      doShutdown();\n-      if (syncFutureCache != null) {\n-        syncFutureCache.clear();\n+\n+    Future<Void> future = logArchiveOrShutdownExecutor.submit(new Callable<Void>() {\n+      @Override\n+      public Void call() throws Exception {\n+        if (rollWriterLock.tryLock(walShutdownTimeout, TimeUnit.SECONDS)) {\n+          try {\n+            doShutdown();\n+            if (syncFutureCache != null) {\n+              syncFutureCache.clear();\n+            }\n+          } finally {\n+            rollWriterLock.unlock();\n+          }\n+        } else {\n+          throw new IOException(\"Waiting for rollWriterLock timeout\");\n+        }\n+        return null;\n       }\n-      if (logArchiveExecutor != null) {\n-        logArchiveExecutor.shutdownNow();\n+    });\n+    logArchiveOrShutdownExecutor.shutdown();\n+\n+    try {\n+      future.get(walShutdownTimeout, TimeUnit.MILLISECONDS);\n+    } catch (InterruptedException e) {\n+      throw new InterruptedIOException(\"Interrupted when waiting for shutdown WAL\");\n+    } catch (TimeoutException e) {\n+      throw new TimeoutIOException(\"We have waited \" + walShutdownTimeout + \"ms, but\"\n+        + \" the shutdown of WAL doesn't complete! Please check the status of underlying \"\n+        + \"filesystem or increase the wait time by the config \\\"\"\n+        + WAL_SHUTDOWN_WAIT_TIMEOUT_MS + \"\\\"\", e);\n+    } catch (ExecutionException e) {\n+      if (e.getCause() instanceof IOException) {\n+        throw (IOException) e.getCause();\n+      } else {\n+        throw new IOException(e.getCause());\n       }\n-    } finally {\n-      rollWriterLock.unlock();\n     }\n   }\n \n", "next_change": {"commit": "b67c16a7636958970d37bfcd775fd55e8de98177", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 5379e29151..5416e3a2d6 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -1026,6 +1029,12 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n       } else {\n         throw new IOException(e.getCause());\n       }\n+    } finally {\n+      // in shutdown we may call cleanOldLogs so shutdown this executor in the end.\n+      // In sync replication implementation, we may shutdown a WAL without shutting down the whole\n+      // region server, if we shutdown this executor earlier we may get reject execution exception\n+      // and abort the region server\n+      logArchiveExecutor.shutdown();\n     }\n   }\n \n", "next_change": {"commit": "230fdc0b50578144d3e0916c33d4532bb8644763", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 5416e3a2d6..dc4c3a0a6b 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -1036,6 +1060,20 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n       // and abort the region server\n       logArchiveExecutor.shutdown();\n     }\n+    // we also need to wait logArchive to finish if we want to a graceful shutdown as we may still\n+    // have some pending archiving tasks not finished yet, and in close we may archive all the\n+    // remaining WAL files, there could be race if we do not wait for the background archive task\n+    // finish\n+    try {\n+      if (!logArchiveExecutor.awaitTermination(walShutdownTimeout, TimeUnit.MILLISECONDS)) {\n+        throw new TimeoutIOException(\"We have waited \" + walShutdownTimeout + \"ms, but\"\n+          + \" the shutdown of WAL doesn't complete! Please check the status of underlying \"\n+          + \"filesystem or increase the wait time by the config \\\"\" + WAL_SHUTDOWN_WAIT_TIMEOUT_MS\n+          + \"\\\"\");\n+      }\n+    } catch (InterruptedException e) {\n+      throw new InterruptedIOException(\"Interrupted when waiting for shutdown WAL\");\n+    }\n   }\n \n   @Override\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "message": "Merge commit", "committedDate": null}, {"oid": "1726160839368df14602da1618e3538955b25f74", "committedDate": "2020-11-25 14:10:12 -0800", "message": "HBASE-24640 Purge use of VisibleForTesting (#2695)"}, {"oid": "302d9ea8b888762a5a20a5ba5c2be7bc239afaef", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25373 Remove HTrace completely in code base and try to make use of OpenTelemetry"}, {"oid": "2be2c63f0d3917a243b74af9754cbfc805b858d1", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25484 Add trace support for WAL sync (#2892)"}, {"oid": "b04c3c77860fe430308a6bfd7dd8aebe1ad3510c", "committedDate": "2021-05-31 22:12:47 -0700", "message": "HBASE-25932: Ensure replication reads the trailer bytes from WAL. (#3332)"}, {"oid": "335305e0cf1ae00b18d6e7fb26a0e3617a4481a6", "committedDate": "2021-06-01 09:57:48 -0700", "message": "HBASE-25911 Replace calls to System.currentTimeMillis with EnvironmentEdgeManager.currentTime (#3302)"}, {"oid": "5a19bcfa98b3ccd9f7fb1fb933248c808676d91c", "committedDate": "2021-06-16 14:30:15 -0700", "message": "HBASE-25984: Avoid premature reuse of sync futures in FSHLog (#3371)"}, {"oid": "336d8464cce85a2bc1fc97384ce66e95120b0d6f", "committedDate": "2021-06-17 12:21:05 -0700", "message": "HBASE-25998: Redo synchronization in SyncFuture (#3382)"}, {"oid": "ea824df571e6a80d483c082fcff5bef34f452499", "committedDate": "2021-12-01 09:21:20 -0800", "message": "HBASE-26471 Move tracing semantic attributes to their own class (#3896)"}, {"oid": "ca3ba494cbc322b0824d2d755bcf4191c3a525ed", "committedDate": "2021-12-07 12:26:59 +0800", "message": "HBASE-26526 Introduce a timeout to shutdown of WAL (#3297)"}, {"oid": "a599d528208d0941eea5b06a06f41675799bb90a", "committedDate": "2021-12-27 23:59:13 +0800", "message": "HBASE-26564 Retire the method visitLogEntryBeforeWrite without RegionInfo in WALActionListner (#3938)"}, {"oid": "7286cc00354e78716aa7faffab9b97ef5a0a2dcb", "committedDate": "2021-12-31 12:29:48 +0800", "message": "HBASE-26407 Introduce a region replication sink for sinking WAL edits to secondary replicas directly (#3807)"}, {"oid": "9c037b1be7c35ed715ad471acb93b0d0084394e3", "committedDate": "2022-03-03 12:18:33 +0100", "message": "HBASE-26764 Implement generic exception support for TraceUtil methods over Callables and Runnables"}, {"oid": "b67c16a7636958970d37bfcd775fd55e8de98177", "committedDate": "2022-03-23 14:53:58 +0800", "message": "HBASE-26866 Shutdown WAL may abort region server (#4254)"}, {"oid": "9c8c9e7fbf8005ea89fa9b13d6d063b9f0240443", "committedDate": "2022-05-01 22:15:09 +0800", "message": "HBASE-26899 Run spotless:apply"}, {"oid": "313a37f7ac780a36b51064372868a31849df6727", "committedDate": "2022-06-02 23:55:23 +0800", "message": "HBASE-27046 The filenum in AbstractFSWAL should be monotone increasing (#4449)"}, {"oid": "a0a018d6c3baa53517e3ae56010b181aa7323662", "committedDate": "2022-06-20 23:48:33 +0800", "message": "HBASE-27128 when open archiveRetries totalLogSize calculation mistake (#4546)"}, {"oid": "acf144717bd85d2486cc33fbb0e3622b06c66717", "committedDate": "2022-07-19 10:00:43 +0800", "message": "HBASE-27220 Apply the spotless format change in HBASE-27208 to our code base"}, {"oid": "0ae42ddaee38315e10d7537ec2872a8263bd11c8", "committedDate": "2022-07-24 15:08:03 +0800", "message": "HBASE-27230 RegionServer should be aborted when WAL.sync throws Timeo\u2026 (#4641)"}, {"oid": "63cdd026f08cdde6ac0fde1342ffd050e8e02441", "committedDate": "2022-10-06 18:17:34 +0800", "message": "HBASE-27401 Clean up current broken 'n's in our javadoc (#4812)"}, {"oid": "655f19c64573a9a509ec8a657c6e0ef71337b23a", "committedDate": "2022-11-03 11:27:08 -0700", "message": "HBASE-26913 Replication Observability Framework (#4556)"}, {"oid": "e48c4485db8d9255510ee1cc9cf465e14de637d7", "committedDate": "2023-03-10 21:54:20 +0800", "message": "HBASE-27632 Refactor WAL.Reader implementation so we can better support WAL splitting and replication (#5055)"}, {"oid": "230fdc0b50578144d3e0916c33d4532bb8644763", "committedDate": "2023-03-24 14:17:39 +0800", "message": "HBASE-27732 NPE in TestBasicWALEntryStreamFSHLog.testEOFExceptionInOldWALsDirectory (#5119)"}, {"oid": "e2d8db6dfc1ab70e97560cc7bcaff10c45ba62c4", "committedDate": "2023-05-15 22:53:48 +0800", "message": "HBASE-27212 Implement a new table based replication queue storage and make the minimum replication system work (#4672)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNTcwMw==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501435703", "body": "This the only reason for passing server? There is an Abortable Interface. Pass in an Abortable Interface instead (the server is an implementation of an Abortable so you could pass server).", "bodyText": "This the only reason for passing server? There is an Abortable Interface. Pass in an Abortable Interface instead (the server is an implementation of an Abortable so you could pass server).", "bodyHTML": "<p dir=\"auto\">This the only reason for passing server? There is an Abortable Interface. Pass in an Abortable Interface instead (the server is an implementation of an Abortable so you could pass server).</p>", "author": "saintstack", "createdAt": "2020-10-08T04:04:13Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -715,11 +738,39 @@ private void cleanOldLogs() throws IOException {\n         regionsBlockingThisWal.clear();\n       }\n     }\n+\n     if (logsToArchive != null) {\n-      for (Pair<Path, Long> logAndSize : logsToArchive) {\n-        this.totalLogSize.addAndGet(-logAndSize.getSecond());\n-        archiveLogFile(logAndSize.getFirst());\n-        this.walFile2Props.remove(logAndSize.getFirst());\n+      final List<Pair<Path, Long>> localLogsToArchive = logsToArchive;\n+      // make it async\n+      for (Pair<Path, Long> log : localLogsToArchive) {\n+        logArchiveExecutor.execute(() -> {\n+          archiveRetriable(log);\n+        });\n+        this.walFile2Props.remove(log.getFirst());\n+      }\n+    }\n+  }\n+\n+  protected void archiveRetriable(final Pair<Path, Long> log) {\n+    int retry = 1;\n+    while (true) {\n+      try {\n+        archiveLogFile(log.getFirst());\n+        totalLogSize.addAndGet(-log.getSecond());\n+        // successful\n+        break;\n+      } catch (Throwable e) {\n+        if (retry > archiveRetries) {\n+          LOG.error(\"Failed log archiving for the log {},\", log.getFirst(), e);\n+          if (this.server != null) {\n+            this.server.abort(\"Failed log archiving\", e);", "originalCommit": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzNjEyMw==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501636123", "bodyText": "Fixed this every where.", "author": "ramkrish86", "createdAt": "2020-10-08T11:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNTcwMw=="}], "type": "inlineReview", "revised_code": {"commit": "a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 935b1b16a3..83dd26534d 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -762,8 +764,8 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n       } catch (Throwable e) {\n         if (retry > archiveRetries) {\n           LOG.error(\"Failed log archiving for the log {},\", log.getFirst(), e);\n-          if (this.server != null) {\n-            this.server.abort(\"Failed log archiving\", e);\n+          if (this.abortable != null) {\n+            this.abortable.abort(\"Failed log archiving\", e);\n             break;\n           }\n         } else {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 935b1b16a3..ac99ea671e 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -762,8 +764,8 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n       } catch (Throwable e) {\n         if (retry > archiveRetries) {\n           LOG.error(\"Failed log archiving for the log {},\", log.getFirst(), e);\n-          if (this.server != null) {\n-            this.server.abort(\"Failed log archiving\", e);\n+          if (this.abortable != null) {\n+            this.abortable.abort(\"Failed log archiving\", e);\n             break;\n           }\n         } else {\n", "next_change": {"commit": "9c8c9e7fbf8005ea89fa9b13d6d063b9f0240443", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex ac99ea671e..2c0a656049 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -769,8 +797,7 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n             break;\n           }\n         } else {\n-          LOG.error(\"Log archiving failed for the log {} - attempt {}\", log.getFirst(), retry,\n-            e);\n+          LOG.error(\"Log archiving failed for the log {} - attempt {}\", log.getFirst(), retry, e);\n         }\n         retry++;\n       }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "message": "Merge commit", "committedDate": null}, {"oid": "1726160839368df14602da1618e3538955b25f74", "committedDate": "2020-11-25 14:10:12 -0800", "message": "HBASE-24640 Purge use of VisibleForTesting (#2695)"}, {"oid": "302d9ea8b888762a5a20a5ba5c2be7bc239afaef", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25373 Remove HTrace completely in code base and try to make use of OpenTelemetry"}, {"oid": "2be2c63f0d3917a243b74af9754cbfc805b858d1", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25484 Add trace support for WAL sync (#2892)"}, {"oid": "b04c3c77860fe430308a6bfd7dd8aebe1ad3510c", "committedDate": "2021-05-31 22:12:47 -0700", "message": "HBASE-25932: Ensure replication reads the trailer bytes from WAL. (#3332)"}, {"oid": "335305e0cf1ae00b18d6e7fb26a0e3617a4481a6", "committedDate": "2021-06-01 09:57:48 -0700", "message": "HBASE-25911 Replace calls to System.currentTimeMillis with EnvironmentEdgeManager.currentTime (#3302)"}, {"oid": "5a19bcfa98b3ccd9f7fb1fb933248c808676d91c", "committedDate": "2021-06-16 14:30:15 -0700", "message": "HBASE-25984: Avoid premature reuse of sync futures in FSHLog (#3371)"}, {"oid": "336d8464cce85a2bc1fc97384ce66e95120b0d6f", "committedDate": "2021-06-17 12:21:05 -0700", "message": "HBASE-25998: Redo synchronization in SyncFuture (#3382)"}, {"oid": "ea824df571e6a80d483c082fcff5bef34f452499", "committedDate": "2021-12-01 09:21:20 -0800", "message": "HBASE-26471 Move tracing semantic attributes to their own class (#3896)"}, {"oid": "ca3ba494cbc322b0824d2d755bcf4191c3a525ed", "committedDate": "2021-12-07 12:26:59 +0800", "message": "HBASE-26526 Introduce a timeout to shutdown of WAL (#3297)"}, {"oid": "a599d528208d0941eea5b06a06f41675799bb90a", "committedDate": "2021-12-27 23:59:13 +0800", "message": "HBASE-26564 Retire the method visitLogEntryBeforeWrite without RegionInfo in WALActionListner (#3938)"}, {"oid": "7286cc00354e78716aa7faffab9b97ef5a0a2dcb", "committedDate": "2021-12-31 12:29:48 +0800", "message": "HBASE-26407 Introduce a region replication sink for sinking WAL edits to secondary replicas directly (#3807)"}, {"oid": "9c037b1be7c35ed715ad471acb93b0d0084394e3", "committedDate": "2022-03-03 12:18:33 +0100", "message": "HBASE-26764 Implement generic exception support for TraceUtil methods over Callables and Runnables"}, {"oid": "b67c16a7636958970d37bfcd775fd55e8de98177", "committedDate": "2022-03-23 14:53:58 +0800", "message": "HBASE-26866 Shutdown WAL may abort region server (#4254)"}, {"oid": "9c8c9e7fbf8005ea89fa9b13d6d063b9f0240443", "committedDate": "2022-05-01 22:15:09 +0800", "message": "HBASE-26899 Run spotless:apply"}, {"oid": "313a37f7ac780a36b51064372868a31849df6727", "committedDate": "2022-06-02 23:55:23 +0800", "message": "HBASE-27046 The filenum in AbstractFSWAL should be monotone increasing (#4449)"}, {"oid": "a0a018d6c3baa53517e3ae56010b181aa7323662", "committedDate": "2022-06-20 23:48:33 +0800", "message": "HBASE-27128 when open archiveRetries totalLogSize calculation mistake (#4546)"}, {"oid": "acf144717bd85d2486cc33fbb0e3622b06c66717", "committedDate": "2022-07-19 10:00:43 +0800", "message": "HBASE-27220 Apply the spotless format change in HBASE-27208 to our code base"}, {"oid": "0ae42ddaee38315e10d7537ec2872a8263bd11c8", "committedDate": "2022-07-24 15:08:03 +0800", "message": "HBASE-27230 RegionServer should be aborted when WAL.sync throws Timeo\u2026 (#4641)"}, {"oid": "63cdd026f08cdde6ac0fde1342ffd050e8e02441", "committedDate": "2022-10-06 18:17:34 +0800", "message": "HBASE-27401 Clean up current broken 'n's in our javadoc (#4812)"}, {"oid": "655f19c64573a9a509ec8a657c6e0ef71337b23a", "committedDate": "2022-11-03 11:27:08 -0700", "message": "HBASE-26913 Replication Observability Framework (#4556)"}, {"oid": "e48c4485db8d9255510ee1cc9cf465e14de637d7", "committedDate": "2023-03-10 21:54:20 +0800", "message": "HBASE-27632 Refactor WAL.Reader implementation so we can better support WAL splitting and replication (#5055)"}, {"oid": "230fdc0b50578144d3e0916c33d4532bb8644763", "committedDate": "2023-03-24 14:17:39 +0800", "message": "HBASE-27732 NPE in TestBasicWALEntryStreamFSHLog.testEOFExceptionInOldWALsDirectory (#5119)"}, {"oid": "e2d8db6dfc1ab70e97560cc7bcaff10c45ba62c4", "committedDate": "2023-05-15 22:53:48 +0800", "message": "HBASE-27212 Implement a new table based replication queue storage and make the minimum replication system work (#4672)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNjA3Mg==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501436072", "body": "Yeah, too much if it is only being used to abort. Just pass an Abortable.", "bodyText": "Yeah, too much if it is only being used to abort. Just pass an Abortable.", "bodyHTML": "<p dir=\"auto\">Yeah, too much if it is only being used to abort. Just pass an Abortable.</p>", "author": "saintstack", "createdAt": "2020-10-08T04:05:35Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java", "diffHunk": "@@ -86,6 +87,7 @@\n   public static final String WAL_ENABLED = \"hbase.regionserver.hlog.enabled\";\n \n   final String factoryId;\n+  final Server server;", "originalCommit": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java\nindex 9cf9c9ca2d..08403d7f42 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java\n", "chunk": "@@ -87,7 +87,7 @@ public class WALFactory {\n   public static final String WAL_ENABLED = \"hbase.regionserver.hlog.enabled\";\n \n   final String factoryId;\n-  final Server server;\n+  final Abortable abortable;\n   private final WALProvider provider;\n   // The meta updates are written to a different wal. If this\n   // regionserver holds meta regions, then this ref will be non-null.\n", "next_change": null}]}, "revised_code_in_main": {"commit": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java\nindex 9cf9c9ca2d..6a5feb0f41 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java\n", "chunk": "@@ -87,7 +87,7 @@ public class WALFactory {\n   public static final String WAL_ENABLED = \"hbase.regionserver.hlog.enabled\";\n \n   final String factoryId;\n-  final Server server;\n+  final Abortable abortable;\n   private final WALProvider provider;\n   // The meta updates are written to a different wal. If this\n   // regionserver holds meta regions, then this ref will be non-null.\n", "next_change": {"commit": "8fe691c705af23ee8ae0a09e5f7c3a8559b4df98", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java\nindex 6a5feb0f41..63bef79fa4 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java\n", "chunk": "@@ -84,20 +102,27 @@ public class WALFactory {\n \n   public static final String META_WAL_PROVIDER = \"hbase.wal.meta_provider\";\n \n+  public static final String REPLICATION_WAL_PROVIDER = \"hbase.wal.replication_provider\";\n+\n   public static final String WAL_ENABLED = \"hbase.regionserver.hlog.enabled\";\n \n+  static final String REPLICATION_WAL_PROVIDER_ID = \"rep\";\n+\n   final String factoryId;\n   final Abortable abortable;\n   private final WALProvider provider;\n   // The meta updates are written to a different wal. If this\n   // regionserver holds meta regions, then this ref will be non-null.\n   // lazily intialized; most RegionServers don't deal with META\n-  private final AtomicReference<WALProvider> metaProvider = new AtomicReference<>();\n+  private final LazyInitializedWALProvider metaProvider;\n+  // This is for avoid hbase:replication itself keeps trigger unnecessary updates to WAL file and\n+  // generate a lot useless data, see HBASE-27775 for more details.\n+  private final LazyInitializedWALProvider replicationProvider;\n \n   /**\n    * Configuration-specified WAL Reader used when a custom reader is requested\n    */\n-  private final Class<? extends AbstractFSWALProvider.Reader> logReaderClass;\n+  private final Class<? extends WALStreamReader> walStreamReaderClass;\n \n   /**\n    * How long to attempt opening in-recovery wals\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "message": "Merge commit", "committedDate": null}, {"oid": "89cb0c537010e5625033014844bded7426e798d6", "committedDate": "2020-11-20 00:04:48 -0800", "message": "HBASE-25055 Add ReplicationSource for meta WALs; add enable/disable w\u2026 (#2451)"}, {"oid": "40843bb56793e74eada6dd84c3eccff644f7c71e", "committedDate": "2020-11-20 00:04:48 -0800", "message": "HBASE-25151 warmupRegion frustrates registering WALs on the catalog replicationsource"}, {"oid": "1726160839368df14602da1618e3538955b25f74", "committedDate": "2020-11-25 14:10:12 -0800", "message": "HBASE-24640 Purge use of VisibleForTesting (#2695)"}, {"oid": "57a49f5ca7f1e29204fb8a9114c12d7921677a18", "committedDate": "2021-03-29 12:15:58 -0700", "message": "HBASE-25692 Always try to close the WAL reader when we catch any exception (#3090)"}, {"oid": "b948ddbf21388ff71f899c926ec2b01654468213", "committedDate": "2021-12-30 17:04:01 +0800", "message": "HBASE-26347 Support detect and exclude slow DNs in fan-out of WAL (#3800)"}, {"oid": "9c8c9e7fbf8005ea89fa9b13d6d063b9f0240443", "committedDate": "2022-05-01 22:15:09 +0800", "message": "HBASE-26899 Run spotless:apply"}, {"oid": "0ae42ddaee38315e10d7537ec2872a8263bd11c8", "committedDate": "2022-07-24 15:08:03 +0800", "message": "HBASE-27230 RegionServer should be aborted when WAL.sync throws Timeo\u2026 (#4641)"}, {"oid": "e48c4485db8d9255510ee1cc9cf465e14de637d7", "committedDate": "2023-03-10 21:54:20 +0800", "message": "HBASE-27632 Refactor WAL.Reader implementation so we can better support WAL splitting and replication (#5055)"}, {"oid": "6d0311c1d968de2750e9efacaaf5f71fb3bb2108", "committedDate": "2023-05-15 22:53:48 +0800", "message": "HBASE-27214 Implement the new replication hfile/log cleaner (#4722)"}, {"oid": "8fe691c705af23ee8ae0a09e5f7c3a8559b4df98", "committedDate": "2023-05-15 22:53:48 +0800", "message": "HBASE-27775 Use a separate WAL provider for hbase:replication table (#5157)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNjIxNw==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501436217", "body": "s/Retriable/Retryable/g", "bodyText": "s/Retriable/Retryable/g", "bodyHTML": "<p dir=\"auto\">s/Retriable/Retryable/g</p>", "author": "saintstack", "createdAt": "2020-10-08T04:06:15Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java", "diffHunk": "@@ -122,6 +127,18 @@ public DodgyFSLog(FileSystem fs, Path root, String logDir, Configuration conf)\n       return regions;\n     }\n \n+    @Override\n+    protected void archiveLogFile(Path p) throws IOException {\n+      if (throwArchiveException) {\n+        throw new IOException(\"throw archival exception\");\n+      }\n+    }\n+\n+    @Override\n+    protected void archiveRetriable(Pair<Path, Long> localLogsToArchive) {", "originalCommit": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzNjE2Ng==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501636166", "bodyText": "Done", "author": "ramkrish86", "createdAt": "2020-10-08T11:08:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNjIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java\nindex b13597d90b..d0d8e458e8 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java\n", "chunk": "@@ -135,8 +135,8 @@ public class TestFailedAppendAndSync {\n     }\n \n     @Override\n-    protected void archiveRetriable(Pair<Path, Long> localLogsToArchive) {\n-      super.archiveRetriable(localLogsToArchive);\n+    protected void archiveRetryable(Pair<Path, Long> localLogsToArchive) {\n+      super.archiveRetryable(localLogsToArchive);\n     }\n \n     @Override\n", "next_change": {"commit": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java\nindex d0d8e458e8..fdf96dab87 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java\n", "chunk": "@@ -135,8 +135,8 @@ public class TestFailedAppendAndSync {\n     }\n \n     @Override\n-    protected void archiveRetryable(Pair<Path, Long> localLogsToArchive) {\n-      super.archiveRetryable(localLogsToArchive);\n+    protected void archive(Pair<Path, Long> localLogsToArchive) {\n+      super.archive(localLogsToArchive);\n     }\n \n     @Override\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java\nindex b13597d90b..fdf96dab87 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java\n", "chunk": "@@ -135,8 +135,8 @@ public class TestFailedAppendAndSync {\n     }\n \n     @Override\n-    protected void archiveRetriable(Pair<Path, Long> localLogsToArchive) {\n-      super.archiveRetriable(localLogsToArchive);\n+    protected void archive(Pair<Path, Long> localLogsToArchive) {\n+      super.archive(localLogsToArchive);\n     }\n \n     @Override\n", "next_change": null}]}, "commits_in_main": [{"oid": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "message": "Merge commit", "committedDate": null}, {"oid": "c98e993b238f527fb8cdc7f8a03a3555bb1dc74a", "committedDate": "2020-11-03 15:20:27 -0800", "message": "HBASE-25212 Optionally abort requests in progress after deciding a region should close (#2574)"}, {"oid": "d30cc270979dd2ec7d5e0ed12466f0cbd6797bba", "committedDate": "2021-07-19 09:29:08 +0800", "message": "HBASE-26081 Copy HBTU to hbase-testing-util, rename the HBTU related classes in hbase-server and mark them as IA.LimitedPrivate (#3478)"}, {"oid": "9c8c9e7fbf8005ea89fa9b13d6d063b9f0240443", "committedDate": "2022-05-01 22:15:09 +0800", "message": "HBASE-26899 Run spotless:apply"}, {"oid": "bd7a78add5aaac090d6ea0b1951778fe24542b70", "committedDate": "2023-01-29 11:29:51 +0800", "message": "HBASE-27598 Upgrade mockito to 4.x (#4998)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2OTI0Nw==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501869247", "body": "Default is no retries?\r\n\r\nWill the retry ever work? Will it be regular occurence?", "bodyText": "Default is no retries?\nWill the retry ever work? Will it be regular occurence?", "bodyHTML": "<p dir=\"auto\">Default is no retries?</p>\n<p dir=\"auto\">Will the retry ever work? Will it be regular occurence?</p>", "author": "saintstack", "createdAt": "2020-10-08T16:53:49Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -482,6 +505,8 @@ protected SyncFuture initialValue() {\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n+    archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);", "originalCommit": "52209f4a21d71d8e28d18dfef21b2acfaeaad5fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTQyMw==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r502191423", "bodyText": "Ideally if the WAL FS is having an issue then this archive may also fail. By default we will try it (mandatory) once (so retries are 0) - then if this new config is set to a non-zero value we will try to repeat it for the configured times. Generally we are not going to configure it to a non-zero value.", "author": "ramkrish86", "createdAt": "2020-10-09T05:06:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2OTI0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY1MTk3NA==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r502651974", "bodyText": "ok", "author": "saintstack", "createdAt": "2020-10-09T20:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2OTI0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "264c2b16c9cd6392cd0bab50b8d43771f43abe6a", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 83dd26534d..b8bf669b54 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -505,7 +502,7 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n-    archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);\n+    archiveRetries = this.conf.getInt(\"hbase.regionserver.logroll.archive.retries\", 0);\n \n   }\n \n", "next_change": {"commit": "a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex b8bf669b54..83dd26534d 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -502,7 +505,7 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n-    archiveRetries = this.conf.getInt(\"hbase.regionserver.logroll.archive.retries\", 0);\n+    archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);\n \n   }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5a19bcfa98b3ccd9f7fb1fb933248c808676d91c", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 83dd26534d..68d39db434 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -495,12 +492,7 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n       DEFAULT_SLOW_SYNC_ROLL_INTERVAL_MS);\n     this.walSyncTimeoutNs = TimeUnit.MILLISECONDS.toNanos(conf.getLong(WAL_SYNC_TIMEOUT_MS,\n       DEFAULT_WAL_SYNC_TIMEOUT_MS));\n-    this.cachedSyncFutures = new ThreadLocal<SyncFuture>() {\n-      @Override\n-      protected SyncFuture initialValue() {\n-        return new SyncFuture();\n-      }\n-    };\n+    this.syncFutureCache = new SyncFutureCache(conf);\n     this.implClassName = getClass().getSimpleName();\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n", "next_change": {"commit": "ca3ba494cbc322b0824d2d755bcf4191c3a525ed", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 68d39db434..5379e29151 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -498,7 +508,8 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n     archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);\n-\n+    this.walShutdownTimeout = conf.getLong(WAL_SHUTDOWN_WAIT_TIMEOUT_MS,\n+      DEFAULT_WAL_SHUTDOWN_WAIT_TIMEOUT_MS);\n   }\n \n   /**\n", "next_change": {"commit": "9c8c9e7fbf8005ea89fa9b13d6d063b9f0240443", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 5379e29151..2c0a656049 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -488,28 +492,28 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n     this.logrollsize = (long) (this.blocksize * multiplier);\n     this.maxLogs = conf.getInt(MAX_LOGS, Math.max(32, calculateMaxLogFiles(conf, logrollsize)));\n \n-    LOG.info(\"WAL configuration: blocksize=\" + StringUtils.byteDesc(blocksize) + \", rollsize=\" +\n-      StringUtils.byteDesc(this.logrollsize) + \", prefix=\" + this.walFilePrefix + \", suffix=\" +\n-      walFileSuffix + \", logDir=\" + this.walDir + \", archiveDir=\" + this.walArchiveDir +\n-      \", maxLogs=\" + this.maxLogs);\n-    this.slowSyncNs = TimeUnit.MILLISECONDS.toNanos(conf.getInt(SLOW_SYNC_TIME_MS,\n-      DEFAULT_SLOW_SYNC_TIME_MS));\n-    this.rollOnSyncNs = TimeUnit.MILLISECONDS.toNanos(conf.getInt(ROLL_ON_SYNC_TIME_MS,\n-      DEFAULT_ROLL_ON_SYNC_TIME_MS));\n-    this.slowSyncRollThreshold = conf.getInt(SLOW_SYNC_ROLL_THRESHOLD,\n-      DEFAULT_SLOW_SYNC_ROLL_THRESHOLD);\n-    this.slowSyncCheckInterval = conf.getInt(SLOW_SYNC_ROLL_INTERVAL_MS,\n-      DEFAULT_SLOW_SYNC_ROLL_INTERVAL_MS);\n-    this.walSyncTimeoutNs = TimeUnit.MILLISECONDS.toNanos(conf.getLong(WAL_SYNC_TIMEOUT_MS,\n-      DEFAULT_WAL_SYNC_TIMEOUT_MS));\n+    LOG.info(\"WAL configuration: blocksize=\" + StringUtils.byteDesc(blocksize) + \", rollsize=\"\n+      + StringUtils.byteDesc(this.logrollsize) + \", prefix=\" + this.walFilePrefix + \", suffix=\"\n+      + walFileSuffix + \", logDir=\" + this.walDir + \", archiveDir=\" + this.walArchiveDir\n+      + \", maxLogs=\" + this.maxLogs);\n+    this.slowSyncNs =\n+      TimeUnit.MILLISECONDS.toNanos(conf.getInt(SLOW_SYNC_TIME_MS, DEFAULT_SLOW_SYNC_TIME_MS));\n+    this.rollOnSyncNs = TimeUnit.MILLISECONDS\n+      .toNanos(conf.getInt(ROLL_ON_SYNC_TIME_MS, DEFAULT_ROLL_ON_SYNC_TIME_MS));\n+    this.slowSyncRollThreshold =\n+      conf.getInt(SLOW_SYNC_ROLL_THRESHOLD, DEFAULT_SLOW_SYNC_ROLL_THRESHOLD);\n+    this.slowSyncCheckInterval =\n+      conf.getInt(SLOW_SYNC_ROLL_INTERVAL_MS, DEFAULT_SLOW_SYNC_ROLL_INTERVAL_MS);\n+    this.walSyncTimeoutNs =\n+      TimeUnit.MILLISECONDS.toNanos(conf.getLong(WAL_SYNC_TIMEOUT_MS, DEFAULT_WAL_SYNC_TIMEOUT_MS));\n     this.syncFutureCache = new SyncFutureCache(conf);\n     this.implClassName = getClass().getSimpleName();\n-    this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n-            SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n+    this.walTooOldNs = TimeUnit.SECONDS\n+      .toNanos(conf.getInt(SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n     archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);\n-    this.walShutdownTimeout = conf.getLong(WAL_SHUTDOWN_WAIT_TIMEOUT_MS,\n-      DEFAULT_WAL_SHUTDOWN_WAIT_TIMEOUT_MS);\n+    this.walShutdownTimeout =\n+      conf.getLong(WAL_SHUTDOWN_WAIT_TIMEOUT_MS, DEFAULT_WAL_SHUTDOWN_WAIT_TIMEOUT_MS);\n   }\n \n   /**\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "message": "Merge commit", "committedDate": null}, {"oid": "1726160839368df14602da1618e3538955b25f74", "committedDate": "2020-11-25 14:10:12 -0800", "message": "HBASE-24640 Purge use of VisibleForTesting (#2695)"}, {"oid": "302d9ea8b888762a5a20a5ba5c2be7bc239afaef", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25373 Remove HTrace completely in code base and try to make use of OpenTelemetry"}, {"oid": "2be2c63f0d3917a243b74af9754cbfc805b858d1", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25484 Add trace support for WAL sync (#2892)"}, {"oid": "b04c3c77860fe430308a6bfd7dd8aebe1ad3510c", "committedDate": "2021-05-31 22:12:47 -0700", "message": "HBASE-25932: Ensure replication reads the trailer bytes from WAL. (#3332)"}, {"oid": "335305e0cf1ae00b18d6e7fb26a0e3617a4481a6", "committedDate": "2021-06-01 09:57:48 -0700", "message": "HBASE-25911 Replace calls to System.currentTimeMillis with EnvironmentEdgeManager.currentTime (#3302)"}, {"oid": "5a19bcfa98b3ccd9f7fb1fb933248c808676d91c", "committedDate": "2021-06-16 14:30:15 -0700", "message": "HBASE-25984: Avoid premature reuse of sync futures in FSHLog (#3371)"}, {"oid": "336d8464cce85a2bc1fc97384ce66e95120b0d6f", "committedDate": "2021-06-17 12:21:05 -0700", "message": "HBASE-25998: Redo synchronization in SyncFuture (#3382)"}, {"oid": "ea824df571e6a80d483c082fcff5bef34f452499", "committedDate": "2021-12-01 09:21:20 -0800", "message": "HBASE-26471 Move tracing semantic attributes to their own class (#3896)"}, {"oid": "ca3ba494cbc322b0824d2d755bcf4191c3a525ed", "committedDate": "2021-12-07 12:26:59 +0800", "message": "HBASE-26526 Introduce a timeout to shutdown of WAL (#3297)"}, {"oid": "a599d528208d0941eea5b06a06f41675799bb90a", "committedDate": "2021-12-27 23:59:13 +0800", "message": "HBASE-26564 Retire the method visitLogEntryBeforeWrite without RegionInfo in WALActionListner (#3938)"}, {"oid": "7286cc00354e78716aa7faffab9b97ef5a0a2dcb", "committedDate": "2021-12-31 12:29:48 +0800", "message": "HBASE-26407 Introduce a region replication sink for sinking WAL edits to secondary replicas directly (#3807)"}, {"oid": "9c037b1be7c35ed715ad471acb93b0d0084394e3", "committedDate": "2022-03-03 12:18:33 +0100", "message": "HBASE-26764 Implement generic exception support for TraceUtil methods over Callables and Runnables"}, {"oid": "b67c16a7636958970d37bfcd775fd55e8de98177", "committedDate": "2022-03-23 14:53:58 +0800", "message": "HBASE-26866 Shutdown WAL may abort region server (#4254)"}, {"oid": "9c8c9e7fbf8005ea89fa9b13d6d063b9f0240443", "committedDate": "2022-05-01 22:15:09 +0800", "message": "HBASE-26899 Run spotless:apply"}, {"oid": "313a37f7ac780a36b51064372868a31849df6727", "committedDate": "2022-06-02 23:55:23 +0800", "message": "HBASE-27046 The filenum in AbstractFSWAL should be monotone increasing (#4449)"}, {"oid": "a0a018d6c3baa53517e3ae56010b181aa7323662", "committedDate": "2022-06-20 23:48:33 +0800", "message": "HBASE-27128 when open archiveRetries totalLogSize calculation mistake (#4546)"}, {"oid": "acf144717bd85d2486cc33fbb0e3622b06c66717", "committedDate": "2022-07-19 10:00:43 +0800", "message": "HBASE-27220 Apply the spotless format change in HBASE-27208 to our code base"}, {"oid": "0ae42ddaee38315e10d7537ec2872a8263bd11c8", "committedDate": "2022-07-24 15:08:03 +0800", "message": "HBASE-27230 RegionServer should be aborted when WAL.sync throws Timeo\u2026 (#4641)"}, {"oid": "63cdd026f08cdde6ac0fde1342ffd050e8e02441", "committedDate": "2022-10-06 18:17:34 +0800", "message": "HBASE-27401 Clean up current broken 'n's in our javadoc (#4812)"}, {"oid": "655f19c64573a9a509ec8a657c6e0ef71337b23a", "committedDate": "2022-11-03 11:27:08 -0700", "message": "HBASE-26913 Replication Observability Framework (#4556)"}, {"oid": "e48c4485db8d9255510ee1cc9cf465e14de637d7", "committedDate": "2023-03-10 21:54:20 +0800", "message": "HBASE-27632 Refactor WAL.Reader implementation so we can better support WAL splitting and replication (#5055)"}, {"oid": "230fdc0b50578144d3e0916c33d4532bb8644763", "committedDate": "2023-03-24 14:17:39 +0800", "message": "HBASE-27732 NPE in TestBasicWALEntryStreamFSHLog.testEOFExceptionInOldWALsDirectory (#5119)"}, {"oid": "e2d8db6dfc1ab70e97560cc7bcaff10c45ba62c4", "committedDate": "2023-05-15 22:53:48 +0800", "message": "HBASE-27212 Implement a new table based replication queue storage and make the minimum replication system work (#4672)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MTU4OQ==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501871589", "body": "nit: just name it archive ? That it retries is an internal affair.", "bodyText": "nit: just name it archive ? That it retries is an internal affair.", "bodyHTML": "<p dir=\"auto\">nit: just name it archive ? That it retries is an internal affair.</p>", "author": "saintstack", "createdAt": "2020-10-08T16:57:26Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -715,11 +740,39 @@ private void cleanOldLogs() throws IOException {\n         regionsBlockingThisWal.clear();\n       }\n     }\n+\n     if (logsToArchive != null) {\n-      for (Pair<Path, Long> logAndSize : logsToArchive) {\n-        this.totalLogSize.addAndGet(-logAndSize.getSecond());\n-        archiveLogFile(logAndSize.getFirst());\n-        this.walFile2Props.remove(logAndSize.getFirst());\n+      final List<Pair<Path, Long>> localLogsToArchive = logsToArchive;\n+      // make it async\n+      for (Pair<Path, Long> log : localLogsToArchive) {\n+        logArchiveExecutor.execute(() -> {\n+          archiveRetryable(log);\n+        });\n+        this.walFile2Props.remove(log.getFirst());\n+      }\n+    }\n+  }\n+\n+  protected void archiveRetryable(final Pair<Path, Long> log) {", "originalCommit": "52209f4a21d71d8e28d18dfef21b2acfaeaad5fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "264c2b16c9cd6392cd0bab50b8d43771f43abe6a", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 83dd26534d..b8bf669b54 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -746,14 +743,14 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n       // make it async\n       for (Pair<Path, Long> log : localLogsToArchive) {\n         logArchiveExecutor.execute(() -> {\n-          archiveRetryable(log);\n+          archiveRetriable(log);\n         });\n         this.walFile2Props.remove(log.getFirst());\n       }\n     }\n   }\n \n-  protected void archiveRetryable(final Pair<Path, Long> log) {\n+  protected void archiveRetriable(final Pair<Path, Long> log) {\n     int retry = 1;\n     while (true) {\n       try {\n", "next_change": {"commit": "a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex b8bf669b54..83dd26534d 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -743,14 +746,14 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n       // make it async\n       for (Pair<Path, Long> log : localLogsToArchive) {\n         logArchiveExecutor.execute(() -> {\n-          archiveRetriable(log);\n+          archiveRetryable(log);\n         });\n         this.walFile2Props.remove(log.getFirst());\n       }\n     }\n   }\n \n-  protected void archiveRetriable(final Pair<Path, Long> log) {\n+  protected void archiveRetryable(final Pair<Path, Long> log) {\n     int retry = 1;\n     while (true) {\n       try {\n", "next_change": {"commit": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 83dd26534d..ac99ea671e 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -746,14 +746,14 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n       // make it async\n       for (Pair<Path, Long> log : localLogsToArchive) {\n         logArchiveExecutor.execute(() -> {\n-          archiveRetryable(log);\n+          archive(log);\n         });\n         this.walFile2Props.remove(log.getFirst());\n       }\n     }\n   }\n \n-  protected void archiveRetryable(final Pair<Path, Long> log) {\n+  protected void archive(final Pair<Path, Long> log) {\n     int retry = 1;\n     while (true) {\n       try {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 83dd26534d..ac99ea671e 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -746,14 +746,14 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n       // make it async\n       for (Pair<Path, Long> log : localLogsToArchive) {\n         logArchiveExecutor.execute(() -> {\n-          archiveRetryable(log);\n+          archive(log);\n         });\n         this.walFile2Props.remove(log.getFirst());\n       }\n     }\n   }\n \n-  protected void archiveRetryable(final Pair<Path, Long> log) {\n+  protected void archive(final Pair<Path, Long> log) {\n     int retry = 1;\n     while (true) {\n       try {\n", "next_change": {"commit": "a0a018d6c3baa53517e3ae56010b181aa7323662", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex ac99ea671e..13f4eb00c2 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -754,11 +778,11 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n   }\n \n   protected void archive(final Pair<Path, Long> log) {\n+    totalLogSize.addAndGet(-log.getSecond());\n     int retry = 1;\n     while (true) {\n       try {\n         archiveLogFile(log.getFirst());\n-        totalLogSize.addAndGet(-log.getSecond());\n         // successful\n         break;\n       } catch (Throwable e) {\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "message": "Merge commit", "committedDate": null}, {"oid": "1726160839368df14602da1618e3538955b25f74", "committedDate": "2020-11-25 14:10:12 -0800", "message": "HBASE-24640 Purge use of VisibleForTesting (#2695)"}, {"oid": "302d9ea8b888762a5a20a5ba5c2be7bc239afaef", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25373 Remove HTrace completely in code base and try to make use of OpenTelemetry"}, {"oid": "2be2c63f0d3917a243b74af9754cbfc805b858d1", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25484 Add trace support for WAL sync (#2892)"}, {"oid": "b04c3c77860fe430308a6bfd7dd8aebe1ad3510c", "committedDate": "2021-05-31 22:12:47 -0700", "message": "HBASE-25932: Ensure replication reads the trailer bytes from WAL. (#3332)"}, {"oid": "335305e0cf1ae00b18d6e7fb26a0e3617a4481a6", "committedDate": "2021-06-01 09:57:48 -0700", "message": "HBASE-25911 Replace calls to System.currentTimeMillis with EnvironmentEdgeManager.currentTime (#3302)"}, {"oid": "5a19bcfa98b3ccd9f7fb1fb933248c808676d91c", "committedDate": "2021-06-16 14:30:15 -0700", "message": "HBASE-25984: Avoid premature reuse of sync futures in FSHLog (#3371)"}, {"oid": "336d8464cce85a2bc1fc97384ce66e95120b0d6f", "committedDate": "2021-06-17 12:21:05 -0700", "message": "HBASE-25998: Redo synchronization in SyncFuture (#3382)"}, {"oid": "ea824df571e6a80d483c082fcff5bef34f452499", "committedDate": "2021-12-01 09:21:20 -0800", "message": "HBASE-26471 Move tracing semantic attributes to their own class (#3896)"}, {"oid": "ca3ba494cbc322b0824d2d755bcf4191c3a525ed", "committedDate": "2021-12-07 12:26:59 +0800", "message": "HBASE-26526 Introduce a timeout to shutdown of WAL (#3297)"}, {"oid": "a599d528208d0941eea5b06a06f41675799bb90a", "committedDate": "2021-12-27 23:59:13 +0800", "message": "HBASE-26564 Retire the method visitLogEntryBeforeWrite without RegionInfo in WALActionListner (#3938)"}, {"oid": "7286cc00354e78716aa7faffab9b97ef5a0a2dcb", "committedDate": "2021-12-31 12:29:48 +0800", "message": "HBASE-26407 Introduce a region replication sink for sinking WAL edits to secondary replicas directly (#3807)"}, {"oid": "9c037b1be7c35ed715ad471acb93b0d0084394e3", "committedDate": "2022-03-03 12:18:33 +0100", "message": "HBASE-26764 Implement generic exception support for TraceUtil methods over Callables and Runnables"}, {"oid": "b67c16a7636958970d37bfcd775fd55e8de98177", "committedDate": "2022-03-23 14:53:58 +0800", "message": "HBASE-26866 Shutdown WAL may abort region server (#4254)"}, {"oid": "9c8c9e7fbf8005ea89fa9b13d6d063b9f0240443", "committedDate": "2022-05-01 22:15:09 +0800", "message": "HBASE-26899 Run spotless:apply"}, {"oid": "313a37f7ac780a36b51064372868a31849df6727", "committedDate": "2022-06-02 23:55:23 +0800", "message": "HBASE-27046 The filenum in AbstractFSWAL should be monotone increasing (#4449)"}, {"oid": "a0a018d6c3baa53517e3ae56010b181aa7323662", "committedDate": "2022-06-20 23:48:33 +0800", "message": "HBASE-27128 when open archiveRetries totalLogSize calculation mistake (#4546)"}, {"oid": "acf144717bd85d2486cc33fbb0e3622b06c66717", "committedDate": "2022-07-19 10:00:43 +0800", "message": "HBASE-27220 Apply the spotless format change in HBASE-27208 to our code base"}, {"oid": "0ae42ddaee38315e10d7537ec2872a8263bd11c8", "committedDate": "2022-07-24 15:08:03 +0800", "message": "HBASE-27230 RegionServer should be aborted when WAL.sync throws Timeo\u2026 (#4641)"}, {"oid": "63cdd026f08cdde6ac0fde1342ffd050e8e02441", "committedDate": "2022-10-06 18:17:34 +0800", "message": "HBASE-27401 Clean up current broken 'n's in our javadoc (#4812)"}, {"oid": "655f19c64573a9a509ec8a657c6e0ef71337b23a", "committedDate": "2022-11-03 11:27:08 -0700", "message": "HBASE-26913 Replication Observability Framework (#4556)"}, {"oid": "e48c4485db8d9255510ee1cc9cf465e14de637d7", "committedDate": "2023-03-10 21:54:20 +0800", "message": "HBASE-27632 Refactor WAL.Reader implementation so we can better support WAL splitting and replication (#5055)"}, {"oid": "230fdc0b50578144d3e0916c33d4532bb8644763", "committedDate": "2023-03-24 14:17:39 +0800", "message": "HBASE-27732 NPE in TestBasicWALEntryStreamFSHLog.testEOFExceptionInOldWALsDirectory (#5119)"}, {"oid": "e2d8db6dfc1ab70e97560cc7bcaff10c45ba62c4", "committedDate": "2023-05-15 22:53:48 +0800", "message": "HBASE-27212 Implement a new table based replication queue storage and make the minimum replication system work (#4672)"}]}, {"oid": "264c2b16c9cd6392cd0bab50b8d43771f43abe6a", "url": "https://github.com/apache/hbase/commit/264c2b16c9cd6392cd0bab50b8d43771f43abe6a", "message": "HBASE-25065 WAL archival can be batched/throttled and also done by a separate thread", "committedDate": "2020-10-11T04:55:15Z", "type": "commit"}, {"oid": "081b02b43fa2fcacfb2595d79d7d8f4bbb356542", "url": "https://github.com/apache/hbase/commit/081b02b43fa2fcacfb2595d79d7d8f4bbb356542", "message": "Fix checkstyle issues", "committedDate": "2020-10-11T04:55:15Z", "type": "commit"}, {"oid": "a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "url": "https://github.com/apache/hbase/commit/a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "message": "Address review comments", "committedDate": "2020-10-11T05:13:01Z", "type": "commit"}, {"oid": "ab4abb454414822623119bb5bf5f599c5a72d859", "url": "https://github.com/apache/hbase/commit/ab4abb454414822623119bb5bf5f599c5a72d859", "message": "checkstyle comments", "committedDate": "2020-10-11T05:13:01Z", "type": "commit"}, {"oid": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "url": "https://github.com/apache/hbase/commit/2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "message": "Addressing final review comments", "committedDate": "2020-10-11T05:13:01Z", "type": "commit"}, {"oid": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "url": "https://github.com/apache/hbase/commit/2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "message": "Addressing final review comments", "committedDate": "2020-10-11T05:13:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxMzQ5Ng==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r503513496", "body": "nit: why all the extra whitespace?", "bodyText": "nit: why all the extra whitespace?", "bodyHTML": "<p dir=\"auto\">nit: why all the extra whitespace?</p>", "author": "ndimiduk", "createdAt": "2020-10-12T20:20:04Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -84,8 +87,12 @@\n import org.apache.yetus.audience.InterfaceAudience;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;\n+import org.apache.hbase.thirdparty.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+", "originalCommit": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "1726160839368df14602da1618e3538955b25f74", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex ac99ea671e..af5bfd5b03 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -87,12 +86,8 @@ import org.apache.htrace.core.TraceScope;\n import org.apache.yetus.audience.InterfaceAudience;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;\n-import org.apache.hbase.thirdparty.com.google.common.util.concurrent.ThreadFactoryBuilder;\n-\n-\n-\n \n+import org.apache.hbase.thirdparty.com.google.common.util.concurrent.ThreadFactoryBuilder;\n \n /**\n  * Implementation of {@link WAL} to go against {@link FileSystem}; i.e. keep WALs in HDFS. Only one\n", "next_change": null}]}, "commits_in_main": [{"oid": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "message": "Merge commit", "committedDate": null}, {"oid": "1726160839368df14602da1618e3538955b25f74", "committedDate": "2020-11-25 14:10:12 -0800", "message": "HBASE-24640 Purge use of VisibleForTesting (#2695)"}, {"oid": "302d9ea8b888762a5a20a5ba5c2be7bc239afaef", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25373 Remove HTrace completely in code base and try to make use of OpenTelemetry"}, {"oid": "2be2c63f0d3917a243b74af9754cbfc805b858d1", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25484 Add trace support for WAL sync (#2892)"}, {"oid": "b04c3c77860fe430308a6bfd7dd8aebe1ad3510c", "committedDate": "2021-05-31 22:12:47 -0700", "message": "HBASE-25932: Ensure replication reads the trailer bytes from WAL. (#3332)"}, {"oid": "335305e0cf1ae00b18d6e7fb26a0e3617a4481a6", "committedDate": "2021-06-01 09:57:48 -0700", "message": "HBASE-25911 Replace calls to System.currentTimeMillis with EnvironmentEdgeManager.currentTime (#3302)"}, {"oid": "5a19bcfa98b3ccd9f7fb1fb933248c808676d91c", "committedDate": "2021-06-16 14:30:15 -0700", "message": "HBASE-25984: Avoid premature reuse of sync futures in FSHLog (#3371)"}, {"oid": "336d8464cce85a2bc1fc97384ce66e95120b0d6f", "committedDate": "2021-06-17 12:21:05 -0700", "message": "HBASE-25998: Redo synchronization in SyncFuture (#3382)"}, {"oid": "ea824df571e6a80d483c082fcff5bef34f452499", "committedDate": "2021-12-01 09:21:20 -0800", "message": "HBASE-26471 Move tracing semantic attributes to their own class (#3896)"}, {"oid": "ca3ba494cbc322b0824d2d755bcf4191c3a525ed", "committedDate": "2021-12-07 12:26:59 +0800", "message": "HBASE-26526 Introduce a timeout to shutdown of WAL (#3297)"}, {"oid": "a599d528208d0941eea5b06a06f41675799bb90a", "committedDate": "2021-12-27 23:59:13 +0800", "message": "HBASE-26564 Retire the method visitLogEntryBeforeWrite without RegionInfo in WALActionListner (#3938)"}, {"oid": "7286cc00354e78716aa7faffab9b97ef5a0a2dcb", "committedDate": "2021-12-31 12:29:48 +0800", "message": "HBASE-26407 Introduce a region replication sink for sinking WAL edits to secondary replicas directly (#3807)"}, {"oid": "9c037b1be7c35ed715ad471acb93b0d0084394e3", "committedDate": "2022-03-03 12:18:33 +0100", "message": "HBASE-26764 Implement generic exception support for TraceUtil methods over Callables and Runnables"}, {"oid": "b67c16a7636958970d37bfcd775fd55e8de98177", "committedDate": "2022-03-23 14:53:58 +0800", "message": "HBASE-26866 Shutdown WAL may abort region server (#4254)"}, {"oid": "9c8c9e7fbf8005ea89fa9b13d6d063b9f0240443", "committedDate": "2022-05-01 22:15:09 +0800", "message": "HBASE-26899 Run spotless:apply"}, {"oid": "313a37f7ac780a36b51064372868a31849df6727", "committedDate": "2022-06-02 23:55:23 +0800", "message": "HBASE-27046 The filenum in AbstractFSWAL should be monotone increasing (#4449)"}, {"oid": "a0a018d6c3baa53517e3ae56010b181aa7323662", "committedDate": "2022-06-20 23:48:33 +0800", "message": "HBASE-27128 when open archiveRetries totalLogSize calculation mistake (#4546)"}, {"oid": "acf144717bd85d2486cc33fbb0e3622b06c66717", "committedDate": "2022-07-19 10:00:43 +0800", "message": "HBASE-27220 Apply the spotless format change in HBASE-27208 to our code base"}, {"oid": "0ae42ddaee38315e10d7537ec2872a8263bd11c8", "committedDate": "2022-07-24 15:08:03 +0800", "message": "HBASE-27230 RegionServer should be aborted when WAL.sync throws Timeo\u2026 (#4641)"}, {"oid": "63cdd026f08cdde6ac0fde1342ffd050e8e02441", "committedDate": "2022-10-06 18:17:34 +0800", "message": "HBASE-27401 Clean up current broken 'n's in our javadoc (#4812)"}, {"oid": "655f19c64573a9a509ec8a657c6e0ef71337b23a", "committedDate": "2022-11-03 11:27:08 -0700", "message": "HBASE-26913 Replication Observability Framework (#4556)"}, {"oid": "e48c4485db8d9255510ee1cc9cf465e14de637d7", "committedDate": "2023-03-10 21:54:20 +0800", "message": "HBASE-27632 Refactor WAL.Reader implementation so we can better support WAL splitting and replication (#5055)"}, {"oid": "230fdc0b50578144d3e0916c33d4532bb8644763", "committedDate": "2023-03-24 14:17:39 +0800", "message": "HBASE-27732 NPE in TestBasicWALEntryStreamFSHLog.testEOFExceptionInOldWALsDirectory (#5119)"}, {"oid": "e2d8db6dfc1ab70e97560cc7bcaff10c45ba62c4", "committedDate": "2023-05-15 22:53:48 +0800", "message": "HBASE-27212 Implement a new table based replication queue storage and make the minimum replication system work (#4672)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxMzc4Mw==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r503513783", "body": "Introducing a new configuration is a hint that this is too \"big/complex\" to add on a patch release.", "bodyText": "Introducing a new configuration is a hint that this is too \"big/complex\" to add on a patch release.", "bodyHTML": "<p dir=\"auto\">Introducing a new configuration is a hint that this is too \"big/complex\" to add on a patch release.</p>", "author": "ndimiduk", "createdAt": "2020-10-12T20:20:45Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -482,6 +505,8 @@ protected SyncFuture initialValue() {\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n+    archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);", "originalCommit": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "5a19bcfa98b3ccd9f7fb1fb933248c808676d91c", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex ac99ea671e..68d39db434 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -495,12 +492,7 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n       DEFAULT_SLOW_SYNC_ROLL_INTERVAL_MS);\n     this.walSyncTimeoutNs = TimeUnit.MILLISECONDS.toNanos(conf.getLong(WAL_SYNC_TIMEOUT_MS,\n       DEFAULT_WAL_SYNC_TIMEOUT_MS));\n-    this.cachedSyncFutures = new ThreadLocal<SyncFuture>() {\n-      @Override\n-      protected SyncFuture initialValue() {\n-        return new SyncFuture();\n-      }\n-    };\n+    this.syncFutureCache = new SyncFutureCache(conf);\n     this.implClassName = getClass().getSimpleName();\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n", "next_change": {"commit": "ca3ba494cbc322b0824d2d755bcf4191c3a525ed", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 68d39db434..5379e29151 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -498,7 +508,8 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n     archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);\n-\n+    this.walShutdownTimeout = conf.getLong(WAL_SHUTDOWN_WAIT_TIMEOUT_MS,\n+      DEFAULT_WAL_SHUTDOWN_WAIT_TIMEOUT_MS);\n   }\n \n   /**\n", "next_change": {"commit": "9c8c9e7fbf8005ea89fa9b13d6d063b9f0240443", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 5379e29151..2c0a656049 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -488,28 +492,28 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n     this.logrollsize = (long) (this.blocksize * multiplier);\n     this.maxLogs = conf.getInt(MAX_LOGS, Math.max(32, calculateMaxLogFiles(conf, logrollsize)));\n \n-    LOG.info(\"WAL configuration: blocksize=\" + StringUtils.byteDesc(blocksize) + \", rollsize=\" +\n-      StringUtils.byteDesc(this.logrollsize) + \", prefix=\" + this.walFilePrefix + \", suffix=\" +\n-      walFileSuffix + \", logDir=\" + this.walDir + \", archiveDir=\" + this.walArchiveDir +\n-      \", maxLogs=\" + this.maxLogs);\n-    this.slowSyncNs = TimeUnit.MILLISECONDS.toNanos(conf.getInt(SLOW_SYNC_TIME_MS,\n-      DEFAULT_SLOW_SYNC_TIME_MS));\n-    this.rollOnSyncNs = TimeUnit.MILLISECONDS.toNanos(conf.getInt(ROLL_ON_SYNC_TIME_MS,\n-      DEFAULT_ROLL_ON_SYNC_TIME_MS));\n-    this.slowSyncRollThreshold = conf.getInt(SLOW_SYNC_ROLL_THRESHOLD,\n-      DEFAULT_SLOW_SYNC_ROLL_THRESHOLD);\n-    this.slowSyncCheckInterval = conf.getInt(SLOW_SYNC_ROLL_INTERVAL_MS,\n-      DEFAULT_SLOW_SYNC_ROLL_INTERVAL_MS);\n-    this.walSyncTimeoutNs = TimeUnit.MILLISECONDS.toNanos(conf.getLong(WAL_SYNC_TIMEOUT_MS,\n-      DEFAULT_WAL_SYNC_TIMEOUT_MS));\n+    LOG.info(\"WAL configuration: blocksize=\" + StringUtils.byteDesc(blocksize) + \", rollsize=\"\n+      + StringUtils.byteDesc(this.logrollsize) + \", prefix=\" + this.walFilePrefix + \", suffix=\"\n+      + walFileSuffix + \", logDir=\" + this.walDir + \", archiveDir=\" + this.walArchiveDir\n+      + \", maxLogs=\" + this.maxLogs);\n+    this.slowSyncNs =\n+      TimeUnit.MILLISECONDS.toNanos(conf.getInt(SLOW_SYNC_TIME_MS, DEFAULT_SLOW_SYNC_TIME_MS));\n+    this.rollOnSyncNs = TimeUnit.MILLISECONDS\n+      .toNanos(conf.getInt(ROLL_ON_SYNC_TIME_MS, DEFAULT_ROLL_ON_SYNC_TIME_MS));\n+    this.slowSyncRollThreshold =\n+      conf.getInt(SLOW_SYNC_ROLL_THRESHOLD, DEFAULT_SLOW_SYNC_ROLL_THRESHOLD);\n+    this.slowSyncCheckInterval =\n+      conf.getInt(SLOW_SYNC_ROLL_INTERVAL_MS, DEFAULT_SLOW_SYNC_ROLL_INTERVAL_MS);\n+    this.walSyncTimeoutNs =\n+      TimeUnit.MILLISECONDS.toNanos(conf.getLong(WAL_SYNC_TIMEOUT_MS, DEFAULT_WAL_SYNC_TIMEOUT_MS));\n     this.syncFutureCache = new SyncFutureCache(conf);\n     this.implClassName = getClass().getSimpleName();\n-    this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n-            SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n+    this.walTooOldNs = TimeUnit.SECONDS\n+      .toNanos(conf.getInt(SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n     archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);\n-    this.walShutdownTimeout = conf.getLong(WAL_SHUTDOWN_WAIT_TIMEOUT_MS,\n-      DEFAULT_WAL_SHUTDOWN_WAIT_TIMEOUT_MS);\n+    this.walShutdownTimeout =\n+      conf.getLong(WAL_SHUTDOWN_WAIT_TIMEOUT_MS, DEFAULT_WAL_SHUTDOWN_WAIT_TIMEOUT_MS);\n   }\n \n   /**\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "message": "Merge commit", "committedDate": null}, {"oid": "1726160839368df14602da1618e3538955b25f74", "committedDate": "2020-11-25 14:10:12 -0800", "message": "HBASE-24640 Purge use of VisibleForTesting (#2695)"}, {"oid": "302d9ea8b888762a5a20a5ba5c2be7bc239afaef", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25373 Remove HTrace completely in code base and try to make use of OpenTelemetry"}, {"oid": "2be2c63f0d3917a243b74af9754cbfc805b858d1", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25484 Add trace support for WAL sync (#2892)"}, {"oid": "b04c3c77860fe430308a6bfd7dd8aebe1ad3510c", "committedDate": "2021-05-31 22:12:47 -0700", "message": "HBASE-25932: Ensure replication reads the trailer bytes from WAL. (#3332)"}, {"oid": "335305e0cf1ae00b18d6e7fb26a0e3617a4481a6", "committedDate": "2021-06-01 09:57:48 -0700", "message": "HBASE-25911 Replace calls to System.currentTimeMillis with EnvironmentEdgeManager.currentTime (#3302)"}, {"oid": "5a19bcfa98b3ccd9f7fb1fb933248c808676d91c", "committedDate": "2021-06-16 14:30:15 -0700", "message": "HBASE-25984: Avoid premature reuse of sync futures in FSHLog (#3371)"}, {"oid": "336d8464cce85a2bc1fc97384ce66e95120b0d6f", "committedDate": "2021-06-17 12:21:05 -0700", "message": "HBASE-25998: Redo synchronization in SyncFuture (#3382)"}, {"oid": "ea824df571e6a80d483c082fcff5bef34f452499", "committedDate": "2021-12-01 09:21:20 -0800", "message": "HBASE-26471 Move tracing semantic attributes to their own class (#3896)"}, {"oid": "ca3ba494cbc322b0824d2d755bcf4191c3a525ed", "committedDate": "2021-12-07 12:26:59 +0800", "message": "HBASE-26526 Introduce a timeout to shutdown of WAL (#3297)"}, {"oid": "a599d528208d0941eea5b06a06f41675799bb90a", "committedDate": "2021-12-27 23:59:13 +0800", "message": "HBASE-26564 Retire the method visitLogEntryBeforeWrite without RegionInfo in WALActionListner (#3938)"}, {"oid": "7286cc00354e78716aa7faffab9b97ef5a0a2dcb", "committedDate": "2021-12-31 12:29:48 +0800", "message": "HBASE-26407 Introduce a region replication sink for sinking WAL edits to secondary replicas directly (#3807)"}, {"oid": "9c037b1be7c35ed715ad471acb93b0d0084394e3", "committedDate": "2022-03-03 12:18:33 +0100", "message": "HBASE-26764 Implement generic exception support for TraceUtil methods over Callables and Runnables"}, {"oid": "b67c16a7636958970d37bfcd775fd55e8de98177", "committedDate": "2022-03-23 14:53:58 +0800", "message": "HBASE-26866 Shutdown WAL may abort region server (#4254)"}, {"oid": "9c8c9e7fbf8005ea89fa9b13d6d063b9f0240443", "committedDate": "2022-05-01 22:15:09 +0800", "message": "HBASE-26899 Run spotless:apply"}, {"oid": "313a37f7ac780a36b51064372868a31849df6727", "committedDate": "2022-06-02 23:55:23 +0800", "message": "HBASE-27046 The filenum in AbstractFSWAL should be monotone increasing (#4449)"}, {"oid": "a0a018d6c3baa53517e3ae56010b181aa7323662", "committedDate": "2022-06-20 23:48:33 +0800", "message": "HBASE-27128 when open archiveRetries totalLogSize calculation mistake (#4546)"}, {"oid": "acf144717bd85d2486cc33fbb0e3622b06c66717", "committedDate": "2022-07-19 10:00:43 +0800", "message": "HBASE-27220 Apply the spotless format change in HBASE-27208 to our code base"}, {"oid": "0ae42ddaee38315e10d7537ec2872a8263bd11c8", "committedDate": "2022-07-24 15:08:03 +0800", "message": "HBASE-27230 RegionServer should be aborted when WAL.sync throws Timeo\u2026 (#4641)"}, {"oid": "63cdd026f08cdde6ac0fde1342ffd050e8e02441", "committedDate": "2022-10-06 18:17:34 +0800", "message": "HBASE-27401 Clean up current broken 'n's in our javadoc (#4812)"}, {"oid": "655f19c64573a9a509ec8a657c6e0ef71337b23a", "committedDate": "2022-11-03 11:27:08 -0700", "message": "HBASE-26913 Replication Observability Framework (#4556)"}, {"oid": "e48c4485db8d9255510ee1cc9cf465e14de637d7", "committedDate": "2023-03-10 21:54:20 +0800", "message": "HBASE-27632 Refactor WAL.Reader implementation so we can better support WAL splitting and replication (#5055)"}, {"oid": "230fdc0b50578144d3e0916c33d4532bb8644763", "committedDate": "2023-03-24 14:17:39 +0800", "message": "HBASE-27732 NPE in TestBasicWALEntryStreamFSHLog.testEOFExceptionInOldWALsDirectory (#5119)"}, {"oid": "e2d8db6dfc1ab70e97560cc7bcaff10c45ba62c4", "committedDate": "2023-05-15 22:53:48 +0800", "message": "HBASE-27212 Implement a new table based replication queue storage and make the minimum replication system work (#4672)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxNTk0OQ==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r503515949", "body": "No backoff of any kind in the retry mechanism?", "bodyText": "No backoff of any kind in the retry mechanism?", "bodyHTML": "<p dir=\"auto\">No backoff of any kind in the retry mechanism?</p>", "author": "ndimiduk", "createdAt": "2020-10-12T20:26:18Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -715,11 +740,39 @@ private void cleanOldLogs() throws IOException {\n         regionsBlockingThisWal.clear();\n       }\n     }\n+\n     if (logsToArchive != null) {\n-      for (Pair<Path, Long> logAndSize : logsToArchive) {\n-        this.totalLogSize.addAndGet(-logAndSize.getSecond());\n-        archiveLogFile(logAndSize.getFirst());\n-        this.walFile2Props.remove(logAndSize.getFirst());\n+      final List<Pair<Path, Long>> localLogsToArchive = logsToArchive;\n+      // make it async\n+      for (Pair<Path, Long> log : localLogsToArchive) {\n+        logArchiveExecutor.execute(() -> {\n+          archive(log);\n+        });\n+        this.walFile2Props.remove(log.getFirst());\n+      }\n+    }\n+  }\n+\n+  protected void archive(final Pair<Path, Long> log) {\n+    int retry = 1;\n+    while (true) {", "originalCommit": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "a0a018d6c3baa53517e3ae56010b181aa7323662", "changed_code": [{"header": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex ac99ea671e..13f4eb00c2 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n", "chunk": "@@ -754,11 +778,11 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n   }\n \n   protected void archive(final Pair<Path, Long> log) {\n+    totalLogSize.addAndGet(-log.getSecond());\n     int retry = 1;\n     while (true) {\n       try {\n         archiveLogFile(log.getFirst());\n-        totalLogSize.addAndGet(-log.getSecond());\n         // successful\n         break;\n       } catch (Throwable e) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "message": "Merge commit", "committedDate": null}, {"oid": "1726160839368df14602da1618e3538955b25f74", "committedDate": "2020-11-25 14:10:12 -0800", "message": "HBASE-24640 Purge use of VisibleForTesting (#2695)"}, {"oid": "302d9ea8b888762a5a20a5ba5c2be7bc239afaef", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25373 Remove HTrace completely in code base and try to make use of OpenTelemetry"}, {"oid": "2be2c63f0d3917a243b74af9754cbfc805b858d1", "committedDate": "2021-04-25 09:23:23 +0800", "message": "HBASE-25484 Add trace support for WAL sync (#2892)"}, {"oid": "b04c3c77860fe430308a6bfd7dd8aebe1ad3510c", "committedDate": "2021-05-31 22:12:47 -0700", "message": "HBASE-25932: Ensure replication reads the trailer bytes from WAL. (#3332)"}, {"oid": "335305e0cf1ae00b18d6e7fb26a0e3617a4481a6", "committedDate": "2021-06-01 09:57:48 -0700", "message": "HBASE-25911 Replace calls to System.currentTimeMillis with EnvironmentEdgeManager.currentTime (#3302)"}, {"oid": "5a19bcfa98b3ccd9f7fb1fb933248c808676d91c", "committedDate": "2021-06-16 14:30:15 -0700", "message": "HBASE-25984: Avoid premature reuse of sync futures in FSHLog (#3371)"}, {"oid": "336d8464cce85a2bc1fc97384ce66e95120b0d6f", "committedDate": "2021-06-17 12:21:05 -0700", "message": "HBASE-25998: Redo synchronization in SyncFuture (#3382)"}, {"oid": "ea824df571e6a80d483c082fcff5bef34f452499", "committedDate": "2021-12-01 09:21:20 -0800", "message": "HBASE-26471 Move tracing semantic attributes to their own class (#3896)"}, {"oid": "ca3ba494cbc322b0824d2d755bcf4191c3a525ed", "committedDate": "2021-12-07 12:26:59 +0800", "message": "HBASE-26526 Introduce a timeout to shutdown of WAL (#3297)"}, {"oid": "a599d528208d0941eea5b06a06f41675799bb90a", "committedDate": "2021-12-27 23:59:13 +0800", "message": "HBASE-26564 Retire the method visitLogEntryBeforeWrite without RegionInfo in WALActionListner (#3938)"}, {"oid": "7286cc00354e78716aa7faffab9b97ef5a0a2dcb", "committedDate": "2021-12-31 12:29:48 +0800", "message": "HBASE-26407 Introduce a region replication sink for sinking WAL edits to secondary replicas directly (#3807)"}, {"oid": "9c037b1be7c35ed715ad471acb93b0d0084394e3", "committedDate": "2022-03-03 12:18:33 +0100", "message": "HBASE-26764 Implement generic exception support for TraceUtil methods over Callables and Runnables"}, {"oid": "b67c16a7636958970d37bfcd775fd55e8de98177", "committedDate": "2022-03-23 14:53:58 +0800", "message": "HBASE-26866 Shutdown WAL may abort region server (#4254)"}, {"oid": "9c8c9e7fbf8005ea89fa9b13d6d063b9f0240443", "committedDate": "2022-05-01 22:15:09 +0800", "message": "HBASE-26899 Run spotless:apply"}, {"oid": "313a37f7ac780a36b51064372868a31849df6727", "committedDate": "2022-06-02 23:55:23 +0800", "message": "HBASE-27046 The filenum in AbstractFSWAL should be monotone increasing (#4449)"}, {"oid": "a0a018d6c3baa53517e3ae56010b181aa7323662", "committedDate": "2022-06-20 23:48:33 +0800", "message": "HBASE-27128 when open archiveRetries totalLogSize calculation mistake (#4546)"}, {"oid": "acf144717bd85d2486cc33fbb0e3622b06c66717", "committedDate": "2022-07-19 10:00:43 +0800", "message": "HBASE-27220 Apply the spotless format change in HBASE-27208 to our code base"}, {"oid": "0ae42ddaee38315e10d7537ec2872a8263bd11c8", "committedDate": "2022-07-24 15:08:03 +0800", "message": "HBASE-27230 RegionServer should be aborted when WAL.sync throws Timeo\u2026 (#4641)"}, {"oid": "63cdd026f08cdde6ac0fde1342ffd050e8e02441", "committedDate": "2022-10-06 18:17:34 +0800", "message": "HBASE-27401 Clean up current broken 'n's in our javadoc (#4812)"}, {"oid": "655f19c64573a9a509ec8a657c6e0ef71337b23a", "committedDate": "2022-11-03 11:27:08 -0700", "message": "HBASE-26913 Replication Observability Framework (#4556)"}, {"oid": "e48c4485db8d9255510ee1cc9cf465e14de637d7", "committedDate": "2023-03-10 21:54:20 +0800", "message": "HBASE-27632 Refactor WAL.Reader implementation so we can better support WAL splitting and replication (#5055)"}, {"oid": "230fdc0b50578144d3e0916c33d4532bb8644763", "committedDate": "2023-03-24 14:17:39 +0800", "message": "HBASE-27732 NPE in TestBasicWALEntryStreamFSHLog.testEOFExceptionInOldWALsDirectory (#5119)"}, {"oid": "e2d8db6dfc1ab70e97560cc7bcaff10c45ba62c4", "committedDate": "2023-05-15 22:53:48 +0800", "message": "HBASE-27212 Implement a new table based replication queue storage and make the minimum replication system work (#4672)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxNjQ0NQ==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r503516445", "body": "This will be a flaky test. Please use the `waitFor` pattern already provided on the testing utility class.", "bodyText": "This will be a flaky test. Please use the waitFor pattern already provided on the testing utility class.", "bodyHTML": "<p dir=\"auto\">This will be a flaky test. Please use the <code>waitFor</code> pattern already provided on the testing utility class.</p>", "author": "ndimiduk", "createdAt": "2020-10-12T20:27:27Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/AbstractTestLogRolling.java", "diffHunk": "@@ -175,10 +175,15 @@ public void testLogRollOnNothingWritten() throws Exception {\n     }\n   }\n \n-  private void assertLogFileSize(WAL log) {\n+  private void assertLogFileSize(WAL log) throws InterruptedException {\n     if (AbstractFSWALProvider.getNumRolledLogFiles(log) > 0) {\n       assertTrue(AbstractFSWALProvider.getLogFileSize(log) > 0);\n     } else {\n+      for (int i = 0; i < 10; i++) {", "originalCommit": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "230fdc0b50578144d3e0916c33d4532bb8644763", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/AbstractTestLogRolling.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/AbstractTestLogRolling.java\nindex 6e2059d9f3..940dbebf61 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/AbstractTestLogRolling.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/AbstractTestLogRolling.java\n", "chunk": "@@ -175,19 +175,6 @@ public abstract class AbstractTestLogRolling  {\n     }\n   }\n \n-  private void assertLogFileSize(WAL log) throws InterruptedException {\n-    if (AbstractFSWALProvider.getNumRolledLogFiles(log) > 0) {\n-      assertTrue(AbstractFSWALProvider.getLogFileSize(log) > 0);\n-    } else {\n-      for (int i = 0; i < 10; i++) {\n-        if (AbstractFSWALProvider.getLogFileSize(log) != 0) {\n-          Thread.sleep(10);\n-        }\n-      }\n-      assertEquals(0, AbstractFSWALProvider.getLogFileSize(log));\n-    }\n-  }\n-\n   /**\n    * Tests that logs are deleted\n    */\n", "next_change": null}]}, "commits_in_main": [{"oid": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "message": "Merge commit", "committedDate": null}, {"oid": "d30cc270979dd2ec7d5e0ed12466f0cbd6797bba", "committedDate": "2021-07-19 09:29:08 +0800", "message": "HBASE-26081 Copy HBTU to hbase-testing-util, rename the HBTU related classes in hbase-server and mark them as IA.LimitedPrivate (#3478)"}, {"oid": "9c8c9e7fbf8005ea89fa9b13d6d063b9f0240443", "committedDate": "2022-05-01 22:15:09 +0800", "message": "HBASE-26899 Run spotless:apply"}, {"oid": "230fdc0b50578144d3e0916c33d4532bb8644763", "committedDate": "2023-03-24 14:17:39 +0800", "message": "HBASE-27732 NPE in TestBasicWALEntryStreamFSHLog.testEOFExceptionInOldWALsDirectory (#5119)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxNzUyNw==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r503517527", "body": "This will be a flaky test. Please use the `waitFor` pattern already provided on the testing utility class.", "bodyText": "This will be a flaky test. Please use the waitFor pattern already provided on the testing utility class.", "bodyHTML": "<p dir=\"auto\">This will be a flaky test. Please use the <code>waitFor</code> pattern already provided on the testing utility class.</p>", "author": "ndimiduk", "createdAt": "2020-10-12T20:30:05Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java", "diffHunk": "@@ -256,6 +273,27 @@ public void testLockupAroundBadAssignSync() throws IOException {\n           Threads.sleep(1);\n         }\n       }\n+\n+      try {\n+        dodgyWAL.throwAppendException = false;\n+        dodgyWAL.throwSyncException = false;\n+        dodgyWAL.throwArchiveException = true;\n+        Pair<Path, Long> pair = new Pair<Path, Long>();\n+        pair.setFirst(new Path(\"/a/b/\"));\n+        pair.setSecond(100L);\n+        dodgyWAL.archive(pair);\n+      } catch (Throwable ioe) {\n+      }\n+      while (true) {\n+        try {\n+          // one more abort needs to be called\n+          Mockito.verify(services, Mockito.atLeast(2)).abort(Mockito.anyString(),\n+            (Throwable) Mockito.anyObject());\n+          break;\n+        } catch (WantedButNotInvoked t) {\n+          Threads.sleep(1);", "originalCommit": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "bd7a78add5aaac090d6ea0b1951778fe24542b70", "changed_code": [{"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java\nindex fdf96dab87..476e3bd330 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java\n", "chunk": "@@ -287,8 +287,7 @@ public class TestFailedAppendAndSync {\n       while (true) {\n         try {\n           // one more abort needs to be called\n-          Mockito.verify(services, Mockito.atLeast(2)).abort(Mockito.anyString(),\n-            (Throwable) Mockito.anyObject());\n+          verify(services, atLeast(2)).abort(anyString(), any());\n           break;\n         } catch (WantedButNotInvoked t) {\n           Threads.sleep(1);\n", "next_change": null}, {"header": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java\nindex fdf96dab87..476e3bd330 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java\n", "chunk": "@@ -296,7 +295,7 @@ public class TestFailedAppendAndSync {\n       }\n     } finally {\n       // To stop logRoller, its server has to say it is stopped.\n-      Mockito.when(services.isStopped()).thenReturn(true);\n+      when(services.isStopped()).thenReturn(true);\n       if (logRoller != null) logRoller.close();\n       if (region != null) {\n         try {\n", "next_change": null}]}, "commits_in_main": [{"oid": "accd9750aa217c40e9db641c53905b8f4bb7e66d", "message": "Merge commit", "committedDate": null}, {"oid": "c98e993b238f527fb8cdc7f8a03a3555bb1dc74a", "committedDate": "2020-11-03 15:20:27 -0800", "message": "HBASE-25212 Optionally abort requests in progress after deciding a region should close (#2574)"}, {"oid": "d30cc270979dd2ec7d5e0ed12466f0cbd6797bba", "committedDate": "2021-07-19 09:29:08 +0800", "message": "HBASE-26081 Copy HBTU to hbase-testing-util, rename the HBTU related classes in hbase-server and mark them as IA.LimitedPrivate (#3478)"}, {"oid": "9c8c9e7fbf8005ea89fa9b13d6d063b9f0240443", "committedDate": "2022-05-01 22:15:09 +0800", "message": "HBASE-26899 Run spotless:apply"}, {"oid": "bd7a78add5aaac090d6ea0b1951778fe24542b70", "committedDate": "2023-01-29 11:29:51 +0800", "message": "HBASE-27598 Upgrade mockito to 4.x (#4998)"}]}]}