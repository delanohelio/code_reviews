{"pr_number": 491, "pr_title": "SO-3882: Template model and API", "pr_author": "nagyo", "pr_createdAt": "2020-02-20T07:44:38Z", "pr_url": "https://github.com/b2ihealthcare/snow-owl/pull/491", "merge_commit": "0c532142eb71aed1b22c5a11e6ef2b765b1f22ee", "timeline": [{"oid": "67a1a64e9a11b881b3e681b5ac4c7e53b8abbb23", "url": "https://github.com/b2ihealthcare/snow-owl/commit/67a1a64e9a11b881b3e681b5ac4c7e53b8abbb23", "message": "SO-3882: Add ability to define additional component deletion policies...\n\n... in implementations of TerminologyRepositoryConfigurers\n\nhttps://snowowl.atlassian.net/browse/SO-3882", "committedDate": "2020-01-31T13:38:42Z", "type": "commit"}, {"oid": "4999dad454430409228390e4184021c223d45fef", "url": "https://github.com/b2ihealthcare/snow-owl/commit/4999dad454430409228390e4184021c223d45fef", "message": "SO-3882: Fix license header\n\nhttps://snowowl.atlassian.net/browse/SO-3882", "committedDate": "2020-01-31T13:40:54Z", "type": "commit"}, {"oid": "31a81522ea1d937033d3b30e26f1e1ec4dc85c93", "url": "https://github.com/b2ihealthcare/snow-owl/commit/31a81522ea1d937033d3b30e26f1e1ec4dc85c93", "message": "SO-3882: Fix invalid type in deletion policy rule\n\nhttps://snowowl.atlassian.net/browse/SO-3882", "committedDate": "2020-01-31T15:20:34Z", "type": "commit"}, {"oid": "05ec2d137e4ceeb01fab0b564657ea1be2de0526", "url": "https://github.com/b2ihealthcare/snow-owl/commit/05ec2d137e4ceeb01fab0b564657ea1be2de0526", "message": "SO-3889: Move Charmatcher for invalid file name characters to FileUtils\n\nhttps://snowowl.atlassian.net/browse/SO-3889", "committedDate": "2020-02-03T16:31:05Z", "type": "commit"}, {"oid": "8d371e9d9654562a00bb7a0836ef61c6819b59c2", "url": "https://github.com/b2ihealthcare/snow-owl/commit/8d371e9d9654562a00bb7a0836ef61c6819b59c2", "message": "Merge remote-tracking branch 'origin/7.x' into feature/SO-3882_template_model", "committedDate": "2020-02-04T16:38:30Z", "type": "commit"}, {"oid": "cdf89f14831086bb3d6d1172444fb2c6c2757e4e", "url": "https://github.com/b2ihealthcare/snow-owl/commit/cdf89f14831086bb3d6d1172444fb2c6c2757e4e", "message": "Merge remote-tracking branch 'origin/7.x' into feature/SO-3882_template_model", "committedDate": "2020-02-05T14:35:20Z", "type": "commit"}, {"oid": "fd7433b857185c8a392386449e296160b64a1c1b", "url": "https://github.com/b2ihealthcare/snow-owl/commit/fd7433b857185c8a392386449e296160b64a1c1b", "message": "Merge remote-tracking branch 'origin/7.x' into feature/SO-3882_template_model", "committedDate": "2020-02-11T13:09:26Z", "type": "commit"}, {"oid": "2543af9dc92fdc63a0c75b7b45667feb11aa44ed", "url": "https://github.com/b2ihealthcare/snow-owl/commit/2543af9dc92fdc63a0c75b7b45667feb11aa44ed", "message": "[snomed] Fix permission level of SNOMED component create requests", "committedDate": "2020-02-11T16:58:01Z", "type": "commit"}, {"oid": "46969e364eafb7ef01745c9e118acb22791a0533", "url": "https://github.com/b2ihealthcare/snow-owl/commit/46969e364eafb7ef01745c9e118acb22791a0533", "message": "Merge remote-tracking branch 'origin/7.x' into feature/SO-3882_template_model", "committedDate": "2020-02-17T09:12:25Z", "type": "commit"}, {"oid": "dc0c07a9782b8ce7eb3ce6d87c45dbdbf0e3b8ac", "url": "https://github.com/b2ihealthcare/snow-owl/commit/dc0c07a9782b8ce7eb3ce6d87c45dbdbf0e3b8ac", "message": "[request] Remove unnecessary method override", "committedDate": "2020-02-18T13:03:33Z", "type": "commit"}, {"oid": "8e7895f292138a230cf9a9f6109743222749dab7", "url": "https://github.com/b2ihealthcare/snow-owl/commit/8e7895f292138a230cf9a9f6109743222749dab7", "message": "SO-3885: Allow SnomedBulkRequest instantiation outside of package\n\nhttps://snowowl.atlassian.net/browse/SO-3885", "committedDate": "2020-02-18T13:08:21Z", "type": "commit"}, {"oid": "7854ded5f0683ffb1bd605c9677eed5c0ac6354d", "url": "https://github.com/b2ihealthcare/snow-owl/commit/7854ded5f0683ffb1bd605c9677eed5c0ac6354d", "message": "Merge remote-tracking branch 'origin/7.x' into feature/SO-3882_template_model", "committedDate": "2020-02-18T14:50:11Z", "type": "commit"}, {"oid": "7204eed71a18d955e8fb794fc823d7983dfbdc09", "url": "https://github.com/b2ihealthcare/snow-owl/commit/7204eed71a18d955e8fb794fc823d7983dfbdc09", "message": "[commons] Extend constructor to find resources relative to class ...\n\n... in case the test bundle is a fragment", "committedDate": "2020-02-20T00:38:48Z", "type": "commit"}, {"oid": "4015d3ade280c49f6615550697f57024e188de21", "url": "https://github.com/b2ihealthcare/snow-owl/commit/4015d3ade280c49f6615550697f57024e188de21", "message": "Merge remote-tracking branch 'origin/7.x' into feature/SO-3882_template_model", "committedDate": "2020-02-20T07:39:01Z", "type": "commit"}, {"oid": "afd6c4cb73ea7ca8974670c1187e68b3d15c0057", "url": "https://github.com/b2ihealthcare/snow-owl/commit/afd6c4cb73ea7ca8974670c1187e68b3d15c0057", "message": "[datastore] Clean up CompositeComponentDeletionPolicy", "committedDate": "2020-02-20T07:47:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5NDM5OA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/491#discussion_r381894398", "body": "Probably doesn't make too much of a difference, but `Predicate<RevisionDocument>` occurrences could be replaced with `ComponentDeletionPolicy` to really drive the point home of this class being a _composite_ of other policies.", "bodyText": "Probably doesn't make too much of a difference, but Predicate<RevisionDocument> occurrences could be replaced with ComponentDeletionPolicy to really drive the point home of this class being a composite of other policies.", "bodyHTML": "<p dir=\"auto\">Probably doesn't make too much of a difference, but <code>Predicate&lt;RevisionDocument&gt;</code> occurrences could be replaced with <code>ComponentDeletionPolicy</code> to really drive the point home of this class being a <em>composite</em> of other policies.</p>", "author": "apeteri", "createdAt": "2020-02-20T09:56:59Z", "path": "core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/CompositeComponentDeletionPolicy.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.repository;\n+\n+import static com.google.common.collect.Maps.newHashMap;\n+\n+import java.util.Map;\n+import java.util.function.Predicate;\n+\n+import com.b2international.snowowl.datastore.index.RevisionDocument;\n+\n+/**\n+ * @since 7.4.0\n+ */\n+public class CompositeComponentDeletionPolicy implements ComponentDeletionPolicy {\n+\n+\tMap<Class<?>, Predicate<RevisionDocument>> deletionPolicies;", "originalCommit": "afd6c4cb73ea7ca8974670c1187e68b3d15c0057", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f83eb0401849e54704c3b7f07727de63f5ee10c1", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/CompositeComponentDeletionPolicy.java b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/CompositeComponentDeletionPolicy.java\nindex b9cb5ae0d6..61522e0c44 100644\n--- a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/CompositeComponentDeletionPolicy.java\n+++ b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/CompositeComponentDeletionPolicy.java\n", "chunk": "@@ -16,53 +16,53 @@\n package com.b2international.snowowl.core.repository;\n \n import static com.google.common.collect.Maps.newHashMap;\n+import static java.util.Collections.singletonMap;\n \n import java.util.Map;\n-import java.util.function.Predicate;\n \n import com.b2international.snowowl.datastore.index.RevisionDocument;\n+import com.google.common.collect.ImmutableMap;\n \n /**\n  * @since 7.4.0\n  */\n public class CompositeComponentDeletionPolicy implements ComponentDeletionPolicy {\n \n-\tMap<Class<?>, Predicate<RevisionDocument>> deletionPolicies;\n-\n-\tpublic static Builder builder() {\n-\t\treturn new Builder();\n+\tprivate Map<Class<?>, ComponentDeletionPolicy> deletionPolicies;\n+\t\n+\tpublic static CompositeComponentDeletionPolicy of(Class<?> clazz, ComponentDeletionPolicy policy) {\n+\t\treturn new CompositeComponentDeletionPolicy(singletonMap(clazz, policy));\n \t}\n-\n-\tpublic static final class Builder {\n-\n-\t\tMap<Class<?>, Predicate<RevisionDocument>> deletionPolicies = newHashMap();\n-\n-\t\tBuilder() {}\n-\n-\t\tpublic Builder withPolicy(final Class<?> clazz, final Predicate<RevisionDocument> predicate) {\n-\t\t\tthis.deletionPolicies.put(clazz, predicate);\n-\t\t\treturn this;\n-\t\t}\n-\n-\t\tpublic CompositeComponentDeletionPolicy build() {\n-\t\t\treturn new CompositeComponentDeletionPolicy(this.deletionPolicies);\n-\t\t}\n-\n+\t\n+\tpublic static CompositeComponentDeletionPolicy of(Map<Class<?>,ComponentDeletionPolicy> policies) {\n+\t\treturn new CompositeComponentDeletionPolicy(policies);\n \t}\n-\n-\tCompositeComponentDeletionPolicy(final Map<Class<?>, Predicate<RevisionDocument>> deletionPolicies) {\n-\t\tthis.deletionPolicies = deletionPolicies;\n+\t\n+\tCompositeComponentDeletionPolicy(Map<Class<?>, ComponentDeletionPolicy> policies) {\n+\t\tthis.deletionPolicies = policies;\n \t}\n-\n+\t\n+\tpublic CompositeComponentDeletionPolicy mergeWith(final CompositeComponentDeletionPolicy other) {\n+\t\tMap<Class<?>, ComponentDeletionPolicy> mergedPolicies = newHashMap(deletionPolicies);\n+\t\tother.getDeletionPolicies().forEach( (clazz, policy) -> mergedPolicies.putIfAbsent(clazz, policy));\n+\t\tthis.deletionPolicies = ImmutableMap.copyOf(mergedPolicies);\n+\t\treturn this;\n+\t}\n+\t\n \t@Override\n \tpublic boolean canDelete(final RevisionDocument revision) {\n+\t\t\n+\t\tif (deletionPolicies.containsKey(revision.getClass())) {\n+\t\t\treturn deletionPolicies.get(revision.getClass()).canDelete(revision);\n+\t\t}\n+\t\t\n \t\treturn deletionPolicies.entrySet().stream()\n \t\t\t\t.filter(entry -> entry.getKey().isInstance(revision))\n-\t\t\t\t.allMatch(entry -> entry.getValue().test(revision));\n+\t\t\t\t.allMatch(entry -> entry.getValue().canDelete(revision));\n \t}\n-\n-\tpublic Map<Class<?>, Predicate<RevisionDocument>> getDeletionPolicies() {\n+\t\n+\tpublic Map<Class<?>, ComponentDeletionPolicy> getDeletionPolicies() {\n \t\treturn deletionPolicies;\n \t}\n-\n+\t\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0c532142eb71aed1b22c5a11e6ef2b765b1f22ee", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/CompositeComponentDeletionPolicy.java b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/CompositeComponentDeletionPolicy.java\nindex b9cb5ae0d6..61522e0c44 100644\n--- a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/CompositeComponentDeletionPolicy.java\n+++ b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/CompositeComponentDeletionPolicy.java\n", "chunk": "@@ -16,53 +16,53 @@\n package com.b2international.snowowl.core.repository;\n \n import static com.google.common.collect.Maps.newHashMap;\n+import static java.util.Collections.singletonMap;\n \n import java.util.Map;\n-import java.util.function.Predicate;\n \n import com.b2international.snowowl.datastore.index.RevisionDocument;\n+import com.google.common.collect.ImmutableMap;\n \n /**\n  * @since 7.4.0\n  */\n public class CompositeComponentDeletionPolicy implements ComponentDeletionPolicy {\n \n-\tMap<Class<?>, Predicate<RevisionDocument>> deletionPolicies;\n-\n-\tpublic static Builder builder() {\n-\t\treturn new Builder();\n+\tprivate Map<Class<?>, ComponentDeletionPolicy> deletionPolicies;\n+\t\n+\tpublic static CompositeComponentDeletionPolicy of(Class<?> clazz, ComponentDeletionPolicy policy) {\n+\t\treturn new CompositeComponentDeletionPolicy(singletonMap(clazz, policy));\n \t}\n-\n-\tpublic static final class Builder {\n-\n-\t\tMap<Class<?>, Predicate<RevisionDocument>> deletionPolicies = newHashMap();\n-\n-\t\tBuilder() {}\n-\n-\t\tpublic Builder withPolicy(final Class<?> clazz, final Predicate<RevisionDocument> predicate) {\n-\t\t\tthis.deletionPolicies.put(clazz, predicate);\n-\t\t\treturn this;\n-\t\t}\n-\n-\t\tpublic CompositeComponentDeletionPolicy build() {\n-\t\t\treturn new CompositeComponentDeletionPolicy(this.deletionPolicies);\n-\t\t}\n-\n+\t\n+\tpublic static CompositeComponentDeletionPolicy of(Map<Class<?>,ComponentDeletionPolicy> policies) {\n+\t\treturn new CompositeComponentDeletionPolicy(policies);\n \t}\n-\n-\tCompositeComponentDeletionPolicy(final Map<Class<?>, Predicate<RevisionDocument>> deletionPolicies) {\n-\t\tthis.deletionPolicies = deletionPolicies;\n+\t\n+\tCompositeComponentDeletionPolicy(Map<Class<?>, ComponentDeletionPolicy> policies) {\n+\t\tthis.deletionPolicies = policies;\n \t}\n-\n+\t\n+\tpublic CompositeComponentDeletionPolicy mergeWith(final CompositeComponentDeletionPolicy other) {\n+\t\tMap<Class<?>, ComponentDeletionPolicy> mergedPolicies = newHashMap(deletionPolicies);\n+\t\tother.getDeletionPolicies().forEach( (clazz, policy) -> mergedPolicies.putIfAbsent(clazz, policy));\n+\t\tthis.deletionPolicies = ImmutableMap.copyOf(mergedPolicies);\n+\t\treturn this;\n+\t}\n+\t\n \t@Override\n \tpublic boolean canDelete(final RevisionDocument revision) {\n+\t\t\n+\t\tif (deletionPolicies.containsKey(revision.getClass())) {\n+\t\t\treturn deletionPolicies.get(revision.getClass()).canDelete(revision);\n+\t\t}\n+\t\t\n \t\treturn deletionPolicies.entrySet().stream()\n \t\t\t\t.filter(entry -> entry.getKey().isInstance(revision))\n-\t\t\t\t.allMatch(entry -> entry.getValue().test(revision));\n+\t\t\t\t.allMatch(entry -> entry.getValue().canDelete(revision));\n \t}\n-\n-\tpublic Map<Class<?>, Predicate<RevisionDocument>> getDeletionPolicies() {\n+\t\n+\tpublic Map<Class<?>, ComponentDeletionPolicy> getDeletionPolicies() {\n \t\treturn deletionPolicies;\n \t}\n-\n+\t\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "0c532142eb71aed1b22c5a11e6ef2b765b1f22ee", "message": "Merge commit", "committedDate": null}, {"oid": "2664960dc4046ac3948d35a30d69c9e4586e08c8", "committedDate": "2020-03-21 19:27:05 +0100", "message": "[core] move core.repository package from datastore to core"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5NjA1MQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/491#discussion_r381896051", "body": "If there is no \"is the instance class same or subclass of this class\"-kind of testing needed (where you are registering multiple applicable policies, eg. for `SnomedConceptDocument` \u2192 `SnomedComponentDocument` \u2192 `SnomedDocument`), lookup instead of iteration would be quicker:\r\n\r\n```java\r\nif (revision == null) { return false; }\r\nreturn deletionPolicies.get(revision.getClass()).test(revision);\r\n```", "bodyText": "If there is no \"is the instance class same or subclass of this class\"-kind of testing needed (where you are registering multiple applicable policies, eg. for SnomedConceptDocument \u2192 SnomedComponentDocument \u2192 SnomedDocument), lookup instead of iteration would be quicker:\nif (revision == null) { return false; }\nreturn deletionPolicies.get(revision.getClass()).test(revision);", "bodyHTML": "<p dir=\"auto\">If there is no \"is the instance class same or subclass of this class\"-kind of testing needed (where you are registering multiple applicable policies, eg. for <code>SnomedConceptDocument</code> \u2192 <code>SnomedComponentDocument</code> \u2192 <code>SnomedDocument</code>), lookup instead of iteration would be quicker:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (revision == null) { return false; }\nreturn deletionPolicies.get(revision.getClass()).test(revision);\"><pre><span class=\"pl-k\">if</span> (revision <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) { <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>; }\n<span class=\"pl-k\">return</span> deletionPolicies<span class=\"pl-k\">.</span>get(revision<span class=\"pl-k\">.</span>getClass())<span class=\"pl-k\">.</span>test(revision);</pre></div>", "author": "apeteri", "createdAt": "2020-02-20T09:59:56Z", "path": "core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/CompositeComponentDeletionPolicy.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.repository;\n+\n+import static com.google.common.collect.Maps.newHashMap;\n+\n+import java.util.Map;\n+import java.util.function.Predicate;\n+\n+import com.b2international.snowowl.datastore.index.RevisionDocument;\n+\n+/**\n+ * @since 7.4.0\n+ */\n+public class CompositeComponentDeletionPolicy implements ComponentDeletionPolicy {\n+\n+\tMap<Class<?>, Predicate<RevisionDocument>> deletionPolicies;\n+\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\tpublic static final class Builder {\n+\n+\t\tMap<Class<?>, Predicate<RevisionDocument>> deletionPolicies = newHashMap();\n+\n+\t\tBuilder() {}\n+\n+\t\tpublic Builder withPolicy(final Class<?> clazz, final Predicate<RevisionDocument> predicate) {\n+\t\t\tthis.deletionPolicies.put(clazz, predicate);\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic CompositeComponentDeletionPolicy build() {\n+\t\t\treturn new CompositeComponentDeletionPolicy(this.deletionPolicies);\n+\t\t}\n+\n+\t}\n+\n+\tCompositeComponentDeletionPolicy(final Map<Class<?>, Predicate<RevisionDocument>> deletionPolicies) {\n+\t\tthis.deletionPolicies = deletionPolicies;\n+\t}\n+\n+\t@Override\n+\tpublic boolean canDelete(final RevisionDocument revision) {\n+\t\treturn deletionPolicies.entrySet().stream()\n+\t\t\t\t.filter(entry -> entry.getKey().isInstance(revision))", "originalCommit": "afd6c4cb73ea7ca8974670c1187e68b3d15c0057", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4NDI5NQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/491#discussion_r382084295", "bodyText": "There is a need for those checks though, the main SNOMED deletion policy is applicable for all subtypes of SnomedDocument. I will add a fast evaluation part to the beginning of that method, that could make processing a bit faster.", "author": "nagyo", "createdAt": "2020-02-20T15:44:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5NjA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f83eb0401849e54704c3b7f07727de63f5ee10c1", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/CompositeComponentDeletionPolicy.java b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/CompositeComponentDeletionPolicy.java\nindex b9cb5ae0d6..61522e0c44 100644\n--- a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/CompositeComponentDeletionPolicy.java\n+++ b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/CompositeComponentDeletionPolicy.java\n", "chunk": "@@ -16,53 +16,53 @@\n package com.b2international.snowowl.core.repository;\n \n import static com.google.common.collect.Maps.newHashMap;\n+import static java.util.Collections.singletonMap;\n \n import java.util.Map;\n-import java.util.function.Predicate;\n \n import com.b2international.snowowl.datastore.index.RevisionDocument;\n+import com.google.common.collect.ImmutableMap;\n \n /**\n  * @since 7.4.0\n  */\n public class CompositeComponentDeletionPolicy implements ComponentDeletionPolicy {\n \n-\tMap<Class<?>, Predicate<RevisionDocument>> deletionPolicies;\n-\n-\tpublic static Builder builder() {\n-\t\treturn new Builder();\n+\tprivate Map<Class<?>, ComponentDeletionPolicy> deletionPolicies;\n+\t\n+\tpublic static CompositeComponentDeletionPolicy of(Class<?> clazz, ComponentDeletionPolicy policy) {\n+\t\treturn new CompositeComponentDeletionPolicy(singletonMap(clazz, policy));\n \t}\n-\n-\tpublic static final class Builder {\n-\n-\t\tMap<Class<?>, Predicate<RevisionDocument>> deletionPolicies = newHashMap();\n-\n-\t\tBuilder() {}\n-\n-\t\tpublic Builder withPolicy(final Class<?> clazz, final Predicate<RevisionDocument> predicate) {\n-\t\t\tthis.deletionPolicies.put(clazz, predicate);\n-\t\t\treturn this;\n-\t\t}\n-\n-\t\tpublic CompositeComponentDeletionPolicy build() {\n-\t\t\treturn new CompositeComponentDeletionPolicy(this.deletionPolicies);\n-\t\t}\n-\n+\t\n+\tpublic static CompositeComponentDeletionPolicy of(Map<Class<?>,ComponentDeletionPolicy> policies) {\n+\t\treturn new CompositeComponentDeletionPolicy(policies);\n \t}\n-\n-\tCompositeComponentDeletionPolicy(final Map<Class<?>, Predicate<RevisionDocument>> deletionPolicies) {\n-\t\tthis.deletionPolicies = deletionPolicies;\n+\t\n+\tCompositeComponentDeletionPolicy(Map<Class<?>, ComponentDeletionPolicy> policies) {\n+\t\tthis.deletionPolicies = policies;\n \t}\n-\n+\t\n+\tpublic CompositeComponentDeletionPolicy mergeWith(final CompositeComponentDeletionPolicy other) {\n+\t\tMap<Class<?>, ComponentDeletionPolicy> mergedPolicies = newHashMap(deletionPolicies);\n+\t\tother.getDeletionPolicies().forEach( (clazz, policy) -> mergedPolicies.putIfAbsent(clazz, policy));\n+\t\tthis.deletionPolicies = ImmutableMap.copyOf(mergedPolicies);\n+\t\treturn this;\n+\t}\n+\t\n \t@Override\n \tpublic boolean canDelete(final RevisionDocument revision) {\n+\t\t\n+\t\tif (deletionPolicies.containsKey(revision.getClass())) {\n+\t\t\treturn deletionPolicies.get(revision.getClass()).canDelete(revision);\n+\t\t}\n+\t\t\n \t\treturn deletionPolicies.entrySet().stream()\n \t\t\t\t.filter(entry -> entry.getKey().isInstance(revision))\n-\t\t\t\t.allMatch(entry -> entry.getValue().test(revision));\n+\t\t\t\t.allMatch(entry -> entry.getValue().canDelete(revision));\n \t}\n-\n-\tpublic Map<Class<?>, Predicate<RevisionDocument>> getDeletionPolicies() {\n+\t\n+\tpublic Map<Class<?>, ComponentDeletionPolicy> getDeletionPolicies() {\n \t\treturn deletionPolicies;\n \t}\n-\n+\t\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0c532142eb71aed1b22c5a11e6ef2b765b1f22ee", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/CompositeComponentDeletionPolicy.java b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/CompositeComponentDeletionPolicy.java\nindex b9cb5ae0d6..61522e0c44 100644\n--- a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/CompositeComponentDeletionPolicy.java\n+++ b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/CompositeComponentDeletionPolicy.java\n", "chunk": "@@ -16,53 +16,53 @@\n package com.b2international.snowowl.core.repository;\n \n import static com.google.common.collect.Maps.newHashMap;\n+import static java.util.Collections.singletonMap;\n \n import java.util.Map;\n-import java.util.function.Predicate;\n \n import com.b2international.snowowl.datastore.index.RevisionDocument;\n+import com.google.common.collect.ImmutableMap;\n \n /**\n  * @since 7.4.0\n  */\n public class CompositeComponentDeletionPolicy implements ComponentDeletionPolicy {\n \n-\tMap<Class<?>, Predicate<RevisionDocument>> deletionPolicies;\n-\n-\tpublic static Builder builder() {\n-\t\treturn new Builder();\n+\tprivate Map<Class<?>, ComponentDeletionPolicy> deletionPolicies;\n+\t\n+\tpublic static CompositeComponentDeletionPolicy of(Class<?> clazz, ComponentDeletionPolicy policy) {\n+\t\treturn new CompositeComponentDeletionPolicy(singletonMap(clazz, policy));\n \t}\n-\n-\tpublic static final class Builder {\n-\n-\t\tMap<Class<?>, Predicate<RevisionDocument>> deletionPolicies = newHashMap();\n-\n-\t\tBuilder() {}\n-\n-\t\tpublic Builder withPolicy(final Class<?> clazz, final Predicate<RevisionDocument> predicate) {\n-\t\t\tthis.deletionPolicies.put(clazz, predicate);\n-\t\t\treturn this;\n-\t\t}\n-\n-\t\tpublic CompositeComponentDeletionPolicy build() {\n-\t\t\treturn new CompositeComponentDeletionPolicy(this.deletionPolicies);\n-\t\t}\n-\n+\t\n+\tpublic static CompositeComponentDeletionPolicy of(Map<Class<?>,ComponentDeletionPolicy> policies) {\n+\t\treturn new CompositeComponentDeletionPolicy(policies);\n \t}\n-\n-\tCompositeComponentDeletionPolicy(final Map<Class<?>, Predicate<RevisionDocument>> deletionPolicies) {\n-\t\tthis.deletionPolicies = deletionPolicies;\n+\t\n+\tCompositeComponentDeletionPolicy(Map<Class<?>, ComponentDeletionPolicy> policies) {\n+\t\tthis.deletionPolicies = policies;\n \t}\n-\n+\t\n+\tpublic CompositeComponentDeletionPolicy mergeWith(final CompositeComponentDeletionPolicy other) {\n+\t\tMap<Class<?>, ComponentDeletionPolicy> mergedPolicies = newHashMap(deletionPolicies);\n+\t\tother.getDeletionPolicies().forEach( (clazz, policy) -> mergedPolicies.putIfAbsent(clazz, policy));\n+\t\tthis.deletionPolicies = ImmutableMap.copyOf(mergedPolicies);\n+\t\treturn this;\n+\t}\n+\t\n \t@Override\n \tpublic boolean canDelete(final RevisionDocument revision) {\n+\t\t\n+\t\tif (deletionPolicies.containsKey(revision.getClass())) {\n+\t\t\treturn deletionPolicies.get(revision.getClass()).canDelete(revision);\n+\t\t}\n+\t\t\n \t\treturn deletionPolicies.entrySet().stream()\n \t\t\t\t.filter(entry -> entry.getKey().isInstance(revision))\n-\t\t\t\t.allMatch(entry -> entry.getValue().test(revision));\n+\t\t\t\t.allMatch(entry -> entry.getValue().canDelete(revision));\n \t}\n-\n-\tpublic Map<Class<?>, Predicate<RevisionDocument>> getDeletionPolicies() {\n+\t\n+\tpublic Map<Class<?>, ComponentDeletionPolicy> getDeletionPolicies() {\n \t\treturn deletionPolicies;\n \t}\n-\n+\t\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "0c532142eb71aed1b22c5a11e6ef2b765b1f22ee", "message": "Merge commit", "committedDate": null}, {"oid": "2664960dc4046ac3948d35a30d69c9e4586e08c8", "committedDate": "2020-03-21 19:27:05 +0100", "message": "[core] move core.repository package from datastore to core"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkwMzgzNQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/491#discussion_r381903835", "body": "`compositePolicy.getDeletionPolicies().putIfAbsent(clazz, predicate);`\r\n\r\nIt's also a bit unexpected (for me) to see a builder on `CompositeComponentDeletionPolicy`, suggesting that the result is immutable, then proceed to pull a writable `Map` out via the get method and inject extra entries. A factory method could be added to the builder that starts with an existing `CompositeComponentDeletionPolicy`.", "bodyText": "compositePolicy.getDeletionPolicies().putIfAbsent(clazz, predicate);\nIt's also a bit unexpected (for me) to see a builder on CompositeComponentDeletionPolicy, suggesting that the result is immutable, then proceed to pull a writable Map out via the get method and inject extra entries. A factory method could be added to the builder that starts with an existing CompositeComponentDeletionPolicy.", "bodyHTML": "<p dir=\"auto\"><code>compositePolicy.getDeletionPolicies().putIfAbsent(clazz, predicate);</code></p>\n<p dir=\"auto\">It's also a bit unexpected (for me) to see a builder on <code>CompositeComponentDeletionPolicy</code>, suggesting that the result is immutable, then proceed to pull a writable <code>Map</code> out via the get method and inject extra entries. A factory method could be added to the builder that starts with an existing <code>CompositeComponentDeletionPolicy</code>.</p>", "author": "apeteri", "createdAt": "2020-02-20T10:14:08Z", "path": "core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/RepositoryBuilder.java", "diffHunk": "@@ -145,6 +145,20 @@ public Repository build(Environment env) {\n \t\t\t\tconfigurer.getAdditionalMappings().forEach(mappings::putMapping);\n \t\t\t});\n \t\t\n+\t\tif (deletionPolicy instanceof CompositeComponentDeletionPolicy) {\n+\t\t\t\n+\t\t\tCompositeComponentDeletionPolicy compositePolicy = (CompositeComponentDeletionPolicy) deletionPolicy;\n+\t\t\t\n+\t\t\trepositoryConfigurers.forEach(configurer -> {\n+\t\t\t\tconfigurer.getComponentDeletionPolicies().forEach( (clazz, predicate) -> {\n+\t\t\t\t\tif (!compositePolicy.getDeletionPolicies().containsKey(clazz)) {", "originalCommit": "afd6c4cb73ea7ca8974670c1187e68b3d15c0057", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f83eb0401849e54704c3b7f07727de63f5ee10c1", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/RepositoryBuilder.java b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/RepositoryBuilder.java\nindex fb77742035..12d009a2ae 100644\n--- a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/RepositoryBuilder.java\n+++ b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/RepositoryBuilder.java\n", "chunk": "@@ -146,17 +146,7 @@ public final class RepositoryBuilder {\n \t\t\t});\n \t\t\n \t\tif (deletionPolicy instanceof CompositeComponentDeletionPolicy) {\n-\t\t\t\n-\t\t\tCompositeComponentDeletionPolicy compositePolicy = (CompositeComponentDeletionPolicy) deletionPolicy;\n-\t\t\t\n-\t\t\trepositoryConfigurers.forEach(configurer -> {\n-\t\t\t\tconfigurer.getComponentDeletionPolicies().forEach( (clazz, predicate) -> {\n-\t\t\t\t\tif (!compositePolicy.getDeletionPolicies().containsKey(clazz)) {\n-\t\t\t\t\t\tcompositePolicy.getDeletionPolicies().put(clazz, predicate);\n-\t\t\t\t\t}\n-\t\t\t\t});\n-\t\t\t});\n-\t\t\t\n+\t\t\trepositoryConfigurers.forEach(configurer -> ((CompositeComponentDeletionPolicy) deletionPolicy).mergeWith(configurer.getComponentDeletionPolicy()));\n \t\t}\n \t\t\n \t\tfinal TerminologyRepository repository = new TerminologyRepository(repositoryId, mergeMaxResults, env, mappings, log);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0c532142eb71aed1b22c5a11e6ef2b765b1f22ee", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/RepositoryBuilder.java b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/RepositoryBuilder.java\nindex fb77742035..12d009a2ae 100644\n--- a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/RepositoryBuilder.java\n+++ b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/RepositoryBuilder.java\n", "chunk": "@@ -146,17 +146,7 @@ public final class RepositoryBuilder {\n \t\t\t});\n \t\t\n \t\tif (deletionPolicy instanceof CompositeComponentDeletionPolicy) {\n-\t\t\t\n-\t\t\tCompositeComponentDeletionPolicy compositePolicy = (CompositeComponentDeletionPolicy) deletionPolicy;\n-\t\t\t\n-\t\t\trepositoryConfigurers.forEach(configurer -> {\n-\t\t\t\tconfigurer.getComponentDeletionPolicies().forEach( (clazz, predicate) -> {\n-\t\t\t\t\tif (!compositePolicy.getDeletionPolicies().containsKey(clazz)) {\n-\t\t\t\t\t\tcompositePolicy.getDeletionPolicies().put(clazz, predicate);\n-\t\t\t\t\t}\n-\t\t\t\t});\n-\t\t\t});\n-\t\t\t\n+\t\t\trepositoryConfigurers.forEach(configurer -> ((CompositeComponentDeletionPolicy) deletionPolicy).mergeWith(configurer.getComponentDeletionPolicy()));\n \t\t}\n \t\t\n \t\tfinal TerminologyRepository repository = new TerminologyRepository(repositoryId, mergeMaxResults, env, mappings, log);\n", "next_change": {"commit": "5dc4fa65dd4b0a1c3b7c2c59cbca22825fd38cf0", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/RepositoryBuilder.java b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/RepositoryBuilder.java\nindex 12d009a2ae..ae77dcdcc2 100644\n--- a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/RepositoryBuilder.java\n+++ b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/RepositoryBuilder.java\n", "chunk": "@@ -145,15 +135,14 @@ public final class RepositoryBuilder {\n \t\t\t\tconfigurer.getAdditionalMappings().forEach(mappings::putMapping);\n \t\t\t});\n \t\t\n+\t\tfinal ComponentDeletionPolicy deletionPolicy = (ComponentDeletionPolicy) bindings.get(ComponentDeletionPolicy.class);\n \t\tif (deletionPolicy instanceof CompositeComponentDeletionPolicy) {\n \t\t\trepositoryConfigurers.forEach(configurer -> ((CompositeComponentDeletionPolicy) deletionPolicy).mergeWith(configurer.getComponentDeletionPolicy()));\n \t\t}\n \t\t\n \t\tfinal TerminologyRepository repository = new TerminologyRepository(repositoryId, mergeMaxResults, env, mappings, log);\n-\t\trepository.bind(VersioningRequestBuilder.class, versioningRequestBuilder);\n-\t\trepository.bind(ComponentDeletionPolicy.class, deletionPolicy);\n-\t\trepository.bind(ComponentRevisionConflictProcessor.class, componentRevisionConflictProcessor);\n-\t\trepository.bind(TerminologyComponents.class, terminologyComponents);\n+\t\t// attach all custom bindings\n+\t\trepository.bindAll(bindings);\n \t\trepository.activate();\n \t\trepository.service(RevisionIndex.class).hooks().addHook(hook);\n \t\tmanager.put(repositoryId, repository);\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "0c532142eb71aed1b22c5a11e6ef2b765b1f22ee", "message": "Merge commit", "committedDate": null}, {"oid": "5dc4fa65dd4b0a1c3b7c2c59cbca22825fd38cf0", "committedDate": "2020-03-05 19:55:47 +0100", "message": "[core] refactor TerminologyRepositoryPlugin initialization"}, {"oid": "d48e8dacb1a4402f263a3f7a97a0b330e2f9ecaa", "committedDate": "2020-03-19 12:35:31 +0100", "message": "Template authoring support (#515)"}, {"oid": "2664960dc4046ac3948d35a30d69c9e4586e08c8", "committedDate": "2020-03-21 19:27:05 +0100", "message": "[core] move core.repository package from datastore to core"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkwNTg3NA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/491#discussion_r381905874", "body": "This can also be hidden entirely behind the `ComponentDeletionPolicy` interface:\r\n\r\n```suggestion\r\n\tComponentDeletionPolicy getComponentDeletionPolicy();\r\n```", "bodyText": "This can also be hidden entirely behind the ComponentDeletionPolicy interface:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tMap<Class<?>, Predicate<RevisionDocument>> getComponentDeletionPolicies();\n          \n          \n            \n            \tComponentDeletionPolicy getComponentDeletionPolicy();", "bodyHTML": "<p dir=\"auto\">This can also be hidden entirely behind the <code>ComponentDeletionPolicy</code> interface:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t<span class=\"pl-k\"><span class=\"x x-first\">Map&lt;</span><span class=\"pl-k x\">Class&lt;?&gt;</span><span class=\"x\">, </span><span class=\"pl-k\"><span class=\"x\">Predicate&lt;</span><span class=\"pl-smi x\">RevisionDocument</span><span class=\"x\">&gt;</span></span><span class=\"x\">&gt;</span></span><span class=\"x x-last\"> getComponentDeletionPolicies</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-smi x x-first\">ComponentDeletionPolicy</span><span class=\"x x-last\"> getComponentDeletionPolicy</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "apeteri", "createdAt": "2020-02-20T10:17:47Z", "path": "core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/TerminologyRepositoryConfigurer.java", "diffHunk": "@@ -32,4 +36,9 @@\n \t */\n \tCollection<Class<?>> getAdditionalMappings();\n \n+\t/**\n+\t * @return additional component deletion policies for subtypes of RevisionDocument\n+\t */\n+\tMap<Class<?>, Predicate<RevisionDocument>> getComponentDeletionPolicies();", "originalCommit": "afd6c4cb73ea7ca8974670c1187e68b3d15c0057", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4NzI3MQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/491#discussion_r382087271", "bodyText": "But we need that class information to be able to select the appropriate policy for a given type, don't we?", "author": "nagyo", "createdAt": "2020-02-20T15:49:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkwNTg3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwMDU4OA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/491#discussion_r382100588", "bodyText": "My mistake; wanted to say CompositeComponentDeletionPolicy. This ties into my previous comment, this could be done if there would be a way to merge multiple composites into one, eg. via a CompositeComponentDeletionPolicy#builder(CompositeComponentDeletionPolicy) or CompositeComponentDeletionPolicy.Builder#withPolicies(CompositeComponentDeletionPolicy) method.", "author": "apeteri", "createdAt": "2020-02-20T16:09:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkwNTg3NA=="}], "type": "inlineReview", "revised_code": {"commit": "f83eb0401849e54704c3b7f07727de63f5ee10c1", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/TerminologyRepositoryConfigurer.java b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/TerminologyRepositoryConfigurer.java\nindex f6271a25cf..42c5c6c8c7 100644\n--- a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/TerminologyRepositoryConfigurer.java\n+++ b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/TerminologyRepositoryConfigurer.java\n", "chunk": "@@ -39,6 +35,6 @@ public interface TerminologyRepositoryConfigurer {\n \t/**\n \t * @return additional component deletion policies for subtypes of RevisionDocument\n \t */\n-\tMap<Class<?>, Predicate<RevisionDocument>> getComponentDeletionPolicies();\n+\tCompositeComponentDeletionPolicy getComponentDeletionPolicy();\n \t\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0c532142eb71aed1b22c5a11e6ef2b765b1f22ee", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/TerminologyRepositoryConfigurer.java b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/TerminologyRepositoryConfigurer.java\nindex f6271a25cf..42c5c6c8c7 100644\n--- a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/TerminologyRepositoryConfigurer.java\n+++ b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/TerminologyRepositoryConfigurer.java\n", "chunk": "@@ -39,6 +35,6 @@ public interface TerminologyRepositoryConfigurer {\n \t/**\n \t * @return additional component deletion policies for subtypes of RevisionDocument\n \t */\n-\tMap<Class<?>, Predicate<RevisionDocument>> getComponentDeletionPolicies();\n+\tCompositeComponentDeletionPolicy getComponentDeletionPolicy();\n \t\n }\n", "next_change": {"commit": "d48e8dacb1a4402f263a3f7a97a0b330e2f9ecaa", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/TerminologyRepositoryConfigurer.java b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/TerminologyRepositoryConfigurer.java\nindex 42c5c6c8c7..029722e4a4 100644\n--- a/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/TerminologyRepositoryConfigurer.java\n+++ b/core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/repository/TerminologyRepositoryConfigurer.java\n", "chunk": "@@ -30,11 +33,19 @@ public interface TerminologyRepositoryConfigurer {\n \t/**\n \t * @return additional mappings that should be managed and configured for use within the configured repository.\n \t */\n-\tCollection<Class<?>> getAdditionalMappings();\n+\tdefault Collection<Class<?>> getAdditionalMappings() {\n+\t\treturn List.of();\n+\t}\n+\n+\t/**\n+\t * @return additional terminology components that should be handled by the configured repository.\n+\t */\n+\tdefault Collection<Class<? extends IComponent>> getAdditionalTerminologyComponents() {\n+\t\treturn List.of();\n+\t}\n \n \t/**\n \t * @return additional component deletion policies for subtypes of RevisionDocument\n \t */\n \tCompositeComponentDeletionPolicy getComponentDeletionPolicy();\n-\t\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "0c532142eb71aed1b22c5a11e6ef2b765b1f22ee", "message": "Merge commit", "committedDate": null}, {"oid": "d48e8dacb1a4402f263a3f7a97a0b330e2f9ecaa", "committedDate": "2020-03-19 12:35:31 +0100", "message": "Template authoring support (#515)"}, {"oid": "2664960dc4046ac3948d35a30d69c9e4586e08c8", "committedDate": "2020-03-21 19:27:05 +0100", "message": "[core] move core.repository package from datastore to core"}]}, {"oid": "f83eb0401849e54704c3b7f07727de63f5ee10c1", "url": "https://github.com/b2ihealthcare/snow-owl/commit/f83eb0401849e54704c3b7f07727de63f5ee10c1", "message": "SO-3882: Refactor CompositeComponentDeletionPolicy\n\n- use ComponentDeletionPolicy instead of Predicate\n- add mergeWith method to combine multiple composite policies\n\nhttps://snowowl.atlassian.net/browse/SO-3882", "committedDate": "2020-02-20T17:10:45Z", "type": "commit"}]}