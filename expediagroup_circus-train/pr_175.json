{"pr_number": 175, "pr_title": "S3S3Copier thread updates", "pr_author": "KenFigueiredo", "pr_createdAt": "2020-03-12T22:40:15Z", "pr_url": "https://github.com/ExpediaGroup/circus-train/pull/175", "timeline": [{"oid": "bb70d85f401ef3f9871e0846828529cb6b5c6438", "url": "https://github.com/ExpediaGroup/circus-train/commit/bb70d85f401ef3f9871e0846828529cb6b5c6438", "message": "testing s3 copier assume-role issues", "committedDate": "2020-03-05T22:43:14Z", "type": "commit"}, {"oid": "ce0f2a1dffe03829cef71e1a961b97f55efc72fe", "url": "https://github.com/ExpediaGroup/circus-train/commit/ce0f2a1dffe03829cef71e1a961b97f55efc72fe", "message": "refactor s3 retry logic to be job based vs all or nothing. This should catch errors sooner", "committedDate": "2020-03-09T17:30:03Z", "type": "commit"}, {"oid": "bb76993aa15b8bc598e1894f968d39fa39394e46", "url": "https://github.com/ExpediaGroup/circus-train/commit/bb76993aa15b8bc598e1894f968d39fa39394e46", "message": "defensive coding against cred failure", "committedDate": "2020-03-09T17:36:33Z", "type": "commit"}, {"oid": "2f988f373fab0bb657bd0b8bb2dd29805e771838", "url": "https://github.com/ExpediaGroup/circus-train/commit/2f988f373fab0bb657bd0b8bb2dd29805e771838", "message": "revert some code", "committedDate": "2020-03-09T18:15:54Z", "type": "commit"}, {"oid": "966b6cf20546537ee84ad99146e305732093cc09", "url": "https://github.com/ExpediaGroup/circus-train/commit/966b6cf20546537ee84ad99146e305732093cc09", "message": "update log comments", "committedDate": "2020-03-09T18:18:43Z", "type": "commit"}, {"oid": "085740a991b10d682c93d558ccd985c664a7ee63", "url": "https://github.com/ExpediaGroup/circus-train/commit/085740a991b10d682c93d558ccd985c664a7ee63", "message": "revert whitespace", "committedDate": "2020-03-09T18:20:04Z", "type": "commit"}, {"oid": "ad63df289ccf31bbae3e45f0fe7fe9320e481c92", "url": "https://github.com/ExpediaGroup/circus-train/commit/ad63df289ccf31bbae3e45f0fe7fe9320e481c92", "message": "set to minimum duration", "committedDate": "2020-03-09T18:24:59Z", "type": "commit"}, {"oid": "f620ce60f399cc9e8042edb6edb5a2d2d64b18f0", "url": "https://github.com/ExpediaGroup/circus-train/commit/f620ce60f399cc9e8042edb6edb5a2d2d64b18f0", "message": "wip", "committedDate": "2020-03-09T22:02:33Z", "type": "commit"}, {"oid": "001cd306bb49e0c4f63e905666475bbd2d6bd74f", "url": "https://github.com/ExpediaGroup/circus-train/commit/001cd306bb49e0c4f63e905666475bbd2d6bd74f", "message": "debugging wip", "committedDate": "2020-03-11T16:09:30Z", "type": "commit"}, {"oid": "9bd36e7c466856ff33492848b05d7e272ff3cce6", "url": "https://github.com/ExpediaGroup/circus-train/commit/9bd36e7c466856ff33492848b05d7e272ff3cce6", "message": "optimize some threadpooling logic", "committedDate": "2020-03-11T22:14:31Z", "type": "commit"}, {"oid": "50279ff0eb8c2ec7a3f665509eee9256154d2eec", "url": "https://github.com/ExpediaGroup/circus-train/commit/50279ff0eb8c2ec7a3f665509eee9256154d2eec", "message": "update readme & changelog", "committedDate": "2020-03-12T21:38:28Z", "type": "commit"}, {"oid": "a4abfa2fd36a15b8493c230a5686d834327f409d", "url": "https://github.com/ExpediaGroup/circus-train/commit/a4abfa2fd36a15b8493c230a5686d834327f409d", "message": "add transfermanagerFactoryTest", "committedDate": "2020-03-12T22:39:56Z", "type": "commit"}, {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236", "url": "https://github.com/ExpediaGroup/circus-train/commit/e8454abc8598f24e2a7e682da8ea0eed2f8db236", "message": "reset untouched files", "committedDate": "2020-03-12T22:42:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwMjQxNw==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392102417", "body": "```suggestion\r\n  private static final int DEFAULT_MAX_CREDENTIALS_DURATION_SECONDS = TimeUnit.HOURS.toSeconds(12);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n          \n          \n            \n              private static final int DEFAULT_MAX_CREDENTIALS_DURATION_SECONDS = TimeUnit.HOURS.toSeconds(12);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"pl-c1 x x-first x-last\">DEFAULT_CREDENTIALS_DURATION</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1 x x-first\">12</span><span class=\"x\"> </span><span class=\"pl-k x\">*</span><span class=\"x\"> </span><span class=\"pl-c1 x\">60</span><span class=\"x\"> </span><span class=\"pl-k x\">*</span><span class=\"x\"> </span><span class=\"pl-c1 x\">60</span><span class=\"x\">; </span><span class=\"pl-c\"><span class=\"pl-c x\">//</span><span class=\"x x-last\"> max duration in seconds for assumed role credentials</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"pl-c1 x x-first x-last\">DEFAULT_MAX_CREDENTIALS_DURATION_SECONDS</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi x x-first\">TimeUnit</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x\">HOURS</span></span><span class=\"pl-k x\">.</span><span class=\"x\">toSeconds(</span><span class=\"pl-c1 x\">12</span><span class=\"x x-last\">);</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teabot", "createdAt": "2020-03-13T09:01:02Z", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,57 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials", "originalCommit": "e8454abc8598f24e2a7e682da8ea0eed2f8db236", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df860e16c709278b091bec93d7b99119f376f6f5", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex 60617d4e..4cac0118 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -28,7 +30,7 @@ public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n   public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n-  private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n   private final Configuration conf;\n   private STSAssumeRoleSessionCredentialsProvider credProvider;\n", "next_change": {"commit": "facd8ee9770645e7fa733c73b1bd201f6c5f0d70", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex 4cac0118..8568d2a4 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -25,50 +24,37 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n-  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n+  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n+  private AWSCredentials credentials;\n   private final Configuration conf;\n-  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n-  private void initializeCredProvider() {\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    int credDuration = conf.getInt(ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n-\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n-\n-    // STSAssumeRoleSessionCredentialsProvider should auto refresh its creds in the background.\n-    this.credProvider = new STSAssumeRoleSessionCredentialsProvider\n-        .Builder(roleArn, \"ct-assume-role-session\")\n-        .withRoleSessionDurationSeconds(credDuration)\n-        .build();\n-  }\n-\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (this.credProvider == null) {\n-      initializeCredProvider();\n+    if (credentials == null) {\n+      refresh();\n     }\n-\n-    return this.credProvider.getCredentials();\n+    return credentials;\n   }\n \n   @Override\n   public void refresh() {\n-    if (this.credProvider == null) {\n-      initializeCredProvider();\n-    }\n+    checkNotNull(conf, \"conf is required\");\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n \n-    this.credProvider.refresh();\n+    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n+    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n   }\n \n }\n", "next_change": {"commit": "cdd768f2d4285bcc4ac91c44d496953503faf9bf", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex 8568d2a4..c8a4b60d 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -24,37 +25,49 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleSessionDurationSeconds\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credentialsProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredentialProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+\n+    int roleSessionDuration = conf.getInt(ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    // STSAssumeRoleSessionCredentialsProvider should auto refresh its credentials in the background.\n+    this.credentialsProvider = new STSAssumeRoleSessionCredentialsProvider\n+        .Builder(roleArn, \"ct-assume-role-session\")\n+        .withRoleSessionDurationSeconds(roleSessionDuration)\n+        .build();\n+  }\n+\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (credentials == null) {\n-      refresh();\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n     }\n-    return credentials;\n+    return this.credentialsProvider.getCredentials();\n   }\n \n   @Override\n   public void refresh() {\n-    checkNotNull(conf, \"conf is required\");\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n+    }\n \n-    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n-    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n+    this.credentialsProvider.refresh();\n   }\n \n }\n", "next_change": {"commit": "ad9b5824b5d90b7eb7fc8ded420a12a0cd34541f", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex c8a4b60..8568d2a 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -25,49 +24,37 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  public static final String ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleSessionDurationSeconds\";\n-  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n+  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n+  private AWSCredentials credentials;\n   private final Configuration conf;\n-  private STSAssumeRoleSessionCredentialsProvider credentialsProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n-  private void initializeCredentialProvider() {\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n-\n-    int roleSessionDuration = conf.getInt(ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n-\n-    // STSAssumeRoleSessionCredentialsProvider should auto refresh its credentials in the background.\n-    this.credentialsProvider = new STSAssumeRoleSessionCredentialsProvider\n-        .Builder(roleArn, \"ct-assume-role-session\")\n-        .withRoleSessionDurationSeconds(roleSessionDuration)\n-        .build();\n-  }\n-\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (this.credentialsProvider == null) {\n-      initializeCredentialProvider();\n+    if (credentials == null) {\n+      refresh();\n     }\n-    return this.credentialsProvider.getCredentials();\n+    return credentials;\n   }\n \n   @Override\n   public void refresh() {\n-    if (this.credentialsProvider == null) {\n-      initializeCredentialProvider();\n-    }\n+    checkNotNull(conf, \"conf is required\");\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n \n-    this.credentialsProvider.refresh();\n+    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n+    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n   }\n \n }\n", "next_change": {"commit": "8662d42a40f054c204f3bde5b2674c50674236ec", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex 8568d2a..c8a4b60 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -24,37 +25,49 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleSessionDurationSeconds\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credentialsProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredentialProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+\n+    int roleSessionDuration = conf.getInt(ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    // STSAssumeRoleSessionCredentialsProvider should auto refresh its credentials in the background.\n+    this.credentialsProvider = new STSAssumeRoleSessionCredentialsProvider\n+        .Builder(roleArn, \"ct-assume-role-session\")\n+        .withRoleSessionDurationSeconds(roleSessionDuration)\n+        .build();\n+  }\n+\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (credentials == null) {\n-      refresh();\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n     }\n-    return credentials;\n+    return this.credentialsProvider.getCredentials();\n   }\n \n   @Override\n   public void refresh() {\n-    checkNotNull(conf, \"conf is required\");\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n+    }\n \n-    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n-    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n+    this.credentialsProvider.refresh();\n   }\n \n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwMzUxMA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392103510", "body": "```suggestion\r\n    return MapUtils.getIntValue(copierOptions, Keys.ASSUME_ROLE_CREDENTIAL_DURATION.keyName(), TimeUnit.HOURS.toSeconds(12));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return MapUtils.getIntValue(copierOptions, Keys.ASSUME_ROLE_CREDENTIAL_DURATION.keyName(), 12 * 60 * 60);\n          \n          \n            \n                return MapUtils.getIntValue(copierOptions, Keys.ASSUME_ROLE_CREDENTIAL_DURATION.keyName(), TimeUnit.HOURS.toSeconds(12));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">MapUtils</span><span class=\"pl-k\">.</span>getIntValue(copierOptions, <span class=\"pl-smi\">Keys</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ASSUME_ROLE_CREDENTIAL_DURATION</span><span class=\"pl-k\">.</span>keyName(), <span class=\"pl-c1 x x-first\">12</span><span class=\"x\"> </span><span class=\"pl-k x\">*</span><span class=\"x\"> </span><span class=\"pl-c1 x\">60</span><span class=\"x\"> </span><span class=\"pl-k x\">*</span><span class=\"x\"> </span><span class=\"pl-c1 x x-last\">60</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">MapUtils</span><span class=\"pl-k\">.</span>getIntValue(copierOptions, <span class=\"pl-smi\">Keys</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ASSUME_ROLE_CREDENTIAL_DURATION</span><span class=\"pl-k\">.</span>keyName(), <span class=\"pl-smi x x-first\">TimeUnit</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x\">HOURS</span></span><span class=\"pl-k x\">.</span><span class=\"x\">toSeconds(</span><span class=\"pl-c1 x\">12</span><span class=\"x x-last\">)</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teabot", "createdAt": "2020-03-13T09:03:29Z", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "diffHunk": "@@ -131,6 +148,10 @@ public String getAssumedRole() {\n     return MapUtils.getString(copierOptions, Keys.ASSUME_ROLE.keyName(), null);\n   }\n \n+  public int getAssumedRoleCredentialDuration() {\n+    return MapUtils.getIntValue(copierOptions, Keys.ASSUME_ROLE_CREDENTIAL_DURATION.keyName(), 12 * 60 * 60);", "originalCommit": "e8454abc8598f24e2a7e682da8ea0eed2f8db236", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df860e16c709278b091bec93d7b99119f376f6f5", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex 892bdf35..a3c1bad4 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -149,7 +151,8 @@ public class S3S3CopierOptions {\n   }\n \n   public int getAssumedRoleCredentialDuration() {\n-    return MapUtils.getIntValue(copierOptions, Keys.ASSUME_ROLE_CREDENTIAL_DURATION.keyName(), 12 * 60 * 60);\n+    return MapUtils.getIntValue(copierOptions, Keys.ASSUME_ROLE_CREDENTIAL_DURATION.keyName(),\n+        (int) TimeUnit.HOURS.toSeconds(12));\n   }\n \n   public int getMaxCopyAttempts() {\n", "next_change": {"commit": "cbf14913f902d359f243386fbd18baab592d2d2e", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex a3c1bad..7c91234 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -150,11 +145,6 @@ public class S3S3CopierOptions {\n     return MapUtils.getString(copierOptions, Keys.ASSUME_ROLE.keyName(), null);\n   }\n \n-  public int getAssumedRoleCredentialDuration() {\n-    return MapUtils.getIntValue(copierOptions, Keys.ASSUME_ROLE_CREDENTIAL_DURATION.keyName(),\n-        (int) TimeUnit.HOURS.toSeconds(12));\n-  }\n-\n   public int getMaxCopyAttempts() {\n     Integer maxCopyAttempts = MapUtils.getInteger(copierOptions, Keys.MAX_COPY_ATTEMPTS.keyName(), 3);\n     return maxCopyAttempts < 1 ? 3 : maxCopyAttempts;\n", "next_change": {"commit": "cdd768f2d4285bcc4ac91c44d496953503faf9bf", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex 7c91234..2908b00 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -145,6 +150,11 @@ public class S3S3CopierOptions {\n     return MapUtils.getString(copierOptions, Keys.ASSUME_ROLE.keyName(), null);\n   }\n \n+  public int getAssumedRoleCredentialDuration() {\n+    return MapUtils.getIntValue(copierOptions, Keys.ASSUME_ROLE_SESSION_DURATION_SECONDS.keyName(),\n+        (int) TimeUnit.HOURS.toSeconds(12));\n+  }\n+\n   public int getMaxCopyAttempts() {\n     Integer maxCopyAttempts = MapUtils.getInteger(copierOptions, Keys.MAX_COPY_ATTEMPTS.keyName(), 3);\n     return maxCopyAttempts < 1 ? 3 : maxCopyAttempts;\n", "next_change": {"commit": "ad9b5824b5d90b7eb7fc8ded420a12a0cd34541f", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex 2908b00..5794611 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -150,11 +144,6 @@ public class S3S3CopierOptions {\n     return MapUtils.getString(copierOptions, Keys.ASSUME_ROLE.keyName(), null);\n   }\n \n-  public int getAssumedRoleCredentialDuration() {\n-    return MapUtils.getIntValue(copierOptions, Keys.ASSUME_ROLE_SESSION_DURATION_SECONDS.keyName(),\n-        (int) TimeUnit.HOURS.toSeconds(12));\n-  }\n-\n   public int getMaxCopyAttempts() {\n     Integer maxCopyAttempts = MapUtils.getInteger(copierOptions, Keys.MAX_COPY_ATTEMPTS.keyName(), 3);\n     return maxCopyAttempts < 1 ? 3 : maxCopyAttempts;\n", "next_change": {"commit": "8662d42a40f054c204f3bde5b2674c50674236ec", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex 5794611..2908b00 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -144,6 +150,11 @@ public class S3S3CopierOptions {\n     return MapUtils.getString(copierOptions, Keys.ASSUME_ROLE.keyName(), null);\n   }\n \n+  public int getAssumedRoleCredentialDuration() {\n+    return MapUtils.getIntValue(copierOptions, Keys.ASSUME_ROLE_SESSION_DURATION_SECONDS.keyName(),\n+        (int) TimeUnit.HOURS.toSeconds(12));\n+  }\n+\n   public int getMaxCopyAttempts() {\n     Integer maxCopyAttempts = MapUtils.getInteger(copierOptions, Keys.MAX_COPY_ATTEMPTS.keyName(), 3);\n     return maxCopyAttempts < 1 ? 3 : maxCopyAttempts;\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNDcxMg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392104712", "body": "What does `-1` mean in this context? If it for example means 'unbounded', then assign to suitably named constant:\r\n```\r\n   private static final int UNBOUNDED = -1;\r\n   ...\r\n   return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), UNBOUNDED);\r\n```\r\nNote, I use unbounded as an example - I don't know what `-1` means in this context - which is precisely the problem this addresses.", "bodyText": "What does -1 mean in this context? If it for example means 'unbounded', then assign to suitably named constant:\n   private static final int UNBOUNDED = -1;\n   ...\n   return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), UNBOUNDED);\n\nNote, I use unbounded as an example - I don't know what -1 means in this context - which is precisely the problem this addresses.", "bodyHTML": "<p dir=\"auto\">What does <code>-1</code> mean in this context? If it for example means 'unbounded', then assign to suitably named constant:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"   private static final int UNBOUNDED = -1;\n   ...\n   return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), UNBOUNDED);\"><pre><code>   private static final int UNBOUNDED = -1;\n   ...\n   return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), UNBOUNDED);\n</code></pre></div>\n<p dir=\"auto\">Note, I use unbounded as an example - I don't know what <code>-1</code> means in this context - which is precisely the problem this addresses.</p>", "author": "teabot", "createdAt": "2020-03-13T09:06:09Z", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "diffHunk": "@@ -86,6 +95,14 @@ public S3S3CopierOptions(Map<String, Object> copierOptions) {\n     this.copierOptions = new HashMap<>(copierOptions);\n   }\n \n+  public void overrideMaxThreadPoolSize(int newMax) {\n+    copierOptions.put(Keys.MAX_THREAD_POOL_SIZE.keyName(), newMax);\n+  }\n+\n+  public int getMaxThreadPoolSize() {\n+    return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), -1);", "originalCommit": "e8454abc8598f24e2a7e682da8ea0eed2f8db236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4MTUzNA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392281534", "bodyText": "-1 in this context means to default to using the default pool size for transferManager. Took that suggestion though and updated the code accordingly to get rid of any magic number checks. New var name is USE_DEFAULT_THREAD_POOL_MAX", "author": "KenFigueiredo", "createdAt": "2020-03-13T15:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNDcxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNzkzOQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392337939", "bodyText": "removed as per @patduin comment of just defaulting to 10 w/ our own executor.", "author": "KenFigueiredo", "createdAt": "2020-03-13T16:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNDcxMg=="}], "type": "inlineReview", "revised_code": {"commit": "df860e16c709278b091bec93d7b99119f376f6f5", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex 892bdf35..a3c1bad4 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -100,7 +102,7 @@ public class S3S3CopierOptions {\n   }\n \n   public int getMaxThreadPoolSize() {\n-    return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), -1);\n+    return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), USE_DEFAULT_MAX_THREAD_POOL);\n   }\n \n   public Long getMultipartCopyThreshold() {\n", "next_change": {"commit": "6b7356b0958d6ec301ced55981b6811b0d2b53f5", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex a3c1bad4..cdcfffcd 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -102,7 +102,7 @@ public class S3S3CopierOptions {\n   }\n \n   public int getMaxThreadPoolSize() {\n-    return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), USE_DEFAULT_MAX_THREAD_POOL);\n+    return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), USE_DEFAULT_THREAD_POOL_MAX);\n   }\n \n   public Long getMultipartCopyThreshold() {\n", "next_change": {"commit": "3115dd44c3414fc422b7b1e38daafa46e5299120", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex cdcfffc..485b08f 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -102,7 +96,7 @@ public class S3S3CopierOptions {\n   }\n \n   public int getMaxThreadPoolSize() {\n-    return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), USE_DEFAULT_THREAD_POOL_MAX);\n+    return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), 10);\n   }\n \n   public Long getMultipartCopyThreshold() {\n", "next_change": {"commit": "f5ab2b3666fda97d8ce3da90142c8acad1a20855", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex 485b08f..5794611 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -91,12 +91,12 @@ public class S3S3CopierOptions {\n     this.copierOptions = new HashMap<>(copierOptions);\n   }\n \n-  public void overrideMaxThreadPoolSize(int newMax) {\n-    copierOptions.put(Keys.MAX_THREAD_POOL_SIZE.keyName(), newMax);\n+  public void setMaxThreadPoolSize(int maxThreadPoolSize) {\n+    copierOptions.put(Keys.MAX_THREAD_POOL_SIZE.keyName(), maxThreadPoolSize);\n   }\n \n   public int getMaxThreadPoolSize() {\n-    return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), 10);\n+    return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), DEFAULT_MAX_THREAD_POOL_SIZE);\n   }\n \n   public Long getMultipartCopyThreshold() {\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0MTAzMQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392241031", "body": "`Amount` of time", "bodyText": "Amount of time", "bodyHTML": "<p dir=\"auto\"><code>Amount</code> of time</p>", "author": "barnharts4", "createdAt": "2020-03-13T13:53:44Z", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "diffHunk": "@@ -60,10 +60,19 @@\n      * access to the target.\n      */\n     ASSUME_ROLE(\"assume-role\"),\n+    /**\n+     * Number of time (in seconds) that the AWS SDK should assume the given role for.", "originalCommit": "e8454abc8598f24e2a7e682da8ea0eed2f8db236", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df860e16c709278b091bec93d7b99119f376f6f5", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex 892bdf35..a3c1bad4 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -61,7 +62,7 @@ public class S3S3CopierOptions {\n      */\n     ASSUME_ROLE(\"assume-role\"),\n     /**\n-     * Number of time (in seconds) that the AWS SDK should assume the given role for.\n+     * Amount of time (in seconds) that the AWS SDK should assume the given role for.\n      * Defaults to 12 hours.\n      */\n     ASSUME_ROLE_CREDENTIAL_DURATION(\"assume-role-credential-duration\"),\n", "next_change": {"commit": "cbf14913f902d359f243386fbd18baab592d2d2e", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex a3c1bad..7c91234 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -61,11 +61,6 @@ public class S3S3CopierOptions {\n      * access to the target.\n      */\n     ASSUME_ROLE(\"assume-role\"),\n-    /**\n-     * Amount of time (in seconds) that the AWS SDK should assume the given role for.\n-     * Defaults to 12 hours.\n-     */\n-    ASSUME_ROLE_CREDENTIAL_DURATION(\"assume-role-credential-duration\"),\n     /**\n      * Number of copy attempts to allow when copying from S3 to S3. Default value is 3.\n      */\n", "next_change": {"commit": "3115dd44c3414fc422b7b1e38daafa46e5299120", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex 7c91234..485b08f 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -66,7 +66,7 @@ public class S3S3CopierOptions {\n      */\n     MAX_COPY_ATTEMPTS(\"s3s3-retry-max-copy-attempts\"),\n     /**\n-     * Max number of threads to use for the transferManager thread pool. Defaults internally to 10 if unset on the client.\n+     * Max number of threads to use for the transferManager thread pool. Default value is 10.\n      */\n     MAX_THREAD_POOL_SIZE(\"s3s3-max-thread-pool-size\");\n \n", "next_change": null}]}}]}}]}}, {"oid": "df860e16c709278b091bec93d7b99119f376f6f5", "url": "https://github.com/ExpediaGroup/circus-train/commit/df860e16c709278b091bec93d7b99119f376f6f5", "message": "fix the nits", "committedDate": "2020-03-13T14:54:24Z", "type": "commit"}, {"oid": "6b7356b0958d6ec301ced55981b6811b0d2b53f5", "url": "https://github.com/ExpediaGroup/circus-train/commit/6b7356b0958d6ec301ced55981b6811b0d2b53f5", "message": "default_max_thread_pool -> default_thread_pool_max", "committedDate": "2020-03-13T15:01:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4MzAxMA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392283010", "body": "perhaps default this to 10 (as per readme)  and remove the if check for -1 in the TransferManagerFactory. Just always set our own. ", "bodyText": "perhaps default this to 10 (as per readme)  and remove the if check for -1 in the TransferManagerFactory. Just always set our own.", "bodyHTML": "<p dir=\"auto\">perhaps default this to 10 (as per readme)  and remove the if check for -1 in the TransferManagerFactory. Just always set our own.</p>", "author": "patduin", "createdAt": "2020-03-13T15:02:31Z", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "diffHunk": "@@ -77,6 +87,7 @@ public String keyName() {\n   }\n \n   private final Map<String, Object> copierOptions;\n+  public static final int USE_DEFAULT_MAX_THREAD_POOL = -1;", "originalCommit": "df860e16c709278b091bec93d7b99119f376f6f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "facd8ee9770645e7fa733c73b1bd201f6c5f0d70", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex a3c1bad4..cdcfffcd 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -87,7 +87,7 @@ public class S3S3CopierOptions {\n   }\n \n   private final Map<String, Object> copierOptions;\n-  public static final int USE_DEFAULT_MAX_THREAD_POOL = -1;\n+  public static final int USE_DEFAULT_THREAD_POOL_MAX = -1;\n \n   public S3S3CopierOptions() {\n     copierOptions = new HashMap<>();\n", "next_change": {"commit": "3115dd44c3414fc422b7b1e38daafa46e5299120", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex cdcfffcd..485b08f6 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -87,7 +82,6 @@ public class S3S3CopierOptions {\n   }\n \n   private final Map<String, Object> copierOptions;\n-  public static final int USE_DEFAULT_THREAD_POOL_MAX = -1;\n \n   public S3S3CopierOptions() {\n     copierOptions = new HashMap<>();\n", "next_change": {"commit": "f5ab2b3666fda97d8ce3da90142c8acad1a20855", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex 485b08f..5794611 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -82,6 +81,7 @@ public class S3S3CopierOptions {\n   }\n \n   private final Map<String, Object> copierOptions;\n+  private final int DEFAULT_MAX_THREAD_POOL_SIZE = 10;\n \n   public S3S3CopierOptions() {\n     copierOptions = new HashMap<>();\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4Mzg2NA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392283864", "body": "just always set our own executor, will be easier to read the code.", "bodyText": "just always set our own executor, will be easier to read the code.", "bodyHTML": "<p dir=\"auto\">just always set our own executor, will be easier to read the code.</p>", "author": "patduin", "createdAt": "2020-03-13T15:03:51Z", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java", "diffHunk": "@@ -26,12 +31,19 @@\n @Component\n public class TransferManagerFactory {\n \n+  private static final Logger LOG = LoggerFactory.getLogger(TransferManagerFactory.class);\n+\n   public TransferManager newInstance(AmazonS3 targetS3Client, S3S3CopierOptions s3s3CopierOptions) {\n-    return TransferManagerBuilder\n-        .standard()\n+    TransferManagerBuilder builder = TransferManagerBuilder.standard()\n         .withMultipartCopyThreshold(s3s3CopierOptions.getMultipartCopyThreshold())\n         .withMultipartCopyPartSize(s3s3CopierOptions.getMultipartCopyPartSize())\n-        .withS3Client(targetS3Client)\n-        .build();\n+        .withS3Client(targetS3Client);\n+\n+    if (s3s3CopierOptions.getMaxThreadPoolSize() != S3S3CopierOptions.USE_DEFAULT_THREAD_POOL_MAX) {", "originalCommit": "6b7356b0958d6ec301ced55981b6811b0d2b53f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3115dd44c3414fc422b7b1e38daafa46e5299120", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java\nindex 05d4820..f38e2f3 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java\n", "chunk": "@@ -34,16 +36,14 @@ public class TransferManagerFactory {\n   private static final Logger LOG = LoggerFactory.getLogger(TransferManagerFactory.class);\n \n   public TransferManager newInstance(AmazonS3 targetS3Client, S3S3CopierOptions s3s3CopierOptions) {\n-    TransferManagerBuilder builder = TransferManagerBuilder.standard()\n+    LOG\n+        .debug(\"Initializing transfer manager with {} threads.\", s3s3CopierOptions.getMaxThreadPoolSize());\n+\n+    return TransferManagerBuilder.standard()\n         .withMultipartCopyThreshold(s3s3CopierOptions.getMultipartCopyThreshold())\n         .withMultipartCopyPartSize(s3s3CopierOptions.getMultipartCopyPartSize())\n-        .withS3Client(targetS3Client);\n-\n-    if (s3s3CopierOptions.getMaxThreadPoolSize() != S3S3CopierOptions.USE_DEFAULT_THREAD_POOL_MAX) {\n-      LOG.info(\"Initializing thread pool with {} threads\", s3s3CopierOptions.getMaxThreadPoolSize());\n-      builder = builder.withExecutorFactory(() -> Executors.newFixedThreadPool(s3s3CopierOptions.getMaxThreadPoolSize()));\n-    }\n-\n-    return builder.build();\n+        .withExecutorFactory(() -> Executors.newFixedThreadPool(s3s3CopierOptions.getMaxThreadPoolSize()))\n+        .withS3Client(targetS3Client)\n+        .build();\n   }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NDUyNw==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392284527", "body": "remove the if just set the default.", "bodyText": "remove the if just set the default.", "bodyHTML": "<p dir=\"auto\">remove the if just set the default.</p>", "author": "patduin", "createdAt": "2020-03-13T15:04:58Z", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java", "diffHunk": "@@ -103,13 +103,27 @@ private String regionForUri(AmazonS3 client, AmazonS3URI uri) {\n     return bucketRegion;\n   }\n \n+  private AmazonS3ClientBuilder applyClientConfigurations(AmazonS3ClientBuilder builder, S3S3CopierOptions s3s3CopierOptions) {\n+    ClientConfiguration clientConfiguration = new ClientConfiguration();\n+\n+    if (s3s3CopierOptions.getMaxThreadPoolSize() != S3S3CopierOptions.USE_DEFAULT_THREAD_POOL_MAX) {", "originalCommit": "6b7356b0958d6ec301ced55981b6811b0d2b53f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3115dd44c3414fc422b7b1e38daafa46e5299120", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\nindex 2c9e1e2..9978944 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n", "chunk": "@@ -105,11 +105,7 @@ public class JceksAmazonS3ClientFactory implements AmazonS3ClientFactory {\n \n   private AmazonS3ClientBuilder applyClientConfigurations(AmazonS3ClientBuilder builder, S3S3CopierOptions s3s3CopierOptions) {\n     ClientConfiguration clientConfiguration = new ClientConfiguration();\n-\n-    if (s3s3CopierOptions.getMaxThreadPoolSize() != S3S3CopierOptions.USE_DEFAULT_THREAD_POOL_MAX) {\n-      clientConfiguration.withMaxConnections(s3s3CopierOptions.getMaxThreadPoolSize());\n-    }\n-\n+    clientConfiguration.withMaxConnections(s3s3CopierOptions.getMaxThreadPoolSize());\n     return builder.withClientConfiguration(clientConfiguration);\n   }\n \n", "next_change": {"commit": "463fbb2bcd1a68b0e6f0f8888584e21254079199", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\nindex 9978944..2b0a10e 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n", "chunk": "@@ -111,8 +112,7 @@ public class JceksAmazonS3ClientFactory implements AmazonS3ClientFactory {\n \n   private AmazonS3 newGlobalInstance(\n       S3S3CopierOptions s3s3CopierOptions,\n-      HadoopAWSCredentialProviderChain credentialsChain\n-  ) {\n+      HadoopAWSCredentialProviderChain credentialsChain) {\n     AmazonS3ClientBuilder builder = AmazonS3ClientBuilder\n         .standard()\n         .withForceGlobalBucketAccessEnabled(Boolean.TRUE)\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3MjAwNg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392272006", "body": "```suggestion\r\n  private STSAssumeRoleSessionCredentialsProvider credentialsProvider;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private STSAssumeRoleSessionCredentialsProvider credProvider;\n          \n          \n            \n              private STSAssumeRoleSessionCredentialsProvider credentialsProvider;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">private</span> <span class=\"pl-smi\">STSAssumeRoleSessionCredentialsProvider</span> <span class=\"x x-first x-last\">credProvider</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">private</span> <span class=\"pl-smi\">STSAssumeRoleSessionCredentialsProvider</span> <span class=\"x x-first x-last\">credentialsProvider</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "massdosage", "createdAt": "2020-03-13T14:44:58Z", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,57 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credProvider;", "originalCommit": "e8454abc8598f24e2a7e682da8ea0eed2f8db236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MjUwMw==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392372503", "bodyText": "moved to #176", "author": "KenFigueiredo", "createdAt": "2020-03-13T17:32:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3MjAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "df860e16c709278b091bec93d7b99119f376f6f5", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex 60617d4e..4cac0118 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -28,7 +30,7 @@ public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n   public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n-  private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n   private final Configuration conf;\n   private STSAssumeRoleSessionCredentialsProvider credProvider;\n", "next_change": {"commit": "facd8ee9770645e7fa733c73b1bd201f6c5f0d70", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex 4cac0118..8568d2a4 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -25,50 +24,37 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n-  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n+  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n+  private AWSCredentials credentials;\n   private final Configuration conf;\n-  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n-  private void initializeCredProvider() {\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    int credDuration = conf.getInt(ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n-\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n-\n-    // STSAssumeRoleSessionCredentialsProvider should auto refresh its creds in the background.\n-    this.credProvider = new STSAssumeRoleSessionCredentialsProvider\n-        .Builder(roleArn, \"ct-assume-role-session\")\n-        .withRoleSessionDurationSeconds(credDuration)\n-        .build();\n-  }\n-\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (this.credProvider == null) {\n-      initializeCredProvider();\n+    if (credentials == null) {\n+      refresh();\n     }\n-\n-    return this.credProvider.getCredentials();\n+    return credentials;\n   }\n \n   @Override\n   public void refresh() {\n-    if (this.credProvider == null) {\n-      initializeCredProvider();\n-    }\n+    checkNotNull(conf, \"conf is required\");\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n \n-    this.credProvider.refresh();\n+    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n+    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n   }\n \n }\n", "next_change": {"commit": "cdd768f2d4285bcc4ac91c44d496953503faf9bf", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex 8568d2a4..c8a4b60d 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -24,37 +25,49 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleSessionDurationSeconds\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credentialsProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredentialProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+\n+    int roleSessionDuration = conf.getInt(ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    // STSAssumeRoleSessionCredentialsProvider should auto refresh its credentials in the background.\n+    this.credentialsProvider = new STSAssumeRoleSessionCredentialsProvider\n+        .Builder(roleArn, \"ct-assume-role-session\")\n+        .withRoleSessionDurationSeconds(roleSessionDuration)\n+        .build();\n+  }\n+\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (credentials == null) {\n-      refresh();\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n     }\n-    return credentials;\n+    return this.credentialsProvider.getCredentials();\n   }\n \n   @Override\n   public void refresh() {\n-    checkNotNull(conf, \"conf is required\");\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n+    }\n \n-    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n-    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n+    this.credentialsProvider.refresh();\n   }\n \n }\n", "next_change": {"commit": "ad9b5824b5d90b7eb7fc8ded420a12a0cd34541f", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex c8a4b60..8568d2a 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -25,49 +24,37 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  public static final String ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleSessionDurationSeconds\";\n-  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n+  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n+  private AWSCredentials credentials;\n   private final Configuration conf;\n-  private STSAssumeRoleSessionCredentialsProvider credentialsProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n-  private void initializeCredentialProvider() {\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n-\n-    int roleSessionDuration = conf.getInt(ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n-\n-    // STSAssumeRoleSessionCredentialsProvider should auto refresh its credentials in the background.\n-    this.credentialsProvider = new STSAssumeRoleSessionCredentialsProvider\n-        .Builder(roleArn, \"ct-assume-role-session\")\n-        .withRoleSessionDurationSeconds(roleSessionDuration)\n-        .build();\n-  }\n-\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (this.credentialsProvider == null) {\n-      initializeCredentialProvider();\n+    if (credentials == null) {\n+      refresh();\n     }\n-    return this.credentialsProvider.getCredentials();\n+    return credentials;\n   }\n \n   @Override\n   public void refresh() {\n-    if (this.credentialsProvider == null) {\n-      initializeCredentialProvider();\n-    }\n+    checkNotNull(conf, \"conf is required\");\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n \n-    this.credentialsProvider.refresh();\n+    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n+    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n   }\n \n }\n", "next_change": {"commit": "8662d42a40f054c204f3bde5b2674c50674236ec", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex 8568d2a..c8a4b60 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -24,37 +25,49 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleSessionDurationSeconds\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credentialsProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredentialProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+\n+    int roleSessionDuration = conf.getInt(ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    // STSAssumeRoleSessionCredentialsProvider should auto refresh its credentials in the background.\n+    this.credentialsProvider = new STSAssumeRoleSessionCredentialsProvider\n+        .Builder(roleArn, \"ct-assume-role-session\")\n+        .withRoleSessionDurationSeconds(roleSessionDuration)\n+        .build();\n+  }\n+\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (credentials == null) {\n-      refresh();\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n     }\n-    return credentials;\n+    return this.credentialsProvider.getCredentials();\n   }\n \n   @Override\n   public void refresh() {\n-    checkNotNull(conf, \"conf is required\");\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n+    }\n \n-    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n-    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n+    this.credentialsProvider.refresh();\n   }\n \n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3MjYyOQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392272629", "body": "Move this to line 42, there's no point getting the duration if this is going to fail.", "bodyText": "Move this to line 42, there's no point getting the duration if this is going to fail.", "bodyHTML": "<p dir=\"auto\">Move this to line 42, there's no point getting the duration if this is going to fail.</p>", "author": "massdosage", "createdAt": "2020-03-13T14:45:52Z", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,57 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    int credDuration = conf.getInt(ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    checkArgument(StringUtils.isNotEmpty(roleArn),", "originalCommit": "e8454abc8598f24e2a7e682da8ea0eed2f8db236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MjQ1MA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392372450", "bodyText": "moved to #176", "author": "KenFigueiredo", "createdAt": "2020-03-13T17:31:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3MjYyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "facd8ee9770645e7fa733c73b1bd201f6c5f0d70", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex 60617d4..8568d2a 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -23,50 +24,37 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n-  private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n+  private AWSCredentials credentials;\n   private final Configuration conf;\n-  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n-  private void initializeCredProvider() {\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    int credDuration = conf.getInt(ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n-\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n-\n-    // STSAssumeRoleSessionCredentialsProvider should auto refresh its creds in the background.\n-    this.credProvider = new STSAssumeRoleSessionCredentialsProvider\n-        .Builder(roleArn, \"ct-assume-role-session\")\n-        .withRoleSessionDurationSeconds(credDuration)\n-        .build();\n-  }\n-\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (this.credProvider == null) {\n-      initializeCredProvider();\n+    if (credentials == null) {\n+      refresh();\n     }\n-\n-    return this.credProvider.getCredentials();\n+    return credentials;\n   }\n \n   @Override\n   public void refresh() {\n-    if (this.credProvider == null) {\n-      initializeCredProvider();\n-    }\n+    checkNotNull(conf, \"conf is required\");\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n \n-    this.credProvider.refresh();\n+    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n+    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n   }\n \n }\n", "next_change": {"commit": "cdd768f2d4285bcc4ac91c44d496953503faf9bf", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex 8568d2a4..c8a4b60d 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -24,37 +25,49 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleSessionDurationSeconds\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credentialsProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredentialProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+\n+    int roleSessionDuration = conf.getInt(ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    // STSAssumeRoleSessionCredentialsProvider should auto refresh its credentials in the background.\n+    this.credentialsProvider = new STSAssumeRoleSessionCredentialsProvider\n+        .Builder(roleArn, \"ct-assume-role-session\")\n+        .withRoleSessionDurationSeconds(roleSessionDuration)\n+        .build();\n+  }\n+\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (credentials == null) {\n-      refresh();\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n     }\n-    return credentials;\n+    return this.credentialsProvider.getCredentials();\n   }\n \n   @Override\n   public void refresh() {\n-    checkNotNull(conf, \"conf is required\");\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n+    }\n \n-    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n-    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n+    this.credentialsProvider.refresh();\n   }\n \n }\n", "next_change": {"commit": "ad9b5824b5d90b7eb7fc8ded420a12a0cd34541f", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex c8a4b60..8568d2a 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -25,49 +24,37 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  public static final String ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleSessionDurationSeconds\";\n-  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n+  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n+  private AWSCredentials credentials;\n   private final Configuration conf;\n-  private STSAssumeRoleSessionCredentialsProvider credentialsProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n-  private void initializeCredentialProvider() {\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n-\n-    int roleSessionDuration = conf.getInt(ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n-\n-    // STSAssumeRoleSessionCredentialsProvider should auto refresh its credentials in the background.\n-    this.credentialsProvider = new STSAssumeRoleSessionCredentialsProvider\n-        .Builder(roleArn, \"ct-assume-role-session\")\n-        .withRoleSessionDurationSeconds(roleSessionDuration)\n-        .build();\n-  }\n-\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (this.credentialsProvider == null) {\n-      initializeCredentialProvider();\n+    if (credentials == null) {\n+      refresh();\n     }\n-    return this.credentialsProvider.getCredentials();\n+    return credentials;\n   }\n \n   @Override\n   public void refresh() {\n-    if (this.credentialsProvider == null) {\n-      initializeCredentialProvider();\n-    }\n+    checkNotNull(conf, \"conf is required\");\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n \n-    this.credentialsProvider.refresh();\n+    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n+    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n   }\n \n }\n", "next_change": {"commit": "8662d42a40f054c204f3bde5b2674c50674236ec", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex 8568d2a..c8a4b60 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -24,37 +25,49 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleSessionDurationSeconds\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credentialsProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredentialProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+\n+    int roleSessionDuration = conf.getInt(ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    // STSAssumeRoleSessionCredentialsProvider should auto refresh its credentials in the background.\n+    this.credentialsProvider = new STSAssumeRoleSessionCredentialsProvider\n+        .Builder(roleArn, \"ct-assume-role-session\")\n+        .withRoleSessionDurationSeconds(roleSessionDuration)\n+        .build();\n+  }\n+\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (credentials == null) {\n-      refresh();\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n     }\n-    return credentials;\n+    return this.credentialsProvider.getCredentials();\n   }\n \n   @Override\n   public void refresh() {\n-    checkNotNull(conf, \"conf is required\");\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n+    }\n \n-    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n-    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n+    this.credentialsProvider.refresh();\n   }\n \n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3Mzc5Nw==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392273797", "body": "```suggestion\r\n  private void initializeCredentialProvider() {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private void initializeCredProvider() {\n          \n          \n            \n              private void initializeCredentialProvider() {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">initializeCredProvider</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">initializeCredentialProvider</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "massdosage", "createdAt": "2020-03-13T14:47:48Z", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,57 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredProvider() {", "originalCommit": "e8454abc8598f24e2a7e682da8ea0eed2f8db236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MjM2NQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392372365", "bodyText": "moved to #176", "author": "KenFigueiredo", "createdAt": "2020-03-13T17:31:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3Mzc5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "facd8ee9770645e7fa733c73b1bd201f6c5f0d70", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex 60617d4..8568d2a 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -23,50 +24,37 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n-  private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n+  private AWSCredentials credentials;\n   private final Configuration conf;\n-  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n-  private void initializeCredProvider() {\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    int credDuration = conf.getInt(ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n-\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n-\n-    // STSAssumeRoleSessionCredentialsProvider should auto refresh its creds in the background.\n-    this.credProvider = new STSAssumeRoleSessionCredentialsProvider\n-        .Builder(roleArn, \"ct-assume-role-session\")\n-        .withRoleSessionDurationSeconds(credDuration)\n-        .build();\n-  }\n-\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (this.credProvider == null) {\n-      initializeCredProvider();\n+    if (credentials == null) {\n+      refresh();\n     }\n-\n-    return this.credProvider.getCredentials();\n+    return credentials;\n   }\n \n   @Override\n   public void refresh() {\n-    if (this.credProvider == null) {\n-      initializeCredProvider();\n-    }\n+    checkNotNull(conf, \"conf is required\");\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n \n-    this.credProvider.refresh();\n+    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n+    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n   }\n \n }\n", "next_change": {"commit": "cdd768f2d4285bcc4ac91c44d496953503faf9bf", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex 8568d2a4..c8a4b60d 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -24,37 +25,49 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleSessionDurationSeconds\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credentialsProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredentialProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+\n+    int roleSessionDuration = conf.getInt(ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    // STSAssumeRoleSessionCredentialsProvider should auto refresh its credentials in the background.\n+    this.credentialsProvider = new STSAssumeRoleSessionCredentialsProvider\n+        .Builder(roleArn, \"ct-assume-role-session\")\n+        .withRoleSessionDurationSeconds(roleSessionDuration)\n+        .build();\n+  }\n+\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (credentials == null) {\n-      refresh();\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n     }\n-    return credentials;\n+    return this.credentialsProvider.getCredentials();\n   }\n \n   @Override\n   public void refresh() {\n-    checkNotNull(conf, \"conf is required\");\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n+    }\n \n-    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n-    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n+    this.credentialsProvider.refresh();\n   }\n \n }\n", "next_change": {"commit": "ad9b5824b5d90b7eb7fc8ded420a12a0cd34541f", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex c8a4b60..8568d2a 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -25,49 +24,37 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  public static final String ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleSessionDurationSeconds\";\n-  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n+  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n+  private AWSCredentials credentials;\n   private final Configuration conf;\n-  private STSAssumeRoleSessionCredentialsProvider credentialsProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n-  private void initializeCredentialProvider() {\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n-\n-    int roleSessionDuration = conf.getInt(ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n-\n-    // STSAssumeRoleSessionCredentialsProvider should auto refresh its credentials in the background.\n-    this.credentialsProvider = new STSAssumeRoleSessionCredentialsProvider\n-        .Builder(roleArn, \"ct-assume-role-session\")\n-        .withRoleSessionDurationSeconds(roleSessionDuration)\n-        .build();\n-  }\n-\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (this.credentialsProvider == null) {\n-      initializeCredentialProvider();\n+    if (credentials == null) {\n+      refresh();\n     }\n-    return this.credentialsProvider.getCredentials();\n+    return credentials;\n   }\n \n   @Override\n   public void refresh() {\n-    if (this.credentialsProvider == null) {\n-      initializeCredentialProvider();\n-    }\n+    checkNotNull(conf, \"conf is required\");\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n \n-    this.credentialsProvider.refresh();\n+    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n+    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n   }\n \n }\n", "next_change": {"commit": "8662d42a40f054c204f3bde5b2674c50674236ec", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex 8568d2a..c8a4b60 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -24,37 +25,49 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleSessionDurationSeconds\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credentialsProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredentialProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+\n+    int roleSessionDuration = conf.getInt(ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    // STSAssumeRoleSessionCredentialsProvider should auto refresh its credentials in the background.\n+    this.credentialsProvider = new STSAssumeRoleSessionCredentialsProvider\n+        .Builder(roleArn, \"ct-assume-role-session\")\n+        .withRoleSessionDurationSeconds(roleSessionDuration)\n+        .build();\n+  }\n+\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (credentials == null) {\n-      refresh();\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n     }\n-    return credentials;\n+    return this.credentialsProvider.getCredentials();\n   }\n \n   @Override\n   public void refresh() {\n-    checkNotNull(conf, \"conf is required\");\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n+    }\n \n-    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n-    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n+    this.credentialsProvider.refresh();\n   }\n \n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NTEwMA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392275100", "body": "I'm a bit confused why there are so many other changes to this class when the only change I can really see that is necessary is making this value configurable instead of a hardcoded value?", "bodyText": "I'm a bit confused why there are so many other changes to this class when the only change I can really see that is necessary is making this value configurable instead of a hardcoded value?", "bodyHTML": "<p dir=\"auto\">I'm a bit confused why there are so many other changes to this class when the only change I can really see that is necessary is making this value configurable instead of a hardcoded value?</p>", "author": "massdosage", "createdAt": "2020-03-13T14:49:52Z", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,57 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    int credDuration = conf.getInt(ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+\n+    // STSAssumeRoleSessionCredentialsProvider should auto refresh its creds in the background.\n+    this.credProvider = new STSAssumeRoleSessionCredentialsProvider\n+        .Builder(roleArn, \"ct-assume-role-session\")\n+        .withRoleSessionDurationSeconds(credDuration)", "originalCommit": "e8454abc8598f24e2a7e682da8ea0eed2f8db236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MjMzNA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392372334", "bodyText": "moved to #176", "author": "KenFigueiredo", "createdAt": "2020-03-13T17:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NTEwMA=="}], "type": "inlineReview", "revised_code": {"commit": "facd8ee9770645e7fa733c73b1bd201f6c5f0d70", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex 60617d4..8568d2a 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -23,50 +24,37 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n-  private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n+  private AWSCredentials credentials;\n   private final Configuration conf;\n-  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n-  private void initializeCredProvider() {\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    int credDuration = conf.getInt(ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n-\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n-\n-    // STSAssumeRoleSessionCredentialsProvider should auto refresh its creds in the background.\n-    this.credProvider = new STSAssumeRoleSessionCredentialsProvider\n-        .Builder(roleArn, \"ct-assume-role-session\")\n-        .withRoleSessionDurationSeconds(credDuration)\n-        .build();\n-  }\n-\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (this.credProvider == null) {\n-      initializeCredProvider();\n+    if (credentials == null) {\n+      refresh();\n     }\n-\n-    return this.credProvider.getCredentials();\n+    return credentials;\n   }\n \n   @Override\n   public void refresh() {\n-    if (this.credProvider == null) {\n-      initializeCredProvider();\n-    }\n+    checkNotNull(conf, \"conf is required\");\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n \n-    this.credProvider.refresh();\n+    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n+    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n   }\n \n }\n", "next_change": {"commit": "cdd768f2d4285bcc4ac91c44d496953503faf9bf", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex 8568d2a4..c8a4b60d 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -24,37 +25,49 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleSessionDurationSeconds\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credentialsProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredentialProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+\n+    int roleSessionDuration = conf.getInt(ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    // STSAssumeRoleSessionCredentialsProvider should auto refresh its credentials in the background.\n+    this.credentialsProvider = new STSAssumeRoleSessionCredentialsProvider\n+        .Builder(roleArn, \"ct-assume-role-session\")\n+        .withRoleSessionDurationSeconds(roleSessionDuration)\n+        .build();\n+  }\n+\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (credentials == null) {\n-      refresh();\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n     }\n-    return credentials;\n+    return this.credentialsProvider.getCredentials();\n   }\n \n   @Override\n   public void refresh() {\n-    checkNotNull(conf, \"conf is required\");\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n+    }\n \n-    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n-    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n+    this.credentialsProvider.refresh();\n   }\n \n }\n", "next_change": {"commit": "ad9b5824b5d90b7eb7fc8ded420a12a0cd34541f", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex c8a4b60..8568d2a 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -25,49 +24,37 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  public static final String ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleSessionDurationSeconds\";\n-  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n+  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n+  private AWSCredentials credentials;\n   private final Configuration conf;\n-  private STSAssumeRoleSessionCredentialsProvider credentialsProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n-  private void initializeCredentialProvider() {\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n-\n-    int roleSessionDuration = conf.getInt(ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n-\n-    // STSAssumeRoleSessionCredentialsProvider should auto refresh its credentials in the background.\n-    this.credentialsProvider = new STSAssumeRoleSessionCredentialsProvider\n-        .Builder(roleArn, \"ct-assume-role-session\")\n-        .withRoleSessionDurationSeconds(roleSessionDuration)\n-        .build();\n-  }\n-\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (this.credentialsProvider == null) {\n-      initializeCredentialProvider();\n+    if (credentials == null) {\n+      refresh();\n     }\n-    return this.credentialsProvider.getCredentials();\n+    return credentials;\n   }\n \n   @Override\n   public void refresh() {\n-    if (this.credentialsProvider == null) {\n-      initializeCredentialProvider();\n-    }\n+    checkNotNull(conf, \"conf is required\");\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n \n-    this.credentialsProvider.refresh();\n+    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n+    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n   }\n \n }\n", "next_change": {"commit": "8662d42a40f054c204f3bde5b2674c50674236ec", "changed_code": [{"header": "diff --git a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\nindex 8568d2a..c8a4b60 100644\n--- a/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n+++ b/circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java\n", "chunk": "@@ -24,37 +25,49 @@ import org.apache.hadoop.conf.Configuration;\n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleSessionDurationSeconds\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credentialsProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredentialProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+\n+    int roleSessionDuration = conf.getInt(ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    // STSAssumeRoleSessionCredentialsProvider should auto refresh its credentials in the background.\n+    this.credentialsProvider = new STSAssumeRoleSessionCredentialsProvider\n+        .Builder(roleArn, \"ct-assume-role-session\")\n+        .withRoleSessionDurationSeconds(roleSessionDuration)\n+        .build();\n+  }\n+\n   @Override\n   public AWSCredentials getCredentials() {\n-    if (credentials == null) {\n-      refresh();\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n     }\n-    return credentials;\n+    return this.credentialsProvider.getCredentials();\n   }\n \n   @Override\n   public void refresh() {\n-    checkNotNull(conf, \"conf is required\");\n-    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n-    checkArgument(StringUtils.isNotEmpty(roleArn),\n-        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+    if (this.credentialsProvider == null) {\n+      initializeCredentialProvider();\n+    }\n \n-    Builder builder = new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn, \"ct-assume-role-session\");\n-    credentials = builder.withRoleSessionDurationSeconds(CREDENTIALS_DURATION).build().getCredentials();\n+    this.credentialsProvider.refresh();\n   }\n \n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3Nzk3MQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392277971", "body": "What's the reason for splitting this into two lines? I think it was fine the way it was before.", "bodyText": "What's the reason for splitting this into two lines? I think it was fine the way it was before.", "bodyHTML": "<p dir=\"auto\">What's the reason for splitting this into two lines? I think it was fine the way it was before.</p>", "author": "massdosage", "createdAt": "2020-03-13T14:54:33Z", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java", "diffHunk": "@@ -173,8 +172,16 @@ private void initialiseAllCopyRequests() {\n         initialiseCopyJobs(subLocation, targetS3Uri);\n       }\n     }\n-    LOG\n-        .info(\"Finished initialising {} copy job(s)\", copyJobRequests.size());\n+\n+    int totalCopyJobs = copyJobRequests.size();", "originalCommit": "e8454abc8598f24e2a7e682da8ea0eed2f8db236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMyOTA3Ng==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392329076", "bodyText": "I use the totalCopyJob request number to make a determination about what the thread pool size should be in the determineThreadPoolSize method. I figured since we use it twice it could be worth throwing into a variable.", "author": "KenFigueiredo", "createdAt": "2020-03-13T16:16:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3Nzk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzMDA0OA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392330048", "bodyText": "Ah, OK, I didn't spot that, sorry, you're right.", "author": "massdosage", "createdAt": "2020-03-13T16:18:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3Nzk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzMDQ5NQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392330495", "bodyText": "\ud83d\udc4d", "author": "massdosage", "createdAt": "2020-03-13T16:18:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3Nzk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f5ab2b3666fda97d8ce3da90142c8acad1a20855", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java\nindex 43ccaa8..4beb991 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java\n", "chunk": "@@ -175,7 +175,7 @@ public class S3S3Copier implements Copier {\n \n     int totalCopyJobs = copyJobRequests.size();\n     LOG.info(\"Finished initialising {} copy job(s)\", totalCopyJobs);\n-    s3s3CopierOptions.overrideMaxThreadPoolSize(determineThreadPoolSize(totalCopyJobs, s3s3CopierOptions.getMaxThreadPoolSize()));\n+    s3s3CopierOptions.setMaxThreadPoolSize(determineThreadPoolSize(totalCopyJobs, s3s3CopierOptions.getMaxThreadPoolSize()));\n     targetClient = s3ClientFactory.newInstance(targetBase, s3s3CopierOptions);\n     transferManager = transferManagerFactory.newInstance(targetClient, s3s3CopierOptions);\n   }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3ODE2MA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392278160", "body": "Why has all this been moved down here instead of where it was being done above?", "bodyText": "Why has all this been moved down here instead of where it was being done above?", "bodyHTML": "<p dir=\"auto\">Why has all this been moved down here instead of where it was being done above?</p>", "author": "massdosage", "createdAt": "2020-03-13T14:54:52Z", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java", "diffHunk": "@@ -173,8 +172,16 @@ private void initialiseAllCopyRequests() {\n         initialiseCopyJobs(subLocation, targetS3Uri);\n       }\n     }\n-    LOG\n-        .info(\"Finished initialising {} copy job(s)\", copyJobRequests.size());\n+\n+    int totalCopyJobs = copyJobRequests.size();\n+    LOG.info(\"Finished initialising {} copy job(s)\", totalCopyJobs);\n+    s3s3CopierOptions.overrideMaxThreadPoolSize(determineThreadPoolSize(totalCopyJobs, s3s3CopierOptions.getMaxThreadPoolSize()));", "originalCommit": "e8454abc8598f24e2a7e682da8ea0eed2f8db236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzMDg2Mg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392330862", "bodyText": "OK, so that's why you had to move it down here then.", "author": "massdosage", "createdAt": "2020-03-13T16:19:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3ODE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzMTkyMg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392331922", "bodyText": "So the thought behind this was that we don't initialize the target & transferManager until we know how much work we need to do and we can optimize how we allocate those threads dynamically. The number of threads we allocate to the threadpool has a diminishing return if we go over the total number of copies we need to make.\nI.e. if we have 250 copy jobs and we allocate a threadpool of 1000 to transfermanager, we're going to have ~750 idle threads. This made a fairly significant difference in overhead and the total replication time from our testing of about an average of ~400 MB/s (granted the # of files & size of those files will drastically change that number)", "author": "KenFigueiredo", "createdAt": "2020-03-13T16:21:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3ODE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzMzg1NA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392333854", "bodyText": "OK.", "author": "massdosage", "createdAt": "2020-03-13T16:24:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3ODE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "f5ab2b3666fda97d8ce3da90142c8acad1a20855", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java\nindex 43ccaa8..4beb991 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java\n", "chunk": "@@ -175,7 +175,7 @@ public class S3S3Copier implements Copier {\n \n     int totalCopyJobs = copyJobRequests.size();\n     LOG.info(\"Finished initialising {} copy job(s)\", totalCopyJobs);\n-    s3s3CopierOptions.overrideMaxThreadPoolSize(determineThreadPoolSize(totalCopyJobs, s3s3CopierOptions.getMaxThreadPoolSize()));\n+    s3s3CopierOptions.setMaxThreadPoolSize(determineThreadPoolSize(totalCopyJobs, s3s3CopierOptions.getMaxThreadPoolSize()));\n     targetClient = s3ClientFactory.newInstance(targetBase, s3s3CopierOptions);\n     transferManager = transferManagerFactory.newInstance(targetClient, s3s3CopierOptions);\n   }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3ODgwMA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392278800", "body": "I've got a feeling this was set to debug for a reason, why is it being changed to warn?", "bodyText": "I've got a feeling this was set to debug for a reason, why is it being changed to warn?", "bodyHTML": "<p dir=\"auto\">I've got a feeling this was set to debug for a reason, why is it being changed to warn?</p>", "author": "massdosage", "createdAt": "2020-03-13T14:55:48Z", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java", "diffHunk": "@@ -292,7 +299,7 @@ private Copy submitCopyJob(CopyJobRequest copyJob) {\n                   copyObjectRequest.getSourceBucketName(),\n                   copyObjectRequest.getSourceKey());\n           LOG\n-              .debug(\"Copy failed with exception:\", e);\n+              .warn(\"Copy failed with exception:\", e);", "originalCommit": "e8454abc8598f24e2a7e682da8ea0eed2f8db236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzMTg1Ng==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392331856", "bodyText": "The reason I say this is because we usually log errors on warn/error level so if we don't then it's usually been done like that for a reason. My assumption is that we have some retry logic so this was causing the logs to be noisy and was downgraded to debug but I could be wrong, in which case warn is fine.", "author": "massdosage", "createdAt": "2020-03-13T16:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3ODgwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNTEyNw==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392335127", "bodyText": "I changed this because during my testing of all of this since some of the failures we had around the testing of this made those errors fail silently. If we're running in production, we don't necessarily want to have debug logs on but we still want to see what the failure for a given job was.", "author": "KenFigueiredo", "createdAt": "2020-03-13T16:26:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3ODgwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNjQwMg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392336402", "bodyText": "OK, well, let's leave it like this then and if it later becomes apparent why we put this down to debug we'll just just put it back again.", "author": "massdosage", "createdAt": "2020-03-13T16:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3ODgwMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4MDIyNQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392280225", "body": "I don't really mind but why was this removed?", "bodyText": "I don't really mind but why was this removed?", "bodyHTML": "<p dir=\"auto\">I don't really mind but why was this removed?</p>", "author": "massdosage", "createdAt": "2020-03-13T14:57:58Z", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java", "diffHunk": "@@ -56,15 +57,14 @@ public JceksAmazonS3ClientFactory(Security security) {\n   @Override\n   public AmazonS3 newInstance(AmazonS3URI uri, S3S3CopierOptions s3s3CopierOptions) {\n     HadoopAWSCredentialProviderChain credentialProviderChain = getCredentialsProviderChain(\n-        s3s3CopierOptions.getAssumedRole());\n+        s3s3CopierOptions.getAssumedRole(), s3s3CopierOptions.getAssumedRoleCredentialDuration());\n     return newS3Client(uri, s3s3CopierOptions, credentialProviderChain);\n   }\n \n   private AmazonS3 newS3Client(\n       AmazonS3URI uri,\n       S3S3CopierOptions s3s3CopierOptions,\n       HadoopAWSCredentialProviderChain credentialProviderChain) {\n-    LOG.debug(\"trying to get a client for uri '{}'\", uri);", "originalCommit": "e8454abc8598f24e2a7e682da8ea0eed2f8db236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNTk2OA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392335968", "bodyText": "unintentional - I had a ton of additional debug logs that I had reverted for the PR, and this one must have gotten caught with it.", "author": "KenFigueiredo", "createdAt": "2020-03-13T16:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4MDIyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "facd8ee9770645e7fa733c73b1bd201f6c5f0d70", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\nindex 854762d..f7de164 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n", "chunk": "@@ -57,7 +57,7 @@ public class JceksAmazonS3ClientFactory implements AmazonS3ClientFactory {\n   @Override\n   public AmazonS3 newInstance(AmazonS3URI uri, S3S3CopierOptions s3s3CopierOptions) {\n     HadoopAWSCredentialProviderChain credentialProviderChain = getCredentialsProviderChain(\n-        s3s3CopierOptions.getAssumedRole(), s3s3CopierOptions.getAssumedRoleCredentialDuration());\n+        s3s3CopierOptions.getAssumedRole());\n     return newS3Client(uri, s3s3CopierOptions, credentialProviderChain);\n   }\n \n", "next_change": {"commit": "09021b6652365e793997bb09e976af7311b46ba6", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\nindex f7de164c..8f42f72f 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n", "chunk": "@@ -65,6 +65,7 @@ public class JceksAmazonS3ClientFactory implements AmazonS3ClientFactory {\n       AmazonS3URI uri,\n       S3S3CopierOptions s3s3CopierOptions,\n       HadoopAWSCredentialProviderChain credentialProviderChain) {\n+    LOG.debug(\"trying to get a client for uri '{}'\", uri);\n     AmazonS3 globalClient = newGlobalInstance(s3s3CopierOptions, credentialProviderChain);\n     try {\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4MjcxMA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392282710", "body": "Depending on what you decide to do based on @teabot's comment about the -1 magic number, it might be worth introducing a \"can't be <=0 check\" when we get the config and then this can just check >0", "bodyText": "Depending on what you decide to do based on @teabot's comment about the -1 magic number, it might be worth introducing a \"can't be <=0 check\" when we get the config and then this can just check >0", "bodyHTML": "<p dir=\"auto\">Depending on what you decide to do based on <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/teabot/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/teabot\">@teabot</a>'s comment about the -1 magic number, it might be worth introducing a \"can't be &lt;=0 check\" when we get the config and then this can just check &gt;0</p>", "author": "massdosage", "createdAt": "2020-03-13T15:02:04Z", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java", "diffHunk": "@@ -103,13 +103,27 @@ private String regionForUri(AmazonS3 client, AmazonS3URI uri) {\n     return bucketRegion;\n   }\n \n+  private AmazonS3ClientBuilder applyClientConfigurations(AmazonS3ClientBuilder builder, S3S3CopierOptions s3s3CopierOptions) {\n+    ClientConfiguration clientConfiguration = new ClientConfiguration();\n+\n+    if (s3s3CopierOptions.getMaxThreadPoolSize() != -1) {", "originalCommit": "e8454abc8598f24e2a7e682da8ea0eed2f8db236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzODk2Mw==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392338963", "bodyText": "removed entirely as per @patduin comments", "author": "KenFigueiredo", "createdAt": "2020-03-13T16:33:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4MjcxMA=="}], "type": "inlineReview", "revised_code": {"commit": "facd8ee9770645e7fa733c73b1bd201f6c5f0d70", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\nindex 854762d..f7de164 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n", "chunk": "@@ -106,7 +106,7 @@ public class JceksAmazonS3ClientFactory implements AmazonS3ClientFactory {\n   private AmazonS3ClientBuilder applyClientConfigurations(AmazonS3ClientBuilder builder, S3S3CopierOptions s3s3CopierOptions) {\n     ClientConfiguration clientConfiguration = new ClientConfiguration();\n \n-    if (s3s3CopierOptions.getMaxThreadPoolSize() != -1) {\n+    if (s3s3CopierOptions.getMaxThreadPoolSize() != S3S3CopierOptions.USE_DEFAULT_THREAD_POOL_MAX) {\n       clientConfiguration.withMaxConnections(s3s3CopierOptions.getMaxThreadPoolSize());\n     }\n \n", "next_change": {"commit": "3115dd44c3414fc422b7b1e38daafa46e5299120", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\nindex f7de164c..99789448 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n", "chunk": "@@ -105,11 +105,7 @@ public class JceksAmazonS3ClientFactory implements AmazonS3ClientFactory {\n \n   private AmazonS3ClientBuilder applyClientConfigurations(AmazonS3ClientBuilder builder, S3S3CopierOptions s3s3CopierOptions) {\n     ClientConfiguration clientConfiguration = new ClientConfiguration();\n-\n-    if (s3s3CopierOptions.getMaxThreadPoolSize() != S3S3CopierOptions.USE_DEFAULT_THREAD_POOL_MAX) {\n-      clientConfiguration.withMaxConnections(s3s3CopierOptions.getMaxThreadPoolSize());\n-    }\n-\n+    clientConfiguration.withMaxConnections(s3s3CopierOptions.getMaxThreadPoolSize());\n     return builder.withClientConfiguration(clientConfiguration);\n   }\n \n", "next_change": {"commit": "463fbb2bcd1a68b0e6f0f8888584e21254079199", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\nindex 9978944..2b0a10e 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n", "chunk": "@@ -111,8 +112,7 @@ public class JceksAmazonS3ClientFactory implements AmazonS3ClientFactory {\n \n   private AmazonS3 newGlobalInstance(\n       S3S3CopierOptions s3s3CopierOptions,\n-      HadoopAWSCredentialProviderChain credentialsChain\n-  ) {\n+      HadoopAWSCredentialProviderChain credentialsChain) {\n     AmazonS3ClientBuilder builder = AmazonS3ClientBuilder\n         .standard()\n         .withForceGlobalBucketAccessEnabled(Boolean.TRUE)\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NDY2Mg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392284662", "body": "```suggestion\r\n    TransferManagerConfiguration managerConfig = transferManager.getConfiguration();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                TransferManagerConfiguration tmConfig = transferManager.getConfiguration();\n          \n          \n            \n                TransferManagerConfiguration managerConfig = transferManager.getConfiguration();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi\">TransferManagerConfiguration</span> <span class=\"x x-first x-last\">tmConfig</span> <span class=\"pl-k\">=</span> transferManager<span class=\"pl-k\">.</span>getConfiguration();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-smi\">TransferManagerConfiguration</span> <span class=\"x x-first x-last\">managerConfig</span> <span class=\"pl-k\">=</span> transferManager<span class=\"pl-k\">.</span>getConfiguration();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "massdosage", "createdAt": "2020-03-13T15:05:12Z", "path": "circus-train-s3-s3-copier/src/test/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactoryTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.hotels.bdp.circustrain.s3s3copier.aws;\n+\n+import static org.junit.Assert.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+import java.util.HashMap;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.transfer.TransferManager;\n+import com.amazonaws.services.s3.transfer.TransferManagerConfiguration;\n+\n+import com.hotels.bdp.circustrain.s3s3copier.S3S3CopierOptions;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class TransferManagerFactoryTest {\n+\n+  @Mock private AmazonS3 mockClient;\n+  private final Long MULTIPART_COPY_THRESHOLD_VALUE = 1L;\n+  private final Long MULTIPART_COPY_PART_SIZE = 1L;\n+\n+  @Test\n+  public void shouldCreateDefaultTransferManagerClient() {\n+    S3S3CopierOptions s3Options = new S3S3CopierOptions(new HashMap<String, Object>() {{\n+      put(S3S3CopierOptions.Keys.MULTIPART_COPY_THRESHOLD.keyName(), MULTIPART_COPY_THRESHOLD_VALUE);\n+      put(S3S3CopierOptions.Keys.MULTIPART_COPY_PART_SIZE.keyName(), MULTIPART_COPY_PART_SIZE);\n+    }});\n+\n+    TransferManagerFactory factory = new TransferManagerFactory();\n+    TransferManager transferManager = factory.newInstance(mockClient, s3Options);\n+    assertThat(transferManager.getAmazonS3Client(), is(mockClient));\n+\n+    TransferManagerConfiguration tmConfig = transferManager.getConfiguration();", "originalCommit": "e8454abc8598f24e2a7e682da8ea0eed2f8db236", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6fc56e28885e74ef1c0a87f8cd3df654584b880", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/test/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactoryTest.java b/circus-train-s3-s3-copier/src/test/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactoryTest.java\nindex 68949c6..796f052 100644\n--- a/circus-train-s3-s3-copier/src/test/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactoryTest.java\n+++ b/circus-train-s3-s3-copier/src/test/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactoryTest.java\n", "chunk": "@@ -34,8 +34,8 @@ public class TransferManagerFactoryTest {\n     TransferManager transferManager = factory.newInstance(mockClient, s3Options);\n     assertThat(transferManager.getAmazonS3Client(), is(mockClient));\n \n-    TransferManagerConfiguration tmConfig = transferManager.getConfiguration();\n-    assertThat(tmConfig.getMultipartCopyPartSize(), is(MULTIPART_COPY_PART_SIZE));\n-    assertThat(tmConfig.getMultipartCopyThreshold(), is(MULTIPART_COPY_THRESHOLD_VALUE));\n+    TransferManagerConfiguration managerConfig = transferManager.getConfiguration();\n+    assertThat(managerConfig.getMultipartCopyPartSize(), is(MULTIPART_COPY_PART_SIZE));\n+    assertThat(managerConfig.getMultipartCopyThreshold(), is(MULTIPART_COPY_THRESHOLD_VALUE));\n   }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NTI4MA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392285280", "body": "Thanks for adding this, shocking we didn't already have a test class for it!", "bodyText": "Thanks for adding this, shocking we didn't already have a test class for it!", "bodyHTML": "<p dir=\"auto\">Thanks for adding this, shocking we didn't already have a test class for it!</p>", "author": "massdosage", "createdAt": "2020-03-13T15:06:11Z", "path": "circus-train-s3-s3-copier/src/test/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactoryTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.hotels.bdp.circustrain.s3s3copier.aws;", "originalCommit": "e8454abc8598f24e2a7e682da8ea0eed2f8db236", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NTg0NQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392285845", "body": "Can we add a unit test for this if statement or is it not straightforward to check the existence of the executor factory?", "bodyText": "Can we add a unit test for this if statement or is it not straightforward to check the existence of the executor factory?", "bodyHTML": "<p dir=\"auto\">Can we add a unit test for this if statement or is it not straightforward to check the existence of the executor factory?</p>", "author": "massdosage", "createdAt": "2020-03-13T15:07:08Z", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java", "diffHunk": "@@ -26,12 +31,19 @@\n @Component\n public class TransferManagerFactory {\n \n+  private static final Logger LOG = LoggerFactory.getLogger(TransferManagerFactory.class);\n+\n   public TransferManager newInstance(AmazonS3 targetS3Client, S3S3CopierOptions s3s3CopierOptions) {\n-    return TransferManagerBuilder\n-        .standard()\n+    TransferManagerBuilder builder = TransferManagerBuilder.standard()\n         .withMultipartCopyThreshold(s3s3CopierOptions.getMultipartCopyThreshold())\n         .withMultipartCopyPartSize(s3s3CopierOptions.getMultipartCopyPartSize())\n-        .withS3Client(targetS3Client)\n-        .build();\n+        .withS3Client(targetS3Client);\n+\n+    if (s3s3CopierOptions.getMaxThreadPoolSize() != -1) {", "originalCommit": "e8454abc8598f24e2a7e682da8ea0eed2f8db236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMxMDAyMg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392310022", "bodyText": "I had originally added the transfermanagerFactoryTest to cover it but found that it wasn't straightforward. That property is directly set on the executor factory which transferManager stores under a private final w/o any getters.", "author": "KenFigueiredo", "createdAt": "2020-03-13T15:46:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NTg0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "facd8ee9770645e7fa733c73b1bd201f6c5f0d70", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java\nindex dccd50f..05d4820 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java\n", "chunk": "@@ -39,7 +39,7 @@ public class TransferManagerFactory {\n         .withMultipartCopyPartSize(s3s3CopierOptions.getMultipartCopyPartSize())\n         .withS3Client(targetS3Client);\n \n-    if (s3s3CopierOptions.getMaxThreadPoolSize() != -1) {\n+    if (s3s3CopierOptions.getMaxThreadPoolSize() != S3S3CopierOptions.USE_DEFAULT_THREAD_POOL_MAX) {\n       LOG.info(\"Initializing thread pool with {} threads\", s3s3CopierOptions.getMaxThreadPoolSize());\n       builder = builder.withExecutorFactory(() -> Executors.newFixedThreadPool(s3s3CopierOptions.getMaxThreadPoolSize()));\n     }\n", "next_change": {"commit": "3115dd44c3414fc422b7b1e38daafa46e5299120", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java\nindex 05d48203..f38e2f34 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java\n", "chunk": "@@ -34,16 +36,14 @@ public class TransferManagerFactory {\n   private static final Logger LOG = LoggerFactory.getLogger(TransferManagerFactory.class);\n \n   public TransferManager newInstance(AmazonS3 targetS3Client, S3S3CopierOptions s3s3CopierOptions) {\n-    TransferManagerBuilder builder = TransferManagerBuilder.standard()\n+    LOG\n+        .debug(\"Initializing transfer manager with {} threads.\", s3s3CopierOptions.getMaxThreadPoolSize());\n+\n+    return TransferManagerBuilder.standard()\n         .withMultipartCopyThreshold(s3s3CopierOptions.getMultipartCopyThreshold())\n         .withMultipartCopyPartSize(s3s3CopierOptions.getMultipartCopyPartSize())\n-        .withS3Client(targetS3Client);\n-\n-    if (s3s3CopierOptions.getMaxThreadPoolSize() != S3S3CopierOptions.USE_DEFAULT_THREAD_POOL_MAX) {\n-      LOG.info(\"Initializing thread pool with {} threads\", s3s3CopierOptions.getMaxThreadPoolSize());\n-      builder = builder.withExecutorFactory(() -> Executors.newFixedThreadPool(s3s3CopierOptions.getMaxThreadPoolSize()));\n-    }\n-\n-    return builder.build();\n+        .withExecutorFactory(() -> Executors.newFixedThreadPool(s3s3CopierOptions.getMaxThreadPoolSize()))\n+        .withS3Client(targetS3Client)\n+        .build();\n   }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NzMyOA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392287328", "body": "Why do we need this here as well as in the TransferManagerFactory?", "bodyText": "Why do we need this here as well as in the TransferManagerFactory?", "bodyHTML": "<p dir=\"auto\">Why do we need this here as well as in the TransferManagerFactory?</p>", "author": "massdosage", "createdAt": "2020-03-13T15:09:41Z", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java", "diffHunk": "@@ -103,13 +103,27 @@ private String regionForUri(AmazonS3 client, AmazonS3URI uri) {\n     return bucketRegion;\n   }\n \n+  private AmazonS3ClientBuilder applyClientConfigurations(AmazonS3ClientBuilder builder, S3S3CopierOptions s3s3CopierOptions) {\n+    ClientConfiguration clientConfiguration = new ClientConfiguration();\n+\n+    if (s3s3CopierOptions.getMaxThreadPoolSize() != -1) {\n+      clientConfiguration.withMaxConnections(s3s3CopierOptions.getMaxThreadPoolSize());\n+    }\n+\n+    return builder.withClientConfiguration(clientConfiguration);", "originalCommit": "e8454abc8598f24e2a7e682da8ea0eed2f8db236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMxMTQwMA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392311400", "bodyText": "The call in TransferManagerFactory sets the max threads that are available for its pool but doesn't update the default connection limit that the S3Client has of 50. So if you were to set a thread pool of 100, you'd start hitting connection failures.\nFrom my research into it, the most efficient scenario is to match # of threads to # of available connections.", "author": "KenFigueiredo", "createdAt": "2020-03-13T15:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NzMyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0OTk5NQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392949995", "bodyText": "OK", "author": "massdosage", "createdAt": "2020-03-16T11:27:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NzMyOA=="}], "type": "inlineReview", "revised_code": {"commit": "facd8ee9770645e7fa733c73b1bd201f6c5f0d70", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\nindex 854762d..f7de164 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n", "chunk": "@@ -106,7 +106,7 @@ public class JceksAmazonS3ClientFactory implements AmazonS3ClientFactory {\n   private AmazonS3ClientBuilder applyClientConfigurations(AmazonS3ClientBuilder builder, S3S3CopierOptions s3s3CopierOptions) {\n     ClientConfiguration clientConfiguration = new ClientConfiguration();\n \n-    if (s3s3CopierOptions.getMaxThreadPoolSize() != -1) {\n+    if (s3s3CopierOptions.getMaxThreadPoolSize() != S3S3CopierOptions.USE_DEFAULT_THREAD_POOL_MAX) {\n       clientConfiguration.withMaxConnections(s3s3CopierOptions.getMaxThreadPoolSize());\n     }\n \n", "next_change": {"commit": "3115dd44c3414fc422b7b1e38daafa46e5299120", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\nindex f7de164c..99789448 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n", "chunk": "@@ -105,11 +105,7 @@ public class JceksAmazonS3ClientFactory implements AmazonS3ClientFactory {\n \n   private AmazonS3ClientBuilder applyClientConfigurations(AmazonS3ClientBuilder builder, S3S3CopierOptions s3s3CopierOptions) {\n     ClientConfiguration clientConfiguration = new ClientConfiguration();\n-\n-    if (s3s3CopierOptions.getMaxThreadPoolSize() != S3S3CopierOptions.USE_DEFAULT_THREAD_POOL_MAX) {\n-      clientConfiguration.withMaxConnections(s3s3CopierOptions.getMaxThreadPoolSize());\n-    }\n-\n+    clientConfiguration.withMaxConnections(s3s3CopierOptions.getMaxThreadPoolSize());\n     return builder.withClientConfiguration(clientConfiguration);\n   }\n \n", "next_change": {"commit": "463fbb2bcd1a68b0e6f0f8888584e21254079199", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\nindex 9978944..2b0a10e 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java\n", "chunk": "@@ -111,8 +112,7 @@ public class JceksAmazonS3ClientFactory implements AmazonS3ClientFactory {\n \n   private AmazonS3 newGlobalInstance(\n       S3S3CopierOptions s3s3CopierOptions,\n-      HadoopAWSCredentialProviderChain credentialsChain\n-  ) {\n+      HadoopAWSCredentialProviderChain credentialsChain) {\n     AmazonS3ClientBuilder builder = AmazonS3ClientBuilder\n         .standard()\n         .withForceGlobalBucketAccessEnabled(Boolean.TRUE)\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NzU3OQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392287579", "body": "Can we just have a simple test class for this?", "bodyText": "Can we just have a simple test class for this?", "bodyHTML": "<p dir=\"auto\">Can we just have a simple test class for this?</p>", "author": "massdosage", "createdAt": "2020-03-13T15:10:10Z", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/ExecutorServiceFactory.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**", "originalCommit": "e8454abc8598f24e2a7e682da8ea0eed2f8db236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM1MzUxOQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392353519", "bodyText": "good catch - this is actually completely unused and unneeded now due to it being replaced by the lambda call. Removed.", "author": "KenFigueiredo", "createdAt": "2020-03-13T16:56:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NzU3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ea51e748dd225d9a834f5141aac73f9cfe8bf870", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/ExecutorServiceFactory.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/ExecutorServiceFactory.java\ndeleted file mode 100644\nindex f9b40ab..0000000\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/ExecutorServiceFactory.java\n+++ /dev/null\n", "chunk": "@@ -1,43 +0,0 @@\n-/**\n- * Copyright (C) 2016-2020 Expedia, Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.hotels.bdp.circustrain.s3s3copier.aws;\n-\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ThreadFactory;\n-\n-import com.amazonaws.client.builder.ExecutorFactory;\n-\n-public class ExecutorServiceFactory implements ExecutorFactory {\n-  private int threadServicePoolCount;\n-\n-  public ExecutorServiceFactory(int threadPoolCount) {\n-    this.threadServicePoolCount = threadPoolCount;\n-  }\n-\n-  @Override\n-  public ExecutorService newExecutor() {\n-    ThreadFactory threadFactory = new ThreadFactory() {\n-      private int threadCount = 1;\n-      public Thread newThread(Runnable r) {\n-        Thread thread = new Thread(r);\n-        thread.setName(\"s3-transfer-manager-worker-\" + threadCount++);\n-        return thread;\n-      }\n-    };\n-    return Executors.newFixedThreadPool(threadServicePoolCount, threadFactory);\n-  }\n-}\n", "next_change": null}]}}, {"oid": "facd8ee9770645e7fa733c73b1bd201f6c5f0d70", "url": "https://github.com/ExpediaGroup/circus-train/commit/facd8ee9770645e7fa733c73b1bd201f6c5f0d70", "message": "stash assume role changes for a seperate PR", "committedDate": "2020-03-13T15:59:50Z", "type": "commit"}, {"oid": "cbf14913f902d359f243386fbd18baab592d2d2e", "url": "https://github.com/ExpediaGroup/circus-train/commit/cbf14913f902d359f243386fbd18baab592d2d2e", "message": "remove missed copier option", "committedDate": "2020-03-13T16:01:25Z", "type": "commit"}, {"oid": "387cbdbc1074568728919e6cb400dbc2f362d866", "url": "https://github.com/ExpediaGroup/circus-train/commit/387cbdbc1074568728919e6cb400dbc2f362d866", "message": "Apply suggestions from code review\n\nCo-Authored-By: Adrian Woodhead <massdosage@gmail.com>", "committedDate": "2020-03-13T16:03:50Z", "type": "commit"}, {"oid": "f6fc56e28885e74ef1c0a87f8cd3df654584b880", "url": "https://github.com/ExpediaGroup/circus-train/commit/f6fc56e28885e74ef1c0a87f8cd3df654584b880", "message": "tmConfig -> managerConfig", "committedDate": "2020-03-13T16:04:50Z", "type": "commit"}, {"oid": "3115dd44c3414fc422b7b1e38daafa46e5299120", "url": "https://github.com/ExpediaGroup/circus-train/commit/3115dd44c3414fc422b7b1e38daafa46e5299120", "message": "always set executor factory w/ default of 10", "committedDate": "2020-03-13T16:12:12Z", "type": "commit"}, {"oid": "09021b6652365e793997bb09e976af7311b46ba6", "url": "https://github.com/ExpediaGroup/circus-train/commit/09021b6652365e793997bb09e976af7311b46ba6", "message": "revert debug log in JCEKS", "committedDate": "2020-03-13T16:28:00Z", "type": "commit"}, {"oid": "ea51e748dd225d9a834f5141aac73f9cfe8bf870", "url": "https://github.com/ExpediaGroup/circus-train/commit/ea51e748dd225d9a834f5141aac73f9cfe8bf870", "message": "remove unused executorServiceFactory", "committedDate": "2020-03-13T16:53:03Z", "type": "commit"}, {"oid": "8b2e3868d25857625c887266649bd2e91773e867", "url": "https://github.com/ExpediaGroup/circus-train/commit/8b2e3868d25857625c887266649bd2e91773e867", "message": "cherrypick logs for assumerole", "committedDate": "2020-03-13T17:40:57Z", "type": "commit"}, {"oid": "463fbb2bcd1a68b0e6f0f8888584e21254079199", "url": "https://github.com/ExpediaGroup/circus-train/commit/463fbb2bcd1a68b0e6f0f8888584e21254079199", "message": "method formatting", "committedDate": "2020-03-13T17:43:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0NjcyNQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392446725", "body": "beating elliot to it let's make 10 a constant: DEFAULT_MAX_THREAD_POOL_SIZE", "bodyText": "beating elliot to it let's make 10 a constant: DEFAULT_MAX_THREAD_POOL_SIZE", "bodyHTML": "<p dir=\"auto\">beating elliot to it let's make 10 a constant: DEFAULT_MAX_THREAD_POOL_SIZE</p>", "author": "patduin", "createdAt": "2020-03-13T20:16:51Z", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "diffHunk": "@@ -86,6 +91,14 @@ public S3S3CopierOptions(Map<String, Object> copierOptions) {\n     this.copierOptions = new HashMap<>(copierOptions);\n   }\n \n+  public void overrideMaxThreadPoolSize(int newMax) {\n+    copierOptions.put(Keys.MAX_THREAD_POOL_SIZE.keyName(), newMax);\n+  }\n+\n+  public int getMaxThreadPoolSize() {\n+    return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), 10);", "originalCommit": "463fbb2bcd1a68b0e6f0f8888584e21254079199", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5ab2b3666fda97d8ce3da90142c8acad1a20855", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex 485b08f..5794611 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -91,12 +91,12 @@ public class S3S3CopierOptions {\n     this.copierOptions = new HashMap<>(copierOptions);\n   }\n \n-  public void overrideMaxThreadPoolSize(int newMax) {\n-    copierOptions.put(Keys.MAX_THREAD_POOL_SIZE.keyName(), newMax);\n+  public void setMaxThreadPoolSize(int maxThreadPoolSize) {\n+    copierOptions.put(Keys.MAX_THREAD_POOL_SIZE.keyName(), maxThreadPoolSize);\n   }\n \n   public int getMaxThreadPoolSize() {\n-    return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), 10);\n+    return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), DEFAULT_MAX_THREAD_POOL_SIZE);\n   }\n \n   public Long getMultipartCopyThreshold() {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0ODQyOQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392948429", "body": "```suggestion\r\n  public void setMaxThreadPoolSize(int maxThreadPoolSize) {\r\n```\r\n", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void overrideMaxThreadPoolSize(int newMax) {\n          \n          \n            \n              public void setMaxThreadPoolSize(int maxThreadPoolSize) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">overrideMaxThreadPoolSize</span>(<span class=\"pl-k\">int</span> <span class=\"x x-first x-last\">newMax</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">setMaxThreadPoolSize</span>(<span class=\"pl-k\">int</span> <span class=\"x x-first x-last\">maxThreadPoolSize</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "massdosage", "createdAt": "2020-03-16T11:24:33Z", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "diffHunk": "@@ -86,6 +91,14 @@ public S3S3CopierOptions(Map<String, Object> copierOptions) {\n     this.copierOptions = new HashMap<>(copierOptions);\n   }\n \n+  public void overrideMaxThreadPoolSize(int newMax) {", "originalCommit": "463fbb2bcd1a68b0e6f0f8888584e21254079199", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5ab2b3666fda97d8ce3da90142c8acad1a20855", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex 485b08f..5794611 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -91,12 +91,12 @@ public class S3S3CopierOptions {\n     this.copierOptions = new HashMap<>(copierOptions);\n   }\n \n-  public void overrideMaxThreadPoolSize(int newMax) {\n-    copierOptions.put(Keys.MAX_THREAD_POOL_SIZE.keyName(), newMax);\n+  public void setMaxThreadPoolSize(int maxThreadPoolSize) {\n+    copierOptions.put(Keys.MAX_THREAD_POOL_SIZE.keyName(), maxThreadPoolSize);\n   }\n \n   public int getMaxThreadPoolSize() {\n-    return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), 10);\n+    return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), DEFAULT_MAX_THREAD_POOL_SIZE);\n   }\n \n   public Long getMultipartCopyThreshold() {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MDM2Ng==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392950366", "body": "Left over from other PR, NABD though.", "bodyText": "Left over from other PR, NABD though.", "bodyHTML": "<p dir=\"auto\">Left over from other PR, NABD though.</p>", "author": "massdosage", "createdAt": "2020-03-16T11:28:13Z", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "diffHunk": "@@ -18,6 +18,7 @@\n import java.net.URI;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.TimeUnit;", "originalCommit": "463fbb2bcd1a68b0e6f0f8888584e21254079199", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0NTc4Nw==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r393045787", "bodyText": "Removed!", "author": "KenFigueiredo", "createdAt": "2020-03-16T14:05:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MDM2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f5ab2b3666fda97d8ce3da90142c8acad1a20855", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex 485b08f..5794611 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -18,7 +18,6 @@ package com.hotels.bdp.circustrain.s3s3copier;\n import java.net.URI;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n \n import org.apache.commons.collections.MapUtils;\n \n", "next_change": {"commit": "cdd768f2d4285bcc4ac91c44d496953503faf9bf", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex 5794611..2908b00 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -18,6 +18,7 @@ package com.hotels.bdp.circustrain.s3s3copier;\n import java.net.URI;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.commons.collections.MapUtils;\n \n", "next_change": {"commit": "ad9b5824b5d90b7eb7fc8ded420a12a0cd34541f", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex 2908b00..5794611 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -18,7 +18,6 @@ package com.hotels.bdp.circustrain.s3s3copier;\n import java.net.URI;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n \n import org.apache.commons.collections.MapUtils;\n \n", "next_change": {"commit": "8662d42a40f054c204f3bde5b2674c50674236ec", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\nindex 5794611..2908b00 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java\n", "chunk": "@@ -18,6 +18,7 @@ package com.hotels.bdp.circustrain.s3s3copier;\n import java.net.URI;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.commons.collections.MapUtils;\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MDc3MA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392950770", "body": "This doesn't look right?", "bodyText": "This doesn't look right?", "bodyHTML": "<p dir=\"auto\">This doesn't look right?</p>", "author": "massdosage", "createdAt": "2020-03-16T11:29:02Z", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java", "diffHunk": "@@ -15,8 +15,15 @@\n  */\n package com.hotels.bdp.circustrain.s3s3copier.aws;\n \n+\n+import java.util.concurrent.Executors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n+import jline.internal.Log;", "originalCommit": "463fbb2bcd1a68b0e6f0f8888584e21254079199", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0NTgzNA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r393045834", "bodyText": "looks like left over from an incorrect import. May need to tweak my IDE settings \ud83d\ude05\nRemoved.", "author": "KenFigueiredo", "createdAt": "2020-03-16T14:05:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MDc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "f5ab2b3666fda97d8ce3da90142c8acad1a20855", "changed_code": [{"header": "diff --git a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java\nindex f38e2f3..636a925 100644\n--- a/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java\n+++ b/circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java\n", "chunk": "@@ -22,8 +22,6 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n-import jline.internal.Log;\n-\n import com.amazonaws.services.s3.AmazonS3;\n import com.amazonaws.services.s3.transfer.TransferManager;\n import com.amazonaws.services.s3.transfer.TransferManagerBuilder;\n", "next_change": null}]}}, {"oid": "f5ab2b3666fda97d8ce3da90142c8acad1a20855", "url": "https://github.com/ExpediaGroup/circus-train/commit/f5ab2b3666fda97d8ce3da90142c8acad1a20855", "message": "Set changes from pr", "committedDate": "2020-03-16T14:05:40Z", "type": "commit"}, {"oid": "cdd768f2d4285bcc4ac91c44d496953503faf9bf", "url": "https://github.com/ExpediaGroup/circus-train/commit/cdd768f2d4285bcc4ac91c44d496953503faf9bf", "message": "Merge branch 'master' into s3s3copier-threads-and-assume-role-fix", "committedDate": "2020-03-16T14:51:53Z", "type": "commit"}, {"oid": "e6fe106e8552d0db55d02af2ef66e61929fe2c50", "url": "https://github.com/ExpediaGroup/circus-train/commit/e6fe106e8552d0db55d02af2ef66e61929fe2c50", "message": "tidy up space", "committedDate": "2020-03-16T14:53:47Z", "type": "commit"}, {"oid": "ad9b5824b5d90b7eb7fc8ded420a12a0cd34541f", "url": "https://github.com/ExpediaGroup/circus-train/commit/ad9b5824b5d90b7eb7fc8ded420a12a0cd34541f", "message": "add prefix", "committedDate": "2020-03-16T15:01:12Z", "type": "commit"}, {"oid": "8662d42a40f054c204f3bde5b2674c50674236ec", "url": "https://github.com/ExpediaGroup/circus-train/commit/8662d42a40f054c204f3bde5b2674c50674236ec", "message": "fix & merge master", "committedDate": "2020-03-16T15:03:38Z", "type": "commit"}, {"oid": "cb6d0e32359945f8664a8b254e1ebdc956c0e3ea", "url": "https://github.com/ExpediaGroup/circus-train/commit/cb6d0e32359945f8664a8b254e1ebdc956c0e3ea", "message": "remove duplicate readme entry", "committedDate": "2020-03-16T15:07:45Z", "type": "commit"}]}