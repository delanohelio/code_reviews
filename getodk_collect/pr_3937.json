{"pr_number": 3937, "pr_title": "Reworking Rating Widget", "pr_author": "SaumiaSinghal", "pr_createdAt": "2020-06-23T03:51:21Z", "pr_url": "https://github.com/getodk/collect/pull/3937", "merge_commit": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3OTEwOA==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r450079108", "body": "I think you can  use `ScreenUtils.getScreenWidth()` here and get rid of `getScreenDimensions()` at all.", "bodyText": "I think you can  use ScreenUtils.getScreenWidth() here and get rid of getScreenDimensions() at all.", "bodyHTML": "<p dir=\"auto\">I think you can  use <code>ScreenUtils.getScreenWidth()</code> here and get rid of <code>getScreenDimensions()</code> at all.</p>", "author": "grzesiek2010", "createdAt": "2020-07-06T08:55:12Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,116 +14,92 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n \n-        renderGrid(context, numberOfStars, columns, rows);\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n             }\n         }\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n-\n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n-\n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.getAnswerText() != null) {\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n-    }\n-\n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n-            }\n-        }\n+        ratingBar.setRating(0.0F);\n+    }\n \n-        answer = null;\n-        widgetValueChanged();\n+    protected RatingBar getRatingBar() {\n+        return ratingBar;\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = getResources().getDrawable(R.drawable.ic_star);\n+    private int calculateColumns(int widthOfStar) {\n         DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));", "originalCommit": "4e2628edce2fac55388024b25f5885182e6aeb0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25f6dc25ee36f51487563156a3399a4c578b769a", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 92366b7ca..377090d76 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -98,13 +98,7 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     private int calculateColumns(int widthOfStar) {\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n-    }\n-\n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n+                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n     }\n }\n", "next_change": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 377090d76..a60489839 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -42,63 +42,75 @@ public class RatingWidget extends QuestionWidget {\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns(48);\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        if (rows == 1) {\n-            binding.ratingBar.setVisibility(VISIBLE);\n-            this.ratingBar = binding.ratingBar;\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n-            binding.ratingBar.setVisibility(GONE);\n-            columns = calculateColumns(36);\n-            rows = (int) Math.ceil((double) numberOfStars / columns);\n-            if (rows == 1) {\n-                binding.ratingBar2.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar2;\n-            } else {\n-                binding.ratingBar3.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar3;\n-            }\n+            binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n         }\n \n-        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        ratingBar.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(rating);\n+            binding.ratingBar2.setRating(0.0F);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n \n         if (prompt.getAnswerText() != null) {\n-            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n         }\n         return answerView;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        ratingBar.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        ratingBar.setRating(0.0F);\n+        binding.ratingBar1.setRating(0.0F);\n     }\n \n-    protected RatingBar getRatingBar() {\n-        return ratingBar;\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n-    private int calculateColumns(int widthOfStar) {\n-        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n-                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n     }\n }\n", "next_change": {"commit": "35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex a60489839..f98fefbf4 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,100 +17,121 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.view.View;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    RatingWidgetAnswerBinding binding;\n+    final GridLayout gridLayout;\n+    Integer answer;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n+\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n+            }\n         }\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(rating);\n-            binding.ratingBar2.setRating(0.0F);\n-            widgetValueChanged();\n-        });\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n-        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-        }\n-        return answerView;\n+            answer = position + 1;\n+\n+            widgetValueChanged();\n+        });\n+        return imageButton;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return answer != null ? new IntegerData(answer) : null;\n     }\n \n     @Override\n     public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n+            }\n+        }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6bb71d8a150b39dc0419cf94839ed2364021fe52", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f98fefbf4..16f698824 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,121 +17,90 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n \n-        renderGrid(context, numberOfStars, columns, rows);\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n             }\n         }\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n-\n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n-\n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.getAnswerText() != null) {\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n-    }\n-\n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n-            }\n-        }\n-\n-        answer = null;\n-        widgetValueChanged();\n+        ratingBar.setRating(0.0F);\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    protected RatingBar getRatingBar() {\n+        return ratingBar;\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int calculateColumns(int widthOfStar) {\n+        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n+                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n     }\n }\n", "next_change": {"commit": "32ea188912d6279747bced50dc3ad50790b4bb6f", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 16f698824..2a16efd36 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -44,63 +44,69 @@ public class RatingWidget extends QuestionWidget {\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-\n         RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n         int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns(48);\n \n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-        if (rows == 1) {\n-            binding.ratingBar.setVisibility(VISIBLE);\n-            this.ratingBar = binding.ratingBar;\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n-            binding.ratingBar.setVisibility(GONE);\n-            columns = calculateColumns(36);\n-            rows = (int) Math.ceil((double) numberOfStars / columns);\n-            if (rows == 1) {\n-                binding.ratingBar2.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar2;\n-            } else {\n-                binding.ratingBar3.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar3;\n-            }\n+            binding.ratingBar1.setNumStars(numberOfStars);\n         }\n \n-        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        ratingBar.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n \n         if (prompt.getAnswerText() != null) {\n-            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n         }\n         return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        ratingBar.setOnLongClickListener(l);\n+        binding.ratingBar1.setOnLongClickListener(l);\n+        binding.ratingBar2.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n+        return binding.ratingBar1.getRating() == 0.0F ? null :\n+                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        ratingBar.setRating(0.0F);\n-    }\n-\n-    protected RatingBar getRatingBar() {\n-        return ratingBar;\n+        binding.ratingBar1.setRating(0.0F);\n     }\n \n-    private int calculateColumns(int widthOfStar) {\n-        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n-                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n+    protected RatingWidgetAnswerBinding getBinding() {\n+        return binding;\n     }\n }\n", "next_change": {"commit": "ea7cd1ae54063565223afa7e3aacc6955d5a4606", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 2a16efd36..f4e97bef9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -105,8 +107,4 @@ public class RatingWidget extends QuestionWidget {\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n-\n-    protected RatingWidgetAnswerBinding getBinding() {\n-        return binding;\n-    }\n }\n", "next_change": {"commit": "ff87f43f08b4475f9cef0e3bcf381900aecc57a0", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f4e97bef9..d74916d2b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -92,19 +86,29 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar1.setOnLongClickListener(l);\n-        binding.ratingBar2.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F ? null :\n-                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n+\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    }\n+\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 92366b7ca..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -42,69 +48,109 @@ public class RatingWidget extends QuestionWidget {\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns(48);\n-\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-        if (rows == 1) {\n-            binding.ratingBar.setVisibility(VISIBLE);\n-            this.ratingBar = binding.ratingBar;\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n-            binding.ratingBar.setVisibility(GONE);\n-            columns = calculateColumns(36);\n-            rows = (int) Math.ceil((double) numberOfStars / columns);\n-            if (rows == 1) {\n-                binding.ratingBar2.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar2;\n-            } else {\n-                binding.ratingBar3.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar3;\n-            }\n+            binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n         }\n \n-        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        ratingBar.setEnabled(!prompt.isReadOnly());\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n+        }\n \n         if (prompt.getAnswerText() != null) {\n-            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n         }\n         return answerView;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        ratingBar.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        ratingBar.setRating(0.0F);\n+        binding.ratingBar1.setRating(0.0F);\n     }\n \n-    protected RatingBar getRatingBar() {\n-        return ratingBar;\n+    @SuppressLint(\"ClickableViewAccessibility\")\n+    private void setUpRatingBar(int maxNumberOfStars) {\n+        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n+        binding.ratingBar1.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar2.setRating(0);\n+            }\n+            return false;\n+        });\n+\n+        binding.ratingBar2.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar1.setRating(maxNumberOfStars);\n+            }\n+            return false;\n+        });\n+\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            binding.ratingBar1.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n+        // See https://stackoverflow.com/questions/44342481\n+        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n+            try {\n+                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n+                field.setAccessible(true);\n+                field.set(binding.ratingBar1, 0.6f);\n+                field.set(binding.ratingBar2, 0.6f);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                Timber.e(e);\n+            }\n+        }\n     }\n \n-    private int calculateColumns(int widthOfStar) {\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n     }\n }\n", "next_change": {"commit": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..c351744f9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,140 +17,122 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.os.Build;\n-import android.view.MotionEvent;\n-import android.view.View;\n-import android.widget.AbsSeekBar;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n-\n-import java.lang.reflect.Field;\n-\n-import timber.log.Timber;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    RatingWidgetAnswerBinding binding;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+\n+    final GridLayout gridLayout;\n+    Integer answer;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n \n-        if (prompt.isReadOnly()) {\n-            binding.ratingBar1.setEnabled(false);\n-            binding.ratingBar2.setEnabled(false);\n-        } else {\n-            setUpRatingBar(maxNumberOfStars);\n-        }\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n             }\n         }\n-        return answerView;\n-    }\n \n-    @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    @Override\n-    public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n-    }\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n-    @Override\n-    public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n-    }\n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-    @SuppressLint(\"ClickableViewAccessibility\")\n-    private void setUpRatingBar(int maxNumberOfStars) {\n-        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n-        binding.ratingBar1.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar2.setRating(0);\n-            }\n-            return false;\n-        });\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        binding.ratingBar2.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar1.setRating(maxNumberOfStars);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-            return false;\n-        });\n+            answer = position + 1;\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0);\n-            binding.ratingBar1.setRating(rating);\n             widgetValueChanged();\n         });\n+        return imageButton;\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    @Override\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        return answer != null ? new IntegerData(answer) : null;\n+    }\n \n-        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n-        // See https://stackoverflow.com/questions/44342481\n-        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n-            try {\n-                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n-                field.setAccessible(true);\n-                field.set(binding.ratingBar1, 0.6f);\n-                field.set(binding.ratingBar2, 0.6f);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                Timber.e(e);\n+    @Override\n+    public void clearAnswer() {\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n             }\n         }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex c351744f9..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,122 +17,140 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n-\n-import androidx.core.content.ContextCompat;\n+import android.os.Build;\n+import android.view.MotionEvent;\n+import android.view.View;\n+import android.widget.AbsSeekBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n+\n+import java.lang.reflect.Field;\n+\n+import timber.log.Timber;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-\n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-\n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n-\n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n-\n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n-\n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n+\n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n+        } else {\n+            binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n+        }\n \n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n         }\n-    }\n \n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n+        if (prompt.getAnswerText() != null) {\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n             }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        }\n+        return answerView;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n+        binding.ratingBar1.setRating(0.0F);\n+    }\n+\n+    @SuppressLint(\"ClickableViewAccessibility\")\n+    private void setUpRatingBar(int maxNumberOfStars) {\n+        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n+        binding.ratingBar1.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar2.setRating(0);\n             }\n-        }\n+            return false;\n+        });\n+\n+        binding.ratingBar2.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar1.setRating(maxNumberOfStars);\n+            }\n+            return false;\n+        });\n \n-        answer = null;\n-        widgetValueChanged();\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            binding.ratingBar1.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n+        // See https://stackoverflow.com/questions/44342481\n+        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n+            try {\n+                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n+                field.setAccessible(true);\n+                field.set(binding.ratingBar1, 0.6f);\n+                field.set(binding.ratingBar2, 0.6f);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                Timber.e(e);\n+            }\n+        }\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n     }\n }\n", "next_change": {"commit": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..95c39bebe 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -146,7 +146,7 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+        return (int) ((ScreenUtils.getScreenWidth(getContext()) - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n                 / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "message": "Merge commit", "committedDate": null}, {"oid": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "committedDate": "2020-11-06 12:03:46 +0000", "message": "Revert \"Reworking Rating Widget\""}, {"oid": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "committedDate": "2020-11-06 19:16:20 +0530", "message": "Revert \"Revert \"Reworking Rating Widget\"\""}, {"oid": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "committedDate": "2022-06-29 11:01:10 +0200", "message": "Moved mapbox code to new module"}, {"oid": "0bc622839cde2df40a9012b6fa435b6630825f42", "committedDate": "2022-09-28 14:16:53 +0100", "message": "Allow code to be executed in constructor before rendering widget"}]}, {"oid": "25f6dc25ee36f51487563156a3399a4c578b769a", "url": "https://github.com/getodk/collect/commit/25f6dc25ee36f51487563156a3399a4c578b769a", "message": "refactor gradle file", "committedDate": "2020-07-06T10:59:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUzNzY2MA==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451537660", "body": "You have two blank lines here please remove one.", "bodyText": "You have two blank lines here please remove one.", "bodyHTML": "<p dir=\"auto\">You have two blank lines here please remove one.</p>", "author": "grzesiek2010", "createdAt": "2020-07-08T13:19:31Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,91 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n ", "originalCommit": "25f6dc25ee36f51487563156a3399a4c578b769a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 377090d76..a60489839 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -42,63 +42,75 @@ public class RatingWidget extends QuestionWidget {\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns(48);\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        if (rows == 1) {\n-            binding.ratingBar.setVisibility(VISIBLE);\n-            this.ratingBar = binding.ratingBar;\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n-            binding.ratingBar.setVisibility(GONE);\n-            columns = calculateColumns(36);\n-            rows = (int) Math.ceil((double) numberOfStars / columns);\n-            if (rows == 1) {\n-                binding.ratingBar2.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar2;\n-            } else {\n-                binding.ratingBar3.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar3;\n-            }\n+            binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n         }\n \n-        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        ratingBar.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(rating);\n+            binding.ratingBar2.setRating(0.0F);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n \n         if (prompt.getAnswerText() != null) {\n-            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n         }\n         return answerView;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        ratingBar.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        ratingBar.setRating(0.0F);\n+        binding.ratingBar1.setRating(0.0F);\n     }\n \n-    protected RatingBar getRatingBar() {\n-        return ratingBar;\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n-    private int calculateColumns(int widthOfStar) {\n-        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n-                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n     }\n }\n", "next_change": {"commit": "35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex a60489839..f98fefbf4 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,100 +17,121 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.view.View;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    RatingWidgetAnswerBinding binding;\n+    final GridLayout gridLayout;\n+    Integer answer;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n+\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n+            }\n         }\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(rating);\n-            binding.ratingBar2.setRating(0.0F);\n-            widgetValueChanged();\n-        });\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n-        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-        }\n-        return answerView;\n+            answer = position + 1;\n+\n+            widgetValueChanged();\n+        });\n+        return imageButton;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return answer != null ? new IntegerData(answer) : null;\n     }\n \n     @Override\n     public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n+            }\n+        }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6bb71d8a150b39dc0419cf94839ed2364021fe52", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f98fefbf4..16f698824 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,121 +17,90 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n \n-        renderGrid(context, numberOfStars, columns, rows);\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n             }\n         }\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n-\n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n-\n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.getAnswerText() != null) {\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n-    }\n-\n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n-            }\n-        }\n-\n-        answer = null;\n-        widgetValueChanged();\n+        ratingBar.setRating(0.0F);\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    protected RatingBar getRatingBar() {\n+        return ratingBar;\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int calculateColumns(int widthOfStar) {\n+        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n+                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n     }\n }\n", "next_change": {"commit": "32ea188912d6279747bced50dc3ad50790b4bb6f", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 16f698824..2a16efd36 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -44,63 +44,69 @@ public class RatingWidget extends QuestionWidget {\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-\n         RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n         int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns(48);\n \n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-        if (rows == 1) {\n-            binding.ratingBar.setVisibility(VISIBLE);\n-            this.ratingBar = binding.ratingBar;\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n-            binding.ratingBar.setVisibility(GONE);\n-            columns = calculateColumns(36);\n-            rows = (int) Math.ceil((double) numberOfStars / columns);\n-            if (rows == 1) {\n-                binding.ratingBar2.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar2;\n-            } else {\n-                binding.ratingBar3.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar3;\n-            }\n+            binding.ratingBar1.setNumStars(numberOfStars);\n         }\n \n-        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        ratingBar.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n \n         if (prompt.getAnswerText() != null) {\n-            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n         }\n         return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        ratingBar.setOnLongClickListener(l);\n+        binding.ratingBar1.setOnLongClickListener(l);\n+        binding.ratingBar2.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n+        return binding.ratingBar1.getRating() == 0.0F ? null :\n+                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        ratingBar.setRating(0.0F);\n-    }\n-\n-    protected RatingBar getRatingBar() {\n-        return ratingBar;\n+        binding.ratingBar1.setRating(0.0F);\n     }\n \n-    private int calculateColumns(int widthOfStar) {\n-        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n-                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n+    protected RatingWidgetAnswerBinding getBinding() {\n+        return binding;\n     }\n }\n", "next_change": {"commit": "ea7cd1ae54063565223afa7e3aacc6955d5a4606", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 2a16efd36..f4e97bef9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -105,8 +107,4 @@ public class RatingWidget extends QuestionWidget {\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n-\n-    protected RatingWidgetAnswerBinding getBinding() {\n-        return binding;\n-    }\n }\n", "next_change": {"commit": "ff87f43f08b4475f9cef0e3bcf381900aecc57a0", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f4e97bef9..d74916d2b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -92,19 +86,29 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar1.setOnLongClickListener(l);\n-        binding.ratingBar2.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F ? null :\n-                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n+\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    }\n+\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 377090d76..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -42,63 +48,109 @@ public class RatingWidget extends QuestionWidget {\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns(48);\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        if (rows == 1) {\n-            binding.ratingBar.setVisibility(VISIBLE);\n-            this.ratingBar = binding.ratingBar;\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n-            binding.ratingBar.setVisibility(GONE);\n-            columns = calculateColumns(36);\n-            rows = (int) Math.ceil((double) numberOfStars / columns);\n-            if (rows == 1) {\n-                binding.ratingBar2.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar2;\n-            } else {\n-                binding.ratingBar3.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar3;\n-            }\n+            binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n         }\n \n-        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        ratingBar.setEnabled(!prompt.isReadOnly());\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n+        }\n \n         if (prompt.getAnswerText() != null) {\n-            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n         }\n         return answerView;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        ratingBar.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        ratingBar.setRating(0.0F);\n+        binding.ratingBar1.setRating(0.0F);\n+    }\n+\n+    @SuppressLint(\"ClickableViewAccessibility\")\n+    private void setUpRatingBar(int maxNumberOfStars) {\n+        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n+        binding.ratingBar1.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar2.setRating(0);\n+            }\n+            return false;\n+        });\n+\n+        binding.ratingBar2.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar1.setRating(maxNumberOfStars);\n+            }\n+            return false;\n+        });\n+\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            binding.ratingBar1.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n+        // See https://stackoverflow.com/questions/44342481\n+        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n+            try {\n+                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n+                field.setAccessible(true);\n+                field.set(binding.ratingBar1, 0.6f);\n+                field.set(binding.ratingBar2, 0.6f);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                Timber.e(e);\n+            }\n+        }\n     }\n \n-    protected RatingBar getRatingBar() {\n-        return ratingBar;\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n-    private int calculateColumns(int widthOfStar) {\n-        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n-                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n     }\n }\n", "next_change": {"commit": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..c351744f9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,140 +17,122 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.os.Build;\n-import android.view.MotionEvent;\n-import android.view.View;\n-import android.widget.AbsSeekBar;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n-\n-import java.lang.reflect.Field;\n-\n-import timber.log.Timber;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    RatingWidgetAnswerBinding binding;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+\n+    final GridLayout gridLayout;\n+    Integer answer;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n \n-        if (prompt.isReadOnly()) {\n-            binding.ratingBar1.setEnabled(false);\n-            binding.ratingBar2.setEnabled(false);\n-        } else {\n-            setUpRatingBar(maxNumberOfStars);\n-        }\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n             }\n         }\n-        return answerView;\n-    }\n \n-    @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    @Override\n-    public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n-    }\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n-    @Override\n-    public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n-    }\n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-    @SuppressLint(\"ClickableViewAccessibility\")\n-    private void setUpRatingBar(int maxNumberOfStars) {\n-        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n-        binding.ratingBar1.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar2.setRating(0);\n-            }\n-            return false;\n-        });\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        binding.ratingBar2.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar1.setRating(maxNumberOfStars);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-            return false;\n-        });\n+            answer = position + 1;\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0);\n-            binding.ratingBar1.setRating(rating);\n             widgetValueChanged();\n         });\n+        return imageButton;\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    @Override\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        return answer != null ? new IntegerData(answer) : null;\n+    }\n \n-        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n-        // See https://stackoverflow.com/questions/44342481\n-        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n-            try {\n-                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n-                field.setAccessible(true);\n-                field.set(binding.ratingBar1, 0.6f);\n-                field.set(binding.ratingBar2, 0.6f);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                Timber.e(e);\n+    @Override\n+    public void clearAnswer() {\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n             }\n         }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex c351744f9..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,122 +17,140 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n-\n-import androidx.core.content.ContextCompat;\n+import android.os.Build;\n+import android.view.MotionEvent;\n+import android.view.View;\n+import android.widget.AbsSeekBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n+\n+import java.lang.reflect.Field;\n+\n+import timber.log.Timber;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-\n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-\n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n-\n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n-\n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n-\n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n+\n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n+        } else {\n+            binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n+        }\n \n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n         }\n-    }\n \n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n+        if (prompt.getAnswerText() != null) {\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n             }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        }\n+        return answerView;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n+        binding.ratingBar1.setRating(0.0F);\n+    }\n+\n+    @SuppressLint(\"ClickableViewAccessibility\")\n+    private void setUpRatingBar(int maxNumberOfStars) {\n+        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n+        binding.ratingBar1.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar2.setRating(0);\n             }\n-        }\n+            return false;\n+        });\n+\n+        binding.ratingBar2.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar1.setRating(maxNumberOfStars);\n+            }\n+            return false;\n+        });\n \n-        answer = null;\n-        widgetValueChanged();\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            binding.ratingBar1.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n+        // See https://stackoverflow.com/questions/44342481\n+        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n+            try {\n+                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n+                field.setAccessible(true);\n+                field.set(binding.ratingBar1, 0.6f);\n+                field.set(binding.ratingBar2, 0.6f);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                Timber.e(e);\n+            }\n+        }\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n     }\n }\n", "next_change": {"commit": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..95c39bebe 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -146,7 +146,7 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+        return (int) ((ScreenUtils.getScreenWidth(getContext()) - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n                 / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "message": "Merge commit", "committedDate": null}, {"oid": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "committedDate": "2020-11-06 12:03:46 +0000", "message": "Revert \"Reworking Rating Widget\""}, {"oid": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "committedDate": "2020-11-06 19:16:20 +0530", "message": "Revert \"Revert \"Reworking Rating Widget\"\""}, {"oid": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "committedDate": "2022-06-29 11:01:10 +0200", "message": "Moved mapbox code to new module"}, {"oid": "0bc622839cde2df40a9012b6fa435b6630825f42", "committedDate": "2022-09-28 14:16:53 +0100", "message": "Allow code to be executed in constructor before rendering widget"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU0NTY2NA==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451545664", "body": "This is just for tests right? I would change access modifier (of the field) to package-private and use that field directly without any getter method like this one.", "bodyText": "This is just for tests right? I would change access modifier (of the field) to package-private and use that field directly without any getter method like this one.", "bodyHTML": "<p dir=\"auto\">This is just for tests right? I would change access modifier (of the field) to package-private and use that field directly without any getter method like this one.</p>", "author": "grzesiek2010", "createdAt": "2020-07-08T13:30:52Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -17,69 +17,89 @@\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n import android.util.DisplayMetrics;\n import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.R;\n import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    private RatingWidgetAnswerBinding binding;\n+    private RatingBar ratingBar;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-        binding.ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        binding.ratingBar.setStepSize(1.0F);\n     }\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-        binding.ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        binding.ratingBar.setEnabled(!prompt.isReadOnly());\n+\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n+\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n+            }\n+        }\n+\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n         if (prompt.getAnswerText() != null) {\n-            binding.ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n         return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar.setOnLongClickListener(l);\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar.getRating() == 0.0F ? null : new IntegerData((int) binding.ratingBar.getRating());\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        binding.ratingBar.setRating(0.0F);\n+        ratingBar.setRating(0.0F);\n     }\n \n-    protected RatingWidgetAnswerBinding getBinding() {\n-        return binding;\n+    protected RatingBar getRatingBar() {", "originalCommit": "35dbc239935239af8b99df525fc63209b85c9c37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1MDUxNw==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r452050517", "bodyText": "Thanks @grzesiek2010! That's a better approach.", "author": "SaumiaSinghal", "createdAt": "2020-07-09T08:27:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU0NTY2NA=="}], "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 92366b7ca..a60489839 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -42,69 +42,75 @@ public class RatingWidget extends QuestionWidget {\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns(48);\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        if (rows == 1) {\n-            binding.ratingBar.setVisibility(VISIBLE);\n-            this.ratingBar = binding.ratingBar;\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n-            binding.ratingBar.setVisibility(GONE);\n-            columns = calculateColumns(36);\n-            rows = (int) Math.ceil((double) numberOfStars / columns);\n-            if (rows == 1) {\n-                binding.ratingBar2.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar2;\n-            } else {\n-                binding.ratingBar3.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar3;\n-            }\n+            binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n         }\n \n-        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        ratingBar.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(rating);\n+            binding.ratingBar2.setRating(0.0F);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n \n         if (prompt.getAnswerText() != null) {\n-            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n         }\n         return answerView;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        ratingBar.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        ratingBar.setRating(0.0F);\n-    }\n-\n-    protected RatingBar getRatingBar() {\n-        return ratingBar;\n+        binding.ratingBar1.setRating(0.0F);\n     }\n \n-    private int calculateColumns(int widthOfStar) {\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n     }\n }\n", "next_change": {"commit": "35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex a60489839..f98fefbf4 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,100 +17,121 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.view.View;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    RatingWidgetAnswerBinding binding;\n+    final GridLayout gridLayout;\n+    Integer answer;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n+\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n+            }\n         }\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(rating);\n-            binding.ratingBar2.setRating(0.0F);\n-            widgetValueChanged();\n-        });\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n-        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-        }\n-        return answerView;\n+            answer = position + 1;\n+\n+            widgetValueChanged();\n+        });\n+        return imageButton;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return answer != null ? new IntegerData(answer) : null;\n     }\n \n     @Override\n     public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n+            }\n+        }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6bb71d8a150b39dc0419cf94839ed2364021fe52", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f98fefbf4..16f698824 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,121 +17,90 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n \n-        renderGrid(context, numberOfStars, columns, rows);\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n             }\n         }\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n-\n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n-\n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.getAnswerText() != null) {\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n-    }\n-\n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n-            }\n-        }\n-\n-        answer = null;\n-        widgetValueChanged();\n+        ratingBar.setRating(0.0F);\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    protected RatingBar getRatingBar() {\n+        return ratingBar;\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int calculateColumns(int widthOfStar) {\n+        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n+                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n     }\n }\n", "next_change": {"commit": "32ea188912d6279747bced50dc3ad50790b4bb6f", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 16f698824..2a16efd36 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -44,63 +44,69 @@ public class RatingWidget extends QuestionWidget {\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-\n         RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n         int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns(48);\n \n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-        if (rows == 1) {\n-            binding.ratingBar.setVisibility(VISIBLE);\n-            this.ratingBar = binding.ratingBar;\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n-            binding.ratingBar.setVisibility(GONE);\n-            columns = calculateColumns(36);\n-            rows = (int) Math.ceil((double) numberOfStars / columns);\n-            if (rows == 1) {\n-                binding.ratingBar2.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar2;\n-            } else {\n-                binding.ratingBar3.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar3;\n-            }\n+            binding.ratingBar1.setNumStars(numberOfStars);\n         }\n \n-        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        ratingBar.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n \n         if (prompt.getAnswerText() != null) {\n-            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n         }\n         return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        ratingBar.setOnLongClickListener(l);\n+        binding.ratingBar1.setOnLongClickListener(l);\n+        binding.ratingBar2.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n+        return binding.ratingBar1.getRating() == 0.0F ? null :\n+                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        ratingBar.setRating(0.0F);\n-    }\n-\n-    protected RatingBar getRatingBar() {\n-        return ratingBar;\n+        binding.ratingBar1.setRating(0.0F);\n     }\n \n-    private int calculateColumns(int widthOfStar) {\n-        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n-                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n+    protected RatingWidgetAnswerBinding getBinding() {\n+        return binding;\n     }\n }\n", "next_change": {"commit": "ea7cd1ae54063565223afa7e3aacc6955d5a4606", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 2a16efd36..f4e97bef9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -105,8 +107,4 @@ public class RatingWidget extends QuestionWidget {\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n-\n-    protected RatingWidgetAnswerBinding getBinding() {\n-        return binding;\n-    }\n }\n", "next_change": {"commit": "ff87f43f08b4475f9cef0e3bcf381900aecc57a0", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f4e97bef9..d74916d2b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -92,19 +86,29 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar1.setOnLongClickListener(l);\n-        binding.ratingBar2.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F ? null :\n-                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n+\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    }\n+\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 92366b7ca..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -42,69 +48,109 @@ public class RatingWidget extends QuestionWidget {\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns(48);\n-\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-        if (rows == 1) {\n-            binding.ratingBar.setVisibility(VISIBLE);\n-            this.ratingBar = binding.ratingBar;\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n-            binding.ratingBar.setVisibility(GONE);\n-            columns = calculateColumns(36);\n-            rows = (int) Math.ceil((double) numberOfStars / columns);\n-            if (rows == 1) {\n-                binding.ratingBar2.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar2;\n-            } else {\n-                binding.ratingBar3.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar3;\n-            }\n+            binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n         }\n \n-        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        ratingBar.setEnabled(!prompt.isReadOnly());\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n+        }\n \n         if (prompt.getAnswerText() != null) {\n-            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n         }\n         return answerView;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        ratingBar.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        ratingBar.setRating(0.0F);\n+        binding.ratingBar1.setRating(0.0F);\n     }\n \n-    protected RatingBar getRatingBar() {\n-        return ratingBar;\n+    @SuppressLint(\"ClickableViewAccessibility\")\n+    private void setUpRatingBar(int maxNumberOfStars) {\n+        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n+        binding.ratingBar1.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar2.setRating(0);\n+            }\n+            return false;\n+        });\n+\n+        binding.ratingBar2.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar1.setRating(maxNumberOfStars);\n+            }\n+            return false;\n+        });\n+\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            binding.ratingBar1.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n+        // See https://stackoverflow.com/questions/44342481\n+        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n+            try {\n+                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n+                field.setAccessible(true);\n+                field.set(binding.ratingBar1, 0.6f);\n+                field.set(binding.ratingBar2, 0.6f);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                Timber.e(e);\n+            }\n+        }\n     }\n \n-    private int calculateColumns(int widthOfStar) {\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n     }\n }\n", "next_change": {"commit": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..c351744f9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,140 +17,122 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.os.Build;\n-import android.view.MotionEvent;\n-import android.view.View;\n-import android.widget.AbsSeekBar;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n-\n-import java.lang.reflect.Field;\n-\n-import timber.log.Timber;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    RatingWidgetAnswerBinding binding;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+\n+    final GridLayout gridLayout;\n+    Integer answer;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n \n-        if (prompt.isReadOnly()) {\n-            binding.ratingBar1.setEnabled(false);\n-            binding.ratingBar2.setEnabled(false);\n-        } else {\n-            setUpRatingBar(maxNumberOfStars);\n-        }\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n             }\n         }\n-        return answerView;\n-    }\n \n-    @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    @Override\n-    public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n-    }\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n-    @Override\n-    public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n-    }\n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-    @SuppressLint(\"ClickableViewAccessibility\")\n-    private void setUpRatingBar(int maxNumberOfStars) {\n-        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n-        binding.ratingBar1.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar2.setRating(0);\n-            }\n-            return false;\n-        });\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        binding.ratingBar2.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar1.setRating(maxNumberOfStars);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-            return false;\n-        });\n+            answer = position + 1;\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0);\n-            binding.ratingBar1.setRating(rating);\n             widgetValueChanged();\n         });\n+        return imageButton;\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    @Override\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        return answer != null ? new IntegerData(answer) : null;\n+    }\n \n-        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n-        // See https://stackoverflow.com/questions/44342481\n-        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n-            try {\n-                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n-                field.setAccessible(true);\n-                field.set(binding.ratingBar1, 0.6f);\n-                field.set(binding.ratingBar2, 0.6f);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                Timber.e(e);\n+    @Override\n+    public void clearAnswer() {\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n             }\n         }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex c351744f9..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,122 +17,140 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n-\n-import androidx.core.content.ContextCompat;\n+import android.os.Build;\n+import android.view.MotionEvent;\n+import android.view.View;\n+import android.widget.AbsSeekBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n+\n+import java.lang.reflect.Field;\n+\n+import timber.log.Timber;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-\n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-\n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n-\n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n-\n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n-\n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n+\n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n+        } else {\n+            binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n+        }\n \n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n         }\n-    }\n \n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n+        if (prompt.getAnswerText() != null) {\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n             }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        }\n+        return answerView;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n+        binding.ratingBar1.setRating(0.0F);\n+    }\n+\n+    @SuppressLint(\"ClickableViewAccessibility\")\n+    private void setUpRatingBar(int maxNumberOfStars) {\n+        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n+        binding.ratingBar1.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar2.setRating(0);\n             }\n-        }\n+            return false;\n+        });\n+\n+        binding.ratingBar2.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar1.setRating(maxNumberOfStars);\n+            }\n+            return false;\n+        });\n \n-        answer = null;\n-        widgetValueChanged();\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            binding.ratingBar1.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n+        // See https://stackoverflow.com/questions/44342481\n+        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n+            try {\n+                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n+                field.setAccessible(true);\n+                field.set(binding.ratingBar1, 0.6f);\n+                field.set(binding.ratingBar2, 0.6f);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                Timber.e(e);\n+            }\n+        }\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n     }\n }\n", "next_change": {"commit": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..95c39bebe 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -146,7 +146,7 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+        return (int) ((ScreenUtils.getScreenWidth(getContext()) - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n                 / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "message": "Merge commit", "committedDate": null}, {"oid": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "committedDate": "2020-11-06 12:03:46 +0000", "message": "Revert \"Reworking Rating Widget\""}, {"oid": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "committedDate": "2020-11-06 19:16:20 +0530", "message": "Revert \"Revert \"Reworking Rating Widget\"\""}, {"oid": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "committedDate": "2022-06-29 11:01:10 +0200", "message": "Moved mapbox code to new module"}, {"oid": "0bc622839cde2df40a9012b6fa435b6630825f42", "committedDate": "2022-09-28 14:16:53 +0100", "message": "Allow code to be executed in constructor before rendering widget"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU0OTIwMA==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451549200", "body": "Why do we need this extra field at all? Why can't you use binding.ratingBar everywhere?", "bodyText": "Why do we need this extra field at all? Why can't you use binding.ratingBar everywhere?", "bodyHTML": "<p dir=\"auto\">Why do we need this extra field at all? Why can't you use binding.ratingBar everywhere?</p>", "author": "grzesiek2010", "createdAt": "2020-07-08T13:36:06Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -17,69 +17,89 @@\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n import android.util.DisplayMetrics;\n import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.R;\n import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    private RatingWidgetAnswerBinding binding;\n+    private RatingBar ratingBar;", "originalCommit": "35dbc239935239af8b99df525fc63209b85c9c37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 92366b7ca..a60489839 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -27,14 +25,16 @@ import org.javarosa.core.model.data.IntegerData;\n import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.utilities.ScreenUtils;\n import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    private RatingBar ratingBar;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n", "next_change": {"commit": "32ecc694ff96cc73ee9aa268a291feda2fdcb4ba", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex a60489839..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -28,9 +31,12 @@ import org.odk.collect.android.formentry.questions.QuestionDetails;\n import org.odk.collect.android.utilities.ScreenUtils;\n import org.odk.collect.android.utilities.UiUtils;\n \n+import java.lang.reflect.Field;\n+\n+import timber.log.Timber;\n+\n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-\n     private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n     private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n", "next_change": {"commit": "35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..f98fefbf4 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,140 +17,121 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.os.Build;\n-import android.view.MotionEvent;\n-import android.view.View;\n-import android.widget.AbsSeekBar;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n-\n-import java.lang.reflect.Field;\n-\n-import timber.log.Timber;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    RatingWidgetAnswerBinding binding;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails) {\n+    final GridLayout gridLayout;\n+    Integer answer;\n+\n+    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n-        }\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n \n-        if (prompt.isReadOnly()) {\n-            binding.ratingBar1.setEnabled(false);\n-            binding.ratingBar2.setEnabled(false);\n-        } else {\n-            setUpRatingBar(maxNumberOfStars);\n-        }\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n             }\n         }\n-        return answerView;\n-    }\n \n-    @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    @Override\n-    public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n-    }\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n-    @Override\n-    public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n-    }\n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-    @SuppressLint(\"ClickableViewAccessibility\")\n-    private void setUpRatingBar(int maxNumberOfStars) {\n-        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n-        binding.ratingBar1.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar2.setRating(0);\n-            }\n-            return false;\n-        });\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        binding.ratingBar2.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar1.setRating(maxNumberOfStars);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-            return false;\n-        });\n+            answer = position + 1;\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0);\n-            binding.ratingBar1.setRating(rating);\n             widgetValueChanged();\n         });\n+        return imageButton;\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    @Override\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        return answer != null ? new IntegerData(answer) : null;\n+    }\n \n-        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n-        // See https://stackoverflow.com/questions/44342481\n-        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n-            try {\n-                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n-                field.setAccessible(true);\n-                field.set(binding.ratingBar1, 0.6f);\n-                field.set(binding.ratingBar2, 0.6f);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                Timber.e(e);\n+    @Override\n+    public void clearAnswer() {\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n             }\n         }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6bb71d8a150b39dc0419cf94839ed2364021fe52", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f98fefbf4..16f698824 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,121 +17,90 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n \n-        renderGrid(context, numberOfStars, columns, rows);\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n             }\n         }\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n-\n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n-\n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.getAnswerText() != null) {\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n-    }\n-\n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n-            }\n-        }\n-\n-        answer = null;\n-        widgetValueChanged();\n+        ratingBar.setRating(0.0F);\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    protected RatingBar getRatingBar() {\n+        return ratingBar;\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int calculateColumns(int widthOfStar) {\n+        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n+                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n     }\n }\n", "next_change": {"commit": "32ea188912d6279747bced50dc3ad50790b4bb6f", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 16f698824..2a16efd36 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -44,63 +44,69 @@ public class RatingWidget extends QuestionWidget {\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-\n         RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n         int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns(48);\n \n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-        if (rows == 1) {\n-            binding.ratingBar.setVisibility(VISIBLE);\n-            this.ratingBar = binding.ratingBar;\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n-            binding.ratingBar.setVisibility(GONE);\n-            columns = calculateColumns(36);\n-            rows = (int) Math.ceil((double) numberOfStars / columns);\n-            if (rows == 1) {\n-                binding.ratingBar2.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar2;\n-            } else {\n-                binding.ratingBar3.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar3;\n-            }\n+            binding.ratingBar1.setNumStars(numberOfStars);\n         }\n \n-        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        ratingBar.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n \n         if (prompt.getAnswerText() != null) {\n-            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n         }\n         return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        ratingBar.setOnLongClickListener(l);\n+        binding.ratingBar1.setOnLongClickListener(l);\n+        binding.ratingBar2.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n+        return binding.ratingBar1.getRating() == 0.0F ? null :\n+                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        ratingBar.setRating(0.0F);\n-    }\n-\n-    protected RatingBar getRatingBar() {\n-        return ratingBar;\n+        binding.ratingBar1.setRating(0.0F);\n     }\n \n-    private int calculateColumns(int widthOfStar) {\n-        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n-                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n+    protected RatingWidgetAnswerBinding getBinding() {\n+        return binding;\n     }\n }\n", "next_change": {"commit": "ea7cd1ae54063565223afa7e3aacc6955d5a4606", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 2a16efd36..f4e97bef9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -105,8 +107,4 @@ public class RatingWidget extends QuestionWidget {\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n-\n-    protected RatingWidgetAnswerBinding getBinding() {\n-        return binding;\n-    }\n }\n", "next_change": {"commit": "ff87f43f08b4475f9cef0e3bcf381900aecc57a0", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f4e97bef9..d74916d2b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -92,19 +86,29 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar1.setOnLongClickListener(l);\n-        binding.ratingBar2.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F ? null :\n-                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n+\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    }\n+\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 92366b7ca..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -27,14 +28,19 @@ import org.javarosa.core.model.data.IntegerData;\n import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.utilities.ScreenUtils;\n import org.odk.collect.android.utilities.UiUtils;\n \n+import java.lang.reflect.Field;\n+\n+import timber.log.Timber;\n+\n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-\n-    private RatingBar ratingBar;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n", "next_change": {"commit": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..c351744f9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,140 +17,122 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.os.Build;\n-import android.view.MotionEvent;\n-import android.view.View;\n-import android.widget.AbsSeekBar;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n-\n-import java.lang.reflect.Field;\n-\n-import timber.log.Timber;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    RatingWidgetAnswerBinding binding;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+\n+    final GridLayout gridLayout;\n+    Integer answer;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n \n-        if (prompt.isReadOnly()) {\n-            binding.ratingBar1.setEnabled(false);\n-            binding.ratingBar2.setEnabled(false);\n-        } else {\n-            setUpRatingBar(maxNumberOfStars);\n-        }\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n             }\n         }\n-        return answerView;\n-    }\n \n-    @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    @Override\n-    public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n-    }\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n-    @Override\n-    public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n-    }\n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-    @SuppressLint(\"ClickableViewAccessibility\")\n-    private void setUpRatingBar(int maxNumberOfStars) {\n-        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n-        binding.ratingBar1.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar2.setRating(0);\n-            }\n-            return false;\n-        });\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        binding.ratingBar2.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar1.setRating(maxNumberOfStars);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-            return false;\n-        });\n+            answer = position + 1;\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0);\n-            binding.ratingBar1.setRating(rating);\n             widgetValueChanged();\n         });\n+        return imageButton;\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    @Override\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        return answer != null ? new IntegerData(answer) : null;\n+    }\n \n-        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n-        // See https://stackoverflow.com/questions/44342481\n-        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n-            try {\n-                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n-                field.setAccessible(true);\n-                field.set(binding.ratingBar1, 0.6f);\n-                field.set(binding.ratingBar2, 0.6f);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                Timber.e(e);\n+    @Override\n+    public void clearAnswer() {\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n             }\n         }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex c351744f9..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,122 +17,140 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n-\n-import androidx.core.content.ContextCompat;\n+import android.os.Build;\n+import android.view.MotionEvent;\n+import android.view.View;\n+import android.widget.AbsSeekBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n+\n+import java.lang.reflect.Field;\n+\n+import timber.log.Timber;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-\n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-\n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n-\n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n-\n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n-\n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n+\n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n+        } else {\n+            binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n+        }\n \n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n         }\n-    }\n \n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n+        if (prompt.getAnswerText() != null) {\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n             }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        }\n+        return answerView;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n+        binding.ratingBar1.setRating(0.0F);\n+    }\n+\n+    @SuppressLint(\"ClickableViewAccessibility\")\n+    private void setUpRatingBar(int maxNumberOfStars) {\n+        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n+        binding.ratingBar1.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar2.setRating(0);\n             }\n-        }\n+            return false;\n+        });\n+\n+        binding.ratingBar2.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar1.setRating(maxNumberOfStars);\n+            }\n+            return false;\n+        });\n \n-        answer = null;\n-        widgetValueChanged();\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            binding.ratingBar1.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n+        // See https://stackoverflow.com/questions/44342481\n+        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n+            try {\n+                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n+                field.setAccessible(true);\n+                field.set(binding.ratingBar1, 0.6f);\n+                field.set(binding.ratingBar2, 0.6f);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                Timber.e(e);\n+            }\n+        }\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n     }\n }\n", "next_change": {"commit": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..95c39bebe 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -146,7 +146,7 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+        return (int) ((ScreenUtils.getScreenWidth(getContext()) - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n                 / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "message": "Merge commit", "committedDate": null}, {"oid": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "committedDate": "2020-11-06 12:03:46 +0000", "message": "Revert \"Reworking Rating Widget\""}, {"oid": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "committedDate": "2020-11-06 19:16:20 +0530", "message": "Revert \"Revert \"Reworking Rating Widget\"\""}, {"oid": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "committedDate": "2022-06-29 11:01:10 +0200", "message": "Moved mapbox code to new module"}, {"oid": "0bc622839cde2df40a9012b6fa435b6630825f42", "committedDate": "2022-09-28 14:16:53 +0100", "message": "Allow code to be executed in constructor before rendering widget"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU1NjUxMg==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451556512", "body": "Should be returns null not zero right?", "bodyText": "Should be returns null not zero right?", "bodyHTML": "<p dir=\"auto\">Should be returns null not zero right?</p>", "author": "grzesiek2010", "createdAt": "2020-07-08T13:46:31Z", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java", "diffHunk": "@@ -2,60 +2,130 @@\n \n import android.view.View;\n \n-import androidx.annotation.NonNull;\n-\n import org.javarosa.core.model.RangeQuestion;\n-import org.javarosa.core.model.data.IntegerData;\n+import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.listeners.WidgetValueChangedListener;\n+import org.robolectric.RobolectricTestRunner;\n \n import java.math.BigDecimal;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n+\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithRangeQuestionAndAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnlyAndRangeQuestion;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n-public class RatingWidgetTest extends QuestionWidgetTest<RatingWidget, IntegerData> {\n+@RunWith(RobolectricTestRunner.class)\n+public class RatingWidgetTest {\n \n-    private final IntegerData answer = new IntegerData(4);\n+    private RangeQuestion rangeQuestion;\n \n     @Before\n-    public void setUp() throws Exception {\n-        super.setUp();\n+    public void setup() {\n+        rangeQuestion = mock(RangeQuestion.class);\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(5));\n+    }\n+\n+    @Test\n+    public void ratingBarShowsCorrectNumberOfStars() {\n+        RatingWidget widget = createWidget(promptWithReadOnlyAndRangeQuestion(rangeQuestion));\n+        assertThat(widget.getRatingBar().getNumStars(), equalTo(5));\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsZero() {", "originalCommit": "25f6dc25ee36f51487563156a3399a4c578b769a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\nindex 7cde77257..98138381f 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n", "chunk": "@@ -38,52 +38,84 @@ public class RatingWidgetTest {\n     }\n \n     @Test\n-    public void ratingBarShowsCorrectNumberOfStars() {\n-        RatingWidget widget = createWidget(promptWithReadOnlyAndRangeQuestion(rangeQuestion));\n-        assertThat(widget.getRatingBar().getNumStars(), equalTo(5));\n+    public void usingReadOnly_makesAllClickableElementsDisabled() {\n+        RatingWidget widget = createWidget(promptWithReadOnlyAndQuestion(rangeQuestion));\n+        assertThat(widget.binding.ratingBar1.isEnabled(), equalTo(false));\n+        assertThat(widget.binding.ratingBar2.isEnabled(), equalTo(false));\n     }\n \n     @Test\n-    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsZero() {\n-        assertThat(createWidget(promptWithReadOnlyAndRangeQuestion(rangeQuestion)).getAnswer(), nullValue());\n+    public void ratingWidgetShowsCorrectViewForLessNumberOfStars() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(4));\n+        RatingWidget widget = createWidget(promptWithReadOnlyAndQuestion(rangeQuestion));\n+\n+        assertThat(widget.binding.ratingBar1.getNumStars(), equalTo(4));\n+        assertThat(widget.binding.ratingBar1.getMax(), equalTo(4));\n+        assertThat(widget.binding.ratingBar2.getVisibility(), equalTo(View.GONE));\n+    }\n+\n+    @Test\n+    public void ratingWidgetShowsCorrectViewForMoreNumberOfStars() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(8));\n+        RatingWidget widget = createWidget(promptWithReadOnlyAndQuestion(rangeQuestion));\n+\n+        assertThat(widget.binding.ratingBar1.getNumStars(), equalTo(5));\n+        assertThat(widget.binding.ratingBar1.getMax(), equalTo(5));\n+        assertThat(widget.binding.ratingBar2.getVisibility(), equalTo(View.VISIBLE));\n+        assertThat(widget.binding.ratingBar2.getNumStars(), equalTo(3));\n+        assertThat(widget.binding.ratingBar2.getMax(), equalTo(3));\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithReadOnlyAndQuestion(rangeQuestion)).getAnswer(), nullValue());\n     }\n \n     @Test\n     public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n-        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n-        assertThat(widget.getAnswer().getValue(), equalTo(3));\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"7\")));\n+        assertThat(widget.getAnswer().getValue(), equalTo(7));\n     }\n \n     @Test\n     public void whenPromptDoesNotHaveAnswer_noStarsAreHighlightedOnRatingBar() {\n-        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, null));\n-        assertThat(widget.getRatingBar().getRating(), equalTo(0.0F));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n+\n+        assertThat(widget.binding.ratingBar1.getRating(), equalTo(0.0F));\n+        assertThat(widget.binding.ratingBar2.getRating(), equalTo(0.0F));\n     }\n \n     @Test\n-    public void whenPromptHasAnswer_correctNumberOfStarsAreHighlightedOnRatingBar() {\n-        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n-        assertThat(widget.getRatingBar().getRating(), equalTo(3.0F));\n+    public void whenPromptHasAnswer_correctNumberOfStarsAreHighlighted_forSmallerRatingBar() {\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n+\n+        assertThat(widget.binding.ratingBar1.getRating(), equalTo(3.0F));\n+        assertThat(widget.binding.ratingBar2.getRating(), equalTo(0.0F));\n     }\n \n     @Test\n-    public void usingReadOnly_makesAllClickableElementsDisabled() {\n-        RatingWidget widget = createWidget(promptWithReadOnlyAndRangeQuestion(rangeQuestion));\n-        assertThat(widget.getRatingBar().isEnabled(), equalTo(false));\n+    public void whenPromptHasAnswer_correctNumberOfStarsAreHighlighted_forRatingBarInMultipleLines() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"7\")));\n+\n+        assertThat(widget.binding.ratingBar1.getRating(), equalTo(5.0F));\n+        assertThat(widget.binding.ratingBar2.getRating(), equalTo(2.0F));\n     }\n \n     @Test\n     public void clearAnswer_clearsWidgetAnswer() {\n-        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n         widget.clearAnswer();\n \n         assertThat(widget.getAnswer(), nullValue());\n-        assertThat(widget.getRatingBar().getRating(), equalTo(0.0F));\n+        assertThat(widget.binding.ratingBar1.getRating(), equalTo(0.0F));\n+        assertThat(widget.binding.ratingBar2.getRating(), equalTo(0.0F));\n     }\n \n     @Test\n     public void clearAnswer_callsValueChangeListeners() {\n-        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n         WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n         widget.setValueChangedListener(valueChangedListener);\n         widget.clearAnswer();\n", "next_change": {"commit": "32ecc694ff96cc73ee9aa268a291feda2fdcb4ba", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\nindex 98138381f..87921dbac 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n", "chunk": "@@ -120,32 +158,44 @@ public class RatingWidgetTest {\n         widget.setValueChangedListener(valueChangedListener);\n         widget.clearAnswer();\n \n-        verify(valueChangedListener).widgetValueChanged(widget);\n+        verify(valueChangedListener, atLeastOnce()).widgetValueChanged(widget);\n     }\n \n     @Test\n-    public void changingRating_callsValueChangeListeners() {\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n+    public void changingRating_callsValueChangeListeners_forRatingBarInSingleLine() {\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n         WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n         widget.setValueChangedListener(valueChangedListener);\n         widget.binding.ratingBar1.setRating(4.0F);\n \n-        verify(valueChangedListener).widgetValueChanged(widget);\n+        verify(valueChangedListener, atLeastOnce()).widgetValueChanged(widget);\n     }\n \n     @Test\n-    public void changingRating_updatesAnswer() {\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n-        widget.binding.ratingBar1.setRating(4.0F);\n+    public void changingRating_callsValueChangeListeners_forRatingBarInMultipleLines() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n+        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n+        widget.setValueChangedListener(valueChangedListener);\n+        widget.binding.ratingBar2.setRating(4.0F);\n \n-        assertThat(widget.getAnswer().getValue(), equalTo(4));\n+        verify(valueChangedListener, atLeastOnce()).widgetValueChanged(widget);\n     }\n \n     @Test\n-    public void ratingBar_doesNotAllowUserToSetDecimalRating() {\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n-        widget.binding.ratingBar1.setRating(4.8F);\n-        assertThat(widget.getAnswer().getValue(), equalTo(5));\n+    public void ratingBar_doesNotAllowUserToSetDecimalRating_forRatingBarInSingleLine() {\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n+        widget.binding.ratingBar1.setRating(1.8F);\n+        assertThat(widget.binding.ratingBar1.getRating(), equalTo(2.0F));\n+    }\n+\n+    @Test\n+    public void ratingBar_doesNotAllowUserToSetDecimalRating_forRatingBarInMultipleLines() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n+        widget.binding.ratingBar2.setRating(1.8F);\n+\n+        assertThat(widget.binding.ratingBar2.getRating(), equalTo(2.0F));\n     }\n \n     @Test\n", "next_change": {"commit": "35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\nindex 87921dbac..1a00b1d0e 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n", "chunk": "@@ -38,179 +43,89 @@ public class RatingWidgetTest {\n     @Before\n     public void setup() {\n         rangeQuestion = mock(RangeQuestion.class);\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(5));\n-    }\n-\n-    @Test\n-    public void usingReadOnly_makesAllClickableElementsDisabled() {\n-        RatingWidget widget = createWidget(promptWithReadOnlyAndQuestion(rangeQuestion));\n-        assertThat(widget.binding.ratingBar1.isEnabled(), equalTo(false));\n-        assertThat(widget.binding.ratingBar2.isEnabled(), equalTo(false));\n-    }\n-\n-    @Test\n-    public void ratingWidgetShowsCorrectViewForLessNumberOfStars() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(4));\n-        RatingWidget widget = createWidget(promptWithReadOnlyAndQuestion(rangeQuestion));\n-\n-        assertThat(widget.binding.ratingBar1.getNumStars(), equalTo(4));\n-        assertThat(widget.binding.ratingBar1.getMax(), equalTo(4));\n-        assertThat(widget.binding.ratingBar2.getVisibility(), equalTo(View.GONE));\n-    }\n-\n-    @Test\n-    public void ratingWidgetShowsCorrectViewForMoreNumberOfStars() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(8));\n-        RatingWidget widget = createWidget(promptWithReadOnlyAndQuestion(rangeQuestion));\n-\n-        assertThat(widget.binding.ratingBar1.getNumStars(), equalTo(5));\n-        assertThat(widget.binding.ratingBar1.getMax(), equalTo(5));\n-        assertThat(widget.binding.ratingBar2.getVisibility(), equalTo(View.VISIBLE));\n-        assertThat(widget.binding.ratingBar2.getNumStars(), equalTo(3));\n-        assertThat(widget.binding.ratingBar2.getMax(), equalTo(3));\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(3));\n     }\n \n     @Test\n     public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n-        assertThat(createWidget(promptWithReadOnlyAndQuestion(rangeQuestion)).getAnswer(), nullValue());\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n     }\n \n     @Test\n-    public void getAnswer_whenPromptHasAnswer_returnsAnswer_forRatingBarInSingleLine() {\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n-        assertThat(widget.getAnswer().getValue(), equalTo(3));\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        RatingWidget widget = createWidget(promptWithAnswer(new StringData(\"1\")));\n+        assertThat(widget.getAnswer().getValue(), equalTo(1));\n     }\n \n     @Test\n-    public void getAnswer_whenPromptHasAnswer_returnsAnswer_forRatingBarInMultipleLines() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"7\")));\n-        assertThat(widget.getAnswer().getValue(), equalTo(7));\n-    }\n-\n-    @Test\n-    public void settingRatingOnTopRatingBar_deselectsAllStarsOnBottomRatingBar() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n-        widget.binding.ratingBar1.setRating(4.0F);\n-\n-        assertThat(widget.binding.ratingBar2.getRating(), equalTo(0.0F));\n-    }\n-\n-    @Test\n-    public void settingRatingOnBottomRatingBar_selectsAllStarsOnTopRatingBar() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n-        widget.binding.ratingBar2.setRating(4.0F);\n-\n-        assertThat(widget.binding.ratingBar1.getRating(), equalTo(5.0F));\n-    }\n-\n-    @Test\n-    public void whenUserTouchesTopRatingBar_bottomRatingBarShowsZeroRating() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"8\")));\n-        widget.binding.ratingBar1.onTouchEvent(MotionEventBuilder.newBuilder().setAction(ACTION_DOWN).build());\n-        widget.binding.ratingBar1.setRating(5.0F);\n+    public void clearAnswer_clearsWidgetAnswer() {\n+        RatingWidget widget = createWidget(promptWithAnswer(new StringData(\"1\")));\n \n-        assertThat(widget.binding.ratingBar2.getRating(), equalTo(0.0F));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer(), nullValue());\n     }\n \n     @Test\n-    public void whenUserTouchesBottomRatingBar_topRatingBarShowsMaximumRating() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"8\")));\n-        widget.binding.ratingBar2.onTouchEvent(MotionEventBuilder.newBuilder().setAction(ACTION_DOWN).build());\n-\n-        assertThat(widget.binding.ratingBar1.getRating(), equalTo(5.0F));\n-    }\n+    public void clearAnswer_callsValueChangeListeners() {\n+        RatingWidget widget = createWidget(promptWithAnswer(new StringData(\"1\")));\n+        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n+        widget.setValueChangedListener(valueChangedListener);\n \n-    @Test\n-    public void whenPromptDoesNotHaveAnswer_noStarsAreHighlightedOnRatingBar() {\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n-        assertThat(widget.binding.ratingBar1.getRating(), equalTo(0.0F));\n+        widget.clearAnswer();\n+        verify(valueChangedListener).widgetValueChanged(widget);\n     }\n \n     @Test\n-    public void whenPromptHasAnswer_correctNumberOfStarsAreHighlighted_forSmallerRatingBar() {\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n-        assertThat(widget.binding.ratingBar1.getRating(), equalTo(3.0F));\n-    }\n+    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n+        RatingWidget widget = createWidget(promptWithReadOnly());\n \n-    @Test\n-    public void whenPromptHasAnswer_correctNumberOfStarsAreHighlighted_forRatingBarInMultipleLines() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"7\")));\n-        assertThat(widget.binding.ratingBar2.getRating(), equalTo(2.0F));\n+        for (int i = 0; i < widget.gridLayout.getChildCount(); i++) {\n+            assertThat(widget.gridLayout.getChildAt(i).getVisibility(), is(View.VISIBLE));\n+            assertThat(widget.gridLayout.getChildAt(i).isEnabled(), is(Boolean.FALSE));\n+        }\n     }\n \n-    @Test\n-    public void clearAnswer_clearsWidgetAnswer() {\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n-        widget.clearAnswer();\n-        assertThat(widget.binding.ratingBar1.getRating(), equalTo(0.0F));\n+    private RatingWidget createWidget(FormEntryPrompt prompt) {\n+        return new RatingWidget(widgetTestActivity(), new QuestionDetails(prompt, \"formAnalyticsID\"), rangeQuestion);\n     }\n \n-    @Test\n-    public void clearAnswer_callsValueChangeListeners() {\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n-        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n-        widget.setValueChangedListener(valueChangedListener);\n-        widget.clearAnswer();\n+  /*  private final IntegerData answer = new IntegerData(4);\n \n-        verify(valueChangedListener, atLeastOnce()).widgetValueChanged(widget);\n-    }\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n \n-    @Test\n-    public void changingRating_callsValueChangeListeners_forRatingBarInSingleLine() {\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n-        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n-        widget.setValueChangedListener(valueChangedListener);\n-        widget.binding.ratingBar1.setRating(4.0F);\n+        RangeQuestion rangeQuestion = new RangeQuestion();\n+        rangeQuestion.setRangeEnd(new BigDecimal(5));\n \n-        verify(valueChangedListener, atLeastOnce()).widgetValueChanged(widget);\n+        when(formEntryPrompt.getQuestion()).thenReturn(rangeQuestion);\n     }\n \n-    @Test\n-    public void changingRating_callsValueChangeListeners_forRatingBarInMultipleLines() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n-        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n-        widget.setValueChangedListener(valueChangedListener);\n-        widget.binding.ratingBar2.setRating(4.0F);\n-\n-        verify(valueChangedListener, atLeastOnce()).widgetValueChanged(widget);\n+    @NonNull\n+    @Override\n+    public RatingWidget createWidget() {\n+        return new RatingWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n     }\n \n-    @Test\n-    public void ratingBar_doesNotAllowUserToSetDecimalRating_forRatingBarInSingleLine() {\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n-        widget.binding.ratingBar1.setRating(1.8F);\n-        assertThat(widget.binding.ratingBar1.getRating(), equalTo(2.0F));\n+    @NonNull\n+    @Override\n+    public IntegerData getNextAnswer() {\n+        return answer;\n     }\n \n-    @Test\n-    public void ratingBar_doesNotAllowUserToSetDecimalRating_forRatingBarInMultipleLines() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n-        widget.binding.ratingBar2.setRating(1.8F);\n-\n-        assertThat(widget.binding.ratingBar2.getRating(), equalTo(2.0F));\n+    @Override\n+    public void getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer() {\n+        getSpyWidget().answer = (Integer) answer.getValue();\n+        super.getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer();\n     }\n \n     @Test\n-    public void clickingRatingBarForLong_callsLongClickListener() {\n-        View.OnLongClickListener listener = mock(View.OnLongClickListener.class);\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n-        widget.setOnLongClickListener(listener);\n-        widget.binding.ratingBar1.performLongClick();\n-        widget.binding.ratingBar2.performLongClick();\n-\n-        verify(listener).onLongClick(widget.binding.ratingBar1);\n-        verify(listener).onLongClick(widget.binding.ratingBar2);\n-    }\n+    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n+        when(formEntryPrompt.isReadOnly()).thenReturn(true);\n \n-    private RatingWidget createWidget(FormEntryPrompt prompt) {\n-        return new RatingWidget(widgetTestActivity(), new QuestionDetails(prompt, \"formAnalyticsID\"));\n-    }\n+        for (int i = 0; i < getSpyWidget().gridLayout.getChildCount(); i++) {\n+            assertThat(getSpyWidget().gridLayout.getChildAt(i).getVisibility(), is(View.VISIBLE));\n+            assertThat(getSpyWidget().gridLayout.getChildAt(i).isEnabled(), is(Boolean.FALSE));\n+        }\n+    }*/\n }\n", "next_change": {"commit": "f9684f595f504cef4ecd689b6b55deed522c2497", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\nindex 1a00b1d0e..6f50afa3c 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n", "chunk": "@@ -75,57 +62,7 @@ public class RatingWidgetTest {\n         verify(valueChangedListener).widgetValueChanged(widget);\n     }\n \n-    @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n-        RatingWidget widget = createWidget(promptWithReadOnly());\n-\n-        for (int i = 0; i < widget.gridLayout.getChildCount(); i++) {\n-            assertThat(widget.gridLayout.getChildAt(i).getVisibility(), is(View.VISIBLE));\n-            assertThat(widget.gridLayout.getChildAt(i).isEnabled(), is(Boolean.FALSE));\n-        }\n-    }\n-\n     private RatingWidget createWidget(FormEntryPrompt prompt) {\n         return new RatingWidget(widgetTestActivity(), new QuestionDetails(prompt, \"formAnalyticsID\"), rangeQuestion);\n     }\n-\n-  /*  private final IntegerData answer = new IntegerData(4);\n-\n-    @Before\n-    public void setUp() throws Exception {\n-        super.setUp();\n-\n-        RangeQuestion rangeQuestion = new RangeQuestion();\n-        rangeQuestion.setRangeEnd(new BigDecimal(5));\n-\n-        when(formEntryPrompt.getQuestion()).thenReturn(rangeQuestion);\n-    }\n-\n-    @NonNull\n-    @Override\n-    public RatingWidget createWidget() {\n-        return new RatingWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n-    }\n-\n-    @NonNull\n-    @Override\n-    public IntegerData getNextAnswer() {\n-        return answer;\n-    }\n-\n-    @Override\n-    public void getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer() {\n-        getSpyWidget().answer = (Integer) answer.getValue();\n-        super.getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer();\n-    }\n-\n-    @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n-        when(formEntryPrompt.isReadOnly()).thenReturn(true);\n-\n-        for (int i = 0; i < getSpyWidget().gridLayout.getChildCount(); i++) {\n-            assertThat(getSpyWidget().gridLayout.getChildAt(i).getVisibility(), is(View.VISIBLE));\n-            assertThat(getSpyWidget().gridLayout.getChildAt(i).isEnabled(), is(Boolean.FALSE));\n-        }\n-    }*/\n }\n", "next_change": {"commit": "e44bf3e071acdb477b29a9e15b2ef717f2c7c077", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\nindex 6f50afa3c..418303db5 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n", "chunk": "@@ -62,6 +85,16 @@ public class RatingWidgetTest {\n         verify(valueChangedListener).widgetValueChanged(widget);\n     }\n \n+    @Test\n+    public void clickingRatingBarForLong_callsLongClickListener() {\n+        View.OnLongClickListener listener = mock( View.OnLongClickListener.class);\n+        RatingWidget widget = createWidget(promptWithAnswer(null));\n+        widget.setOnLongClickListener(listener);\n+        widget.getBinding().ratingBar.performLongClick();\n+\n+        verify(listener).onLongClick(widget.getBinding().ratingBar);\n+    }\n+\n     private RatingWidget createWidget(FormEntryPrompt prompt) {\n         return new RatingWidget(widgetTestActivity(), new QuestionDetails(prompt, \"formAnalyticsID\"), rangeQuestion);\n     }\n", "next_change": {"commit": "9c6d8e6764b1dfc343c6173b53806cf41d81f1d2", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\nindex 418303db5..7cde77257 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n", "chunk": "@@ -39,63 +38,94 @@ public class RatingWidgetTest {\n     }\n \n     @Test\n-    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n-        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    public void ratingBarShowsCorrectNumberOfStars() {\n+        RatingWidget widget = createWidget(promptWithReadOnlyAndRangeQuestion(rangeQuestion));\n+        assertThat(widget.getRatingBar().getNumStars(), equalTo(5));\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsZero() {\n+        assertThat(createWidget(promptWithReadOnlyAndRangeQuestion(rangeQuestion)).getAnswer(), nullValue());\n     }\n \n     @Test\n     public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n-        RatingWidget widget = createWidget(promptWithAnswer(new StringData(\"3\")));\n-        assertThat(widget.getAnswer().getValue(), equalTo(1));\n+        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n+        assertThat(widget.getAnswer().getValue(), equalTo(3));\n     }\n \n     @Test\n     public void whenPromptDoesNotHaveAnswer_noStarsAreHighlightedOnRatingBar() {\n-        RatingWidget widget = createWidget(promptWithAnswer(null));\n-        assertThat(widget.getBinding().ratingBar.getRating(), equalTo(0.0F));\n+        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, null));\n+        assertThat(widget.getRatingBar().getRating(), equalTo(0.0F));\n     }\n \n     @Test\n     public void whenPromptHasAnswer_correctNumberOfStarsAreHighlightedOnRatingBar() {\n-        RatingWidget widget = createWidget(promptWithAnswer(new StringData((\"3\"))));\n-        assertThat(widget.getBinding().ratingBar.getRating(), equalTo(3.0F));\n+        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n+        assertThat(widget.getRatingBar().getRating(), equalTo(3.0F));\n     }\n \n     @Test\n     public void usingReadOnly_makesAllClickableElementsDisabled() {\n-        RatingWidget widget = createWidget(promptWithReadOnly());\n-        assertThat(widget.getBinding().ratingBar.isEnabled(), equalTo(false));\n+        RatingWidget widget = createWidget(promptWithReadOnlyAndRangeQuestion(rangeQuestion));\n+        assertThat(widget.getRatingBar().isEnabled(), equalTo(false));\n     }\n \n     @Test\n     public void clearAnswer_clearsWidgetAnswer() {\n-        RatingWidget widget = createWidget(promptWithAnswer(new StringData(\"2\")));\n-\n+        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n         widget.clearAnswer();\n+\n         assertThat(widget.getAnswer(), nullValue());\n+        assertThat(widget.getRatingBar().getRating(), equalTo(0.0F));\n     }\n \n     @Test\n     public void clearAnswer_callsValueChangeListeners() {\n-        RatingWidget widget = createWidget(promptWithAnswer(new StringData(\"2\")));\n+        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n         WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n         widget.setValueChangedListener(valueChangedListener);\n-\n         widget.clearAnswer();\n+\n         verify(valueChangedListener).widgetValueChanged(widget);\n     }\n \n+    @Test\n+    public void changingRating_callsValueChangeListeners() {\n+        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n+        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n+        widget.setValueChangedListener(valueChangedListener);\n+        widget.getRatingBar().setRating(4.0F);\n+\n+        verify(valueChangedListener).widgetValueChanged(widget);\n+    }\n+\n+    @Test\n+    public void changingRating_updatesAnswer() {\n+        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n+        widget.getRatingBar().setRating(4.0F);\n+        assertThat(widget.getAnswer().getValue(), equalTo(4));\n+    }\n+\n+    @Test\n+    public void ratingBar_doesNotAllowUserToSetDecimalRating() {\n+        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n+        widget.getRatingBar().setRating(4.8F);\n+        assertThat(widget.getAnswer().getValue(), equalTo(5));\n+    }\n+\n     @Test\n     public void clickingRatingBarForLong_callsLongClickListener() {\n-        View.OnLongClickListener listener = mock( View.OnLongClickListener.class);\n-        RatingWidget widget = createWidget(promptWithAnswer(null));\n+        View.OnLongClickListener listener = mock(View.OnLongClickListener.class);\n+        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, null));\n         widget.setOnLongClickListener(listener);\n-        widget.getBinding().ratingBar.performLongClick();\n+        widget.getRatingBar().performLongClick();\n \n-        verify(listener).onLongClick(widget.getBinding().ratingBar);\n+        verify(listener).onLongClick(widget.getRatingBar());\n     }\n \n     private RatingWidget createWidget(FormEntryPrompt prompt) {\n-        return new RatingWidget(widgetTestActivity(), new QuestionDetails(prompt, \"formAnalyticsID\"), rangeQuestion);\n+        return new RatingWidget(widgetTestActivity(), new QuestionDetails(prompt, \"formAnalyticsID\"));\n     }\n }\n", "next_change": {"commit": "d0c053a25ab6fd7a91361d08ce6cc9baecabeaf6", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\nindex 7cde77257..798aa9f1e 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n", "chunk": "@@ -120,9 +149,11 @@ public class RatingWidgetTest {\n         View.OnLongClickListener listener = mock(View.OnLongClickListener.class);\n         RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, null));\n         widget.setOnLongClickListener(listener);\n-        widget.getRatingBar().performLongClick();\n+        widget.getBinding().ratingBar1.performLongClick();\n+        widget.getBinding().ratingBar2.performLongClick();\n \n-        verify(listener).onLongClick(widget.getRatingBar());\n+        verify(listener).onLongClick(widget.getBinding().ratingBar1);\n+        verify(listener).onLongClick(widget.getBinding().ratingBar2);\n     }\n \n     private RatingWidget createWidget(FormEntryPrompt prompt) {\n", "next_change": {"commit": "ea7cd1ae54063565223afa7e3aacc6955d5a4606", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\nindex 798aa9f1e..1ebe7318f 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n", "chunk": "@@ -149,11 +149,11 @@ public class RatingWidgetTest {\n         View.OnLongClickListener listener = mock(View.OnLongClickListener.class);\n         RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, null));\n         widget.setOnLongClickListener(listener);\n-        widget.getBinding().ratingBar1.performLongClick();\n-        widget.getBinding().ratingBar2.performLongClick();\n+        widget.binding.ratingBar1.performLongClick();\n+        widget.binding.ratingBar2.performLongClick();\n \n-        verify(listener).onLongClick(widget.getBinding().ratingBar1);\n-        verify(listener).onLongClick(widget.getBinding().ratingBar2);\n+        verify(listener).onLongClick(widget.binding.ratingBar1);\n+        verify(listener).onLongClick(widget.binding.ratingBar2);\n     }\n \n     private RatingWidget createWidget(FormEntryPrompt prompt) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\nindex 7cde77257..05f6aba78 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n", "chunk": "@@ -38,91 +42,172 @@ public class RatingWidgetTest {\n     }\n \n     @Test\n-    public void ratingBarShowsCorrectNumberOfStars() {\n-        RatingWidget widget = createWidget(promptWithReadOnlyAndRangeQuestion(rangeQuestion));\n-        assertThat(widget.getRatingBar().getNumStars(), equalTo(5));\n+    public void usingReadOnly_makesAllClickableElementsDisabled() {\n+        RatingWidget widget = createWidget(promptWithReadOnlyAndQuestionDef(rangeQuestion));\n+        assertThat(widget.binding.ratingBar1.isEnabled(), equalTo(false));\n+        assertThat(widget.binding.ratingBar2.isEnabled(), equalTo(false));\n+    }\n+\n+    @Test\n+    public void ratingWidgetShowsCorrectViewForLessNumberOfStars() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(4));\n+        RatingWidget widget = createWidget(promptWithReadOnlyAndQuestionDef(rangeQuestion));\n+\n+        assertThat(widget.binding.ratingBar1.getNumStars(), equalTo(4));\n+        assertThat(widget.binding.ratingBar1.getMax(), equalTo(4));\n+        assertThat(widget.binding.ratingBar2.getVisibility(), equalTo(View.GONE));\n     }\n \n     @Test\n-    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsZero() {\n-        assertThat(createWidget(promptWithReadOnlyAndRangeQuestion(rangeQuestion)).getAnswer(), nullValue());\n+    public void ratingWidgetShowsCorrectViewForMoreNumberOfStars() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(8));\n+        RatingWidget widget = createWidget(promptWithReadOnlyAndQuestionDef(rangeQuestion));\n+\n+        assertThat(widget.binding.ratingBar1.getNumStars(), equalTo(5));\n+        assertThat(widget.binding.ratingBar1.getMax(), equalTo(5));\n+        assertThat(widget.binding.ratingBar2.getVisibility(), equalTo(View.VISIBLE));\n+        assertThat(widget.binding.ratingBar2.getNumStars(), equalTo(3));\n+        assertThat(widget.binding.ratingBar2.getMax(), equalTo(3));\n     }\n \n     @Test\n-    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n-        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithReadOnlyAndQuestionDef(rangeQuestion)).getAnswer(), nullValue());\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer_forRatingBarInSingleLine() {\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n         assertThat(widget.getAnswer().getValue(), equalTo(3));\n     }\n \n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer_forRatingBarInMultipleLines() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"7\")));\n+        assertThat(widget.getAnswer().getValue(), equalTo(7));\n+    }\n+\n+    @Test\n+    public void settingRatingOnTopRatingBar_deselectsAllStarsOnBottomRatingBar() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n+        widget.binding.ratingBar1.setRating(4.0F);\n+\n+        assertThat(widget.binding.ratingBar2.getRating(), equalTo(0.0F));\n+    }\n+\n+    @Test\n+    public void settingRatingOnBottomRatingBar_selectsAllStarsOnTopRatingBar() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n+        widget.binding.ratingBar2.setRating(4.0F);\n+\n+        assertThat(widget.binding.ratingBar1.getRating(), equalTo(5.0F));\n+    }\n+\n+    @Test\n+    public void whenUserTouchesTopRatingBar_bottomRatingBarShowsZeroRating() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"8\")));\n+        widget.binding.ratingBar1.onTouchEvent(MotionEventBuilder.newBuilder().setAction(ACTION_DOWN).build());\n+        widget.binding.ratingBar1.setRating(5.0F);\n+\n+        assertThat(widget.binding.ratingBar2.getRating(), equalTo(0.0F));\n+    }\n+\n+    @Test\n+    public void whenUserTouchesBottomRatingBar_topRatingBarShowsMaximumRating() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"8\")));\n+        widget.binding.ratingBar2.onTouchEvent(MotionEventBuilder.newBuilder().setAction(ACTION_DOWN).build());\n+\n+        assertThat(widget.binding.ratingBar1.getRating(), equalTo(5.0F));\n+    }\n+\n     @Test\n     public void whenPromptDoesNotHaveAnswer_noStarsAreHighlightedOnRatingBar() {\n-        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, null));\n-        assertThat(widget.getRatingBar().getRating(), equalTo(0.0F));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n+        assertThat(widget.binding.ratingBar1.getRating(), equalTo(0.0F));\n     }\n \n     @Test\n-    public void whenPromptHasAnswer_correctNumberOfStarsAreHighlightedOnRatingBar() {\n-        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n-        assertThat(widget.getRatingBar().getRating(), equalTo(3.0F));\n+    public void whenPromptHasAnswer_correctNumberOfStarsAreHighlighted_forSmallerRatingBar() {\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n+        assertThat(widget.binding.ratingBar1.getRating(), equalTo(3.0F));\n     }\n \n     @Test\n-    public void usingReadOnly_makesAllClickableElementsDisabled() {\n-        RatingWidget widget = createWidget(promptWithReadOnlyAndRangeQuestion(rangeQuestion));\n-        assertThat(widget.getRatingBar().isEnabled(), equalTo(false));\n+    public void whenPromptHasAnswer_correctNumberOfStarsAreHighlighted_forRatingBarInMultipleLines() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"7\")));\n+        assertThat(widget.binding.ratingBar2.getRating(), equalTo(2.0F));\n     }\n \n     @Test\n     public void clearAnswer_clearsWidgetAnswer() {\n-        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n         widget.clearAnswer();\n-\n-        assertThat(widget.getAnswer(), nullValue());\n-        assertThat(widget.getRatingBar().getRating(), equalTo(0.0F));\n+        assertThat(widget.binding.ratingBar1.getRating(), equalTo(0.0F));\n     }\n \n     @Test\n     public void clearAnswer_callsValueChangeListeners() {\n-        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n         WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n         widget.setValueChangedListener(valueChangedListener);\n         widget.clearAnswer();\n \n-        verify(valueChangedListener).widgetValueChanged(widget);\n+        verify(valueChangedListener, atLeastOnce()).widgetValueChanged(widget);\n     }\n \n     @Test\n-    public void changingRating_callsValueChangeListeners() {\n-        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n+    public void changingRating_callsValueChangeListeners_forRatingBarInSingleLine() {\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n         WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n         widget.setValueChangedListener(valueChangedListener);\n-        widget.getRatingBar().setRating(4.0F);\n+        widget.binding.ratingBar1.setRating(4.0F);\n \n-        verify(valueChangedListener).widgetValueChanged(widget);\n+        verify(valueChangedListener, atLeastOnce()).widgetValueChanged(widget);\n     }\n \n     @Test\n-    public void changingRating_updatesAnswer() {\n-        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n-        widget.getRatingBar().setRating(4.0F);\n-        assertThat(widget.getAnswer().getValue(), equalTo(4));\n+    public void changingRating_callsValueChangeListeners_forRatingBarInMultipleLines() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n+        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n+        widget.setValueChangedListener(valueChangedListener);\n+        widget.binding.ratingBar2.setRating(4.0F);\n+\n+        verify(valueChangedListener, atLeastOnce()).widgetValueChanged(widget);\n     }\n \n     @Test\n-    public void ratingBar_doesNotAllowUserToSetDecimalRating() {\n-        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n-        widget.getRatingBar().setRating(4.8F);\n-        assertThat(widget.getAnswer().getValue(), equalTo(5));\n+    public void ratingBar_doesNotAllowUserToSetDecimalRating_forRatingBarInSingleLine() {\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n+        widget.binding.ratingBar1.setRating(1.8F);\n+        assertThat(widget.binding.ratingBar1.getRating(), equalTo(2.0F));\n+    }\n+\n+    @Test\n+    public void ratingBar_doesNotAllowUserToSetDecimalRating_forRatingBarInMultipleLines() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n+        widget.binding.ratingBar2.setRating(1.8F);\n+\n+        assertThat(widget.binding.ratingBar2.getRating(), equalTo(2.0F));\n     }\n \n     @Test\n     public void clickingRatingBarForLong_callsLongClickListener() {\n         View.OnLongClickListener listener = mock(View.OnLongClickListener.class);\n-        RatingWidget widget = createWidget(promptWithRangeQuestionAndAnswer(rangeQuestion, null));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n         widget.setOnLongClickListener(listener);\n-        widget.getRatingBar().performLongClick();\n+        widget.binding.ratingBar1.performLongClick();\n+        widget.binding.ratingBar2.performLongClick();\n \n-        verify(listener).onLongClick(widget.getRatingBar());\n+        verify(listener).onLongClick(widget.binding.ratingBar1);\n+        verify(listener).onLongClick(widget.binding.ratingBar2);\n     }\n \n     private RatingWidget createWidget(FormEntryPrompt prompt) {\n", "next_change": {"commit": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\nindex 05f6aba78..cde50cd6b 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n", "chunk": "@@ -2,215 +2,60 @@ package org.odk.collect.android.widgets;\n \n import android.view.View;\n \n-import androidx.test.core.view.MotionEventBuilder;\n+import androidx.annotation.NonNull;\n \n import org.javarosa.core.model.RangeQuestion;\n-import org.javarosa.core.model.data.StringData;\n-import org.javarosa.form.api.FormEntryPrompt;\n+import org.javarosa.core.model.data.IntegerData;\n import org.junit.Before;\n import org.junit.Test;\n-import org.junit.runner.RunWith;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.listeners.WidgetValueChangedListener;\n-import org.robolectric.RobolectricTestRunner;\n+import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n \n import java.math.BigDecimal;\n \n-import static android.view.MotionEvent.ACTION_DOWN;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.nullValue;\n-import static org.mockito.Mockito.atLeastOnce;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.verify;\n+import static org.hamcrest.Matchers.is;\n import static org.mockito.Mockito.when;\n-import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n \n-import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithQuestionAndAnswer;\n-import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnlyAndQuestionDef;\n-import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n+public class RatingWidgetTest extends QuestionWidgetTest<RatingWidget, IntegerData> {\n \n-@RunWith(RobolectricTestRunner.class)\n-public class RatingWidgetTest {\n-\n-    private RangeQuestion rangeQuestion;\n+    private final IntegerData answer = new IntegerData(4);\n \n     @Before\n-    public void setup() {\n-        rangeQuestion = mock(RangeQuestion.class);\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(5));\n-    }\n-\n-    @Test\n-    public void usingReadOnly_makesAllClickableElementsDisabled() {\n-        RatingWidget widget = createWidget(promptWithReadOnlyAndQuestionDef(rangeQuestion));\n-        assertThat(widget.binding.ratingBar1.isEnabled(), equalTo(false));\n-        assertThat(widget.binding.ratingBar2.isEnabled(), equalTo(false));\n-    }\n-\n-    @Test\n-    public void ratingWidgetShowsCorrectViewForLessNumberOfStars() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(4));\n-        RatingWidget widget = createWidget(promptWithReadOnlyAndQuestionDef(rangeQuestion));\n-\n-        assertThat(widget.binding.ratingBar1.getNumStars(), equalTo(4));\n-        assertThat(widget.binding.ratingBar1.getMax(), equalTo(4));\n-        assertThat(widget.binding.ratingBar2.getVisibility(), equalTo(View.GONE));\n-    }\n-\n-    @Test\n-    public void ratingWidgetShowsCorrectViewForMoreNumberOfStars() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(8));\n-        RatingWidget widget = createWidget(promptWithReadOnlyAndQuestionDef(rangeQuestion));\n-\n-        assertThat(widget.binding.ratingBar1.getNumStars(), equalTo(5));\n-        assertThat(widget.binding.ratingBar1.getMax(), equalTo(5));\n-        assertThat(widget.binding.ratingBar2.getVisibility(), equalTo(View.VISIBLE));\n-        assertThat(widget.binding.ratingBar2.getNumStars(), equalTo(3));\n-        assertThat(widget.binding.ratingBar2.getMax(), equalTo(3));\n-    }\n-\n-    @Test\n-    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n-        assertThat(createWidget(promptWithReadOnlyAndQuestionDef(rangeQuestion)).getAnswer(), nullValue());\n-    }\n-\n-    @Test\n-    public void getAnswer_whenPromptHasAnswer_returnsAnswer_forRatingBarInSingleLine() {\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n-        assertThat(widget.getAnswer().getValue(), equalTo(3));\n-    }\n-\n-    @Test\n-    public void getAnswer_whenPromptHasAnswer_returnsAnswer_forRatingBarInMultipleLines() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"7\")));\n-        assertThat(widget.getAnswer().getValue(), equalTo(7));\n-    }\n-\n-    @Test\n-    public void settingRatingOnTopRatingBar_deselectsAllStarsOnBottomRatingBar() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n-        widget.binding.ratingBar1.setRating(4.0F);\n-\n-        assertThat(widget.binding.ratingBar2.getRating(), equalTo(0.0F));\n-    }\n-\n-    @Test\n-    public void settingRatingOnBottomRatingBar_selectsAllStarsOnTopRatingBar() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n-        widget.binding.ratingBar2.setRating(4.0F);\n-\n-        assertThat(widget.binding.ratingBar1.getRating(), equalTo(5.0F));\n-    }\n-\n-    @Test\n-    public void whenUserTouchesTopRatingBar_bottomRatingBarShowsZeroRating() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"8\")));\n-        widget.binding.ratingBar1.onTouchEvent(MotionEventBuilder.newBuilder().setAction(ACTION_DOWN).build());\n-        widget.binding.ratingBar1.setRating(5.0F);\n-\n-        assertThat(widget.binding.ratingBar2.getRating(), equalTo(0.0F));\n-    }\n-\n-    @Test\n-    public void whenUserTouchesBottomRatingBar_topRatingBarShowsMaximumRating() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"8\")));\n-        widget.binding.ratingBar2.onTouchEvent(MotionEventBuilder.newBuilder().setAction(ACTION_DOWN).build());\n-\n-        assertThat(widget.binding.ratingBar1.getRating(), equalTo(5.0F));\n-    }\n+    public void setUp() throws Exception {\n+        super.setUp();\n \n-    @Test\n-    public void whenPromptDoesNotHaveAnswer_noStarsAreHighlightedOnRatingBar() {\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n-        assertThat(widget.binding.ratingBar1.getRating(), equalTo(0.0F));\n-    }\n+        RangeQuestion rangeQuestion = new RangeQuestion();\n+        rangeQuestion.setRangeEnd(new BigDecimal(5));\n \n-    @Test\n-    public void whenPromptHasAnswer_correctNumberOfStarsAreHighlighted_forSmallerRatingBar() {\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n-        assertThat(widget.binding.ratingBar1.getRating(), equalTo(3.0F));\n+        when(formEntryPrompt.getQuestion()).thenReturn(rangeQuestion);\n     }\n \n-    @Test\n-    public void whenPromptHasAnswer_correctNumberOfStarsAreHighlighted_forRatingBarInMultipleLines() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"7\")));\n-        assertThat(widget.binding.ratingBar2.getRating(), equalTo(2.0F));\n+    @NonNull\n+    @Override\n+    public RatingWidget createWidget() {\n+        return new RatingWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n     }\n \n-    @Test\n-    public void clearAnswer_clearsWidgetAnswer() {\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n-        widget.clearAnswer();\n-        assertThat(widget.binding.ratingBar1.getRating(), equalTo(0.0F));\n+    @NonNull\n+    @Override\n+    public IntegerData getNextAnswer() {\n+        return answer;\n     }\n \n-    @Test\n-    public void clearAnswer_callsValueChangeListeners() {\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n-        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n-        widget.setValueChangedListener(valueChangedListener);\n-        widget.clearAnswer();\n-\n-        verify(valueChangedListener, atLeastOnce()).widgetValueChanged(widget);\n+    @Override\n+    public void getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer() {\n+        getSpyWidget().answer = (Integer) answer.getValue();\n+        super.getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer();\n     }\n \n     @Test\n-    public void changingRating_callsValueChangeListeners_forRatingBarInSingleLine() {\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n-        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n-        widget.setValueChangedListener(valueChangedListener);\n-        widget.binding.ratingBar1.setRating(4.0F);\n-\n-        verify(valueChangedListener, atLeastOnce()).widgetValueChanged(widget);\n-    }\n-\n-    @Test\n-    public void changingRating_callsValueChangeListeners_forRatingBarInMultipleLines() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n-        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n-        widget.setValueChangedListener(valueChangedListener);\n-        widget.binding.ratingBar2.setRating(4.0F);\n-\n-        verify(valueChangedListener, atLeastOnce()).widgetValueChanged(widget);\n-    }\n-\n-    @Test\n-    public void ratingBar_doesNotAllowUserToSetDecimalRating_forRatingBarInSingleLine() {\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n-        widget.binding.ratingBar1.setRating(1.8F);\n-        assertThat(widget.binding.ratingBar1.getRating(), equalTo(2.0F));\n-    }\n-\n-    @Test\n-    public void ratingBar_doesNotAllowUserToSetDecimalRating_forRatingBarInMultipleLines() {\n-        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n-        widget.binding.ratingBar2.setRating(1.8F);\n-\n-        assertThat(widget.binding.ratingBar2.getRating(), equalTo(2.0F));\n-    }\n-\n-    @Test\n-    public void clickingRatingBarForLong_callsLongClickListener() {\n-        View.OnLongClickListener listener = mock(View.OnLongClickListener.class);\n-        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n-        widget.setOnLongClickListener(listener);\n-        widget.binding.ratingBar1.performLongClick();\n-        widget.binding.ratingBar2.performLongClick();\n-\n-        verify(listener).onLongClick(widget.binding.ratingBar1);\n-        verify(listener).onLongClick(widget.binding.ratingBar2);\n-    }\n+    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n+        when(formEntryPrompt.isReadOnly()).thenReturn(true);\n \n-    private RatingWidget createWidget(FormEntryPrompt prompt) {\n-        return new RatingWidget(widgetTestActivity(), new QuestionDetails(prompt, \"formAnalyticsID\"));\n+        for (int i = 0; i < getSpyWidget().gridLayout.getChildCount(); i++) {\n+            assertThat(getSpyWidget().gridLayout.getChildAt(i).getVisibility(), is(View.VISIBLE));\n+            assertThat(getSpyWidget().gridLayout.getChildAt(i).isEnabled(), is(Boolean.FALSE));\n+        }\n     }\n }\n", "next_change": {"commit": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\nindex cde50cd6b..05f6aba78 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n", "chunk": "@@ -2,60 +2,215 @@ package org.odk.collect.android.widgets;\n \n import android.view.View;\n \n-import androidx.annotation.NonNull;\n+import androidx.test.core.view.MotionEventBuilder;\n \n import org.javarosa.core.model.RangeQuestion;\n-import org.javarosa.core.model.data.IntegerData;\n+import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.listeners.WidgetValueChangedListener;\n+import org.robolectric.RobolectricTestRunner;\n \n import java.math.BigDecimal;\n \n+import static android.view.MotionEvent.ACTION_DOWN;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n \n-public class RatingWidgetTest extends QuestionWidgetTest<RatingWidget, IntegerData> {\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithQuestionAndAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnlyAndQuestionDef;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n-    private final IntegerData answer = new IntegerData(4);\n+@RunWith(RobolectricTestRunner.class)\n+public class RatingWidgetTest {\n+\n+    private RangeQuestion rangeQuestion;\n \n     @Before\n-    public void setUp() throws Exception {\n-        super.setUp();\n+    public void setup() {\n+        rangeQuestion = mock(RangeQuestion.class);\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(5));\n+    }\n+\n+    @Test\n+    public void usingReadOnly_makesAllClickableElementsDisabled() {\n+        RatingWidget widget = createWidget(promptWithReadOnlyAndQuestionDef(rangeQuestion));\n+        assertThat(widget.binding.ratingBar1.isEnabled(), equalTo(false));\n+        assertThat(widget.binding.ratingBar2.isEnabled(), equalTo(false));\n+    }\n+\n+    @Test\n+    public void ratingWidgetShowsCorrectViewForLessNumberOfStars() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(4));\n+        RatingWidget widget = createWidget(promptWithReadOnlyAndQuestionDef(rangeQuestion));\n+\n+        assertThat(widget.binding.ratingBar1.getNumStars(), equalTo(4));\n+        assertThat(widget.binding.ratingBar1.getMax(), equalTo(4));\n+        assertThat(widget.binding.ratingBar2.getVisibility(), equalTo(View.GONE));\n+    }\n+\n+    @Test\n+    public void ratingWidgetShowsCorrectViewForMoreNumberOfStars() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(8));\n+        RatingWidget widget = createWidget(promptWithReadOnlyAndQuestionDef(rangeQuestion));\n+\n+        assertThat(widget.binding.ratingBar1.getNumStars(), equalTo(5));\n+        assertThat(widget.binding.ratingBar1.getMax(), equalTo(5));\n+        assertThat(widget.binding.ratingBar2.getVisibility(), equalTo(View.VISIBLE));\n+        assertThat(widget.binding.ratingBar2.getNumStars(), equalTo(3));\n+        assertThat(widget.binding.ratingBar2.getMax(), equalTo(3));\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithReadOnlyAndQuestionDef(rangeQuestion)).getAnswer(), nullValue());\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer_forRatingBarInSingleLine() {\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n+        assertThat(widget.getAnswer().getValue(), equalTo(3));\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer_forRatingBarInMultipleLines() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"7\")));\n+        assertThat(widget.getAnswer().getValue(), equalTo(7));\n+    }\n+\n+    @Test\n+    public void settingRatingOnTopRatingBar_deselectsAllStarsOnBottomRatingBar() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n+        widget.binding.ratingBar1.setRating(4.0F);\n+\n+        assertThat(widget.binding.ratingBar2.getRating(), equalTo(0.0F));\n+    }\n+\n+    @Test\n+    public void settingRatingOnBottomRatingBar_selectsAllStarsOnTopRatingBar() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n+        widget.binding.ratingBar2.setRating(4.0F);\n+\n+        assertThat(widget.binding.ratingBar1.getRating(), equalTo(5.0F));\n+    }\n+\n+    @Test\n+    public void whenUserTouchesTopRatingBar_bottomRatingBarShowsZeroRating() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"8\")));\n+        widget.binding.ratingBar1.onTouchEvent(MotionEventBuilder.newBuilder().setAction(ACTION_DOWN).build());\n+        widget.binding.ratingBar1.setRating(5.0F);\n+\n+        assertThat(widget.binding.ratingBar2.getRating(), equalTo(0.0F));\n+    }\n+\n+    @Test\n+    public void whenUserTouchesBottomRatingBar_topRatingBarShowsMaximumRating() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"8\")));\n+        widget.binding.ratingBar2.onTouchEvent(MotionEventBuilder.newBuilder().setAction(ACTION_DOWN).build());\n+\n+        assertThat(widget.binding.ratingBar1.getRating(), equalTo(5.0F));\n+    }\n \n-        RangeQuestion rangeQuestion = new RangeQuestion();\n-        rangeQuestion.setRangeEnd(new BigDecimal(5));\n+    @Test\n+    public void whenPromptDoesNotHaveAnswer_noStarsAreHighlightedOnRatingBar() {\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n+        assertThat(widget.binding.ratingBar1.getRating(), equalTo(0.0F));\n+    }\n \n-        when(formEntryPrompt.getQuestion()).thenReturn(rangeQuestion);\n+    @Test\n+    public void whenPromptHasAnswer_correctNumberOfStarsAreHighlighted_forSmallerRatingBar() {\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n+        assertThat(widget.binding.ratingBar1.getRating(), equalTo(3.0F));\n     }\n \n-    @NonNull\n-    @Override\n-    public RatingWidget createWidget() {\n-        return new RatingWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+    @Test\n+    public void whenPromptHasAnswer_correctNumberOfStarsAreHighlighted_forRatingBarInMultipleLines() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"7\")));\n+        assertThat(widget.binding.ratingBar2.getRating(), equalTo(2.0F));\n     }\n \n-    @NonNull\n-    @Override\n-    public IntegerData getNextAnswer() {\n-        return answer;\n+    @Test\n+    public void clearAnswer_clearsWidgetAnswer() {\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n+        widget.clearAnswer();\n+        assertThat(widget.binding.ratingBar1.getRating(), equalTo(0.0F));\n     }\n \n-    @Override\n-    public void getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer() {\n-        getSpyWidget().answer = (Integer) answer.getValue();\n-        super.getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer();\n+    @Test\n+    public void clearAnswer_callsValueChangeListeners() {\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, new StringData(\"3\")));\n+        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n+        widget.setValueChangedListener(valueChangedListener);\n+        widget.clearAnswer();\n+\n+        verify(valueChangedListener, atLeastOnce()).widgetValueChanged(widget);\n     }\n \n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n-        when(formEntryPrompt.isReadOnly()).thenReturn(true);\n+    public void changingRating_callsValueChangeListeners_forRatingBarInSingleLine() {\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n+        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n+        widget.setValueChangedListener(valueChangedListener);\n+        widget.binding.ratingBar1.setRating(4.0F);\n+\n+        verify(valueChangedListener, atLeastOnce()).widgetValueChanged(widget);\n+    }\n+\n+    @Test\n+    public void changingRating_callsValueChangeListeners_forRatingBarInMultipleLines() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n+        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n+        widget.setValueChangedListener(valueChangedListener);\n+        widget.binding.ratingBar2.setRating(4.0F);\n+\n+        verify(valueChangedListener, atLeastOnce()).widgetValueChanged(widget);\n+    }\n+\n+    @Test\n+    public void ratingBar_doesNotAllowUserToSetDecimalRating_forRatingBarInSingleLine() {\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n+        widget.binding.ratingBar1.setRating(1.8F);\n+        assertThat(widget.binding.ratingBar1.getRating(), equalTo(2.0F));\n+    }\n+\n+    @Test\n+    public void ratingBar_doesNotAllowUserToSetDecimalRating_forRatingBarInMultipleLines() {\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(10));\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n+        widget.binding.ratingBar2.setRating(1.8F);\n+\n+        assertThat(widget.binding.ratingBar2.getRating(), equalTo(2.0F));\n+    }\n+\n+    @Test\n+    public void clickingRatingBarForLong_callsLongClickListener() {\n+        View.OnLongClickListener listener = mock(View.OnLongClickListener.class);\n+        RatingWidget widget = createWidget(promptWithQuestionAndAnswer(rangeQuestion, null));\n+        widget.setOnLongClickListener(listener);\n+        widget.binding.ratingBar1.performLongClick();\n+        widget.binding.ratingBar2.performLongClick();\n+\n+        verify(listener).onLongClick(widget.binding.ratingBar1);\n+        verify(listener).onLongClick(widget.binding.ratingBar2);\n+    }\n \n-        for (int i = 0; i < getSpyWidget().gridLayout.getChildCount(); i++) {\n-            assertThat(getSpyWidget().gridLayout.getChildAt(i).getVisibility(), is(View.VISIBLE));\n-            assertThat(getSpyWidget().gridLayout.getChildAt(i).isEnabled(), is(Boolean.FALSE));\n-        }\n+    private RatingWidget createWidget(FormEntryPrompt prompt) {\n+        return new RatingWidget(widgetTestActivity(), new QuestionDetails(prompt, \"formAnalyticsID\"));\n     }\n }\n", "next_change": {"commit": "be84e1a5f6605ea62d6211c98bfd76a99125aac8", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\nindex 05f6aba78..dff4129bc 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n", "chunk": "@@ -211,6 +211,6 @@ public class RatingWidgetTest {\n     }\n \n     private RatingWidget createWidget(FormEntryPrompt prompt) {\n-        return new RatingWidget(widgetTestActivity(), new QuestionDetails(prompt, \"formAnalyticsID\"));\n+        return new RatingWidget(widgetTestActivity(), new QuestionDetails(prompt));\n     }\n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "message": "Merge commit", "committedDate": null}, {"oid": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "committedDate": "2020-11-06 12:03:46 +0000", "message": "Revert \"Reworking Rating Widget\""}, {"oid": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "committedDate": "2020-11-06 19:16:20 +0530", "message": "Revert \"Revert \"Reworking Rating Widget\"\""}, {"oid": "4b859f507e0a6ba2dd71e7fb606f6003ce95dce9", "committedDate": "2021-05-14 12:38:05 +0100", "message": "Upgrade Robolectric (#4556)"}, {"oid": "be84e1a5f6605ea62d6211c98bfd76a99125aac8", "committedDate": "2021-10-18 13:18:52 +0100", "message": "Remove analytics ID from question details"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU1OTg3Mw==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451559873", "body": "You can use it in other widgets as well so you should''t use Range word here.", "bodyText": "You can use it in other widgets as well so you should''t use Range word here.", "bodyHTML": "<p dir=\"auto\">You can use it in other widgets as well so you should''t use Range word here.</p>", "author": "grzesiek2010", "createdAt": "2020-07-08T13:51:08Z", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java", "diffHunk": "@@ -37,4 +38,18 @@ public static FormEntryPrompt promptWithReadOnly() {\n                 .withReadOnly(true)\n                 .build();\n     }\n+\n+    public static FormEntryPrompt promptWithRangeQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {", "originalCommit": "25f6dc25ee36f51487563156a3399a4c578b769a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\nindex 46a01b873..bcf9477dd 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n", "chunk": "@@ -39,14 +39,27 @@ public class QuestionWidgetHelpers {\n                 .build();\n     }\n \n-    public static FormEntryPrompt promptWithRangeQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {\n+    public static FormEntryPrompt promptWithReadOnlyAndAnswer(IAnswerData answer) {\n+        return new MockFormEntryPromptBuilder()\n+                .withReadOnly(true)\n+                .withAnswer(answer)\n+                .build();\n+    }\n+\n+    public static FormEntryPrompt promptWithQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {\n         return new MockFormEntryPromptBuilder()\n                 .withQuestion(questionDef)\n                 .withAnswer(answer)\n                 .build();\n     }\n \n-    public static FormEntryPrompt promptWithReadOnlyAndRangeQuestion(QuestionDef questionDef) {\n+    public static FormEntryPrompt promptWithAppearance(String appearance) {\n+        return new MockFormEntryPromptBuilder()\n+                .withAppearance(appearance)\n+                .build();\n+    }\n+\n+    public static FormEntryPrompt promptWithReadOnlyAndQuestion(QuestionDef questionDef) {\n         return new MockFormEntryPromptBuilder()\n                 .withReadOnly(true)\n                 .withQuestion(questionDef)\n", "next_change": {"commit": "35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\nindex bcf9477dd..81f1ce218 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n", "chunk": "@@ -59,7 +65,7 @@ public class QuestionWidgetHelpers {\n                 .build();\n     }\n \n-    public static FormEntryPrompt promptWithReadOnlyAndQuestion(QuestionDef questionDef) {\n+    public static FormEntryPrompt promptWithReadOnlyAndQuestionDef(QuestionDef questionDef) {\n         return new MockFormEntryPromptBuilder()\n                 .withReadOnly(true)\n                 .withQuestion(questionDef)\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\nindex 46a01b873..16430f1e1 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n", "chunk": "@@ -39,14 +45,34 @@ public class QuestionWidgetHelpers {\n                 .build();\n     }\n \n-    public static FormEntryPrompt promptWithRangeQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {\n+    public static FormEntryPrompt promptWithReadOnlyAndAnswer(IAnswerData answer) {\n+        return new MockFormEntryPromptBuilder()\n+                .withReadOnly(true)\n+                .withAnswer(answer)\n+                .build();\n+    }\n+\n+    public static FormEntryPrompt promptWithQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {\n+        return new MockFormEntryPromptBuilder()\n+                .withQuestion(questionDef)\n+                .withAnswer(answer)\n+                .build();\n+    }\n+\n+    public static FormEntryPrompt promptWithQuestionDefAndAnswer(QuestionDef questionDef, IAnswerData answer) {\n         return new MockFormEntryPromptBuilder()\n                 .withQuestion(questionDef)\n                 .withAnswer(answer)\n                 .build();\n     }\n \n-    public static FormEntryPrompt promptWithReadOnlyAndRangeQuestion(QuestionDef questionDef) {\n+    public static FormEntryPrompt promptWithAppearance(String appearance) {\n+        return new MockFormEntryPromptBuilder()\n+                .withAppearance(appearance)\n+                .build();\n+    }\n+\n+    public static FormEntryPrompt promptWithReadOnlyAndQuestionDef(QuestionDef questionDef) {\n         return new MockFormEntryPromptBuilder()\n                 .withReadOnly(true)\n                 .withQuestion(questionDef)\n", "next_change": {"commit": "9fdadadc6c268fbd81a24c9b8b78671b27293465", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\nindex 16430f1e1..7d82283f2 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n", "chunk": "@@ -71,11 +71,4 @@ public class QuestionWidgetHelpers {\n                 .withAppearance(appearance)\n                 .build();\n     }\n-\n-    public static FormEntryPrompt promptWithReadOnlyAndQuestionDef(QuestionDef questionDef) {\n-        return new MockFormEntryPromptBuilder()\n-                .withReadOnly(true)\n-                .withQuestion(questionDef)\n-                .build();\n-    }\n }\n", "next_change": {"commit": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\nindex 7d82283f2..16430f1e1 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n", "chunk": "@@ -71,4 +71,11 @@ public class QuestionWidgetHelpers {\n                 .withAppearance(appearance)\n                 .build();\n     }\n+\n+    public static FormEntryPrompt promptWithReadOnlyAndQuestionDef(QuestionDef questionDef) {\n+        return new MockFormEntryPromptBuilder()\n+                .withReadOnly(true)\n+                .withQuestion(questionDef)\n+                .build();\n+    }\n }\n", "next_change": {"commit": "7eb6cf2d16924ab63fca3eedc18ded631e9f1299", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\nindex 16430f1e1..226878a85 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n", "chunk": "@@ -66,16 +66,16 @@ public class QuestionWidgetHelpers {\n                 .build();\n     }\n \n-    public static FormEntryPrompt promptWithAppearance(String appearance) {\n+    public static FormEntryPrompt promptWithReadOnlyAndQuestionDef(QuestionDef questionDef) {\n         return new MockFormEntryPromptBuilder()\n-                .withAppearance(appearance)\n+                .withReadOnly(true)\n+                .withQuestion(questionDef)\n                 .build();\n     }\n \n-    public static FormEntryPrompt promptWithReadOnlyAndQuestionDef(QuestionDef questionDef) {\n+    public static FormEntryPrompt promptWithAppearance(String appearance) {\n         return new MockFormEntryPromptBuilder()\n-                .withReadOnly(true)\n-                .withQuestion(questionDef)\n+                .withAppearance(appearance)\n                 .build();\n     }\n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "message": "Merge commit", "committedDate": null}, {"oid": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "committedDate": "2020-11-06 12:03:46 +0000", "message": "Revert \"Reworking Rating Widget\""}, {"oid": "9fdadadc6c268fbd81a24c9b8b78671b27293465", "committedDate": "2020-11-06 18:07:26 +0530", "message": "reslolve conflicts"}, {"oid": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "committedDate": "2020-11-06 19:16:20 +0530", "message": "Revert \"Revert \"Reworking Rating Widget\"\""}, {"oid": "7eb6cf2d16924ab63fca3eedc18ded631e9f1299", "committedDate": "2020-11-12 10:56:05 +0100", "message": "Merge branch 'master' into rework_date_widget"}, {"oid": "e7d97823a196718baf07a48ef8ced5e6211dc991", "committedDate": "2021-01-14 11:20:18 +0100", "message": "Renamed PermissionUtils -> PermissionsProvider"}, {"oid": "f6b58a3a3e1bb4e54dfb96095411a77552c9f52e", "committedDate": "2021-05-05 14:43:40 +0100", "message": "Move RobolectricHelpers to testshared"}, {"oid": "6a56ef610a3bcd4c7377f2b39b1604f054274605", "committedDate": "2021-08-24 20:40:44 +0200", "message": "Enabled ClassWithOnlyPrivateConstructorsShouldBeFinal pmd rule"}, {"oid": "7930bb0b060341f89dea5f777ca3a6e32771a5e8", "committedDate": "2021-10-27 13:48:41 +0200", "message": "Naming improvements"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2MDA5Nw==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451560097", "body": "Same as above it's not just for range widgets.", "bodyText": "Same as above it's not just for range widgets.", "bodyHTML": "<p dir=\"auto\">Same as above it's not just for range widgets.</p>", "author": "grzesiek2010", "createdAt": "2020-07-08T13:51:26Z", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java", "diffHunk": "@@ -37,4 +38,18 @@ public static FormEntryPrompt promptWithReadOnly() {\n                 .withReadOnly(true)\n                 .build();\n     }\n+\n+    public static FormEntryPrompt promptWithRangeQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {\n+        return new MockFormEntryPromptBuilder()\n+                .withQuestion(questionDef)\n+                .withAnswer(answer)\n+                .build();\n+    }\n+\n+    public static FormEntryPrompt promptWithReadOnlyAndRangeQuestion(QuestionDef questionDef) {", "originalCommit": "25f6dc25ee36f51487563156a3399a4c578b769a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\nindex 46a01b873..bcf9477dd 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n", "chunk": "@@ -39,14 +39,27 @@ public class QuestionWidgetHelpers {\n                 .build();\n     }\n \n-    public static FormEntryPrompt promptWithRangeQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {\n+    public static FormEntryPrompt promptWithReadOnlyAndAnswer(IAnswerData answer) {\n+        return new MockFormEntryPromptBuilder()\n+                .withReadOnly(true)\n+                .withAnswer(answer)\n+                .build();\n+    }\n+\n+    public static FormEntryPrompt promptWithQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {\n         return new MockFormEntryPromptBuilder()\n                 .withQuestion(questionDef)\n                 .withAnswer(answer)\n                 .build();\n     }\n \n-    public static FormEntryPrompt promptWithReadOnlyAndRangeQuestion(QuestionDef questionDef) {\n+    public static FormEntryPrompt promptWithAppearance(String appearance) {\n+        return new MockFormEntryPromptBuilder()\n+                .withAppearance(appearance)\n+                .build();\n+    }\n+\n+    public static FormEntryPrompt promptWithReadOnlyAndQuestion(QuestionDef questionDef) {\n         return new MockFormEntryPromptBuilder()\n                 .withReadOnly(true)\n                 .withQuestion(questionDef)\n", "next_change": {"commit": "35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\nindex bcf9477dd..81f1ce218 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n", "chunk": "@@ -59,7 +65,7 @@ public class QuestionWidgetHelpers {\n                 .build();\n     }\n \n-    public static FormEntryPrompt promptWithReadOnlyAndQuestion(QuestionDef questionDef) {\n+    public static FormEntryPrompt promptWithReadOnlyAndQuestionDef(QuestionDef questionDef) {\n         return new MockFormEntryPromptBuilder()\n                 .withReadOnly(true)\n                 .withQuestion(questionDef)\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\nindex 46a01b873..16430f1e1 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n", "chunk": "@@ -39,14 +45,34 @@ public class QuestionWidgetHelpers {\n                 .build();\n     }\n \n-    public static FormEntryPrompt promptWithRangeQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {\n+    public static FormEntryPrompt promptWithReadOnlyAndAnswer(IAnswerData answer) {\n+        return new MockFormEntryPromptBuilder()\n+                .withReadOnly(true)\n+                .withAnswer(answer)\n+                .build();\n+    }\n+\n+    public static FormEntryPrompt promptWithQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {\n+        return new MockFormEntryPromptBuilder()\n+                .withQuestion(questionDef)\n+                .withAnswer(answer)\n+                .build();\n+    }\n+\n+    public static FormEntryPrompt promptWithQuestionDefAndAnswer(QuestionDef questionDef, IAnswerData answer) {\n         return new MockFormEntryPromptBuilder()\n                 .withQuestion(questionDef)\n                 .withAnswer(answer)\n                 .build();\n     }\n \n-    public static FormEntryPrompt promptWithReadOnlyAndRangeQuestion(QuestionDef questionDef) {\n+    public static FormEntryPrompt promptWithAppearance(String appearance) {\n+        return new MockFormEntryPromptBuilder()\n+                .withAppearance(appearance)\n+                .build();\n+    }\n+\n+    public static FormEntryPrompt promptWithReadOnlyAndQuestionDef(QuestionDef questionDef) {\n         return new MockFormEntryPromptBuilder()\n                 .withReadOnly(true)\n                 .withQuestion(questionDef)\n", "next_change": {"commit": "9fdadadc6c268fbd81a24c9b8b78671b27293465", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\nindex 16430f1e1..7d82283f2 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n", "chunk": "@@ -71,11 +71,4 @@ public class QuestionWidgetHelpers {\n                 .withAppearance(appearance)\n                 .build();\n     }\n-\n-    public static FormEntryPrompt promptWithReadOnlyAndQuestionDef(QuestionDef questionDef) {\n-        return new MockFormEntryPromptBuilder()\n-                .withReadOnly(true)\n-                .withQuestion(questionDef)\n-                .build();\n-    }\n }\n", "next_change": {"commit": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\nindex 7d82283f2..16430f1e1 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n", "chunk": "@@ -71,4 +71,11 @@ public class QuestionWidgetHelpers {\n                 .withAppearance(appearance)\n                 .build();\n     }\n+\n+    public static FormEntryPrompt promptWithReadOnlyAndQuestionDef(QuestionDef questionDef) {\n+        return new MockFormEntryPromptBuilder()\n+                .withReadOnly(true)\n+                .withQuestion(questionDef)\n+                .build();\n+    }\n }\n", "next_change": {"commit": "7eb6cf2d16924ab63fca3eedc18ded631e9f1299", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\nindex 16430f1e1..226878a85 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n", "chunk": "@@ -66,16 +66,16 @@ public class QuestionWidgetHelpers {\n                 .build();\n     }\n \n-    public static FormEntryPrompt promptWithAppearance(String appearance) {\n+    public static FormEntryPrompt promptWithReadOnlyAndQuestionDef(QuestionDef questionDef) {\n         return new MockFormEntryPromptBuilder()\n-                .withAppearance(appearance)\n+                .withReadOnly(true)\n+                .withQuestion(questionDef)\n                 .build();\n     }\n \n-    public static FormEntryPrompt promptWithReadOnlyAndQuestionDef(QuestionDef questionDef) {\n+    public static FormEntryPrompt promptWithAppearance(String appearance) {\n         return new MockFormEntryPromptBuilder()\n-                .withReadOnly(true)\n-                .withQuestion(questionDef)\n+                .withAppearance(appearance)\n                 .build();\n     }\n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "message": "Merge commit", "committedDate": null}, {"oid": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "committedDate": "2020-11-06 12:03:46 +0000", "message": "Revert \"Reworking Rating Widget\""}, {"oid": "9fdadadc6c268fbd81a24c9b8b78671b27293465", "committedDate": "2020-11-06 18:07:26 +0530", "message": "reslolve conflicts"}, {"oid": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "committedDate": "2020-11-06 19:16:20 +0530", "message": "Revert \"Revert \"Reworking Rating Widget\"\""}, {"oid": "7eb6cf2d16924ab63fca3eedc18ded631e9f1299", "committedDate": "2020-11-12 10:56:05 +0100", "message": "Merge branch 'master' into rework_date_widget"}, {"oid": "e7d97823a196718baf07a48ef8ced5e6211dc991", "committedDate": "2021-01-14 11:20:18 +0100", "message": "Renamed PermissionUtils -> PermissionsProvider"}, {"oid": "f6b58a3a3e1bb4e54dfb96095411a77552c9f52e", "committedDate": "2021-05-05 14:43:40 +0100", "message": "Move RobolectricHelpers to testshared"}, {"oid": "6a56ef610a3bcd4c7377f2b39b1604f054274605", "committedDate": "2021-08-24 20:40:44 +0200", "message": "Enabled ClassWithOnlyPrivateConstructorsShouldBeFinal pmd rule"}, {"oid": "7930bb0b060341f89dea5f777ca3a6e32771a5e8", "committedDate": "2021-10-27 13:48:41 +0200", "message": "Naming improvements"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxNzg1OQ==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457217859", "body": "Both can be private.", "bodyText": "Both can be private.", "bodyHTML": "<p dir=\"auto\">Both can be private.</p>", "author": "grzesiek2010", "createdAt": "2020-07-20T09:28:27Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;", "originalCommit": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 319826c7e..a60489839 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -31,8 +31,8 @@ import org.odk.collect.android.utilities.UiUtils;\n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    public static final int STANDARD_WIDTH_OF_STAR = 48;\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n     RatingWidgetAnswerBinding binding;\n \n", "next_change": {"commit": "32ecc694ff96cc73ee9aa268a291feda2fdcb4ba", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex a60489839..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -28,9 +31,12 @@ import org.odk.collect.android.formentry.questions.QuestionDetails;\n import org.odk.collect.android.utilities.ScreenUtils;\n import org.odk.collect.android.utilities.UiUtils;\n \n+import java.lang.reflect.Field;\n+\n+import timber.log.Timber;\n+\n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-\n     private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n     private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n", "next_change": {"commit": "35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..f98fefbf4 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,140 +17,121 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.os.Build;\n-import android.view.MotionEvent;\n-import android.view.View;\n-import android.widget.AbsSeekBar;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n-\n-import java.lang.reflect.Field;\n-\n-import timber.log.Timber;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    RatingWidgetAnswerBinding binding;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails) {\n+    final GridLayout gridLayout;\n+    Integer answer;\n+\n+    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n-        }\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n \n-        if (prompt.isReadOnly()) {\n-            binding.ratingBar1.setEnabled(false);\n-            binding.ratingBar2.setEnabled(false);\n-        } else {\n-            setUpRatingBar(maxNumberOfStars);\n-        }\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n             }\n         }\n-        return answerView;\n-    }\n \n-    @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    @Override\n-    public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n-    }\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n-    @Override\n-    public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n-    }\n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-    @SuppressLint(\"ClickableViewAccessibility\")\n-    private void setUpRatingBar(int maxNumberOfStars) {\n-        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n-        binding.ratingBar1.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar2.setRating(0);\n-            }\n-            return false;\n-        });\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        binding.ratingBar2.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar1.setRating(maxNumberOfStars);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-            return false;\n-        });\n+            answer = position + 1;\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0);\n-            binding.ratingBar1.setRating(rating);\n             widgetValueChanged();\n         });\n+        return imageButton;\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    @Override\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        return answer != null ? new IntegerData(answer) : null;\n+    }\n \n-        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n-        // See https://stackoverflow.com/questions/44342481\n-        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n-            try {\n-                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n-                field.setAccessible(true);\n-                field.set(binding.ratingBar1, 0.6f);\n-                field.set(binding.ratingBar2, 0.6f);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                Timber.e(e);\n+    @Override\n+    public void clearAnswer() {\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n             }\n         }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6bb71d8a150b39dc0419cf94839ed2364021fe52", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f98fefbf4..16f698824 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,121 +17,90 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n \n-        renderGrid(context, numberOfStars, columns, rows);\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n             }\n         }\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n-\n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n-\n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.getAnswerText() != null) {\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n-    }\n-\n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n-            }\n-        }\n-\n-        answer = null;\n-        widgetValueChanged();\n+        ratingBar.setRating(0.0F);\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    protected RatingBar getRatingBar() {\n+        return ratingBar;\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int calculateColumns(int widthOfStar) {\n+        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n+                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n     }\n }\n", "next_change": {"commit": "32ea188912d6279747bced50dc3ad50790b4bb6f", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 16f698824..2a16efd36 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -44,63 +44,69 @@ public class RatingWidget extends QuestionWidget {\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-\n         RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n         int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns(48);\n \n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-        if (rows == 1) {\n-            binding.ratingBar.setVisibility(VISIBLE);\n-            this.ratingBar = binding.ratingBar;\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n-            binding.ratingBar.setVisibility(GONE);\n-            columns = calculateColumns(36);\n-            rows = (int) Math.ceil((double) numberOfStars / columns);\n-            if (rows == 1) {\n-                binding.ratingBar2.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar2;\n-            } else {\n-                binding.ratingBar3.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar3;\n-            }\n+            binding.ratingBar1.setNumStars(numberOfStars);\n         }\n \n-        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        ratingBar.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n \n         if (prompt.getAnswerText() != null) {\n-            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n         }\n         return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        ratingBar.setOnLongClickListener(l);\n+        binding.ratingBar1.setOnLongClickListener(l);\n+        binding.ratingBar2.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n+        return binding.ratingBar1.getRating() == 0.0F ? null :\n+                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        ratingBar.setRating(0.0F);\n-    }\n-\n-    protected RatingBar getRatingBar() {\n-        return ratingBar;\n+        binding.ratingBar1.setRating(0.0F);\n     }\n \n-    private int calculateColumns(int widthOfStar) {\n-        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n-                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n+    protected RatingWidgetAnswerBinding getBinding() {\n+        return binding;\n     }\n }\n", "next_change": {"commit": "ea7cd1ae54063565223afa7e3aacc6955d5a4606", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 2a16efd36..f4e97bef9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -105,8 +107,4 @@ public class RatingWidget extends QuestionWidget {\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n-\n-    protected RatingWidgetAnswerBinding getBinding() {\n-        return binding;\n-    }\n }\n", "next_change": {"commit": "ff87f43f08b4475f9cef0e3bcf381900aecc57a0", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f4e97bef9..d74916d2b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -92,19 +86,29 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar1.setOnLongClickListener(l);\n-        binding.ratingBar2.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F ? null :\n-                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n+\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    }\n+\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 319826c7e..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -28,11 +31,14 @@ import org.odk.collect.android.formentry.questions.QuestionDetails;\n import org.odk.collect.android.utilities.ScreenUtils;\n import org.odk.collect.android.utilities.UiUtils;\n \n+import java.lang.reflect.Field;\n+\n+import timber.log.Timber;\n+\n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-\n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    public static final int STANDARD_WIDTH_OF_STAR = 48;\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n     RatingWidgetAnswerBinding binding;\n \n", "next_change": {"commit": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..c351744f9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,140 +17,122 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.os.Build;\n-import android.view.MotionEvent;\n-import android.view.View;\n-import android.widget.AbsSeekBar;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n-\n-import java.lang.reflect.Field;\n-\n-import timber.log.Timber;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    RatingWidgetAnswerBinding binding;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+\n+    final GridLayout gridLayout;\n+    Integer answer;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n \n-        if (prompt.isReadOnly()) {\n-            binding.ratingBar1.setEnabled(false);\n-            binding.ratingBar2.setEnabled(false);\n-        } else {\n-            setUpRatingBar(maxNumberOfStars);\n-        }\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n             }\n         }\n-        return answerView;\n-    }\n \n-    @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    @Override\n-    public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n-    }\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n-    @Override\n-    public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n-    }\n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-    @SuppressLint(\"ClickableViewAccessibility\")\n-    private void setUpRatingBar(int maxNumberOfStars) {\n-        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n-        binding.ratingBar1.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar2.setRating(0);\n-            }\n-            return false;\n-        });\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        binding.ratingBar2.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar1.setRating(maxNumberOfStars);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-            return false;\n-        });\n+            answer = position + 1;\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0);\n-            binding.ratingBar1.setRating(rating);\n             widgetValueChanged();\n         });\n+        return imageButton;\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    @Override\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        return answer != null ? new IntegerData(answer) : null;\n+    }\n \n-        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n-        // See https://stackoverflow.com/questions/44342481\n-        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n-            try {\n-                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n-                field.setAccessible(true);\n-                field.set(binding.ratingBar1, 0.6f);\n-                field.set(binding.ratingBar2, 0.6f);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                Timber.e(e);\n+    @Override\n+    public void clearAnswer() {\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n             }\n         }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex c351744f9..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,122 +17,140 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n-\n-import androidx.core.content.ContextCompat;\n+import android.os.Build;\n+import android.view.MotionEvent;\n+import android.view.View;\n+import android.widget.AbsSeekBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n+\n+import java.lang.reflect.Field;\n+\n+import timber.log.Timber;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-\n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-\n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n-\n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n-\n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n-\n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n+\n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n+        } else {\n+            binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n+        }\n \n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n         }\n-    }\n \n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n+        if (prompt.getAnswerText() != null) {\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n             }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        }\n+        return answerView;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n+        binding.ratingBar1.setRating(0.0F);\n+    }\n+\n+    @SuppressLint(\"ClickableViewAccessibility\")\n+    private void setUpRatingBar(int maxNumberOfStars) {\n+        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n+        binding.ratingBar1.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar2.setRating(0);\n             }\n-        }\n+            return false;\n+        });\n+\n+        binding.ratingBar2.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar1.setRating(maxNumberOfStars);\n+            }\n+            return false;\n+        });\n \n-        answer = null;\n-        widgetValueChanged();\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            binding.ratingBar1.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n+        // See https://stackoverflow.com/questions/44342481\n+        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n+            try {\n+                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n+                field.setAccessible(true);\n+                field.set(binding.ratingBar1, 0.6f);\n+                field.set(binding.ratingBar2, 0.6f);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                Timber.e(e);\n+            }\n+        }\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n     }\n }\n", "next_change": {"commit": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..95c39bebe 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -146,7 +146,7 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+        return (int) ((ScreenUtils.getScreenWidth(getContext()) - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n                 / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "message": "Merge commit", "committedDate": null}, {"oid": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "committedDate": "2020-11-06 12:03:46 +0000", "message": "Revert \"Reworking Rating Widget\""}, {"oid": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "committedDate": "2020-11-06 19:16:20 +0530", "message": "Revert \"Revert \"Reworking Rating Widget\"\""}, {"oid": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "committedDate": "2022-06-29 11:01:10 +0200", "message": "Moved mapbox code to new module"}, {"oid": "0bc622839cde2df40a9012b6fa435b6630825f42", "committedDate": "2022-09-28 14:16:53 +0100", "message": "Allow code to be executed in constructor before rendering widget"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxODU4Mg==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457218582", "body": "Please factor it out to a separate method, I mean the calculation because you can keep the variable.", "bodyText": "Please factor it out to a separate method, I mean the calculation because you can keep the variable.", "bodyHTML": "<p dir=\"auto\">Please factor it out to a separate method, I mean the calculation because you can keep the variable.</p>", "author": "grzesiek2010", "createdAt": "2020-07-20T09:29:21Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)", "originalCommit": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 319826c7e..a60489839 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -45,22 +45,19 @@ public class RatingWidget extends QuestionWidget {\n         binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-\n-        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n-\n-        binding.ratingBar1.setStepSize(1.0F);\n-        binding.ratingBar2.setStepSize(1.0F);\n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n \n         if (maxNumberOfStars < numberOfStars) {\n             binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n             binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n             binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n             binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n         }\n \n         binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n", "next_change": {"commit": "32ecc694ff96cc73ee9aa268a291feda2fdcb4ba", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex a60489839..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -60,21 +66,12 @@ public class RatingWidget extends QuestionWidget {\n             binding.ratingBar1.setMax(numberOfStars);\n         }\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(rating);\n-            binding.ratingBar2.setRating(0.0F);\n-            widgetValueChanged();\n-        });\n-\n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n-\n-\n-        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n-        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n+        }\n \n         if (prompt.getAnswerText() != null) {\n             int rating = Integer.parseInt(prompt.getAnswerText());\n", "next_change": {"commit": "35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..f98fefbf4 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,140 +17,121 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.os.Build;\n-import android.view.MotionEvent;\n-import android.view.View;\n-import android.widget.AbsSeekBar;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n-\n-import java.lang.reflect.Field;\n-\n-import timber.log.Timber;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    RatingWidgetAnswerBinding binding;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails) {\n+    final GridLayout gridLayout;\n+    Integer answer;\n+\n+    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n-        }\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n \n-        if (prompt.isReadOnly()) {\n-            binding.ratingBar1.setEnabled(false);\n-            binding.ratingBar2.setEnabled(false);\n-        } else {\n-            setUpRatingBar(maxNumberOfStars);\n-        }\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n             }\n         }\n-        return answerView;\n-    }\n \n-    @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    @Override\n-    public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n-    }\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n-    @Override\n-    public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n-    }\n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-    @SuppressLint(\"ClickableViewAccessibility\")\n-    private void setUpRatingBar(int maxNumberOfStars) {\n-        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n-        binding.ratingBar1.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar2.setRating(0);\n-            }\n-            return false;\n-        });\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        binding.ratingBar2.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar1.setRating(maxNumberOfStars);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-            return false;\n-        });\n+            answer = position + 1;\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0);\n-            binding.ratingBar1.setRating(rating);\n             widgetValueChanged();\n         });\n+        return imageButton;\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    @Override\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        return answer != null ? new IntegerData(answer) : null;\n+    }\n \n-        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n-        // See https://stackoverflow.com/questions/44342481\n-        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n-            try {\n-                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n-                field.setAccessible(true);\n-                field.set(binding.ratingBar1, 0.6f);\n-                field.set(binding.ratingBar2, 0.6f);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                Timber.e(e);\n+    @Override\n+    public void clearAnswer() {\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n             }\n         }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6bb71d8a150b39dc0419cf94839ed2364021fe52", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f98fefbf4..16f698824 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,121 +17,90 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n \n-        renderGrid(context, numberOfStars, columns, rows);\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n             }\n         }\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n-\n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n-\n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.getAnswerText() != null) {\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n-    }\n-\n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n-            }\n-        }\n-\n-        answer = null;\n-        widgetValueChanged();\n+        ratingBar.setRating(0.0F);\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    protected RatingBar getRatingBar() {\n+        return ratingBar;\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int calculateColumns(int widthOfStar) {\n+        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n+                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n     }\n }\n", "next_change": {"commit": "32ea188912d6279747bced50dc3ad50790b4bb6f", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 16f698824..2a16efd36 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -44,63 +44,69 @@ public class RatingWidget extends QuestionWidget {\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-\n         RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n         int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns(48);\n \n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-        if (rows == 1) {\n-            binding.ratingBar.setVisibility(VISIBLE);\n-            this.ratingBar = binding.ratingBar;\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n-            binding.ratingBar.setVisibility(GONE);\n-            columns = calculateColumns(36);\n-            rows = (int) Math.ceil((double) numberOfStars / columns);\n-            if (rows == 1) {\n-                binding.ratingBar2.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar2;\n-            } else {\n-                binding.ratingBar3.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar3;\n-            }\n+            binding.ratingBar1.setNumStars(numberOfStars);\n         }\n \n-        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        ratingBar.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n \n         if (prompt.getAnswerText() != null) {\n-            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n         }\n         return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        ratingBar.setOnLongClickListener(l);\n+        binding.ratingBar1.setOnLongClickListener(l);\n+        binding.ratingBar2.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n+        return binding.ratingBar1.getRating() == 0.0F ? null :\n+                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        ratingBar.setRating(0.0F);\n-    }\n-\n-    protected RatingBar getRatingBar() {\n-        return ratingBar;\n+        binding.ratingBar1.setRating(0.0F);\n     }\n \n-    private int calculateColumns(int widthOfStar) {\n-        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n-                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n+    protected RatingWidgetAnswerBinding getBinding() {\n+        return binding;\n     }\n }\n", "next_change": {"commit": "ea7cd1ae54063565223afa7e3aacc6955d5a4606", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 2a16efd36..f4e97bef9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -105,8 +107,4 @@ public class RatingWidget extends QuestionWidget {\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n-\n-    protected RatingWidgetAnswerBinding getBinding() {\n-        return binding;\n-    }\n }\n", "next_change": {"commit": "ff87f43f08b4475f9cef0e3bcf381900aecc57a0", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f4e97bef9..d74916d2b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -92,19 +86,29 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar1.setOnLongClickListener(l);\n-        binding.ratingBar2.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F ? null :\n-                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n+\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    }\n+\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 319826c7e..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -45,38 +51,27 @@ public class RatingWidget extends QuestionWidget {\n         binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-\n-        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n-\n-        binding.ratingBar1.setStepSize(1.0F);\n-        binding.ratingBar2.setStepSize(1.0F);\n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n \n         if (maxNumberOfStars < numberOfStars) {\n             binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n             binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n             binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n             binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n         }\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(rating);\n-            binding.ratingBar2.setRating(0.0F);\n-            widgetValueChanged();\n-        });\n-\n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n-\n-        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n-        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n+        }\n \n         if (prompt.getAnswerText() != null) {\n             int rating = Integer.parseInt(prompt.getAnswerText());\n", "next_change": {"commit": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..c351744f9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,140 +17,122 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.os.Build;\n-import android.view.MotionEvent;\n-import android.view.View;\n-import android.widget.AbsSeekBar;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n-\n-import java.lang.reflect.Field;\n-\n-import timber.log.Timber;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    RatingWidgetAnswerBinding binding;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+\n+    final GridLayout gridLayout;\n+    Integer answer;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n \n-        if (prompt.isReadOnly()) {\n-            binding.ratingBar1.setEnabled(false);\n-            binding.ratingBar2.setEnabled(false);\n-        } else {\n-            setUpRatingBar(maxNumberOfStars);\n-        }\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n             }\n         }\n-        return answerView;\n-    }\n \n-    @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    @Override\n-    public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n-    }\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n-    @Override\n-    public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n-    }\n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-    @SuppressLint(\"ClickableViewAccessibility\")\n-    private void setUpRatingBar(int maxNumberOfStars) {\n-        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n-        binding.ratingBar1.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar2.setRating(0);\n-            }\n-            return false;\n-        });\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        binding.ratingBar2.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar1.setRating(maxNumberOfStars);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-            return false;\n-        });\n+            answer = position + 1;\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0);\n-            binding.ratingBar1.setRating(rating);\n             widgetValueChanged();\n         });\n+        return imageButton;\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    @Override\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        return answer != null ? new IntegerData(answer) : null;\n+    }\n \n-        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n-        // See https://stackoverflow.com/questions/44342481\n-        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n-            try {\n-                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n-                field.setAccessible(true);\n-                field.set(binding.ratingBar1, 0.6f);\n-                field.set(binding.ratingBar2, 0.6f);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                Timber.e(e);\n+    @Override\n+    public void clearAnswer() {\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n             }\n         }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex c351744f9..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,122 +17,140 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n-\n-import androidx.core.content.ContextCompat;\n+import android.os.Build;\n+import android.view.MotionEvent;\n+import android.view.View;\n+import android.widget.AbsSeekBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n+\n+import java.lang.reflect.Field;\n+\n+import timber.log.Timber;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-\n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-\n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n-\n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n-\n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n-\n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n+\n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n+        } else {\n+            binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n+        }\n \n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n         }\n-    }\n \n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n+        if (prompt.getAnswerText() != null) {\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n             }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        }\n+        return answerView;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n+        binding.ratingBar1.setRating(0.0F);\n+    }\n+\n+    @SuppressLint(\"ClickableViewAccessibility\")\n+    private void setUpRatingBar(int maxNumberOfStars) {\n+        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n+        binding.ratingBar1.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar2.setRating(0);\n             }\n-        }\n+            return false;\n+        });\n+\n+        binding.ratingBar2.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar1.setRating(maxNumberOfStars);\n+            }\n+            return false;\n+        });\n \n-        answer = null;\n-        widgetValueChanged();\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            binding.ratingBar1.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n+        // See https://stackoverflow.com/questions/44342481\n+        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n+            try {\n+                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n+                field.setAccessible(true);\n+                field.set(binding.ratingBar1, 0.6f);\n+                field.set(binding.ratingBar2, 0.6f);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                Timber.e(e);\n+            }\n+        }\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n     }\n }\n", "next_change": {"commit": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..95c39bebe 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -146,7 +146,7 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+        return (int) ((ScreenUtils.getScreenWidth(getContext()) - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n                 / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "message": "Merge commit", "committedDate": null}, {"oid": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "committedDate": "2020-11-06 12:03:46 +0000", "message": "Revert \"Reworking Rating Widget\""}, {"oid": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "committedDate": "2020-11-06 19:16:20 +0530", "message": "Revert \"Revert \"Reworking Rating Widget\"\""}, {"oid": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "committedDate": "2022-06-29 11:01:10 +0200", "message": "Moved mapbox code to new module"}, {"oid": "0bc622839cde2df40a9012b6fa435b6630825f42", "committedDate": "2022-09-28 14:16:53 +0100", "message": "Allow code to be executed in constructor before rendering widget"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMDcyNw==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457220727", "body": "I think more readable way of using the ternarry operator in this case would be:\r\n```\r\nreturn binding.ratingBar1.getRating() == 0.0F \r\n                        ? null \r\n                        : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\r\n```\r\nso new line for each option.", "bodyText": "I think more readable way of using the ternarry operator in this case would be:\nreturn binding.ratingBar1.getRating() == 0.0F \n                        ? null \n                        : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n\nso new line for each option.", "bodyHTML": "<p dir=\"auto\">I think more readable way of using the ternarry operator in this case would be:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"return binding.ratingBar1.getRating() == 0.0F \n                        ? null \n                        : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\"><pre><code>return binding.ratingBar1.getRating() == 0.0F \n                        ? null \n                        : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n</code></pre></div>\n<p dir=\"auto\">so new line for each option.</p>", "author": "grzesiek2010", "createdAt": "2020-07-20T09:31:54Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n+        } else {\n+            binding.ratingBar1.setNumStars(numberOfStars);\n         }\n-    }\n \n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(rating);\n+            binding.ratingBar2.setRating(0.0F);\n+            widgetValueChanged();\n+        });\n \n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n             widgetValueChanged();\n         });\n-        return imageButton;\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+\n+        if (prompt.getAnswerText() != null) {\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n+        }\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+        binding.ratingBar1.setOnLongClickListener(l);\n+        binding.ratingBar2.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return binding.ratingBar1.getRating() == 0.0F ? null :", "originalCommit": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 319826c7e..a60489839 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -90,19 +88,29 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar1.setOnLongClickListener(l);\n-        binding.ratingBar2.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F ? null :\n-                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n+\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    }\n+\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n+    }\n }\n", "next_change": {"commit": "35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex a60489839..f98fefbf4 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,100 +17,121 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.view.View;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    RatingWidgetAnswerBinding binding;\n+    final GridLayout gridLayout;\n+    Integer answer;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n+\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n+            }\n         }\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(rating);\n-            binding.ratingBar2.setRating(0.0F);\n-            widgetValueChanged();\n-        });\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n-        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-        }\n-        return answerView;\n+            answer = position + 1;\n+\n+            widgetValueChanged();\n+        });\n+        return imageButton;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return answer != null ? new IntegerData(answer) : null;\n     }\n \n     @Override\n     public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n+            }\n+        }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6bb71d8a150b39dc0419cf94839ed2364021fe52", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f98fefbf4..16f698824 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,121 +17,90 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n \n-        renderGrid(context, numberOfStars, columns, rows);\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n             }\n         }\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n-\n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n-\n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.getAnswerText() != null) {\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n-    }\n-\n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n-            }\n-        }\n-\n-        answer = null;\n-        widgetValueChanged();\n+        ratingBar.setRating(0.0F);\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    protected RatingBar getRatingBar() {\n+        return ratingBar;\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int calculateColumns(int widthOfStar) {\n+        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n+                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n     }\n }\n", "next_change": {"commit": "32ea188912d6279747bced50dc3ad50790b4bb6f", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 16f698824..2a16efd36 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -44,63 +44,69 @@ public class RatingWidget extends QuestionWidget {\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-\n         RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n         int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns(48);\n \n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-        if (rows == 1) {\n-            binding.ratingBar.setVisibility(VISIBLE);\n-            this.ratingBar = binding.ratingBar;\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n-            binding.ratingBar.setVisibility(GONE);\n-            columns = calculateColumns(36);\n-            rows = (int) Math.ceil((double) numberOfStars / columns);\n-            if (rows == 1) {\n-                binding.ratingBar2.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar2;\n-            } else {\n-                binding.ratingBar3.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar3;\n-            }\n+            binding.ratingBar1.setNumStars(numberOfStars);\n         }\n \n-        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        ratingBar.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n \n         if (prompt.getAnswerText() != null) {\n-            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n         }\n         return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        ratingBar.setOnLongClickListener(l);\n+        binding.ratingBar1.setOnLongClickListener(l);\n+        binding.ratingBar2.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n+        return binding.ratingBar1.getRating() == 0.0F ? null :\n+                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        ratingBar.setRating(0.0F);\n-    }\n-\n-    protected RatingBar getRatingBar() {\n-        return ratingBar;\n+        binding.ratingBar1.setRating(0.0F);\n     }\n \n-    private int calculateColumns(int widthOfStar) {\n-        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n-                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n+    protected RatingWidgetAnswerBinding getBinding() {\n+        return binding;\n     }\n }\n", "next_change": {"commit": "ea7cd1ae54063565223afa7e3aacc6955d5a4606", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 2a16efd36..f4e97bef9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -105,8 +107,4 @@ public class RatingWidget extends QuestionWidget {\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n-\n-    protected RatingWidgetAnswerBinding getBinding() {\n-        return binding;\n-    }\n }\n", "next_change": {"commit": "ff87f43f08b4475f9cef0e3bcf381900aecc57a0", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f4e97bef9..d74916d2b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -92,19 +86,29 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar1.setOnLongClickListener(l);\n-        binding.ratingBar2.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F ? null :\n-                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n+\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    }\n+\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 319826c7e..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -90,19 +85,72 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar1.setOnLongClickListener(l);\n-        binding.ratingBar2.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F ? null :\n-                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n+\n+    @SuppressLint(\"ClickableViewAccessibility\")\n+    private void setUpRatingBar(int maxNumberOfStars) {\n+        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n+        binding.ratingBar1.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar2.setRating(0);\n+            }\n+            return false;\n+        });\n+\n+        binding.ratingBar2.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar1.setRating(maxNumberOfStars);\n+            }\n+            return false;\n+        });\n+\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            binding.ratingBar1.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n+        // See https://stackoverflow.com/questions/44342481\n+        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n+            try {\n+                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n+                field.setAccessible(true);\n+                field.set(binding.ratingBar1, 0.6f);\n+                field.set(binding.ratingBar2, 0.6f);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                Timber.e(e);\n+            }\n+        }\n+    }\n+\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    }\n+\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n+    }\n }\n", "next_change": {"commit": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..c351744f9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,140 +17,122 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.os.Build;\n-import android.view.MotionEvent;\n-import android.view.View;\n-import android.widget.AbsSeekBar;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n-\n-import java.lang.reflect.Field;\n-\n-import timber.log.Timber;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    RatingWidgetAnswerBinding binding;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+\n+    final GridLayout gridLayout;\n+    Integer answer;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n \n-        if (prompt.isReadOnly()) {\n-            binding.ratingBar1.setEnabled(false);\n-            binding.ratingBar2.setEnabled(false);\n-        } else {\n-            setUpRatingBar(maxNumberOfStars);\n-        }\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n             }\n         }\n-        return answerView;\n-    }\n \n-    @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    @Override\n-    public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n-    }\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n-    @Override\n-    public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n-    }\n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-    @SuppressLint(\"ClickableViewAccessibility\")\n-    private void setUpRatingBar(int maxNumberOfStars) {\n-        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n-        binding.ratingBar1.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar2.setRating(0);\n-            }\n-            return false;\n-        });\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        binding.ratingBar2.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar1.setRating(maxNumberOfStars);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-            return false;\n-        });\n+            answer = position + 1;\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0);\n-            binding.ratingBar1.setRating(rating);\n             widgetValueChanged();\n         });\n+        return imageButton;\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    @Override\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        return answer != null ? new IntegerData(answer) : null;\n+    }\n \n-        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n-        // See https://stackoverflow.com/questions/44342481\n-        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n-            try {\n-                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n-                field.setAccessible(true);\n-                field.set(binding.ratingBar1, 0.6f);\n-                field.set(binding.ratingBar2, 0.6f);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                Timber.e(e);\n+    @Override\n+    public void clearAnswer() {\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n             }\n         }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex c351744f9..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,122 +17,140 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n-\n-import androidx.core.content.ContextCompat;\n+import android.os.Build;\n+import android.view.MotionEvent;\n+import android.view.View;\n+import android.widget.AbsSeekBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n+\n+import java.lang.reflect.Field;\n+\n+import timber.log.Timber;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-\n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-\n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n-\n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n-\n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n-\n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n+\n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n+        } else {\n+            binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n+        }\n \n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n         }\n-    }\n \n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n+        if (prompt.getAnswerText() != null) {\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n             }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        }\n+        return answerView;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n+        binding.ratingBar1.setRating(0.0F);\n+    }\n+\n+    @SuppressLint(\"ClickableViewAccessibility\")\n+    private void setUpRatingBar(int maxNumberOfStars) {\n+        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n+        binding.ratingBar1.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar2.setRating(0);\n             }\n-        }\n+            return false;\n+        });\n+\n+        binding.ratingBar2.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar1.setRating(maxNumberOfStars);\n+            }\n+            return false;\n+        });\n \n-        answer = null;\n-        widgetValueChanged();\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            binding.ratingBar1.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n+        // See https://stackoverflow.com/questions/44342481\n+        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n+            try {\n+                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n+                field.setAccessible(true);\n+                field.set(binding.ratingBar1, 0.6f);\n+                field.set(binding.ratingBar2, 0.6f);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                Timber.e(e);\n+            }\n+        }\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n     }\n }\n", "next_change": {"commit": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..95c39bebe 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -146,7 +146,7 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+        return (int) ((ScreenUtils.getScreenWidth(getContext()) - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n                 / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "message": "Merge commit", "committedDate": null}, {"oid": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "committedDate": "2020-11-06 12:03:46 +0000", "message": "Revert \"Reworking Rating Widget\""}, {"oid": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "committedDate": "2020-11-06 19:16:20 +0530", "message": "Revert \"Revert \"Reworking Rating Widget\"\""}, {"oid": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "committedDate": "2022-06-29 11:01:10 +0200", "message": "Moved mapbox code to new module"}, {"oid": "0bc622839cde2df40a9012b6fa435b6630825f42", "committedDate": "2022-09-28 14:16:53 +0100", "message": "Allow code to be executed in constructor before rendering widget"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMTkyOQ==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457221929", "body": "Please fix this one-char parameter name, even simple `listener` would be better. ", "bodyText": "Please fix this one-char parameter name, even simple listener would be better.", "bodyHTML": "<p dir=\"auto\">Please fix this one-char parameter name, even simple <code>listener</code> would be better.</p>", "author": "grzesiek2010", "createdAt": "2020-07-20T09:33:19Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n+        } else {\n+            binding.ratingBar1.setNumStars(numberOfStars);\n         }\n-    }\n \n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(rating);\n+            binding.ratingBar2.setRating(0.0F);\n+            widgetValueChanged();\n+        });\n \n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n             widgetValueChanged();\n         });\n-        return imageButton;\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+\n+        if (prompt.getAnswerText() != null) {\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n+        }\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {", "originalCommit": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 319826c7e..a60489839 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -90,19 +88,29 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar1.setOnLongClickListener(l);\n-        binding.ratingBar2.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F ? null :\n-                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n+\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    }\n+\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n+    }\n }\n", "next_change": {"commit": "35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex a60489839..f98fefbf4 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,100 +17,121 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.view.View;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    RatingWidgetAnswerBinding binding;\n+    final GridLayout gridLayout;\n+    Integer answer;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n+\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n+            }\n         }\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(rating);\n-            binding.ratingBar2.setRating(0.0F);\n-            widgetValueChanged();\n-        });\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n-        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-        }\n-        return answerView;\n+            answer = position + 1;\n+\n+            widgetValueChanged();\n+        });\n+        return imageButton;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return answer != null ? new IntegerData(answer) : null;\n     }\n \n     @Override\n     public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n+            }\n+        }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6bb71d8a150b39dc0419cf94839ed2364021fe52", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f98fefbf4..16f698824 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,121 +17,90 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n \n-        renderGrid(context, numberOfStars, columns, rows);\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n             }\n         }\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n-\n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n-\n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.getAnswerText() != null) {\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n-    }\n-\n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n-            }\n-        }\n-\n-        answer = null;\n-        widgetValueChanged();\n+        ratingBar.setRating(0.0F);\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    protected RatingBar getRatingBar() {\n+        return ratingBar;\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int calculateColumns(int widthOfStar) {\n+        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n+                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n     }\n }\n", "next_change": {"commit": "32ea188912d6279747bced50dc3ad50790b4bb6f", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 16f698824..2a16efd36 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -44,63 +44,69 @@ public class RatingWidget extends QuestionWidget {\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-\n         RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n         int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns(48);\n \n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-        if (rows == 1) {\n-            binding.ratingBar.setVisibility(VISIBLE);\n-            this.ratingBar = binding.ratingBar;\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n-            binding.ratingBar.setVisibility(GONE);\n-            columns = calculateColumns(36);\n-            rows = (int) Math.ceil((double) numberOfStars / columns);\n-            if (rows == 1) {\n-                binding.ratingBar2.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar2;\n-            } else {\n-                binding.ratingBar3.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar3;\n-            }\n+            binding.ratingBar1.setNumStars(numberOfStars);\n         }\n \n-        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        ratingBar.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n \n         if (prompt.getAnswerText() != null) {\n-            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n         }\n         return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        ratingBar.setOnLongClickListener(l);\n+        binding.ratingBar1.setOnLongClickListener(l);\n+        binding.ratingBar2.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n+        return binding.ratingBar1.getRating() == 0.0F ? null :\n+                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        ratingBar.setRating(0.0F);\n-    }\n-\n-    protected RatingBar getRatingBar() {\n-        return ratingBar;\n+        binding.ratingBar1.setRating(0.0F);\n     }\n \n-    private int calculateColumns(int widthOfStar) {\n-        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n-                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n+    protected RatingWidgetAnswerBinding getBinding() {\n+        return binding;\n     }\n }\n", "next_change": {"commit": "ea7cd1ae54063565223afa7e3aacc6955d5a4606", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 2a16efd36..f4e97bef9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -105,8 +107,4 @@ public class RatingWidget extends QuestionWidget {\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n-\n-    protected RatingWidgetAnswerBinding getBinding() {\n-        return binding;\n-    }\n }\n", "next_change": {"commit": "ff87f43f08b4475f9cef0e3bcf381900aecc57a0", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f4e97bef9..d74916d2b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -92,19 +86,29 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar1.setOnLongClickListener(l);\n-        binding.ratingBar2.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F ? null :\n-                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n+\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    }\n+\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 319826c7e..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -90,19 +85,72 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar1.setOnLongClickListener(l);\n-        binding.ratingBar2.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F ? null :\n-                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n+\n+    @SuppressLint(\"ClickableViewAccessibility\")\n+    private void setUpRatingBar(int maxNumberOfStars) {\n+        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n+        binding.ratingBar1.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar2.setRating(0);\n+            }\n+            return false;\n+        });\n+\n+        binding.ratingBar2.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar1.setRating(maxNumberOfStars);\n+            }\n+            return false;\n+        });\n+\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            binding.ratingBar1.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n+        // See https://stackoverflow.com/questions/44342481\n+        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n+            try {\n+                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n+                field.setAccessible(true);\n+                field.set(binding.ratingBar1, 0.6f);\n+                field.set(binding.ratingBar2, 0.6f);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                Timber.e(e);\n+            }\n+        }\n+    }\n+\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    }\n+\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n+    }\n }\n", "next_change": {"commit": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..c351744f9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,140 +17,122 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.os.Build;\n-import android.view.MotionEvent;\n-import android.view.View;\n-import android.widget.AbsSeekBar;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n-\n-import java.lang.reflect.Field;\n-\n-import timber.log.Timber;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    RatingWidgetAnswerBinding binding;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+\n+    final GridLayout gridLayout;\n+    Integer answer;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n \n-        if (prompt.isReadOnly()) {\n-            binding.ratingBar1.setEnabled(false);\n-            binding.ratingBar2.setEnabled(false);\n-        } else {\n-            setUpRatingBar(maxNumberOfStars);\n-        }\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n             }\n         }\n-        return answerView;\n-    }\n \n-    @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    @Override\n-    public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n-    }\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n-    @Override\n-    public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n-    }\n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-    @SuppressLint(\"ClickableViewAccessibility\")\n-    private void setUpRatingBar(int maxNumberOfStars) {\n-        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n-        binding.ratingBar1.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar2.setRating(0);\n-            }\n-            return false;\n-        });\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        binding.ratingBar2.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar1.setRating(maxNumberOfStars);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-            return false;\n-        });\n+            answer = position + 1;\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0);\n-            binding.ratingBar1.setRating(rating);\n             widgetValueChanged();\n         });\n+        return imageButton;\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    @Override\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        return answer != null ? new IntegerData(answer) : null;\n+    }\n \n-        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n-        // See https://stackoverflow.com/questions/44342481\n-        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n-            try {\n-                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n-                field.setAccessible(true);\n-                field.set(binding.ratingBar1, 0.6f);\n-                field.set(binding.ratingBar2, 0.6f);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                Timber.e(e);\n+    @Override\n+    public void clearAnswer() {\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n             }\n         }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex c351744f9..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,122 +17,140 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n-\n-import androidx.core.content.ContextCompat;\n+import android.os.Build;\n+import android.view.MotionEvent;\n+import android.view.View;\n+import android.widget.AbsSeekBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n+\n+import java.lang.reflect.Field;\n+\n+import timber.log.Timber;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-\n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-\n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n-\n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n-\n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n-\n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n+\n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n+        } else {\n+            binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n+        }\n \n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n         }\n-    }\n \n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n+        if (prompt.getAnswerText() != null) {\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n             }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        }\n+        return answerView;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n+        binding.ratingBar1.setRating(0.0F);\n+    }\n+\n+    @SuppressLint(\"ClickableViewAccessibility\")\n+    private void setUpRatingBar(int maxNumberOfStars) {\n+        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n+        binding.ratingBar1.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar2.setRating(0);\n             }\n-        }\n+            return false;\n+        });\n+\n+        binding.ratingBar2.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar1.setRating(maxNumberOfStars);\n+            }\n+            return false;\n+        });\n \n-        answer = null;\n-        widgetValueChanged();\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            binding.ratingBar1.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n+        // See https://stackoverflow.com/questions/44342481\n+        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n+            try {\n+                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n+                field.setAccessible(true);\n+                field.set(binding.ratingBar1, 0.6f);\n+                field.set(binding.ratingBar2, 0.6f);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                Timber.e(e);\n+            }\n+        }\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n     }\n }\n", "next_change": {"commit": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..95c39bebe 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -146,7 +146,7 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+        return (int) ((ScreenUtils.getScreenWidth(getContext()) - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n                 / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "message": "Merge commit", "committedDate": null}, {"oid": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "committedDate": "2020-11-06 12:03:46 +0000", "message": "Revert \"Reworking Rating Widget\""}, {"oid": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "committedDate": "2020-11-06 19:16:20 +0530", "message": "Revert \"Revert \"Reworking Rating Widget\"\""}, {"oid": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "committedDate": "2022-06-29 11:01:10 +0200", "message": "Moved mapbox code to new module"}, {"oid": "0bc622839cde2df40a9012b6fa435b6630825f42", "committedDate": "2022-09-28 14:16:53 +0100", "message": "Allow code to be executed in constructor before rendering widget"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyNDUwOA==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457224508", "body": "This also could be factored out to a new method (again the calculation, you can keep the variable - as I said below).", "bodyText": "This also could be factored out to a new method (again the calculation, you can keep the variable - as I said below).", "bodyHTML": "<p dir=\"auto\">This also could be factored out to a new method (again the calculation, you can keep the variable - as I said below).</p>", "author": "grzesiek2010", "createdAt": "2020-07-20T09:36:39Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();", "originalCommit": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 319826c7e..a60489839 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -45,22 +45,19 @@ public class RatingWidget extends QuestionWidget {\n         binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-\n-        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n-\n-        binding.ratingBar1.setStepSize(1.0F);\n-        binding.ratingBar2.setStepSize(1.0F);\n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n \n         if (maxNumberOfStars < numberOfStars) {\n             binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n             binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n             binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n             binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n         }\n \n         binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n", "next_change": {"commit": "32ecc694ff96cc73ee9aa268a291feda2fdcb4ba", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex a60489839..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -60,21 +66,12 @@ public class RatingWidget extends QuestionWidget {\n             binding.ratingBar1.setMax(numberOfStars);\n         }\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(rating);\n-            binding.ratingBar2.setRating(0.0F);\n-            widgetValueChanged();\n-        });\n-\n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n-\n-\n-        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n-        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n+        }\n \n         if (prompt.getAnswerText() != null) {\n             int rating = Integer.parseInt(prompt.getAnswerText());\n", "next_change": {"commit": "35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..f98fefbf4 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,140 +17,121 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.os.Build;\n-import android.view.MotionEvent;\n-import android.view.View;\n-import android.widget.AbsSeekBar;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n-\n-import java.lang.reflect.Field;\n-\n-import timber.log.Timber;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    RatingWidgetAnswerBinding binding;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails) {\n+    final GridLayout gridLayout;\n+    Integer answer;\n+\n+    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n-        }\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n \n-        if (prompt.isReadOnly()) {\n-            binding.ratingBar1.setEnabled(false);\n-            binding.ratingBar2.setEnabled(false);\n-        } else {\n-            setUpRatingBar(maxNumberOfStars);\n-        }\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n             }\n         }\n-        return answerView;\n-    }\n \n-    @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    @Override\n-    public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n-    }\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n-    @Override\n-    public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n-    }\n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-    @SuppressLint(\"ClickableViewAccessibility\")\n-    private void setUpRatingBar(int maxNumberOfStars) {\n-        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n-        binding.ratingBar1.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar2.setRating(0);\n-            }\n-            return false;\n-        });\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        binding.ratingBar2.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar1.setRating(maxNumberOfStars);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-            return false;\n-        });\n+            answer = position + 1;\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0);\n-            binding.ratingBar1.setRating(rating);\n             widgetValueChanged();\n         });\n+        return imageButton;\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    @Override\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        return answer != null ? new IntegerData(answer) : null;\n+    }\n \n-        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n-        // See https://stackoverflow.com/questions/44342481\n-        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n-            try {\n-                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n-                field.setAccessible(true);\n-                field.set(binding.ratingBar1, 0.6f);\n-                field.set(binding.ratingBar2, 0.6f);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                Timber.e(e);\n+    @Override\n+    public void clearAnswer() {\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n             }\n         }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6bb71d8a150b39dc0419cf94839ed2364021fe52", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f98fefbf4..16f698824 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,121 +17,90 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n \n-        renderGrid(context, numberOfStars, columns, rows);\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n             }\n         }\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n-\n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n-\n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.getAnswerText() != null) {\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n-    }\n-\n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n-            }\n-        }\n-\n-        answer = null;\n-        widgetValueChanged();\n+        ratingBar.setRating(0.0F);\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    protected RatingBar getRatingBar() {\n+        return ratingBar;\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int calculateColumns(int widthOfStar) {\n+        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n+                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n     }\n }\n", "next_change": {"commit": "32ea188912d6279747bced50dc3ad50790b4bb6f", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 16f698824..2a16efd36 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -44,63 +44,69 @@ public class RatingWidget extends QuestionWidget {\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-\n         RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n         int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns(48);\n \n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-        if (rows == 1) {\n-            binding.ratingBar.setVisibility(VISIBLE);\n-            this.ratingBar = binding.ratingBar;\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n-            binding.ratingBar.setVisibility(GONE);\n-            columns = calculateColumns(36);\n-            rows = (int) Math.ceil((double) numberOfStars / columns);\n-            if (rows == 1) {\n-                binding.ratingBar2.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar2;\n-            } else {\n-                binding.ratingBar3.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar3;\n-            }\n+            binding.ratingBar1.setNumStars(numberOfStars);\n         }\n \n-        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        ratingBar.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n \n         if (prompt.getAnswerText() != null) {\n-            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n         }\n         return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        ratingBar.setOnLongClickListener(l);\n+        binding.ratingBar1.setOnLongClickListener(l);\n+        binding.ratingBar2.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n+        return binding.ratingBar1.getRating() == 0.0F ? null :\n+                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        ratingBar.setRating(0.0F);\n-    }\n-\n-    protected RatingBar getRatingBar() {\n-        return ratingBar;\n+        binding.ratingBar1.setRating(0.0F);\n     }\n \n-    private int calculateColumns(int widthOfStar) {\n-        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n-                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n+    protected RatingWidgetAnswerBinding getBinding() {\n+        return binding;\n     }\n }\n", "next_change": {"commit": "ea7cd1ae54063565223afa7e3aacc6955d5a4606", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 2a16efd36..f4e97bef9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -105,8 +107,4 @@ public class RatingWidget extends QuestionWidget {\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n-\n-    protected RatingWidgetAnswerBinding getBinding() {\n-        return binding;\n-    }\n }\n", "next_change": {"commit": "ff87f43f08b4475f9cef0e3bcf381900aecc57a0", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f4e97bef9..d74916d2b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -92,19 +86,29 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar1.setOnLongClickListener(l);\n-        binding.ratingBar2.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F ? null :\n-                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n+\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    }\n+\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 319826c7e..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -45,38 +51,27 @@ public class RatingWidget extends QuestionWidget {\n         binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-\n-        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n-\n-        binding.ratingBar1.setStepSize(1.0F);\n-        binding.ratingBar2.setStepSize(1.0F);\n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n \n         if (maxNumberOfStars < numberOfStars) {\n             binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n             binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n             binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n             binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n         }\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(rating);\n-            binding.ratingBar2.setRating(0.0F);\n-            widgetValueChanged();\n-        });\n-\n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n-\n-        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n-        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n+        }\n \n         if (prompt.getAnswerText() != null) {\n             int rating = Integer.parseInt(prompt.getAnswerText());\n", "next_change": {"commit": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..c351744f9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,140 +17,122 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.os.Build;\n-import android.view.MotionEvent;\n-import android.view.View;\n-import android.widget.AbsSeekBar;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n-\n-import java.lang.reflect.Field;\n-\n-import timber.log.Timber;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    RatingWidgetAnswerBinding binding;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+\n+    final GridLayout gridLayout;\n+    Integer answer;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n \n-        if (prompt.isReadOnly()) {\n-            binding.ratingBar1.setEnabled(false);\n-            binding.ratingBar2.setEnabled(false);\n-        } else {\n-            setUpRatingBar(maxNumberOfStars);\n-        }\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n             }\n         }\n-        return answerView;\n-    }\n \n-    @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    @Override\n-    public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n-    }\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n-    @Override\n-    public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n-    }\n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-    @SuppressLint(\"ClickableViewAccessibility\")\n-    private void setUpRatingBar(int maxNumberOfStars) {\n-        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n-        binding.ratingBar1.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar2.setRating(0);\n-            }\n-            return false;\n-        });\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        binding.ratingBar2.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar1.setRating(maxNumberOfStars);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-            return false;\n-        });\n+            answer = position + 1;\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0);\n-            binding.ratingBar1.setRating(rating);\n             widgetValueChanged();\n         });\n+        return imageButton;\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    @Override\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        return answer != null ? new IntegerData(answer) : null;\n+    }\n \n-        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n-        // See https://stackoverflow.com/questions/44342481\n-        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n-            try {\n-                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n-                field.setAccessible(true);\n-                field.set(binding.ratingBar1, 0.6f);\n-                field.set(binding.ratingBar2, 0.6f);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                Timber.e(e);\n+    @Override\n+    public void clearAnswer() {\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n             }\n         }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex c351744f9..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,122 +17,140 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n-\n-import androidx.core.content.ContextCompat;\n+import android.os.Build;\n+import android.view.MotionEvent;\n+import android.view.View;\n+import android.widget.AbsSeekBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n+\n+import java.lang.reflect.Field;\n+\n+import timber.log.Timber;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-\n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-\n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n-\n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n-\n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n-\n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n+\n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n+        } else {\n+            binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n+        }\n \n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n         }\n-    }\n \n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n+        if (prompt.getAnswerText() != null) {\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n             }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        }\n+        return answerView;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n+        binding.ratingBar1.setRating(0.0F);\n+    }\n+\n+    @SuppressLint(\"ClickableViewAccessibility\")\n+    private void setUpRatingBar(int maxNumberOfStars) {\n+        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n+        binding.ratingBar1.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar2.setRating(0);\n             }\n-        }\n+            return false;\n+        });\n+\n+        binding.ratingBar2.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar1.setRating(maxNumberOfStars);\n+            }\n+            return false;\n+        });\n \n-        answer = null;\n-        widgetValueChanged();\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            binding.ratingBar1.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n+        // See https://stackoverflow.com/questions/44342481\n+        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n+            try {\n+                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n+                field.setAccessible(true);\n+                field.set(binding.ratingBar1, 0.6f);\n+                field.set(binding.ratingBar2, 0.6f);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                Timber.e(e);\n+            }\n+        }\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n     }\n }\n", "next_change": {"commit": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..95c39bebe 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -146,7 +146,7 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+        return (int) ((ScreenUtils.getScreenWidth(getContext()) - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n                 / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "message": "Merge commit", "committedDate": null}, {"oid": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "committedDate": "2020-11-06 12:03:46 +0000", "message": "Revert \"Reworking Rating Widget\""}, {"oid": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "committedDate": "2020-11-06 19:16:20 +0530", "message": "Revert \"Revert \"Reworking Rating Widget\"\""}, {"oid": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "committedDate": "2022-06-29 11:01:10 +0200", "message": "Moved mapbox code to new module"}, {"oid": "0bc622839cde2df40a9012b6fa435b6630825f42", "committedDate": "2022-09-28 14:16:53 +0100", "message": "Allow code to be executed in constructor before rendering widget"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyNTYzOA==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457225638", "body": "You already have `android:stepSize in the layout file so why do you need this here too?", "bodyText": "You already have `android:stepSize in the layout file so why do you need this here too?", "bodyHTML": "<p dir=\"auto\">You already have `android:stepSize in the layout file so why do you need this here too?</p>", "author": "grzesiek2010", "createdAt": "2020-07-20T09:38:19Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);", "originalCommit": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0MDAyMQ==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457240021", "bodyText": "I'll fix this. Thanks for pointing out", "author": "SaumiaSinghal", "createdAt": "2020-07-20T09:58:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyNTYzOA=="}], "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 319826c7e..a60489839 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -45,22 +45,19 @@ public class RatingWidget extends QuestionWidget {\n         binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-\n-        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n-\n-        binding.ratingBar1.setStepSize(1.0F);\n-        binding.ratingBar2.setStepSize(1.0F);\n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n \n         if (maxNumberOfStars < numberOfStars) {\n             binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n             binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n             binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n             binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n         }\n \n         binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n", "next_change": {"commit": "32ecc694ff96cc73ee9aa268a291feda2fdcb4ba", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex a60489839..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -60,21 +66,12 @@ public class RatingWidget extends QuestionWidget {\n             binding.ratingBar1.setMax(numberOfStars);\n         }\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(rating);\n-            binding.ratingBar2.setRating(0.0F);\n-            widgetValueChanged();\n-        });\n-\n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n-\n-\n-        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n-        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n+        }\n \n         if (prompt.getAnswerText() != null) {\n             int rating = Integer.parseInt(prompt.getAnswerText());\n", "next_change": {"commit": "35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..f98fefbf4 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,140 +17,121 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.os.Build;\n-import android.view.MotionEvent;\n-import android.view.View;\n-import android.widget.AbsSeekBar;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n-\n-import java.lang.reflect.Field;\n-\n-import timber.log.Timber;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    RatingWidgetAnswerBinding binding;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails) {\n+    final GridLayout gridLayout;\n+    Integer answer;\n+\n+    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n-        }\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n \n-        if (prompt.isReadOnly()) {\n-            binding.ratingBar1.setEnabled(false);\n-            binding.ratingBar2.setEnabled(false);\n-        } else {\n-            setUpRatingBar(maxNumberOfStars);\n-        }\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n             }\n         }\n-        return answerView;\n-    }\n \n-    @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    @Override\n-    public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n-    }\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n-    @Override\n-    public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n-    }\n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-    @SuppressLint(\"ClickableViewAccessibility\")\n-    private void setUpRatingBar(int maxNumberOfStars) {\n-        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n-        binding.ratingBar1.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar2.setRating(0);\n-            }\n-            return false;\n-        });\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        binding.ratingBar2.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar1.setRating(maxNumberOfStars);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-            return false;\n-        });\n+            answer = position + 1;\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0);\n-            binding.ratingBar1.setRating(rating);\n             widgetValueChanged();\n         });\n+        return imageButton;\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    @Override\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        return answer != null ? new IntegerData(answer) : null;\n+    }\n \n-        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n-        // See https://stackoverflow.com/questions/44342481\n-        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n-            try {\n-                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n-                field.setAccessible(true);\n-                field.set(binding.ratingBar1, 0.6f);\n-                field.set(binding.ratingBar2, 0.6f);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                Timber.e(e);\n+    @Override\n+    public void clearAnswer() {\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n             }\n         }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6bb71d8a150b39dc0419cf94839ed2364021fe52", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f98fefbf4..16f698824 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,121 +17,90 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n \n-        renderGrid(context, numberOfStars, columns, rows);\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n             }\n         }\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n-\n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n-\n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.getAnswerText() != null) {\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n-    }\n-\n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n-            }\n-        }\n-\n-        answer = null;\n-        widgetValueChanged();\n+        ratingBar.setRating(0.0F);\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    protected RatingBar getRatingBar() {\n+        return ratingBar;\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int calculateColumns(int widthOfStar) {\n+        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n+                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n     }\n }\n", "next_change": {"commit": "32ea188912d6279747bced50dc3ad50790b4bb6f", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 16f698824..2a16efd36 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -44,63 +44,69 @@ public class RatingWidget extends QuestionWidget {\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-\n         RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n         int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns(48);\n \n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-        if (rows == 1) {\n-            binding.ratingBar.setVisibility(VISIBLE);\n-            this.ratingBar = binding.ratingBar;\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n-            binding.ratingBar.setVisibility(GONE);\n-            columns = calculateColumns(36);\n-            rows = (int) Math.ceil((double) numberOfStars / columns);\n-            if (rows == 1) {\n-                binding.ratingBar2.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar2;\n-            } else {\n-                binding.ratingBar3.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar3;\n-            }\n+            binding.ratingBar1.setNumStars(numberOfStars);\n         }\n \n-        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        ratingBar.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n \n         if (prompt.getAnswerText() != null) {\n-            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n         }\n         return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        ratingBar.setOnLongClickListener(l);\n+        binding.ratingBar1.setOnLongClickListener(l);\n+        binding.ratingBar2.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n+        return binding.ratingBar1.getRating() == 0.0F ? null :\n+                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        ratingBar.setRating(0.0F);\n-    }\n-\n-    protected RatingBar getRatingBar() {\n-        return ratingBar;\n+        binding.ratingBar1.setRating(0.0F);\n     }\n \n-    private int calculateColumns(int widthOfStar) {\n-        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n-                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n+    protected RatingWidgetAnswerBinding getBinding() {\n+        return binding;\n     }\n }\n", "next_change": {"commit": "ea7cd1ae54063565223afa7e3aacc6955d5a4606", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 2a16efd36..f4e97bef9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -105,8 +107,4 @@ public class RatingWidget extends QuestionWidget {\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n-\n-    protected RatingWidgetAnswerBinding getBinding() {\n-        return binding;\n-    }\n }\n", "next_change": {"commit": "ff87f43f08b4475f9cef0e3bcf381900aecc57a0", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f4e97bef9..d74916d2b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -92,19 +86,29 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar1.setOnLongClickListener(l);\n-        binding.ratingBar2.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F ? null :\n-                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n+\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    }\n+\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 319826c7e..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -45,38 +51,27 @@ public class RatingWidget extends QuestionWidget {\n         binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-\n-        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n-\n-        binding.ratingBar1.setStepSize(1.0F);\n-        binding.ratingBar2.setStepSize(1.0F);\n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n \n         if (maxNumberOfStars < numberOfStars) {\n             binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n             binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n             binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n             binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n         }\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(rating);\n-            binding.ratingBar2.setRating(0.0F);\n-            widgetValueChanged();\n-        });\n-\n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n-\n-        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n-        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n+        }\n \n         if (prompt.getAnswerText() != null) {\n             int rating = Integer.parseInt(prompt.getAnswerText());\n", "next_change": {"commit": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..c351744f9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,140 +17,122 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.os.Build;\n-import android.view.MotionEvent;\n-import android.view.View;\n-import android.widget.AbsSeekBar;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n-\n-import java.lang.reflect.Field;\n-\n-import timber.log.Timber;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    RatingWidgetAnswerBinding binding;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+\n+    final GridLayout gridLayout;\n+    Integer answer;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n \n-        if (prompt.isReadOnly()) {\n-            binding.ratingBar1.setEnabled(false);\n-            binding.ratingBar2.setEnabled(false);\n-        } else {\n-            setUpRatingBar(maxNumberOfStars);\n-        }\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n             }\n         }\n-        return answerView;\n-    }\n \n-    @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    @Override\n-    public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n-    }\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n-    @Override\n-    public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n-    }\n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-    @SuppressLint(\"ClickableViewAccessibility\")\n-    private void setUpRatingBar(int maxNumberOfStars) {\n-        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n-        binding.ratingBar1.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar2.setRating(0);\n-            }\n-            return false;\n-        });\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        binding.ratingBar2.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar1.setRating(maxNumberOfStars);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-            return false;\n-        });\n+            answer = position + 1;\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0);\n-            binding.ratingBar1.setRating(rating);\n             widgetValueChanged();\n         });\n+        return imageButton;\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    @Override\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        return answer != null ? new IntegerData(answer) : null;\n+    }\n \n-        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n-        // See https://stackoverflow.com/questions/44342481\n-        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n-            try {\n-                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n-                field.setAccessible(true);\n-                field.set(binding.ratingBar1, 0.6f);\n-                field.set(binding.ratingBar2, 0.6f);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                Timber.e(e);\n+    @Override\n+    public void clearAnswer() {\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n             }\n         }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex c351744f9..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,122 +17,140 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n-\n-import androidx.core.content.ContextCompat;\n+import android.os.Build;\n+import android.view.MotionEvent;\n+import android.view.View;\n+import android.widget.AbsSeekBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n+\n+import java.lang.reflect.Field;\n+\n+import timber.log.Timber;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-\n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-\n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n-\n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n-\n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n-\n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n+\n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n+        } else {\n+            binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n+        }\n \n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n         }\n-    }\n \n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n+        if (prompt.getAnswerText() != null) {\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n             }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        }\n+        return answerView;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n+        binding.ratingBar1.setRating(0.0F);\n+    }\n+\n+    @SuppressLint(\"ClickableViewAccessibility\")\n+    private void setUpRatingBar(int maxNumberOfStars) {\n+        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n+        binding.ratingBar1.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar2.setRating(0);\n             }\n-        }\n+            return false;\n+        });\n+\n+        binding.ratingBar2.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar1.setRating(maxNumberOfStars);\n+            }\n+            return false;\n+        });\n \n-        answer = null;\n-        widgetValueChanged();\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            binding.ratingBar1.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n+        // See https://stackoverflow.com/questions/44342481\n+        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n+            try {\n+                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n+                field.setAccessible(true);\n+                field.set(binding.ratingBar1, 0.6f);\n+                field.set(binding.ratingBar2, 0.6f);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                Timber.e(e);\n+            }\n+        }\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n     }\n }\n", "next_change": {"commit": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..95c39bebe 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -146,7 +146,7 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+        return (int) ((ScreenUtils.getScreenWidth(getContext()) - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n                 / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "message": "Merge commit", "committedDate": null}, {"oid": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "committedDate": "2020-11-06 12:03:46 +0000", "message": "Revert \"Reworking Rating Widget\""}, {"oid": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "committedDate": "2020-11-06 19:16:20 +0530", "message": "Revert \"Revert \"Reworking Rating Widget\"\""}, {"oid": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "committedDate": "2022-06-29 11:01:10 +0200", "message": "Moved mapbox code to new module"}, {"oid": "0bc622839cde2df40a9012b6fa435b6630825f42", "committedDate": "2022-09-28 14:16:53 +0100", "message": "Allow code to be executed in constructor before rendering widget"}]}, {"oid": "bc853175de6bed2d48928afe6ef6da6cde687eba", "url": "https://github.com/getodk/collect/commit/bc853175de6bed2d48928afe6ef6da6cde687eba", "message": "fix stars highlight issue", "committedDate": "2020-07-25T16:25:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTczMjg4Nw==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r461732887", "body": "Could this change have been driven out with a test? Maybe there was one and I missed it!", "bodyText": "Could this change have been driven out with a test? Maybe there was one and I missed it!", "bodyHTML": "<p dir=\"auto\">Could this change have been driven out with a test? Maybe there was one and I missed it!</p>", "author": "seadowg", "createdAt": "2020-07-28T16:59:08Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -61,8 +61,8 @@ protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int a\n         }\n \n         binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(rating);\n             binding.ratingBar2.setRating(0.0F);\n+            binding.ratingBar1.setRating(rating);", "originalCommit": "1fe52b0bc1a72fa30dbe1187c1b5013d58943354", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1NzQ5OA==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r461757498", "bodyText": "Sorry @seadowg for missing the tests. I added unit tests and confirmed that unit testchangingRating_updatesAnswer_forRatingBarInMultipleLines() fails for the last commit, and passes on the latest one.", "author": "SaumiaSinghal", "createdAt": "2020-07-28T17:40:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTczMjg4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "32ecc694ff96cc73ee9aa268a291feda2fdcb4ba", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 253333554..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -60,21 +66,12 @@ public class RatingWidget extends QuestionWidget {\n             binding.ratingBar1.setMax(numberOfStars);\n         }\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0.0F);\n-            binding.ratingBar1.setRating(rating);\n-            widgetValueChanged();\n-        });\n-\n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n-\n-\n-        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n-        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n+        }\n \n         if (prompt.getAnswerText() != null) {\n             int rating = Integer.parseInt(prompt.getAnswerText());\n", "next_change": {"commit": "35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..f98fefbf4 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,140 +17,121 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.os.Build;\n-import android.view.MotionEvent;\n-import android.view.View;\n-import android.widget.AbsSeekBar;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n-\n-import java.lang.reflect.Field;\n-\n-import timber.log.Timber;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    RatingWidgetAnswerBinding binding;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails) {\n+    final GridLayout gridLayout;\n+    Integer answer;\n+\n+    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n-        }\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n \n-        if (prompt.isReadOnly()) {\n-            binding.ratingBar1.setEnabled(false);\n-            binding.ratingBar2.setEnabled(false);\n-        } else {\n-            setUpRatingBar(maxNumberOfStars);\n-        }\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n             }\n         }\n-        return answerView;\n-    }\n \n-    @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    @Override\n-    public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n-    }\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n-    @Override\n-    public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n-    }\n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-    @SuppressLint(\"ClickableViewAccessibility\")\n-    private void setUpRatingBar(int maxNumberOfStars) {\n-        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n-        binding.ratingBar1.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar2.setRating(0);\n-            }\n-            return false;\n-        });\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        binding.ratingBar2.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar1.setRating(maxNumberOfStars);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-            return false;\n-        });\n+            answer = position + 1;\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0);\n-            binding.ratingBar1.setRating(rating);\n             widgetValueChanged();\n         });\n+        return imageButton;\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    @Override\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        return answer != null ? new IntegerData(answer) : null;\n+    }\n \n-        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n-        // See https://stackoverflow.com/questions/44342481\n-        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n-            try {\n-                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n-                field.setAccessible(true);\n-                field.set(binding.ratingBar1, 0.6f);\n-                field.set(binding.ratingBar2, 0.6f);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                Timber.e(e);\n+    @Override\n+    public void clearAnswer() {\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n             }\n         }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6bb71d8a150b39dc0419cf94839ed2364021fe52", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f98fefbf4..16f698824 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,121 +17,90 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n \n-        renderGrid(context, numberOfStars, columns, rows);\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n             }\n         }\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n-\n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n-\n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.getAnswerText() != null) {\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n-    }\n-\n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n-            }\n-        }\n-\n-        answer = null;\n-        widgetValueChanged();\n+        ratingBar.setRating(0.0F);\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    protected RatingBar getRatingBar() {\n+        return ratingBar;\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int calculateColumns(int widthOfStar) {\n+        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n+                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n     }\n }\n", "next_change": {"commit": "32ea188912d6279747bced50dc3ad50790b4bb6f", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 16f698824..2a16efd36 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -44,63 +44,69 @@ public class RatingWidget extends QuestionWidget {\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-\n         RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n         int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns(48);\n \n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-        if (rows == 1) {\n-            binding.ratingBar.setVisibility(VISIBLE);\n-            this.ratingBar = binding.ratingBar;\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n         } else {\n-            binding.ratingBar.setVisibility(GONE);\n-            columns = calculateColumns(36);\n-            rows = (int) Math.ceil((double) numberOfStars / columns);\n-            if (rows == 1) {\n-                binding.ratingBar2.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar2;\n-            } else {\n-                binding.ratingBar3.setVisibility(VISIBLE);\n-                this.ratingBar = binding.ratingBar3;\n-            }\n+            binding.ratingBar1.setNumStars(numberOfStars);\n         }\n \n-        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        ratingBar.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n \n         if (prompt.getAnswerText() != null) {\n-            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n         }\n         return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        ratingBar.setOnLongClickListener(l);\n+        binding.ratingBar1.setOnLongClickListener(l);\n+        binding.ratingBar2.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n+        return binding.ratingBar1.getRating() == 0.0F ? null :\n+                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        ratingBar.setRating(0.0F);\n-    }\n-\n-    protected RatingBar getRatingBar() {\n-        return ratingBar;\n+        binding.ratingBar1.setRating(0.0F);\n     }\n \n-    private int calculateColumns(int widthOfStar) {\n-        return (ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) /\n-                ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));\n+    protected RatingWidgetAnswerBinding getBinding() {\n+        return binding;\n     }\n }\n", "next_change": {"commit": "ea7cd1ae54063565223afa7e3aacc6955d5a4606", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 2a16efd36..f4e97bef9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -105,8 +107,4 @@ public class RatingWidget extends QuestionWidget {\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n-\n-    protected RatingWidgetAnswerBinding getBinding() {\n-        return binding;\n-    }\n }\n", "next_change": {"commit": "ff87f43f08b4475f9cef0e3bcf381900aecc57a0", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex f4e97bef9..d74916d2b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -92,19 +86,29 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar1.setOnLongClickListener(l);\n-        binding.ratingBar2.setOnLongClickListener(l);\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F ? null :\n-                new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n         binding.ratingBar1.setRating(0.0F);\n     }\n+\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    }\n+\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 253333554..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -60,21 +66,12 @@ public class RatingWidget extends QuestionWidget {\n             binding.ratingBar1.setMax(numberOfStars);\n         }\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0.0F);\n-            binding.ratingBar1.setRating(rating);\n-            widgetValueChanged();\n-        });\n-\n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n-\n-\n-        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n-        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n+        }\n \n         if (prompt.getAnswerText() != null) {\n             int rating = Integer.parseInt(prompt.getAnswerText());\n", "next_change": {"commit": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..c351744f9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,140 +17,122 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.os.Build;\n-import android.view.MotionEvent;\n-import android.view.View;\n-import android.widget.AbsSeekBar;\n+import android.graphics.drawable.Drawable;\n+import android.util.DisplayMetrics;\n+import android.widget.GridLayout;\n+import android.widget.ImageButton;\n+\n+import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.utilities.ScreenUtils;\n-import org.odk.collect.android.utilities.UiUtils;\n-\n-import java.lang.reflect.Field;\n-\n-import timber.log.Timber;\n+import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n-    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    RatingWidgetAnswerBinding binding;\n+    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+\n+    final GridLayout gridLayout;\n+    Integer answer;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n-        View answerView = binding.getRoot();\n-\n-        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n-        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n-\n-        if (maxNumberOfStars < numberOfStars) {\n-            binding.ratingBar1.setNumStars(maxNumberOfStars);\n-            binding.ratingBar1.setMax(maxNumberOfStars);\n-            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n-\n-            binding.ratingBar2.setVisibility(View.VISIBLE);\n-        } else {\n-            binding.ratingBar1.setNumStars(numberOfStars);\n-            binding.ratingBar1.setMax(numberOfStars);\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns();\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n \n-        if (prompt.isReadOnly()) {\n-            binding.ratingBar1.setEnabled(false);\n-            binding.ratingBar2.setEnabled(false);\n-        } else {\n-            setUpRatingBar(maxNumberOfStars);\n-        }\n+        gridLayout = new GridLayout(context);\n+        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n+\n+        renderGrid(context, numberOfStars, columns, rows);\n \n-        if (prompt.getAnswerText() != null) {\n-            int rating = Integer.parseInt(prompt.getAnswerText());\n-            if (rating > maxNumberOfStars) {\n-                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n-            } else {\n-                binding.ratingBar1.setRating(rating);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null) {\n+            answer = Integer.parseInt(answerText);\n+            for (int i = 0; i < answer; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(R.drawable.ic_star);\n             }\n         }\n-        return answerView;\n-    }\n \n-    @Override\n-    public void setOnLongClickListener(OnLongClickListener listener) {\n-        binding.ratingBar1.setOnLongClickListener(listener);\n-        binding.ratingBar2.setOnLongClickListener(listener);\n+        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    @Override\n-    public IAnswerData getAnswer() {\n-        return binding.ratingBar1.getRating() == 0.0F\n-                ? null\n-                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n-    }\n+    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n+        gridLayout.setColumnCount(columns);\n+        gridLayout.setRowCount(rows);\n \n-    @Override\n-    public void clearAnswer() {\n-        binding.ratingBar1.setRating(0.0F);\n-    }\n+        for (int column = 0,\n+             starId = 0;\n+             starId < numberOfStars;\n+             column++, starId++) {\n+            column = column == columns ? 0 : column;\n \n-    @SuppressLint(\"ClickableViewAccessibility\")\n-    private void setUpRatingBar(int maxNumberOfStars) {\n-        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n-        binding.ratingBar1.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar2.setRating(0);\n-            }\n-            return false;\n-        });\n+            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n+            gridLayout.addView(imageButton);\n+        }\n+    }\n \n-        binding.ratingBar2.setOnTouchListener((v, event) -> {\n-            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n-                binding.ratingBar1.setRating(maxNumberOfStars);\n+    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n+        ImageButton imageButton = new ImageButton(context);\n+        imageButton.setImageResource(R.drawable.ic_star_border);\n+        imageButton.setId(total);\n+        imageButton.setPadding(0, 0, 0, 0);\n+        imageButton.setBackground(null);\n+        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n+        imageButton.setOnClickListener(view -> {\n+            int position = view.getId();\n+            for (int i = 0; i < numberOfStars; i++) {\n+                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n+                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n             }\n-            return false;\n-        });\n+            answer = position + 1;\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0);\n-            binding.ratingBar1.setRating(rating);\n             widgetValueChanged();\n         });\n+        return imageButton;\n+    }\n \n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n+    @Override\n+    public void setOnLongClickListener(OnLongClickListener l) {\n+        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n+            gridLayout.getChildAt(i).setOnLongClickListener(l);\n+        }\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        return answer != null ? new IntegerData(answer) : null;\n+    }\n \n-        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n-        // See https://stackoverflow.com/questions/44342481\n-        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n-            try {\n-                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n-                field.setAccessible(true);\n-                field.set(binding.ratingBar1, 0.6f);\n-                field.set(binding.ratingBar2, 0.6f);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                Timber.e(e);\n+    @Override\n+    public void clearAnswer() {\n+        if (answer != null) {\n+            for (int i = 0; i < answer; i++) {\n+                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n             }\n         }\n+\n+        answer = null;\n+        widgetValueChanged();\n     }\n \n-    private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n-                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n+    private int calculateColumns() {\n+        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n+        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n+        int widthOfStar = starDrawable.getIntrinsicWidth();\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n     }\n \n-    private int getTotalStars(RangeQuestion rangeQuestion) {\n-        return rangeQuestion.getRangeEnd().intValue();\n+    private DisplayMetrics getScreenDimensions(Activity activity) {\n+        DisplayMetrics dm = new DisplayMetrics();\n+        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n+        return dm;\n     }\n }\n", "next_change": {"commit": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex c351744f9..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -17,122 +17,140 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n-\n-import androidx.core.content.ContextCompat;\n+import android.os.Build;\n+import android.view.MotionEvent;\n+import android.view.View;\n+import android.widget.AbsSeekBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n+\n+import java.lang.reflect.Field;\n+\n+import timber.log.Timber;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-\n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-\n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n-\n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n-\n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n     }\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n-\n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n+\n+        int numberOfStars = getTotalStars((RangeQuestion) prompt.getQuestion());\n+        int maxNumberOfStars = calculateMaximumStarsInOneLine();\n+\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar1.setMax(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+            binding.ratingBar2.setMax(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n+\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n+        } else {\n+            binding.ratingBar1.setNumStars(numberOfStars);\n+            binding.ratingBar1.setMax(numberOfStars);\n+        }\n \n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n         }\n-    }\n \n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n+        if (prompt.getAnswerText() != null) {\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n             }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        }\n+        return answerView;\n     }\n \n     @Override\n-    public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+    public void setOnLongClickListener(OnLongClickListener listener) {\n+        binding.ratingBar1.setOnLongClickListener(listener);\n+        binding.ratingBar2.setOnLongClickListener(listener);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return binding.ratingBar1.getRating() == 0.0F\n+                ? null\n+                : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n+        binding.ratingBar1.setRating(0.0F);\n+    }\n+\n+    @SuppressLint(\"ClickableViewAccessibility\")\n+    private void setUpRatingBar(int maxNumberOfStars) {\n+        // to quickly change rating on other rating bar in case onRatingChange listener is not called\n+        binding.ratingBar1.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar2.setRating(0);\n             }\n-        }\n+            return false;\n+        });\n+\n+        binding.ratingBar2.setOnTouchListener((v, event) -> {\n+            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n+                binding.ratingBar1.setRating(maxNumberOfStars);\n+            }\n+            return false;\n+        });\n \n-        answer = null;\n-        widgetValueChanged();\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar2.setRating(0);\n+            binding.ratingBar1.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n+            widgetValueChanged();\n+        });\n+\n+        // fix for rating bar showing incorrect rating on Android Nougat(7.0/API 24)\n+        // See https://stackoverflow.com/questions/44342481\n+        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N) {\n+            try {\n+                Field field = AbsSeekBar.class.getDeclaredField(\"mTouchProgressOffset\");\n+                field.setAccessible(true);\n+                field.set(binding.ratingBar1, 0.6f);\n+                field.set(binding.ratingBar2, 0.6f);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                Timber.e(e);\n+            }\n+        }\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_star);\n-        DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+    private int calculateMaximumStarsInOneLine() {\n+        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n-    private DisplayMetrics getScreenDimensions(Activity activity) {\n-        DisplayMetrics dm = new DisplayMetrics();\n-        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n-        return dm;\n+    private int getTotalStars(RangeQuestion rangeQuestion) {\n+        return rangeQuestion.getRangeEnd().intValue();\n     }\n }\n", "next_change": {"commit": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 54cc324a0..95c39bebe 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n", "chunk": "@@ -146,7 +146,7 @@ public class RatingWidget extends QuestionWidget {\n     }\n \n     private int calculateMaximumStarsInOneLine() {\n-        return (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+        return (int) ((ScreenUtils.getScreenWidth(getContext()) - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n                 / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n     }\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b", "message": "Merge commit", "committedDate": null}, {"oid": "ce2c3d0bc809a97a8b3fa6191bf904a91e83e4fb", "committedDate": "2020-11-06 12:03:46 +0000", "message": "Revert \"Reworking Rating Widget\""}, {"oid": "6089ba7e89e01e37745ceb5d64bc39af2befa3c3", "committedDate": "2020-11-06 19:16:20 +0530", "message": "Revert \"Revert \"Reworking Rating Widget\"\""}, {"oid": "292f85dcb9db27d67a6122a767794e05fcdcc4c7", "committedDate": "2022-06-29 11:01:10 +0200", "message": "Moved mapbox code to new module"}, {"oid": "0bc622839cde2df40a9012b6fa435b6630825f42", "committedDate": "2022-09-28 14:16:53 +0100", "message": "Allow code to be executed in constructor before rendering widget"}]}, {"oid": "32ecc694ff96cc73ee9aa268a291feda2fdcb4ba", "url": "https://github.com/getodk/collect/commit/32ecc694ff96cc73ee9aa268a291feda2fdcb4ba", "message": "add touch listener to change rating in other rating bar simulataneously", "committedDate": "2020-08-25T11:17:27Z", "type": "forcePushed"}, {"oid": "35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "url": "https://github.com/getodk/collect/commit/35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "message": "add unit test", "committedDate": "2020-10-20T17:50:31Z", "type": "commit"}, {"oid": "bfb5a081d5fb247a95cbc928dfa1f47a0da0dc96", "url": "https://github.com/getodk/collect/commit/bfb5a081d5fb247a95cbc928dfa1f47a0da0dc96", "message": "create rating_widget_answer_xml", "committedDate": "2020-10-20T17:50:32Z", "type": "commit"}, {"oid": "f9684f595f504cef4ecd689b6b55deed522c2497", "url": "https://github.com/getodk/collect/commit/f9684f595f504cef4ecd689b6b55deed522c2497", "message": "rework RatingWidget.java", "committedDate": "2020-10-20T17:50:32Z", "type": "commit"}, {"oid": "276359a7b17f1baf59c1626f55a2370db511bde0", "url": "https://github.com/getodk/collect/commit/276359a7b17f1baf59c1626f55a2370db511bde0", "message": "enable view binding", "committedDate": "2020-10-20T17:50:32Z", "type": "commit"}, {"oid": "e44bf3e071acdb477b29a9e15b2ef717f2c7c077", "url": "https://github.com/getodk/collect/commit/e44bf3e071acdb477b29a9e15b2ef717f2c7c077", "message": "add unit tests", "committedDate": "2020-10-20T17:50:32Z", "type": "commit"}, {"oid": "60a9adf69f45a446351ff54804942c8027361081", "url": "https://github.com/getodk/collect/commit/60a9adf69f45a446351ff54804942c8027361081", "message": "add unit tests", "committedDate": "2020-10-20T17:50:32Z", "type": "commit"}, {"oid": "f2942d635cffe3e4b579927d98ec408f07bc9184", "url": "https://github.com/getodk/collect/commit/f2942d635cffe3e4b579927d98ec408f07bc9184", "message": "code refactor", "committedDate": "2020-10-20T17:50:32Z", "type": "commit"}, {"oid": "999eab4a035a695cccfaf5031b62dfd38f1057e1", "url": "https://github.com/getodk/collect/commit/999eab4a035a695cccfaf5031b62dfd38f1057e1", "message": "make unit tests green", "committedDate": "2020-10-20T17:50:32Z", "type": "commit"}, {"oid": "9acb1e1b8c5ce835e60449dc148f8e66a5533ea2", "url": "https://github.com/getodk/collect/commit/9acb1e1b8c5ce835e60449dc148f8e66a5533ea2", "message": "fix rating bar setNumOfStars", "committedDate": "2020-10-20T17:50:32Z", "type": "commit"}, {"oid": "9c6d8e6764b1dfc343c6173b53806cf41d81f1d2", "url": "https://github.com/getodk/collect/commit/9c6d8e6764b1dfc343c6173b53806cf41d81f1d2", "message": "set rating bar style", "committedDate": "2020-10-20T17:51:45Z", "type": "commit"}, {"oid": "a8afa6a13b4739314aa54d735e1735b990a9f56d", "url": "https://github.com/getodk/collect/commit/a8afa6a13b4739314aa54d735e1735b990a9f56d", "message": "fix lint error", "committedDate": "2020-10-20T17:51:51Z", "type": "commit"}, {"oid": "6bb71d8a150b39dc0419cf94839ed2364021fe52", "url": "https://github.com/getodk/collect/commit/6bb71d8a150b39dc0419cf94839ed2364021fe52", "message": "code refactor", "committedDate": "2020-10-20T17:51:51Z", "type": "commit"}, {"oid": "d72cb04dcc833d86acb525f300e4f09eb6f93f35", "url": "https://github.com/getodk/collect/commit/d72cb04dcc833d86acb525f300e4f09eb6f93f35", "message": "refactor gradle file", "committedDate": "2020-10-20T17:51:51Z", "type": "commit"}, {"oid": "32ea188912d6279747bced50dc3ad50790b4bb6f", "url": "https://github.com/getodk/collect/commit/32ea188912d6279747bced50dc3ad50790b4bb6f", "message": "show rating bar in two lines", "committedDate": "2020-10-20T17:51:51Z", "type": "commit"}, {"oid": "d0c053a25ab6fd7a91361d08ce6cc9baecabeaf6", "url": "https://github.com/getodk/collect/commit/d0c053a25ab6fd7a91361d08ce6cc9baecabeaf6", "message": "use two rating bars", "committedDate": "2020-10-20T17:51:51Z", "type": "commit"}, {"oid": "ea7cd1ae54063565223afa7e3aacc6955d5a4606", "url": "https://github.com/getodk/collect/commit/ea7cd1ae54063565223afa7e3aacc6955d5a4606", "message": "use default package private access modifier for RatingWidgetBinding", "committedDate": "2020-10-20T17:51:51Z", "type": "commit"}, {"oid": "6135be68fe81eeffad26d0ed9918e01c203233d2", "url": "https://github.com/getodk/collect/commit/6135be68fe81eeffad26d0ed9918e01c203233d2", "message": "code refactor", "committedDate": "2020-10-20T17:52:15Z", "type": "commit"}, {"oid": "757d09965497b154c4a527709e83d6577c06274f", "url": "https://github.com/getodk/collect/commit/757d09965497b154c4a527709e83d6577c06274f", "message": "fix code style", "committedDate": "2020-10-20T17:52:16Z", "type": "commit"}, {"oid": "ff87f43f08b4475f9cef0e3bcf381900aecc57a0", "url": "https://github.com/getodk/collect/commit/ff87f43f08b4475f9cef0e3bcf381900aecc57a0", "message": "code refactor", "committedDate": "2020-10-20T17:52:16Z", "type": "commit"}, {"oid": "c2712dfe61ed06dcba5267869945a25d187fc76d", "url": "https://github.com/getodk/collect/commit/c2712dfe61ed06dcba5267869945a25d187fc76d", "message": "fix stars highlight issue", "committedDate": "2020-10-20T17:52:16Z", "type": "commit"}, {"oid": "7eae83ed3681b6247ca7d8a282d62dbe752f5548", "url": "https://github.com/getodk/collect/commit/7eae83ed3681b6247ca7d8a282d62dbe752f5548", "message": "fix set rating problem", "committedDate": "2020-10-20T17:52:17Z", "type": "commit"}, {"oid": "6d7242d4df11e02679dd2fd7e025247c1e4a98bb", "url": "https://github.com/getodk/collect/commit/6d7242d4df11e02679dd2fd7e025247c1e4a98bb", "message": "add unit tests", "committedDate": "2020-10-20T17:52:17Z", "type": "commit"}, {"oid": "9e86567f4bf495cc4990027eb0bf0d285f1fe3dc", "url": "https://github.com/getodk/collect/commit/9e86567f4bf495cc4990027eb0bf0d285f1fe3dc", "message": "update unt tests", "committedDate": "2020-10-20T17:52:17Z", "type": "commit"}, {"oid": "d25c7a21f91a1133a91b5ccd005e89d854b85871", "url": "https://github.com/getodk/collect/commit/d25c7a21f91a1133a91b5ccd005e89d854b85871", "message": "fix rating bar showing wrong rating value on Android 7", "committedDate": "2020-10-20T17:52:17Z", "type": "commit"}, {"oid": "97a1c519be2d0d24fcf27da92e7074646e520a37", "url": "https://github.com/getodk/collect/commit/97a1c519be2d0d24fcf27da92e7074646e520a37", "message": "add touch listener to change rating in other rating bar simulataneously", "committedDate": "2020-10-20T17:52:17Z", "type": "commit"}, {"oid": "d8af4f2870583565c95259608984281233564e49", "url": "https://github.com/getodk/collect/commit/d8af4f2870583565c95259608984281233564e49", "message": "update unit tests", "committedDate": "2020-10-20T17:55:06Z", "type": "commit"}, {"oid": "d8af4f2870583565c95259608984281233564e49", "url": "https://github.com/getodk/collect/commit/d8af4f2870583565c95259608984281233564e49", "message": "update unit tests", "committedDate": "2020-10-20T17:55:06Z", "type": "forcePushed"}, {"oid": "8642fb129605b6dbe635ba48116f7b446c3284ad", "url": "https://github.com/getodk/collect/commit/8642fb129605b6dbe635ba48116f7b446c3284ad", "message": "set saveEnabled to false to prevent rating bar from retaining values on screen rotation", "committedDate": "2020-10-23T15:53:29Z", "type": "commit"}]}