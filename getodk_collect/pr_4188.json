{"pr_number": 4188, "pr_title": "Extend existing external application functionality to receive binary files in field-list groups", "pr_author": "grzesiek2010", "pr_createdAt": "2020-10-26T14:06:44Z", "pr_url": "https://github.com/getodk/collect/pull/4188", "merge_commit": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4NDQ1Mg==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r513484452", "body": "Do these values need to be random or are you just using random values to generate test data?", "bodyText": "Do these values need to be random or are you just using random values to generate test data?", "bodyHTML": "<p dir=\"auto\">Do these values need to be random or are you just using random values to generate test data?</p>", "author": "seadowg", "createdAt": "2020-10-28T14:23:23Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java", "diffHunk": "@@ -80,17 +95,109 @@ public void appMissingErrorText_ShouldComeFromSpecialFormText() {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() {\n+    public void externalApp_ShouldPopulateStringFields() {\n         Intent resultIntent = new Intent();\n-        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        int randomInteger = (new Random()).nextInt(255);\n-        resultIntent.putExtra(\"someinteger\", randomInteger);\n+        int randomInteger = new Random().nextInt(255);\n+        double scale = Math.pow(10, 2);\n+        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n+        String randomText = RandomString.make();", "originalCommit": "36b39bdb62696618d9bdb437d9d6a50004c67ffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEyNzQ3Ng==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514127476", "bodyText": "It was just for test data it's not required and I got rid of it to simplify the long externalApp_ShouldPopulateFields test.", "author": "grzesiek2010", "createdAt": "2020-10-29T09:44:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4NDQ1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "d403b9d6b64ceda33509bcd991a85ffefd95121b", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex a2c7e64ec..cfd85223c 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -95,106 +92,64 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateStringFields() {\n-        Intent resultIntent = new Intent();\n-\n-        int randomInteger = new Random().nextInt(255);\n-        double scale = Math.pow(10, 2);\n-        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n-        String randomText = RandomString.make();\n-\n-        resultIntent.putExtra(\"questionInteger\", randomInteger);\n-        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n-        resultIntent.putExtra(\"questionText\", randomText);\n-\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n-        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n-        onView(withText(randomText)).check(matches(isDisplayed()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateImageField() throws IOException {\n+    public void externalApp_ShouldPopulateFields() throws IOException {\n+        // Check ImageWidget without answer\n         onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n         onView(withId(R.id.capture_image)).check(doesNotExist());\n         onView(withId(R.id.choose_image)).check(doesNotExist());\n \n-        Intent resultIntent = new Intent();\n-\n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"famous.jpg\", tmpJpg.getPath());\n-\n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionImage\", null, getUriForFile(tmpJpg)));\n-\n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withTagValue(is(\"ImageView\"))).check(matches(isDisplayed()));\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateAudioField() throws IOException {\n+        // Check AudioWidget without answer\n         onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n \n-        Intent resultIntent = new Intent();\n-\n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleAudio.wav\", tmpJpg.getPath());\n-\n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionAudio\", null, getUriForFile(tmpJpg)));\n-\n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withId(R.id.audio_controller)).check(matches(isDisplayed()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateVideoField() throws IOException {\n+        // Check VideoWidget without answer\n         onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n         onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n \n+        // Check ArbitraryFileWidget without answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+\n         Intent resultIntent = new Intent();\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleVideo.mp4\", tmpJpg.getPath());\n+        resultIntent.putExtra(\"questionInteger\", \"25\");\n+        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n+        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n \n         ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionVideo\", null, getUriForFile(tmpJpg)));\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, createTempFile(\"famous\", \"jpg\")));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, createTempFile(\"sampleAudio\", \"wav\")));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, createTempFile(\"sampleVideo\", \"mp4\")));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, createTempFile(\"fruits\", \"csv\")));\n \n         resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateArbitraryFileField() throws IOException {\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+        // Check StringWidgets with answers\n+        onView(withText(\"25\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"46.74\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"sampleAnswer\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n \n-        Intent resultIntent = new Intent();\n+        // Check ImageWidget with answer\n+        onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"fruits.csv\", tmpJpg.getPath());\n+        // Check AudioWidget with answer\n+        onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionFile\", null, getUriForFile(tmpJpg)));\n+        // Check VideoWidget with answer\n+        onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n \n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n+        // Check ArbitraryFileWidget with answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+    }\n \n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(isDisplayed()));\n+    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n+    private Uri createTempFile(String name, String extension) throws IOException {\n+        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n+        copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n+        return getUriForFile(file);\n     }\n \n     private Uri getUriForFile(File file) {\n", "next_change": {"commit": "53d0d807f8a401ff7c2ea79d5181ccbe3bd1515b", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex cfd85223c..33e10a24a 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -92,67 +80,17 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() throws IOException {\n-        // Check ImageWidget without answer\n-        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-\n-        // Check AudioWidget without answer\n-        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n-\n-        // Check VideoWidget without answer\n-        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n-\n-        // Check ArbitraryFileWidget without answer\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n-\n+    public void externalApp_ShouldPopulateFields() {\n         Intent resultIntent = new Intent();\n+        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        resultIntent.putExtra(\"questionInteger\", \"25\");\n-        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n-        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n+        int randomInteger = (new Random()).nextInt(255);\n+        resultIntent.putExtra(\"someinteger\", randomInteger);\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionImage\", null, createTempFile(\"famous\", \"jpg\")));\n-        clipData.addItem(new ClipData.Item(\"questionAudio\", null, createTempFile(\"sampleAudio\", \"wav\")));\n-        clipData.addItem(new ClipData.Item(\"questionVideo\", null, createTempFile(\"sampleVideo\", \"mp4\")));\n-        clipData.addItem(new ClipData.Item(\"questionFile\", null, createTempFile(\"fruits\", \"csv\")));\n-\n-        resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        // Check StringWidgets with answers\n-        onView(withText(\"25\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withText(\"46.74\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withText(\"sampleAnswer\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-\n-        // Check ImageWidget with answer\n-        onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-\n-        // Check AudioWidget with answer\n-        onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-\n-        // Check VideoWidget with answer\n-        onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n-\n-        // Check ArbitraryFileWidget with answer\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-    }\n-\n-    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n-    private Uri createTempFile(String name, String extension) throws IOException {\n-        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n-        copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n-        return getUriForFile(file);\n-    }\n-\n-    private Uri getUriForFile(File file) {\n-        return FileProvider.getUriForFile(Collect.getInstance(), BuildConfig.APPLICATION_ID + \".provider\", file);\n+        onView(withText(\"Here is a text value\")).check(matches(isDisplayed()));\n+        onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n     }\n }\n", "next_change": {"commit": "679464ebd53eb30a5f63caed650a591c928b439f", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex 33e10a24a..a2c7e64ec 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -80,17 +95,109 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() {\n+    public void externalApp_ShouldPopulateStringFields() {\n         Intent resultIntent = new Intent();\n-        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        int randomInteger = (new Random()).nextInt(255);\n-        resultIntent.putExtra(\"someinteger\", randomInteger);\n+        int randomInteger = new Random().nextInt(255);\n+        double scale = Math.pow(10, 2);\n+        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n+        String randomText = RandomString.make();\n+\n+        resultIntent.putExtra(\"questionInteger\", randomInteger);\n+        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n+        resultIntent.putExtra(\"questionText\", randomText);\n \n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withText(\"Here is a text value\")).check(matches(isDisplayed()));\n         onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n+        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n+        onView(withText(randomText)).check(matches(isDisplayed()));\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateImageField() throws IOException {\n+        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"famous.jpg\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withTagValue(is(\"ImageView\"))).check(matches(isDisplayed()));\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateAudioField() throws IOException {\n+        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"sampleAudio.wav\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withId(R.id.audio_controller)).check(matches(isDisplayed()));\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateVideoField() throws IOException {\n+        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"sampleVideo.mp4\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateArbitraryFileField() throws IOException {\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"fruits.csv\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(isDisplayed()));\n+    }\n+\n+    private Uri getUriForFile(File file) {\n+        return FileProvider.getUriForFile(Collect.getInstance(), BuildConfig.APPLICATION_ID + \".provider\", file);\n     }\n }\n", "next_change": {"commit": "ce0f65667491bad121da9eb83a97cf9791ecfbb4", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex a2c7e64ec..cfd85223c 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -95,106 +92,64 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateStringFields() {\n-        Intent resultIntent = new Intent();\n-\n-        int randomInteger = new Random().nextInt(255);\n-        double scale = Math.pow(10, 2);\n-        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n-        String randomText = RandomString.make();\n-\n-        resultIntent.putExtra(\"questionInteger\", randomInteger);\n-        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n-        resultIntent.putExtra(\"questionText\", randomText);\n-\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n-        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n-        onView(withText(randomText)).check(matches(isDisplayed()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateImageField() throws IOException {\n+    public void externalApp_ShouldPopulateFields() throws IOException {\n+        // Check ImageWidget without answer\n         onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n         onView(withId(R.id.capture_image)).check(doesNotExist());\n         onView(withId(R.id.choose_image)).check(doesNotExist());\n \n-        Intent resultIntent = new Intent();\n-\n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"famous.jpg\", tmpJpg.getPath());\n-\n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionImage\", null, getUriForFile(tmpJpg)));\n-\n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withTagValue(is(\"ImageView\"))).check(matches(isDisplayed()));\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateAudioField() throws IOException {\n+        // Check AudioWidget without answer\n         onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n \n-        Intent resultIntent = new Intent();\n-\n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleAudio.wav\", tmpJpg.getPath());\n-\n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionAudio\", null, getUriForFile(tmpJpg)));\n-\n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withId(R.id.audio_controller)).check(matches(isDisplayed()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateVideoField() throws IOException {\n+        // Check VideoWidget without answer\n         onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n         onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n \n+        // Check ArbitraryFileWidget without answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+\n         Intent resultIntent = new Intent();\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleVideo.mp4\", tmpJpg.getPath());\n+        resultIntent.putExtra(\"questionInteger\", \"25\");\n+        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n+        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n \n         ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionVideo\", null, getUriForFile(tmpJpg)));\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, createTempFile(\"famous\", \"jpg\")));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, createTempFile(\"sampleAudio\", \"wav\")));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, createTempFile(\"sampleVideo\", \"mp4\")));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, createTempFile(\"fruits\", \"csv\")));\n \n         resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateArbitraryFileField() throws IOException {\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+        // Check StringWidgets with answers\n+        onView(withText(\"25\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"46.74\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"sampleAnswer\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n \n-        Intent resultIntent = new Intent();\n+        // Check ImageWidget with answer\n+        onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"fruits.csv\", tmpJpg.getPath());\n+        // Check AudioWidget with answer\n+        onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionFile\", null, getUriForFile(tmpJpg)));\n+        // Check VideoWidget with answer\n+        onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n \n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n+        // Check ArbitraryFileWidget with answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+    }\n \n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(isDisplayed()));\n+    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n+    private Uri createTempFile(String name, String extension) throws IOException {\n+        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n+        copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n+        return getUriForFile(file);\n     }\n \n     private Uri getUriForFile(File file) {\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex a2c7e64ec..f921888c6 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -95,106 +98,161 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateStringFields() {\n+    public void externalApp_ShouldPopulateFields() throws IOException {\n+        assertImageWidgetWithoutAnswer();\n+        assertAudioWidgetWithoutAnswer();\n+        assertVideoWidgetWithoutAnswer();\n+        assertFileWidgetWithoutAnswer();\n+\n         Intent resultIntent = new Intent();\n \n-        int randomInteger = new Random().nextInt(255);\n-        double scale = Math.pow(10, 2);\n-        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n-        String randomText = RandomString.make();\n+        Uri imageUri = createTempFile(\"famous\", \"jpg\");\n+        Uri audioUri = createTempFile(\"sampleAudio\", \"wav\");\n+        Uri videoUri = createTempFile(\"sampleVideo\", \"mp4\");\n+        Uri fileUri = createTempFile(\"fruits\", \"csv\");\n+\n+        resultIntent.putExtra(\"questionInteger\", \"25\");\n+        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n+        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n+        resultIntent.putExtra(\"questionImage\", imageUri);\n+        resultIntent.putExtra(\"questionAudio\", audioUri);\n+        resultIntent.putExtra(\"questionVideo\", videoUri);\n+        resultIntent.putExtra(\"questionFile\", fileUri);\n \n-        resultIntent.putExtra(\"questionInteger\", randomInteger);\n-        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n-        resultIntent.putExtra(\"questionText\", randomText);\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, imageUri));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, audioUri));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, videoUri));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, fileUri));\n \n+        resultIntent.setClipData(clipData);\n+        resultIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n-        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n-        onView(withText(randomText)).check(matches(isDisplayed()));\n+        assertImageWidgetWithAnswer();\n+        assertAudioWidgetWithAnswer();\n+        assertVideoWidgetWithAnswer();\n+        assertFileWidgetWithAnswer();\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateImageField() throws IOException {\n-        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n+    public void externalApp_ShouldNotPopulateFieldsIfAnswersAreNull() {\n+        assertImageWidgetWithoutAnswer();\n+        assertAudioWidgetWithoutAnswer();\n+        assertVideoWidgetWithoutAnswer();\n+        assertFileWidgetWithoutAnswer();\n \n         Intent resultIntent = new Intent();\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"famous.jpg\", tmpJpg.getPath());\n+        resultIntent.putExtra(\"questionInteger\", (Bundle) null);\n+        resultIntent.putExtra(\"questionDecimal\", (Bundle) null);\n+        resultIntent.putExtra(\"questionText\", (Bundle) null);\n+        resultIntent.putExtra(\"questionImage\", (Bundle) null);\n+        resultIntent.putExtra(\"questionAudio\", (Bundle) null);\n+        resultIntent.putExtra(\"questionVideo\", (Bundle) null);\n+        resultIntent.putExtra(\"questionFile\", (Bundle) null);\n \n         ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionImage\", null, getUriForFile(tmpJpg)));\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, null));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, null));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, null));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, null));\n \n         resultIntent.setClipData(clipData);\n+        resultIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withTagValue(is(\"ImageView\"))).check(matches(isDisplayed()));\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n+        onView(withIndex(withClassName(endsWith(\"EditText\")), 0)).check(matches(withText(\"\")));\n+        onView(withIndex(withClassName(endsWith(\"EditText\")), 1)).check(matches(withText(\"\")));\n+        onView(withIndex(withClassName(endsWith(\"EditText\")), 2)).check(matches(withText(\"\")));\n+\n+        assertImageWidgetWithoutAnswer();\n+        assertAudioWidgetWithoutAnswer();\n+        assertVideoWidgetWithoutAnswer();\n+        assertFileWidgetWithoutAnswer();\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateAudioField() throws IOException {\n-        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n+    public void collect_shouldNotCrashWhenAnyExceptionIsThrownWhileReceivingAnswer() {\n+        assertImageWidgetWithoutAnswer();\n \n         Intent resultIntent = new Intent();\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleAudio.wav\", tmpJpg.getPath());\n+        Uri uri = mock(Uri.class);\n+        doThrow(new SecurityException()).when(uri);\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionAudio\", null, getUriForFile(tmpJpg)));\n+        resultIntent.putExtra(\"questionImage\", uri);\n \n-        resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withId(R.id.audio_controller)).check(matches(isDisplayed()));\n+        assertImageWidgetWithoutAnswer();\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateVideoField() throws IOException {\n-        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n+    public void collect_shouldNotCrashWhenAnyErrorIsThrownWhileReceivingAnswer() {\n+        assertImageWidgetWithoutAnswer();\n \n         Intent resultIntent = new Intent();\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleVideo.mp4\", tmpJpg.getPath());\n+        Uri uri = mock(Uri.class);\n+        doThrow(new Error()).when(uri);\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionVideo\", null, getUriForFile(tmpJpg)));\n+        resultIntent.putExtra(\"questionImage\", uri);\n \n-        resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+\n         onView(withText(\"This is buttonText\")).perform(click());\n \n+        assertImageWidgetWithoutAnswer();\n+    }\n+\n+    private void assertImageWidgetWithoutAnswer() {\n+        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+    }\n+\n+    private void assertAudioWidgetWithoutAnswer() {\n+        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n+    }\n+\n+    private void assertVideoWidgetWithoutAnswer() {\n         onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n+        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n     }\n \n-    @Test\n-    public void externalApp_ShouldPopulateArbitraryFileField() throws IOException {\n+    private void assertFileWidgetWithoutAnswer() {\n         onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+    }\n \n-        Intent resultIntent = new Intent();\n+    private void assertImageWidgetWithAnswer() {\n+        onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+    }\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"fruits.csv\", tmpJpg.getPath());\n+    private void assertAudioWidgetWithAnswer() {\n+        onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+    }\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionFile\", null, getUriForFile(tmpJpg)));\n+    private void assertVideoWidgetWithAnswer() {\n+        onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n+    }\n \n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n+    private void assertFileWidgetWithAnswer() {\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+    }\n \n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(isDisplayed()));\n+    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n+    private Uri createTempFile(String name, String extension) throws IOException {\n+        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n+        copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n+        return getUriForFile(file);\n     }\n \n     private Uri getUriForFile(File file) {\n", "next_change": {"commit": "0bbd104b1bf17d4db67bfebb6f64c6a56acdf562", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex f921888c6..88185f633 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -248,9 +249,13 @@ public class IntentGroupTest {\n         onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n     }\n \n-    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n     private Uri createTempFile(String name, String extension) throws IOException {\n-        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n+        // Use the phones downloads dir for temp files\n+        File downloadsDir = ApplicationProvider\n+                .getApplicationContext()\n+                .getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS);\n+\n+        File file = File.createTempFile(name, extension, downloadsDir);\n         copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n         return getUriForFile(file);\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "message": "Merge commit", "committedDate": null}, {"oid": "3fe70a6c5e04d2fd95e8eb5eb8f454b9508bdadc", "committedDate": "2020-11-05 16:07:20 +0100", "message": "Fixed tests"}, {"oid": "3b08d4d357a2dcce668f57a3a2dae474a5c77fce", "committedDate": "2020-11-26 16:41:51 +0100", "message": "Fixed tests"}, {"oid": "788a0b8a51395b9ff2972f38f3227a04687854c4", "committedDate": "2020-12-01 10:22:43 +0000", "message": "Fix test missing scrolling"}, {"oid": "804cd24da5dbeec517e900d7d9e4b31c5e1ac8eb", "committedDate": "2020-12-03 15:33:32 +0100", "message": "Merge branch 'master' into COLLECT-4209"}, {"oid": "9ea40204f727949e2c3d146f5a53ab5792518f04", "committedDate": "2020-12-04 14:09:49 +0100", "message": "Fixed IntentGroupTest"}, {"oid": "cb1a1a616e8e59202c988f179a1f02e8aa3cb1bf", "committedDate": "2021-01-25 14:12:02 +0100", "message": "Improved tests for intent group"}, {"oid": "7f9a90a485292516c13cf0213f243419d993e396", "committedDate": "2021-01-25 14:17:03 +0100", "message": "Moved the new message about not granted file permission to strings"}, {"oid": "51aa28519339ee5b8da715bbb67a666f39c96643", "committedDate": "2021-01-28 14:43:45 +0100", "message": "Fixed tests"}, {"oid": "b8498278ae2294e67a99d1293be0b8b289de63e6", "committedDate": "2021-02-17 03:45:35 +0100", "message": "Removed storage permissions"}, {"oid": "c194fdbd6b02b8f05b1ed826fad11931e2a88de9", "committedDate": "2021-05-17 11:22:55 +0100", "message": "Remove any use of IntentsTestRule"}, {"oid": "ec21447a77bc864b6e1e4277ac2a8f7b10717484", "committedDate": "2021-05-26 14:16:51 +0100", "message": "Remove use of StoragePathProvider in form loading utils"}, {"oid": "0bbd104b1bf17d4db67bfebb6f64c6a56acdf562", "committedDate": "2021-10-29 15:21:49 +0100", "message": "Use downloads directory for storing test temp files"}, {"oid": "15116be7d3feeb853f7c90d5c4083aa5201de443", "committedDate": "2021-11-03 18:12:13 +0000", "message": "Always assert on form entry page when using FormActivityTestRule to avoid early interactions"}, {"oid": "da6c7b217a014a4a0491ab4f36e6fe17ebea12d5", "committedDate": "2021-11-08 12:57:47 +0000", "message": "Use correct toast assertion"}, {"oid": "805d0938a4a1bb14272ac4286006a1bde82613c5", "committedDate": "2021-11-08 13:33:39 +0000", "message": "Optimize imports"}, {"oid": "29b4ab364349d66f0165ba648bbf2f2e15531e1e", "committedDate": "2021-12-20 11:55:52 +0100", "message": "Moved RecordedIntentsRule to testshared module and resued in PermissionDeniedDialogTest"}, {"oid": "d24fbcbf7407900c7d0509ed91cd3f8c17077127", "committedDate": "2022-01-11 17:01:17 +0000", "message": "Make Geopoint dialog scrollable"}, {"oid": "0a7adc5e26a0187278a0d9b78cc91571ba31d09e", "committedDate": "2022-01-18 14:06:46 +0100", "message": "Remove CopyFormRule"}, {"oid": "fd6e73ab7504eaa956537fca25be6e70759627ee", "committedDate": "2022-01-18 17:10:53 +0100", "message": "Move initial form copy to FormActivityTestRule class"}, {"oid": "4d756215a40a11203f641b5321416e2ee3fb2e33", "committedDate": "2022-02-04 15:36:52 +0100", "message": "Move test rules to specific folder"}, {"oid": "0225485f52c099cd937ee5ab85ecd8caa78d4b61", "committedDate": "2022-02-10 21:09:43 +0100", "message": "Moved CustomMatchers to matchers package"}, {"oid": "bd353685fa7c65146f5aabb16b685234bf3fbfa3", "committedDate": "2022-02-18 13:26:23 +0000", "message": "Move android specific (nothing to do with our app) tsest helpers to a package"}, {"oid": "96699239c7aa48b8c4f2eaba71c680d355696097", "committedDate": "2022-02-18 13:42:50 +0000", "message": "Fix runtime problems caused by Robolectric being included in androidTest"}, {"oid": "a367b960425b593fbe6e6d9a911e0c28d1e44e2a", "committedDate": "2022-07-14 15:38:03 +0200", "message": "Removed redundant granting permissions in tests"}, {"oid": "b946e82b541f56e5eec8a04a52c31f59cf58fd28", "committedDate": "2023-02-06 22:05:15 +0100", "message": "Remove now unneeded NestedScrollToAction"}, {"oid": "7e06f6d1228e0a867d3b4a051d9f6ba155c3f5c3", "committedDate": "2023-02-15 16:04:29 +0100", "message": "Fixed IntentGroupTest"}, {"oid": "b2104532efd5c0157e234467fba4465b89dcf4aa", "committedDate": "2023-03-22 16:24:37 +0100", "message": "Create new rule for testing FormEntryActivity"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4Njk2NQ==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r513486965", "body": "You can just use `Files.createTempFile` here I think. Then there's no need to use the `StoragePathProvider` in here.", "bodyText": "You can just use Files.createTempFile here I think. Then there's no need to use the StoragePathProvider in here.", "bodyHTML": "<p dir=\"auto\">You can just use <code>Files.createTempFile</code> here I think. Then there's no need to use the <code>StoragePathProvider</code> in here.</p>", "author": "seadowg", "createdAt": "2020-10-28T14:26:17Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java", "diffHunk": "@@ -80,17 +95,109 @@ public void appMissingErrorText_ShouldComeFromSpecialFormText() {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() {\n+    public void externalApp_ShouldPopulateStringFields() {\n         Intent resultIntent = new Intent();\n-        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        int randomInteger = (new Random()).nextInt(255);\n-        resultIntent.putExtra(\"someinteger\", randomInteger);\n+        int randomInteger = new Random().nextInt(255);\n+        double scale = Math.pow(10, 2);\n+        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n+        String randomText = RandomString.make();\n+\n+        resultIntent.putExtra(\"questionInteger\", randomInteger);\n+        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n+        resultIntent.putExtra(\"questionText\", randomText);\n \n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withText(\"Here is a text value\")).check(matches(isDisplayed()));\n         onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n+        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n+        onView(withText(randomText)).check(matches(isDisplayed()));\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateImageField() throws IOException {\n+        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());", "originalCommit": "36b39bdb62696618d9bdb437d9d6a50004c67ffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEyMzg0Mw==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514123843", "bodyText": "Right", "author": "grzesiek2010", "createdAt": "2020-10-29T09:38:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4Njk2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d403b9d6b64ceda33509bcd991a85ffefd95121b", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex a2c7e64ec..cfd85223c 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -95,106 +92,64 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateStringFields() {\n-        Intent resultIntent = new Intent();\n-\n-        int randomInteger = new Random().nextInt(255);\n-        double scale = Math.pow(10, 2);\n-        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n-        String randomText = RandomString.make();\n-\n-        resultIntent.putExtra(\"questionInteger\", randomInteger);\n-        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n-        resultIntent.putExtra(\"questionText\", randomText);\n-\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n-        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n-        onView(withText(randomText)).check(matches(isDisplayed()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateImageField() throws IOException {\n+    public void externalApp_ShouldPopulateFields() throws IOException {\n+        // Check ImageWidget without answer\n         onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n         onView(withId(R.id.capture_image)).check(doesNotExist());\n         onView(withId(R.id.choose_image)).check(doesNotExist());\n \n-        Intent resultIntent = new Intent();\n-\n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"famous.jpg\", tmpJpg.getPath());\n-\n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionImage\", null, getUriForFile(tmpJpg)));\n-\n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withTagValue(is(\"ImageView\"))).check(matches(isDisplayed()));\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateAudioField() throws IOException {\n+        // Check AudioWidget without answer\n         onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n \n-        Intent resultIntent = new Intent();\n-\n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleAudio.wav\", tmpJpg.getPath());\n-\n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionAudio\", null, getUriForFile(tmpJpg)));\n-\n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withId(R.id.audio_controller)).check(matches(isDisplayed()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateVideoField() throws IOException {\n+        // Check VideoWidget without answer\n         onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n         onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n \n+        // Check ArbitraryFileWidget without answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+\n         Intent resultIntent = new Intent();\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleVideo.mp4\", tmpJpg.getPath());\n+        resultIntent.putExtra(\"questionInteger\", \"25\");\n+        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n+        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n \n         ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionVideo\", null, getUriForFile(tmpJpg)));\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, createTempFile(\"famous\", \"jpg\")));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, createTempFile(\"sampleAudio\", \"wav\")));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, createTempFile(\"sampleVideo\", \"mp4\")));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, createTempFile(\"fruits\", \"csv\")));\n \n         resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateArbitraryFileField() throws IOException {\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+        // Check StringWidgets with answers\n+        onView(withText(\"25\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"46.74\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"sampleAnswer\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n \n-        Intent resultIntent = new Intent();\n+        // Check ImageWidget with answer\n+        onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"fruits.csv\", tmpJpg.getPath());\n+        // Check AudioWidget with answer\n+        onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionFile\", null, getUriForFile(tmpJpg)));\n+        // Check VideoWidget with answer\n+        onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n \n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n+        // Check ArbitraryFileWidget with answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+    }\n \n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(isDisplayed()));\n+    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n+    private Uri createTempFile(String name, String extension) throws IOException {\n+        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n+        copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n+        return getUriForFile(file);\n     }\n \n     private Uri getUriForFile(File file) {\n", "next_change": {"commit": "53d0d807f8a401ff7c2ea79d5181ccbe3bd1515b", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex cfd85223c..33e10a24a 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -92,67 +80,17 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() throws IOException {\n-        // Check ImageWidget without answer\n-        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-\n-        // Check AudioWidget without answer\n-        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n-\n-        // Check VideoWidget without answer\n-        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n-\n-        // Check ArbitraryFileWidget without answer\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n-\n+    public void externalApp_ShouldPopulateFields() {\n         Intent resultIntent = new Intent();\n+        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        resultIntent.putExtra(\"questionInteger\", \"25\");\n-        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n-        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n+        int randomInteger = (new Random()).nextInt(255);\n+        resultIntent.putExtra(\"someinteger\", randomInteger);\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionImage\", null, createTempFile(\"famous\", \"jpg\")));\n-        clipData.addItem(new ClipData.Item(\"questionAudio\", null, createTempFile(\"sampleAudio\", \"wav\")));\n-        clipData.addItem(new ClipData.Item(\"questionVideo\", null, createTempFile(\"sampleVideo\", \"mp4\")));\n-        clipData.addItem(new ClipData.Item(\"questionFile\", null, createTempFile(\"fruits\", \"csv\")));\n-\n-        resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        // Check StringWidgets with answers\n-        onView(withText(\"25\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withText(\"46.74\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withText(\"sampleAnswer\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-\n-        // Check ImageWidget with answer\n-        onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-\n-        // Check AudioWidget with answer\n-        onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-\n-        // Check VideoWidget with answer\n-        onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n-\n-        // Check ArbitraryFileWidget with answer\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-    }\n-\n-    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n-    private Uri createTempFile(String name, String extension) throws IOException {\n-        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n-        copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n-        return getUriForFile(file);\n-    }\n-\n-    private Uri getUriForFile(File file) {\n-        return FileProvider.getUriForFile(Collect.getInstance(), BuildConfig.APPLICATION_ID + \".provider\", file);\n+        onView(withText(\"Here is a text value\")).check(matches(isDisplayed()));\n+        onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n     }\n }\n", "next_change": {"commit": "679464ebd53eb30a5f63caed650a591c928b439f", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex 33e10a24a..a2c7e64ec 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -80,17 +95,109 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() {\n+    public void externalApp_ShouldPopulateStringFields() {\n         Intent resultIntent = new Intent();\n-        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        int randomInteger = (new Random()).nextInt(255);\n-        resultIntent.putExtra(\"someinteger\", randomInteger);\n+        int randomInteger = new Random().nextInt(255);\n+        double scale = Math.pow(10, 2);\n+        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n+        String randomText = RandomString.make();\n+\n+        resultIntent.putExtra(\"questionInteger\", randomInteger);\n+        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n+        resultIntent.putExtra(\"questionText\", randomText);\n \n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withText(\"Here is a text value\")).check(matches(isDisplayed()));\n         onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n+        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n+        onView(withText(randomText)).check(matches(isDisplayed()));\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateImageField() throws IOException {\n+        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"famous.jpg\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withTagValue(is(\"ImageView\"))).check(matches(isDisplayed()));\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateAudioField() throws IOException {\n+        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"sampleAudio.wav\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withId(R.id.audio_controller)).check(matches(isDisplayed()));\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateVideoField() throws IOException {\n+        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"sampleVideo.mp4\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateArbitraryFileField() throws IOException {\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"fruits.csv\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(isDisplayed()));\n+    }\n+\n+    private Uri getUriForFile(File file) {\n+        return FileProvider.getUriForFile(Collect.getInstance(), BuildConfig.APPLICATION_ID + \".provider\", file);\n     }\n }\n", "next_change": {"commit": "ce0f65667491bad121da9eb83a97cf9791ecfbb4", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex a2c7e64ec..cfd85223c 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -95,106 +92,64 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateStringFields() {\n-        Intent resultIntent = new Intent();\n-\n-        int randomInteger = new Random().nextInt(255);\n-        double scale = Math.pow(10, 2);\n-        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n-        String randomText = RandomString.make();\n-\n-        resultIntent.putExtra(\"questionInteger\", randomInteger);\n-        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n-        resultIntent.putExtra(\"questionText\", randomText);\n-\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n-        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n-        onView(withText(randomText)).check(matches(isDisplayed()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateImageField() throws IOException {\n+    public void externalApp_ShouldPopulateFields() throws IOException {\n+        // Check ImageWidget without answer\n         onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n         onView(withId(R.id.capture_image)).check(doesNotExist());\n         onView(withId(R.id.choose_image)).check(doesNotExist());\n \n-        Intent resultIntent = new Intent();\n-\n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"famous.jpg\", tmpJpg.getPath());\n-\n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionImage\", null, getUriForFile(tmpJpg)));\n-\n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withTagValue(is(\"ImageView\"))).check(matches(isDisplayed()));\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateAudioField() throws IOException {\n+        // Check AudioWidget without answer\n         onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n \n-        Intent resultIntent = new Intent();\n-\n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleAudio.wav\", tmpJpg.getPath());\n-\n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionAudio\", null, getUriForFile(tmpJpg)));\n-\n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withId(R.id.audio_controller)).check(matches(isDisplayed()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateVideoField() throws IOException {\n+        // Check VideoWidget without answer\n         onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n         onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n \n+        // Check ArbitraryFileWidget without answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+\n         Intent resultIntent = new Intent();\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleVideo.mp4\", tmpJpg.getPath());\n+        resultIntent.putExtra(\"questionInteger\", \"25\");\n+        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n+        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n \n         ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionVideo\", null, getUriForFile(tmpJpg)));\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, createTempFile(\"famous\", \"jpg\")));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, createTempFile(\"sampleAudio\", \"wav\")));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, createTempFile(\"sampleVideo\", \"mp4\")));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, createTempFile(\"fruits\", \"csv\")));\n \n         resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateArbitraryFileField() throws IOException {\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+        // Check StringWidgets with answers\n+        onView(withText(\"25\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"46.74\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"sampleAnswer\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n \n-        Intent resultIntent = new Intent();\n+        // Check ImageWidget with answer\n+        onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"fruits.csv\", tmpJpg.getPath());\n+        // Check AudioWidget with answer\n+        onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionFile\", null, getUriForFile(tmpJpg)));\n+        // Check VideoWidget with answer\n+        onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n \n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n+        // Check ArbitraryFileWidget with answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+    }\n \n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(isDisplayed()));\n+    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n+    private Uri createTempFile(String name, String extension) throws IOException {\n+        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n+        copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n+        return getUriForFile(file);\n     }\n \n     private Uri getUriForFile(File file) {\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex a2c7e64ec..f921888c6 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -95,106 +98,161 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateStringFields() {\n+    public void externalApp_ShouldPopulateFields() throws IOException {\n+        assertImageWidgetWithoutAnswer();\n+        assertAudioWidgetWithoutAnswer();\n+        assertVideoWidgetWithoutAnswer();\n+        assertFileWidgetWithoutAnswer();\n+\n         Intent resultIntent = new Intent();\n \n-        int randomInteger = new Random().nextInt(255);\n-        double scale = Math.pow(10, 2);\n-        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n-        String randomText = RandomString.make();\n+        Uri imageUri = createTempFile(\"famous\", \"jpg\");\n+        Uri audioUri = createTempFile(\"sampleAudio\", \"wav\");\n+        Uri videoUri = createTempFile(\"sampleVideo\", \"mp4\");\n+        Uri fileUri = createTempFile(\"fruits\", \"csv\");\n+\n+        resultIntent.putExtra(\"questionInteger\", \"25\");\n+        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n+        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n+        resultIntent.putExtra(\"questionImage\", imageUri);\n+        resultIntent.putExtra(\"questionAudio\", audioUri);\n+        resultIntent.putExtra(\"questionVideo\", videoUri);\n+        resultIntent.putExtra(\"questionFile\", fileUri);\n \n-        resultIntent.putExtra(\"questionInteger\", randomInteger);\n-        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n-        resultIntent.putExtra(\"questionText\", randomText);\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, imageUri));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, audioUri));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, videoUri));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, fileUri));\n \n+        resultIntent.setClipData(clipData);\n+        resultIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n-        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n-        onView(withText(randomText)).check(matches(isDisplayed()));\n+        assertImageWidgetWithAnswer();\n+        assertAudioWidgetWithAnswer();\n+        assertVideoWidgetWithAnswer();\n+        assertFileWidgetWithAnswer();\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateImageField() throws IOException {\n-        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n+    public void externalApp_ShouldNotPopulateFieldsIfAnswersAreNull() {\n+        assertImageWidgetWithoutAnswer();\n+        assertAudioWidgetWithoutAnswer();\n+        assertVideoWidgetWithoutAnswer();\n+        assertFileWidgetWithoutAnswer();\n \n         Intent resultIntent = new Intent();\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"famous.jpg\", tmpJpg.getPath());\n+        resultIntent.putExtra(\"questionInteger\", (Bundle) null);\n+        resultIntent.putExtra(\"questionDecimal\", (Bundle) null);\n+        resultIntent.putExtra(\"questionText\", (Bundle) null);\n+        resultIntent.putExtra(\"questionImage\", (Bundle) null);\n+        resultIntent.putExtra(\"questionAudio\", (Bundle) null);\n+        resultIntent.putExtra(\"questionVideo\", (Bundle) null);\n+        resultIntent.putExtra(\"questionFile\", (Bundle) null);\n \n         ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionImage\", null, getUriForFile(tmpJpg)));\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, null));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, null));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, null));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, null));\n \n         resultIntent.setClipData(clipData);\n+        resultIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withTagValue(is(\"ImageView\"))).check(matches(isDisplayed()));\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n+        onView(withIndex(withClassName(endsWith(\"EditText\")), 0)).check(matches(withText(\"\")));\n+        onView(withIndex(withClassName(endsWith(\"EditText\")), 1)).check(matches(withText(\"\")));\n+        onView(withIndex(withClassName(endsWith(\"EditText\")), 2)).check(matches(withText(\"\")));\n+\n+        assertImageWidgetWithoutAnswer();\n+        assertAudioWidgetWithoutAnswer();\n+        assertVideoWidgetWithoutAnswer();\n+        assertFileWidgetWithoutAnswer();\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateAudioField() throws IOException {\n-        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n+    public void collect_shouldNotCrashWhenAnyExceptionIsThrownWhileReceivingAnswer() {\n+        assertImageWidgetWithoutAnswer();\n \n         Intent resultIntent = new Intent();\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleAudio.wav\", tmpJpg.getPath());\n+        Uri uri = mock(Uri.class);\n+        doThrow(new SecurityException()).when(uri);\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionAudio\", null, getUriForFile(tmpJpg)));\n+        resultIntent.putExtra(\"questionImage\", uri);\n \n-        resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withId(R.id.audio_controller)).check(matches(isDisplayed()));\n+        assertImageWidgetWithoutAnswer();\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateVideoField() throws IOException {\n-        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n+    public void collect_shouldNotCrashWhenAnyErrorIsThrownWhileReceivingAnswer() {\n+        assertImageWidgetWithoutAnswer();\n \n         Intent resultIntent = new Intent();\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleVideo.mp4\", tmpJpg.getPath());\n+        Uri uri = mock(Uri.class);\n+        doThrow(new Error()).when(uri);\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionVideo\", null, getUriForFile(tmpJpg)));\n+        resultIntent.putExtra(\"questionImage\", uri);\n \n-        resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+\n         onView(withText(\"This is buttonText\")).perform(click());\n \n+        assertImageWidgetWithoutAnswer();\n+    }\n+\n+    private void assertImageWidgetWithoutAnswer() {\n+        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+    }\n+\n+    private void assertAudioWidgetWithoutAnswer() {\n+        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n+    }\n+\n+    private void assertVideoWidgetWithoutAnswer() {\n         onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n+        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n     }\n \n-    @Test\n-    public void externalApp_ShouldPopulateArbitraryFileField() throws IOException {\n+    private void assertFileWidgetWithoutAnswer() {\n         onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+    }\n \n-        Intent resultIntent = new Intent();\n+    private void assertImageWidgetWithAnswer() {\n+        onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+    }\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"fruits.csv\", tmpJpg.getPath());\n+    private void assertAudioWidgetWithAnswer() {\n+        onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+    }\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionFile\", null, getUriForFile(tmpJpg)));\n+    private void assertVideoWidgetWithAnswer() {\n+        onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n+    }\n \n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n+    private void assertFileWidgetWithAnswer() {\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+    }\n \n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(isDisplayed()));\n+    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n+    private Uri createTempFile(String name, String extension) throws IOException {\n+        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n+        copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n+        return getUriForFile(file);\n     }\n \n     private Uri getUriForFile(File file) {\n", "next_change": {"commit": "0bbd104b1bf17d4db67bfebb6f64c6a56acdf562", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex f921888c6..88185f633 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -248,9 +249,13 @@ public class IntentGroupTest {\n         onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n     }\n \n-    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n     private Uri createTempFile(String name, String extension) throws IOException {\n-        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n+        // Use the phones downloads dir for temp files\n+        File downloadsDir = ApplicationProvider\n+                .getApplicationContext()\n+                .getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS);\n+\n+        File file = File.createTempFile(name, extension, downloadsDir);\n         copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n         return getUriForFile(file);\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "message": "Merge commit", "committedDate": null}, {"oid": "3fe70a6c5e04d2fd95e8eb5eb8f454b9508bdadc", "committedDate": "2020-11-05 16:07:20 +0100", "message": "Fixed tests"}, {"oid": "3b08d4d357a2dcce668f57a3a2dae474a5c77fce", "committedDate": "2020-11-26 16:41:51 +0100", "message": "Fixed tests"}, {"oid": "788a0b8a51395b9ff2972f38f3227a04687854c4", "committedDate": "2020-12-01 10:22:43 +0000", "message": "Fix test missing scrolling"}, {"oid": "804cd24da5dbeec517e900d7d9e4b31c5e1ac8eb", "committedDate": "2020-12-03 15:33:32 +0100", "message": "Merge branch 'master' into COLLECT-4209"}, {"oid": "9ea40204f727949e2c3d146f5a53ab5792518f04", "committedDate": "2020-12-04 14:09:49 +0100", "message": "Fixed IntentGroupTest"}, {"oid": "cb1a1a616e8e59202c988f179a1f02e8aa3cb1bf", "committedDate": "2021-01-25 14:12:02 +0100", "message": "Improved tests for intent group"}, {"oid": "7f9a90a485292516c13cf0213f243419d993e396", "committedDate": "2021-01-25 14:17:03 +0100", "message": "Moved the new message about not granted file permission to strings"}, {"oid": "51aa28519339ee5b8da715bbb67a666f39c96643", "committedDate": "2021-01-28 14:43:45 +0100", "message": "Fixed tests"}, {"oid": "b8498278ae2294e67a99d1293be0b8b289de63e6", "committedDate": "2021-02-17 03:45:35 +0100", "message": "Removed storage permissions"}, {"oid": "c194fdbd6b02b8f05b1ed826fad11931e2a88de9", "committedDate": "2021-05-17 11:22:55 +0100", "message": "Remove any use of IntentsTestRule"}, {"oid": "ec21447a77bc864b6e1e4277ac2a8f7b10717484", "committedDate": "2021-05-26 14:16:51 +0100", "message": "Remove use of StoragePathProvider in form loading utils"}, {"oid": "0bbd104b1bf17d4db67bfebb6f64c6a56acdf562", "committedDate": "2021-10-29 15:21:49 +0100", "message": "Use downloads directory for storing test temp files"}, {"oid": "15116be7d3feeb853f7c90d5c4083aa5201de443", "committedDate": "2021-11-03 18:12:13 +0000", "message": "Always assert on form entry page when using FormActivityTestRule to avoid early interactions"}, {"oid": "da6c7b217a014a4a0491ab4f36e6fe17ebea12d5", "committedDate": "2021-11-08 12:57:47 +0000", "message": "Use correct toast assertion"}, {"oid": "805d0938a4a1bb14272ac4286006a1bde82613c5", "committedDate": "2021-11-08 13:33:39 +0000", "message": "Optimize imports"}, {"oid": "29b4ab364349d66f0165ba648bbf2f2e15531e1e", "committedDate": "2021-12-20 11:55:52 +0100", "message": "Moved RecordedIntentsRule to testshared module and resued in PermissionDeniedDialogTest"}, {"oid": "d24fbcbf7407900c7d0509ed91cd3f8c17077127", "committedDate": "2022-01-11 17:01:17 +0000", "message": "Make Geopoint dialog scrollable"}, {"oid": "0a7adc5e26a0187278a0d9b78cc91571ba31d09e", "committedDate": "2022-01-18 14:06:46 +0100", "message": "Remove CopyFormRule"}, {"oid": "fd6e73ab7504eaa956537fca25be6e70759627ee", "committedDate": "2022-01-18 17:10:53 +0100", "message": "Move initial form copy to FormActivityTestRule class"}, {"oid": "4d756215a40a11203f641b5321416e2ee3fb2e33", "committedDate": "2022-02-04 15:36:52 +0100", "message": "Move test rules to specific folder"}, {"oid": "0225485f52c099cd937ee5ab85ecd8caa78d4b61", "committedDate": "2022-02-10 21:09:43 +0100", "message": "Moved CustomMatchers to matchers package"}, {"oid": "bd353685fa7c65146f5aabb16b685234bf3fbfa3", "committedDate": "2022-02-18 13:26:23 +0000", "message": "Move android specific (nothing to do with our app) tsest helpers to a package"}, {"oid": "96699239c7aa48b8c4f2eaba71c680d355696097", "committedDate": "2022-02-18 13:42:50 +0000", "message": "Fix runtime problems caused by Robolectric being included in androidTest"}, {"oid": "a367b960425b593fbe6e6d9a911e0c28d1e44e2a", "committedDate": "2022-07-14 15:38:03 +0200", "message": "Removed redundant granting permissions in tests"}, {"oid": "b946e82b541f56e5eec8a04a52c31f59cf58fd28", "committedDate": "2023-02-06 22:05:15 +0100", "message": "Remove now unneeded NestedScrollToAction"}, {"oid": "7e06f6d1228e0a867d3b4a051d9f6ba155c3f5c3", "committedDate": "2023-02-15 16:04:29 +0100", "message": "Fixed IntentGroupTest"}, {"oid": "b2104532efd5c0157e234467fba4465b89dcf4aa", "committedDate": "2023-03-22 16:24:37 +0100", "message": "Create new rule for testing FormEntryActivity"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4ODUxOQ==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r513488519", "body": "Could this just be one test where the group contains every kind of data? That might be harder to read though I guess... Interested in what you think!", "bodyText": "Could this just be one test where the group contains every kind of data? That might be harder to read though I guess... Interested in what you think!", "bodyHTML": "<p dir=\"auto\">Could this just be one test where the group contains every kind of data? That might be harder to read though I guess... Interested in what you think!</p>", "author": "seadowg", "createdAt": "2020-10-28T14:28:02Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java", "diffHunk": "@@ -80,17 +95,109 @@ public void appMissingErrorText_ShouldComeFromSpecialFormText() {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() {\n+    public void externalApp_ShouldPopulateStringFields() {\n         Intent resultIntent = new Intent();\n-        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        int randomInteger = (new Random()).nextInt(255);\n-        resultIntent.putExtra(\"someinteger\", randomInteger);\n+        int randomInteger = new Random().nextInt(255);\n+        double scale = Math.pow(10, 2);\n+        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n+        String randomText = RandomString.make();\n+\n+        resultIntent.putExtra(\"questionInteger\", randomInteger);\n+        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n+        resultIntent.putExtra(\"questionText\", randomText);\n \n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withText(\"Here is a text value\")).check(matches(isDisplayed()));\n         onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n+        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n+        onView(withText(randomText)).check(matches(isDisplayed()));\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateImageField() throws IOException {", "originalCommit": "36b39bdb62696618d9bdb437d9d6a50004c67ffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEyODc0Nw==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514128747", "bodyText": "The test will be long but yeah in this case where it's about populating multiple fields at the same time it's maybe better to have one test.\nIt's Improved.", "author": "grzesiek2010", "createdAt": "2020-10-29T09:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4ODUxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "d403b9d6b64ceda33509bcd991a85ffefd95121b", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex a2c7e64ec..cfd85223c 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -95,106 +92,64 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateStringFields() {\n-        Intent resultIntent = new Intent();\n-\n-        int randomInteger = new Random().nextInt(255);\n-        double scale = Math.pow(10, 2);\n-        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n-        String randomText = RandomString.make();\n-\n-        resultIntent.putExtra(\"questionInteger\", randomInteger);\n-        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n-        resultIntent.putExtra(\"questionText\", randomText);\n-\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n-        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n-        onView(withText(randomText)).check(matches(isDisplayed()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateImageField() throws IOException {\n+    public void externalApp_ShouldPopulateFields() throws IOException {\n+        // Check ImageWidget without answer\n         onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n         onView(withId(R.id.capture_image)).check(doesNotExist());\n         onView(withId(R.id.choose_image)).check(doesNotExist());\n \n-        Intent resultIntent = new Intent();\n-\n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"famous.jpg\", tmpJpg.getPath());\n-\n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionImage\", null, getUriForFile(tmpJpg)));\n-\n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withTagValue(is(\"ImageView\"))).check(matches(isDisplayed()));\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateAudioField() throws IOException {\n+        // Check AudioWidget without answer\n         onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n \n-        Intent resultIntent = new Intent();\n-\n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleAudio.wav\", tmpJpg.getPath());\n-\n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionAudio\", null, getUriForFile(tmpJpg)));\n-\n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withId(R.id.audio_controller)).check(matches(isDisplayed()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateVideoField() throws IOException {\n+        // Check VideoWidget without answer\n         onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n         onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n \n+        // Check ArbitraryFileWidget without answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+\n         Intent resultIntent = new Intent();\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleVideo.mp4\", tmpJpg.getPath());\n+        resultIntent.putExtra(\"questionInteger\", \"25\");\n+        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n+        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n \n         ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionVideo\", null, getUriForFile(tmpJpg)));\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, createTempFile(\"famous\", \"jpg\")));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, createTempFile(\"sampleAudio\", \"wav\")));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, createTempFile(\"sampleVideo\", \"mp4\")));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, createTempFile(\"fruits\", \"csv\")));\n \n         resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateArbitraryFileField() throws IOException {\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+        // Check StringWidgets with answers\n+        onView(withText(\"25\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"46.74\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"sampleAnswer\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n \n-        Intent resultIntent = new Intent();\n+        // Check ImageWidget with answer\n+        onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"fruits.csv\", tmpJpg.getPath());\n+        // Check AudioWidget with answer\n+        onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionFile\", null, getUriForFile(tmpJpg)));\n+        // Check VideoWidget with answer\n+        onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n \n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n+        // Check ArbitraryFileWidget with answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+    }\n \n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(isDisplayed()));\n+    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n+    private Uri createTempFile(String name, String extension) throws IOException {\n+        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n+        copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n+        return getUriForFile(file);\n     }\n \n     private Uri getUriForFile(File file) {\n", "next_change": {"commit": "53d0d807f8a401ff7c2ea79d5181ccbe3bd1515b", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex cfd85223c..33e10a24a 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -92,67 +80,17 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() throws IOException {\n-        // Check ImageWidget without answer\n-        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-\n-        // Check AudioWidget without answer\n-        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n-\n-        // Check VideoWidget without answer\n-        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n-\n-        // Check ArbitraryFileWidget without answer\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n-\n+    public void externalApp_ShouldPopulateFields() {\n         Intent resultIntent = new Intent();\n+        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        resultIntent.putExtra(\"questionInteger\", \"25\");\n-        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n-        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n+        int randomInteger = (new Random()).nextInt(255);\n+        resultIntent.putExtra(\"someinteger\", randomInteger);\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionImage\", null, createTempFile(\"famous\", \"jpg\")));\n-        clipData.addItem(new ClipData.Item(\"questionAudio\", null, createTempFile(\"sampleAudio\", \"wav\")));\n-        clipData.addItem(new ClipData.Item(\"questionVideo\", null, createTempFile(\"sampleVideo\", \"mp4\")));\n-        clipData.addItem(new ClipData.Item(\"questionFile\", null, createTempFile(\"fruits\", \"csv\")));\n-\n-        resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        // Check StringWidgets with answers\n-        onView(withText(\"25\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withText(\"46.74\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withText(\"sampleAnswer\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-\n-        // Check ImageWidget with answer\n-        onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-\n-        // Check AudioWidget with answer\n-        onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-\n-        // Check VideoWidget with answer\n-        onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n-\n-        // Check ArbitraryFileWidget with answer\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-    }\n-\n-    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n-    private Uri createTempFile(String name, String extension) throws IOException {\n-        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n-        copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n-        return getUriForFile(file);\n-    }\n-\n-    private Uri getUriForFile(File file) {\n-        return FileProvider.getUriForFile(Collect.getInstance(), BuildConfig.APPLICATION_ID + \".provider\", file);\n+        onView(withText(\"Here is a text value\")).check(matches(isDisplayed()));\n+        onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n     }\n }\n", "next_change": {"commit": "679464ebd53eb30a5f63caed650a591c928b439f", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex 33e10a24a..a2c7e64ec 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -80,17 +95,109 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() {\n+    public void externalApp_ShouldPopulateStringFields() {\n         Intent resultIntent = new Intent();\n-        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        int randomInteger = (new Random()).nextInt(255);\n-        resultIntent.putExtra(\"someinteger\", randomInteger);\n+        int randomInteger = new Random().nextInt(255);\n+        double scale = Math.pow(10, 2);\n+        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n+        String randomText = RandomString.make();\n+\n+        resultIntent.putExtra(\"questionInteger\", randomInteger);\n+        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n+        resultIntent.putExtra(\"questionText\", randomText);\n \n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withText(\"Here is a text value\")).check(matches(isDisplayed()));\n         onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n+        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n+        onView(withText(randomText)).check(matches(isDisplayed()));\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateImageField() throws IOException {\n+        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"famous.jpg\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withTagValue(is(\"ImageView\"))).check(matches(isDisplayed()));\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateAudioField() throws IOException {\n+        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"sampleAudio.wav\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withId(R.id.audio_controller)).check(matches(isDisplayed()));\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateVideoField() throws IOException {\n+        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"sampleVideo.mp4\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateArbitraryFileField() throws IOException {\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"fruits.csv\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(isDisplayed()));\n+    }\n+\n+    private Uri getUriForFile(File file) {\n+        return FileProvider.getUriForFile(Collect.getInstance(), BuildConfig.APPLICATION_ID + \".provider\", file);\n     }\n }\n", "next_change": {"commit": "ce0f65667491bad121da9eb83a97cf9791ecfbb4", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex a2c7e64ec..cfd85223c 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -95,106 +92,64 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateStringFields() {\n-        Intent resultIntent = new Intent();\n-\n-        int randomInteger = new Random().nextInt(255);\n-        double scale = Math.pow(10, 2);\n-        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n-        String randomText = RandomString.make();\n-\n-        resultIntent.putExtra(\"questionInteger\", randomInteger);\n-        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n-        resultIntent.putExtra(\"questionText\", randomText);\n-\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n-        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n-        onView(withText(randomText)).check(matches(isDisplayed()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateImageField() throws IOException {\n+    public void externalApp_ShouldPopulateFields() throws IOException {\n+        // Check ImageWidget without answer\n         onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n         onView(withId(R.id.capture_image)).check(doesNotExist());\n         onView(withId(R.id.choose_image)).check(doesNotExist());\n \n-        Intent resultIntent = new Intent();\n-\n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"famous.jpg\", tmpJpg.getPath());\n-\n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionImage\", null, getUriForFile(tmpJpg)));\n-\n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withTagValue(is(\"ImageView\"))).check(matches(isDisplayed()));\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateAudioField() throws IOException {\n+        // Check AudioWidget without answer\n         onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n \n-        Intent resultIntent = new Intent();\n-\n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleAudio.wav\", tmpJpg.getPath());\n-\n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionAudio\", null, getUriForFile(tmpJpg)));\n-\n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withId(R.id.audio_controller)).check(matches(isDisplayed()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateVideoField() throws IOException {\n+        // Check VideoWidget without answer\n         onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n         onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n \n+        // Check ArbitraryFileWidget without answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+\n         Intent resultIntent = new Intent();\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleVideo.mp4\", tmpJpg.getPath());\n+        resultIntent.putExtra(\"questionInteger\", \"25\");\n+        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n+        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n \n         ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionVideo\", null, getUriForFile(tmpJpg)));\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, createTempFile(\"famous\", \"jpg\")));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, createTempFile(\"sampleAudio\", \"wav\")));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, createTempFile(\"sampleVideo\", \"mp4\")));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, createTempFile(\"fruits\", \"csv\")));\n \n         resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateArbitraryFileField() throws IOException {\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+        // Check StringWidgets with answers\n+        onView(withText(\"25\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"46.74\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"sampleAnswer\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n \n-        Intent resultIntent = new Intent();\n+        // Check ImageWidget with answer\n+        onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"fruits.csv\", tmpJpg.getPath());\n+        // Check AudioWidget with answer\n+        onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionFile\", null, getUriForFile(tmpJpg)));\n+        // Check VideoWidget with answer\n+        onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n \n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n+        // Check ArbitraryFileWidget with answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+    }\n \n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(isDisplayed()));\n+    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n+    private Uri createTempFile(String name, String extension) throws IOException {\n+        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n+        copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n+        return getUriForFile(file);\n     }\n \n     private Uri getUriForFile(File file) {\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex a2c7e64ec..f921888c6 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -95,106 +98,161 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateStringFields() {\n+    public void externalApp_ShouldPopulateFields() throws IOException {\n+        assertImageWidgetWithoutAnswer();\n+        assertAudioWidgetWithoutAnswer();\n+        assertVideoWidgetWithoutAnswer();\n+        assertFileWidgetWithoutAnswer();\n+\n         Intent resultIntent = new Intent();\n \n-        int randomInteger = new Random().nextInt(255);\n-        double scale = Math.pow(10, 2);\n-        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n-        String randomText = RandomString.make();\n+        Uri imageUri = createTempFile(\"famous\", \"jpg\");\n+        Uri audioUri = createTempFile(\"sampleAudio\", \"wav\");\n+        Uri videoUri = createTempFile(\"sampleVideo\", \"mp4\");\n+        Uri fileUri = createTempFile(\"fruits\", \"csv\");\n+\n+        resultIntent.putExtra(\"questionInteger\", \"25\");\n+        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n+        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n+        resultIntent.putExtra(\"questionImage\", imageUri);\n+        resultIntent.putExtra(\"questionAudio\", audioUri);\n+        resultIntent.putExtra(\"questionVideo\", videoUri);\n+        resultIntent.putExtra(\"questionFile\", fileUri);\n \n-        resultIntent.putExtra(\"questionInteger\", randomInteger);\n-        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n-        resultIntent.putExtra(\"questionText\", randomText);\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, imageUri));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, audioUri));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, videoUri));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, fileUri));\n \n+        resultIntent.setClipData(clipData);\n+        resultIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n-        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n-        onView(withText(randomText)).check(matches(isDisplayed()));\n+        assertImageWidgetWithAnswer();\n+        assertAudioWidgetWithAnswer();\n+        assertVideoWidgetWithAnswer();\n+        assertFileWidgetWithAnswer();\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateImageField() throws IOException {\n-        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n+    public void externalApp_ShouldNotPopulateFieldsIfAnswersAreNull() {\n+        assertImageWidgetWithoutAnswer();\n+        assertAudioWidgetWithoutAnswer();\n+        assertVideoWidgetWithoutAnswer();\n+        assertFileWidgetWithoutAnswer();\n \n         Intent resultIntent = new Intent();\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"famous.jpg\", tmpJpg.getPath());\n+        resultIntent.putExtra(\"questionInteger\", (Bundle) null);\n+        resultIntent.putExtra(\"questionDecimal\", (Bundle) null);\n+        resultIntent.putExtra(\"questionText\", (Bundle) null);\n+        resultIntent.putExtra(\"questionImage\", (Bundle) null);\n+        resultIntent.putExtra(\"questionAudio\", (Bundle) null);\n+        resultIntent.putExtra(\"questionVideo\", (Bundle) null);\n+        resultIntent.putExtra(\"questionFile\", (Bundle) null);\n \n         ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionImage\", null, getUriForFile(tmpJpg)));\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, null));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, null));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, null));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, null));\n \n         resultIntent.setClipData(clipData);\n+        resultIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withTagValue(is(\"ImageView\"))).check(matches(isDisplayed()));\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n+        onView(withIndex(withClassName(endsWith(\"EditText\")), 0)).check(matches(withText(\"\")));\n+        onView(withIndex(withClassName(endsWith(\"EditText\")), 1)).check(matches(withText(\"\")));\n+        onView(withIndex(withClassName(endsWith(\"EditText\")), 2)).check(matches(withText(\"\")));\n+\n+        assertImageWidgetWithoutAnswer();\n+        assertAudioWidgetWithoutAnswer();\n+        assertVideoWidgetWithoutAnswer();\n+        assertFileWidgetWithoutAnswer();\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateAudioField() throws IOException {\n-        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n+    public void collect_shouldNotCrashWhenAnyExceptionIsThrownWhileReceivingAnswer() {\n+        assertImageWidgetWithoutAnswer();\n \n         Intent resultIntent = new Intent();\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleAudio.wav\", tmpJpg.getPath());\n+        Uri uri = mock(Uri.class);\n+        doThrow(new SecurityException()).when(uri);\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionAudio\", null, getUriForFile(tmpJpg)));\n+        resultIntent.putExtra(\"questionImage\", uri);\n \n-        resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withId(R.id.audio_controller)).check(matches(isDisplayed()));\n+        assertImageWidgetWithoutAnswer();\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateVideoField() throws IOException {\n-        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n+    public void collect_shouldNotCrashWhenAnyErrorIsThrownWhileReceivingAnswer() {\n+        assertImageWidgetWithoutAnswer();\n \n         Intent resultIntent = new Intent();\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleVideo.mp4\", tmpJpg.getPath());\n+        Uri uri = mock(Uri.class);\n+        doThrow(new Error()).when(uri);\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionVideo\", null, getUriForFile(tmpJpg)));\n+        resultIntent.putExtra(\"questionImage\", uri);\n \n-        resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+\n         onView(withText(\"This is buttonText\")).perform(click());\n \n+        assertImageWidgetWithoutAnswer();\n+    }\n+\n+    private void assertImageWidgetWithoutAnswer() {\n+        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+    }\n+\n+    private void assertAudioWidgetWithoutAnswer() {\n+        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n+    }\n+\n+    private void assertVideoWidgetWithoutAnswer() {\n         onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n+        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n     }\n \n-    @Test\n-    public void externalApp_ShouldPopulateArbitraryFileField() throws IOException {\n+    private void assertFileWidgetWithoutAnswer() {\n         onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+    }\n \n-        Intent resultIntent = new Intent();\n+    private void assertImageWidgetWithAnswer() {\n+        onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+    }\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"fruits.csv\", tmpJpg.getPath());\n+    private void assertAudioWidgetWithAnswer() {\n+        onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+    }\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionFile\", null, getUriForFile(tmpJpg)));\n+    private void assertVideoWidgetWithAnswer() {\n+        onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n+    }\n \n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n+    private void assertFileWidgetWithAnswer() {\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+    }\n \n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(isDisplayed()));\n+    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n+    private Uri createTempFile(String name, String extension) throws IOException {\n+        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n+        copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n+        return getUriForFile(file);\n     }\n \n     private Uri getUriForFile(File file) {\n", "next_change": {"commit": "0bbd104b1bf17d4db67bfebb6f64c6a56acdf562", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex f921888c6..88185f633 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -248,9 +249,13 @@ public class IntentGroupTest {\n         onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n     }\n \n-    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n     private Uri createTempFile(String name, String extension) throws IOException {\n-        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n+        // Use the phones downloads dir for temp files\n+        File downloadsDir = ApplicationProvider\n+                .getApplicationContext()\n+                .getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS);\n+\n+        File file = File.createTempFile(name, extension, downloadsDir);\n         copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n         return getUriForFile(file);\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "message": "Merge commit", "committedDate": null}, {"oid": "3fe70a6c5e04d2fd95e8eb5eb8f454b9508bdadc", "committedDate": "2020-11-05 16:07:20 +0100", "message": "Fixed tests"}, {"oid": "3b08d4d357a2dcce668f57a3a2dae474a5c77fce", "committedDate": "2020-11-26 16:41:51 +0100", "message": "Fixed tests"}, {"oid": "788a0b8a51395b9ff2972f38f3227a04687854c4", "committedDate": "2020-12-01 10:22:43 +0000", "message": "Fix test missing scrolling"}, {"oid": "804cd24da5dbeec517e900d7d9e4b31c5e1ac8eb", "committedDate": "2020-12-03 15:33:32 +0100", "message": "Merge branch 'master' into COLLECT-4209"}, {"oid": "9ea40204f727949e2c3d146f5a53ab5792518f04", "committedDate": "2020-12-04 14:09:49 +0100", "message": "Fixed IntentGroupTest"}, {"oid": "cb1a1a616e8e59202c988f179a1f02e8aa3cb1bf", "committedDate": "2021-01-25 14:12:02 +0100", "message": "Improved tests for intent group"}, {"oid": "7f9a90a485292516c13cf0213f243419d993e396", "committedDate": "2021-01-25 14:17:03 +0100", "message": "Moved the new message about not granted file permission to strings"}, {"oid": "51aa28519339ee5b8da715bbb67a666f39c96643", "committedDate": "2021-01-28 14:43:45 +0100", "message": "Fixed tests"}, {"oid": "b8498278ae2294e67a99d1293be0b8b289de63e6", "committedDate": "2021-02-17 03:45:35 +0100", "message": "Removed storage permissions"}, {"oid": "c194fdbd6b02b8f05b1ed826fad11931e2a88de9", "committedDate": "2021-05-17 11:22:55 +0100", "message": "Remove any use of IntentsTestRule"}, {"oid": "ec21447a77bc864b6e1e4277ac2a8f7b10717484", "committedDate": "2021-05-26 14:16:51 +0100", "message": "Remove use of StoragePathProvider in form loading utils"}, {"oid": "0bbd104b1bf17d4db67bfebb6f64c6a56acdf562", "committedDate": "2021-10-29 15:21:49 +0100", "message": "Use downloads directory for storing test temp files"}, {"oid": "15116be7d3feeb853f7c90d5c4083aa5201de443", "committedDate": "2021-11-03 18:12:13 +0000", "message": "Always assert on form entry page when using FormActivityTestRule to avoid early interactions"}, {"oid": "da6c7b217a014a4a0491ab4f36e6fe17ebea12d5", "committedDate": "2021-11-08 12:57:47 +0000", "message": "Use correct toast assertion"}, {"oid": "805d0938a4a1bb14272ac4286006a1bde82613c5", "committedDate": "2021-11-08 13:33:39 +0000", "message": "Optimize imports"}, {"oid": "29b4ab364349d66f0165ba648bbf2f2e15531e1e", "committedDate": "2021-12-20 11:55:52 +0100", "message": "Moved RecordedIntentsRule to testshared module and resued in PermissionDeniedDialogTest"}, {"oid": "d24fbcbf7407900c7d0509ed91cd3f8c17077127", "committedDate": "2022-01-11 17:01:17 +0000", "message": "Make Geopoint dialog scrollable"}, {"oid": "0a7adc5e26a0187278a0d9b78cc91571ba31d09e", "committedDate": "2022-01-18 14:06:46 +0100", "message": "Remove CopyFormRule"}, {"oid": "fd6e73ab7504eaa956537fca25be6e70759627ee", "committedDate": "2022-01-18 17:10:53 +0100", "message": "Move initial form copy to FormActivityTestRule class"}, {"oid": "4d756215a40a11203f641b5321416e2ee3fb2e33", "committedDate": "2022-02-04 15:36:52 +0100", "message": "Move test rules to specific folder"}, {"oid": "0225485f52c099cd937ee5ab85ecd8caa78d4b61", "committedDate": "2022-02-10 21:09:43 +0100", "message": "Moved CustomMatchers to matchers package"}, {"oid": "bd353685fa7c65146f5aabb16b685234bf3fbfa3", "committedDate": "2022-02-18 13:26:23 +0000", "message": "Move android specific (nothing to do with our app) tsest helpers to a package"}, {"oid": "96699239c7aa48b8c4f2eaba71c680d355696097", "committedDate": "2022-02-18 13:42:50 +0000", "message": "Fix runtime problems caused by Robolectric being included in androidTest"}, {"oid": "a367b960425b593fbe6e6d9a911e0c28d1e44e2a", "committedDate": "2022-07-14 15:38:03 +0200", "message": "Removed redundant granting permissions in tests"}, {"oid": "b946e82b541f56e5eec8a04a52c31f59cf58fd28", "committedDate": "2023-02-06 22:05:15 +0100", "message": "Remove now unneeded NestedScrollToAction"}, {"oid": "7e06f6d1228e0a867d3b4a051d9f6ba155c3f5c3", "committedDate": "2023-02-15 16:04:29 +0100", "message": "Fixed IntentGroupTest"}, {"oid": "b2104532efd5c0157e234467fba4465b89dcf4aa", "committedDate": "2023-03-22 16:24:37 +0100", "message": "Create new rule for testing FormEntryActivity"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4OTUxNA==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r513489514", "body": "Nice! Really like this being here.", "bodyText": "Nice! Really like this being here.", "bodyHTML": "<p dir=\"auto\">Nice! Really like this being here.</p>", "author": "seadowg", "createdAt": "2020-10-28T14:29:17Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/questions/QuestionDetails.java", "diffHunk": "@@ -24,4 +30,8 @@ public FormEntryPrompt getPrompt() {\n     public String getFormAnalyticsID() {\n         return formAnalyticsID;\n     }\n+\n+    public boolean isReadOnly() {", "originalCommit": "36b39bdb62696618d9bdb437d9d6a50004c67ffd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "be84e1a5f6605ea62d6211c98bfd76a99125aac8", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/questions/QuestionDetails.java b/collect_app/src/main/java/org/odk/collect/android/formentry/questions/QuestionDetails.java\nindex 6cef5a405..8b5bb12af 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/questions/QuestionDetails.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/questions/QuestionDetails.java\n", "chunk": "@@ -27,10 +25,6 @@ public class QuestionDetails {\n         return prompt;\n     }\n \n-    public String getFormAnalyticsID() {\n-        return formAnalyticsID;\n-    }\n-\n     public boolean isReadOnly() {\n         return isReadOnly;\n     }\n", "next_change": null}]}, "commits_in_main": [{"oid": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "message": "Merge commit", "committedDate": null}, {"oid": "be84e1a5f6605ea62d6211c98bfd76a99125aac8", "committedDate": "2021-10-18 13:18:52 +0100", "message": "Remove analytics ID from question details"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ5MTA5MA==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r513491090", "body": "Could this maybe be `answerFile` or `instanceFile`? The `QuestionMediaManager` refers to these as \"answer files\". I'm frequently getting confused between files in the instance folder and files that come with the form.", "bodyText": "Could this maybe be answerFile or instanceFile? The QuestionMediaManager refers to these as \"answer files\". I'm frequently getting confused between files in the instance folder and files that come with the form.", "bodyHTML": "<p dir=\"auto\">Could this maybe be <code>answerFile</code> or <code>instanceFile</code>? The <code>QuestionMediaManager</code> refers to these as \"answer files\". I'm frequently getting confused between files in the instance folder and files that come with the form.</p>", "author": "seadowg", "createdAt": "2020-10-28T14:31:08Z", "path": "collect_app/src/main/java/org/odk/collect/android/utilities/FileUtils.java", "diffHunk": "@@ -100,6 +103,39 @@\n     private FileUtils() {\n     }\n \n+    public static void saveMediaFileFromUri(Uri uri, File destFile, Context context) {", "originalCommit": "36b39bdb62696618d9bdb437d9d6a50004c67ffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEzMDQ1OQ==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514130459", "bodyText": "Ok, done.", "author": "grzesiek2010", "createdAt": "2020-10-29T09:49:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ5MTA5MA=="}], "type": "inlineReview", "revised_code": {"commit": "53d0d807f8a401ff7c2ea79d5181ccbe3bd1515b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/utilities/FileUtils.java b/collect_app/src/main/java/org/odk/collect/android/utilities/FileUtils.java\nindex a9a6a70b3..61a374fac 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/utilities/FileUtils.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/utilities/FileUtils.java\n", "chunk": "@@ -103,39 +100,6 @@ public class FileUtils {\n     private FileUtils() {\n     }\n \n-    public static void saveMediaFileFromUri(Uri uri, File destFile, Context context) {\n-        try {\n-            ParcelFileDescriptor pfd = context.getContentResolver().openFileDescriptor(uri, \"r\");\n-            if (pfd != null) {\n-                FileDescriptor fd = pfd.getFileDescriptor();\n-                InputStream fileInputStream = new FileInputStream(fd);\n-                OutputStream fileOutputStream = new FileOutputStream(destFile);\n-\n-                byte[] buffer = new byte[1024];\n-                int length;\n-\n-                while ((length = fileInputStream.read(buffer)) > 0) {\n-                    fileOutputStream.write(buffer, 0, length);\n-                }\n-\n-                fileOutputStream.flush();\n-                fileInputStream.close();\n-                fileOutputStream.close();\n-                pfd.close();\n-            }\n-        } catch (IOException e) {\n-            Timber.w(e);\n-        }\n-    }\n-\n-    public static File createDestinationMediaFile(String fileLocation, String fileExtension) {\n-        return new File(fileLocation\n-                + File.separator\n-                + System.currentTimeMillis()\n-                + \".\"\n-                + fileExtension);\n-    }\n-\n     public static String getMimeType(String fileUrl) throws IOException {\n         FileNameMap fileNameMap = URLConnection.getFileNameMap();\n         return fileNameMap.getContentTypeFor(fileUrl);\n", "next_change": {"commit": "ad1af29dd6cc6082fa22776512225defa2f66f8c", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/utilities/FileUtils.java b/collect_app/src/main/java/org/odk/collect/android/utilities/FileUtils.java\nindex 61a374fac..a9a6a70b3 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/utilities/FileUtils.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/utilities/FileUtils.java\n", "chunk": "@@ -100,6 +103,39 @@ public class FileUtils {\n     private FileUtils() {\n     }\n \n+    public static void saveMediaFileFromUri(Uri uri, File destFile, Context context) {\n+        try {\n+            ParcelFileDescriptor pfd = context.getContentResolver().openFileDescriptor(uri, \"r\");\n+            if (pfd != null) {\n+                FileDescriptor fd = pfd.getFileDescriptor();\n+                InputStream fileInputStream = new FileInputStream(fd);\n+                OutputStream fileOutputStream = new FileOutputStream(destFile);\n+\n+                byte[] buffer = new byte[1024];\n+                int length;\n+\n+                while ((length = fileInputStream.read(buffer)) > 0) {\n+                    fileOutputStream.write(buffer, 0, length);\n+                }\n+\n+                fileOutputStream.flush();\n+                fileInputStream.close();\n+                fileOutputStream.close();\n+                pfd.close();\n+            }\n+        } catch (IOException e) {\n+            Timber.w(e);\n+        }\n+    }\n+\n+    public static File createDestinationMediaFile(String fileLocation, String fileExtension) {\n+        return new File(fileLocation\n+                + File.separator\n+                + System.currentTimeMillis()\n+                + \".\"\n+                + fileExtension);\n+    }\n+\n     public static String getMimeType(String fileUrl) throws IOException {\n         FileNameMap fileNameMap = URLConnection.getFileNameMap();\n         return fileNameMap.getContentTypeFor(fileUrl);\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/utilities/FileUtils.java b/collect_app/src/main/java/org/odk/collect/android/utilities/FileUtils.java\nindex a9a6a70b3..cee645c8c 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/utilities/FileUtils.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/utilities/FileUtils.java\n", "chunk": "@@ -103,7 +103,7 @@ public class FileUtils {\n     private FileUtils() {\n     }\n \n-    public static void saveMediaFileFromUri(Uri uri, File destFile, Context context) {\n+    public static void saveAnswerFileFromUri(Uri uri, File destFile, Context context) {\n         try {\n             ParcelFileDescriptor pfd = context.getContentResolver().openFileDescriptor(uri, \"r\");\n             if (pfd != null) {\n", "next_change": {"commit": "0d66f2240fcd39f9babec8d0e6b71801e969cb2f", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/utilities/FileUtils.java b/collect_app/src/main/java/org/odk/collect/android/utilities/FileUtils.java\nindex cee645c8c..068032d6e 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/utilities/FileUtils.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/utilities/FileUtils.java\n", "chunk": "@@ -104,27 +101,11 @@ public class FileUtils {\n     }\n \n     public static void saveAnswerFileFromUri(Uri uri, File destFile, Context context) {\n-        try {\n-            ParcelFileDescriptor pfd = context.getContentResolver().openFileDescriptor(uri, \"r\");\n-            if (pfd != null) {\n-                FileDescriptor fd = pfd.getFileDescriptor();\n-                InputStream fileInputStream = new FileInputStream(fd);\n-                OutputStream fileOutputStream = new FileOutputStream(destFile);\n-\n-                byte[] buffer = new byte[1024];\n-                int length;\n-\n-                while ((length = fileInputStream.read(buffer)) > 0) {\n-                    fileOutputStream.write(buffer, 0, length);\n-                }\n-\n-                fileOutputStream.flush();\n-                fileInputStream.close();\n-                fileOutputStream.close();\n-                pfd.close();\n-            }\n+        try (InputStream fileInputStream = context.getContentResolver().openInputStream(uri);\n+             OutputStream fileOutputStream = new FileOutputStream(destFile)) {\n+            IOUtils.copy(fileInputStream, fileOutputStream);\n         } catch (IOException e) {\n-            Timber.w(e);\n+            Timber.e(e);\n         }\n     }\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "message": "Merge commit", "committedDate": null}, {"oid": "a3fe90d057c7b4367a72632e37edb2dd84c5a8bf", "committedDate": "2020-12-16 14:00:08 -0800", "message": "Adjust log levels to reduce noise"}, {"oid": "768b62b9fdbc193a4212726bd5ff682dfdb48289", "committedDate": "2021-01-21 11:37:04 +0100", "message": "Fixed getMimeType()"}, {"oid": "0d66f2240fcd39f9babec8d0e6b71801e969cb2f", "committedDate": "2021-01-21 12:10:28 +0100", "message": "Improved saveAnswerFileFromUri method"}, {"oid": "ecbf1d5a1754de75064fd83d115911308a7619ee", "committedDate": "2021-01-21 12:14:20 +0100", "message": "Fixed pmd"}, {"oid": "cbebc6a7b54ec9143b3abf37b3db9dae2dd3ef97", "committedDate": "2021-02-03 09:56:50 -0800", "message": "Remove references to content provider URI in ServerFormDownloader"}, {"oid": "04018af35ceba45a23b16a7ca789d279b424d797", "committedDate": "2021-02-17 02:58:51 +0100", "message": "Removed support for unscoped storage"}, {"oid": "95a81d0f9d40906384ba423380983de7b4e46a45", "committedDate": "2021-03-31 17:46:11 +0100", "message": "Rename ContentResolverHelper"}, {"oid": "4b6c13bb1f0b33a531ef73f467fb7cf43c2cfdf1", "committedDate": "2021-04-13 17:11:20 +0100", "message": "Move md5 calculation to new shared module"}, {"oid": "b10d7c3586074d9d8027f06506fa8fb82c53ce5c", "committedDate": "2021-05-26 14:51:30 +0100", "message": "Remove StorageInitializer from ProjectImporter"}, {"oid": "f624b69867b316ff566e618f805a4baf67d40f52", "committedDate": "2021-06-09 15:47:08 +0100", "message": "Consolidate file utils"}, {"oid": "abd4b922f9abdd35bfe92dd56332253c0a544458", "committedDate": "2021-06-09 15:47:08 +0100", "message": "Move path utils to dedication object"}, {"oid": "0cd70bbe090543cfd4eab44f1680d61bc6336af2", "committedDate": "2021-08-18 11:48:48 +0100", "message": "Move pure Java StringUtils methods to shared module"}, {"oid": "8c433d85206206d091158eba74ec55bb3c11c4d6", "committedDate": "2021-08-24 15:31:03 +0200", "message": "Enabled UseStandardCharsets pmd rule"}, {"oid": "7a6bfc9425930998627b86e358db39b61beb2c7c", "committedDate": "2021-08-24 16:03:47 +0200", "message": "Enabled InefficientEmptyStringCheck pmd rule"}, {"oid": "23a16a4aafeab7a9bb1984bb20a7e507c62c2824", "committedDate": "2021-10-14 11:36:08 +0100", "message": "Replace FileUtils method with tested Kotlin alternative"}, {"oid": "0cc2a988196dbb5436d427db8af8437cb1d02dc0", "committedDate": "2021-10-14 11:36:12 +0100", "message": "Remove reference layer loading logic from MapsPreferencesFragment"}, {"oid": "a4c00299eb1f92e6194e67d516f998641bd13419", "committedDate": "2021-10-14 11:36:12 +0100", "message": "Make it clearer what helper is doing"}, {"oid": "147e272c1cd1de524529449a0e08407c181e3205", "committedDate": "2021-12-17 09:00:42 +0100", "message": "Handle EXIF better. Fix #4571"}, {"oid": "78145802eca862111c25d8da6da2b81ef615c007", "committedDate": "2022-01-04 14:29:55 +0100", "message": "Factored out ImageFileUtils"}, {"oid": "b01ad084ecb36f155739d172a6f1248753e53be7", "committedDate": "2022-01-04 14:33:03 +0100", "message": "Cleaned FileUtils"}, {"oid": "f6bcf579b1b81a241041826660f9d434224c6f70", "committedDate": "2022-01-13 12:00:56 +0100", "message": "Improved MediaUtils"}, {"oid": "870b629073e54c1f9e9a05cb7b13cc9a7f27e46d", "committedDate": "2022-01-17 10:10:02 +0100", "message": "Merge branch 'master' into COLLECT-4954"}, {"oid": "345aa6d7d026824696f75ab3c9e391150e94195a", "committedDate": "2022-02-03 14:18:23 +0100", "message": "Get rid of TranslationHandler"}, {"oid": "e6eaf3030d1b787b0c633b999cd8969db966c159", "committedDate": "2022-02-11 14:06:27 +0000", "message": "Move interruptable file write out of ServerFormDownloader"}, {"oid": "d479e65654fe51cf3c77b36407a6e246b0be1bb3", "committedDate": "2022-08-23 14:20:09 +0200", "message": "Fixed logging errors"}, {"oid": "a74885330397380373259d2ea644f296cac68597", "committedDate": "2022-11-08 20:29:15 +0100", "message": "Create entities for forms with entity block"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ5MTg0MQ==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r513491841", "body": "This could maybe use the `QuestionMediaManager` in some way. I've ended up playing with that in #4190 so might be better to come back fro that later!", "bodyText": "This could maybe use the QuestionMediaManager in some way. I've ended up playing with that in #4190 so might be better to come back fro that later!", "bodyHTML": "<p dir=\"auto\">This could maybe use the <code>QuestionMediaManager</code> in some way. I've ended up playing with that in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"731358125\" data-permission-text=\"Title is private\" data-url=\"https://github.com/getodk/collect/issues/4190\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/getodk/collect/pull/4190/hovercard\" href=\"https://github.com/getodk/collect/pull/4190\">#4190</a> so might be better to come back fro that later!</p>", "author": "seadowg", "createdAt": "2020-10-28T14:32:08Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java", "diffHunk": "@@ -475,40 +483,70 @@ public void scrollTo(@Nullable QuestionWidget qw) {\n     /**\n      * Saves answers for the widgets in this view. Called when the widgets are in an intent group.\n      */\n-    public void setDataForFields(Bundle bundle) throws JavaRosaException {\n-        if (bundle == null) {\n+    public void setDataForFields(Bundle bundle, ClipData clipData) throws JavaRosaException {\n+        FormController formController = Collect.getInstance().getFormController();\n+        if (formController == null) {\n             return;\n         }\n-        FormController formController = Collect.getInstance().getFormController();\n-        Set<String> keys = bundle.keySet();\n-        for (String key : keys) {\n-            for (QuestionWidget questionWidget : widgets) {\n-                FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n-                TreeReference treeReference =\n-                        (TreeReference) prompt.getFormElement().getBind().getReference();\n-\n-                if (treeReference.getNameLast().equals(key)) {\n-                    switch (prompt.getDataType()) {\n-                        case Constants.DATATYPE_TEXT:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asStringData(bundle.get(key)));\n-                            break;\n-                        case Constants.DATATYPE_INTEGER:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asIntegerData(bundle.get(key)));\n-                            break;\n-                        case Constants.DATATYPE_DECIMAL:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asDecimalData(bundle.get(key)));\n-                            break;\n-                        default:\n-                            throw new RuntimeException(\n-                                    getContext().getString(R.string.ext_assign_value_error,\n-                                            treeReference.toString(false)));\n+\n+        if (bundle != null) {\n+            Set<String> keys = bundle.keySet();\n+            for (String key : keys) {\n+                for (QuestionWidget questionWidget : widgets) {\n+                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n+                    TreeReference treeReference =\n+                            (TreeReference) prompt.getFormElement().getBind().getReference();\n+\n+                    if (treeReference.getNameLast().equals(key)) {\n+                        switch (prompt.getDataType()) {\n+                            case Constants.DATATYPE_TEXT:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asStringData(bundle.get(key)));\n+                                break;\n+                            case Constants.DATATYPE_INTEGER:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asIntegerData(bundle.get(key)));\n+                                break;\n+                            case Constants.DATATYPE_DECIMAL:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asDecimalData(bundle.get(key)));\n+                                break;\n+                            default:\n+                                throw new RuntimeException(\n+                                        getContext().getString(R.string.ext_assign_value_error,\n+                                                treeReference.toString(false)));\n+                        }\n+\n+                        ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                        break;\n                     }\n+                }\n+            }\n+        }\n+\n+        if (clipData != null) {\n+            for (int i = 0; i < clipData.getItemCount(); i++) {\n+                CharSequence key = clipData.getItemAt(i).getText();\n+                if (key == null) {\n+                    continue;\n+                }\n \n-                    ((StringWidget) questionWidget).setDisplayValueFromModel();\n-                    break;\n+                for (QuestionWidget questionWidget : widgets) {\n+                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n+\n+                    if (FormEntryPromptUtils.getQuestionName(prompt).equals(key.toString())\n+                            && prompt.getDataType() == Constants.DATATYPE_BINARY) {\n+                        Uri uri = clipData.getItemAt(i).getUri();\n+                        if (uri != null) {\n+                            try {\n+                                File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n+                                FileUtils.saveMediaFileFromUri(uri, destFile, getContext());", "originalCommit": "36b39bdb62696618d9bdb437d9d6a50004c67ffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEzMzE1Mw==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514133153", "bodyText": "That might be a good idea, I've added a TODO comment to improve it later.", "author": "grzesiek2010", "createdAt": "2020-10-29T09:53:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ5MTg0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "53d0d807f8a401ff7c2ea79d5181ccbe3bd1515b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 5715d7f7a..441dfb613 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -483,70 +469,40 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n     /**\n      * Saves answers for the widgets in this view. Called when the widgets are in an intent group.\n      */\n-    public void setDataForFields(Bundle bundle, ClipData clipData) throws JavaRosaException {\n-        FormController formController = Collect.getInstance().getFormController();\n-        if (formController == null) {\n+    public void setDataForFields(Bundle bundle) throws JavaRosaException {\n+        if (bundle == null) {\n             return;\n         }\n-\n-        if (bundle != null) {\n-            Set<String> keys = bundle.keySet();\n-            for (String key : keys) {\n-                for (QuestionWidget questionWidget : widgets) {\n-                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n-                    TreeReference treeReference =\n-                            (TreeReference) prompt.getFormElement().getBind().getReference();\n-\n-                    if (treeReference.getNameLast().equals(key)) {\n-                        switch (prompt.getDataType()) {\n-                            case Constants.DATATYPE_TEXT:\n-                                formController.saveAnswer(prompt.getIndex(),\n-                                        ExternalAppsUtils.asStringData(bundle.get(key)));\n-                                break;\n-                            case Constants.DATATYPE_INTEGER:\n-                                formController.saveAnswer(prompt.getIndex(),\n-                                        ExternalAppsUtils.asIntegerData(bundle.get(key)));\n-                                break;\n-                            case Constants.DATATYPE_DECIMAL:\n-                                formController.saveAnswer(prompt.getIndex(),\n-                                        ExternalAppsUtils.asDecimalData(bundle.get(key)));\n-                                break;\n-                            default:\n-                                throw new RuntimeException(\n-                                        getContext().getString(R.string.ext_assign_value_error,\n-                                                treeReference.toString(false)));\n-                        }\n-\n-                        ((StringWidget) questionWidget).setDisplayValueFromModel();\n-                        break;\n+        FormController formController = Collect.getInstance().getFormController();\n+        Set<String> keys = bundle.keySet();\n+        for (String key : keys) {\n+            for (QuestionWidget questionWidget : widgets) {\n+                FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n+                TreeReference treeReference =\n+                        (TreeReference) prompt.getFormElement().getBind().getReference();\n+\n+                if (treeReference.getNameLast().equals(key)) {\n+                    switch (prompt.getDataType()) {\n+                        case Constants.DATATYPE_TEXT:\n+                            formController.saveAnswer(prompt.getIndex(),\n+                                    ExternalAppsUtils.asStringData(bundle.get(key)));\n+                            break;\n+                        case Constants.DATATYPE_INTEGER:\n+                            formController.saveAnswer(prompt.getIndex(),\n+                                    ExternalAppsUtils.asIntegerData(bundle.get(key)));\n+                            break;\n+                        case Constants.DATATYPE_DECIMAL:\n+                            formController.saveAnswer(prompt.getIndex(),\n+                                    ExternalAppsUtils.asDecimalData(bundle.get(key)));\n+                            break;\n+                        default:\n+                            throw new RuntimeException(\n+                                    getContext().getString(R.string.ext_assign_value_error,\n+                                            treeReference.toString(false)));\n                     }\n-                }\n-            }\n-        }\n \n-        if (clipData != null) {\n-            for (int i = 0; i < clipData.getItemCount(); i++) {\n-                CharSequence key = clipData.getItemAt(i).getText();\n-                if (key == null) {\n-                    continue;\n-                }\n-\n-                for (QuestionWidget questionWidget : widgets) {\n-                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n-\n-                    if (FormEntryPromptUtils.getQuestionName(prompt).equals(key.toString())\n-                            && prompt.getDataType() == Constants.DATATYPE_BINARY) {\n-                        Uri uri = clipData.getItemAt(i).getUri();\n-                        if (uri != null) {\n-                            try {\n-                                File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n-                                FileUtils.saveMediaFileFromUri(uri, destFile, getContext());\n-                                ((WidgetDataReceiver) questionWidget).setData(destFile);\n-                            } catch (SecurityException e) {\n-                                Timber.w(e);\n-                            }\n-                        }\n-                    }\n+                    ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                    break;\n                 }\n             }\n         }\n", "next_change": {"commit": "ad1af29dd6cc6082fa22776512225defa2f66f8c", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 441dfb613..647f78e83 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -469,40 +477,66 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n     /**\n      * Saves answers for the widgets in this view. Called when the widgets are in an intent group.\n      */\n-    public void setDataForFields(Bundle bundle) throws JavaRosaException {\n-        if (bundle == null) {\n+    public void setDataForFields(Bundle bundle, ClipData clipData) throws JavaRosaException {\n+        FormController formController = Collect.getInstance().getFormController();\n+        if (formController == null) {\n             return;\n         }\n-        FormController formController = Collect.getInstance().getFormController();\n-        Set<String> keys = bundle.keySet();\n-        for (String key : keys) {\n-            for (QuestionWidget questionWidget : widgets) {\n-                FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n-                TreeReference treeReference =\n-                        (TreeReference) prompt.getFormElement().getBind().getReference();\n-\n-                if (treeReference.getNameLast().equals(key)) {\n-                    switch (prompt.getDataType()) {\n-                        case Constants.DATATYPE_TEXT:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asStringData(bundle.get(key)));\n-                            break;\n-                        case Constants.DATATYPE_INTEGER:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asIntegerData(bundle.get(key)));\n-                            break;\n-                        case Constants.DATATYPE_DECIMAL:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asDecimalData(bundle.get(key)));\n-                            break;\n-                        default:\n-                            throw new RuntimeException(\n-                                    getContext().getString(R.string.ext_assign_value_error,\n-                                            treeReference.toString(false)));\n+\n+        if (bundle != null) {\n+            Set<String> keys = bundle.keySet();\n+            for (String key : keys) {\n+                for (QuestionWidget questionWidget : widgets) {\n+                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n+                    TreeReference treeReference =\n+                            (TreeReference) prompt.getFormElement().getBind().getReference();\n+\n+                    if (treeReference.getNameLast().equals(key)) {\n+                        switch (prompt.getDataType()) {\n+                            case Constants.DATATYPE_TEXT:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asStringData(bundle.get(key)));\n+                                break;\n+                            case Constants.DATATYPE_INTEGER:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asIntegerData(bundle.get(key)));\n+                                break;\n+                            case Constants.DATATYPE_DECIMAL:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asDecimalData(bundle.get(key)));\n+                                break;\n+                            default:\n+                                throw new RuntimeException(\n+                                        getContext().getString(R.string.ext_assign_value_error,\n+                                                treeReference.toString(false)));\n+                        }\n+\n+                        ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                        break;\n                     }\n+                }\n+            }\n+        }\n+\n+        if (clipData != null) {\n+            for (int i = 0; i < clipData.getItemCount(); i++) {\n+                CharSequence key = clipData.getItemAt(i).getText();\n+                if (key == null) {\n+                    continue;\n+                }\n \n-                    ((StringWidget) questionWidget).setDisplayValueFromModel();\n-                    break;\n+                for (QuestionWidget questionWidget : widgets) {\n+                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n+\n+                    if (FormEntryPromptUtils.getQuestionName(prompt).equals(key.toString())\n+                            && prompt.getDataType() == Constants.DATATYPE_BINARY) {\n+                        Uri uri = clipData.getItemAt(i).getUri();\n+                        if (uri != null) {\n+                            File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n+                            FileUtils.saveMediaFileFromUri(uri, destFile, getContext());\n+                            ((WidgetDataReceiver) questionWidget).setData(destFile);\n+                        }\n+                    }\n                 }\n             }\n         }\n", "next_change": {"commit": "f3e12da2c903871b5f2a29c57b510560eab81cf0", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 647f78e83..71ac9930e 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -532,9 +532,13 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                             && prompt.getDataType() == Constants.DATATYPE_BINARY) {\n                         Uri uri = clipData.getItemAt(i).getUri();\n                         if (uri != null) {\n-                            File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n-                            FileUtils.saveMediaFileFromUri(uri, destFile, getContext());\n-                            ((WidgetDataReceiver) questionWidget).setData(destFile);\n+                            try {\n+                                File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n+                                FileUtils.saveMediaFileFromUri(uri, destFile, getContext());\n+                                ((WidgetDataReceiver) questionWidget).setData(destFile);\n+                            } catch (SecurityException e) {\n+                                Timber.w(e);\n+                            }\n                         }\n                     }\n                 }\n", "next_change": {"commit": "0be7b76be1b8313967b68ce2c05aa6e4374feadf", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 71ac9930e..96b8f2510 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -534,7 +534,7 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                         if (uri != null) {\n                             try {\n                                 File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n-                                FileUtils.saveMediaFileFromUri(uri, destFile, getContext());\n+                                FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n                                 ((WidgetDataReceiver) questionWidget).setData(destFile);\n                             } catch (SecurityException e) {\n                                 Timber.w(e);\n", "next_change": {"commit": "bf455d711eba941af42004336856fee48de440e6", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 96b8f2510..0d164748e 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -534,6 +534,7 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                         if (uri != null) {\n                             try {\n                                 File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n+                                //TODO might be better to use QuestionMediaManager in the future\n                                 FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n                                 ((WidgetDataReceiver) questionWidget).setData(destFile);\n                             } catch (SecurityException e) {\n", "next_change": {"commit": "e82a1a1f599bbe0055be67c6b580eb1687c44d64", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 0d164748e..fb55f7e2d 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -496,55 +494,43 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                             case Constants.DATATYPE_TEXT:\n                                 formController.saveAnswer(prompt.getIndex(),\n                                         ExternalAppsUtils.asStringData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n                                 break;\n                             case Constants.DATATYPE_INTEGER:\n                                 formController.saveAnswer(prompt.getIndex(),\n                                         ExternalAppsUtils.asIntegerData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n                                 break;\n                             case Constants.DATATYPE_DECIMAL:\n                                 formController.saveAnswer(prompt.getIndex(),\n                                         ExternalAppsUtils.asDecimalData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                                break;\n+                            case Constants.DATATYPE_BINARY:\n+                                try {\n+                                    Uri uri = (Uri) bundle.get(key);\n+                                    try {\n+                                        File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n+                                        //TODO might be better to use QuestionMediaManager in the future\n+                                        FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n+                                        ((WidgetDataReceiver) questionWidget).setData(destFile);\n+                                    } catch (SecurityException e) {\n+                                        Timber.w(e);\n+                                    }\n+                                } catch (ClassCastException e) {\n+                                    Timber.w(e);\n+                                }\n                                 break;\n                             default:\n                                 throw new RuntimeException(\n                                         getContext().getString(R.string.ext_assign_value_error,\n                                                 treeReference.toString(false)));\n                         }\n-\n-                        ((StringWidget) questionWidget).setDisplayValueFromModel();\n                         break;\n                     }\n                 }\n             }\n         }\n-\n-        if (clipData != null) {\n-            for (int i = 0; i < clipData.getItemCount(); i++) {\n-                CharSequence key = clipData.getItemAt(i).getText();\n-                if (key == null) {\n-                    continue;\n-                }\n-\n-                for (QuestionWidget questionWidget : widgets) {\n-                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n-\n-                    if (FormEntryPromptUtils.getQuestionName(prompt).equals(key.toString())\n-                            && prompt.getDataType() == Constants.DATATYPE_BINARY) {\n-                        Uri uri = clipData.getItemAt(i).getUri();\n-                        if (uri != null) {\n-                            try {\n-                                File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n-                                //TODO might be better to use QuestionMediaManager in the future\n-                                FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n-                                ((WidgetDataReceiver) questionWidget).setData(destFile);\n-                            } catch (SecurityException e) {\n-                                Timber.w(e);\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n     }\n \n     public boolean suppressFlingGesture(MotionEvent e1, MotionEvent e2, float velocityX,\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 5715d7f7a..56066711a 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -502,54 +494,41 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                             case Constants.DATATYPE_TEXT:\n                                 formController.saveAnswer(prompt.getIndex(),\n                                         ExternalAppsUtils.asStringData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n                                 break;\n                             case Constants.DATATYPE_INTEGER:\n                                 formController.saveAnswer(prompt.getIndex(),\n                                         ExternalAppsUtils.asIntegerData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n                                 break;\n                             case Constants.DATATYPE_DECIMAL:\n                                 formController.saveAnswer(prompt.getIndex(),\n                                         ExternalAppsUtils.asDecimalData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                                break;\n+                            case Constants.DATATYPE_BINARY:\n+                                try {\n+                                    Uri uri = (Uri) bundle.get(key);\n+                                    if (uri != null) {\n+                                        File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n+                                        //TODO might be better to use QuestionMediaManager in the future\n+                                        FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n+                                        ((WidgetDataReceiver) questionWidget).setData(destFile);\n+                                    }\n+                                } catch (Exception | Error e) {\n+                                    Timber.w(e);\n+                                }\n                                 break;\n                             default:\n                                 throw new RuntimeException(\n                                         getContext().getString(R.string.ext_assign_value_error,\n                                                 treeReference.toString(false)));\n                         }\n-\n-                        ((StringWidget) questionWidget).setDisplayValueFromModel();\n                         break;\n                     }\n                 }\n             }\n         }\n-\n-        if (clipData != null) {\n-            for (int i = 0; i < clipData.getItemCount(); i++) {\n-                CharSequence key = clipData.getItemAt(i).getText();\n-                if (key == null) {\n-                    continue;\n-                }\n-\n-                for (QuestionWidget questionWidget : widgets) {\n-                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n-\n-                    if (FormEntryPromptUtils.getQuestionName(prompt).equals(key.toString())\n-                            && prompt.getDataType() == Constants.DATATYPE_BINARY) {\n-                        Uri uri = clipData.getItemAt(i).getUri();\n-                        if (uri != null) {\n-                            try {\n-                                File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n-                                FileUtils.saveMediaFileFromUri(uri, destFile, getContext());\n-                                ((WidgetDataReceiver) questionWidget).setData(destFile);\n-                            } catch (SecurityException e) {\n-                                Timber.w(e);\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n     }\n \n     public boolean suppressFlingGesture(MotionEvent e1, MotionEvent e2, float velocityX,\n", "next_change": {"commit": "e703b34fe9a8587394d207cb4714aac262f4feaf", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 56066711a..d5ec487c8 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -531,16 +564,23 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n         }\n     }\n \n-    public boolean suppressFlingGesture(MotionEvent e1, MotionEvent e2, float velocityX,\n-                                        float velocityY) {\n+    @Override\n+    public boolean shouldSuppressFlingGesture(MotionEvent e1, MotionEvent e2, float velocityX,\n+                                              float velocityY) {\n         for (QuestionWidget q : widgets) {\n-            if (q.suppressFlingGesture(e1, e2, velocityX, velocityY)) {\n+            if (q.shouldSuppressFlingGesture(e1, e2, velocityX, velocityY)) {\n                 return true;\n             }\n         }\n         return false;\n     }\n \n+    @Nullable\n+    @Override\n+    public NestedScrollView getVerticalScrollView() {\n+        return findViewById(R.id.odk_view_container);\n+    }\n+\n     /**\n      * @return true if the answer was cleared, false otherwise.\n      */\n", "next_change": {"commit": "3b7c5744654d8cb7c08997747a2857fbf64273c0", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex d5ec487c8..5fb1ce437 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -577,7 +567,7 @@ public class ODKView extends SwipeHandler.View implements OnLongClickListener, W\n \n     @Nullable\n     @Override\n-    public NestedScrollView getVerticalScrollView() {\n+    public NestedScrollView verticalScrollView() {\n         return findViewById(R.id.odk_view_container);\n     }\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "message": "Merge commit", "committedDate": null}, {"oid": "0337d67b98f0cddee876ee7c7dc234edd09f97e7", "committedDate": "2020-11-05 09:11:50 -0800", "message": "Add support for launching apps without DEFAULT category"}, {"oid": "26b842e1c8e03ee27f0237fad77455dccfd66e29", "committedDate": "2020-11-05 09:14:41 -0800", "message": "Allow string or Uri for binary extra"}, {"oid": "e9ae68ea6743b1b2c978a674e80f69dd4ebb1d18", "committedDate": "2020-11-06 16:16:15 +0000", "message": "Use fake audio recorder view model in test to prevent timing issues"}, {"oid": "d56020ba830f3198bfa70c8b443ad144af919594", "committedDate": "2020-11-09 10:25:15 -0800", "message": "Handle null launch intent"}, {"oid": "9f32a8160b865be15a319b9dfeb281ebe474eae3", "committedDate": "2020-11-13 11:13:52 +0000", "message": "Use external recording when specified in form"}, {"oid": "e310e2a9f176afbfc086b95370e92e821eaa0223", "committedDate": "2020-11-13 11:13:52 +0000", "message": "Allow enabling external recorder from settings"}, {"oid": "4853ea1c4205d775452fb88e688d040e1fc54762", "committedDate": "2020-11-13 11:15:44 +0000", "message": "Make sure form quality param overrides setting"}, {"oid": "7cd0f0d8bded0a0f7af8bd6170bc56d1a08507b8", "committedDate": "2020-11-13 11:15:44 +0000", "message": "Make WidgetFactory an instance in ODKView"}, {"oid": "050396ae7487716e13731adbf6d6453ad9f2608d", "committedDate": "2020-11-17 12:02:44 +0100", "message": "Merge pull request #4208 from lognaturel/explicit-intents"}, {"oid": "6096f02f03d6d11421a2e8a011141f906a89bcb6", "committedDate": "2020-11-17 15:15:47 +0000", "message": "Remove state saving from widgets"}, {"oid": "7dc03450602c1f0e414656afa929cc40b4af0efc", "committedDate": "2020-11-19 12:11:33 +0100", "message": "Got rid of recycling drawables"}, {"oid": "95312a78129f78a0823b00721f0c19ae9e531a12", "committedDate": "2020-11-24 13:50:47 +0100", "message": "Merge branch 'master' into COLLECT-4205"}, {"oid": "41547dd642a56736049fdf46c93516755eed9c0a", "committedDate": "2020-11-26 13:50:16 +0100", "message": "Added spacing for read-only widgets"}, {"oid": "30628c40d553bbf9c8cebd785e84ab4f3251d2e3", "committedDate": "2020-11-26 13:50:18 +0100", "message": "Code improvements"}, {"oid": "b652335ebffea0783431e4aaa61f742dae06a5f5", "committedDate": "2020-12-01 17:48:58 +0000", "message": "Make external recording the default"}, {"oid": "804cd24da5dbeec517e900d7d9e4b31c5e1ac8eb", "committedDate": "2020-12-03 15:33:32 +0100", "message": "Merge branch 'master' into COLLECT-4209"}, {"oid": "7976a9b08bfada69ffb5dc85b8c627bf02ce61e5", "committedDate": "2020-12-09 16:09:45 +0000", "message": "Move URL question analytics out of WidgetFactory"}, {"oid": "1674c3546cfbcf1d2df8b417d4838eda4e649b2c", "committedDate": "2020-12-09 16:11:59 +0000", "message": "Add analytics event when audio question is shown"}, {"oid": "4a474d3e5a5c06ca9754d2581ca263188b67c943", "committedDate": "2020-12-09 16:46:29 +0000", "message": "Use viewmodel for event"}, {"oid": "9a7ce13ed172cd5258804dc4e05d345413d0a2ee", "committedDate": "2020-12-09 18:37:45 +0000", "message": "Log analytics events when recording or choosing audio"}, {"oid": "333c78ee2dd3303701a1b29a16124e6655ffe32a", "committedDate": "2020-12-10 11:41:51 +0000", "message": "Log analytics event when question answered during recording"}, {"oid": "71f6782c1ace906c438f70119e6be81b430ca051", "committedDate": "2020-12-10 16:27:50 +0000", "message": "Remove Audio question event and use new style for URL question event"}, {"oid": "f519e6763008e5f7d62fc5a7143c2b8c294765e5", "committedDate": "2021-01-14 11:19:28 +0100", "message": "Use injected permissionUtils"}, {"oid": "265c183e8343092e89ec8d0c2ae47c9c22cd5119", "committedDate": "2021-01-14 11:20:18 +0100", "message": "Moved permissionUtils class to permissions package"}, {"oid": "e7d97823a196718baf07a48ef8ced5e6211dc991", "committedDate": "2021-01-14 11:20:18 +0100", "message": "Renamed PermissionUtils -> PermissionsProvider"}, {"oid": "32734194499287365954afcc86f08840f1a04600", "committedDate": "2021-01-19 21:58:47 +0100", "message": "Remove unused code"}, {"oid": "57909eb117e74aa77a3a0937aec068bfe9359975", "committedDate": "2021-01-25 14:05:55 +0100", "message": "Check Uri permission before accesing it in ODKView"}, {"oid": "7f9a90a485292516c13cf0213f243419d993e396", "committedDate": "2021-01-25 14:17:03 +0100", "message": "Moved the new message about not granted file permission to strings"}, {"oid": "e0b4a3f3e61a466debd283d232689e345b34d306", "committedDate": "2021-01-28 13:30:49 +0100", "message": "Use requestReadUriPermission() wherever uri from external app is accessed"}, {"oid": "2e2f32e6874b4fb1248303622e673e9c3761f5cf", "committedDate": "2021-01-28 09:42:10 -0800", "message": "Group appearance constants"}, {"oid": "94b779188a11065426c37edde5439c424e63cef5", "committedDate": "2021-02-01 12:48:09 +0100", "message": "Merge pull request #4366 from grzesiek2010/COLLECT-4360"}, {"oid": "bb0aa64d40d4e92eb5d325e289bcdde9154ddf88", "committedDate": "2021-02-01 13:01:16 +0000", "message": "Move audio file save code out of requester"}, {"oid": "d23c0da7012581b8dd8728912740258c37fde5df", "committedDate": "2021-02-01 13:11:38 +0000", "message": "Separate out recording status and requesting"}, {"oid": "f34b7e6d914273c0600a1d8e9d238698ff8b6a09", "committedDate": "2021-02-01 13:11:39 +0000", "message": "Initialize recording requesters at the Activity level"}, {"oid": "6b8dad666617567d96622dccb9d4ed46820d2a70", "committedDate": "2021-02-02 13:49:31 +0000", "message": "AudioRecorder doesn't need to be ViewModel"}, {"oid": "bf93185e75aee490c776a17fce100231e7e06e8c", "committedDate": "2021-03-03 17:04:14 +0000", "message": "Move analytics code to module"}, {"oid": "c550da1522fa27a36d976abecfd61034d1c832e3", "committedDate": "2021-03-05 10:32:55 +0100", "message": "Use PreferencesRepository in rest of the places where it wasn't used"}, {"oid": "34749e0dffaad4eebc462bef087a939e1749f1d9", "committedDate": "2021-03-08 16:32:01 +0100", "message": "Naming improvements"}, {"oid": "35b9c88e857a197786cb85b07aa0ed19a093c3f9", "committedDate": "2021-03-09 15:17:48 +0100", "message": "Created a separate package for keys"}, {"oid": "321a9160bcd76f6420cbcddf7fdac3010607f68e", "committedDate": "2021-03-09 15:31:19 +0100", "message": "Moved related classes to source package"}, {"oid": "6b1642fff021192ae2966fc9a01419a809e54ebf", "committedDate": "2021-03-15 12:45:59 +0100", "message": "Renaming"}, {"oid": "95a81d0f9d40906384ba423380983de7b4e46a45", "committedDate": "2021-03-31 17:46:11 +0100", "message": "Rename ContentResolverHelper"}, {"oid": "72d8d2d33bc3977ff62f5ca16bdfaf95b00b105d", "committedDate": "2021-06-10 12:24:17 +0100", "message": "Remove SuppressWarnings for warning we are ignoring"}, {"oid": "f18fea689d475a98214200ba8bc2cc25e5c1ee7d", "committedDate": "2021-07-17 13:00:12 +0100", "message": "Rename packages"}, {"oid": "797510c658ce8521ce4205a32529bee22fda41cb", "committedDate": "2021-07-27 08:06:02 -0700", "message": "Centralize logic for settings visibility, improve naming (#4731)"}, {"oid": "d8c2c10c7292ef8aa5d4c1644398053d645c3505", "committedDate": "2021-08-05 17:03:34 +0100", "message": "Remove logFormEvent from interface"}, {"oid": "c2cfa4063a4ed5f2a15495a579773fb9a31d47e3", "committedDate": "2021-08-16 21:26:34 +0200", "message": "Removed logging 'URLQuestion'"}, {"oid": "6c7b9a5733dc90215761f1e2112e1cd925690aaa", "committedDate": "2021-08-16 22:03:08 +0200", "message": "Removed logging 'Prompt'"}, {"oid": "564cdba7fc546bbda42b41b95123c591b38ec740", "committedDate": "2021-09-02 15:20:49 +0100", "message": "Remove colors.xml - leave map colors in place for now"}, {"oid": "cc776c8bca22e0ca72461a0be82143dcf6e434c7", "committedDate": "2021-09-22 12:08:57 +0100", "message": "Remove Collect.getInstance() from ToastUtils"}, {"oid": "bf0468a88e2d6914dd85c8024c082176125c32cc", "committedDate": "2021-09-22 12:32:36 +0100", "message": "Move ToastUtils to androidshared"}, {"oid": "db2aeec6995d6726240db94908201ca7cae6195f", "committedDate": "2021-09-24 14:18:40 +0100", "message": "Remove accidently added calls to Collect.getInstance()"}, {"oid": "75b99e8a99ded8f8ae3fff296934c62e6dea40dd", "committedDate": "2021-10-20 12:09:50 +0100", "message": "Move PermissionsChecker and rearrange packages in androidshared"}, {"oid": "05810bcd814cb46c8510b2be9693a335febf77ba", "committedDate": "2021-10-29 09:42:17 +0200", "message": "Fixed ExVideoWidget to use the new methods from ExternalAppIntentProvider"}, {"oid": "ae66398caa3bb569b646142da2bc642e8570fb16", "committedDate": "2021-10-29 09:42:18 +0200", "message": "Pass IntentLauncher and ExternalAppIntentProvider to FileRequester and StringReuqester via constructor"}, {"oid": "6a440ab90b7bcc15e49ffbb5b6d78d70e32a8f49", "committedDate": "2021-11-08 09:33:33 +0100", "message": "Fixed method names that contained 'general settings'"}, {"oid": "8d65feb6230a1caf534a59711e7f9009ec5489cb", "committedDate": "2021-12-20 11:55:52 +0100", "message": "Moved PermissionListener to permissions module"}, {"oid": "9f0f31d050677e9e967c8a24846440e9f4b0a8fd", "committedDate": "2021-12-20 11:55:52 +0100", "message": "Moved PermissionsProvider to permissions module"}, {"oid": "fa52f4ff73001955d4f8bc1c1fafbc5aed824479", "committedDate": "2021-12-29 11:41:43 +0000", "message": "Switch between geopoint implementations with experimental setting"}, {"oid": "d98ef16bdb52334bdab29474be3097565d4fd9b0", "committedDate": "2022-01-12 13:50:24 +0000", "message": "Use new geo point instead of old one"}, {"oid": "eb2468458dc0640284defafa3c7944af533705e7", "committedDate": "2022-02-16 10:01:36 +0000", "message": "Collect all settings code in one place"}, {"oid": "a1b708864d35e2acaecd21ae3a4d3ed91b41843b", "committedDate": "2022-02-16 10:13:53 +0000", "message": "Move project and meta keys to new module"}, {"oid": "61f3558b9e1121cc447b374e0a6990e1d33d691a", "committedDate": "2022-02-16 10:13:55 +0000", "message": "Move SettingsImporter to settings module"}, {"oid": "f9b2a11aecb26c2e18a2d12ad071726e111bdc76", "committedDate": "2022-02-16 10:13:56 +0000", "message": "Reorganize settings module"}, {"oid": "3096102a66699e33f4c06cb4741bc17f68ed4837", "committedDate": "2022-04-26 13:03:16 +0200", "message": "Removed AnswerWhileRecording"}, {"oid": "84e5c77b91e5c600063cfef33c60f27f592181fb", "committedDate": "2022-04-26 20:08:00 +0200", "message": "Fixed styling group names"}, {"oid": "3022bd31e5255e7242067d1485dc6b88a4ab0ec0", "committedDate": "2022-05-16 10:12:55 +0200", "message": "Merge pull request #5064 from grzesiek2010/COLLECT-4822"}, {"oid": "e703b34fe9a8587394d207cb4714aac262f4feaf", "committedDate": "2022-06-29 11:08:29 +0200", "message": "Fix non OdkViews not being set on SwipeHandler"}, {"oid": "831d7e0dab94758e2bc3448889aab71b85c5e1ef", "committedDate": "2022-09-13 14:32:57 +0200", "message": "Added defaylt implementation for PermissionListener#denied() to avoid overriding when not needed"}, {"oid": "2a13a61f1f8cfb802f1d5efc9d5bf4efa4c5aa01", "committedDate": "2022-09-28 14:16:52 +0100", "message": "Remove simple cases of getFormController() in widgets"}, {"oid": "95d26019fa068795581058c9d399f1873185e22f", "committedDate": "2022-09-28 14:35:23 +0100", "message": "Remove getFormController from external app code"}, {"oid": "821b465f35b66f113ae958247cbe1e157630af79", "committedDate": "2022-12-12 21:27:03 +0100", "message": "Removed unused parameters from shouldSuppressFlingGesture"}, {"oid": "63b09ed937fddb3c99a814dbce3aa5d9e4ff6ed1", "committedDate": "2023-03-09 09:01:48 -0800", "message": "Create on view model factory for form entry"}, {"oid": "52896771dc8adda88a64150a2eb07a6bf3bb3187", "committedDate": "2023-04-16 21:43:37 +0200", "message": "Moved SwipeHandler to formentry package"}, {"oid": "3b7c5744654d8cb7c08997747a2857fbf64273c0", "committedDate": "2023-04-28 15:36:45 +0200", "message": "Fixed conflicts"}]}, {"oid": "d403b9d6b64ceda33509bcd991a85ffefd95121b", "url": "https://github.com/getodk/collect/commit/d403b9d6b64ceda33509bcd991a85ffefd95121b", "message": "Improved tests", "committedDate": "2020-10-29T09:43:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM1NzY3NA==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514357674", "body": "Out of interest did you need the parent (`new File(\"/sdcard\")`) here? I was under the impression we could just create a file outright and Android handles it.", "bodyText": "Out of interest did you need the parent (new File(\"/sdcard\")) here? I was under the impression we could just create a file outright and Android handles it.", "bodyHTML": "<p dir=\"auto\">Out of interest did you need the parent (<code>new File(\"/sdcard\")</code>) here? I was under the impression we could just create a file outright and Android handles it.</p>", "author": "seadowg", "createdAt": "2020-10-29T15:37:40Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java", "diffHunk": "@@ -80,17 +92,67 @@ public void appMissingErrorText_ShouldComeFromSpecialFormText() {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() {\n+    public void externalApp_ShouldPopulateFields() throws IOException {\n+        // Check ImageWidget without answer\n+        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+\n+        // Check AudioWidget without answer\n+        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n+\n+        // Check VideoWidget without answer\n+        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n+\n+        // Check ArbitraryFileWidget without answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+\n         Intent resultIntent = new Intent();\n-        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        int randomInteger = (new Random()).nextInt(255);\n-        resultIntent.putExtra(\"someinteger\", randomInteger);\n+        resultIntent.putExtra(\"questionInteger\", \"25\");\n+        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n+        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n \n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, createTempFile(\"famous\", \"jpg\")));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, createTempFile(\"sampleAudio\", \"wav\")));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, createTempFile(\"sampleVideo\", \"mp4\")));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, createTempFile(\"fruits\", \"csv\")));\n+\n+        resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withText(\"Here is a text value\")).check(matches(isDisplayed()));\n-        onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n+        // Check StringWidgets with answers\n+        onView(withText(\"25\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"46.74\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"sampleAnswer\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+\n+        // Check ImageWidget with answer\n+        onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+\n+        // Check AudioWidget with answer\n+        onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+\n+        // Check VideoWidget with answer\n+        onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n+\n+        // Check ArbitraryFileWidget with answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+    }\n+\n+    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n+    private Uri createTempFile(String name, String extension) throws IOException {\n+        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));", "originalCommit": "70e92e09075f46f202c0763915c9bb83273ab966", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTQwNA==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r515031404", "bodyText": "Without it I get java.io.IOException: Read-only file system", "author": "grzesiek2010", "createdAt": "2020-10-30T11:27:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM1NzY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0NzE1Mw==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r515847153", "bodyText": "Huh strange. The same thing just worked\u2122\ufe0f for me here: https://github.com/getodk/collect/pull/4190/files#diff-83ee5909b031fabf1a76172164745099e708b293a264d0ae3f2cf9dce844ae21R154.", "author": "seadowg", "createdAt": "2020-11-02T09:40:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM1NzY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMyNDkyNA==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r516324924", "bodyText": "Ah ok this way it could work but then I need to use that file via fileprovider that means I would need to edit our provider_paths.xml file and add <cache-path path=\"/\" name=\"files\" /> there. Since we would need that only for tests I would need to create such a separate file for tests only. Is it worth the effort?", "author": "grzesiek2010", "createdAt": "2020-11-02T23:19:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM1NzY3NA=="}], "type": "inlineReview", "revised_code": {"commit": "53d0d807f8a401ff7c2ea79d5181ccbe3bd1515b", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex cfd85223c..33e10a24a 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -92,67 +80,17 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() throws IOException {\n-        // Check ImageWidget without answer\n-        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-\n-        // Check AudioWidget without answer\n-        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n-\n-        // Check VideoWidget without answer\n-        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n-\n-        // Check ArbitraryFileWidget without answer\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n-\n+    public void externalApp_ShouldPopulateFields() {\n         Intent resultIntent = new Intent();\n+        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        resultIntent.putExtra(\"questionInteger\", \"25\");\n-        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n-        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n+        int randomInteger = (new Random()).nextInt(255);\n+        resultIntent.putExtra(\"someinteger\", randomInteger);\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionImage\", null, createTempFile(\"famous\", \"jpg\")));\n-        clipData.addItem(new ClipData.Item(\"questionAudio\", null, createTempFile(\"sampleAudio\", \"wav\")));\n-        clipData.addItem(new ClipData.Item(\"questionVideo\", null, createTempFile(\"sampleVideo\", \"mp4\")));\n-        clipData.addItem(new ClipData.Item(\"questionFile\", null, createTempFile(\"fruits\", \"csv\")));\n-\n-        resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        // Check StringWidgets with answers\n-        onView(withText(\"25\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withText(\"46.74\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withText(\"sampleAnswer\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-\n-        // Check ImageWidget with answer\n-        onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-\n-        // Check AudioWidget with answer\n-        onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-\n-        // Check VideoWidget with answer\n-        onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n-\n-        // Check ArbitraryFileWidget with answer\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-    }\n-\n-    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n-    private Uri createTempFile(String name, String extension) throws IOException {\n-        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n-        copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n-        return getUriForFile(file);\n-    }\n-\n-    private Uri getUriForFile(File file) {\n-        return FileProvider.getUriForFile(Collect.getInstance(), BuildConfig.APPLICATION_ID + \".provider\", file);\n+        onView(withText(\"Here is a text value\")).check(matches(isDisplayed()));\n+        onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n     }\n }\n", "next_change": {"commit": "679464ebd53eb30a5f63caed650a591c928b439f", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex 33e10a24a..a2c7e64ec 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -80,17 +95,109 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() {\n+    public void externalApp_ShouldPopulateStringFields() {\n         Intent resultIntent = new Intent();\n-        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        int randomInteger = (new Random()).nextInt(255);\n-        resultIntent.putExtra(\"someinteger\", randomInteger);\n+        int randomInteger = new Random().nextInt(255);\n+        double scale = Math.pow(10, 2);\n+        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n+        String randomText = RandomString.make();\n+\n+        resultIntent.putExtra(\"questionInteger\", randomInteger);\n+        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n+        resultIntent.putExtra(\"questionText\", randomText);\n \n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withText(\"Here is a text value\")).check(matches(isDisplayed()));\n         onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n+        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n+        onView(withText(randomText)).check(matches(isDisplayed()));\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateImageField() throws IOException {\n+        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"famous.jpg\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withTagValue(is(\"ImageView\"))).check(matches(isDisplayed()));\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateAudioField() throws IOException {\n+        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"sampleAudio.wav\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withId(R.id.audio_controller)).check(matches(isDisplayed()));\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateVideoField() throws IOException {\n+        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"sampleVideo.mp4\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateArbitraryFileField() throws IOException {\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"fruits.csv\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(isDisplayed()));\n+    }\n+\n+    private Uri getUriForFile(File file) {\n+        return FileProvider.getUriForFile(Collect.getInstance(), BuildConfig.APPLICATION_ID + \".provider\", file);\n     }\n }\n", "next_change": {"commit": "ce0f65667491bad121da9eb83a97cf9791ecfbb4", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex a2c7e64ec..cfd85223c 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -95,106 +92,64 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateStringFields() {\n-        Intent resultIntent = new Intent();\n-\n-        int randomInteger = new Random().nextInt(255);\n-        double scale = Math.pow(10, 2);\n-        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n-        String randomText = RandomString.make();\n-\n-        resultIntent.putExtra(\"questionInteger\", randomInteger);\n-        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n-        resultIntent.putExtra(\"questionText\", randomText);\n-\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n-        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n-        onView(withText(randomText)).check(matches(isDisplayed()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateImageField() throws IOException {\n+    public void externalApp_ShouldPopulateFields() throws IOException {\n+        // Check ImageWidget without answer\n         onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n         onView(withId(R.id.capture_image)).check(doesNotExist());\n         onView(withId(R.id.choose_image)).check(doesNotExist());\n \n-        Intent resultIntent = new Intent();\n-\n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"famous.jpg\", tmpJpg.getPath());\n-\n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionImage\", null, getUriForFile(tmpJpg)));\n-\n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withTagValue(is(\"ImageView\"))).check(matches(isDisplayed()));\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateAudioField() throws IOException {\n+        // Check AudioWidget without answer\n         onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n \n-        Intent resultIntent = new Intent();\n-\n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleAudio.wav\", tmpJpg.getPath());\n-\n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionAudio\", null, getUriForFile(tmpJpg)));\n-\n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withId(R.id.audio_controller)).check(matches(isDisplayed()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateVideoField() throws IOException {\n+        // Check VideoWidget without answer\n         onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n         onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n \n+        // Check ArbitraryFileWidget without answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+\n         Intent resultIntent = new Intent();\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleVideo.mp4\", tmpJpg.getPath());\n+        resultIntent.putExtra(\"questionInteger\", \"25\");\n+        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n+        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n \n         ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionVideo\", null, getUriForFile(tmpJpg)));\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, createTempFile(\"famous\", \"jpg\")));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, createTempFile(\"sampleAudio\", \"wav\")));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, createTempFile(\"sampleVideo\", \"mp4\")));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, createTempFile(\"fruits\", \"csv\")));\n \n         resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateArbitraryFileField() throws IOException {\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+        // Check StringWidgets with answers\n+        onView(withText(\"25\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"46.74\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"sampleAnswer\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n \n-        Intent resultIntent = new Intent();\n+        // Check ImageWidget with answer\n+        onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"fruits.csv\", tmpJpg.getPath());\n+        // Check AudioWidget with answer\n+        onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionFile\", null, getUriForFile(tmpJpg)));\n+        // Check VideoWidget with answer\n+        onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n \n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n+        // Check ArbitraryFileWidget with answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+    }\n \n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(isDisplayed()));\n+    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n+    private Uri createTempFile(String name, String extension) throws IOException {\n+        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n+        copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n+        return getUriForFile(file);\n     }\n \n     private Uri getUriForFile(File file) {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex cfd85223c..f921888c6 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -93,55 +99,152 @@ public class IntentGroupTest {\n \n     @Test\n     public void externalApp_ShouldPopulateFields() throws IOException {\n-        // Check ImageWidget without answer\n-        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-\n-        // Check AudioWidget without answer\n-        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n-\n-        // Check VideoWidget without answer\n-        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n-\n-        // Check ArbitraryFileWidget without answer\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+        assertImageWidgetWithoutAnswer();\n+        assertAudioWidgetWithoutAnswer();\n+        assertVideoWidgetWithoutAnswer();\n+        assertFileWidgetWithoutAnswer();\n \n         Intent resultIntent = new Intent();\n \n+        Uri imageUri = createTempFile(\"famous\", \"jpg\");\n+        Uri audioUri = createTempFile(\"sampleAudio\", \"wav\");\n+        Uri videoUri = createTempFile(\"sampleVideo\", \"mp4\");\n+        Uri fileUri = createTempFile(\"fruits\", \"csv\");\n+\n         resultIntent.putExtra(\"questionInteger\", \"25\");\n         resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n         resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n+        resultIntent.putExtra(\"questionImage\", imageUri);\n+        resultIntent.putExtra(\"questionAudio\", audioUri);\n+        resultIntent.putExtra(\"questionVideo\", videoUri);\n+        resultIntent.putExtra(\"questionFile\", fileUri);\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, imageUri));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, audioUri));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, videoUri));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, fileUri));\n+\n+        resultIntent.setClipData(clipData);\n+        resultIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        assertImageWidgetWithAnswer();\n+        assertAudioWidgetWithAnswer();\n+        assertVideoWidgetWithAnswer();\n+        assertFileWidgetWithAnswer();\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldNotPopulateFieldsIfAnswersAreNull() {\n+        assertImageWidgetWithoutAnswer();\n+        assertAudioWidgetWithoutAnswer();\n+        assertVideoWidgetWithoutAnswer();\n+        assertFileWidgetWithoutAnswer();\n+\n+        Intent resultIntent = new Intent();\n+\n+        resultIntent.putExtra(\"questionInteger\", (Bundle) null);\n+        resultIntent.putExtra(\"questionDecimal\", (Bundle) null);\n+        resultIntent.putExtra(\"questionText\", (Bundle) null);\n+        resultIntent.putExtra(\"questionImage\", (Bundle) null);\n+        resultIntent.putExtra(\"questionAudio\", (Bundle) null);\n+        resultIntent.putExtra(\"questionVideo\", (Bundle) null);\n+        resultIntent.putExtra(\"questionFile\", (Bundle) null);\n \n         ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionImage\", null, createTempFile(\"famous\", \"jpg\")));\n-        clipData.addItem(new ClipData.Item(\"questionAudio\", null, createTempFile(\"sampleAudio\", \"wav\")));\n-        clipData.addItem(new ClipData.Item(\"questionVideo\", null, createTempFile(\"sampleVideo\", \"mp4\")));\n-        clipData.addItem(new ClipData.Item(\"questionFile\", null, createTempFile(\"fruits\", \"csv\")));\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, null));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, null));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, null));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, null));\n \n         resultIntent.setClipData(clipData);\n+        resultIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withIndex(withClassName(endsWith(\"EditText\")), 0)).check(matches(withText(\"\")));\n+        onView(withIndex(withClassName(endsWith(\"EditText\")), 1)).check(matches(withText(\"\")));\n+        onView(withIndex(withClassName(endsWith(\"EditText\")), 2)).check(matches(withText(\"\")));\n+\n+        assertImageWidgetWithoutAnswer();\n+        assertAudioWidgetWithoutAnswer();\n+        assertVideoWidgetWithoutAnswer();\n+        assertFileWidgetWithoutAnswer();\n+    }\n+\n+    @Test\n+    public void collect_shouldNotCrashWhenAnyExceptionIsThrownWhileReceivingAnswer() {\n+        assertImageWidgetWithoutAnswer();\n+\n+        Intent resultIntent = new Intent();\n+\n+        Uri uri = mock(Uri.class);\n+        doThrow(new SecurityException()).when(uri);\n+\n+        resultIntent.putExtra(\"questionImage\", uri);\n+\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        // Check StringWidgets with answers\n-        onView(withText(\"25\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withText(\"46.74\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withText(\"sampleAnswer\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        assertImageWidgetWithoutAnswer();\n+    }\n+\n+    @Test\n+    public void collect_shouldNotCrashWhenAnyErrorIsThrownWhileReceivingAnswer() {\n+        assertImageWidgetWithoutAnswer();\n+\n+        Intent resultIntent = new Intent();\n+\n+        Uri uri = mock(Uri.class);\n+        doThrow(new Error()).when(uri);\n+\n+        resultIntent.putExtra(\"questionImage\", uri);\n+\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        assertImageWidgetWithoutAnswer();\n+    }\n+\n+    private void assertImageWidgetWithoutAnswer() {\n+        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+    }\n \n-        // Check ImageWidget with answer\n+    private void assertAudioWidgetWithoutAnswer() {\n+        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n+    }\n+\n+    private void assertVideoWidgetWithoutAnswer() {\n+        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n+    }\n+\n+    private void assertFileWidgetWithoutAnswer() {\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+    }\n+\n+    private void assertImageWidgetWithAnswer() {\n         onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n         onView(withId(R.id.capture_image)).check(doesNotExist());\n         onView(withId(R.id.choose_image)).check(doesNotExist());\n+    }\n \n-        // Check AudioWidget with answer\n+    private void assertAudioWidgetWithAnswer() {\n         onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+    }\n \n-        // Check VideoWidget with answer\n+    private void assertVideoWidgetWithAnswer() {\n         onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n         onView(withId(R.id.play_video)).check(matches(isEnabled()));\n+    }\n \n-        // Check ArbitraryFileWidget with answer\n+    private void assertFileWidgetWithAnswer() {\n         onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n     }\n \n", "next_change": {"commit": "0bbd104b1bf17d4db67bfebb6f64c6a56acdf562", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex f921888c6..88185f633 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -248,9 +249,13 @@ public class IntentGroupTest {\n         onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n     }\n \n-    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n     private Uri createTempFile(String name, String extension) throws IOException {\n-        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n+        // Use the phones downloads dir for temp files\n+        File downloadsDir = ApplicationProvider\n+                .getApplicationContext()\n+                .getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS);\n+\n+        File file = File.createTempFile(name, extension, downloadsDir);\n         copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n         return getUriForFile(file);\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "message": "Merge commit", "committedDate": null}, {"oid": "3fe70a6c5e04d2fd95e8eb5eb8f454b9508bdadc", "committedDate": "2020-11-05 16:07:20 +0100", "message": "Fixed tests"}, {"oid": "3b08d4d357a2dcce668f57a3a2dae474a5c77fce", "committedDate": "2020-11-26 16:41:51 +0100", "message": "Fixed tests"}, {"oid": "788a0b8a51395b9ff2972f38f3227a04687854c4", "committedDate": "2020-12-01 10:22:43 +0000", "message": "Fix test missing scrolling"}, {"oid": "804cd24da5dbeec517e900d7d9e4b31c5e1ac8eb", "committedDate": "2020-12-03 15:33:32 +0100", "message": "Merge branch 'master' into COLLECT-4209"}, {"oid": "9ea40204f727949e2c3d146f5a53ab5792518f04", "committedDate": "2020-12-04 14:09:49 +0100", "message": "Fixed IntentGroupTest"}, {"oid": "cb1a1a616e8e59202c988f179a1f02e8aa3cb1bf", "committedDate": "2021-01-25 14:12:02 +0100", "message": "Improved tests for intent group"}, {"oid": "7f9a90a485292516c13cf0213f243419d993e396", "committedDate": "2021-01-25 14:17:03 +0100", "message": "Moved the new message about not granted file permission to strings"}, {"oid": "51aa28519339ee5b8da715bbb67a666f39c96643", "committedDate": "2021-01-28 14:43:45 +0100", "message": "Fixed tests"}, {"oid": "b8498278ae2294e67a99d1293be0b8b289de63e6", "committedDate": "2021-02-17 03:45:35 +0100", "message": "Removed storage permissions"}, {"oid": "c194fdbd6b02b8f05b1ed826fad11931e2a88de9", "committedDate": "2021-05-17 11:22:55 +0100", "message": "Remove any use of IntentsTestRule"}, {"oid": "ec21447a77bc864b6e1e4277ac2a8f7b10717484", "committedDate": "2021-05-26 14:16:51 +0100", "message": "Remove use of StoragePathProvider in form loading utils"}, {"oid": "0bbd104b1bf17d4db67bfebb6f64c6a56acdf562", "committedDate": "2021-10-29 15:21:49 +0100", "message": "Use downloads directory for storing test temp files"}, {"oid": "15116be7d3feeb853f7c90d5c4083aa5201de443", "committedDate": "2021-11-03 18:12:13 +0000", "message": "Always assert on form entry page when using FormActivityTestRule to avoid early interactions"}, {"oid": "da6c7b217a014a4a0491ab4f36e6fe17ebea12d5", "committedDate": "2021-11-08 12:57:47 +0000", "message": "Use correct toast assertion"}, {"oid": "805d0938a4a1bb14272ac4286006a1bde82613c5", "committedDate": "2021-11-08 13:33:39 +0000", "message": "Optimize imports"}, {"oid": "29b4ab364349d66f0165ba648bbf2f2e15531e1e", "committedDate": "2021-12-20 11:55:52 +0100", "message": "Moved RecordedIntentsRule to testshared module and resued in PermissionDeniedDialogTest"}, {"oid": "d24fbcbf7407900c7d0509ed91cd3f8c17077127", "committedDate": "2022-01-11 17:01:17 +0000", "message": "Make Geopoint dialog scrollable"}, {"oid": "0a7adc5e26a0187278a0d9b78cc91571ba31d09e", "committedDate": "2022-01-18 14:06:46 +0100", "message": "Remove CopyFormRule"}, {"oid": "fd6e73ab7504eaa956537fca25be6e70759627ee", "committedDate": "2022-01-18 17:10:53 +0100", "message": "Move initial form copy to FormActivityTestRule class"}, {"oid": "4d756215a40a11203f641b5321416e2ee3fb2e33", "committedDate": "2022-02-04 15:36:52 +0100", "message": "Move test rules to specific folder"}, {"oid": "0225485f52c099cd937ee5ab85ecd8caa78d4b61", "committedDate": "2022-02-10 21:09:43 +0100", "message": "Moved CustomMatchers to matchers package"}, {"oid": "bd353685fa7c65146f5aabb16b685234bf3fbfa3", "committedDate": "2022-02-18 13:26:23 +0000", "message": "Move android specific (nothing to do with our app) tsest helpers to a package"}, {"oid": "96699239c7aa48b8c4f2eaba71c680d355696097", "committedDate": "2022-02-18 13:42:50 +0000", "message": "Fix runtime problems caused by Robolectric being included in androidTest"}, {"oid": "a367b960425b593fbe6e6d9a911e0c28d1e44e2a", "committedDate": "2022-07-14 15:38:03 +0200", "message": "Removed redundant granting permissions in tests"}, {"oid": "b946e82b541f56e5eec8a04a52c31f59cf58fd28", "committedDate": "2023-02-06 22:05:15 +0100", "message": "Remove now unneeded NestedScrollToAction"}, {"oid": "7e06f6d1228e0a867d3b4a051d9f6ba155c3f5c3", "committedDate": "2023-02-15 16:04:29 +0100", "message": "Fixed IntentGroupTest"}, {"oid": "b2104532efd5c0157e234467fba4465b89dcf4aa", "committedDate": "2023-03-22 16:24:37 +0100", "message": "Create new rule for testing FormEntryActivity"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3ODMxNA==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514478314", "body": "See my comments on the test -- I don't think this matches the spec we had written up. It looks like it has the external app set both the text and a URI for each clip data item. The way we had written it up was to for ClipData, only set the URI and use an intent extra to do the match between Collect field name and clipdata URI. You should be able to read the extra to match with the Collect field (same as non-binary types) and then use the extra's value to get the file. I don't think you need to walk the `ClipData` at all, it's just there to provide permissions for when you resolve the content.", "bodyText": "See my comments on the test -- I don't think this matches the spec we had written up. It looks like it has the external app set both the text and a URI for each clip data item. The way we had written it up was to for ClipData, only set the URI and use an intent extra to do the match between Collect field name and clipdata URI. You should be able to read the extra to match with the Collect field (same as non-binary types) and then use the extra's value to get the file. I don't think you need to walk the ClipData at all, it's just there to provide permissions for when you resolve the content.", "bodyHTML": "<p dir=\"auto\">See my comments on the test -- I don't think this matches the spec we had written up. It looks like it has the external app set both the text and a URI for each clip data item. The way we had written it up was to for ClipData, only set the URI and use an intent extra to do the match between Collect field name and clipdata URI. You should be able to read the extra to match with the Collect field (same as non-binary types) and then use the extra's value to get the file. I don't think you need to walk the <code>ClipData</code> at all, it's just there to provide permissions for when you resolve the content.</p>", "author": "lognaturel", "createdAt": "2020-10-29T18:29:27Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java", "diffHunk": "@@ -479,40 +487,71 @@ public void scrollTo(@Nullable QuestionWidget qw) {\n     /**\n      * Saves answers for the widgets in this view. Called when the widgets are in an intent group.\n      */\n-    public void setDataForFields(Bundle bundle) throws JavaRosaException {\n-        if (bundle == null) {\n+    public void setDataForFields(Bundle bundle, ClipData clipData) throws JavaRosaException {\n+        FormController formController = Collect.getInstance().getFormController();\n+        if (formController == null) {\n             return;\n         }\n-        FormController formController = Collect.getInstance().getFormController();\n-        Set<String> keys = bundle.keySet();\n-        for (String key : keys) {\n-            for (QuestionWidget questionWidget : widgets) {\n-                FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n-                TreeReference treeReference =\n-                        (TreeReference) prompt.getFormElement().getBind().getReference();\n-\n-                if (treeReference.getNameLast().equals(key)) {\n-                    switch (prompt.getDataType()) {\n-                        case Constants.DATATYPE_TEXT:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asStringData(bundle.get(key)));\n-                            break;\n-                        case Constants.DATATYPE_INTEGER:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asIntegerData(bundle.get(key)));\n-                            break;\n-                        case Constants.DATATYPE_DECIMAL:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asDecimalData(bundle.get(key)));\n-                            break;\n-                        default:\n-                            throw new RuntimeException(\n-                                    getContext().getString(R.string.ext_assign_value_error,\n-                                            treeReference.toString(false)));\n+\n+        if (bundle != null) {\n+            Set<String> keys = bundle.keySet();\n+            for (String key : keys) {\n+                for (QuestionWidget questionWidget : widgets) {\n+                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n+                    TreeReference treeReference =\n+                            (TreeReference) prompt.getFormElement().getBind().getReference();\n+\n+                    if (treeReference.getNameLast().equals(key)) {\n+                        switch (prompt.getDataType()) {\n+                            case Constants.DATATYPE_TEXT:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asStringData(bundle.get(key)));\n+                                break;\n+                            case Constants.DATATYPE_INTEGER:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asIntegerData(bundle.get(key)));\n+                                break;\n+                            case Constants.DATATYPE_DECIMAL:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asDecimalData(bundle.get(key)));\n+                                break;\n+                            default:\n+                                throw new RuntimeException(\n+                                        getContext().getString(R.string.ext_assign_value_error,\n+                                                treeReference.toString(false)));\n+                        }\n+\n+                        ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                        break;\n                     }\n+                }\n+            }\n+        }\n+\n+        if (clipData != null) {\n+            for (int i = 0; i < clipData.getItemCount(); i++) {\n+                CharSequence key = clipData.getItemAt(i).getText();", "originalCommit": "70e92e09075f46f202c0763915c9bb83273ab966", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3MDkzOQ==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514570939", "bodyText": "The spec document says:\n\nLook for an intent extra with the name of the field. If one is found, attempt to exactly match the intent extra value to one of the ClipData items\u2019 content URI\nIf there\u2019s a match, copy the file to the form instance folder and write its local filename in the corresponding form field\n\nWe don't really need to do that, I don't think. We can just try to resolve the URI from the extra as I described above. If that works, it means the ClipData was correctly populated.", "author": "lognaturel", "createdAt": "2020-10-29T21:12:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3ODMxNA=="}], "type": "inlineReview", "revised_code": {"commit": "53d0d807f8a401ff7c2ea79d5181ccbe3bd1515b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex e88589a9d..441dfb613 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -487,71 +469,40 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n     /**\n      * Saves answers for the widgets in this view. Called when the widgets are in an intent group.\n      */\n-    public void setDataForFields(Bundle bundle, ClipData clipData) throws JavaRosaException {\n-        FormController formController = Collect.getInstance().getFormController();\n-        if (formController == null) {\n+    public void setDataForFields(Bundle bundle) throws JavaRosaException {\n+        if (bundle == null) {\n             return;\n         }\n-\n-        if (bundle != null) {\n-            Set<String> keys = bundle.keySet();\n-            for (String key : keys) {\n-                for (QuestionWidget questionWidget : widgets) {\n-                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n-                    TreeReference treeReference =\n-                            (TreeReference) prompt.getFormElement().getBind().getReference();\n-\n-                    if (treeReference.getNameLast().equals(key)) {\n-                        switch (prompt.getDataType()) {\n-                            case Constants.DATATYPE_TEXT:\n-                                formController.saveAnswer(prompt.getIndex(),\n-                                        ExternalAppsUtils.asStringData(bundle.get(key)));\n-                                break;\n-                            case Constants.DATATYPE_INTEGER:\n-                                formController.saveAnswer(prompt.getIndex(),\n-                                        ExternalAppsUtils.asIntegerData(bundle.get(key)));\n-                                break;\n-                            case Constants.DATATYPE_DECIMAL:\n-                                formController.saveAnswer(prompt.getIndex(),\n-                                        ExternalAppsUtils.asDecimalData(bundle.get(key)));\n-                                break;\n-                            default:\n-                                throw new RuntimeException(\n-                                        getContext().getString(R.string.ext_assign_value_error,\n-                                                treeReference.toString(false)));\n-                        }\n-\n-                        ((StringWidget) questionWidget).setDisplayValueFromModel();\n-                        break;\n+        FormController formController = Collect.getInstance().getFormController();\n+        Set<String> keys = bundle.keySet();\n+        for (String key : keys) {\n+            for (QuestionWidget questionWidget : widgets) {\n+                FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n+                TreeReference treeReference =\n+                        (TreeReference) prompt.getFormElement().getBind().getReference();\n+\n+                if (treeReference.getNameLast().equals(key)) {\n+                    switch (prompt.getDataType()) {\n+                        case Constants.DATATYPE_TEXT:\n+                            formController.saveAnswer(prompt.getIndex(),\n+                                    ExternalAppsUtils.asStringData(bundle.get(key)));\n+                            break;\n+                        case Constants.DATATYPE_INTEGER:\n+                            formController.saveAnswer(prompt.getIndex(),\n+                                    ExternalAppsUtils.asIntegerData(bundle.get(key)));\n+                            break;\n+                        case Constants.DATATYPE_DECIMAL:\n+                            formController.saveAnswer(prompt.getIndex(),\n+                                    ExternalAppsUtils.asDecimalData(bundle.get(key)));\n+                            break;\n+                        default:\n+                            throw new RuntimeException(\n+                                    getContext().getString(R.string.ext_assign_value_error,\n+                                            treeReference.toString(false)));\n                     }\n-                }\n-            }\n-        }\n-\n-        if (clipData != null) {\n-            for (int i = 0; i < clipData.getItemCount(); i++) {\n-                CharSequence key = clipData.getItemAt(i).getText();\n-                if (key == null) {\n-                    continue;\n-                }\n \n-                for (QuestionWidget questionWidget : widgets) {\n-                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n-\n-                    if (FormEntryPromptUtils.getQuestionName(prompt).equals(key.toString())\n-                            && prompt.getDataType() == Constants.DATATYPE_BINARY) {\n-                        Uri uri = clipData.getItemAt(i).getUri();\n-                        if (uri != null) {\n-                            try {\n-                                File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n-                                //TODO might be better to use QuestionMediaManager in the future\n-                                FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n-                                ((WidgetDataReceiver) questionWidget).setData(destFile);\n-                            } catch (SecurityException e) {\n-                                Timber.w(e);\n-                            }\n-                        }\n-                    }\n+                    ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                    break;\n                 }\n             }\n         }\n", "next_change": {"commit": "ad1af29dd6cc6082fa22776512225defa2f66f8c", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 441dfb613..647f78e83 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -469,40 +477,66 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n     /**\n      * Saves answers for the widgets in this view. Called when the widgets are in an intent group.\n      */\n-    public void setDataForFields(Bundle bundle) throws JavaRosaException {\n-        if (bundle == null) {\n+    public void setDataForFields(Bundle bundle, ClipData clipData) throws JavaRosaException {\n+        FormController formController = Collect.getInstance().getFormController();\n+        if (formController == null) {\n             return;\n         }\n-        FormController formController = Collect.getInstance().getFormController();\n-        Set<String> keys = bundle.keySet();\n-        for (String key : keys) {\n-            for (QuestionWidget questionWidget : widgets) {\n-                FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n-                TreeReference treeReference =\n-                        (TreeReference) prompt.getFormElement().getBind().getReference();\n-\n-                if (treeReference.getNameLast().equals(key)) {\n-                    switch (prompt.getDataType()) {\n-                        case Constants.DATATYPE_TEXT:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asStringData(bundle.get(key)));\n-                            break;\n-                        case Constants.DATATYPE_INTEGER:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asIntegerData(bundle.get(key)));\n-                            break;\n-                        case Constants.DATATYPE_DECIMAL:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asDecimalData(bundle.get(key)));\n-                            break;\n-                        default:\n-                            throw new RuntimeException(\n-                                    getContext().getString(R.string.ext_assign_value_error,\n-                                            treeReference.toString(false)));\n+\n+        if (bundle != null) {\n+            Set<String> keys = bundle.keySet();\n+            for (String key : keys) {\n+                for (QuestionWidget questionWidget : widgets) {\n+                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n+                    TreeReference treeReference =\n+                            (TreeReference) prompt.getFormElement().getBind().getReference();\n+\n+                    if (treeReference.getNameLast().equals(key)) {\n+                        switch (prompt.getDataType()) {\n+                            case Constants.DATATYPE_TEXT:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asStringData(bundle.get(key)));\n+                                break;\n+                            case Constants.DATATYPE_INTEGER:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asIntegerData(bundle.get(key)));\n+                                break;\n+                            case Constants.DATATYPE_DECIMAL:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asDecimalData(bundle.get(key)));\n+                                break;\n+                            default:\n+                                throw new RuntimeException(\n+                                        getContext().getString(R.string.ext_assign_value_error,\n+                                                treeReference.toString(false)));\n+                        }\n+\n+                        ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                        break;\n                     }\n+                }\n+            }\n+        }\n+\n+        if (clipData != null) {\n+            for (int i = 0; i < clipData.getItemCount(); i++) {\n+                CharSequence key = clipData.getItemAt(i).getText();\n+                if (key == null) {\n+                    continue;\n+                }\n \n-                    ((StringWidget) questionWidget).setDisplayValueFromModel();\n-                    break;\n+                for (QuestionWidget questionWidget : widgets) {\n+                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n+\n+                    if (FormEntryPromptUtils.getQuestionName(prompt).equals(key.toString())\n+                            && prompt.getDataType() == Constants.DATATYPE_BINARY) {\n+                        Uri uri = clipData.getItemAt(i).getUri();\n+                        if (uri != null) {\n+                            File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n+                            FileUtils.saveMediaFileFromUri(uri, destFile, getContext());\n+                            ((WidgetDataReceiver) questionWidget).setData(destFile);\n+                        }\n+                    }\n                 }\n             }\n         }\n", "next_change": {"commit": "f3e12da2c903871b5f2a29c57b510560eab81cf0", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 647f78e83..71ac9930e 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -532,9 +532,13 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                             && prompt.getDataType() == Constants.DATATYPE_BINARY) {\n                         Uri uri = clipData.getItemAt(i).getUri();\n                         if (uri != null) {\n-                            File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n-                            FileUtils.saveMediaFileFromUri(uri, destFile, getContext());\n-                            ((WidgetDataReceiver) questionWidget).setData(destFile);\n+                            try {\n+                                File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n+                                FileUtils.saveMediaFileFromUri(uri, destFile, getContext());\n+                                ((WidgetDataReceiver) questionWidget).setData(destFile);\n+                            } catch (SecurityException e) {\n+                                Timber.w(e);\n+                            }\n                         }\n                     }\n                 }\n", "next_change": {"commit": "0be7b76be1b8313967b68ce2c05aa6e4374feadf", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 71ac9930e..96b8f2510 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -534,7 +534,7 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                         if (uri != null) {\n                             try {\n                                 File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n-                                FileUtils.saveMediaFileFromUri(uri, destFile, getContext());\n+                                FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n                                 ((WidgetDataReceiver) questionWidget).setData(destFile);\n                             } catch (SecurityException e) {\n                                 Timber.w(e);\n", "next_change": {"commit": "bf455d711eba941af42004336856fee48de440e6", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 96b8f2510..0d164748e 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -534,6 +534,7 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                         if (uri != null) {\n                             try {\n                                 File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n+                                //TODO might be better to use QuestionMediaManager in the future\n                                 FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n                                 ((WidgetDataReceiver) questionWidget).setData(destFile);\n                             } catch (SecurityException e) {\n", "next_change": {"commit": "e82a1a1f599bbe0055be67c6b580eb1687c44d64", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 0d164748e..fb55f7e2d 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -496,55 +494,43 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                             case Constants.DATATYPE_TEXT:\n                                 formController.saveAnswer(prompt.getIndex(),\n                                         ExternalAppsUtils.asStringData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n                                 break;\n                             case Constants.DATATYPE_INTEGER:\n                                 formController.saveAnswer(prompt.getIndex(),\n                                         ExternalAppsUtils.asIntegerData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n                                 break;\n                             case Constants.DATATYPE_DECIMAL:\n                                 formController.saveAnswer(prompt.getIndex(),\n                                         ExternalAppsUtils.asDecimalData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                                break;\n+                            case Constants.DATATYPE_BINARY:\n+                                try {\n+                                    Uri uri = (Uri) bundle.get(key);\n+                                    try {\n+                                        File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n+                                        //TODO might be better to use QuestionMediaManager in the future\n+                                        FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n+                                        ((WidgetDataReceiver) questionWidget).setData(destFile);\n+                                    } catch (SecurityException e) {\n+                                        Timber.w(e);\n+                                    }\n+                                } catch (ClassCastException e) {\n+                                    Timber.w(e);\n+                                }\n                                 break;\n                             default:\n                                 throw new RuntimeException(\n                                         getContext().getString(R.string.ext_assign_value_error,\n                                                 treeReference.toString(false)));\n                         }\n-\n-                        ((StringWidget) questionWidget).setDisplayValueFromModel();\n                         break;\n                     }\n                 }\n             }\n         }\n-\n-        if (clipData != null) {\n-            for (int i = 0; i < clipData.getItemCount(); i++) {\n-                CharSequence key = clipData.getItemAt(i).getText();\n-                if (key == null) {\n-                    continue;\n-                }\n-\n-                for (QuestionWidget questionWidget : widgets) {\n-                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n-\n-                    if (FormEntryPromptUtils.getQuestionName(prompt).equals(key.toString())\n-                            && prompt.getDataType() == Constants.DATATYPE_BINARY) {\n-                        Uri uri = clipData.getItemAt(i).getUri();\n-                        if (uri != null) {\n-                            try {\n-                                File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n-                                //TODO might be better to use QuestionMediaManager in the future\n-                                FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n-                                ((WidgetDataReceiver) questionWidget).setData(destFile);\n-                            } catch (SecurityException e) {\n-                                Timber.w(e);\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n     }\n \n     public boolean suppressFlingGesture(MotionEvent e1, MotionEvent e2, float velocityX,\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex e88589a9d..56066711a 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -506,55 +494,41 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                             case Constants.DATATYPE_TEXT:\n                                 formController.saveAnswer(prompt.getIndex(),\n                                         ExternalAppsUtils.asStringData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n                                 break;\n                             case Constants.DATATYPE_INTEGER:\n                                 formController.saveAnswer(prompt.getIndex(),\n                                         ExternalAppsUtils.asIntegerData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n                                 break;\n                             case Constants.DATATYPE_DECIMAL:\n                                 formController.saveAnswer(prompt.getIndex(),\n                                         ExternalAppsUtils.asDecimalData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                                break;\n+                            case Constants.DATATYPE_BINARY:\n+                                try {\n+                                    Uri uri = (Uri) bundle.get(key);\n+                                    if (uri != null) {\n+                                        File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n+                                        //TODO might be better to use QuestionMediaManager in the future\n+                                        FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n+                                        ((WidgetDataReceiver) questionWidget).setData(destFile);\n+                                    }\n+                                } catch (Exception | Error e) {\n+                                    Timber.w(e);\n+                                }\n                                 break;\n                             default:\n                                 throw new RuntimeException(\n                                         getContext().getString(R.string.ext_assign_value_error,\n                                                 treeReference.toString(false)));\n                         }\n-\n-                        ((StringWidget) questionWidget).setDisplayValueFromModel();\n                         break;\n                     }\n                 }\n             }\n         }\n-\n-        if (clipData != null) {\n-            for (int i = 0; i < clipData.getItemCount(); i++) {\n-                CharSequence key = clipData.getItemAt(i).getText();\n-                if (key == null) {\n-                    continue;\n-                }\n-\n-                for (QuestionWidget questionWidget : widgets) {\n-                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n-\n-                    if (FormEntryPromptUtils.getQuestionName(prompt).equals(key.toString())\n-                            && prompt.getDataType() == Constants.DATATYPE_BINARY) {\n-                        Uri uri = clipData.getItemAt(i).getUri();\n-                        if (uri != null) {\n-                            try {\n-                                File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n-                                //TODO might be better to use QuestionMediaManager in the future\n-                                FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n-                                ((WidgetDataReceiver) questionWidget).setData(destFile);\n-                            } catch (SecurityException e) {\n-                                Timber.w(e);\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n     }\n \n     public boolean suppressFlingGesture(MotionEvent e1, MotionEvent e2, float velocityX,\n", "next_change": {"commit": "e703b34fe9a8587394d207cb4714aac262f4feaf", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 56066711a..d5ec487c8 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -531,16 +564,23 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n         }\n     }\n \n-    public boolean suppressFlingGesture(MotionEvent e1, MotionEvent e2, float velocityX,\n-                                        float velocityY) {\n+    @Override\n+    public boolean shouldSuppressFlingGesture(MotionEvent e1, MotionEvent e2, float velocityX,\n+                                              float velocityY) {\n         for (QuestionWidget q : widgets) {\n-            if (q.suppressFlingGesture(e1, e2, velocityX, velocityY)) {\n+            if (q.shouldSuppressFlingGesture(e1, e2, velocityX, velocityY)) {\n                 return true;\n             }\n         }\n         return false;\n     }\n \n+    @Nullable\n+    @Override\n+    public NestedScrollView getVerticalScrollView() {\n+        return findViewById(R.id.odk_view_container);\n+    }\n+\n     /**\n      * @return true if the answer was cleared, false otherwise.\n      */\n", "next_change": {"commit": "3b7c5744654d8cb7c08997747a2857fbf64273c0", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex d5ec487c8..5fb1ce437 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -577,7 +567,7 @@ public class ODKView extends SwipeHandler.View implements OnLongClickListener, W\n \n     @Nullable\n     @Override\n-    public NestedScrollView getVerticalScrollView() {\n+    public NestedScrollView verticalScrollView() {\n         return findViewById(R.id.odk_view_container);\n     }\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "message": "Merge commit", "committedDate": null}, {"oid": "0337d67b98f0cddee876ee7c7dc234edd09f97e7", "committedDate": "2020-11-05 09:11:50 -0800", "message": "Add support for launching apps without DEFAULT category"}, {"oid": "26b842e1c8e03ee27f0237fad77455dccfd66e29", "committedDate": "2020-11-05 09:14:41 -0800", "message": "Allow string or Uri for binary extra"}, {"oid": "e9ae68ea6743b1b2c978a674e80f69dd4ebb1d18", "committedDate": "2020-11-06 16:16:15 +0000", "message": "Use fake audio recorder view model in test to prevent timing issues"}, {"oid": "d56020ba830f3198bfa70c8b443ad144af919594", "committedDate": "2020-11-09 10:25:15 -0800", "message": "Handle null launch intent"}, {"oid": "9f32a8160b865be15a319b9dfeb281ebe474eae3", "committedDate": "2020-11-13 11:13:52 +0000", "message": "Use external recording when specified in form"}, {"oid": "e310e2a9f176afbfc086b95370e92e821eaa0223", "committedDate": "2020-11-13 11:13:52 +0000", "message": "Allow enabling external recorder from settings"}, {"oid": "4853ea1c4205d775452fb88e688d040e1fc54762", "committedDate": "2020-11-13 11:15:44 +0000", "message": "Make sure form quality param overrides setting"}, {"oid": "7cd0f0d8bded0a0f7af8bd6170bc56d1a08507b8", "committedDate": "2020-11-13 11:15:44 +0000", "message": "Make WidgetFactory an instance in ODKView"}, {"oid": "050396ae7487716e13731adbf6d6453ad9f2608d", "committedDate": "2020-11-17 12:02:44 +0100", "message": "Merge pull request #4208 from lognaturel/explicit-intents"}, {"oid": "6096f02f03d6d11421a2e8a011141f906a89bcb6", "committedDate": "2020-11-17 15:15:47 +0000", "message": "Remove state saving from widgets"}, {"oid": "7dc03450602c1f0e414656afa929cc40b4af0efc", "committedDate": "2020-11-19 12:11:33 +0100", "message": "Got rid of recycling drawables"}, {"oid": "95312a78129f78a0823b00721f0c19ae9e531a12", "committedDate": "2020-11-24 13:50:47 +0100", "message": "Merge branch 'master' into COLLECT-4205"}, {"oid": "41547dd642a56736049fdf46c93516755eed9c0a", "committedDate": "2020-11-26 13:50:16 +0100", "message": "Added spacing for read-only widgets"}, {"oid": "30628c40d553bbf9c8cebd785e84ab4f3251d2e3", "committedDate": "2020-11-26 13:50:18 +0100", "message": "Code improvements"}, {"oid": "b652335ebffea0783431e4aaa61f742dae06a5f5", "committedDate": "2020-12-01 17:48:58 +0000", "message": "Make external recording the default"}, {"oid": "804cd24da5dbeec517e900d7d9e4b31c5e1ac8eb", "committedDate": "2020-12-03 15:33:32 +0100", "message": "Merge branch 'master' into COLLECT-4209"}, {"oid": "7976a9b08bfada69ffb5dc85b8c627bf02ce61e5", "committedDate": "2020-12-09 16:09:45 +0000", "message": "Move URL question analytics out of WidgetFactory"}, {"oid": "1674c3546cfbcf1d2df8b417d4838eda4e649b2c", "committedDate": "2020-12-09 16:11:59 +0000", "message": "Add analytics event when audio question is shown"}, {"oid": "4a474d3e5a5c06ca9754d2581ca263188b67c943", "committedDate": "2020-12-09 16:46:29 +0000", "message": "Use viewmodel for event"}, {"oid": "9a7ce13ed172cd5258804dc4e05d345413d0a2ee", "committedDate": "2020-12-09 18:37:45 +0000", "message": "Log analytics events when recording or choosing audio"}, {"oid": "333c78ee2dd3303701a1b29a16124e6655ffe32a", "committedDate": "2020-12-10 11:41:51 +0000", "message": "Log analytics event when question answered during recording"}, {"oid": "71f6782c1ace906c438f70119e6be81b430ca051", "committedDate": "2020-12-10 16:27:50 +0000", "message": "Remove Audio question event and use new style for URL question event"}, {"oid": "f519e6763008e5f7d62fc5a7143c2b8c294765e5", "committedDate": "2021-01-14 11:19:28 +0100", "message": "Use injected permissionUtils"}, {"oid": "265c183e8343092e89ec8d0c2ae47c9c22cd5119", "committedDate": "2021-01-14 11:20:18 +0100", "message": "Moved permissionUtils class to permissions package"}, {"oid": "e7d97823a196718baf07a48ef8ced5e6211dc991", "committedDate": "2021-01-14 11:20:18 +0100", "message": "Renamed PermissionUtils -> PermissionsProvider"}, {"oid": "32734194499287365954afcc86f08840f1a04600", "committedDate": "2021-01-19 21:58:47 +0100", "message": "Remove unused code"}, {"oid": "57909eb117e74aa77a3a0937aec068bfe9359975", "committedDate": "2021-01-25 14:05:55 +0100", "message": "Check Uri permission before accesing it in ODKView"}, {"oid": "7f9a90a485292516c13cf0213f243419d993e396", "committedDate": "2021-01-25 14:17:03 +0100", "message": "Moved the new message about not granted file permission to strings"}, {"oid": "e0b4a3f3e61a466debd283d232689e345b34d306", "committedDate": "2021-01-28 13:30:49 +0100", "message": "Use requestReadUriPermission() wherever uri from external app is accessed"}, {"oid": "2e2f32e6874b4fb1248303622e673e9c3761f5cf", "committedDate": "2021-01-28 09:42:10 -0800", "message": "Group appearance constants"}, {"oid": "94b779188a11065426c37edde5439c424e63cef5", "committedDate": "2021-02-01 12:48:09 +0100", "message": "Merge pull request #4366 from grzesiek2010/COLLECT-4360"}, {"oid": "bb0aa64d40d4e92eb5d325e289bcdde9154ddf88", "committedDate": "2021-02-01 13:01:16 +0000", "message": "Move audio file save code out of requester"}, {"oid": "d23c0da7012581b8dd8728912740258c37fde5df", "committedDate": "2021-02-01 13:11:38 +0000", "message": "Separate out recording status and requesting"}, {"oid": "f34b7e6d914273c0600a1d8e9d238698ff8b6a09", "committedDate": "2021-02-01 13:11:39 +0000", "message": "Initialize recording requesters at the Activity level"}, {"oid": "6b8dad666617567d96622dccb9d4ed46820d2a70", "committedDate": "2021-02-02 13:49:31 +0000", "message": "AudioRecorder doesn't need to be ViewModel"}, {"oid": "bf93185e75aee490c776a17fce100231e7e06e8c", "committedDate": "2021-03-03 17:04:14 +0000", "message": "Move analytics code to module"}, {"oid": "c550da1522fa27a36d976abecfd61034d1c832e3", "committedDate": "2021-03-05 10:32:55 +0100", "message": "Use PreferencesRepository in rest of the places where it wasn't used"}, {"oid": "34749e0dffaad4eebc462bef087a939e1749f1d9", "committedDate": "2021-03-08 16:32:01 +0100", "message": "Naming improvements"}, {"oid": "35b9c88e857a197786cb85b07aa0ed19a093c3f9", "committedDate": "2021-03-09 15:17:48 +0100", "message": "Created a separate package for keys"}, {"oid": "321a9160bcd76f6420cbcddf7fdac3010607f68e", "committedDate": "2021-03-09 15:31:19 +0100", "message": "Moved related classes to source package"}, {"oid": "6b1642fff021192ae2966fc9a01419a809e54ebf", "committedDate": "2021-03-15 12:45:59 +0100", "message": "Renaming"}, {"oid": "95a81d0f9d40906384ba423380983de7b4e46a45", "committedDate": "2021-03-31 17:46:11 +0100", "message": "Rename ContentResolverHelper"}, {"oid": "72d8d2d33bc3977ff62f5ca16bdfaf95b00b105d", "committedDate": "2021-06-10 12:24:17 +0100", "message": "Remove SuppressWarnings for warning we are ignoring"}, {"oid": "f18fea689d475a98214200ba8bc2cc25e5c1ee7d", "committedDate": "2021-07-17 13:00:12 +0100", "message": "Rename packages"}, {"oid": "797510c658ce8521ce4205a32529bee22fda41cb", "committedDate": "2021-07-27 08:06:02 -0700", "message": "Centralize logic for settings visibility, improve naming (#4731)"}, {"oid": "d8c2c10c7292ef8aa5d4c1644398053d645c3505", "committedDate": "2021-08-05 17:03:34 +0100", "message": "Remove logFormEvent from interface"}, {"oid": "c2cfa4063a4ed5f2a15495a579773fb9a31d47e3", "committedDate": "2021-08-16 21:26:34 +0200", "message": "Removed logging 'URLQuestion'"}, {"oid": "6c7b9a5733dc90215761f1e2112e1cd925690aaa", "committedDate": "2021-08-16 22:03:08 +0200", "message": "Removed logging 'Prompt'"}, {"oid": "564cdba7fc546bbda42b41b95123c591b38ec740", "committedDate": "2021-09-02 15:20:49 +0100", "message": "Remove colors.xml - leave map colors in place for now"}, {"oid": "cc776c8bca22e0ca72461a0be82143dcf6e434c7", "committedDate": "2021-09-22 12:08:57 +0100", "message": "Remove Collect.getInstance() from ToastUtils"}, {"oid": "bf0468a88e2d6914dd85c8024c082176125c32cc", "committedDate": "2021-09-22 12:32:36 +0100", "message": "Move ToastUtils to androidshared"}, {"oid": "db2aeec6995d6726240db94908201ca7cae6195f", "committedDate": "2021-09-24 14:18:40 +0100", "message": "Remove accidently added calls to Collect.getInstance()"}, {"oid": "75b99e8a99ded8f8ae3fff296934c62e6dea40dd", "committedDate": "2021-10-20 12:09:50 +0100", "message": "Move PermissionsChecker and rearrange packages in androidshared"}, {"oid": "05810bcd814cb46c8510b2be9693a335febf77ba", "committedDate": "2021-10-29 09:42:17 +0200", "message": "Fixed ExVideoWidget to use the new methods from ExternalAppIntentProvider"}, {"oid": "ae66398caa3bb569b646142da2bc642e8570fb16", "committedDate": "2021-10-29 09:42:18 +0200", "message": "Pass IntentLauncher and ExternalAppIntentProvider to FileRequester and StringReuqester via constructor"}, {"oid": "6a440ab90b7bcc15e49ffbb5b6d78d70e32a8f49", "committedDate": "2021-11-08 09:33:33 +0100", "message": "Fixed method names that contained 'general settings'"}, {"oid": "8d65feb6230a1caf534a59711e7f9009ec5489cb", "committedDate": "2021-12-20 11:55:52 +0100", "message": "Moved PermissionListener to permissions module"}, {"oid": "9f0f31d050677e9e967c8a24846440e9f4b0a8fd", "committedDate": "2021-12-20 11:55:52 +0100", "message": "Moved PermissionsProvider to permissions module"}, {"oid": "fa52f4ff73001955d4f8bc1c1fafbc5aed824479", "committedDate": "2021-12-29 11:41:43 +0000", "message": "Switch between geopoint implementations with experimental setting"}, {"oid": "d98ef16bdb52334bdab29474be3097565d4fd9b0", "committedDate": "2022-01-12 13:50:24 +0000", "message": "Use new geo point instead of old one"}, {"oid": "eb2468458dc0640284defafa3c7944af533705e7", "committedDate": "2022-02-16 10:01:36 +0000", "message": "Collect all settings code in one place"}, {"oid": "a1b708864d35e2acaecd21ae3a4d3ed91b41843b", "committedDate": "2022-02-16 10:13:53 +0000", "message": "Move project and meta keys to new module"}, {"oid": "61f3558b9e1121cc447b374e0a6990e1d33d691a", "committedDate": "2022-02-16 10:13:55 +0000", "message": "Move SettingsImporter to settings module"}, {"oid": "f9b2a11aecb26c2e18a2d12ad071726e111bdc76", "committedDate": "2022-02-16 10:13:56 +0000", "message": "Reorganize settings module"}, {"oid": "3096102a66699e33f4c06cb4741bc17f68ed4837", "committedDate": "2022-04-26 13:03:16 +0200", "message": "Removed AnswerWhileRecording"}, {"oid": "84e5c77b91e5c600063cfef33c60f27f592181fb", "committedDate": "2022-04-26 20:08:00 +0200", "message": "Fixed styling group names"}, {"oid": "3022bd31e5255e7242067d1485dc6b88a4ab0ec0", "committedDate": "2022-05-16 10:12:55 +0200", "message": "Merge pull request #5064 from grzesiek2010/COLLECT-4822"}, {"oid": "e703b34fe9a8587394d207cb4714aac262f4feaf", "committedDate": "2022-06-29 11:08:29 +0200", "message": "Fix non OdkViews not being set on SwipeHandler"}, {"oid": "831d7e0dab94758e2bc3448889aab71b85c5e1ef", "committedDate": "2022-09-13 14:32:57 +0200", "message": "Added defaylt implementation for PermissionListener#denied() to avoid overriding when not needed"}, {"oid": "2a13a61f1f8cfb802f1d5efc9d5bf4efa4c5aa01", "committedDate": "2022-09-28 14:16:52 +0100", "message": "Remove simple cases of getFormController() in widgets"}, {"oid": "95d26019fa068795581058c9d399f1873185e22f", "committedDate": "2022-09-28 14:35:23 +0100", "message": "Remove getFormController from external app code"}, {"oid": "821b465f35b66f113ae958247cbe1e157630af79", "committedDate": "2022-12-12 21:27:03 +0100", "message": "Removed unused parameters from shouldSuppressFlingGesture"}, {"oid": "63b09ed937fddb3c99a814dbce3aa5d9e4ff6ed1", "committedDate": "2023-03-09 09:01:48 -0800", "message": "Create on view model factory for form entry"}, {"oid": "52896771dc8adda88a64150a2eb07a6bf3bb3187", "committedDate": "2023-04-16 21:43:37 +0200", "message": "Moved SwipeHandler to formentry package"}, {"oid": "3b7c5744654d8cb7c08997747a2857fbf64273c0", "committedDate": "2023-04-28 15:36:45 +0200", "message": "Fixed conflicts"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4Nzg5Nw==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514487897", "body": "According to our spec, an external app is supposed to:\r\n> Add content URIs for the files to attach to the form to the return intent\u2019s ClipData\r\n\r\n> Add an intent extra with desired form field name and set its value to the content URI for the corresponding file.\r\n", "bodyText": "According to our spec, an external app is supposed to:\n\nAdd content URIs for the files to attach to the form to the return intent\u2019s ClipData\n\n\nAdd an intent extra with desired form field name and set its value to the content URI for the corresponding file.", "bodyHTML": "<p dir=\"auto\">According to our spec, an external app is supposed to:</p>\n<blockquote>\n<p dir=\"auto\">Add content URIs for the files to attach to the form to the return intent\u2019s ClipData</p>\n</blockquote>\n<blockquote>\n<p dir=\"auto\">Add an intent extra with desired form field name and set its value to the content URI for the corresponding file.</p>\n</blockquote>", "author": "lognaturel", "createdAt": "2020-10-29T18:46:02Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java", "diffHunk": "@@ -80,17 +92,67 @@ public void appMissingErrorText_ShouldComeFromSpecialFormText() {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() {\n+    public void externalApp_ShouldPopulateFields() throws IOException {\n+        // Check ImageWidget without answer\n+        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+\n+        // Check AudioWidget without answer\n+        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n+\n+        // Check VideoWidget without answer\n+        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n+\n+        // Check ArbitraryFileWidget without answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+\n         Intent resultIntent = new Intent();\n-        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        int randomInteger = (new Random()).nextInt(255);\n-        resultIntent.putExtra(\"someinteger\", randomInteger);\n+        resultIntent.putExtra(\"questionInteger\", \"25\");\n+        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n+        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n \n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, createTempFile(\"famous\", \"jpg\")));", "originalCommit": "70e92e09075f46f202c0763915c9bb83273ab966", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjgwOQ==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514632809", "bodyText": "This test needs to be updated!", "author": "lognaturel", "createdAt": "2020-10-29T23:55:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4Nzg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3MTk1MQ==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r515071951", "bodyText": "Done.", "author": "grzesiek2010", "createdAt": "2020-10-30T12:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4Nzg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "53d0d807f8a401ff7c2ea79d5181ccbe3bd1515b", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex cfd85223c..33e10a24a 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -92,67 +80,17 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() throws IOException {\n-        // Check ImageWidget without answer\n-        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-\n-        // Check AudioWidget without answer\n-        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n-\n-        // Check VideoWidget without answer\n-        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n-\n-        // Check ArbitraryFileWidget without answer\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n-\n+    public void externalApp_ShouldPopulateFields() {\n         Intent resultIntent = new Intent();\n+        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        resultIntent.putExtra(\"questionInteger\", \"25\");\n-        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n-        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n+        int randomInteger = (new Random()).nextInt(255);\n+        resultIntent.putExtra(\"someinteger\", randomInteger);\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionImage\", null, createTempFile(\"famous\", \"jpg\")));\n-        clipData.addItem(new ClipData.Item(\"questionAudio\", null, createTempFile(\"sampleAudio\", \"wav\")));\n-        clipData.addItem(new ClipData.Item(\"questionVideo\", null, createTempFile(\"sampleVideo\", \"mp4\")));\n-        clipData.addItem(new ClipData.Item(\"questionFile\", null, createTempFile(\"fruits\", \"csv\")));\n-\n-        resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        // Check StringWidgets with answers\n-        onView(withText(\"25\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withText(\"46.74\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withText(\"sampleAnswer\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-\n-        // Check ImageWidget with answer\n-        onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-\n-        // Check AudioWidget with answer\n-        onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-\n-        // Check VideoWidget with answer\n-        onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n-\n-        // Check ArbitraryFileWidget with answer\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-    }\n-\n-    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n-    private Uri createTempFile(String name, String extension) throws IOException {\n-        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n-        copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n-        return getUriForFile(file);\n-    }\n-\n-    private Uri getUriForFile(File file) {\n-        return FileProvider.getUriForFile(Collect.getInstance(), BuildConfig.APPLICATION_ID + \".provider\", file);\n+        onView(withText(\"Here is a text value\")).check(matches(isDisplayed()));\n+        onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n     }\n }\n", "next_change": {"commit": "679464ebd53eb30a5f63caed650a591c928b439f", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex 33e10a24a..a2c7e64ec 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -80,17 +95,109 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() {\n+    public void externalApp_ShouldPopulateStringFields() {\n         Intent resultIntent = new Intent();\n-        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        int randomInteger = (new Random()).nextInt(255);\n-        resultIntent.putExtra(\"someinteger\", randomInteger);\n+        int randomInteger = new Random().nextInt(255);\n+        double scale = Math.pow(10, 2);\n+        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n+        String randomText = RandomString.make();\n+\n+        resultIntent.putExtra(\"questionInteger\", randomInteger);\n+        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n+        resultIntent.putExtra(\"questionText\", randomText);\n \n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withText(\"Here is a text value\")).check(matches(isDisplayed()));\n         onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n+        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n+        onView(withText(randomText)).check(matches(isDisplayed()));\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateImageField() throws IOException {\n+        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"famous.jpg\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withTagValue(is(\"ImageView\"))).check(matches(isDisplayed()));\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateAudioField() throws IOException {\n+        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"sampleAudio.wav\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withId(R.id.audio_controller)).check(matches(isDisplayed()));\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateVideoField() throws IOException {\n+        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"sampleVideo.mp4\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateArbitraryFileField() throws IOException {\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n+        copyFileFromAssets(\"media\" + File.separator + \"fruits.csv\", tmpJpg.getPath());\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, getUriForFile(tmpJpg)));\n+\n+        resultIntent.setClipData(clipData);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(isDisplayed()));\n+    }\n+\n+    private Uri getUriForFile(File file) {\n+        return FileProvider.getUriForFile(Collect.getInstance(), BuildConfig.APPLICATION_ID + \".provider\", file);\n     }\n }\n", "next_change": {"commit": "ce0f65667491bad121da9eb83a97cf9791ecfbb4", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex a2c7e64ec..cfd85223c 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -95,106 +92,64 @@ public class IntentGroupTest {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateStringFields() {\n-        Intent resultIntent = new Intent();\n-\n-        int randomInteger = new Random().nextInt(255);\n-        double scale = Math.pow(10, 2);\n-        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n-        String randomText = RandomString.make();\n-\n-        resultIntent.putExtra(\"questionInteger\", randomInteger);\n-        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n-        resultIntent.putExtra(\"questionText\", randomText);\n-\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n-        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n-        onView(withText(randomText)).check(matches(isDisplayed()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateImageField() throws IOException {\n+    public void externalApp_ShouldPopulateFields() throws IOException {\n+        // Check ImageWidget without answer\n         onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n         onView(withId(R.id.capture_image)).check(doesNotExist());\n         onView(withId(R.id.choose_image)).check(doesNotExist());\n \n-        Intent resultIntent = new Intent();\n-\n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"famous.jpg\", tmpJpg.getPath());\n-\n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionImage\", null, getUriForFile(tmpJpg)));\n-\n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withTagValue(is(\"ImageView\"))).check(matches(isDisplayed()));\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateAudioField() throws IOException {\n+        // Check AudioWidget without answer\n         onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n \n-        Intent resultIntent = new Intent();\n-\n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleAudio.wav\", tmpJpg.getPath());\n-\n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionAudio\", null, getUriForFile(tmpJpg)));\n-\n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n-\n-        onView(withId(R.id.audio_controller)).check(matches(isDisplayed()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateVideoField() throws IOException {\n+        // Check VideoWidget without answer\n         onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n         onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n \n+        // Check ArbitraryFileWidget without answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+\n         Intent resultIntent = new Intent();\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"sampleVideo.mp4\", tmpJpg.getPath());\n+        resultIntent.putExtra(\"questionInteger\", \"25\");\n+        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n+        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n \n         ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionVideo\", null, getUriForFile(tmpJpg)));\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, createTempFile(\"famous\", \"jpg\")));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, createTempFile(\"sampleAudio\", \"wav\")));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, createTempFile(\"sampleVideo\", \"mp4\")));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, createTempFile(\"fruits\", \"csv\")));\n \n         resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n-    }\n-\n-    @Test\n-    public void externalApp_ShouldPopulateArbitraryFileField() throws IOException {\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+        // Check StringWidgets with answers\n+        onView(withText(\"25\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"46.74\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"sampleAnswer\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n \n-        Intent resultIntent = new Intent();\n+        // Check ImageWidget with answer\n+        onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n \n-        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());\n-        copyFileFromAssets(\"media\" + File.separator + \"fruits.csv\", tmpJpg.getPath());\n+        // Check AudioWidget with answer\n+        onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n \n-        ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionFile\", null, getUriForFile(tmpJpg)));\n+        // Check VideoWidget with answer\n+        onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n \n-        resultIntent.setClipData(clipData);\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n+        // Check ArbitraryFileWidget with answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+    }\n \n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(isDisplayed()));\n+    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n+    private Uri createTempFile(String name, String extension) throws IOException {\n+        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n+        copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n+        return getUriForFile(file);\n     }\n \n     private Uri getUriForFile(File file) {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex cfd85223c..f921888c6 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -93,55 +99,152 @@ public class IntentGroupTest {\n \n     @Test\n     public void externalApp_ShouldPopulateFields() throws IOException {\n-        // Check ImageWidget without answer\n-        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n-        onView(withId(R.id.capture_image)).check(doesNotExist());\n-        onView(withId(R.id.choose_image)).check(doesNotExist());\n-\n-        // Check AudioWidget without answer\n-        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n-\n-        // Check VideoWidget without answer\n-        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n-        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n-\n-        // Check ArbitraryFileWidget without answer\n-        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+        assertImageWidgetWithoutAnswer();\n+        assertAudioWidgetWithoutAnswer();\n+        assertVideoWidgetWithoutAnswer();\n+        assertFileWidgetWithoutAnswer();\n \n         Intent resultIntent = new Intent();\n \n+        Uri imageUri = createTempFile(\"famous\", \"jpg\");\n+        Uri audioUri = createTempFile(\"sampleAudio\", \"wav\");\n+        Uri videoUri = createTempFile(\"sampleVideo\", \"mp4\");\n+        Uri fileUri = createTempFile(\"fruits\", \"csv\");\n+\n         resultIntent.putExtra(\"questionInteger\", \"25\");\n         resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n         resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n+        resultIntent.putExtra(\"questionImage\", imageUri);\n+        resultIntent.putExtra(\"questionAudio\", audioUri);\n+        resultIntent.putExtra(\"questionVideo\", videoUri);\n+        resultIntent.putExtra(\"questionFile\", fileUri);\n+\n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, imageUri));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, audioUri));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, videoUri));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, fileUri));\n+\n+        resultIntent.setClipData(clipData);\n+        resultIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        assertImageWidgetWithAnswer();\n+        assertAudioWidgetWithAnswer();\n+        assertVideoWidgetWithAnswer();\n+        assertFileWidgetWithAnswer();\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldNotPopulateFieldsIfAnswersAreNull() {\n+        assertImageWidgetWithoutAnswer();\n+        assertAudioWidgetWithoutAnswer();\n+        assertVideoWidgetWithoutAnswer();\n+        assertFileWidgetWithoutAnswer();\n+\n+        Intent resultIntent = new Intent();\n+\n+        resultIntent.putExtra(\"questionInteger\", (Bundle) null);\n+        resultIntent.putExtra(\"questionDecimal\", (Bundle) null);\n+        resultIntent.putExtra(\"questionText\", (Bundle) null);\n+        resultIntent.putExtra(\"questionImage\", (Bundle) null);\n+        resultIntent.putExtra(\"questionAudio\", (Bundle) null);\n+        resultIntent.putExtra(\"questionVideo\", (Bundle) null);\n+        resultIntent.putExtra(\"questionFile\", (Bundle) null);\n \n         ClipData clipData = ClipData.newRawUri(null, null);\n-        clipData.addItem(new ClipData.Item(\"questionImage\", null, createTempFile(\"famous\", \"jpg\")));\n-        clipData.addItem(new ClipData.Item(\"questionAudio\", null, createTempFile(\"sampleAudio\", \"wav\")));\n-        clipData.addItem(new ClipData.Item(\"questionVideo\", null, createTempFile(\"sampleVideo\", \"mp4\")));\n-        clipData.addItem(new ClipData.Item(\"questionFile\", null, createTempFile(\"fruits\", \"csv\")));\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, null));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, null));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, null));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, null));\n \n         resultIntent.setClipData(clipData);\n+        resultIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        onView(withIndex(withClassName(endsWith(\"EditText\")), 0)).check(matches(withText(\"\")));\n+        onView(withIndex(withClassName(endsWith(\"EditText\")), 1)).check(matches(withText(\"\")));\n+        onView(withIndex(withClassName(endsWith(\"EditText\")), 2)).check(matches(withText(\"\")));\n+\n+        assertImageWidgetWithoutAnswer();\n+        assertAudioWidgetWithoutAnswer();\n+        assertVideoWidgetWithoutAnswer();\n+        assertFileWidgetWithoutAnswer();\n+    }\n+\n+    @Test\n+    public void collect_shouldNotCrashWhenAnyExceptionIsThrownWhileReceivingAnswer() {\n+        assertImageWidgetWithoutAnswer();\n+\n+        Intent resultIntent = new Intent();\n+\n+        Uri uri = mock(Uri.class);\n+        doThrow(new SecurityException()).when(uri);\n+\n+        resultIntent.putExtra(\"questionImage\", uri);\n+\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        // Check StringWidgets with answers\n-        onView(withText(\"25\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withText(\"46.74\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n-        onView(withText(\"sampleAnswer\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        assertImageWidgetWithoutAnswer();\n+    }\n+\n+    @Test\n+    public void collect_shouldNotCrashWhenAnyErrorIsThrownWhileReceivingAnswer() {\n+        assertImageWidgetWithoutAnswer();\n+\n+        Intent resultIntent = new Intent();\n+\n+        Uri uri = mock(Uri.class);\n+        doThrow(new Error()).when(uri);\n+\n+        resultIntent.putExtra(\"questionImage\", uri);\n+\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n+\n+        onView(withText(\"This is buttonText\")).perform(click());\n+\n+        assertImageWidgetWithoutAnswer();\n+    }\n+\n+    private void assertImageWidgetWithoutAnswer() {\n+        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+    }\n \n-        // Check ImageWidget with answer\n+    private void assertAudioWidgetWithoutAnswer() {\n+        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n+    }\n+\n+    private void assertVideoWidgetWithoutAnswer() {\n+        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n+    }\n+\n+    private void assertFileWidgetWithoutAnswer() {\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+    }\n+\n+    private void assertImageWidgetWithAnswer() {\n         onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n         onView(withId(R.id.capture_image)).check(doesNotExist());\n         onView(withId(R.id.choose_image)).check(doesNotExist());\n+    }\n \n-        // Check AudioWidget with answer\n+    private void assertAudioWidgetWithAnswer() {\n         onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+    }\n \n-        // Check VideoWidget with answer\n+    private void assertVideoWidgetWithAnswer() {\n         onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n         onView(withId(R.id.play_video)).check(matches(isEnabled()));\n+    }\n \n-        // Check ArbitraryFileWidget with answer\n+    private void assertFileWidgetWithAnswer() {\n         onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n     }\n \n", "next_change": {"commit": "0bbd104b1bf17d4db67bfebb6f64c6a56acdf562", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\nindex f921888c6..88185f633 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java\n", "chunk": "@@ -248,9 +249,13 @@ public class IntentGroupTest {\n         onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n     }\n \n-    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n     private Uri createTempFile(String name, String extension) throws IOException {\n-        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));\n+        // Use the phones downloads dir for temp files\n+        File downloadsDir = ApplicationProvider\n+                .getApplicationContext()\n+                .getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS);\n+\n+        File file = File.createTempFile(name, extension, downloadsDir);\n         copyFileFromAssets(\"media\" + File.separator + name + \".\" + extension, file.getPath());\n         return getUriForFile(file);\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "message": "Merge commit", "committedDate": null}, {"oid": "3fe70a6c5e04d2fd95e8eb5eb8f454b9508bdadc", "committedDate": "2020-11-05 16:07:20 +0100", "message": "Fixed tests"}, {"oid": "3b08d4d357a2dcce668f57a3a2dae474a5c77fce", "committedDate": "2020-11-26 16:41:51 +0100", "message": "Fixed tests"}, {"oid": "788a0b8a51395b9ff2972f38f3227a04687854c4", "committedDate": "2020-12-01 10:22:43 +0000", "message": "Fix test missing scrolling"}, {"oid": "804cd24da5dbeec517e900d7d9e4b31c5e1ac8eb", "committedDate": "2020-12-03 15:33:32 +0100", "message": "Merge branch 'master' into COLLECT-4209"}, {"oid": "9ea40204f727949e2c3d146f5a53ab5792518f04", "committedDate": "2020-12-04 14:09:49 +0100", "message": "Fixed IntentGroupTest"}, {"oid": "cb1a1a616e8e59202c988f179a1f02e8aa3cb1bf", "committedDate": "2021-01-25 14:12:02 +0100", "message": "Improved tests for intent group"}, {"oid": "7f9a90a485292516c13cf0213f243419d993e396", "committedDate": "2021-01-25 14:17:03 +0100", "message": "Moved the new message about not granted file permission to strings"}, {"oid": "51aa28519339ee5b8da715bbb67a666f39c96643", "committedDate": "2021-01-28 14:43:45 +0100", "message": "Fixed tests"}, {"oid": "b8498278ae2294e67a99d1293be0b8b289de63e6", "committedDate": "2021-02-17 03:45:35 +0100", "message": "Removed storage permissions"}, {"oid": "c194fdbd6b02b8f05b1ed826fad11931e2a88de9", "committedDate": "2021-05-17 11:22:55 +0100", "message": "Remove any use of IntentsTestRule"}, {"oid": "ec21447a77bc864b6e1e4277ac2a8f7b10717484", "committedDate": "2021-05-26 14:16:51 +0100", "message": "Remove use of StoragePathProvider in form loading utils"}, {"oid": "0bbd104b1bf17d4db67bfebb6f64c6a56acdf562", "committedDate": "2021-10-29 15:21:49 +0100", "message": "Use downloads directory for storing test temp files"}, {"oid": "15116be7d3feeb853f7c90d5c4083aa5201de443", "committedDate": "2021-11-03 18:12:13 +0000", "message": "Always assert on form entry page when using FormActivityTestRule to avoid early interactions"}, {"oid": "da6c7b217a014a4a0491ab4f36e6fe17ebea12d5", "committedDate": "2021-11-08 12:57:47 +0000", "message": "Use correct toast assertion"}, {"oid": "805d0938a4a1bb14272ac4286006a1bde82613c5", "committedDate": "2021-11-08 13:33:39 +0000", "message": "Optimize imports"}, {"oid": "29b4ab364349d66f0165ba648bbf2f2e15531e1e", "committedDate": "2021-12-20 11:55:52 +0100", "message": "Moved RecordedIntentsRule to testshared module and resued in PermissionDeniedDialogTest"}, {"oid": "d24fbcbf7407900c7d0509ed91cd3f8c17077127", "committedDate": "2022-01-11 17:01:17 +0000", "message": "Make Geopoint dialog scrollable"}, {"oid": "0a7adc5e26a0187278a0d9b78cc91571ba31d09e", "committedDate": "2022-01-18 14:06:46 +0100", "message": "Remove CopyFormRule"}, {"oid": "fd6e73ab7504eaa956537fca25be6e70759627ee", "committedDate": "2022-01-18 17:10:53 +0100", "message": "Move initial form copy to FormActivityTestRule class"}, {"oid": "4d756215a40a11203f641b5321416e2ee3fb2e33", "committedDate": "2022-02-04 15:36:52 +0100", "message": "Move test rules to specific folder"}, {"oid": "0225485f52c099cd937ee5ab85ecd8caa78d4b61", "committedDate": "2022-02-10 21:09:43 +0100", "message": "Moved CustomMatchers to matchers package"}, {"oid": "bd353685fa7c65146f5aabb16b685234bf3fbfa3", "committedDate": "2022-02-18 13:26:23 +0000", "message": "Move android specific (nothing to do with our app) tsest helpers to a package"}, {"oid": "96699239c7aa48b8c4f2eaba71c680d355696097", "committedDate": "2022-02-18 13:42:50 +0000", "message": "Fix runtime problems caused by Robolectric being included in androidTest"}, {"oid": "a367b960425b593fbe6e6d9a911e0c28d1e44e2a", "committedDate": "2022-07-14 15:38:03 +0200", "message": "Removed redundant granting permissions in tests"}, {"oid": "b946e82b541f56e5eec8a04a52c31f59cf58fd28", "committedDate": "2023-02-06 22:05:15 +0100", "message": "Remove now unneeded NestedScrollToAction"}, {"oid": "7e06f6d1228e0a867d3b4a051d9f6ba155c3f5c3", "committedDate": "2023-02-15 16:04:29 +0100", "message": "Fixed IntentGroupTest"}, {"oid": "b2104532efd5c0157e234467fba4465b89dcf4aa", "committedDate": "2023-03-22 16:24:37 +0100", "message": "Create new rule for testing FormEntryActivity"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjE5Nw==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514632197", "body": "Will this implicitly clear any existing value?\r\n\r\nI think there's one more error case missing -- if the type of the file passed from the external app doesn't match the question type. For example, a .mp3 file shouldn't be allowed for an image widget.", "bodyText": "Will this implicitly clear any existing value?\nI think there's one more error case missing -- if the type of the file passed from the external app doesn't match the question type. For example, a .mp3 file shouldn't be allowed for an image widget.", "bodyHTML": "<p dir=\"auto\">Will this implicitly clear any existing value?</p>\n<p dir=\"auto\">I think there's one more error case missing -- if the type of the file passed from the external app doesn't match the question type. For example, a .mp3 file shouldn't be allowed for an image widget.</p>", "author": "lognaturel", "createdAt": "2020-10-29T23:53:53Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java", "diffHunk": "@@ -480,39 +486,58 @@ public void scrollTo(@Nullable QuestionWidget qw) {\n      * Saves answers for the widgets in this view. Called when the widgets are in an intent group.\n      */\n     public void setDataForFields(Bundle bundle) throws JavaRosaException {\n-        if (bundle == null) {\n+        FormController formController = Collect.getInstance().getFormController();\n+        if (formController == null) {\n             return;\n         }\n-        FormController formController = Collect.getInstance().getFormController();\n-        Set<String> keys = bundle.keySet();\n-        for (String key : keys) {\n-            for (QuestionWidget questionWidget : widgets) {\n-                FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n-                TreeReference treeReference =\n-                        (TreeReference) prompt.getFormElement().getBind().getReference();\n-\n-                if (treeReference.getNameLast().equals(key)) {\n-                    switch (prompt.getDataType()) {\n-                        case Constants.DATATYPE_TEXT:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asStringData(bundle.get(key)));\n-                            break;\n-                        case Constants.DATATYPE_INTEGER:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asIntegerData(bundle.get(key)));\n-                            break;\n-                        case Constants.DATATYPE_DECIMAL:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asDecimalData(bundle.get(key)));\n-                            break;\n-                        default:\n-                            throw new RuntimeException(\n-                                    getContext().getString(R.string.ext_assign_value_error,\n-                                            treeReference.toString(false)));\n-                    }\n \n-                    ((StringWidget) questionWidget).setDisplayValueFromModel();\n-                    break;\n+        if (bundle != null) {\n+            Set<String> keys = bundle.keySet();\n+            for (String key : keys) {\n+                for (QuestionWidget questionWidget : widgets) {\n+                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n+                    TreeReference treeReference =\n+                            (TreeReference) prompt.getFormElement().getBind().getReference();\n+\n+                    if (treeReference.getNameLast().equals(key)) {\n+                        switch (prompt.getDataType()) {\n+                            case Constants.DATATYPE_TEXT:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asStringData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                                break;\n+                            case Constants.DATATYPE_INTEGER:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asIntegerData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                                break;\n+                            case Constants.DATATYPE_DECIMAL:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asDecimalData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                                break;\n+                            case Constants.DATATYPE_BINARY:\n+                                try {\n+                                    Uri uri = (Uri) bundle.get(key);\n+                                    try {\n+                                        File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n+                                        //TODO might be better to use QuestionMediaManager in the future\n+                                        FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n+                                        ((WidgetDataReceiver) questionWidget).setData(destFile);\n+                                    } catch (SecurityException e) {\n+                                        Timber.w(e);", "originalCommit": "3dc61b4e2e7b4d4635fb40479fb9bb67119d726d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3ODU1Mg==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r515078552", "bodyText": "When it comes to file formats please take a look below I described that it should be a separate pr if needed because we don't check file types using binary widgets normally so why here in intents group?\n\nWill this implicitly clear any existing value?\n\nwe call setData() in the last step so if any exception occurs it's just not called and doesn't remove an existing answer.", "author": "grzesiek2010", "createdAt": "2020-10-30T12:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE2MjkwMQ==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r515162901", "bodyText": "doesn't remove an existing answer\n\nThis is a weird case -- a user would have to get data from an external app, have it work fine, then get data again and have it fail. It's not very likely but then if it does happen I think it's nice for the answer to be cleared so it's easier for a user to see that something unexpected happened. It should be straightforward to clear in each catch block, right?", "author": "lognaturel", "createdAt": "2020-10-30T15:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxNzYzMw==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r515217633", "bodyText": "Again like in case of checking file types I think it wouldn't align with what normal widgets outside intent groups do. If something goes wrong we don't remove an existed answer. We remove the old answer only in setData() so just before adding a new one where we are almost sure that everything is fine.", "author": "grzesiek2010", "createdAt": "2020-10-30T16:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzNDAyNw==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r515234027", "bodyText": "Next time let's make sure we have these conversations when we're considering the spec and make sure the implementation is based on the spec! I'll file issues once this is merged.", "author": "lognaturel", "createdAt": "2020-10-30T16:46:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjE5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "53d0d807f8a401ff7c2ea79d5181ccbe3bd1515b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 65acacc06..441dfb613 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -486,58 +470,39 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n      * Saves answers for the widgets in this view. Called when the widgets are in an intent group.\n      */\n     public void setDataForFields(Bundle bundle) throws JavaRosaException {\n-        FormController formController = Collect.getInstance().getFormController();\n-        if (formController == null) {\n+        if (bundle == null) {\n             return;\n         }\n-\n-        if (bundle != null) {\n-            Set<String> keys = bundle.keySet();\n-            for (String key : keys) {\n-                for (QuestionWidget questionWidget : widgets) {\n-                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n-                    TreeReference treeReference =\n-                            (TreeReference) prompt.getFormElement().getBind().getReference();\n-\n-                    if (treeReference.getNameLast().equals(key)) {\n-                        switch (prompt.getDataType()) {\n-                            case Constants.DATATYPE_TEXT:\n-                                formController.saveAnswer(prompt.getIndex(),\n-                                        ExternalAppsUtils.asStringData(bundle.get(key)));\n-                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n-                                break;\n-                            case Constants.DATATYPE_INTEGER:\n-                                formController.saveAnswer(prompt.getIndex(),\n-                                        ExternalAppsUtils.asIntegerData(bundle.get(key)));\n-                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n-                                break;\n-                            case Constants.DATATYPE_DECIMAL:\n-                                formController.saveAnswer(prompt.getIndex(),\n-                                        ExternalAppsUtils.asDecimalData(bundle.get(key)));\n-                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n-                                break;\n-                            case Constants.DATATYPE_BINARY:\n-                                try {\n-                                    Uri uri = (Uri) bundle.get(key);\n-                                    try {\n-                                        File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n-                                        //TODO might be better to use QuestionMediaManager in the future\n-                                        FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n-                                        ((WidgetDataReceiver) questionWidget).setData(destFile);\n-                                    } catch (SecurityException e) {\n-                                        Timber.w(e);\n-                                    }\n-                                } catch (ClassCastException e) {\n-                                    Timber.w(e);\n-                                }\n-                                break;\n-                            default:\n-                                throw new RuntimeException(\n-                                        getContext().getString(R.string.ext_assign_value_error,\n-                                                treeReference.toString(false)));\n-                        }\n-                        break;\n+        FormController formController = Collect.getInstance().getFormController();\n+        Set<String> keys = bundle.keySet();\n+        for (String key : keys) {\n+            for (QuestionWidget questionWidget : widgets) {\n+                FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n+                TreeReference treeReference =\n+                        (TreeReference) prompt.getFormElement().getBind().getReference();\n+\n+                if (treeReference.getNameLast().equals(key)) {\n+                    switch (prompt.getDataType()) {\n+                        case Constants.DATATYPE_TEXT:\n+                            formController.saveAnswer(prompt.getIndex(),\n+                                    ExternalAppsUtils.asStringData(bundle.get(key)));\n+                            break;\n+                        case Constants.DATATYPE_INTEGER:\n+                            formController.saveAnswer(prompt.getIndex(),\n+                                    ExternalAppsUtils.asIntegerData(bundle.get(key)));\n+                            break;\n+                        case Constants.DATATYPE_DECIMAL:\n+                            formController.saveAnswer(prompt.getIndex(),\n+                                    ExternalAppsUtils.asDecimalData(bundle.get(key)));\n+                            break;\n+                        default:\n+                            throw new RuntimeException(\n+                                    getContext().getString(R.string.ext_assign_value_error,\n+                                            treeReference.toString(false)));\n                     }\n+\n+                    ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                    break;\n                 }\n             }\n         }\n", "next_change": {"commit": "ad1af29dd6cc6082fa22776512225defa2f66f8c", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 441dfb613..647f78e83 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -469,40 +477,66 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n     /**\n      * Saves answers for the widgets in this view. Called when the widgets are in an intent group.\n      */\n-    public void setDataForFields(Bundle bundle) throws JavaRosaException {\n-        if (bundle == null) {\n+    public void setDataForFields(Bundle bundle, ClipData clipData) throws JavaRosaException {\n+        FormController formController = Collect.getInstance().getFormController();\n+        if (formController == null) {\n             return;\n         }\n-        FormController formController = Collect.getInstance().getFormController();\n-        Set<String> keys = bundle.keySet();\n-        for (String key : keys) {\n-            for (QuestionWidget questionWidget : widgets) {\n-                FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n-                TreeReference treeReference =\n-                        (TreeReference) prompt.getFormElement().getBind().getReference();\n-\n-                if (treeReference.getNameLast().equals(key)) {\n-                    switch (prompt.getDataType()) {\n-                        case Constants.DATATYPE_TEXT:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asStringData(bundle.get(key)));\n-                            break;\n-                        case Constants.DATATYPE_INTEGER:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asIntegerData(bundle.get(key)));\n-                            break;\n-                        case Constants.DATATYPE_DECIMAL:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asDecimalData(bundle.get(key)));\n-                            break;\n-                        default:\n-                            throw new RuntimeException(\n-                                    getContext().getString(R.string.ext_assign_value_error,\n-                                            treeReference.toString(false)));\n+\n+        if (bundle != null) {\n+            Set<String> keys = bundle.keySet();\n+            for (String key : keys) {\n+                for (QuestionWidget questionWidget : widgets) {\n+                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n+                    TreeReference treeReference =\n+                            (TreeReference) prompt.getFormElement().getBind().getReference();\n+\n+                    if (treeReference.getNameLast().equals(key)) {\n+                        switch (prompt.getDataType()) {\n+                            case Constants.DATATYPE_TEXT:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asStringData(bundle.get(key)));\n+                                break;\n+                            case Constants.DATATYPE_INTEGER:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asIntegerData(bundle.get(key)));\n+                                break;\n+                            case Constants.DATATYPE_DECIMAL:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asDecimalData(bundle.get(key)));\n+                                break;\n+                            default:\n+                                throw new RuntimeException(\n+                                        getContext().getString(R.string.ext_assign_value_error,\n+                                                treeReference.toString(false)));\n+                        }\n+\n+                        ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                        break;\n                     }\n+                }\n+            }\n+        }\n+\n+        if (clipData != null) {\n+            for (int i = 0; i < clipData.getItemCount(); i++) {\n+                CharSequence key = clipData.getItemAt(i).getText();\n+                if (key == null) {\n+                    continue;\n+                }\n \n-                    ((StringWidget) questionWidget).setDisplayValueFromModel();\n-                    break;\n+                for (QuestionWidget questionWidget : widgets) {\n+                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n+\n+                    if (FormEntryPromptUtils.getQuestionName(prompt).equals(key.toString())\n+                            && prompt.getDataType() == Constants.DATATYPE_BINARY) {\n+                        Uri uri = clipData.getItemAt(i).getUri();\n+                        if (uri != null) {\n+                            File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n+                            FileUtils.saveMediaFileFromUri(uri, destFile, getContext());\n+                            ((WidgetDataReceiver) questionWidget).setData(destFile);\n+                        }\n+                    }\n                 }\n             }\n         }\n", "next_change": {"commit": "f3e12da2c903871b5f2a29c57b510560eab81cf0", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 647f78e83..71ac9930e 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -532,9 +532,13 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                             && prompt.getDataType() == Constants.DATATYPE_BINARY) {\n                         Uri uri = clipData.getItemAt(i).getUri();\n                         if (uri != null) {\n-                            File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n-                            FileUtils.saveMediaFileFromUri(uri, destFile, getContext());\n-                            ((WidgetDataReceiver) questionWidget).setData(destFile);\n+                            try {\n+                                File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n+                                FileUtils.saveMediaFileFromUri(uri, destFile, getContext());\n+                                ((WidgetDataReceiver) questionWidget).setData(destFile);\n+                            } catch (SecurityException e) {\n+                                Timber.w(e);\n+                            }\n                         }\n                     }\n                 }\n", "next_change": {"commit": "0be7b76be1b8313967b68ce2c05aa6e4374feadf", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 71ac9930e..96b8f2510 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -534,7 +534,7 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                         if (uri != null) {\n                             try {\n                                 File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n-                                FileUtils.saveMediaFileFromUri(uri, destFile, getContext());\n+                                FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n                                 ((WidgetDataReceiver) questionWidget).setData(destFile);\n                             } catch (SecurityException e) {\n                                 Timber.w(e);\n", "next_change": {"commit": "bf455d711eba941af42004336856fee48de440e6", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 96b8f2510..0d164748e 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -534,6 +534,7 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                         if (uri != null) {\n                             try {\n                                 File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n+                                //TODO might be better to use QuestionMediaManager in the future\n                                 FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n                                 ((WidgetDataReceiver) questionWidget).setData(destFile);\n                             } catch (SecurityException e) {\n", "next_change": {"commit": "e82a1a1f599bbe0055be67c6b580eb1687c44d64", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 0d164748e..fb55f7e2d 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -496,55 +494,43 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                             case Constants.DATATYPE_TEXT:\n                                 formController.saveAnswer(prompt.getIndex(),\n                                         ExternalAppsUtils.asStringData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n                                 break;\n                             case Constants.DATATYPE_INTEGER:\n                                 formController.saveAnswer(prompt.getIndex(),\n                                         ExternalAppsUtils.asIntegerData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n                                 break;\n                             case Constants.DATATYPE_DECIMAL:\n                                 formController.saveAnswer(prompt.getIndex(),\n                                         ExternalAppsUtils.asDecimalData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                                break;\n+                            case Constants.DATATYPE_BINARY:\n+                                try {\n+                                    Uri uri = (Uri) bundle.get(key);\n+                                    try {\n+                                        File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n+                                        //TODO might be better to use QuestionMediaManager in the future\n+                                        FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n+                                        ((WidgetDataReceiver) questionWidget).setData(destFile);\n+                                    } catch (SecurityException e) {\n+                                        Timber.w(e);\n+                                    }\n+                                } catch (ClassCastException e) {\n+                                    Timber.w(e);\n+                                }\n                                 break;\n                             default:\n                                 throw new RuntimeException(\n                                         getContext().getString(R.string.ext_assign_value_error,\n                                                 treeReference.toString(false)));\n                         }\n-\n-                        ((StringWidget) questionWidget).setDisplayValueFromModel();\n                         break;\n                     }\n                 }\n             }\n         }\n-\n-        if (clipData != null) {\n-            for (int i = 0; i < clipData.getItemCount(); i++) {\n-                CharSequence key = clipData.getItemAt(i).getText();\n-                if (key == null) {\n-                    continue;\n-                }\n-\n-                for (QuestionWidget questionWidget : widgets) {\n-                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n-\n-                    if (FormEntryPromptUtils.getQuestionName(prompt).equals(key.toString())\n-                            && prompt.getDataType() == Constants.DATATYPE_BINARY) {\n-                        Uri uri = clipData.getItemAt(i).getUri();\n-                        if (uri != null) {\n-                            try {\n-                                File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n-                                //TODO might be better to use QuestionMediaManager in the future\n-                                FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n-                                ((WidgetDataReceiver) questionWidget).setData(destFile);\n-                            } catch (SecurityException e) {\n-                                Timber.w(e);\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n     }\n \n     public boolean suppressFlingGesture(MotionEvent e1, MotionEvent e2, float velocityX,\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 65acacc06..56066711a 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -519,15 +509,13 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                             case Constants.DATATYPE_BINARY:\n                                 try {\n                                     Uri uri = (Uri) bundle.get(key);\n-                                    try {\n+                                    if (uri != null) {\n                                         File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n                                         //TODO might be better to use QuestionMediaManager in the future\n                                         FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n                                         ((WidgetDataReceiver) questionWidget).setData(destFile);\n-                                    } catch (SecurityException e) {\n-                                        Timber.w(e);\n                                     }\n-                                } catch (ClassCastException e) {\n+                                } catch (Exception | Error e) {\n                                     Timber.w(e);\n                                 }\n                                 break;\n", "next_change": {"commit": "30628c40d553bbf9c8cebd785e84ab4f3251d2e3", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 56066711a..5adc2c312 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -493,28 +497,40 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                         switch (prompt.getDataType()) {\n                             case Constants.DATATYPE_TEXT:\n                                 formController.saveAnswer(prompt.getIndex(),\n-                                        ExternalAppsUtils.asStringData(bundle.get(key)));\n+                                        ExternalAppsUtils.asStringData(answer));\n                                 ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                                questionWidget.showAnswerContainer();\n                                 break;\n                             case Constants.DATATYPE_INTEGER:\n                                 formController.saveAnswer(prompt.getIndex(),\n-                                        ExternalAppsUtils.asIntegerData(bundle.get(key)));\n+                                        ExternalAppsUtils.asIntegerData(answer));\n                                 ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                                questionWidget.showAnswerContainer();\n                                 break;\n                             case Constants.DATATYPE_DECIMAL:\n                                 formController.saveAnswer(prompt.getIndex(),\n-                                        ExternalAppsUtils.asDecimalData(bundle.get(key)));\n+                                        ExternalAppsUtils.asDecimalData(answer));\n                                 ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                                questionWidget.showAnswerContainer();\n                                 break;\n                             case Constants.DATATYPE_BINARY:\n                                 try {\n-                                    Uri uri = (Uri) bundle.get(key);\n+                                    Uri uri;\n+                                    if (answer instanceof Uri) {\n+                                        uri = (Uri) answer;\n+                                    } else if (answer instanceof String) {\n+                                        uri = Uri.parse(bundle.getString(key));\n+                                    } else {\n+                                        throw new RuntimeException(\"The value for \" + key + \" must be a URI but it is \" + answer);\n+                                    }\n+                                    \n                                     if (uri != null) {\n                                         File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n                                         //TODO might be better to use QuestionMediaManager in the future\n                                         FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n                                         ((WidgetDataReceiver) questionWidget).setData(destFile);\n                                     }\n+                                    questionWidget.showAnswerContainer();\n                                 } catch (Exception | Error e) {\n                                     Timber.w(e);\n                                 }\n", "next_change": {"commit": "b652335ebffea0783431e4aaa61f742dae06a5f5", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 5adc2c312..9916d19c0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -530,7 +525,6 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                                         FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n                                         ((WidgetDataReceiver) questionWidget).setData(destFile);\n                                     }\n-                                    questionWidget.showAnswerContainer();\n                                 } catch (Exception | Error e) {\n                                     Timber.w(e);\n                                 }\n", "next_change": {"commit": "804cd24da5dbeec517e900d7d9e4b31c5e1ac8eb", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 9916d19c0..768d54a61 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -525,6 +530,7 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                                         FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n                                         ((WidgetDataReceiver) questionWidget).setData(destFile);\n                                     }\n+                                    questionWidget.showAnswerContainer();\n                                 } catch (Exception | Error e) {\n                                     Timber.w(e);\n                                 }\n", "next_change": {"commit": "57909eb117e74aa77a3a0937aec068bfe9359975", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 768d54a61..f2a10d0d4 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -523,14 +530,16 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                                     } else {\n                                         throw new RuntimeException(\"The value for \" + key + \" must be a URI but it is \" + answer);\n                                     }\n-                                    \n-                                    if (uri != null) {\n-                                        File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n+                                    if (permissionsProvider.isReadUriPermissionGranted(uri, getContext().getContentResolver())) {\n+                                        File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(uri));\n                                         //TODO might be better to use QuestionMediaManager in the future\n                                         FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n                                         ((WidgetDataReceiver) questionWidget).setData(destFile);\n+\n+                                        questionWidget.showAnswerContainer();\n+                                    } else {\n+                                        ToastUtils.showLongToast(\"Read permission to the file not granted.\");\n                                     }\n-                                    questionWidget.showAnswerContainer();\n                                 } catch (Exception | Error e) {\n                                     Timber.w(e);\n                                 }\n", "next_change": {"commit": "7f9a90a485292516c13cf0213f243419d993e396", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex f2a10d0d4..0db1c7e72 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -538,7 +538,7 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n \n                                         questionWidget.showAnswerContainer();\n                                     } else {\n-                                        ToastUtils.showLongToast(\"Read permission to the file not granted.\");\n+                                        ToastUtils.showLongToast(R.string.read_file_permission_not_granted);\n                                     }\n                                 } catch (Exception | Error e) {\n                                     Timber.w(e);\n", "next_change": {"commit": "e0b4a3f3e61a466debd283d232689e345b34d306", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 0db1c7e72..b3141b969 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -530,16 +531,22 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                                     } else {\n                                         throw new RuntimeException(\"The value for \" + key + \" must be a URI but it is \" + answer);\n                                     }\n-                                    if (permissionsProvider.isReadUriPermissionGranted(uri, getContext().getContentResolver())) {\n-                                        File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(uri));\n-                                        //TODO might be better to use QuestionMediaManager in the future\n-                                        FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n-                                        ((WidgetDataReceiver) questionWidget).setData(destFile);\n-\n-                                        questionWidget.showAnswerContainer();\n-                                    } else {\n-                                        ToastUtils.showLongToast(R.string.read_file_permission_not_granted);\n-                                    }\n+                                    permissionsProvider.requestReadUriPermission((Activity) getContext(), uri, getContext().getContentResolver(), new PermissionListener() {\n+                                        @Override\n+                                        public void granted() {\n+                                            File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(uri));\n+                                            //TODO might be better to use QuestionMediaManager in the future\n+                                            FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n+                                            ((WidgetDataReceiver) questionWidget).setData(destFile);\n+\n+                                            questionWidget.showAnswerContainer();\n+                                        }\n+\n+                                        @Override\n+                                        public void denied() {\n+\n+                                        }\n+                                    });\n                                 } catch (Exception | Error e) {\n                                     Timber.w(e);\n                                 }\n", "next_change": {"commit": "2e2f32e6874b4fb1248303622e673e9c3761f5cf", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex b3141b969..784b944b7 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -531,22 +528,16 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                                     } else {\n                                         throw new RuntimeException(\"The value for \" + key + \" must be a URI but it is \" + answer);\n                                     }\n-                                    permissionsProvider.requestReadUriPermission((Activity) getContext(), uri, getContext().getContentResolver(), new PermissionListener() {\n-                                        @Override\n-                                        public void granted() {\n-                                            File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(uri));\n-                                            //TODO might be better to use QuestionMediaManager in the future\n-                                            FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n-                                            ((WidgetDataReceiver) questionWidget).setData(destFile);\n-\n-                                            questionWidget.showAnswerContainer();\n-                                        }\n-\n-                                        @Override\n-                                        public void denied() {\n-\n-                                        }\n-                                    });\n+                                    if (permissionsProvider.isReadUriPermissionGranted(uri, getContext().getContentResolver())) {\n+                                        File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(uri));\n+                                        //TODO might be better to use QuestionMediaManager in the future\n+                                        FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n+                                        ((WidgetDataReceiver) questionWidget).setData(destFile);\n+\n+                                        questionWidget.showAnswerContainer();\n+                                    } else {\n+                                        ToastUtils.showLongToast(R.string.read_file_permission_not_granted);\n+                                    }\n                                 } catch (Exception | Error e) {\n                                     Timber.w(e);\n                                 }\n", "next_change": {"commit": "94b779188a11065426c37edde5439c424e63cef5", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 784b944b7..003b62edc 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -528,16 +529,22 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                                     } else {\n                                         throw new RuntimeException(\"The value for \" + key + \" must be a URI but it is \" + answer);\n                                     }\n-                                    if (permissionsProvider.isReadUriPermissionGranted(uri, getContext().getContentResolver())) {\n-                                        File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(uri));\n-                                        //TODO might be better to use QuestionMediaManager in the future\n-                                        FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n-                                        ((WidgetDataReceiver) questionWidget).setData(destFile);\n-\n-                                        questionWidget.showAnswerContainer();\n-                                    } else {\n-                                        ToastUtils.showLongToast(R.string.read_file_permission_not_granted);\n-                                    }\n+                                    permissionsProvider.requestReadUriPermission((Activity) getContext(), uri, getContext().getContentResolver(), new PermissionListener() {\n+                                        @Override\n+                                        public void granted() {\n+                                            File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(uri));\n+                                            //TODO might be better to use QuestionMediaManager in the future\n+                                            FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n+                                            ((WidgetDataReceiver) questionWidget).setData(destFile);\n+\n+                                            questionWidget.showAnswerContainer();\n+                                        }\n+\n+                                        @Override\n+                                        public void denied() {\n+\n+                                        }\n+                                    });\n                                 } catch (Exception | Error e) {\n                                     Timber.w(e);\n                                 }\n", "next_change": {"commit": "831d7e0dab94758e2bc3448889aab71b85c5e1ef", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\nindex 003b62edc..045d6bcae 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java\n", "chunk": "@@ -529,21 +531,17 @@ public class ODKView extends FrameLayout implements OnLongClickListener, WidgetV\n                                     } else {\n                                         throw new RuntimeException(\"The value for \" + key + \" must be a URI but it is \" + answer);\n                                     }\n+\n                                     permissionsProvider.requestReadUriPermission((Activity) getContext(), uri, getContext().getContentResolver(), new PermissionListener() {\n                                         @Override\n                                         public void granted() {\n-                                            File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(uri));\n+                                            File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentUriHelper.getFileExtensionFromUri(uri));\n                                             //TODO might be better to use QuestionMediaManager in the future\n                                             FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n                                             ((WidgetDataReceiver) questionWidget).setData(destFile);\n \n                                             questionWidget.showAnswerContainer();\n                                         }\n-\n-                                        @Override\n-                                        public void denied() {\n-\n-                                        }\n                                     });\n                                 } catch (Exception | Error e) {\n                                     Timber.w(e);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "8e6876f11d85f53a0e05aca5ff0c46a05b56f861", "message": "Merge commit", "committedDate": null}, {"oid": "0337d67b98f0cddee876ee7c7dc234edd09f97e7", "committedDate": "2020-11-05 09:11:50 -0800", "message": "Add support for launching apps without DEFAULT category"}, {"oid": "26b842e1c8e03ee27f0237fad77455dccfd66e29", "committedDate": "2020-11-05 09:14:41 -0800", "message": "Allow string or Uri for binary extra"}, {"oid": "e9ae68ea6743b1b2c978a674e80f69dd4ebb1d18", "committedDate": "2020-11-06 16:16:15 +0000", "message": "Use fake audio recorder view model in test to prevent timing issues"}, {"oid": "d56020ba830f3198bfa70c8b443ad144af919594", "committedDate": "2020-11-09 10:25:15 -0800", "message": "Handle null launch intent"}, {"oid": "9f32a8160b865be15a319b9dfeb281ebe474eae3", "committedDate": "2020-11-13 11:13:52 +0000", "message": "Use external recording when specified in form"}, {"oid": "e310e2a9f176afbfc086b95370e92e821eaa0223", "committedDate": "2020-11-13 11:13:52 +0000", "message": "Allow enabling external recorder from settings"}, {"oid": "4853ea1c4205d775452fb88e688d040e1fc54762", "committedDate": "2020-11-13 11:15:44 +0000", "message": "Make sure form quality param overrides setting"}, {"oid": "7cd0f0d8bded0a0f7af8bd6170bc56d1a08507b8", "committedDate": "2020-11-13 11:15:44 +0000", "message": "Make WidgetFactory an instance in ODKView"}, {"oid": "050396ae7487716e13731adbf6d6453ad9f2608d", "committedDate": "2020-11-17 12:02:44 +0100", "message": "Merge pull request #4208 from lognaturel/explicit-intents"}, {"oid": "6096f02f03d6d11421a2e8a011141f906a89bcb6", "committedDate": "2020-11-17 15:15:47 +0000", "message": "Remove state saving from widgets"}, {"oid": "7dc03450602c1f0e414656afa929cc40b4af0efc", "committedDate": "2020-11-19 12:11:33 +0100", "message": "Got rid of recycling drawables"}, {"oid": "95312a78129f78a0823b00721f0c19ae9e531a12", "committedDate": "2020-11-24 13:50:47 +0100", "message": "Merge branch 'master' into COLLECT-4205"}, {"oid": "41547dd642a56736049fdf46c93516755eed9c0a", "committedDate": "2020-11-26 13:50:16 +0100", "message": "Added spacing for read-only widgets"}, {"oid": "30628c40d553bbf9c8cebd785e84ab4f3251d2e3", "committedDate": "2020-11-26 13:50:18 +0100", "message": "Code improvements"}, {"oid": "b652335ebffea0783431e4aaa61f742dae06a5f5", "committedDate": "2020-12-01 17:48:58 +0000", "message": "Make external recording the default"}, {"oid": "804cd24da5dbeec517e900d7d9e4b31c5e1ac8eb", "committedDate": "2020-12-03 15:33:32 +0100", "message": "Merge branch 'master' into COLLECT-4209"}, {"oid": "7976a9b08bfada69ffb5dc85b8c627bf02ce61e5", "committedDate": "2020-12-09 16:09:45 +0000", "message": "Move URL question analytics out of WidgetFactory"}, {"oid": "1674c3546cfbcf1d2df8b417d4838eda4e649b2c", "committedDate": "2020-12-09 16:11:59 +0000", "message": "Add analytics event when audio question is shown"}, {"oid": "4a474d3e5a5c06ca9754d2581ca263188b67c943", "committedDate": "2020-12-09 16:46:29 +0000", "message": "Use viewmodel for event"}, {"oid": "9a7ce13ed172cd5258804dc4e05d345413d0a2ee", "committedDate": "2020-12-09 18:37:45 +0000", "message": "Log analytics events when recording or choosing audio"}, {"oid": "333c78ee2dd3303701a1b29a16124e6655ffe32a", "committedDate": "2020-12-10 11:41:51 +0000", "message": "Log analytics event when question answered during recording"}, {"oid": "71f6782c1ace906c438f70119e6be81b430ca051", "committedDate": "2020-12-10 16:27:50 +0000", "message": "Remove Audio question event and use new style for URL question event"}, {"oid": "f519e6763008e5f7d62fc5a7143c2b8c294765e5", "committedDate": "2021-01-14 11:19:28 +0100", "message": "Use injected permissionUtils"}, {"oid": "265c183e8343092e89ec8d0c2ae47c9c22cd5119", "committedDate": "2021-01-14 11:20:18 +0100", "message": "Moved permissionUtils class to permissions package"}, {"oid": "e7d97823a196718baf07a48ef8ced5e6211dc991", "committedDate": "2021-01-14 11:20:18 +0100", "message": "Renamed PermissionUtils -> PermissionsProvider"}, {"oid": "32734194499287365954afcc86f08840f1a04600", "committedDate": "2021-01-19 21:58:47 +0100", "message": "Remove unused code"}, {"oid": "57909eb117e74aa77a3a0937aec068bfe9359975", "committedDate": "2021-01-25 14:05:55 +0100", "message": "Check Uri permission before accesing it in ODKView"}, {"oid": "7f9a90a485292516c13cf0213f243419d993e396", "committedDate": "2021-01-25 14:17:03 +0100", "message": "Moved the new message about not granted file permission to strings"}, {"oid": "e0b4a3f3e61a466debd283d232689e345b34d306", "committedDate": "2021-01-28 13:30:49 +0100", "message": "Use requestReadUriPermission() wherever uri from external app is accessed"}, {"oid": "2e2f32e6874b4fb1248303622e673e9c3761f5cf", "committedDate": "2021-01-28 09:42:10 -0800", "message": "Group appearance constants"}, {"oid": "94b779188a11065426c37edde5439c424e63cef5", "committedDate": "2021-02-01 12:48:09 +0100", "message": "Merge pull request #4366 from grzesiek2010/COLLECT-4360"}, {"oid": "bb0aa64d40d4e92eb5d325e289bcdde9154ddf88", "committedDate": "2021-02-01 13:01:16 +0000", "message": "Move audio file save code out of requester"}, {"oid": "d23c0da7012581b8dd8728912740258c37fde5df", "committedDate": "2021-02-01 13:11:38 +0000", "message": "Separate out recording status and requesting"}, {"oid": "f34b7e6d914273c0600a1d8e9d238698ff8b6a09", "committedDate": "2021-02-01 13:11:39 +0000", "message": "Initialize recording requesters at the Activity level"}, {"oid": "6b8dad666617567d96622dccb9d4ed46820d2a70", "committedDate": "2021-02-02 13:49:31 +0000", "message": "AudioRecorder doesn't need to be ViewModel"}, {"oid": "bf93185e75aee490c776a17fce100231e7e06e8c", "committedDate": "2021-03-03 17:04:14 +0000", "message": "Move analytics code to module"}, {"oid": "c550da1522fa27a36d976abecfd61034d1c832e3", "committedDate": "2021-03-05 10:32:55 +0100", "message": "Use PreferencesRepository in rest of the places where it wasn't used"}, {"oid": "34749e0dffaad4eebc462bef087a939e1749f1d9", "committedDate": "2021-03-08 16:32:01 +0100", "message": "Naming improvements"}, {"oid": "35b9c88e857a197786cb85b07aa0ed19a093c3f9", "committedDate": "2021-03-09 15:17:48 +0100", "message": "Created a separate package for keys"}, {"oid": "321a9160bcd76f6420cbcddf7fdac3010607f68e", "committedDate": "2021-03-09 15:31:19 +0100", "message": "Moved related classes to source package"}, {"oid": "6b1642fff021192ae2966fc9a01419a809e54ebf", "committedDate": "2021-03-15 12:45:59 +0100", "message": "Renaming"}, {"oid": "95a81d0f9d40906384ba423380983de7b4e46a45", "committedDate": "2021-03-31 17:46:11 +0100", "message": "Rename ContentResolverHelper"}, {"oid": "72d8d2d33bc3977ff62f5ca16bdfaf95b00b105d", "committedDate": "2021-06-10 12:24:17 +0100", "message": "Remove SuppressWarnings for warning we are ignoring"}, {"oid": "f18fea689d475a98214200ba8bc2cc25e5c1ee7d", "committedDate": "2021-07-17 13:00:12 +0100", "message": "Rename packages"}, {"oid": "797510c658ce8521ce4205a32529bee22fda41cb", "committedDate": "2021-07-27 08:06:02 -0700", "message": "Centralize logic for settings visibility, improve naming (#4731)"}, {"oid": "d8c2c10c7292ef8aa5d4c1644398053d645c3505", "committedDate": "2021-08-05 17:03:34 +0100", "message": "Remove logFormEvent from interface"}, {"oid": "c2cfa4063a4ed5f2a15495a579773fb9a31d47e3", "committedDate": "2021-08-16 21:26:34 +0200", "message": "Removed logging 'URLQuestion'"}, {"oid": "6c7b9a5733dc90215761f1e2112e1cd925690aaa", "committedDate": "2021-08-16 22:03:08 +0200", "message": "Removed logging 'Prompt'"}, {"oid": "564cdba7fc546bbda42b41b95123c591b38ec740", "committedDate": "2021-09-02 15:20:49 +0100", "message": "Remove colors.xml - leave map colors in place for now"}, {"oid": "cc776c8bca22e0ca72461a0be82143dcf6e434c7", "committedDate": "2021-09-22 12:08:57 +0100", "message": "Remove Collect.getInstance() from ToastUtils"}, {"oid": "bf0468a88e2d6914dd85c8024c082176125c32cc", "committedDate": "2021-09-22 12:32:36 +0100", "message": "Move ToastUtils to androidshared"}, {"oid": "db2aeec6995d6726240db94908201ca7cae6195f", "committedDate": "2021-09-24 14:18:40 +0100", "message": "Remove accidently added calls to Collect.getInstance()"}, {"oid": "75b99e8a99ded8f8ae3fff296934c62e6dea40dd", "committedDate": "2021-10-20 12:09:50 +0100", "message": "Move PermissionsChecker and rearrange packages in androidshared"}, {"oid": "05810bcd814cb46c8510b2be9693a335febf77ba", "committedDate": "2021-10-29 09:42:17 +0200", "message": "Fixed ExVideoWidget to use the new methods from ExternalAppIntentProvider"}, {"oid": "ae66398caa3bb569b646142da2bc642e8570fb16", "committedDate": "2021-10-29 09:42:18 +0200", "message": "Pass IntentLauncher and ExternalAppIntentProvider to FileRequester and StringReuqester via constructor"}, {"oid": "6a440ab90b7bcc15e49ffbb5b6d78d70e32a8f49", "committedDate": "2021-11-08 09:33:33 +0100", "message": "Fixed method names that contained 'general settings'"}, {"oid": "8d65feb6230a1caf534a59711e7f9009ec5489cb", "committedDate": "2021-12-20 11:55:52 +0100", "message": "Moved PermissionListener to permissions module"}, {"oid": "9f0f31d050677e9e967c8a24846440e9f4b0a8fd", "committedDate": "2021-12-20 11:55:52 +0100", "message": "Moved PermissionsProvider to permissions module"}, {"oid": "fa52f4ff73001955d4f8bc1c1fafbc5aed824479", "committedDate": "2021-12-29 11:41:43 +0000", "message": "Switch between geopoint implementations with experimental setting"}, {"oid": "d98ef16bdb52334bdab29474be3097565d4fd9b0", "committedDate": "2022-01-12 13:50:24 +0000", "message": "Use new geo point instead of old one"}, {"oid": "eb2468458dc0640284defafa3c7944af533705e7", "committedDate": "2022-02-16 10:01:36 +0000", "message": "Collect all settings code in one place"}, {"oid": "a1b708864d35e2acaecd21ae3a4d3ed91b41843b", "committedDate": "2022-02-16 10:13:53 +0000", "message": "Move project and meta keys to new module"}, {"oid": "61f3558b9e1121cc447b374e0a6990e1d33d691a", "committedDate": "2022-02-16 10:13:55 +0000", "message": "Move SettingsImporter to settings module"}, {"oid": "f9b2a11aecb26c2e18a2d12ad071726e111bdc76", "committedDate": "2022-02-16 10:13:56 +0000", "message": "Reorganize settings module"}, {"oid": "3096102a66699e33f4c06cb4741bc17f68ed4837", "committedDate": "2022-04-26 13:03:16 +0200", "message": "Removed AnswerWhileRecording"}, {"oid": "84e5c77b91e5c600063cfef33c60f27f592181fb", "committedDate": "2022-04-26 20:08:00 +0200", "message": "Fixed styling group names"}, {"oid": "3022bd31e5255e7242067d1485dc6b88a4ab0ec0", "committedDate": "2022-05-16 10:12:55 +0200", "message": "Merge pull request #5064 from grzesiek2010/COLLECT-4822"}, {"oid": "e703b34fe9a8587394d207cb4714aac262f4feaf", "committedDate": "2022-06-29 11:08:29 +0200", "message": "Fix non OdkViews not being set on SwipeHandler"}, {"oid": "831d7e0dab94758e2bc3448889aab71b85c5e1ef", "committedDate": "2022-09-13 14:32:57 +0200", "message": "Added defaylt implementation for PermissionListener#denied() to avoid overriding when not needed"}, {"oid": "2a13a61f1f8cfb802f1d5efc9d5bf4efa4c5aa01", "committedDate": "2022-09-28 14:16:52 +0100", "message": "Remove simple cases of getFormController() in widgets"}, {"oid": "95d26019fa068795581058c9d399f1873185e22f", "committedDate": "2022-09-28 14:35:23 +0100", "message": "Remove getFormController from external app code"}, {"oid": "821b465f35b66f113ae958247cbe1e157630af79", "committedDate": "2022-12-12 21:27:03 +0100", "message": "Removed unused parameters from shouldSuppressFlingGesture"}, {"oid": "63b09ed937fddb3c99a814dbce3aa5d9e4ff6ed1", "committedDate": "2023-03-09 09:01:48 -0800", "message": "Create on view model factory for form entry"}, {"oid": "52896771dc8adda88a64150a2eb07a6bf3bb3187", "committedDate": "2023-04-16 21:43:37 +0200", "message": "Moved SwipeHandler to formentry package"}, {"oid": "3b7c5744654d8cb7c08997747a2857fbf64273c0", "committedDate": "2023-04-28 15:36:45 +0200", "message": "Fixed conflicts"}]}, {"oid": "53d0d807f8a401ff7c2ea79d5181ccbe3bd1515b", "url": "https://github.com/getodk/collect/commit/53d0d807f8a401ff7c2ea79d5181ccbe3bd1515b", "message": "Pass readOnlyOverride to QuestionDetails to avoid passing that parameter to every widget separately", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "12506d3a71c2871aa5d60677a18f35ceead9698f", "url": "https://github.com/getodk/collect/commit/12506d3a71c2871aa5d60677a18f35ceead9698f", "message": "Removed redundant readOnlyOverride parameter from DecimalWidget", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "3224445a6f51c3d2c142ffc894b60363743c0802", "url": "https://github.com/getodk/collect/commit/3224445a6f51c3d2c142ffc894b60363743c0802", "message": "Removed redundant readOnlyOverride parameter from IntegerWidget", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "3736ef19a60629e97bf4d561719cfac97b4801cd", "url": "https://github.com/getodk/collect/commit/3736ef19a60629e97bf4d561719cfac97b4801cd", "message": "Removed redundant readOnlyOverride parameter from StringNumberWidget", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "9b5d238be377297c7b999e0712f1242312262ce5", "url": "https://github.com/getodk/collect/commit/9b5d238be377297c7b999e0712f1242312262ce5", "message": "Removed redundant readOnlyOverride parameter from StringWidget", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "11caae6b744a9ad18255a0fb429bb31938301718", "url": "https://github.com/getodk/collect/commit/11caae6b744a9ad18255a0fb429bb31938301718", "message": "Code improvements in StringWidget", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "01b201d3cc5cec1175dce3df5a2fe71183b19810", "url": "https://github.com/getodk/collect/commit/01b201d3cc5cec1175dce3df5a2fe71183b19810", "message": "Added tests for readOnlyOverride in string widgets", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "f10dbd32ccbd404a1f7bfc9d8554dc04f3f233be", "url": "https://github.com/getodk/collect/commit/f10dbd32ccbd404a1f7bfc9d8554dc04f3f233be", "message": "Fixed answer text in ExString widgets and added tests", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "71dc8ba41e4807f757ba6e34f0eccf11e4e627e2", "url": "https://github.com/getodk/collect/commit/71dc8ba41e4807f757ba6e34f0eccf11e4e627e2", "message": "ImageWidget should be displayed in intent groups like it was readOnly", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "9050070a875a289287cefb0a5a897f21c25efa6b", "url": "https://github.com/getodk/collect/commit/9050070a875a289287cefb0a5a897f21c25efa6b", "message": "SignatureWidget should be displayed in intent groups like it was readOnly", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "a38a608ce1600fbc184119fd3579249d77e70557", "url": "https://github.com/getodk/collect/commit/a38a608ce1600fbc184119fd3579249d77e70557", "message": "DrawWidget should be displayed in intent groups like it was readOnly", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "6011947aa4cfeb69ba406b6208ccc3b320d671e0", "url": "https://github.com/getodk/collect/commit/6011947aa4cfeb69ba406b6208ccc3b320d671e0", "message": "AnnotateWidget should be displayed in intent groups like it was readOnly", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "2f645b3199be1e5c6ee8530385015779ea86134f", "url": "https://github.com/getodk/collect/commit/2f645b3199be1e5c6ee8530385015779ea86134f", "message": "VideoWidget should be displayed in intent groups like it was readOnly", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "8ebd45ab729b1473d506ed54684e659b4afc10cc", "url": "https://github.com/getodk/collect/commit/8ebd45ab729b1473d506ed54684e659b4afc10cc", "message": "ArbitraryFileWidget should be displayed in intent groups like it was readOnly", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "c598a20a4b8523beb96e7ba70d9bc69d9855d8aa", "url": "https://github.com/getodk/collect/commit/c598a20a4b8523beb96e7ba70d9bc69d9855d8aa", "message": "AudioWidget should be displayed in intent groups like it was readOnly", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "23832e7a3db1692580351958a71a1b63eb7e3a75", "url": "https://github.com/getodk/collect/commit/23832e7a3db1692580351958a71a1b63eb7e3a75", "message": "Fixed Play Video button in VideoWidget readOnly #3653", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "ad1af29dd6cc6082fa22776512225defa2f66f8c", "url": "https://github.com/getodk/collect/commit/ad1af29dd6cc6082fa22776512225defa2f66f8c", "message": "Handle receiving files from extrenal apps", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "679464ebd53eb30a5f63caed650a591c928b439f", "url": "https://github.com/getodk/collect/commit/679464ebd53eb30a5f63caed650a591c928b439f", "message": "Added tests", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "f3e12da2c903871b5f2a29c57b510560eab81cf0", "url": "https://github.com/getodk/collect/commit/f3e12da2c903871b5f2a29c57b510560eab81cf0", "message": "Catch SecurityException when receiving uris", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "ce0f65667491bad121da9eb83a97cf9791ecfbb4", "url": "https://github.com/getodk/collect/commit/ce0f65667491bad121da9eb83a97cf9791ecfbb4", "message": "Improved tests", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "0be7b76be1b8313967b68ce2c05aa6e4374feadf", "url": "https://github.com/getodk/collect/commit/0be7b76be1b8313967b68ce2c05aa6e4374feadf", "message": "Naming improvements", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "bf455d711eba941af42004336856fee48de440e6", "url": "https://github.com/getodk/collect/commit/bf455d711eba941af42004336856fee48de440e6", "message": "Added a comment to remember about improving the code in the future", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "5fc1d2ec1c412fdcc0bd5521beca62835c097335", "url": "https://github.com/getodk/collect/commit/5fc1d2ec1c412fdcc0bd5521beca62835c097335", "message": "Fixed tests", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "e82a1a1f599bbe0055be67c6b580eb1687c44d64", "url": "https://github.com/getodk/collect/commit/e82a1a1f599bbe0055be67c6b580eb1687c44d64", "message": "Improved receiving binary fiels from external apps", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "60d4bf2dfd3d77c12bfa51bc130c64b2910cd0b1", "url": "https://github.com/getodk/collect/commit/60d4bf2dfd3d77c12bfa51bc130c64b2910cd0b1", "message": "Updated tests", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "0669d945b956f5995881d8e52a94bc5eba4327f0", "url": "https://github.com/getodk/collect/commit/0669d945b956f5995881d8e52a94bc5eba4327f0", "message": "Added changes and tests to assert nothing wrong happens when null values are returned", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "45a6410ef26f899c29f756ae7cd8d73192c7cfd2", "url": "https://github.com/getodk/collect/commit/45a6410ef26f899c29f756ae7cd8d73192c7cfd2", "message": "Improved tests", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "b42d8dfb0678fff2ac00b68a5cfdc158181cb55f", "url": "https://github.com/getodk/collect/commit/b42d8dfb0678fff2ac00b68a5cfdc158181cb55f", "message": "Catch every exception and error that might happen during copying files", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "6d63f0153910a13778250e7f37aeb0fe18c67555", "url": "https://github.com/getodk/collect/commit/6d63f0153910a13778250e7f37aeb0fe18c67555", "message": "Added more tests", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "6d63f0153910a13778250e7f37aeb0fe18c67555", "url": "https://github.com/getodk/collect/commit/6d63f0153910a13778250e7f37aeb0fe18c67555", "message": "Added more tests", "committedDate": "2020-11-04T07:24:11Z", "type": "forcePushed"}]}