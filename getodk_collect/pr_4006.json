{"pr_number": 4006, "pr_title": "Reworking Audio widget", "pr_author": "SaumiaSinghal", "pr_createdAt": "2020-08-04T07:05:22Z", "pr_url": "https://github.com/getodk/collect/pull/4006", "timeline": [{"oid": "289cc79436c56c8369d5a07d653ff0d82852ed5f", "url": "https://github.com/getodk/collect/commit/289cc79436c56c8369d5a07d653ff0d82852ed5f", "message": "code refactor", "committedDate": "2020-08-04T09:25:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc4NzY0NQ==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r465787645", "body": "I think better to just have the values inline (`destinationPath`) rather than defined anywhere. Easier to see in the test that the value is just a string.", "bodyText": "I think better to just have the values inline (destinationPath) rather than defined anywhere. Easier to see in the test that the value is just a string.", "bodyHTML": "<p dir=\"auto\">I think better to just have the values inline (<code>destinationPath</code>) rather than defined anywhere. Easier to see in the test that the value is just a string.</p>", "author": "seadowg", "createdAt": "2020-08-05T14:54:36Z", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java", "diffHunk": "@@ -1,117 +1,188 @@\n package org.odk.collect.android.widgets;\n \n-import android.content.Context;\n-import android.content.Intent;\n-import android.net.Uri;\n-import android.provider.MediaStore;\n+import android.media.MediaPlayer;\n import android.view.View;\n \n-import androidx.annotation.NonNull;\n-\n-import net.bytebuddy.utility.RandomString;\n+import androidx.core.view.ViewCompat;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.lifecycle.LifecycleOwner;\n \n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.Mock;\n-import org.odk.collect.android.R;\n+import org.junit.runner.RunWith;\n import org.odk.collect.android.audio.AudioControllerView;\n+import org.odk.collect.android.audio.AudioHelper;\n+import org.odk.collect.android.audio.Clip;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.listeners.WidgetValueChangedListener;\n+import org.odk.collect.android.support.FakeLifecycleOwner;\n+import org.odk.collect.android.support.FakeScheduler;\n+import org.odk.collect.android.support.TestScreenContextActivity;\n import org.odk.collect.android.utilities.FileUtil;\n import org.odk.collect.android.utilities.MediaUtil;\n-import org.odk.collect.android.widgets.base.FileWidgetTest;\n+import org.odk.collect.android.utilities.WidgetAppearanceUtils;\n import org.odk.collect.android.widgets.support.FakeWaitingForDataRegistry;\n+import org.odk.collect.async.Scheduler;\n+import org.robolectric.RobolectricTestRunner;\n \n import java.io.File;\n+import java.util.function.Supplier;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-import static org.mockito.ArgumentMatchers.any;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n-/**\n- * @author James Knight\n- */\n-public class AudioWidgetTest extends FileWidgetTest<AudioWidget> {\n-\n-    @Mock\n-    Uri uri;\n+@RunWith(RobolectricTestRunner.class)\n+public class AudioWidgetTest {\n+    private final String destinationPath = \"blah\";\n \n-    @Mock\n-    MediaUtil mediaUtil;\n+    private final MediaPlayer mediaPlayer = new MediaPlayer();\n+    private final FakeScheduler fakeScheduler = new FakeScheduler();\n \n-    @Mock\n-    FileUtil fileUtil;\n+    private TestScreenContextActivity widgetActivity;\n+    private AudioControllerView audioController;\n+    private FileUtil fileUtil;\n+    private MediaUtil mediaUtil;\n+    private AudioHelper audioHelper;\n \n-    @Mock\n-    AudioControllerView audioController;\n+    @Before\n+    public void setUp() {\n+        widgetActivity = widgetTestActivity();\n \n-    private String destinationName;\n+        audioController = mock(AudioControllerView.class);\n+        fileUtil = mock(FileUtil.class);\n+        mediaUtil = mock(MediaUtil.class);\n \n-    @NonNull\n-    @Override\n-    public AudioWidget createWidget() {\n-        return new AudioWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"), fileUtil, mediaUtil, audioController, new FakeWaitingForDataRegistry());\n+        audioHelper = new FakeAudioHelper(widgetActivity, new FakeLifecycleOwner(), fakeScheduler, () -> mediaPlayer);\n     }\n \n-    @NonNull\n-    @Override\n-    public StringData getNextAnswer() {\n-        return new StringData(destinationName);\n+    @Test\n+    public void usingReadOnlyOption_doesNotShowCaptureAndChooseButtons() {\n+        AudioWidget widget = createWidget(promptWithReadOnly());\n+\n+        assertThat(widget.captureButton.getVisibility(), equalTo(View.GONE));\n+        assertThat(widget.chooseButton.getVisibility(), equalTo(View.GONE));\n     }\n \n-    @Override\n-    public Object createBinaryData(StringData answerData) {\n-        return uri;\n+    @Test\n+    public void getAnswer_whenPromptDoesNotHaveAnswer_returnsNull() {\n+        AudioWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(widget.getAnswer(), nullValue());\n     }\n \n-    @Override\n-    public void setUp() throws Exception {\n-        super.setUp();\n-        destinationName = RandomString.make();\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(destinationPath)));", "originalCommit": "b2bb6bf4ec6f1021f2fa63cc13152c19be8e7031", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcfb6b9f3bbd0efac9908dca71b34fbe1fa5a23d", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex 79eeef6b18..9f89759b68 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -1,88 +1,121 @@\n package org.odk.collect.android.widgets;\n \n+import android.content.Intent;\n import android.media.MediaPlayer;\n+import android.net.Uri;\n+import android.provider.MediaStore;\n import android.view.View;\n \n import androidx.core.view.ViewCompat;\n import androidx.fragment.app.FragmentActivity;\n import androidx.lifecycle.LifecycleOwner;\n \n+import org.javarosa.core.model.FormIndex;\n+import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n import org.javarosa.form.api.FormEntryPrompt;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.audio.AudioControllerView;\n import org.odk.collect.android.audio.AudioHelper;\n import org.odk.collect.android.audio.Clip;\n+import org.odk.collect.android.fakes.FakePermissionUtils;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n import org.odk.collect.android.listeners.WidgetValueChangedListener;\n import org.odk.collect.android.support.FakeLifecycleOwner;\n import org.odk.collect.android.support.FakeScheduler;\n+import org.odk.collect.android.support.RobolectricHelpers;\n import org.odk.collect.android.support.TestScreenContextActivity;\n+import org.odk.collect.android.utilities.ActivityAvailability;\n+import org.odk.collect.android.utilities.ApplicationConstants;\n import org.odk.collect.android.utilities.FileUtil;\n import org.odk.collect.android.utilities.MediaUtil;\n import org.odk.collect.android.utilities.WidgetAppearanceUtils;\n+import org.odk.collect.android.widgets.support.FakeQuestionMediaManager;\n import org.odk.collect.android.widgets.support.FakeWaitingForDataRegistry;\n import org.odk.collect.async.Scheduler;\n import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowActivity;\n+import org.robolectric.shadows.ShadowToast;\n \n import java.io.File;\n import java.util.function.Supplier;\n \n+import static android.content.Intent.ACTION_GET_CONTENT;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n-import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n+import static org.robolectric.Shadows.shadowOf;\n \n @RunWith(RobolectricTestRunner.class)\n public class AudioWidgetTest {\n-    private final String destinationPath = \"blah\";\n+    private static final String FILE_PATH = \"blah.mp3\";\n+    private static final String SOURCE_FILE_PATH = \"sourceFile.mp3\";\n \n     private final MediaPlayer mediaPlayer = new MediaPlayer();\n     private final FakeScheduler fakeScheduler = new FakeScheduler();\n+    private final FakePermissionUtils fakePermissionUtils = new FakePermissionUtils();\n+    private final FakeQuestionMediaManager questionMediaManager = new FakeQuestionMediaManager();\n+    private final FakeWaitingForDataRegistry waitingForDataRegistry = new FakeWaitingForDataRegistry();\n \n     private TestScreenContextActivity widgetActivity;\n+    private ShadowActivity shadowActivity;\n     private AudioControllerView audioController;\n     private FileUtil fileUtil;\n     private MediaUtil mediaUtil;\n-    private AudioHelper audioHelper;\n+    private FakeAudioHelper audioHelper;\n+    private ActivityAvailability activityAvailability;\n+    private FormIndex formIndex;\n+    private File mockedFile;\n \n     @Before\n     public void setUp() {\n-        widgetActivity = widgetTestActivity();\n+        widgetActivity = RobolectricHelpers.buildThemedActivity(TestScreenContextActivity.class).get();\n+        shadowActivity = shadowOf(widgetActivity);\n \n         audioController = mock(AudioControllerView.class);\n         fileUtil = mock(FileUtil.class);\n         mediaUtil = mock(MediaUtil.class);\n-\n+        activityAvailability = mock(ActivityAvailability.class);\n+        formIndex = mock(FormIndex.class);\n+        mockedFile = mock(File.class);\n         audioHelper = new FakeAudioHelper(widgetActivity, new FakeLifecycleOwner(), fakeScheduler, () -> mediaPlayer);\n+\n+        when(mockedFile.exists()).thenReturn(true);\n+        when(mockedFile.getName()).thenReturn(\"newFile.mp3\");\n+        when(mockedFile.getAbsolutePath()).thenReturn(\"newFilePath\");\n+        when(formIndex.toString()).thenReturn(\"questionIndex\");\n+        when(activityAvailability.isActivityAvailable(any())).thenReturn(true);\n     }\n \n     @Test\n     public void usingReadOnlyOption_doesNotShowCaptureAndChooseButtons() {\n         AudioWidget widget = createWidget(promptWithReadOnly());\n-\n-        assertThat(widget.captureButton.getVisibility(), equalTo(View.GONE));\n-        assertThat(widget.chooseButton.getVisibility(), equalTo(View.GONE));\n+        assertThat(widget.binding.captureButton.getVisibility(), equalTo(View.GONE));\n+        assertThat(widget.binding.chooseButton.getVisibility(), equalTo(View.GONE));\n     }\n \n     @Test\n-    public void getAnswer_whenPromptDoesNotHaveAnswer_returnsNull() {\n+    public void getAnswer_whenPromptDoesNotHaveAnswer_returnsNullAndHidesAudioPlayer() {\n         AudioWidget widget = createWidget(promptWithAnswer(null));\n         assertThat(widget.getAnswer(), nullValue());\n+        verify(audioController).hidePlayer();\n     }\n \n     @Test\n     public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(destinationPath)));\n-        assertThat(widget.getAnswer().getDisplayText(), equalTo(destinationPath));\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(FILE_PATH));\n     }\n \n     @Test\n", "next_change": {"commit": "d8705c9c05a922eb8b2fbb0c4e36febeaee9e35b", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex 9f89759b68..79eeef6b18 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -1,121 +1,88 @@\n package org.odk.collect.android.widgets;\n \n-import android.content.Intent;\n import android.media.MediaPlayer;\n-import android.net.Uri;\n-import android.provider.MediaStore;\n import android.view.View;\n \n import androidx.core.view.ViewCompat;\n import androidx.fragment.app.FragmentActivity;\n import androidx.lifecycle.LifecycleOwner;\n \n-import org.javarosa.core.model.FormIndex;\n-import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n import org.javarosa.form.api.FormEntryPrompt;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.odk.collect.android.R;\n import org.odk.collect.android.audio.AudioControllerView;\n import org.odk.collect.android.audio.AudioHelper;\n import org.odk.collect.android.audio.Clip;\n-import org.odk.collect.android.fakes.FakePermissionUtils;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n import org.odk.collect.android.listeners.WidgetValueChangedListener;\n import org.odk.collect.android.support.FakeLifecycleOwner;\n import org.odk.collect.android.support.FakeScheduler;\n-import org.odk.collect.android.support.RobolectricHelpers;\n import org.odk.collect.android.support.TestScreenContextActivity;\n-import org.odk.collect.android.utilities.ActivityAvailability;\n-import org.odk.collect.android.utilities.ApplicationConstants;\n import org.odk.collect.android.utilities.FileUtil;\n import org.odk.collect.android.utilities.MediaUtil;\n import org.odk.collect.android.utilities.WidgetAppearanceUtils;\n-import org.odk.collect.android.widgets.support.FakeQuestionMediaManager;\n import org.odk.collect.android.widgets.support.FakeWaitingForDataRegistry;\n import org.odk.collect.async.Scheduler;\n import org.robolectric.RobolectricTestRunner;\n-import org.robolectric.shadows.ShadowActivity;\n-import org.robolectric.shadows.ShadowToast;\n \n import java.io.File;\n import java.util.function.Supplier;\n \n-import static android.content.Intent.ACTION_GET_CONTENT;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.nullValue;\n-import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n-import static org.robolectric.Shadows.shadowOf;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n @RunWith(RobolectricTestRunner.class)\n public class AudioWidgetTest {\n-    private static final String FILE_PATH = \"blah.mp3\";\n-    private static final String SOURCE_FILE_PATH = \"sourceFile.mp3\";\n+    private final String destinationPath = \"blah\";\n \n     private final MediaPlayer mediaPlayer = new MediaPlayer();\n     private final FakeScheduler fakeScheduler = new FakeScheduler();\n-    private final FakePermissionUtils fakePermissionUtils = new FakePermissionUtils();\n-    private final FakeQuestionMediaManager questionMediaManager = new FakeQuestionMediaManager();\n-    private final FakeWaitingForDataRegistry waitingForDataRegistry = new FakeWaitingForDataRegistry();\n \n     private TestScreenContextActivity widgetActivity;\n-    private ShadowActivity shadowActivity;\n     private AudioControllerView audioController;\n     private FileUtil fileUtil;\n     private MediaUtil mediaUtil;\n-    private FakeAudioHelper audioHelper;\n-    private ActivityAvailability activityAvailability;\n-    private FormIndex formIndex;\n-    private File mockedFile;\n+    private AudioHelper audioHelper;\n \n     @Before\n     public void setUp() {\n-        widgetActivity = RobolectricHelpers.buildThemedActivity(TestScreenContextActivity.class).get();\n-        shadowActivity = shadowOf(widgetActivity);\n+        widgetActivity = widgetTestActivity();\n \n         audioController = mock(AudioControllerView.class);\n         fileUtil = mock(FileUtil.class);\n         mediaUtil = mock(MediaUtil.class);\n-        activityAvailability = mock(ActivityAvailability.class);\n-        formIndex = mock(FormIndex.class);\n-        mockedFile = mock(File.class);\n-        audioHelper = new FakeAudioHelper(widgetActivity, new FakeLifecycleOwner(), fakeScheduler, () -> mediaPlayer);\n \n-        when(mockedFile.exists()).thenReturn(true);\n-        when(mockedFile.getName()).thenReturn(\"newFile.mp3\");\n-        when(mockedFile.getAbsolutePath()).thenReturn(\"newFilePath\");\n-        when(formIndex.toString()).thenReturn(\"questionIndex\");\n-        when(activityAvailability.isActivityAvailable(any())).thenReturn(true);\n+        audioHelper = new FakeAudioHelper(widgetActivity, new FakeLifecycleOwner(), fakeScheduler, () -> mediaPlayer);\n     }\n \n     @Test\n     public void usingReadOnlyOption_doesNotShowCaptureAndChooseButtons() {\n         AudioWidget widget = createWidget(promptWithReadOnly());\n-        assertThat(widget.binding.captureButton.getVisibility(), equalTo(View.GONE));\n-        assertThat(widget.binding.chooseButton.getVisibility(), equalTo(View.GONE));\n+\n+        assertThat(widget.captureButton.getVisibility(), equalTo(View.GONE));\n+        assertThat(widget.chooseButton.getVisibility(), equalTo(View.GONE));\n     }\n \n     @Test\n-    public void getAnswer_whenPromptDoesNotHaveAnswer_returnsNullAndHidesAudioPlayer() {\n+    public void getAnswer_whenPromptDoesNotHaveAnswer_returnsNull() {\n         AudioWidget widget = createWidget(promptWithAnswer(null));\n         assertThat(widget.getAnswer(), nullValue());\n-        verify(audioController).hidePlayer();\n     }\n \n     @Test\n     public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n-        assertThat(widget.getAnswer().getDisplayText(), equalTo(FILE_PATH));\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(destinationPath)));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(destinationPath));\n     }\n \n     @Test\n", "next_change": {"commit": "41ea8a171ca60cf08b410763264e609068df75bd", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex 79eeef6b18..7af978d889 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -15,74 +20,101 @@ import org.junit.runner.RunWith;\n import org.odk.collect.android.audio.AudioControllerView;\n import org.odk.collect.android.audio.AudioHelper;\n import org.odk.collect.android.audio.Clip;\n+import org.odk.collect.android.fakes.FakePermissionUtils;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n import org.odk.collect.android.listeners.WidgetValueChangedListener;\n import org.odk.collect.android.support.FakeLifecycleOwner;\n import org.odk.collect.android.support.FakeScheduler;\n import org.odk.collect.android.support.TestScreenContextActivity;\n+import org.odk.collect.android.utilities.ApplicationConstants;\n import org.odk.collect.android.utilities.FileUtil;\n import org.odk.collect.android.utilities.MediaUtil;\n import org.odk.collect.android.utilities.WidgetAppearanceUtils;\n+import org.odk.collect.android.widgets.interfaces.MediaManagerListener;\n import org.odk.collect.android.widgets.support.FakeWaitingForDataRegistry;\n+import org.odk.collect.android.widgets.utilities.FileWidgetUtils;\n import org.odk.collect.async.Scheduler;\n import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowActivity;\n \n import java.io.File;\n import java.util.function.Supplier;\n \n+import static android.content.Intent.ACTION_GET_CONTENT;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.nullValue;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n+import static org.robolectric.Shadows.shadowOf;\n \n @RunWith(RobolectricTestRunner.class)\n public class AudioWidgetTest {\n-    private final String destinationPath = \"blah\";\n+    private static final String FILE_PATH = \"blah.mp3\";\n+    private static final String SOURCE_FILE_PATH = \"sourceFile.mp3\";\n \n     private final MediaPlayer mediaPlayer = new MediaPlayer();\n     private final FakeScheduler fakeScheduler = new FakeScheduler();\n+    private final FakePermissionUtils fakePermissionUtils = new FakePermissionUtils();\n \n     private TestScreenContextActivity widgetActivity;\n+    private ShadowActivity shadowActivity;\n+    private FakeWaitingForDataRegistry waitingForDataRegistry;\n     private AudioControllerView audioController;\n     private FileUtil fileUtil;\n     private MediaUtil mediaUtil;\n     private AudioHelper audioHelper;\n+    private MediaManagerListener mockedMediaManagerListener;\n+    private FormIndex formIndex;\n+    private File mockedFile;\n \n     @Before\n     public void setUp() {\n         widgetActivity = widgetTestActivity();\n+        shadowActivity = shadowOf(widgetActivity);\n \n         audioController = mock(AudioControllerView.class);\n         fileUtil = mock(FileUtil.class);\n         mediaUtil = mock(MediaUtil.class);\n+        mockedMediaManagerListener = mock(MediaManagerListener.class);\n+        formIndex = mock(FormIndex.class);\n+        mockedFile = mock(File.class);\n \n         audioHelper = new FakeAudioHelper(widgetActivity, new FakeLifecycleOwner(), fakeScheduler, () -> mediaPlayer);\n+        waitingForDataRegistry = new FakeWaitingForDataRegistry();\n+\n+        when(mockedFile.exists()).thenReturn(true);\n+        when(mockedFile.getName()).thenReturn(\"newFile.mp3\");\n+        when(mockedFile.getAbsolutePath()).thenReturn(\"newFilePath\");\n+        when(formIndex.toString()).thenReturn(\"questionIndex\");\n     }\n \n     @Test\n     public void usingReadOnlyOption_doesNotShowCaptureAndChooseButtons() {\n         AudioWidget widget = createWidget(promptWithReadOnly());\n-\n         assertThat(widget.captureButton.getVisibility(), equalTo(View.GONE));\n         assertThat(widget.chooseButton.getVisibility(), equalTo(View.GONE));\n     }\n \n     @Test\n-    public void getAnswer_whenPromptDoesNotHaveAnswer_returnsNull() {\n+    public void getAnswer_whenPromptDoesNotHaveAnswer_returnsNullAndHidesAudioPlayer() {\n         AudioWidget widget = createWidget(promptWithAnswer(null));\n+\n         assertThat(widget.getAnswer(), nullValue());\n+        verify(audioController).hidePlayer();\n     }\n \n     @Test\n     public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(destinationPath)));\n-        assertThat(widget.getAnswer().getDisplayText(), equalTo(destinationPath));\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(FILE_PATH));\n     }\n \n     @Test\n", "next_change": {"commit": "0896029b905cafdd43ba6e5009793bbeb0fa3f02", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex 7af978d889..8c6808027c 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -123,7 +123,7 @@ public class AudioWidgetTest {\n         when(prompt.getAppearanceHint()).thenReturn(WidgetAppearanceUtils.NEW);\n         AudioWidget widget = createWidget(prompt);\n \n-        assertThat(widget.chooseButton.getVisibility(), equalTo(View.GONE));\n+        assertThat(widget.binding.chooseButton.widgetButton.getVisibility(), equalTo(View.GONE));\n     }\n \n     @Test\n", "next_change": {"commit": "0fe63b1b81c99e61a4aa87404c8de0519de352e0", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex 8c6808027c..684f32cff1 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -123,7 +130,7 @@ public class AudioWidgetTest {\n         when(prompt.getAppearanceHint()).thenReturn(WidgetAppearanceUtils.NEW);\n         AudioWidget widget = createWidget(prompt);\n \n-        assertThat(widget.binding.chooseButton.widgetButton.getVisibility(), equalTo(View.GONE));\n+        assertThat(widget.binding.chooseButton.getRoot().getVisibility(), equalTo(View.GONE));\n     }\n \n     @Test\n", "next_change": {"commit": "f2ce6ea1d8404ab8f4ea86d5b9adb6b4809d1933", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex 684f32cff1..bf925f1ecb 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -138,16 +138,18 @@ public class AudioWidgetTest {\n         AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n         Clip clip = getAnswerAudioClip(widget.getInstanceFolder(), widget.getAnswer());\n \n-        assertThat(((FakeAudioHelper) widget.audioHelper).getAudioController(), equalTo(audioController));\n-        assertThat(((FakeAudioHelper) widget.audioHelper).getClip().getURI(), equalTo(clip.getURI()));\n+        assertThat(audioHelper.audioController, equalTo(audioController));\n+        assertThat(audioHelper.clip.getURI(), equalTo(clip.getURI()));\n         verify(audioController).showPlayer();\n     }\n \n     @Test\n-    public void deleteFile_removesWidgetAnswer() {\n+    public void deleteFile_removesWidgetAnswerAndStopsPlayingMedia() {\n         AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n         widget.deleteFile();\n+\n         assertThat(widget.getAnswer(), nullValue());\n+        assertThat(audioHelper.isMediaStopped, equalTo(true));\n     }\n \n     @Test\n", "next_change": {"commit": "12cd8f35b3b56f889ff5a9674d519e6a5f27b847", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex bf925f1ecb..bd092dbd12 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -152,18 +147,6 @@ public class AudioWidgetTest {\n         assertThat(audioHelper.isMediaStopped, equalTo(true));\n     }\n \n-    @Test\n-    public void deleteFile_callsMediaManagerListener() {\n-        FormEntryPrompt prompt = promptWithAnswer(new StringData(FILE_PATH));\n-        when(prompt.getIndex()).thenReturn(formIndex);\n-\n-        AudioWidget widget = createWidget(prompt);\n-        widget.deleteFile();\n-\n-        verify(mockedMediaManagerListener).markOriginalFileOrDelete(\"questionIndex\",\n-                widget.getInstanceFolder() + File.separator + \"blah.mp3\");\n-    }\n-\n     @Test\n     public void clearAnswer_removesAnswerAndHidesPlayer() {\n         AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n", "next_change": {"commit": "f1d5a3f611beb65263a373a0e628262e59fe5ac6", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex bd092dbd12..ca8dcb164f 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -147,6 +156,18 @@ public class AudioWidgetTest {\n         assertThat(audioHelper.isMediaStopped, equalTo(true));\n     }\n \n+    @Test\n+    public void deleteFile_setsFileAsideForDeleting() {\n+        FormEntryPrompt prompt = promptWithAnswer(new StringData(FILE_PATH));\n+        when(prompt.getIndex()).thenReturn(formIndex);\n+\n+        AudioWidget widget = createWidget(prompt);\n+        widget.deleteFile();\n+\n+        assertThat(widgetActivity.originalFiles.get(\"questionIndex\"),\n+                equalTo(widget.getInstanceFolder() + File.separator + \"blah.mp3\"));\n+    }\n+\n     @Test\n     public void clearAnswer_removesAnswerAndHidesPlayer() {\n         AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n", "next_change": {"commit": "a0ee45dd2bab877779659b2597c3cec6467506cb", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex ca8dcb164f..9f89759b68 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -164,7 +154,7 @@ public class AudioWidgetTest {\n         AudioWidget widget = createWidget(prompt);\n         widget.deleteFile();\n \n-        assertThat(widgetActivity.originalFiles.get(\"questionIndex\"),\n+        assertThat(questionMediaManager.originalFiles.get(\"questionIndex\"),\n                 equalTo(widget.getInstanceFolder() + File.separator + \"blah.mp3\"));\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex 9f89759b68..79eeef6b18 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -124,277 +91,84 @@ public class AudioWidgetTest {\n         when(prompt.getAppearanceHint()).thenReturn(WidgetAppearanceUtils.NEW);\n         AudioWidget widget = createWidget(prompt);\n \n-        assertThat(widget.binding.chooseButton.getVisibility(), equalTo(View.GONE));\n+        assertThat(widget.chooseButton.getVisibility(), equalTo(View.GONE));\n     }\n \n     @Test\n-    public void whenPromptHasAnswer_updatesPlayerMedia() {\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n-        Clip clip = getAnswerAudioClip(widget.getInstanceFolder(), widget.getAnswer());\n+    public void whenPromptDoesNotHaveAnswer_audioPlayerIsNotShown() {\n+        AudioWidget widget = createWidget(promptWithAnswer(null));\n+        verify(audioController).hidePlayer();\n+    }\n \n-        assertThat(audioHelper.audioController, equalTo(audioController));\n-        assertThat(audioHelper.clip.getURI(), equalTo(clip.getURI()));\n+    @Test\n+    public void whenPromptHasAnswer_audioPlayerIsShown() {\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(destinationPath)));\n         verify(audioController).showPlayer();\n     }\n \n     @Test\n-    public void deleteFile_removesWidgetAnswerAndStopsPlayingMedia() {\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n-        widget.deleteFile();\n+    public void whenPromptHasAnswer_audioPlayerSetsAudio() {\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(destinationPath)));\n+        Clip clip = new Clip(String.valueOf(ViewCompat.generateViewId()), getAudioFile(widget.getInstanceFolder()).getAbsolutePath());\n \n-        assertThat(widget.getAnswer(), nullValue());\n-        assertThat(audioHelper.isMediaStopped, equalTo(true));\n+        assertThat(((FakeAudioHelper) widget.audioHelper).getAudioController(), equalTo(audioController));\n+        assertThat(((FakeAudioHelper) widget.audioHelper).getClip().getURI(), equalTo(clip.getURI()));\n     }\n \n     @Test\n-    public void deleteFile_setsFileAsideForDeleting() {\n-        FormEntryPrompt prompt = promptWithAnswer(new StringData(FILE_PATH));\n-        when(prompt.getIndex()).thenReturn(formIndex);\n-\n-        AudioWidget widget = createWidget(prompt);\n+    public void deleteFile_removesWidgetAnswer() {\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(destinationPath)));\n         widget.deleteFile();\n-\n-        assertThat(questionMediaManager.originalFiles.get(\"questionIndex\"),\n-                equalTo(widget.getInstanceFolder() + File.separator + \"blah.mp3\"));\n+        assertThat(widget.getAnswer(), nullValue());\n     }\n \n     @Test\n     public void clearAnswer_removesAnswerAndHidesPlayer() {\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(destinationPath)));\n         widget.clearAnswer();\n \n         assertThat(widget.getAnswer(), nullValue());\n-        assertThat(audioHelper.isMediaStopped, equalTo(true));\n         verify(audioController).hidePlayer();\n     }\n \n-    @Test\n-    public void clearAnswer_setsFileAsideForDeleting() {\n-        FormEntryPrompt prompt = promptWithAnswer(new StringData(FILE_PATH));\n-        when(prompt.getIndex()).thenReturn(formIndex);\n-\n-        AudioWidget widget = createWidget(prompt);\n-        widget.clearAnswer();\n-\n-        assertThat(questionMediaManager.originalFiles.get(\"questionIndex\"),\n-                equalTo(widget.getInstanceFolder() + File.separator + \"blah.mp3\"));\n-    }\n-\n     @Test\n     public void clearAnswer_callsValueChangeListeners() {\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(destinationPath)));\n         WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n         widget.clearAnswer();\n \n         verify(valueChangedListener).widgetValueChanged(widget);\n     }\n \n-    @Test\n-    public void setData_whenFileExists_replacesOriginalFileWithNewFile() {\n-        FormEntryPrompt prompt = promptWithAnswer(new StringData(FILE_PATH));\n-        when(prompt.getIndex()).thenReturn(formIndex);\n-        AudioWidget widget = createWidget(prompt);\n-        widget.setBinaryData(mockedFile);\n-\n-        assertThat(questionMediaManager.recentFiles.get(\"questionIndex\"), equalTo(\"newFilePath\"));\n-    }\n-\n-    @Test\n-    public void setData_whenPromptHasDifferentAudioFile_deletesOriginalAnswer() {\n-        FormEntryPrompt prompt = promptWithAnswer(new StringData(FILE_PATH));\n-        when(prompt.getIndex()).thenReturn(formIndex);\n-\n-        AudioWidget widget = createWidget(prompt);\n-        widget.setBinaryData(mockedFile);\n-\n-        assertThat(questionMediaManager.originalFiles.get(\"questionIndex\"),\n-                equalTo(widget.getInstanceFolder() + File.separator + \"blah.mp3\"));\n-    }\n-\n-    @Test\n-    public void setData_whenPromptDoesNotHaveAnswer_doesNotDeleteOriginalAnswer() {\n-        AudioWidget widget = createWidget(promptWithAnswer(null));\n-        widget.setBinaryData(mockedFile);\n-        assertThat(questionMediaManager.originalFiles.isEmpty(), equalTo(true));\n-    }\n-\n-    @Test\n-    public void setData_whenPromptHasSameAnswer_doesNotDeleteOriginalAnswer() {\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(\"newFile.mp3\")));\n-        widget.setBinaryData(mockedFile);\n-        assertThat(questionMediaManager.originalFiles.isEmpty(), equalTo(true));\n-    }\n-\n-    @Test\n-    public void setData_whenFileDoesNotExist_doesNotUpdateWidgetAnswer() {\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n-        widget.setBinaryData(new File(\"newFile.mp3\"));\n-        assertThat(widget.getAnswer().getDisplayText(), equalTo(FILE_PATH));\n-    }\n-\n-    @Test\n-    public void setData_whenDataIsUri_copiesNewFileToSource() {\n-        Uri newFileUri = Uri.fromFile(mockedFile);\n-        File sourceFile = new File(SOURCE_FILE_PATH);\n-\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n-\n-        when(mediaUtil.getPathFromUri(widget.getContext(), newFileUri, MediaStore.Audio.Media.DATA)).thenReturn(SOURCE_FILE_PATH);\n-        when(fileUtil.getFileAtPath(SOURCE_FILE_PATH)).thenReturn(sourceFile);\n-        when(fileUtil.getFileAtPath(\"null/null.mp3\")).thenReturn(mockedFile);\n-\n-        widget.setBinaryData(newFileUri);\n-        verify(fileUtil).copyFile(sourceFile, mockedFile);\n-    }\n-\n-    @Test\n-    public void setData_whenFileExists_updatesWidgetAnswer() {\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n-        widget.setBinaryData(mockedFile);\n-        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"newFile.mp3\"));\n-    }\n-\n-    @Test\n-    public void setData_whenFileExists_updatesPlayerMedia() {\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n-        widget.setBinaryData(mockedFile);\n-        Clip clip = getAnswerAudioClip(widget.getInstanceFolder(), widget.getAnswer());\n-\n-        assertThat(audioHelper.audioController, equalTo(audioController));\n-        assertThat(audioHelper.clip.getURI(), equalTo(clip.getURI()));\n-        verify(audioController, times(2)).showPlayer();\n-    }\n-\n-    @Test\n-    public void setData_whenFileExists_callsValueChangeListener() {\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n-        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n-        widget.setBinaryData(mockedFile);\n-\n-        verify(valueChangedListener).widgetValueChanged(widget);\n-    }\n-\n     @Test\n     public void clickingButtonsForLong_callsOnLongClickListeners() {\n         View.OnLongClickListener listener = mock(View.OnLongClickListener.class);\n         AudioWidget widget = createWidget(promptWithAnswer(null));\n         widget.setOnLongClickListener(listener);\n \n-        widget.binding.captureButton.performLongClick();\n-        widget.binding.chooseButton.performLongClick();\n-\n-        verify(listener).onLongClick(widget.binding.captureButton);\n-        verify(listener).onLongClick(widget.binding.chooseButton);\n-    }\n-\n-    @Test\n-    public void clickingChooseButton_whenIntentIsNotAvailable_doesNotStartAnyIntentAndCancelsWaitingForData() {\n-        when(activityAvailability.isActivityAvailable(any())).thenReturn(false);\n-        AudioWidget widget = createWidget(promptWithAnswer(null));\n-\n-        widget.binding.chooseButton.performClick();\n-        Intent startedActivity = shadowActivity.getNextStartedActivity();\n-        String toastMessage = ShadowToast.getTextOfLatestToast();\n-\n-        assertThat(startedActivity, nullValue());\n-        assertThat(waitingForDataRegistry.waiting.isEmpty(), equalTo(true));\n-        assertThat(toastMessage, equalTo(widget.getContext().getString(R.string.activity_not_found,\n-                widget.getContext().getString(R.string.choose_audio))));\n-    }\n-\n-    @Test\n-    public void clickingChooseButton_startsChooseAudioFileActivityAndSetsWidgetWaitingForData() {\n-        FormEntryPrompt prompt = promptWithAnswer(null);\n-        when(prompt.getIndex()).thenReturn(formIndex);\n-\n-        AudioWidget widget = createWidget(prompt);\n-        widget.binding.chooseButton.performClick();\n-\n-        Intent startedActivity = shadowActivity.getNextStartedActivity();\n-        assertThat(startedActivity.getAction(), equalTo(ACTION_GET_CONTENT));\n-        assertThat(startedActivity.getType(), equalTo(\"audio/*\"));\n-\n-        ShadowActivity.IntentForResult intentForResult = shadowActivity.getNextStartedActivityForResult();\n-        assertThat(intentForResult.requestCode, equalTo(ApplicationConstants.RequestCodes.AUDIO_CHOOSER));\n-\n-        assertThat(waitingForDataRegistry.waiting.contains(formIndex), equalTo(true));\n-    }\n-\n-    @Test\n-    public void clickingCaptureButton_whenIntentIsNotAvailable_doesNotStartAnyIntentAndCancelsWaitingForData() {\n-        when(activityAvailability.isActivityAvailable(any())).thenReturn(false);\n-\n-        AudioWidget widget = createWidget(promptWithAnswer(null));\n-        widget.setPermissionUtils(fakePermissionUtils);\n-        fakePermissionUtils.setPermissionGranted(true);\n+        widget.captureButton.performLongClick();\n+        widget.chooseButton.performLongClick();\n \n-        widget.binding.captureButton.performClick();\n-        Intent startedActivity = shadowActivity.getNextStartedActivity();\n-        String toastMessage = ShadowToast.getTextOfLatestToast();\n-\n-        assertThat(startedActivity, nullValue());\n-        assertThat(waitingForDataRegistry.waiting.isEmpty(), equalTo(true));\n-        assertThat(toastMessage, equalTo(widget.getContext().getString(R.string.activity_not_found,\n-                widget.getContext().getString(R.string.capture_audio))));\n-    }\n-\n-    @Test\n-    public void clickingCaptureButton_whenPermissionIsNotGranted_doesNotStartAnyIntentAndCancelsWaitingForData() {\n-        AudioWidget widget = createWidget(promptWithAnswer(null));\n-        widget.setPermissionUtils(fakePermissionUtils);\n-        fakePermissionUtils.setPermissionGranted(false);\n-\n-        widget.binding.captureButton.performClick();\n-        Intent startedActivity = shadowActivity.getNextStartedActivity();\n-\n-        assertThat(startedActivity, nullValue());\n-        assertThat(waitingForDataRegistry.waiting.isEmpty(), equalTo(true));\n-    }\n-\n-    @Test\n-    public void clickingCaptureButton_whenPermissionIsGranted_startsRecordSoundIntentAndSetsWidgetWaitingForData() {\n-        FormEntryPrompt prompt = promptWithAnswer(null);\n-        when(prompt.getIndex()).thenReturn(formIndex);\n-\n-        AudioWidget widget = createWidget(prompt);\n-        widget.setPermissionUtils(fakePermissionUtils);\n-        fakePermissionUtils.setPermissionGranted(true);\n-\n-        widget.binding.captureButton.performClick();\n-        Intent startedActivity = shadowActivity.getNextStartedActivity();\n-\n-        assertThat(startedActivity.getAction(), equalTo(MediaStore.Audio.Media.RECORD_SOUND_ACTION));\n-        assertThat(startedActivity.getStringExtra(MediaStore.EXTRA_OUTPUT), equalTo(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI\n-                .toString()));\n-\n-        ShadowActivity.IntentForResult intentForResult = shadowActivity.getNextStartedActivityForResult();\n-        assertThat(intentForResult.requestCode, equalTo(ApplicationConstants.RequestCodes.AUDIO_CAPTURE));\n-\n-        assertThat(waitingForDataRegistry.waiting.contains(formIndex), equalTo(true));\n+        verify(listener).onLongClick(widget.captureButton);\n+        verify(listener).onLongClick(widget.chooseButton);\n     }\n \n     public AudioWidget createWidget(FormEntryPrompt prompt) {\n-        return new AudioWidget(widgetActivity, new QuestionDetails(prompt, \"formAnalyticsID\"), fileUtil,\n-                mediaUtil, audioController, questionMediaManager, waitingForDataRegistry, audioHelper, activityAvailability);\n-    }\n-\n-    private Clip getAnswerAudioClip(String instanceFolderPath, IAnswerData answer) {\n-        return new Clip(String.valueOf(ViewCompat.generateViewId()), getAudioFilePath(instanceFolderPath, answer));\n+        return new AudioWidget(widgetActivity, new QuestionDetails(prompt, \"formAnalyticsID\"),\n+                fileUtil, mediaUtil, audioController, new FakeWaitingForDataRegistry(), audioHelper);\n     }\n \n-    private String getAudioFilePath(String instanceFolderPath, IAnswerData answer) {\n-        return (new File(instanceFolderPath + File.separator + answer.getDisplayText())).getAbsolutePath();\n+    private File getAudioFile(String instanceFolderPath) {\n+        return new File(instanceFolderPath + File.separator + destinationPath);\n     }\n \n-    private static class FakeAudioHelper extends AudioHelper {\n-        public AudioControllerView audioController;\n-        public Clip clip;\n+    public static class FakeAudioHelper extends AudioHelper {\n \n-        public boolean isMediaStopped;\n+        private AudioControllerView audioController;\n+        private Clip clip;\n \n-        FakeAudioHelper(FragmentActivity activity, LifecycleOwner lifecycleOwner, Scheduler scheduler, Supplier<MediaPlayer> mediaPlayerFactory) {\n+        public FakeAudioHelper(FragmentActivity activity, LifecycleOwner lifecycleOwner, Scheduler scheduler, Supplier<MediaPlayer> mediaPlayerFactory) {\n             super(activity, lifecycleOwner, scheduler, mediaPlayerFactory);\n-            isMediaStopped = false;\n         }\n \n         @Override\n", "next_change": {"commit": "f2ce6ea1d8404ab8f4ea86d5b9adb6b4809d1933", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex 79eeef6b18..bf925f1ecb 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -91,84 +130,290 @@ public class AudioWidgetTest {\n         when(prompt.getAppearanceHint()).thenReturn(WidgetAppearanceUtils.NEW);\n         AudioWidget widget = createWidget(prompt);\n \n-        assertThat(widget.chooseButton.getVisibility(), equalTo(View.GONE));\n+        assertThat(widget.binding.chooseButton.getRoot().getVisibility(), equalTo(View.GONE));\n     }\n \n     @Test\n-    public void whenPromptDoesNotHaveAnswer_audioPlayerIsNotShown() {\n-        AudioWidget widget = createWidget(promptWithAnswer(null));\n-        verify(audioController).hidePlayer();\n-    }\n+    public void whenPromptHasAnswer_updatesPlayerMedia() {\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n+        Clip clip = getAnswerAudioClip(widget.getInstanceFolder(), widget.getAnswer());\n \n-    @Test\n-    public void whenPromptHasAnswer_audioPlayerIsShown() {\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(destinationPath)));\n+        assertThat(audioHelper.audioController, equalTo(audioController));\n+        assertThat(audioHelper.clip.getURI(), equalTo(clip.getURI()));\n         verify(audioController).showPlayer();\n     }\n \n     @Test\n-    public void whenPromptHasAnswer_audioPlayerSetsAudio() {\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(destinationPath)));\n-        Clip clip = new Clip(String.valueOf(ViewCompat.generateViewId()), getAudioFile(widget.getInstanceFolder()).getAbsolutePath());\n+    public void deleteFile_removesWidgetAnswerAndStopsPlayingMedia() {\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n+        widget.deleteFile();\n \n-        assertThat(((FakeAudioHelper) widget.audioHelper).getAudioController(), equalTo(audioController));\n-        assertThat(((FakeAudioHelper) widget.audioHelper).getClip().getURI(), equalTo(clip.getURI()));\n+        assertThat(widget.getAnswer(), nullValue());\n+        assertThat(audioHelper.isMediaStopped, equalTo(true));\n     }\n \n     @Test\n-    public void deleteFile_removesWidgetAnswer() {\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(destinationPath)));\n+    public void deleteFile_callsMediaManagerListener() {\n+        FormEntryPrompt prompt = promptWithAnswer(new StringData(FILE_PATH));\n+        when(prompt.getIndex()).thenReturn(formIndex);\n+\n+        AudioWidget widget = createWidget(prompt);\n         widget.deleteFile();\n-        assertThat(widget.getAnswer(), nullValue());\n+\n+        verify(mockedMediaManagerListener).markOriginalFileOrDelete(\"questionIndex\",\n+                widget.getInstanceFolder() + File.separator + \"blah.mp3\");\n     }\n \n     @Test\n     public void clearAnswer_removesAnswerAndHidesPlayer() {\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(destinationPath)));\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n         widget.clearAnswer();\n \n         assertThat(widget.getAnswer(), nullValue());\n+        assertThat(audioHelper.isMediaStopped, equalTo(true));\n         verify(audioController).hidePlayer();\n     }\n \n+    @Test\n+    public void clearAnswer_callsMediaManagerListener() {\n+        FormEntryPrompt prompt = promptWithAnswer(new StringData(FILE_PATH));\n+        when(prompt.getIndex()).thenReturn(formIndex);\n+\n+        AudioWidget widget = createWidget(prompt);\n+        widget.clearAnswer();\n+\n+        verify(mockedMediaManagerListener).markOriginalFileOrDelete(\"questionIndex\",\n+                widget.getInstanceFolder() + File.separator + \"blah.mp3\");\n+    }\n+\n     @Test\n     public void clearAnswer_callsValueChangeListeners() {\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(destinationPath)));\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n         WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n         widget.clearAnswer();\n \n         verify(valueChangedListener).widgetValueChanged(widget);\n     }\n \n+    @Test\n+    public void setData_whenFileDoesNotExist_doesNotUpdateWidgetAnswer() {\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n+        widget.setBinaryData(new File(\"newFile.mp3\"));\n+\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(FILE_PATH));\n+    }\n+\n+    @Test\n+    public void setData_whenDataIsUri_copiesNewFileToSource() {\n+        Uri newFileUri = Uri.fromFile(mockedFile);\n+        File sourceFile = new File(SOURCE_FILE_PATH);\n+\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n+        String destinationPath = FileWidgetUtils.getDestinationPathFromSourcePath(SOURCE_FILE_PATH, widget.getInstanceFolder(), fileUtil);\n+\n+        when(mediaUtil.getPathFromUri(widget.getContext(), newFileUri, MediaStore.Audio.Media.DATA)).thenReturn(SOURCE_FILE_PATH);\n+        when(fileUtil.getFileAtPath(SOURCE_FILE_PATH)).thenReturn(sourceFile);\n+        when(fileUtil.getFileAtPath(destinationPath)).thenReturn(mockedFile);\n+\n+        widget.setBinaryData(newFileUri);\n+        verify(fileUtil).copyFile(sourceFile, mockedFile);\n+    }\n+\n+    @Test\n+    public void setData_whenFileExists_callsMediaManagerListener() {\n+        FormEntryPrompt prompt = promptWithAnswer(new StringData(FILE_PATH));\n+        when(prompt.getIndex()).thenReturn(formIndex);\n+\n+        AudioWidget widget = createWidget(prompt);\n+        widget.setBinaryData(mockedFile);\n+\n+        verify(mockedMediaManagerListener).replaceRecentFileForQuestion(\"questionIndex\", \"newFilePath\");\n+    }\n+\n+    @Test\n+    public void setData_whenPromptHasDifferentAudioFile_deletesOriginalAnswer() {\n+        FormEntryPrompt prompt = promptWithAnswer(new StringData(FILE_PATH));\n+        when(prompt.getIndex()).thenReturn(formIndex);\n+\n+        AudioWidget widget = createWidget(prompt);\n+        widget.setBinaryData(mockedFile);\n+\n+        verify(mockedMediaManagerListener).markOriginalFileOrDelete(\"questionIndex\",\n+                widget.getInstanceFolder() + File.separator + \"blah.mp3\");\n+    }\n+\n+    @Test\n+    public void setData_whenPromptDoesNotHaveAnswer_doesNotDeleteOriginalAnswer() {\n+        FormEntryPrompt prompt = promptWithAnswer(null);\n+        when(prompt.getIndex()).thenReturn(formIndex);\n+\n+        AudioWidget widget = createWidget(prompt);\n+        widget.setBinaryData(mockedFile);\n+\n+        verify(mockedMediaManagerListener, never()).markOriginalFileOrDelete(\"questionIndex\",\n+                widget.getInstanceFolder() + File.separator + \"blah.mp3\");\n+    }\n+\n+    @Test\n+    public void setData_whenPromptHasSameAnswer_doesNotDeleteOriginalAnswer() {\n+        FormEntryPrompt prompt = promptWithAnswer(new StringData(\"newFile.mp3\"));\n+        when(prompt.getIndex()).thenReturn(formIndex);\n+\n+        AudioWidget widget = createWidget(prompt);\n+        widget.setBinaryData(mockedFile);\n+\n+        verify(mockedMediaManagerListener, never()).markOriginalFileOrDelete(\"questionIndex\",\n+                widget.getInstanceFolder() + File.separator + \"newFile.mp3\");\n+    }\n+\n+    @Test\n+    public void setData_whenFileExists_updatesWidgetAnswer() {\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n+        widget.setBinaryData(mockedFile);\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"newFile.mp3\"));\n+    }\n+\n+    @Test\n+    public void setData_whenFileExists_updatesPlayerMedia() {\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n+        widget.setBinaryData(mockedFile);\n+        Clip clip = getAnswerAudioClip(widget.getInstanceFolder(), widget.getAnswer());\n+\n+        assertThat(audioHelper.audioController, equalTo(audioController));\n+        assertThat(audioHelper.clip.getURI(), equalTo(clip.getURI()));\n+        verify(audioController, times(2)).showPlayer();\n+    }\n+\n+    @Test\n+    public void setData_whenFileExists_callsValueChangeListener() {\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n+        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n+        widget.setBinaryData(mockedFile);\n+\n+        verify(valueChangedListener).widgetValueChanged(widget);\n+    }\n+\n     @Test\n     public void clickingButtonsForLong_callsOnLongClickListeners() {\n         View.OnLongClickListener listener = mock(View.OnLongClickListener.class);\n         AudioWidget widget = createWidget(promptWithAnswer(null));\n         widget.setOnLongClickListener(listener);\n \n-        widget.captureButton.performLongClick();\n-        widget.chooseButton.performLongClick();\n+        widget.binding.captureButton.getRoot().performLongClick();\n+        widget.binding.chooseButton.getRoot().performLongClick();\n+\n+        verify(listener).onLongClick(widget.binding.captureButton.getRoot());\n+        verify(listener).onLongClick(widget.binding.chooseButton.getRoot());\n+    }\n+\n+    @Test\n+    public void clickingChooseButton_whenIntentIsNotAvailable_doesNotStartAnyIntentAndCancelsWaitingForData() {\n+        when(activityAvailability.isActivityAvailable(any())).thenReturn(false);\n+        AudioWidget widget = createWidget(promptWithAnswer(null));\n+\n+        widget.binding.chooseButton.getRoot().performClick();\n+        Intent startedActivity = shadowActivity.getNextStartedActivity();\n+        String toastMessage = ShadowToast.getTextOfLatestToast();\n+\n+        assertThat(startedActivity, nullValue());\n+        assertThat(waitingForDataRegistry.waiting.isEmpty(), equalTo(true));\n+        assertThat(toastMessage, equalTo(widget.getContext().getString(R.string.activity_not_found,\n+                widget.getContext().getString(R.string.choose_audio))));\n+    }\n+\n+    @Test\n+    public void clickingChooseButton_startsChooseAudioFileActivityAndSetsWidgetWaitingForData() {\n+        FormEntryPrompt prompt = promptWithAnswer(null);\n+        when(prompt.getIndex()).thenReturn(formIndex);\n+\n+        AudioWidget widget = createWidget(prompt);\n+        widget.binding.chooseButton.getRoot().performClick();\n+\n+        Intent startedActivity = shadowActivity.getNextStartedActivity();\n+        assertThat(startedActivity.getAction(), equalTo(ACTION_GET_CONTENT));\n+        assertThat(startedActivity.getType(), equalTo(\"audio/*\"));\n+\n+        ShadowActivity.IntentForResult intentForResult = shadowActivity.getNextStartedActivityForResult();\n+        assertThat(intentForResult.requestCode, equalTo(ApplicationConstants.RequestCodes.AUDIO_CHOOSER));\n \n-        verify(listener).onLongClick(widget.captureButton);\n-        verify(listener).onLongClick(widget.chooseButton);\n+        assertThat(waitingForDataRegistry.waiting.contains(formIndex), equalTo(true));\n+    }\n+\n+    @Test\n+    public void clickingCaptureButton_whenIntentIsNotAvailable_doesNotStartAnyIntentAndCancelsWaitingForData() {\n+        when(activityAvailability.isActivityAvailable(any())).thenReturn(false);\n+\n+        AudioWidget widget = createWidget(promptWithAnswer(null));\n+        widget.setPermissionUtils(fakePermissionUtils);\n+        fakePermissionUtils.setPermissionGranted(true);\n+\n+        widget.binding.captureButton.getRoot().performClick();\n+        Intent startedActivity = shadowActivity.getNextStartedActivity();\n+        String toastMessage = ShadowToast.getTextOfLatestToast();\n+\n+        assertThat(startedActivity, nullValue());\n+        assertThat(waitingForDataRegistry.waiting.isEmpty(), equalTo(true));\n+        assertThat(toastMessage, equalTo(widget.getContext().getString(R.string.activity_not_found,\n+                widget.getContext().getString(R.string.capture_audio))));\n+    }\n+\n+    @Test\n+    public void clickingCaptureButton_whenPermissionIsNotGranted_doesNotStartAnyIntentAndCancelsWaitingForData() {\n+        AudioWidget widget = createWidget(promptWithAnswer(null));\n+        widget.setPermissionUtils(fakePermissionUtils);\n+        fakePermissionUtils.setPermissionGranted(false);\n+\n+        widget.binding.captureButton.getRoot().performClick();\n+        Intent startedActivity = shadowActivity.getNextStartedActivity();\n+\n+        assertThat(startedActivity, nullValue());\n+        assertThat(waitingForDataRegistry.waiting.isEmpty(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void clickingCaptureButton_whenPermissionIsGranted_startsRecordSoundIntentAndSetsWidgetWaitingForData() {\n+        FormEntryPrompt prompt = promptWithAnswer(null);\n+        when(prompt.getIndex()).thenReturn(formIndex);\n+\n+        AudioWidget widget = createWidget(prompt);\n+        widget.setPermissionUtils(fakePermissionUtils);\n+        fakePermissionUtils.setPermissionGranted(true);\n+\n+        widget.binding.captureButton.getRoot().performClick();\n+        Intent startedActivity = shadowActivity.getNextStartedActivity();\n+\n+        assertThat(startedActivity.getAction(), equalTo(MediaStore.Audio.Media.RECORD_SOUND_ACTION));\n+        assertThat(startedActivity.getStringExtra(MediaStore.EXTRA_OUTPUT), equalTo(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI\n+                .toString()));\n+\n+        ShadowActivity.IntentForResult intentForResult = shadowActivity.getNextStartedActivityForResult();\n+        assertThat(intentForResult.requestCode, equalTo(ApplicationConstants.RequestCodes.AUDIO_CAPTURE));\n+\n+        assertThat(waitingForDataRegistry.waiting.contains(formIndex), equalTo(true));\n     }\n \n     public AudioWidget createWidget(FormEntryPrompt prompt) {\n-        return new AudioWidget(widgetActivity, new QuestionDetails(prompt, \"formAnalyticsID\"),\n-                fileUtil, mediaUtil, audioController, new FakeWaitingForDataRegistry(), audioHelper);\n+        return new AudioWidget(widgetActivity, new QuestionDetails(prompt, \"formAnalyticsID\"), fileUtil,\n+                mediaUtil, audioController, waitingForDataRegistry, audioHelper, mockedMediaManagerListener, activityAvailability);\n+    }\n+\n+    private Clip getAnswerAudioClip(String instanceFolderPath, IAnswerData answer) {\n+        return new Clip(String.valueOf(ViewCompat.generateViewId()), getAudioFilePath(instanceFolderPath, answer));\n     }\n \n-    private File getAudioFile(String instanceFolderPath) {\n-        return new File(instanceFolderPath + File.separator + destinationPath);\n+    private String getAudioFilePath(String instanceFolderPath, IAnswerData answer) {\n+        return (new File(instanceFolderPath + File.separator + answer.getDisplayText())).getAbsolutePath();\n     }\n \n     public static class FakeAudioHelper extends AudioHelper {\n+        public AudioControllerView audioController;\n+        public Clip clip;\n \n-        private AudioControllerView audioController;\n-        private Clip clip;\n+        public boolean isMediaStopped;\n \n         public FakeAudioHelper(FragmentActivity activity, LifecycleOwner lifecycleOwner, Scheduler scheduler, Supplier<MediaPlayer> mediaPlayerFactory) {\n             super(activity, lifecycleOwner, scheduler, mediaPlayerFactory);\n+            isMediaStopped = false;\n         }\n \n         @Override\n", "next_change": {"commit": "f1d5a3f611beb65263a373a0e628262e59fe5ac6", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex bf925f1ecb..ca8dcb164f 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -405,13 +402,28 @@ public class AudioWidgetTest {\n         return (new File(instanceFolderPath + File.separator + answer.getDisplayText())).getAbsolutePath();\n     }\n \n-    public static class FakeAudioHelper extends AudioHelper {\n+    private static class TestWidgetActivity extends TestScreenContextActivity implements QuestionMediaManager {\n+        Map<String, String> originalFiles = new HashMap<>();\n+        Map<String, String> recentFiles = new HashMap<>();\n+\n+        @Override\n+        public void deleteOriginalFile(String questionIndex, String fileName) {\n+            originalFiles.put(questionIndex, fileName);\n+        }\n+\n+        @Override\n+        public void replaceRecentFile(String questionIndex, String fileName) {\n+            recentFiles.put(questionIndex, fileName);\n+        }\n+    }\n+\n+    private static class FakeAudioHelper extends AudioHelper {\n         public AudioControllerView audioController;\n         public Clip clip;\n \n         public boolean isMediaStopped;\n \n-        public FakeAudioHelper(FragmentActivity activity, LifecycleOwner lifecycleOwner, Scheduler scheduler, Supplier<MediaPlayer> mediaPlayerFactory) {\n+        FakeAudioHelper(FragmentActivity activity, LifecycleOwner lifecycleOwner, Scheduler scheduler, Supplier<MediaPlayer> mediaPlayerFactory) {\n             super(activity, lifecycleOwner, scheduler, mediaPlayerFactory);\n             isMediaStopped = false;\n         }\n", "next_change": null}]}}, {"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex 79eeef6b18..bf925f1ecb 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -177,12 +422,9 @@ public class AudioWidgetTest {\n             this.clip = clip;\n         }\n \n-        public AudioControllerView getAudioController() {\n-            return audioController;\n-        }\n-\n-        public Clip getClip() {\n-            return clip;\n+        @Override\n+        public void stop() {\n+            isMediaStopped = true;\n         }\n     }\n }\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5MzQzNw==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r465793437", "body": "Not sure the naming is right here. It's not really a \"listener\". Maybe the interface is `QuestionMediaManager` and the implementation is something else?", "bodyText": "Not sure the naming is right here. It's not really a \"listener\". Maybe the interface is QuestionMediaManager and the implementation is something else?", "bodyHTML": "<p dir=\"auto\">Not sure the naming is right here. It's not really a \"listener\". Maybe the interface is <code>QuestionMediaManager</code> and the implementation is something else?</p>", "author": "seadowg", "createdAt": "2020-08-05T15:02:19Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/interfaces/MediaManagerListener.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package org.odk.collect.android.widgets.interfaces;\n+\n+public interface MediaManagerListener {", "originalCommit": "53f46a777e8a5ffe159b4ebf557a5031462274f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg0MjgwNw==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r465842807", "bodyText": "Yes right the implementation mostly concerns with the deletion or replacing the file at the current index. But I think I might need to extend this implementation for working on other widgets", "author": "SaumiaSinghal", "createdAt": "2020-08-05T16:14:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5MzQzNw=="}], "type": "inlineReview", "revised_code": {"commit": "fcfb6b9f3bbd0efac9908dca71b34fbe1fa5a23d", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/interfaces/MediaManagerListener.java b/collect_app/src/main/java/org/odk/collect/android/utilities/QuestionMediaManager.java\nsimilarity index 59%\nrename from collect_app/src/main/java/org/odk/collect/android/widgets/interfaces/MediaManagerListener.java\nrename to collect_app/src/main/java/org/odk/collect/android/utilities/QuestionMediaManager.java\nindex abfb861653..7b4735bc69 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/interfaces/MediaManagerListener.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/utilities/QuestionMediaManager.java\n", "chunk": "@@ -1,7 +1,9 @@\n-package org.odk.collect.android.widgets.interfaces;\n+package org.odk.collect.android.utilities;\n \n-public interface MediaManagerListener {\n+public interface QuestionMediaManager {\n     void markOriginalFileOrDelete(String questionIndex, String fileName);\n \n     void replaceRecentFileForQuestion(String questionIndex, String fileName);\n+\n+    void saveChanges();\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5NjQxMw==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r465796413", "body": "Feels like the button text should just live in a layout?", "bodyText": "Feels like the button text should just live in a layout?", "bodyHTML": "<p dir=\"auto\">Feels like the button text should just live in a layout?</p>", "author": "seadowg", "createdAt": "2020-08-05T15:06:27Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java", "diffHunk": "@@ -101,24 +98,33 @@ public AudioWidget(Context context, QuestionDetails prompt, WaitingForDataRegist\n         this.waitingForDataRegistry = waitingForDataRegistry;\n         this.mediaManagerListener = mediaManagerListener;\n \n-        captureButton = createSimpleButton(getContext(), R.id.capture_audio, getFormEntryPrompt().isReadOnly(), getContext().getString(R.string.capture_audio), getAnswerFontSize(), this);\n-\n-        chooseButton = createSimpleButton(getContext(), R.id.choose_sound, getFormEntryPrompt().isReadOnly(), getContext().getString(R.string.choose_sound), getAnswerFontSize(), this);\n-\n-        // finish complex layout\n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-        answerLayout.addView(captureButton);\n-        answerLayout.addView(chooseButton);\n-        answerLayout.addView(audioController);\n-        addAnswerView(answerLayout, WidgetViewUtils.getStandardMargin(context));\n-\n         hideButtonsIfNeeded();\n \n         binaryName = questionDetails.getPrompt().getAnswerText();\n         updatePlayerMedia();\n     }\n \n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = AudioWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+\n+        if (prompt.isReadOnly()) {\n+            binding.captureButton.widgetButton.setVisibility(View.GONE);\n+            binding.chooseButton.widgetButton.setVisibility(View.GONE);\n+        } else {\n+            binding.captureButton.widgetButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            binding.chooseButton.widgetButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+\n+            binding.captureButton.widgetButton.setText(getContext().getString(R.string.capture_audio));", "originalCommit": "a1beed3da777311fc8bdba2eca7f261ca0b35986", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg0MTg0Mg==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r465841842", "bodyText": "I use\n`\n\n<include\n    android:id=\"@+id/choose_button\"\n    layout=\"@layout/widget_button\"/>`\n\nin audio_widget.xml file. So I have added the button text here.", "author": "SaumiaSinghal", "createdAt": "2020-08-05T16:12:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5NjQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg0NDAxNQ==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r465844015", "bodyText": "I think I'd be happier duplicating the layout here than having hardcoded text set programmatically. My thinking is that it's good to be able to see the layout as it will appear (with the text) in the design preview for it.", "author": "seadowg", "createdAt": "2020-08-05T16:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5NjQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg0NTgwNg==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r465845806", "bodyText": "For the other file widgets, I was using the same widget_button.xml layout. So, I should have a separate layout for all of them too?", "author": "SaumiaSinghal", "createdAt": "2020-08-05T16:18:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5NjQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg0NzMzOQ==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r465847339", "bodyText": "I think instead of sharing an include maybe we could create a custom button class with the shared values. Or, create a style that can be shared. These would let us avoid duplication but avoid having to set the text programmatically (which I'd like to avoid as much as possible).", "author": "seadowg", "createdAt": "2020-08-05T16:21:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5NjQxMw=="}], "type": "inlineReview", "revised_code": {"commit": "fcfb6b9f3bbd0efac9908dca71b34fbe1fa5a23d", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\nindex 8e4097ad6d..c8184a2ee7 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\n", "chunk": "@@ -108,18 +111,18 @@ public class AudioWidget extends QuestionWidget implements FileWidget, BinaryDat\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n         binding = AudioWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n \n+        audioController = new AudioControllerView(context);\n+\n+        binding.getRoot().addView(audioController);\n         if (prompt.isReadOnly()) {\n-            binding.captureButton.widgetButton.setVisibility(View.GONE);\n-            binding.chooseButton.widgetButton.setVisibility(View.GONE);\n+            binding.captureButton.setVisibility(View.GONE);\n+            binding.chooseButton.setVisibility(View.GONE);\n         } else {\n-            binding.captureButton.widgetButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n-            binding.chooseButton.widgetButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n-\n-            binding.captureButton.widgetButton.setText(getContext().getString(R.string.capture_audio));\n-            binding.chooseButton.widgetButton.setText(getContext().getString(R.string.choose_sound));\n+            binding.captureButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            binding.chooseButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n \n-            binding.captureButton.widgetButton.setOnClickListener(v -> onCaptureAudioButtonClicked());\n-            binding.chooseButton.widgetButton.setOnClickListener(v -> chooseSound());\n+            binding.captureButton.setOnClickListener(v -> onCaptureAudioButtonClicked());\n+            binding.chooseButton.setOnClickListener(v -> chooseSound());\n         }\n \n         return binding.getRoot();\n", "next_change": {"commit": "d8705c9c05a922eb8b2fbb0c4e36febeaee9e35b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\nindex c8184a2ee7..1d5a1bbf1d 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\n", "chunk": "@@ -74,65 +74,53 @@ public class AudioWidget extends QuestionWidget implements FileWidget, BinaryDat\n     @NonNull\n     private MediaUtil mediaUtil;\n \n+    AudioControllerView audioController;\n     private final WaitingForDataRegistry waitingForDataRegistry;\n-    private final ActivityAvailability activityAvailability;\n+    Button captureButton;\n+    Button chooseButton;\n \n-    private QuestionMediaManager questionMediaManager;\n     private String binaryName;\n \n-    public AudioWidget(Context context, QuestionDetails prompt, QuestionMediaManager questionMediaManager, WaitingForDataRegistry waitingForDataRegistry) {\n-        this(context, prompt, new FileUtil(), new MediaUtil(), null, questionMediaManager,\n-                waitingForDataRegistry, null, new ActivityAvailability(context));\n+    public AudioWidget(Context context, QuestionDetails prompt, WaitingForDataRegistry waitingForDataRegistry, AudioHelper audioHelper) {\n+        this(context, prompt, new FileUtil(), new MediaUtil(), new AudioControllerView(context), waitingForDataRegistry, audioHelper);\n     }\n \n-    AudioWidget(Context context, QuestionDetails questionDetails, @NonNull FileUtil fileUtil, @NonNull MediaUtil mediaUtil, @NonNull AudioControllerView audioController,\n-                QuestionMediaManager questionMediaManager, WaitingForDataRegistry waitingForDataRegistry, AudioHelper audioHelper, ActivityAvailability activityAvailability) {\n+    AudioWidget(Context context, QuestionDetails questionDetails, @NonNull FileUtil fileUtil, @NonNull MediaUtil mediaUtil,\n+                @NonNull AudioControllerView audioController, WaitingForDataRegistry waitingForDataRegistry, AudioHelper audioHelper) {\n         super(context, questionDetails);\n \n         if (audioHelper != null) {\n             this.audioHelper = audioHelper;\n         }\n-        if (audioController != null) {\n-            this.audioController = audioController;\n-        }\n         this.fileUtil = fileUtil;\n         this.mediaUtil = mediaUtil;\n-        this.questionMediaManager = questionMediaManager;\n+        this.audioController = audioController;\n         this.waitingForDataRegistry = waitingForDataRegistry;\n-        this.activityAvailability = activityAvailability;\n-\n-        hideButtonsIfNeeded();\n-\n-        binaryName = questionDetails.getPrompt().getAnswerText();\n-        updatePlayerMedia();\n-    }\n \n-    @Override\n-    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = AudioWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        captureButton = createSimpleButton(getContext(), R.id.capture_audio, getFormEntryPrompt().isReadOnly(), getContext().getString(R.string.capture_audio), getAnswerFontSize(), this);\n \n-        audioController = new AudioControllerView(context);\n+        chooseButton = createSimpleButton(getContext(), R.id.choose_sound, getFormEntryPrompt().isReadOnly(), getContext().getString(R.string.choose_sound), getAnswerFontSize(), this);\n \n-        binding.getRoot().addView(audioController);\n-        if (prompt.isReadOnly()) {\n-            binding.captureButton.setVisibility(View.GONE);\n-            binding.chooseButton.setVisibility(View.GONE);\n-        } else {\n-            binding.captureButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n-            binding.chooseButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+        // finish complex layout\n+        LinearLayout answerLayout = new LinearLayout(getContext());\n+        answerLayout.setOrientation(LinearLayout.VERTICAL);\n+        answerLayout.addView(captureButton);\n+        answerLayout.addView(chooseButton);\n+        answerLayout.addView(audioController);\n+        addAnswerView(answerLayout, WidgetViewUtils.getStandardMargin(context));\n \n-            binding.captureButton.setOnClickListener(v -> onCaptureAudioButtonClicked());\n-            binding.chooseButton.setOnClickListener(v -> chooseSound());\n-        }\n+        hideButtonsIfNeeded();\n \n-        return binding.getRoot();\n+        binaryName = questionDetails.getPrompt().getAnswerText();\n+        updatePlayerMedia();\n     }\n \n     @Override\n     public void deleteFile() {\n-        audioHelper.stop();\n-        questionMediaManager.markOriginalFileOrDelete(getFormEntryPrompt().getIndex().toString(),\n-                getInstanceFolder() + File.separator + binaryName);\n+        MediaManager\n+                .INSTANCE\n+                .markOriginalFileOrDelete(getFormEntryPrompt().getIndex().toString(),\n+                        getInstanceFolder() + File.separator + binaryName);\n         binaryName = null;\n     }\n \n", "next_change": {"commit": "41ea8a171ca60cf08b410763264e609068df75bd", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\nindex 1d5a1bbf1d..18150114f3 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\n", "chunk": "@@ -117,10 +121,8 @@ public class AudioWidget extends QuestionWidget implements FileWidget, ButtonCli\n \n     @Override\n     public void deleteFile() {\n-        MediaManager\n-                .INSTANCE\n-                .markOriginalFileOrDelete(getFormEntryPrompt().getIndex().toString(),\n-                        getInstanceFolder() + File.separator + binaryName);\n+        mediaManagerListener.markOriginalFileOrDelete(getFormEntryPrompt().getIndex().toString(),\n+                getInstanceFolder() + File.separator + binaryName);\n         binaryName = null;\n     }\n \n", "next_change": {"commit": "bad75cb39b6e4cef96c8e767bb5eb650871111f4", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\nindex 18150114f3..8e4097ad6d 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\n", "chunk": "@@ -101,24 +98,33 @@ public class AudioWidget extends QuestionWidget implements FileWidget, ButtonCli\n         this.waitingForDataRegistry = waitingForDataRegistry;\n         this.mediaManagerListener = mediaManagerListener;\n \n-        captureButton = createSimpleButton(getContext(), R.id.capture_audio, getFormEntryPrompt().isReadOnly(), getContext().getString(R.string.capture_audio), getAnswerFontSize(), this);\n-\n-        chooseButton = createSimpleButton(getContext(), R.id.choose_sound, getFormEntryPrompt().isReadOnly(), getContext().getString(R.string.choose_sound), getAnswerFontSize(), this);\n-\n-        // finish complex layout\n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-        answerLayout.addView(captureButton);\n-        answerLayout.addView(chooseButton);\n-        answerLayout.addView(audioController);\n-        addAnswerView(answerLayout, WidgetViewUtils.getStandardMargin(context));\n-\n         hideButtonsIfNeeded();\n \n         binaryName = questionDetails.getPrompt().getAnswerText();\n         updatePlayerMedia();\n     }\n \n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = AudioWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+\n+        if (prompt.isReadOnly()) {\n+            binding.captureButton.widgetButton.setVisibility(View.GONE);\n+            binding.chooseButton.widgetButton.setVisibility(View.GONE);\n+        } else {\n+            binding.captureButton.widgetButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            binding.chooseButton.widgetButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+\n+            binding.captureButton.widgetButton.setText(getContext().getString(R.string.capture_audio));\n+            binding.chooseButton.widgetButton.setText(getContext().getString(R.string.choose_sound));\n+\n+            binding.captureButton.widgetButton.setOnClickListener(v -> onCaptureAudioButtonClicked());\n+            binding.chooseButton.widgetButton.setOnClickListener(v -> chooseSound());\n+        }\n+\n+        return binding.getRoot();\n+    }\n+\n     @Override\n     public void deleteFile() {\n         mediaManagerListener.markOriginalFileOrDelete(getFormEntryPrompt().getIndex().toString(),\n", "next_change": {"commit": "f2ce6ea1d8404ab8f4ea86d5b9adb6b4809d1933", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\nindex 8e4097ad6d..3d24e1802b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\n", "chunk": "@@ -127,6 +134,7 @@ public class AudioWidget extends QuestionWidget implements FileWidget, BinaryDat\n \n     @Override\n     public void deleteFile() {\n+        audioHelper.stop();\n         mediaManagerListener.markOriginalFileOrDelete(getFormEntryPrompt().getIndex().toString(),\n                 getInstanceFolder() + File.separator + binaryName);\n         binaryName = null;\n", "next_change": {"commit": "f60b09af11fa47d8e4257436fed84af8a11632a8", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\nindex 3d24e1802b..73bca4cb53 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\n", "chunk": "@@ -135,7 +135,7 @@ public class AudioWidget extends QuestionWidget implements FileWidget, BinaryDat\n     @Override\n     public void deleteFile() {\n         audioHelper.stop();\n-        mediaManagerListener.markOriginalFileOrDelete(getFormEntryPrompt().getIndex().toString(),\n+        questionMediaManager.markOriginalFileOrDelete(getFormEntryPrompt().getIndex().toString(),\n                 getInstanceFolder() + File.separator + binaryName);\n         binaryName = null;\n     }\n", "next_change": {"commit": "12cd8f35b3b56f889ff5a9674d519e6a5f27b847", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\nindex 73bca4cb53..09aab614d1 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\n", "chunk": "@@ -135,7 +129,7 @@ public class AudioWidget extends QuestionWidget implements FileWidget, BinaryDat\n     @Override\n     public void deleteFile() {\n         audioHelper.stop();\n-        questionMediaManager.markOriginalFileOrDelete(getFormEntryPrompt().getIndex().toString(),\n+        MediaManager.INSTANCE.markOriginalFileOrDelete(getFormEntryPrompt().getIndex().toString(),\n                 getInstanceFolder() + File.separator + binaryName);\n         binaryName = null;\n     }\n", "next_change": {"commit": "f1d5a3f611beb65263a373a0e628262e59fe5ac6", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\nindex 09aab614d1..309b329263 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\n", "chunk": "@@ -129,7 +134,7 @@ public class AudioWidget extends QuestionWidget implements FileWidget, BinaryDat\n     @Override\n     public void deleteFile() {\n         audioHelper.stop();\n-        MediaManager.INSTANCE.markOriginalFileOrDelete(getFormEntryPrompt().getIndex().toString(),\n+        mediaManager.deleteOriginalFile(getFormEntryPrompt().getIndex().toString(),\n                 getInstanceFolder() + File.separator + binaryName);\n         binaryName = null;\n     }\n", "next_change": {"commit": "4538677195fb3deb685d07793de2992249055562", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\nindex 309b329263..c8184a2ee7 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java\n", "chunk": "@@ -134,7 +131,7 @@ public class AudioWidget extends QuestionWidget implements FileWidget, BinaryDat\n     @Override\n     public void deleteFile() {\n         audioHelper.stop();\n-        mediaManager.deleteOriginalFile(getFormEntryPrompt().getIndex().toString(),\n+        questionMediaManager.markOriginalFileOrDelete(getFormEntryPrompt().getIndex().toString(),\n                 getInstanceFolder() + File.separator + binaryName);\n         binaryName = null;\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5ODY3MQ==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r465798671", "body": "We want a test for this change. ", "bodyText": "We want a test for this change.", "bodyHTML": "<p dir=\"auto\">We want a test for this change.</p>", "author": "seadowg", "createdAt": "2020-08-05T15:09:45Z", "path": "collect_app/src/main/java/org/odk/collect/android/audio/AudioPlayerViewModel.java", "diffHunk": "@@ -178,16 +178,14 @@ public void errorDisplayed() {\n     }\n \n     private void schedulePositionUpdates() {\n-        if (positionUpdatesCancellable == null) {\n-            positionUpdatesCancellable = scheduler.repeat(() -> {\n-                CurrentlyPlaying currentlyPlaying = this.currentlyPlaying.getValue();\n+        positionUpdatesCancellable = scheduler.repeat(() -> {", "originalCommit": "9c5a37fd4995edaa6d051eaa4787608a09c0a18c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk2MDA1MQ==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r465960051", "bodyText": "I verified playMultipleClips_updatesProgress_forAllClips() and playInOrder_playsClipsOneAfterTheOther_andUpdatesProgress fails on master.", "author": "SaumiaSinghal", "createdAt": "2020-08-05T19:41:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5ODY3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d8705c9c05a922eb8b2fbb0c4e36febeaee9e35b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/audio/AudioPlayerViewModel.java b/collect_app/src/main/java/org/odk/collect/android/audio/AudioPlayerViewModel.java\nindex 3ee5d10cc2..59e9e77003 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/audio/AudioPlayerViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/audio/AudioPlayerViewModel.java\n", "chunk": "@@ -178,14 +178,16 @@ class AudioPlayerViewModel extends ViewModel implements MediaPlayer.OnCompletion\n     }\n \n     private void schedulePositionUpdates() {\n-        positionUpdatesCancellable = scheduler.repeat(() -> {\n-            CurrentlyPlaying currentlyPlaying = this.currentlyPlaying.getValue();\n+        if (positionUpdatesCancellable == null) {\n+            positionUpdatesCancellable = scheduler.repeat(() -> {\n+                CurrentlyPlaying currentlyPlaying = this.currentlyPlaying.getValue();\n \n-            if (currentlyPlaying != null) {\n-                MutableLiveData<Integer> position = getPositionForClip(currentlyPlaying.clip.getClipID());\n-                position.postValue(getMediaPlayer().getCurrentPosition());\n-            }\n-        }, 500);\n+                if (currentlyPlaying != null) {\n+                    MutableLiveData<Integer> position = getPositionForClip(currentlyPlaying.clip.getClipID());\n+                    position.postValue(getMediaPlayer().getCurrentPosition());\n+                }\n+            }, 500);\n+        }\n     }\n \n     private void cancelPositionUpdates() {\n", "next_change": {"commit": "70e43ec5b5ae376db5087dfe061c3f7d51e45dca", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/audio/AudioPlayerViewModel.java b/collect_app/src/main/java/org/odk/collect/android/audio/AudioPlayerViewModel.java\nindex 59e9e77003..3ee5d10cc2 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/audio/AudioPlayerViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/audio/AudioPlayerViewModel.java\n", "chunk": "@@ -178,16 +178,14 @@ class AudioPlayerViewModel extends ViewModel implements MediaPlayer.OnCompletion\n     }\n \n     private void schedulePositionUpdates() {\n-        if (positionUpdatesCancellable == null) {\n-            positionUpdatesCancellable = scheduler.repeat(() -> {\n-                CurrentlyPlaying currentlyPlaying = this.currentlyPlaying.getValue();\n+        positionUpdatesCancellable = scheduler.repeat(() -> {\n+            CurrentlyPlaying currentlyPlaying = this.currentlyPlaying.getValue();\n \n-                if (currentlyPlaying != null) {\n-                    MutableLiveData<Integer> position = getPositionForClip(currentlyPlaying.clip.getClipID());\n-                    position.postValue(getMediaPlayer().getCurrentPosition());\n-                }\n-            }, 500);\n-        }\n+            if (currentlyPlaying != null) {\n+                MutableLiveData<Integer> position = getPositionForClip(currentlyPlaying.clip.getClipID());\n+                position.postValue(getMediaPlayer().getCurrentPosition());\n+            }\n+        }, 500);\n     }\n \n     private void cancelPositionUpdates() {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQyNjUyNg==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r466426526", "body": "I like what's happening here but I think the variable/method should be named something more related to the scheduler than the test here. Maybe `isRepeatRunning`?", "bodyText": "I like what's happening here but I think the variable/method should be named something more related to the scheduler than the test here. Maybe isRepeatRunning?", "bodyHTML": "<p dir=\"auto\">I like what's happening here but I think the variable/method should be named something more related to the scheduler than the test here. Maybe <code>isRepeatRunning</code>?</p>", "author": "seadowg", "createdAt": "2020-08-06T13:50:05Z", "path": "collect_app/src/test/java/org/odk/collect/android/support/FakeScheduler.java", "diffHunk": "@@ -13,6 +13,7 @@\n     private Runnable foregroundTask;\n     private Runnable backgroundTask;\n     private Boolean cancelled = false;\n+    private Boolean isProgressUpdating = false;", "originalCommit": "f4d859d8ca3a4cb691d3e15bf611cc690dd93749", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcfb6b9f3bbd0efac9908dca71b34fbe1fa5a23d", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/support/FakeScheduler.java b/collect_app/src/test/java/org/odk/collect/android/support/FakeScheduler.java\nindex fa14ec841c..8786e19e81 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/support/FakeScheduler.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/support/FakeScheduler.java\n", "chunk": "@@ -13,7 +13,7 @@ public class FakeScheduler implements Scheduler {\n     private Runnable foregroundTask;\n     private Runnable backgroundTask;\n     private Boolean cancelled = false;\n-    private Boolean isProgressUpdating = false;\n+    private Boolean isRepeatRunning = false;\n \n     @Override\n     public <T> void immediate(Supplier<T> foreground, Consumer<T> background) {\n", "next_change": {"commit": "d8705c9c05a922eb8b2fbb0c4e36febeaee9e35b", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/support/FakeScheduler.java b/collect_app/src/test/java/org/odk/collect/android/support/FakeScheduler.java\nindex 8786e19e81..efa3a4ec07 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/support/FakeScheduler.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/support/FakeScheduler.java\n", "chunk": "@@ -13,7 +13,6 @@ public class FakeScheduler implements Scheduler {\n     private Runnable foregroundTask;\n     private Runnable backgroundTask;\n     private Boolean cancelled = false;\n-    private Boolean isRepeatRunning = false;\n \n     @Override\n     public <T> void immediate(Supplier<T> foreground, Consumer<T> background) {\n", "next_change": {"commit": "a7104f0781ecb984bb75b64705a80bf55f13df83", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/support/FakeScheduler.java b/collect_app/src/test/java/org/odk/collect/android/support/FakeScheduler.java\nindex efa3a4ec07..fa14ec841c 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/support/FakeScheduler.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/support/FakeScheduler.java\n", "chunk": "@@ -13,6 +13,7 @@ public class FakeScheduler implements Scheduler {\n     private Runnable foregroundTask;\n     private Runnable backgroundTask;\n     private Boolean cancelled = false;\n+    private Boolean isProgressUpdating = false;\n \n     @Override\n     public <T> void immediate(Supplier<T> foreground, Consumer<T> background) {\n", "next_change": {"commit": "e8bbd94f8defe4cfd7807a95751254aeb88498b9", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/support/FakeScheduler.java b/collect_app/src/test/java/org/odk/collect/android/support/FakeScheduler.java\nindex fa14ec841c..8786e19e81 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/support/FakeScheduler.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/support/FakeScheduler.java\n", "chunk": "@@ -13,7 +13,7 @@ public class FakeScheduler implements Scheduler {\n     private Runnable foregroundTask;\n     private Runnable backgroundTask;\n     private Boolean cancelled = false;\n-    private Boolean isProgressUpdating = false;\n+    private Boolean isRepeatRunning = false;\n \n     @Override\n     public <T> void immediate(Supplier<T> foreground, Consumer<T> background) {\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1NDE2NQ==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r467854165", "body": "I don't think this is quite right after a second look. As much as we can we want to avoid static singletons. If there is some state that we want to keep shared at an application level (i.e. between multiple activities or services) then we should use Dagger to setup and inject a singleton (using `@Singleton`).  \r\n\r\nIn this case I don't believe the state needs to persist outside of form entry so it really only needs to last as long as the Activity.  This means we could confuse ourselves by ending up with state hanging around between form entry \"sessions\". A good way to share state like this would be to use a view model where the `ViewModelProvider` uses the activity as its owner. Does that make sense as a way forward?", "bodyText": "I don't think this is quite right after a second look. As much as we can we want to avoid static singletons. If there is some state that we want to keep shared at an application level (i.e. between multiple activities or services) then we should use Dagger to setup and inject a singleton (using @Singleton).\nIn this case I don't believe the state needs to persist outside of form entry so it really only needs to last as long as the Activity.  This means we could confuse ourselves by ending up with state hanging around between form entry \"sessions\". A good way to share state like this would be to use a view model where the ViewModelProvider uses the activity as its owner. Does that make sense as a way forward?", "bodyHTML": "<p dir=\"auto\">I don't think this is quite right after a second look. As much as we can we want to avoid static singletons. If there is some state that we want to keep shared at an application level (i.e. between multiple activities or services) then we should use Dagger to setup and inject a singleton (using <code>@Singleton</code>).</p>\n<p dir=\"auto\">In this case I don't believe the state needs to persist outside of form entry so it really only needs to last as long as the Activity.  This means we could confuse ourselves by ending up with state hanging around between form entry \"sessions\". A good way to share state like this would be to use a view model where the <code>ViewModelProvider</code> uses the activity as its owner. Does that make sense as a way forward?</p>", "author": "seadowg", "createdAt": "2020-08-10T11:57:53Z", "path": "collect_app/src/main/java/org/odk/collect/android/utilities/MediaManager.java", "diffHunk": "@@ -24,7 +24,7 @@\n  * remember an original media file answer (no matter how many times this answer is replaced), in order\n  * to be able to restore the original answer in case of ignoring changes.\n  */\n-public enum MediaManager {\n+public enum MediaManager implements QuestionMediaManager {", "originalCommit": "466e31dd54f2a6c426ecbc1c780c7091970d9e62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1NTk1NA==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r467855954", "bodyText": "If so, it might be good to discuss the plans/approach here so we can come up with something that makes sense as it's a little awkward I think!", "author": "seadowg", "createdAt": "2020-08-10T12:01:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1NDE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg2NjcwOQ==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r467866709", "bodyText": "@seadowg If I use the ViewModel then I would be creating it using the widget context, and it will be there for all the widgets on the screen?\nI feel like avoiding using QuestionMediaManager too and using the previous implementation. That would mean there would be additional unit tests for the widgets. Will that be fine?", "author": "SaumiaSinghal", "createdAt": "2020-08-10T12:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1NDE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAxODIxNw==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r468018217", "bodyText": "I think if that's simpler to do right now that's a good plan. Maybe we can move the logic to a viewmodel in the future.", "author": "seadowg", "createdAt": "2020-08-10T16:09:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1NDE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fcfb6b9f3bbd0efac9908dca71b34fbe1fa5a23d", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/utilities/MediaManager.java b/collect_app/src/main/java/org/odk/collect/android/utilities/MediaManager.java\ndeleted file mode 100644\nindex a67145a857..0000000000\n--- a/collect_app/src/main/java/org/odk/collect/android/utilities/MediaManager.java\n+++ /dev/null\n", "chunk": "@@ -1,70 +0,0 @@\n-/*\n- * Copyright 2018 Nafundi\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.odk.collect.android.utilities;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-/**\n- * This class is responsible for managing media files collected by users. The purpose here is to\n- * remember an original media file answer (no matter how many times this answer is replaced), in order\n- * to be able to restore the original answer in case of ignoring changes.\n- */\n-public enum MediaManager implements QuestionMediaManager {\n-    INSTANCE;\n-\n-    Map<String, String> originalFiles = new HashMap<>();\n-    Map<String, String> recentFiles = new HashMap<>();\n-\n-    public void markOriginalFileOrDelete(String questionIndex, String fileName) {\n-        if (questionIndex != null && fileName != null) {\n-            if (originalFiles.containsKey(questionIndex)) {\n-                MediaUtils.deleteImageFileFromMediaProvider(fileName);\n-            } else {\n-                originalFiles.put(questionIndex, fileName);\n-            }\n-        }\n-    }\n-\n-    public void replaceRecentFileForQuestion(String questionIndex, String fileName) {\n-        if (questionIndex != null && fileName != null) {\n-            if (recentFiles.containsKey(questionIndex)) {\n-                MediaUtils.deleteImageFileFromMediaProvider(recentFiles.get(questionIndex));\n-            }\n-            recentFiles.put(questionIndex, fileName);\n-        }\n-    }\n-\n-    public void revertChanges() {\n-        for (String fileName : recentFiles.values()) {\n-            MediaUtils.deleteImageFileFromMediaProvider(fileName);\n-        }\n-        releaseMediaManager();\n-    }\n-\n-    public void saveChanges() {\n-        for (String fileName : originalFiles.values()) {\n-            MediaUtils.deleteImageFileFromMediaProvider(fileName);\n-        }\n-        releaseMediaManager();\n-    }\n-\n-    private void releaseMediaManager() {\n-        originalFiles.clear();\n-        recentFiles.clear();\n-    }\n-}\n", "next_change": {"commit": "d8705c9c05a922eb8b2fbb0c4e36febeaee9e35b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/utilities/MediaManager.java b/collect_app/src/main/java/org/odk/collect/android/utilities/MediaManager.java\nnew file mode 100644\nindex 0000000000..a67b282ace\n--- /dev/null\n+++ b/collect_app/src/main/java/org/odk/collect/android/utilities/MediaManager.java\n", "chunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2018 Nafundi\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.odk.collect.android.utilities;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This class is responsible for managing media files collected by users. The purpose here is to\n+ * remember an original media file answer (no matter how many times this answer is replaced), in order\n+ * to be able to restore the original answer in case of ignoring changes.\n+ */\n+public enum MediaManager {\n+    INSTANCE;\n+\n+    Map<String, String> originalFiles = new HashMap<>();\n+    Map<String, String> recentFiles = new HashMap<>();\n+\n+    public void markOriginalFileOrDelete(String questionIndex, String fileName) {\n+        if (questionIndex != null && fileName != null) {\n+            if (originalFiles.containsKey(questionIndex)) {\n+                MediaUtils.deleteImageFileFromMediaProvider(fileName);\n+            } else {\n+                originalFiles.put(questionIndex, fileName);\n+            }\n+        }\n+    }\n+\n+    public void replaceRecentFileForQuestion(String questionIndex, String fileName) {\n+        if (questionIndex != null && fileName != null) {\n+            if (recentFiles.containsKey(questionIndex)) {\n+                MediaUtils.deleteImageFileFromMediaProvider(recentFiles.get(questionIndex));\n+            }\n+            recentFiles.put(questionIndex, fileName);\n+        }\n+    }\n+\n+    public void revertChanges() {\n+        for (String fileName : recentFiles.values()) {\n+            MediaUtils.deleteImageFileFromMediaProvider(fileName);\n+        }\n+        releaseMediaManager();\n+    }\n+\n+    public void saveChanges() {\n+        for (String fileName : originalFiles.values()) {\n+            MediaUtils.deleteImageFileFromMediaProvider(fileName);\n+        }\n+        releaseMediaManager();\n+    }\n+\n+    private void releaseMediaManager() {\n+        originalFiles.clear();\n+        recentFiles.clear();\n+    }\n+}\n", "next_change": {"commit": "4538677195fb3deb685d07793de2992249055562", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/utilities/MediaManager.java b/collect_app/src/main/java/org/odk/collect/android/utilities/MediaManager.java\ndeleted file mode 100644\nindex a67b282ace..0000000000\n--- a/collect_app/src/main/java/org/odk/collect/android/utilities/MediaManager.java\n+++ /dev/null\n", "chunk": "@@ -1,70 +0,0 @@\n-/*\n- * Copyright 2018 Nafundi\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.odk.collect.android.utilities;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-/**\n- * This class is responsible for managing media files collected by users. The purpose here is to\n- * remember an original media file answer (no matter how many times this answer is replaced), in order\n- * to be able to restore the original answer in case of ignoring changes.\n- */\n-public enum MediaManager {\n-    INSTANCE;\n-\n-    Map<String, String> originalFiles = new HashMap<>();\n-    Map<String, String> recentFiles = new HashMap<>();\n-\n-    public void markOriginalFileOrDelete(String questionIndex, String fileName) {\n-        if (questionIndex != null && fileName != null) {\n-            if (originalFiles.containsKey(questionIndex)) {\n-                MediaUtils.deleteImageFileFromMediaProvider(fileName);\n-            } else {\n-                originalFiles.put(questionIndex, fileName);\n-            }\n-        }\n-    }\n-\n-    public void replaceRecentFileForQuestion(String questionIndex, String fileName) {\n-        if (questionIndex != null && fileName != null) {\n-            if (recentFiles.containsKey(questionIndex)) {\n-                MediaUtils.deleteImageFileFromMediaProvider(recentFiles.get(questionIndex));\n-            }\n-            recentFiles.put(questionIndex, fileName);\n-        }\n-    }\n-\n-    public void revertChanges() {\n-        for (String fileName : recentFiles.values()) {\n-            MediaUtils.deleteImageFileFromMediaProvider(fileName);\n-        }\n-        releaseMediaManager();\n-    }\n-\n-    public void saveChanges() {\n-        for (String fileName : originalFiles.values()) {\n-            MediaUtils.deleteImageFileFromMediaProvider(fileName);\n-        }\n-        releaseMediaManager();\n-    }\n-\n-    private void releaseMediaManager() {\n-        originalFiles.clear();\n-        recentFiles.clear();\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkxNDUzNw==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r469914537", "body": "Maybe this hasn't come through in previous comments and conversations but I'm very against the `MediaManager` being a singleton. Just to make it very clear I think the `MediaManager` should be a `class` (not an `enum`) and that this line should be:\r\n\r\n```java\r\nreturn (T) new FormSaveViewModel(System::currentTimeMillis, new DiskFormSaver(), analytics, new MediaManager());\r\n```\r\n\r\nAs we talked about before we could get in trouble with the `enum` singleton implementation as its state will be carried between different instances of the `FormEntryActivity`. Also in tests the singleton **would not** be recreated for each test (as the static state is retained throughout the process) so any state in the `MediaManager` set up in one test might inadvertently affect another.\r\n", "bodyText": "Maybe this hasn't come through in previous comments and conversations but I'm very against the MediaManager being a singleton. Just to make it very clear I think the MediaManager should be a class (not an enum) and that this line should be:\nreturn (T) new FormSaveViewModel(System::currentTimeMillis, new DiskFormSaver(), analytics, new MediaManager());\nAs we talked about before we could get in trouble with the enum singleton implementation as its state will be carried between different instances of the FormEntryActivity. Also in tests the singleton would not be recreated for each test (as the static state is retained throughout the process) so any state in the MediaManager set up in one test might inadvertently affect another.", "bodyHTML": "<p dir=\"auto\">Maybe this hasn't come through in previous comments and conversations but I'm very against the <code>MediaManager</code> being a singleton. Just to make it very clear I think the <code>MediaManager</code> should be a <code>class</code> (not an <code>enum</code>) and that this line should be:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"return (T) new FormSaveViewModel(System::currentTimeMillis, new DiskFormSaver(), analytics, new MediaManager());\n\"><pre><span class=\"pl-k\">return</span> (<span class=\"pl-smi\">T</span>) <span class=\"pl-k\">new</span> <span class=\"pl-smi\">FormSaveViewModel</span>(<span class=\"pl-smi\">System</span><span class=\"pl-k\">::</span>currentTimeMillis, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">DiskFormSaver</span>(), analytics, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">MediaManager</span>());</pre></div>\n<p dir=\"auto\">As we talked about before we could get in trouble with the <code>enum</code> singleton implementation as its state will be carried between different instances of the <code>FormEntryActivity</code>. Also in tests the singleton <strong>would not</strong> be recreated for each test (as the static state is retained throughout the process) so any state in the <code>MediaManager</code> set up in one test might inadvertently affect another.</p>", "author": "seadowg", "createdAt": "2020-08-13T12:29:24Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "diffHunk": "@@ -370,7 +377,7 @@ public Factory(Analytics analytics) {\n         @NonNull\n         @Override\n         public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {\n-            return (T) new FormSaveViewModel(System::currentTimeMillis, new DiskFormSaver(), analytics);\n+            return (T) new FormSaveViewModel(System::currentTimeMillis, new DiskFormSaver(), analytics, MediaManager.INSTANCE);", "originalCommit": "fc611fcad1d2dd0f71457606251ff67bae652fa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzMjE1OA==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r469932158", "bodyText": "Oh right! I didn't think about it. It will cause problems when writing tests for other file widgets.", "author": "SaumiaSinghal", "createdAt": "2020-08-13T12:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkxNDUzNw=="}], "type": "inlineReview", "revised_code": {"commit": "fcfb6b9f3bbd0efac9908dca71b34fbe1fa5a23d", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\nindex 22b95ba653..56e5cd8525 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n", "chunk": "@@ -377,7 +411,7 @@ public class FormSaveViewModel extends ViewModel implements ProgressDialogFragme\n         @NonNull\n         @Override\n         public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {\n-            return (T) new FormSaveViewModel(System::currentTimeMillis, new DiskFormSaver(), analytics, MediaManager.INSTANCE);\n+            return (T) new FormSaveViewModel(System::currentTimeMillis, new DiskFormSaver(), analytics);\n         }\n     }\n }\n", "next_change": {"commit": "f1d5a3f611beb65263a373a0e628262e59fe5ac6", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\nindex 56e5cd8525..22b95ba653 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n", "chunk": "@@ -411,7 +377,7 @@ public class FormSaveViewModel extends ViewModel implements ProgressDialogFragme\n         @NonNull\n         @Override\n         public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {\n-            return (T) new FormSaveViewModel(System::currentTimeMillis, new DiskFormSaver(), analytics);\n+            return (T) new FormSaveViewModel(System::currentTimeMillis, new DiskFormSaver(), analytics, MediaManager.INSTANCE);\n         }\n     }\n }\n", "next_change": {"commit": "356f6e15a5e842321e4b0cf3cfbdab0cd93ba1df", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\nindex 22b95ba653..eb1fd550d4 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n", "chunk": "@@ -377,7 +379,7 @@ public class FormSaveViewModel extends ViewModel implements ProgressDialogFragme\n         @NonNull\n         @Override\n         public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {\n-            return (T) new FormSaveViewModel(System::currentTimeMillis, new DiskFormSaver(), analytics, MediaManager.INSTANCE);\n+            return (T) new FormSaveViewModel(System::currentTimeMillis, new DiskFormSaver(), analytics, new MediaManager());\n         }\n     }\n }\n", "next_change": {"commit": "4538677195fb3deb685d07793de2992249055562", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\nindex eb1fd550d4..56e5cd8525 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n", "chunk": "@@ -379,7 +411,7 @@ public class FormSaveViewModel extends ViewModel implements ProgressDialogFragme\n         @NonNull\n         @Override\n         public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {\n-            return (T) new FormSaveViewModel(System::currentTimeMillis, new DiskFormSaver(), analytics, new MediaManager());\n+            return (T) new FormSaveViewModel(System::currentTimeMillis, new DiskFormSaver(), analytics);\n         }\n     }\n }\n", "next_change": {"commit": "9650495f75e4643076ab868012009114bbd1495e", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\nindex 56e5cd8525..7be689c6d6 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n", "chunk": "@@ -398,20 +420,21 @@ public class FormSaveViewModel extends ViewModel implements ProgressDialogFragme\n         }\n     }\n \n-    public static class Factory implements ViewModelProvider.Factory {\n-\n-        private final Analytics analytics;\n+    public static class Factory extends AbstractSavedStateViewModelFactory {\n+        private Analytics analytics;\n \n+        public Factory(@NonNull SavedStateRegistryOwner owner, @Nullable Bundle defaultArgs) {\n+            super(owner, defaultArgs);\n+        }\n \n-        public Factory(Analytics analytics) {\n+        public void setAnalytics(Analytics analytics) {\n             this.analytics = analytics;\n         }\n \n-        @SuppressWarnings(\"unchecked\")\n         @NonNull\n         @Override\n-        public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {\n-            return (T) new FormSaveViewModel(System::currentTimeMillis, new DiskFormSaver(), analytics);\n+        protected <T extends ViewModel> T create(@NonNull String key, @NonNull Class<T> modelClass, @NonNull SavedStateHandle handle) {\n+            return (T) new FormSaveViewModel(handle, System::currentTimeMillis, new DiskFormSaver(), analytics);\n         }\n     }\n }\n", "next_change": {"commit": "35225c3250a70e5771ee61e1bbb71df30dc06731", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\nindex 7be689c6d6..922e55f2a7 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n", "chunk": "@@ -434,7 +433,7 @@ public class FormSaveViewModel extends ViewModel implements ProgressDialogFragme\n         @NonNull\n         @Override\n         protected <T extends ViewModel> T create(@NonNull String key, @NonNull Class<T> modelClass, @NonNull SavedStateHandle handle) {\n-            return (T) new FormSaveViewModel(handle, System::currentTimeMillis, new DiskFormSaver(), analytics);\n+            return (T) new FormSaveViewModel(handle, System::currentTimeMillis, new DiskFormSaver(), new MediaUtils(), analytics);\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkxNTgzOQ==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r469915839", "body": "You shouldn't need to do this as each test will get a new instance of `TestWidgetActivity`.", "bodyText": "You shouldn't need to do this as each test will get a new instance of TestWidgetActivity.", "bodyHTML": "<p dir=\"auto\">You shouldn't need to do this as each test will get a new instance of <code>TestWidgetActivity</code>.</p>", "author": "seadowg", "createdAt": "2020-08-13T12:31:40Z", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java", "diffHunk": "@@ -98,6 +102,12 @@ public void setUp() {\n         when(activityAvailability.isActivityAvailable(any())).thenReturn(true);\n     }\n \n+    @After\n+    public void tearDown() {\n+        widgetActivity.originalFiles.clear();", "originalCommit": "fc611fcad1d2dd0f71457606251ff67bae652fa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcfb6b9f3bbd0efac9908dca71b34fbe1fa5a23d", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex ca8dcb164f..9f89759b68 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -102,12 +98,6 @@ public class AudioWidgetTest {\n         when(activityAvailability.isActivityAvailable(any())).thenReturn(true);\n     }\n \n-    @After\n-    public void tearDown() {\n-        widgetActivity.originalFiles.clear();\n-        widgetActivity.recentFiles.clear();\n-    }\n-\n     @Test\n     public void usingReadOnlyOption_doesNotShowCaptureAndChooseButtons() {\n         AudioWidget widget = createWidget(promptWithReadOnly());\n", "next_change": {"commit": "d8705c9c05a922eb8b2fbb0c4e36febeaee9e35b", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex 9f89759b68..79eeef6b18 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -1,121 +1,88 @@\n package org.odk.collect.android.widgets;\n \n-import android.content.Intent;\n import android.media.MediaPlayer;\n-import android.net.Uri;\n-import android.provider.MediaStore;\n import android.view.View;\n \n import androidx.core.view.ViewCompat;\n import androidx.fragment.app.FragmentActivity;\n import androidx.lifecycle.LifecycleOwner;\n \n-import org.javarosa.core.model.FormIndex;\n-import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n import org.javarosa.form.api.FormEntryPrompt;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.odk.collect.android.R;\n import org.odk.collect.android.audio.AudioControllerView;\n import org.odk.collect.android.audio.AudioHelper;\n import org.odk.collect.android.audio.Clip;\n-import org.odk.collect.android.fakes.FakePermissionUtils;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n import org.odk.collect.android.listeners.WidgetValueChangedListener;\n import org.odk.collect.android.support.FakeLifecycleOwner;\n import org.odk.collect.android.support.FakeScheduler;\n-import org.odk.collect.android.support.RobolectricHelpers;\n import org.odk.collect.android.support.TestScreenContextActivity;\n-import org.odk.collect.android.utilities.ActivityAvailability;\n-import org.odk.collect.android.utilities.ApplicationConstants;\n import org.odk.collect.android.utilities.FileUtil;\n import org.odk.collect.android.utilities.MediaUtil;\n import org.odk.collect.android.utilities.WidgetAppearanceUtils;\n-import org.odk.collect.android.widgets.support.FakeQuestionMediaManager;\n import org.odk.collect.android.widgets.support.FakeWaitingForDataRegistry;\n import org.odk.collect.async.Scheduler;\n import org.robolectric.RobolectricTestRunner;\n-import org.robolectric.shadows.ShadowActivity;\n-import org.robolectric.shadows.ShadowToast;\n \n import java.io.File;\n import java.util.function.Supplier;\n \n-import static android.content.Intent.ACTION_GET_CONTENT;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.nullValue;\n-import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n-import static org.robolectric.Shadows.shadowOf;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n @RunWith(RobolectricTestRunner.class)\n public class AudioWidgetTest {\n-    private static final String FILE_PATH = \"blah.mp3\";\n-    private static final String SOURCE_FILE_PATH = \"sourceFile.mp3\";\n+    private final String destinationPath = \"blah\";\n \n     private final MediaPlayer mediaPlayer = new MediaPlayer();\n     private final FakeScheduler fakeScheduler = new FakeScheduler();\n-    private final FakePermissionUtils fakePermissionUtils = new FakePermissionUtils();\n-    private final FakeQuestionMediaManager questionMediaManager = new FakeQuestionMediaManager();\n-    private final FakeWaitingForDataRegistry waitingForDataRegistry = new FakeWaitingForDataRegistry();\n \n     private TestScreenContextActivity widgetActivity;\n-    private ShadowActivity shadowActivity;\n     private AudioControllerView audioController;\n     private FileUtil fileUtil;\n     private MediaUtil mediaUtil;\n-    private FakeAudioHelper audioHelper;\n-    private ActivityAvailability activityAvailability;\n-    private FormIndex formIndex;\n-    private File mockedFile;\n+    private AudioHelper audioHelper;\n \n     @Before\n     public void setUp() {\n-        widgetActivity = RobolectricHelpers.buildThemedActivity(TestScreenContextActivity.class).get();\n-        shadowActivity = shadowOf(widgetActivity);\n+        widgetActivity = widgetTestActivity();\n \n         audioController = mock(AudioControllerView.class);\n         fileUtil = mock(FileUtil.class);\n         mediaUtil = mock(MediaUtil.class);\n-        activityAvailability = mock(ActivityAvailability.class);\n-        formIndex = mock(FormIndex.class);\n-        mockedFile = mock(File.class);\n-        audioHelper = new FakeAudioHelper(widgetActivity, new FakeLifecycleOwner(), fakeScheduler, () -> mediaPlayer);\n \n-        when(mockedFile.exists()).thenReturn(true);\n-        when(mockedFile.getName()).thenReturn(\"newFile.mp3\");\n-        when(mockedFile.getAbsolutePath()).thenReturn(\"newFilePath\");\n-        when(formIndex.toString()).thenReturn(\"questionIndex\");\n-        when(activityAvailability.isActivityAvailable(any())).thenReturn(true);\n+        audioHelper = new FakeAudioHelper(widgetActivity, new FakeLifecycleOwner(), fakeScheduler, () -> mediaPlayer);\n     }\n \n     @Test\n     public void usingReadOnlyOption_doesNotShowCaptureAndChooseButtons() {\n         AudioWidget widget = createWidget(promptWithReadOnly());\n-        assertThat(widget.binding.captureButton.getVisibility(), equalTo(View.GONE));\n-        assertThat(widget.binding.chooseButton.getVisibility(), equalTo(View.GONE));\n+\n+        assertThat(widget.captureButton.getVisibility(), equalTo(View.GONE));\n+        assertThat(widget.chooseButton.getVisibility(), equalTo(View.GONE));\n     }\n \n     @Test\n-    public void getAnswer_whenPromptDoesNotHaveAnswer_returnsNullAndHidesAudioPlayer() {\n+    public void getAnswer_whenPromptDoesNotHaveAnswer_returnsNull() {\n         AudioWidget widget = createWidget(promptWithAnswer(null));\n         assertThat(widget.getAnswer(), nullValue());\n-        verify(audioController).hidePlayer();\n     }\n \n     @Test\n     public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n-        assertThat(widget.getAnswer().getDisplayText(), equalTo(FILE_PATH));\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(destinationPath)));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(destinationPath));\n     }\n \n     @Test\n", "next_change": {"commit": "41ea8a171ca60cf08b410763264e609068df75bd", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex 79eeef6b18..7af978d889 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -15,74 +20,101 @@ import org.junit.runner.RunWith;\n import org.odk.collect.android.audio.AudioControllerView;\n import org.odk.collect.android.audio.AudioHelper;\n import org.odk.collect.android.audio.Clip;\n+import org.odk.collect.android.fakes.FakePermissionUtils;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n import org.odk.collect.android.listeners.WidgetValueChangedListener;\n import org.odk.collect.android.support.FakeLifecycleOwner;\n import org.odk.collect.android.support.FakeScheduler;\n import org.odk.collect.android.support.TestScreenContextActivity;\n+import org.odk.collect.android.utilities.ApplicationConstants;\n import org.odk.collect.android.utilities.FileUtil;\n import org.odk.collect.android.utilities.MediaUtil;\n import org.odk.collect.android.utilities.WidgetAppearanceUtils;\n+import org.odk.collect.android.widgets.interfaces.MediaManagerListener;\n import org.odk.collect.android.widgets.support.FakeWaitingForDataRegistry;\n+import org.odk.collect.android.widgets.utilities.FileWidgetUtils;\n import org.odk.collect.async.Scheduler;\n import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowActivity;\n \n import java.io.File;\n import java.util.function.Supplier;\n \n+import static android.content.Intent.ACTION_GET_CONTENT;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.nullValue;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n+import static org.robolectric.Shadows.shadowOf;\n \n @RunWith(RobolectricTestRunner.class)\n public class AudioWidgetTest {\n-    private final String destinationPath = \"blah\";\n+    private static final String FILE_PATH = \"blah.mp3\";\n+    private static final String SOURCE_FILE_PATH = \"sourceFile.mp3\";\n \n     private final MediaPlayer mediaPlayer = new MediaPlayer();\n     private final FakeScheduler fakeScheduler = new FakeScheduler();\n+    private final FakePermissionUtils fakePermissionUtils = new FakePermissionUtils();\n \n     private TestScreenContextActivity widgetActivity;\n+    private ShadowActivity shadowActivity;\n+    private FakeWaitingForDataRegistry waitingForDataRegistry;\n     private AudioControllerView audioController;\n     private FileUtil fileUtil;\n     private MediaUtil mediaUtil;\n     private AudioHelper audioHelper;\n+    private MediaManagerListener mockedMediaManagerListener;\n+    private FormIndex formIndex;\n+    private File mockedFile;\n \n     @Before\n     public void setUp() {\n         widgetActivity = widgetTestActivity();\n+        shadowActivity = shadowOf(widgetActivity);\n \n         audioController = mock(AudioControllerView.class);\n         fileUtil = mock(FileUtil.class);\n         mediaUtil = mock(MediaUtil.class);\n+        mockedMediaManagerListener = mock(MediaManagerListener.class);\n+        formIndex = mock(FormIndex.class);\n+        mockedFile = mock(File.class);\n \n         audioHelper = new FakeAudioHelper(widgetActivity, new FakeLifecycleOwner(), fakeScheduler, () -> mediaPlayer);\n+        waitingForDataRegistry = new FakeWaitingForDataRegistry();\n+\n+        when(mockedFile.exists()).thenReturn(true);\n+        when(mockedFile.getName()).thenReturn(\"newFile.mp3\");\n+        when(mockedFile.getAbsolutePath()).thenReturn(\"newFilePath\");\n+        when(formIndex.toString()).thenReturn(\"questionIndex\");\n     }\n \n     @Test\n     public void usingReadOnlyOption_doesNotShowCaptureAndChooseButtons() {\n         AudioWidget widget = createWidget(promptWithReadOnly());\n-\n         assertThat(widget.captureButton.getVisibility(), equalTo(View.GONE));\n         assertThat(widget.chooseButton.getVisibility(), equalTo(View.GONE));\n     }\n \n     @Test\n-    public void getAnswer_whenPromptDoesNotHaveAnswer_returnsNull() {\n+    public void getAnswer_whenPromptDoesNotHaveAnswer_returnsNullAndHidesAudioPlayer() {\n         AudioWidget widget = createWidget(promptWithAnswer(null));\n+\n         assertThat(widget.getAnswer(), nullValue());\n+        verify(audioController).hidePlayer();\n     }\n \n     @Test\n     public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n-        AudioWidget widget = createWidget(promptWithAnswer(new StringData(destinationPath)));\n-        assertThat(widget.getAnswer().getDisplayText(), equalTo(destinationPath));\n+        AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(FILE_PATH));\n     }\n \n     @Test\n", "next_change": {"commit": "0896029b905cafdd43ba6e5009793bbeb0fa3f02", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex 7af978d889..8c6808027c 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -123,7 +123,7 @@ public class AudioWidgetTest {\n         when(prompt.getAppearanceHint()).thenReturn(WidgetAppearanceUtils.NEW);\n         AudioWidget widget = createWidget(prompt);\n \n-        assertThat(widget.chooseButton.getVisibility(), equalTo(View.GONE));\n+        assertThat(widget.binding.chooseButton.widgetButton.getVisibility(), equalTo(View.GONE));\n     }\n \n     @Test\n", "next_change": {"commit": "0fe63b1b81c99e61a4aa87404c8de0519de352e0", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex 8c6808027c..684f32cff1 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -123,7 +130,7 @@ public class AudioWidgetTest {\n         when(prompt.getAppearanceHint()).thenReturn(WidgetAppearanceUtils.NEW);\n         AudioWidget widget = createWidget(prompt);\n \n-        assertThat(widget.binding.chooseButton.widgetButton.getVisibility(), equalTo(View.GONE));\n+        assertThat(widget.binding.chooseButton.getRoot().getVisibility(), equalTo(View.GONE));\n     }\n \n     @Test\n", "next_change": {"commit": "f2ce6ea1d8404ab8f4ea86d5b9adb6b4809d1933", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex 684f32cff1..bf925f1ecb 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -138,16 +138,18 @@ public class AudioWidgetTest {\n         AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n         Clip clip = getAnswerAudioClip(widget.getInstanceFolder(), widget.getAnswer());\n \n-        assertThat(((FakeAudioHelper) widget.audioHelper).getAudioController(), equalTo(audioController));\n-        assertThat(((FakeAudioHelper) widget.audioHelper).getClip().getURI(), equalTo(clip.getURI()));\n+        assertThat(audioHelper.audioController, equalTo(audioController));\n+        assertThat(audioHelper.clip.getURI(), equalTo(clip.getURI()));\n         verify(audioController).showPlayer();\n     }\n \n     @Test\n-    public void deleteFile_removesWidgetAnswer() {\n+    public void deleteFile_removesWidgetAnswerAndStopsPlayingMedia() {\n         AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n         widget.deleteFile();\n+\n         assertThat(widget.getAnswer(), nullValue());\n+        assertThat(audioHelper.isMediaStopped, equalTo(true));\n     }\n \n     @Test\n", "next_change": {"commit": "12cd8f35b3b56f889ff5a9674d519e6a5f27b847", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex bf925f1ecb..bd092dbd12 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -152,18 +147,6 @@ public class AudioWidgetTest {\n         assertThat(audioHelper.isMediaStopped, equalTo(true));\n     }\n \n-    @Test\n-    public void deleteFile_callsMediaManagerListener() {\n-        FormEntryPrompt prompt = promptWithAnswer(new StringData(FILE_PATH));\n-        when(prompt.getIndex()).thenReturn(formIndex);\n-\n-        AudioWidget widget = createWidget(prompt);\n-        widget.deleteFile();\n-\n-        verify(mockedMediaManagerListener).markOriginalFileOrDelete(\"questionIndex\",\n-                widget.getInstanceFolder() + File.separator + \"blah.mp3\");\n-    }\n-\n     @Test\n     public void clearAnswer_removesAnswerAndHidesPlayer() {\n         AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n", "next_change": {"commit": "f1d5a3f611beb65263a373a0e628262e59fe5ac6", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex bd092dbd12..ca8dcb164f 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -147,6 +156,18 @@ public class AudioWidgetTest {\n         assertThat(audioHelper.isMediaStopped, equalTo(true));\n     }\n \n+    @Test\n+    public void deleteFile_setsFileAsideForDeleting() {\n+        FormEntryPrompt prompt = promptWithAnswer(new StringData(FILE_PATH));\n+        when(prompt.getIndex()).thenReturn(formIndex);\n+\n+        AudioWidget widget = createWidget(prompt);\n+        widget.deleteFile();\n+\n+        assertThat(widgetActivity.originalFiles.get(\"questionIndex\"),\n+                equalTo(widget.getInstanceFolder() + File.separator + \"blah.mp3\"));\n+    }\n+\n     @Test\n     public void clearAnswer_removesAnswerAndHidesPlayer() {\n         AudioWidget widget = createWidget(promptWithAnswer(new StringData(FILE_PATH)));\n", "next_change": {"commit": "a0ee45dd2bab877779659b2597c3cec6467506cb", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\nindex ca8dcb164f..9f89759b68 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/AudioWidgetTest.java\n", "chunk": "@@ -164,7 +154,7 @@ public class AudioWidgetTest {\n         AudioWidget widget = createWidget(prompt);\n         widget.deleteFile();\n \n-        assertThat(widgetActivity.originalFiles.get(\"questionIndex\"),\n+        assertThat(questionMediaManager.originalFiles.get(\"questionIndex\"),\n                 equalTo(widget.getInstanceFolder() + File.separator + \"blah.mp3\"));\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyNDM1Nw==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r469924357", "body": "I think we're getting close with the structure but I don't like that the `FormEntryActivity` implements the `QuestionMediaManager`. I think instead:\r\n\r\n* the `AudioWidget` should take a `QuestionMediaManager` in as a dependency at it's constructor rather than casting the `context` to one.\r\n* the `WidgetFactory` should also take a `QuestionMediaManager` in as one of the args to `createWidgetFromPrompt` so it can pass it to any widget that needs it. \r\n* `FormSaveViewModel#getMediaManager` should return a `QuestionMediaManager` not a `MediaManager`\r\n* `FormSaveViewModel#getMediaManager` should be passed as the `QuestionMediaManager` argument to `WidgetFactory#createWidgetFromPrompt`\r\n* `QuitFormDialogFragment`  should call `viewModel.getMediaManager().revertChanges` rather than relying on the static singleton instance\r\n\r\nI'm not sure if I like that currently the `QuestionMediaManager` is simply owned by the `FromSaveViewModel` and then exposes it. I'm thinking that potentially the `FormSaveViewModel` could implement the `QuestionMediaManager` interface and then there would be no need for the `MediaManager` class. In that world the \"revert\" call (in `QuiteFormDialogFragment` could just be part of the logic `FormSaveViewModel#removeTempInstance`.", "bodyText": "I think we're getting close with the structure but I don't like that the FormEntryActivity implements the QuestionMediaManager. I think instead:\n\nthe AudioWidget should take a QuestionMediaManager in as a dependency at it's constructor rather than casting the context to one.\nthe WidgetFactory should also take a QuestionMediaManager in as one of the args to createWidgetFromPrompt so it can pass it to any widget that needs it.\nFormSaveViewModel#getMediaManager should return a QuestionMediaManager not a MediaManager\nFormSaveViewModel#getMediaManager should be passed as the QuestionMediaManager argument to WidgetFactory#createWidgetFromPrompt\nQuitFormDialogFragment  should call viewModel.getMediaManager().revertChanges rather than relying on the static singleton instance\n\nI'm not sure if I like that currently the QuestionMediaManager is simply owned by the FromSaveViewModel and then exposes it. I'm thinking that potentially the FormSaveViewModel could implement the QuestionMediaManager interface and then there would be no need for the MediaManager class. In that world the \"revert\" call (in QuiteFormDialogFragment could just be part of the logic FormSaveViewModel#removeTempInstance.", "bodyHTML": "<p dir=\"auto\">I think we're getting close with the structure but I don't like that the <code>FormEntryActivity</code> implements the <code>QuestionMediaManager</code>. I think instead:</p>\n<ul dir=\"auto\">\n<li>the <code>AudioWidget</code> should take a <code>QuestionMediaManager</code> in as a dependency at it's constructor rather than casting the <code>context</code> to one.</li>\n<li>the <code>WidgetFactory</code> should also take a <code>QuestionMediaManager</code> in as one of the args to <code>createWidgetFromPrompt</code> so it can pass it to any widget that needs it.</li>\n<li><code>FormSaveViewModel#getMediaManager</code> should return a <code>QuestionMediaManager</code> not a <code>MediaManager</code></li>\n<li><code>FormSaveViewModel#getMediaManager</code> should be passed as the <code>QuestionMediaManager</code> argument to <code>WidgetFactory#createWidgetFromPrompt</code></li>\n<li><code>QuitFormDialogFragment</code>  should call <code>viewModel.getMediaManager().revertChanges</code> rather than relying on the static singleton instance</li>\n</ul>\n<p dir=\"auto\">I'm not sure if I like that currently the <code>QuestionMediaManager</code> is simply owned by the <code>FromSaveViewModel</code> and then exposes it. I'm thinking that potentially the <code>FormSaveViewModel</code> could implement the <code>QuestionMediaManager</code> interface and then there would be no need for the <code>MediaManager</code> class. In that world the \"revert\" call (in <code>QuiteFormDialogFragment</code> could just be part of the logic <code>FormSaveViewModel#removeTempInstance</code>.</p>", "author": "seadowg", "createdAt": "2020-08-13T12:46:38Z", "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -2674,6 +2675,16 @@ public void onCancelFormLoading() {\n         finish();\n     }\n \n+    @Override\n+    public void deleteOriginalFile(String questionIndex, String fileName) {", "originalCommit": "fc611fcad1d2dd0f71457606251ff67bae652fa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk4MDU5Ng==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r469980596", "bodyText": "Nice idea @seadowg, and Thanks for explaining so well. I implemented all the functionality of MediaManager in FormSaveViewModel, as you said if we have the FormSaveViewModel implements QuestionMediaManager, then MediaManager class is no longer required.", "author": "SaumiaSinghal", "createdAt": "2020-08-13T14:11:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyNDM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "fcfb6b9f3bbd0efac9908dca71b34fbe1fa5a23d", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java\nindex f52ad2b7be..34510d7f3f 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java\n", "chunk": "@@ -2675,16 +2673,6 @@ public class FormEntryActivity extends CollectAbstractActivity implements Animat\n         finish();\n     }\n \n-    @Override\n-    public void deleteOriginalFile(String questionIndex, String fileName) {\n-        formSaveViewModel.getMediaManager().markOriginalFileOrDelete(questionIndex, fileName);\n-    }\n-\n-    @Override\n-    public void replaceRecentFile(String questionIndex, String fileName) {\n-        formSaveViewModel.getMediaManager().replaceRecentFileForQuestion(questionIndex, fileName);\n-    }\n-\n     /**\n      * getter for currentView variable. This method should always be used\n      * to access currentView as an ODKView object to avoid inconsistency\n", "next_change": {"commit": "f1d5a3f611beb65263a373a0e628262e59fe5ac6", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java\nindex 34510d7f3f..f52ad2b7be 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java\n", "chunk": "@@ -2673,6 +2675,16 @@ public class FormEntryActivity extends CollectAbstractActivity implements Animat\n         finish();\n     }\n \n+    @Override\n+    public void deleteOriginalFile(String questionIndex, String fileName) {\n+        formSaveViewModel.getMediaManager().markOriginalFileOrDelete(questionIndex, fileName);\n+    }\n+\n+    @Override\n+    public void replaceRecentFile(String questionIndex, String fileName) {\n+        formSaveViewModel.getMediaManager().replaceRecentFileForQuestion(questionIndex, fileName);\n+    }\n+\n     /**\n      * getter for currentView variable. This method should always be used\n      * to access currentView as an ODKView object to avoid inconsistency\n", "next_change": {"commit": "4538677195fb3deb685d07793de2992249055562", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java\nindex f52ad2b7be..34510d7f3f 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java\n", "chunk": "@@ -2675,16 +2673,6 @@ public class FormEntryActivity extends CollectAbstractActivity implements Animat\n         finish();\n     }\n \n-    @Override\n-    public void deleteOriginalFile(String questionIndex, String fileName) {\n-        formSaveViewModel.getMediaManager().markOriginalFileOrDelete(questionIndex, fileName);\n-    }\n-\n-    @Override\n-    public void replaceRecentFile(String questionIndex, String fileName) {\n-        formSaveViewModel.getMediaManager().replaceRecentFileForQuestion(questionIndex, fileName);\n-    }\n-\n     /**\n      * getter for currentView variable. This method should always be used\n      * to access currentView as an ODKView object to avoid inconsistency\n", "next_change": null}]}}]}}]}}, {"oid": "fcfb6b9f3bbd0efac9908dca71b34fbe1fa5a23d", "url": "https://github.com/getodk/collect/commit/fcfb6b9f3bbd0efac9908dca71b34fbe1fa5a23d", "message": "fix unit tests", "committedDate": "2020-08-13T15:50:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU1NzQzOA==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r470557438", "body": "Do we need to do this in `onCleared()` as well? Have you played around with the behaviour when \"Don't save activities\" is enabled? It might be good to give that a go and see if we need to handle the case when we leave the app, Android kills the process, and then we return to the app. Would files get left undeleted but on in the form in this case? Would things break?\r\n\r\nLet me know if you have questions about trying that out!", "bodyText": "Do we need to do this in onCleared() as well? Have you played around with the behaviour when \"Don't save activities\" is enabled? It might be good to give that a go and see if we need to handle the case when we leave the app, Android kills the process, and then we return to the app. Would files get left undeleted but on in the form in this case? Would things break?\nLet me know if you have questions about trying that out!", "bodyHTML": "<p dir=\"auto\">Do we need to do this in <code>onCleared()</code> as well? Have you played around with the behaviour when \"Don't save activities\" is enabled? It might be good to give that a go and see if we need to handle the case when we leave the app, Android kills the process, and then we return to the app. Would files get left undeleted but on in the form in this case? Would things break?</p>\n<p dir=\"auto\">Let me know if you have questions about trying that out!</p>", "author": "seadowg", "createdAt": "2020-08-14T11:00:27Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "diffHunk": "@@ -126,6 +127,7 @@ public void removeTempInstance() {\n                 FileUtils.purgeMediaPath(instanceFolder);\n             }\n         }\n+        releaseMediaManager();", "originalCommit": "2008cb2b2f01e6fa6f5b56d3210b4b038c485c6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYwNzM3NQ==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r470607375", "bodyText": "This is an interesting case. I will try that out with all the media widgets.", "author": "SaumiaSinghal", "createdAt": "2020-08-14T12:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU1NzQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyMDY1OA==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r470620658", "bodyText": "I tried clearing the originalFiles and recentFiles HashMap in onCleared(), when Don't keep activities is turned on. I didn't find any anomaly in saving answers to the widgets, as I think, the answer is already saved with the widget, so clearing the files won't cause any break. Am I missing some test case here?", "author": "SaumiaSinghal", "createdAt": "2020-08-14T13:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU1NzQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzNzQ0OA==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r472137448", "bodyText": "Here's the problem I found:\n\nEnabled \"Don't keep activities\"\nOpen the \"All widgets form\"\nGo to the file widget\nSelect a file\nSelect a different file\nGo to the hierarchy view with the arrow button\nPress \"Go To End\"\nSave and exit the form\n\nIf you now go to the \"Device File Explorer\" and check the instance dir (sdcard/odk/instances and then the newest dir) you'll see both the files you've selected are still in the directory. I'm guessing this is because when the activity is killed the view model state is wiped with the activity and the originalFiles list will be empty when we return to the FormEntryActivity from the hierarchy screen. Before (on master) this worked because the MediaManager was a process level singleton and so state would be retained.\nIt feels to me like it would be a lot nicer if when the form was saved or (or ignore changes is hit) it just deleted any files not being used in the form but that could require a lot of rework. I'm thinking we should use the new Saved State module to persist originalFiles between activity instances (as opposed to going back to a process singleton) and then file an issue around carrying out the rework.\nI'd like to pull in @lognaturel and @grzesiek2010 for sanity checks here though!", "author": "seadowg", "createdAt": "2020-08-18T12:25:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU1NzQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4OTEwOA==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r473489108", "bodyText": "This case does seem possible if someone needs to get clarification on what file to attach, for example. Certainly it'd be best not to have a known regression in behavior.\nWe haven't used the saved state module yet. It might be simpler to use onSavedInstanceState. But yes, saving originalFiles between activity instances for now seems good.", "author": "lognaturel", "createdAt": "2020-08-20T00:55:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU1NzQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "d8705c9c05a922eb8b2fbb0c4e36febeaee9e35b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\nindex 56e5cd8525..0b1b36092c 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n", "chunk": "@@ -127,7 +123,6 @@ public class FormSaveViewModel extends ViewModel implements ProgressDialogFragme\n                 FileUtils.purgeMediaPath(instanceFolder);\n             }\n         }\n-        releaseMediaManager();\n     }\n \n     @Nullable\n", "next_change": {"commit": "4538677195fb3deb685d07793de2992249055562", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\nindex 0b1b36092c..56e5cd8525 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n", "chunk": "@@ -123,6 +127,7 @@ public class FormSaveViewModel extends ViewModel implements ProgressDialogFragme\n                 FileUtils.purgeMediaPath(instanceFolder);\n             }\n         }\n+        releaseMediaManager();\n     }\n \n     @Nullable\n", "next_change": {"commit": "a0f4ef962bf2e044db7eb2be04a752e281fcc7e2", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\nindex 56e5cd8525..8ce58500ce 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n", "chunk": "@@ -127,7 +155,7 @@ public class FormSaveViewModel extends ViewModel implements ProgressDialogFragme\n                 FileUtils.purgeMediaPath(instanceFolder);\n             }\n         }\n-        releaseMediaManager();\n+        onCleared();\n     }\n \n     @Nullable\n", "next_change": {"commit": "88e97298c0cd228f145490c5763455721eba737d", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\nindex 8ce58500ce..c3818fa2ec 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n", "chunk": "@@ -155,7 +146,7 @@ public class FormSaveViewModel extends ViewModel implements ProgressDialogFragme\n                 FileUtils.purgeMediaPath(instanceFolder);\n             }\n         }\n-        onCleared();\n+        clearMediaFiles();\n     }\n \n     @Nullable\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU1NzYwMA==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r470557600", "body": "Hmmm. Little worried about the viewmodel being passed into an async task here... It's another awkward change but I think really what should happen here is that a list of files to save should get passed into the save task. Does that make sense? In that world we wouldn't need `saveChanges` (as it would be handled in `DiskFormSaver`.", "bodyText": "Hmmm. Little worried about the viewmodel being passed into an async task here... It's another awkward change but I think really what should happen here is that a list of files to save should get passed into the save task. Does that make sense? In that world we wouldn't need saveChanges (as it would be handled in DiskFormSaver.", "bodyHTML": "<p dir=\"auto\">Hmmm. Little worried about the viewmodel being passed into an async task here... It's another awkward change but I think really what should happen here is that a list of files to save should get passed into the save task. Does that make sense? In that world we wouldn't need <code>saveChanges</code> (as it would be handled in <code>DiskFormSaver</code>.</p>", "author": "seadowg", "createdAt": "2020-08-14T11:00:53Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "diffHunk": "@@ -171,7 +173,7 @@ public String getReason() {\n     }\n \n     private void saveToDisk(SaveRequest saveRequest) {\n-        saveTask = new SaveTask(saveRequest, formSaver, formController, mediaManager, new SaveTask.Listener() {\n+        saveTask = new SaveTask(saveRequest, formSaver, formController, this, new SaveTask.Listener() {", "originalCommit": "2008cb2b2f01e6fa6f5b56d3210b4b038c485c6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e06f97083a6bbb9982919e3755da4a69aa9bd9a2", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\nindex 56e5cd8525..3890d6d433 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n", "chunk": "@@ -173,7 +180,7 @@ public class FormSaveViewModel extends ViewModel implements ProgressDialogFragme\n     }\n \n     private void saveToDisk(SaveRequest saveRequest) {\n-        saveTask = new SaveTask(saveRequest, formSaver, formController, this, new SaveTask.Listener() {\n+        saveTask = new SaveTask(saveRequest, formSaver, formController, new SaveTask.Listener() {\n             @Override\n             public void onProgressPublished(String progress) {\n                 saveResult.setValue(new SaveResult(SaveResult.State.SAVING, saveRequest, progress));\n", "next_change": {"commit": "d8705c9c05a922eb8b2fbb0c4e36febeaee9e35b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\nindex 3890d6d433..0b1b36092c 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n", "chunk": "@@ -189,9 +177,8 @@ public class FormSaveViewModel extends ViewModel implements ProgressDialogFragme\n             @Override\n             public void onComplete(SaveToDiskResult saveToDiskResult) {\n                 handleTaskResult(saveToDiskResult, saveRequest);\n-                releaseMediaManager();\n             }\n-        }, analytics, originalFiles.values()).execute();\n+        }, analytics).execute();\n     }\n \n     private void handleTaskResult(SaveToDiskResult taskResult, SaveRequest saveRequest) {\n", "next_change": {"commit": "62b6fac8d863b9f1120f4c809cd582ac5e4dfe8e", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\nindex 0b1b36092c..3890d6d433 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n", "chunk": "@@ -177,8 +189,9 @@ public class FormSaveViewModel extends ViewModel implements ProgressDialogFragme\n             @Override\n             public void onComplete(SaveToDiskResult saveToDiskResult) {\n                 handleTaskResult(saveToDiskResult, saveRequest);\n+                releaseMediaManager();\n             }\n-        }, analytics).execute();\n+        }, analytics, originalFiles.values()).execute();\n     }\n \n     private void handleTaskResult(SaveToDiskResult taskResult, SaveRequest saveRequest) {\n", "next_change": {"commit": "a0f4ef962bf2e044db7eb2be04a752e281fcc7e2", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\nindex 3890d6d433..8ce58500ce 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n", "chunk": "@@ -189,7 +211,7 @@ public class FormSaveViewModel extends ViewModel implements ProgressDialogFragme\n             @Override\n             public void onComplete(SaveToDiskResult saveToDiskResult) {\n                 handleTaskResult(saveToDiskResult, saveRequest);\n-                releaseMediaManager();\n+                onCleared();\n             }\n         }, analytics, originalFiles.values()).execute();\n     }\n", "next_change": {"commit": "88e97298c0cd228f145490c5763455721eba737d", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\nindex 8ce58500ce..c3818fa2ec 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n", "chunk": "@@ -211,7 +202,7 @@ public class FormSaveViewModel extends ViewModel implements ProgressDialogFragme\n             @Override\n             public void onComplete(SaveToDiskResult saveToDiskResult) {\n                 handleTaskResult(saveToDiskResult, saveRequest);\n-                onCleared();\n+                clearMediaFiles();\n             }\n         }, analytics, originalFiles.values()).execute();\n     }\n", "next_change": {"commit": "2bd32012affbea012d927138a1d08affc83b5858", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\nindex c3818fa2ec..0a4f295083 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n", "chunk": "@@ -204,7 +204,7 @@ public class FormSaveViewModel extends ViewModel implements ProgressDialogFragme\n                 handleTaskResult(saveToDiskResult, saveRequest);\n                 clearMediaFiles();\n             }\n-        }, analytics, originalFiles.values()).execute();\n+        }, analytics, new ArrayList<>(originalFiles.values())).execute();\n     }\n \n     private void handleTaskResult(SaveToDiskResult taskResult, SaveRequest saveRequest) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"oid": "e06f97083a6bbb9982919e3755da4a69aa9bd9a2", "url": "https://github.com/getodk/collect/commit/e06f97083a6bbb9982919e3755da4a69aa9bd9a2", "message": "pass collection files to asynctask", "committedDate": "2020-08-19T09:45:12Z", "type": "forcePushed"}, {"oid": "d8705c9c05a922eb8b2fbb0c4e36febeaee9e35b", "url": "https://github.com/getodk/collect/commit/d8705c9c05a922eb8b2fbb0c4e36febeaee9e35b", "message": "add unit tests", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "41ea8a171ca60cf08b410763264e609068df75bd", "url": "https://github.com/getodk/collect/commit/41ea8a171ca60cf08b410763264e609068df75bd", "message": "add unit tests for Audio Widget", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "d5db506088f66018eea4d6782eae15841dddb28e", "url": "https://github.com/getodk/collect/commit/d5db506088f66018eea4d6782eae15841dddb28e", "message": "craete audio_widget_answer.xml", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "bad75cb39b6e4cef96c8e767bb5eb650871111f4", "url": "https://github.com/getodk/collect/commit/bad75cb39b6e4cef96c8e767bb5eb650871111f4", "message": "update AudioWidget class", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "0896029b905cafdd43ba6e5009793bbeb0fa3f02", "url": "https://github.com/getodk/collect/commit/0896029b905cafdd43ba6e5009793bbeb0fa3f02", "message": "update unit tests", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "c35a3713c79ee58226ed0635bbcb5d554a1d5d7e", "url": "https://github.com/getodk/collect/commit/c35a3713c79ee58226ed0635bbcb5d554a1d5d7e", "message": "add unit tests", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "0fe63b1b81c99e61a4aa87404c8de0519de352e0", "url": "https://github.com/getodk/collect/commit/0fe63b1b81c99e61a4aa87404c8de0519de352e0", "message": "code refactor", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "5bdd4ae8dc2b7e4451306d29050e9ce5ac593f67", "url": "https://github.com/getodk/collect/commit/5bdd4ae8dc2b7e4451306d29050e9ce5ac593f67", "message": "refactor MediaManagerListener", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "f2ce6ea1d8404ab8f4ea86d5b9adb6b4809d1933", "url": "https://github.com/getodk/collect/commit/f2ce6ea1d8404ab8f4ea86d5b9adb6b4809d1933", "message": "fix #4005", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "70e43ec5b5ae376db5087dfe061c3f7d51e45dca", "url": "https://github.com/getodk/collect/commit/70e43ec5b5ae376db5087dfe061c3f7d51e45dca", "message": "fix #4008", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "f60b09af11fa47d8e4257436fed84af8a11632a8", "url": "https://github.com/getodk/collect/commit/f60b09af11fa47d8e4257436fed84af8a11632a8", "message": "craete a new style Collect.Button.Layout", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "682fdb2ca0dc99732c99f2e558370f8abe43d158", "url": "https://github.com/getodk/collect/commit/682fdb2ca0dc99732c99f2e558370f8abe43d158", "message": "update unit tests", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "b569c455f95ab015b4211056a11cd373e8a58cb6", "url": "https://github.com/getodk/collect/commit/b569c455f95ab015b4211056a11cd373e8a58cb6", "message": "refactor button style", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "a7104f0781ecb984bb75b64705a80bf55f13df83", "url": "https://github.com/getodk/collect/commit/a7104f0781ecb984bb75b64705a80bf55f13df83", "message": "add unit tests for progress update for AudioPlayerViewModel", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "e8bbd94f8defe4cfd7807a95751254aeb88498b9", "url": "https://github.com/getodk/collect/commit/e8bbd94f8defe4cfd7807a95751254aeb88498b9", "message": "code refactor", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "12cd8f35b3b56f889ff5a9674d519e6a5f27b847", "url": "https://github.com/getodk/collect/commit/12cd8f35b3b56f889ff5a9674d519e6a5f27b847", "message": "remove QuestionMediaManager", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "f1d5a3f611beb65263a373a0e628262e59fe5ac6", "url": "https://github.com/getodk/collect/commit/f1d5a3f611beb65263a373a0e628262e59fe5ac6", "message": "use formsaveviewmodel to access MediaManager", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "356f6e15a5e842321e4b0cf3cfbdab0cd93ba1df", "url": "https://github.com/getodk/collect/commit/356f6e15a5e842321e4b0cf3cfbdab0cd93ba1df", "message": "convert MediaManager to class", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "4538677195fb3deb685d07793de2992249055562", "url": "https://github.com/getodk/collect/commit/4538677195fb3deb685d07793de2992249055562", "message": "delete MediaManager class", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "a0ee45dd2bab877779659b2597c3cec6467506cb", "url": "https://github.com/getodk/collect/commit/a0ee45dd2bab877779659b2597c3cec6467506cb", "message": "fix unit tests", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "62b6fac8d863b9f1120f4c809cd582ac5e4dfe8e", "url": "https://github.com/getodk/collect/commit/62b6fac8d863b9f1120f4c809cd582ac5e4dfe8e", "message": "pass collection files to asynctask", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "9650495f75e4643076ab868012009114bbd1495e", "url": "https://github.com/getodk/collect/commit/9650495f75e4643076ab868012009114bbd1495e", "message": "use SavedStateHandle", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "a0f4ef962bf2e044db7eb2be04a752e281fcc7e2", "url": "https://github.com/getodk/collect/commit/a0f4ef962bf2e044db7eb2be04a752e281fcc7e2", "message": "fix SavedStateHandle error", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "35225c3250a70e5771ee61e1bbb71df30dc06731", "url": "https://github.com/getodk/collect/commit/35225c3250a70e5771ee61e1bbb71df30dc06731", "message": "add unit tests for formSaveViewModel", "committedDate": "2020-08-25T11:22:35Z", "type": "commit"}, {"oid": "35225c3250a70e5771ee61e1bbb71df30dc06731", "url": "https://github.com/getodk/collect/commit/35225c3250a70e5771ee61e1bbb71df30dc06731", "message": "add unit tests for formSaveViewModel", "committedDate": "2020-08-25T11:22:35Z", "type": "forcePushed"}, {"oid": "677af1bbebfc8e3f554555969d1164efaef19ebc", "url": "https://github.com/getodk/collect/commit/677af1bbebfc8e3f554555969d1164efaef19ebc", "message": "fix unit tests", "committedDate": "2020-08-25T11:39:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3Mzc4Mw==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r476373783", "body": "This could still be set in the constructor right? Could the constructor not just call `super` then assign the field?", "bodyText": "This could still be set in the constructor right? Could the constructor not just call super then assign the field?", "bodyHTML": "<p dir=\"auto\">This could still be set in the constructor right? Could the constructor not just call <code>super</code> then assign the field?</p>", "author": "seadowg", "createdAt": "2020-08-25T11:25:56Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "diffHunk": "@@ -398,20 +420,21 @@ protected void onPostExecute(SaveToDiskResult saveToDiskResult) {\n         }\n     }\n \n-    public static class Factory implements ViewModelProvider.Factory {\n-\n-        private final Analytics analytics;\n+    public static class Factory extends AbstractSavedStateViewModelFactory {\n+        private Analytics analytics;\n \n+        public Factory(@NonNull SavedStateRegistryOwner owner, @Nullable Bundle defaultArgs) {\n+            super(owner, defaultArgs);\n+        }\n \n-        public Factory(Analytics analytics) {\n+        public void setAnalytics(Analytics analytics) {", "originalCommit": "9650495f75e4643076ab868012009114bbd1495e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MDM4MA==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r476440380", "bodyText": "I forgot to change this. I changed the structure when I was trying different things.", "author": "SaumiaSinghal", "createdAt": "2020-08-25T13:17:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3Mzc4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "205686892a07dd9ff9eee2a1fb0737bbabbafc2f", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\nindex 7be689c6d6..1bfc16089d 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n", "chunk": "@@ -421,20 +420,17 @@ public class FormSaveViewModel extends ViewModel implements ProgressDialogFragme\n     }\n \n     public static class Factory extends AbstractSavedStateViewModelFactory {\n-        private Analytics analytics;\n+        private final Analytics analytics;\n \n-        public Factory(@NonNull SavedStateRegistryOwner owner, @Nullable Bundle defaultArgs) {\n+        public Factory(@NonNull SavedStateRegistryOwner owner, @Nullable Bundle defaultArgs, Analytics analytics) {\n             super(owner, defaultArgs);\n-        }\n-\n-        public void setAnalytics(Analytics analytics) {\n             this.analytics = analytics;\n         }\n \n         @NonNull\n         @Override\n         protected <T extends ViewModel> T create(@NonNull String key, @NonNull Class<T> modelClass, @NonNull SavedStateHandle handle) {\n-            return (T) new FormSaveViewModel(handle, System::currentTimeMillis, new DiskFormSaver(), analytics);\n+            return (T) new FormSaveViewModel(handle, System::currentTimeMillis, new DiskFormSaver(), new MediaUtils(), analytics);\n         }\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3NTc5Nw==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r476375797", "body": "Do we need to do this if we're also handling it in `markOriginalFileOrDelete` (same for the `RECENT_FILES`)?", "bodyText": "Do we need to do this if we're also handling it in markOriginalFileOrDelete (same for the RECENT_FILES)?", "bodyHTML": "<p dir=\"auto\">Do we need to do this if we're also handling it in <code>markOriginalFileOrDelete</code> (same for the <code>RECENT_FILES</code>)?</p>", "author": "seadowg", "createdAt": "2020-08-25T11:30:05Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "diffHunk": "@@ -85,7 +84,9 @@ public FormSaveViewModel(SavedStateHandle stateHandle, Clock clock, FormSaver fo\n \n     @Override\n     protected void onCleared() {\n-        releaseMediaManager();\n+        originalFiles.clear();\n+        recentFiles.clear();\n+\n         stateHandle.set(ORIGINAL_FILES, originalFiles);", "originalCommit": "a0f4ef962bf2e044db7eb2be04a752e281fcc7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MjUxNQ==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r476442515", "bodyText": "Hi @seadowg! Do you mean if I need the onCleared method or not?", "author": "SaumiaSinghal", "createdAt": "2020-08-25T13:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3NTc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NDI1Nw==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r476564257", "bodyText": "I don't think we need anything in here.", "author": "seadowg", "createdAt": "2020-08-25T16:05:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3NTc5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "88e97298c0cd228f145490c5763455721eba737d", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\nindex 8ce58500ce..c3818fa2ec 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n", "chunk": "@@ -82,15 +82,6 @@ public class FormSaveViewModel extends ViewModel implements ProgressDialogFragme\n         }\n     }\n \n-    @Override\n-    protected void onCleared() {\n-        originalFiles.clear();\n-        recentFiles.clear();\n-\n-        stateHandle.set(ORIGINAL_FILES, originalFiles);\n-        stateHandle.set(RECENT_FILES, recentFiles);\n-    }\n-\n     @Override\n     public void formLoaded(FormController formController) {\n         this.formController = formController;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxNjcxMA==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r476416710", "body": "It looks like all these new tests are mainly there to drive out the use of `SavedStateHandle`. I think a better way to test it would be more functionally by checking that if I call the methods that set state then use that saved state to create another view model then I get the behaviour I expect (probably that save or ignore do the right thing). This checks that the values are loaded from save state as well as written to it and also means we probably just need one test.", "bodyText": "It looks like all these new tests are mainly there to drive out the use of SavedStateHandle. I think a better way to test it would be more functionally by checking that if I call the methods that set state then use that saved state to create another view model then I get the behaviour I expect (probably that save or ignore do the right thing). This checks that the values are loaded from save state as well as written to it and also means we probably just need one test.", "bodyHTML": "<p dir=\"auto\">It looks like all these new tests are mainly there to drive out the use of <code>SavedStateHandle</code>. I think a better way to test it would be more functionally by checking that if I call the methods that set state then use that saved state to create another view model then I get the behaviour I expect (probably that save or ignore do the right thing). This checks that the values are loaded from save state as well as written to it and also means we probably just need one test.</p>", "author": "seadowg", "createdAt": "2020-08-25T12:41:11Z", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -368,6 +395,47 @@ public void resumeFormEntry_clearsSaveResult() {\n         assertThat(saveResult.getValue(), equalTo(null));\n     }\n \n+    @Test\n+    public void markOriginalFileOrDelete_whenFileNameIsEmpty_doesNotSaveFileForDelete() {", "originalCommit": "35225c3250a70e5771ee61e1bbb71df30dc06731", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "205686892a07dd9ff9eee2a1fb0737bbabbafc2f", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java b/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\nindex 0fb055e421..67e99ae157 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\n", "chunk": "@@ -398,42 +416,49 @@ public class FormSaveViewModelTest {\n     @Test\n     public void markOriginalFileOrDelete_whenFileNameIsEmpty_doesNotSaveFileForDelete() {\n         viewModel.markOriginalFileOrDelete(\"index\", null);\n-        Map<String, String> originalFiles = savedStateHandle.get(FormSaveViewModel.ORIGINAL_FILES);\n-        assertThat(originalFiles.containsKey(\"index\"), equalTo(false));\n+        assertThat(savedStateHandle.get(FormSaveViewModel.ORIGINAL_FILES), equalTo(null));\n     }\n \n     @Test\n-    public void markOriginalFileOrDelete_whenQuestionIndexHasAnswer_deletesFile() {\n-        viewModel.markOriginalFileOrDelete(\"questionIndex\", \"name\");\n-        verify(mediaUtils).deleteImageFileFromMediaProvider(\"name\");\n+    public void markOriginalFileOrDelete_whenQuestionIndexHasAnswer_onRecreatingViewModel_deletesFile() {\n+        viewModel.markOriginalFileOrDelete(\"index\", \"blah\");\n+\n+        FormSaveViewModel restoredViewModel = new FormSaveViewModel(savedStateHandle, () -> CURRENT_TIME, formSaver, mediaUtils, null);\n+        restoredViewModel.formLoaded(formController);\n+        restoredViewModel.markOriginalFileOrDelete(\"index\", \"blah\");\n+\n+        verify(mediaUtils).deleteImageFileFromMediaProvider(\"blah\");\n     }\n \n     @Test\n     public void markOriginalFileOrDelete_whenQuestionIndexDoesNotHaveAnswer_savesFileForIndex() {\n-        viewModel.markOriginalFileOrDelete(\"index\", \"name\");\n+        viewModel.markOriginalFileOrDelete(\"index\", \"blah\");\n         Map<String, String> originalFiles = savedStateHandle.get(FormSaveViewModel.ORIGINAL_FILES);\n-        assertThat(originalFiles.get(\"index\"), equalTo(\"name\"));\n+        assertThat(originalFiles.get(\"index\"), equalTo(\"blah\"));\n     }\n \n     @Test\n     public void replaceRecentFileForQuestion_whenFileNameIsNull_doesNotReplaceFile() {\n         viewModel.replaceRecentFileForQuestion(\"index\", null);\n-        Map<String, String> recentFiles = savedStateHandle.get(FormSaveViewModel.RECENT_FILES);\n-        assertThat(recentFiles.containsKey(\"index\"), equalTo(false));\n+        assertThat(savedStateHandle.get(FormSaveViewModel.RECENT_FILES), equalTo(null));\n     }\n \n     @Test\n-    public void replaceRecentFileForQuestion_whenQuestionIndexHasAnswer_deletesOriginalFile() {\n-        viewModel.markOriginalFileOrDelete(\"questionIndex\", \"name\");\n-        Map<String, String> recentFiles = savedStateHandle.get(FormSaveViewModel.RECENT_FILES);\n-        verify(mediaUtils).deleteImageFileFromMediaProvider(recentFiles.get(\"questionIndex\"));\n+    public void replaceRecentFileForQuestion_whenQuestionIndexHasAnswer_onRecreatingViewModel_deletesFile() {\n+        viewModel.replaceRecentFileForQuestion(\"index\", \"blah\");\n+\n+        FormSaveViewModel restoredViewModel = new FormSaveViewModel(savedStateHandle, () -> CURRENT_TIME, formSaver, mediaUtils, null);\n+        restoredViewModel.formLoaded(formController);\n+        restoredViewModel.replaceRecentFileForQuestion(\"index\", \"blah\");\n+\n+        verify(mediaUtils).deleteImageFileFromMediaProvider(\"blah\");\n     }\n \n     @Test\n     public void replaceRecentFileForQuestion_whenQuestionIndexDoesNotHaveAnswer_addsFile() {\n-        viewModel.replaceRecentFileForQuestion(\"index\", \"name\");\n+        viewModel.replaceRecentFileForQuestion(\"index\", \"blah\");\n         Map<String, String> recentFiles = savedStateHandle.get(FormSaveViewModel.RECENT_FILES);\n-        assertThat(recentFiles.get(\"index\"), equalTo(\"name\"));\n+        assertThat(recentFiles.get(\"index\"), equalTo(\"blah\"));\n     }\n \n     private void whenReasonRequiredToSave() {\n", "next_change": {"commit": "88e97298c0cd228f145490c5763455721eba737d", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java b/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\nindex 67e99ae157..523db910c0 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\n", "chunk": "@@ -454,13 +435,6 @@ public class FormSaveViewModelTest {\n         verify(mediaUtils).deleteImageFileFromMediaProvider(\"blah\");\n     }\n \n-    @Test\n-    public void replaceRecentFileForQuestion_whenQuestionIndexDoesNotHaveAnswer_addsFile() {\n-        viewModel.replaceRecentFileForQuestion(\"index\", \"blah\");\n-        Map<String, String> recentFiles = savedStateHandle.get(FormSaveViewModel.RECENT_FILES);\n-        assertThat(recentFiles.get(\"index\"), equalTo(\"blah\"));\n-    }\n-\n     private void whenReasonRequiredToSave() {\n         when(logger.isChangeReasonRequired()).thenReturn(true);\n         when(logger.isChangesMade()).thenReturn(true);\n", "next_change": null}]}}]}}, {"oid": "205686892a07dd9ff9eee2a1fb0737bbabbafc2f", "url": "https://github.com/getodk/collect/commit/205686892a07dd9ff9eee2a1fb0737bbabbafc2f", "message": "code refactor", "committedDate": "2020-08-25T14:01:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2MTQwMQ==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r476561401", "body": "I think this should check that the files are deleted etc (so check the correct calls are made to `mediaUtils`) rather than checking the `savedStateHandle`).", "bodyText": "I think this should check that the files are deleted etc (so check the correct calls are made to mediaUtils) rather than checking the savedStateHandle).", "bodyHTML": "<p dir=\"auto\">I think this should check that the files are deleted etc (so check the correct calls are made to <code>mediaUtils</code>) rather than checking the <code>savedStateHandle</code>).</p>", "author": "seadowg", "createdAt": "2020-08-25T16:01:18Z", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -353,6 +353,24 @@ public void whenFormSaverFinishes_mediaManagerIsCleared() {\n         assertThat(recentFiles.isEmpty(), equalTo(true));\n     }\n \n+    @Test\n+    public void whenFormSaverFinishes_onRecreatingFormSaveViewModel_mediaManagerIsCleared() {\n+        viewModel.markOriginalFileOrDelete(\"index\", \"blah\");\n+        viewModel.replaceRecentFileForQuestion(\"index\", \"blah\");\n+\n+        FormSaveViewModel restoredViewModel = new FormSaveViewModel(savedStateHandle, () -> CURRENT_TIME, formSaver, mediaUtils, null);\n+        restoredViewModel.formLoaded(formController);\n+\n+        restoredViewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        whenFormSaverFinishes(SaveFormToDisk.SAVED);\n+\n+        Map<String, String> originalFiles = savedStateHandle.get(FormSaveViewModel.ORIGINAL_FILES);\n+        Map<String, String> recentFiles = savedStateHandle.get(FormSaveViewModel.RECENT_FILES);\n+\n+        assertThat(originalFiles.isEmpty(), equalTo(true));", "originalCommit": "205686892a07dd9ff9eee2a1fb0737bbabbafc2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2MjExMA==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r476562110", "bodyText": "Actually so maybe we only need markOriginalFileOrDelete_whenQuestionIndexHasAnswer_onRecreatingViewModel_deletesFile? Unless there are reasons to check savedStateHandle directly.", "author": "seadowg", "createdAt": "2020-08-25T16:02:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2MTQwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a4970b42ce39921cf72a7819547da4917ae50d1e", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java b/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\nindex 67e99ae157..70b14d9fb9 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\n", "chunk": "@@ -339,36 +333,22 @@ public class FormSaveViewModelTest {\n     }\n \n     @Test\n-    public void whenFormSaverFinishes_mediaManagerIsCleared() {\n-        viewModel.markOriginalFileOrDelete(\"index\", \"blah\");\n-        viewModel.replaceRecentFileForQuestion(\"index\", \"blah\");\n-\n-        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n-        whenFormSaverFinishes(SaveFormToDisk.SAVED);\n-\n-        Map<String, String> originalFiles = savedStateHandle.get(FormSaveViewModel.ORIGINAL_FILES);\n-        Map<String, String> recentFiles = savedStateHandle.get(FormSaveViewModel.RECENT_FILES);\n-\n-        assertThat(originalFiles.isEmpty(), equalTo(true));\n-        assertThat(recentFiles.isEmpty(), equalTo(true));\n-    }\n-\n-    @Test\n-    public void whenFormSaverFinishes_onRecreatingFormSaveViewModel_mediaManagerIsCleared() {\n+    public void saveForm_runsWith_correctFiles() {\n         viewModel.markOriginalFileOrDelete(\"index\", \"blah\");\n         viewModel.replaceRecentFileForQuestion(\"index\", \"blah\");\n \n         FormSaveViewModel restoredViewModel = new FormSaveViewModel(savedStateHandle, () -> CURRENT_TIME, formSaver, mediaUtils, null);\n         restoredViewModel.formLoaded(formController);\n \n-        restoredViewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        restoredViewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n         whenFormSaverFinishes(SaveFormToDisk.SAVED);\n \n-        Map<String, String> originalFiles = savedStateHandle.get(FormSaveViewModel.ORIGINAL_FILES);\n-        Map<String, String> recentFiles = savedStateHandle.get(FormSaveViewModel.RECENT_FILES);\n+        assertThat(formSaver.files.contains(\"blah\"), equalTo(true));\n \n-        assertThat(originalFiles.isEmpty(), equalTo(true));\n-        assertThat(recentFiles.isEmpty(), equalTo(true));\n+        restoredViewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n+        whenFormSaverFinishes(SaveFormToDisk.SAVED);\n+\n+        assertThat(formSaver.files, nullValue());\n     }\n \n     @Test\n", "next_change": {"commit": "2bd32012affbea012d927138a1d08affc83b5858", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java b/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\nindex 70b14d9fb9..0447d466ac 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\n", "chunk": "@@ -333,22 +332,19 @@ public class FormSaveViewModelTest {\n     }\n \n     @Test\n-    public void saveForm_runsWith_correctFiles() {\n+    public void saveForm_savesCorrectFiles() {\n         viewModel.markOriginalFileOrDelete(\"index\", \"blah\");\n         viewModel.replaceRecentFileForQuestion(\"index\", \"blah\");\n \n-        FormSaveViewModel restoredViewModel = new FormSaveViewModel(savedStateHandle, () -> CURRENT_TIME, formSaver, mediaUtils, null);\n-        restoredViewModel.formLoaded(formController);\n-\n-        restoredViewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n         whenFormSaverFinishes(SaveFormToDisk.SAVED);\n \n-        assertThat(formSaver.files.contains(\"blah\"), equalTo(true));\n+        assertThat(formSaver.tempFiles.contains(\"blah\"), equalTo(true));\n \n-        restoredViewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n         whenFormSaverFinishes(SaveFormToDisk.SAVED);\n \n-        assertThat(formSaver.files, nullValue());\n+        assertThat(formSaver.tempFiles.isEmpty(), equalTo(true));\n     }\n \n     @Test\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NDAzMg==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r476564032", "body": "I don't think we need to clear these variables out here. They are part of the ViewModel which will be removed from memory.", "bodyText": "I don't think we need to clear these variables out here. They are part of the ViewModel which will be removed from memory.", "bodyHTML": "<p dir=\"auto\">I don't think we need to clear these variables out here. They are part of the ViewModel which will be removed from memory.</p>", "author": "seadowg", "createdAt": "2020-08-25T16:05:06Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "diffHunk": "@@ -26,37 +29,66 @@\n import org.odk.collect.android.tasks.SaveToDiskResult;\n import org.odk.collect.android.utilities.FileUtils;\n import org.odk.collect.android.utilities.MediaUtils;\n+import org.odk.collect.android.utilities.QuestionMediaManager;\n import org.odk.collect.utilities.Clock;\n \n import java.io.File;\n \n import timber.log.Timber;\n+\n+import java.util.Collection;\n import java.util.HashMap;\n+import java.util.Map;\n \n import static org.odk.collect.android.tasks.SaveFormToDisk.SAVED;\n import static org.odk.collect.android.tasks.SaveFormToDisk.SAVED_AND_EXIT;\n import static org.odk.collect.android.utilities.StringUtils.isBlank;\n \n-public class FormSaveViewModel extends ViewModel implements ProgressDialogFragment.Cancellable, RequiresFormController {\n+public class FormSaveViewModel extends ViewModel implements ProgressDialogFragment.Cancellable, RequiresFormController, QuestionMediaManager {\n+    public static final String ORIGINAL_FILES = \"originalFiles\";\n+    public static final String RECENT_FILES = \"recentFiles\";\n \n+    private final SavedStateHandle stateHandle;\n     private final Clock clock;\n     private final FormSaver formSaver;\n+    private final MediaUtils mediaUtils;\n \n-    private String reason = \"\";\n     private final MutableLiveData<SaveResult> saveResult = new MutableLiveData<>(null);\n+    private String reason = \"\";\n+\n+    private Map<String, String> originalFiles = new HashMap<>();\n+    private Map<String, String> recentFiles = new HashMap<>();\n \n     @Nullable\n     private FormController formController;\n \n     @Nullable\n-    private AsyncTask saveTask;\n+    private AsyncTask<Void, String, SaveToDiskResult> saveTask;\n \n     private final Analytics analytics;\n \n-    public FormSaveViewModel(Clock clock, FormSaver formSaver, Analytics analytics) {\n+    public FormSaveViewModel(SavedStateHandle stateHandle, Clock clock, FormSaver formSaver, MediaUtils mediaUtils, Analytics analytics) {\n+        this.stateHandle = stateHandle;\n         this.clock = clock;\n         this.formSaver = formSaver;\n+        this.mediaUtils = mediaUtils;\n         this.analytics = analytics;\n+\n+        if (stateHandle.get(ORIGINAL_FILES) != null) {\n+            originalFiles = stateHandle.get(ORIGINAL_FILES);\n+        }\n+        if (stateHandle.get(RECENT_FILES) != null) {\n+            recentFiles = stateHandle.get(RECENT_FILES);\n+        }\n+    }\n+\n+    @Override\n+    protected void onCleared() {\n+        originalFiles.clear();", "originalCommit": "205686892a07dd9ff9eee2a1fb0737bbabbafc2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "88e97298c0cd228f145490c5763455721eba737d", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\nindex 1bfc16089d..c3818fa2ec 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java\n", "chunk": "@@ -82,15 +82,6 @@ public class FormSaveViewModel extends ViewModel implements ProgressDialogFragme\n         }\n     }\n \n-    @Override\n-    protected void onCleared() {\n-        originalFiles.clear();\n-        recentFiles.clear();\n-\n-        stateHandle.set(ORIGINAL_FILES, originalFiles);\n-        stateHandle.set(RECENT_FILES, recentFiles);\n-    }\n-\n     @Override\n     public void formLoaded(FormController formController) {\n         this.formController = formController;\n", "next_change": null}]}}, {"oid": "88e97298c0cd228f145490c5763455721eba737d", "url": "https://github.com/getodk/collect/commit/88e97298c0cd228f145490c5763455721eba737d", "message": "code refactor", "committedDate": "2020-08-25T17:41:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxMjMwNA==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r477412304", "body": "I'm not sure you need this test and `whenFormSaverFinishes_mediaManagerIsCleared`. Could you explain it or do you think we should just delete this one?", "bodyText": "I'm not sure you need this test and whenFormSaverFinishes_mediaManagerIsCleared. Could you explain it or do you think we should just delete this one?", "bodyHTML": "<p dir=\"auto\">I'm not sure you need this test and <code>whenFormSaverFinishes_mediaManagerIsCleared</code>. Could you explain it or do you think we should just delete this one?</p>", "author": "seadowg", "createdAt": "2020-08-26T15:59:06Z", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -325,6 +338,39 @@ public void whenFormSaverFinishes_isSaving_returnsFalse() {\n         assertThat(viewModel.isSaving(), equalTo(false));\n     }\n \n+    @Test\n+    public void whenFormSaverFinishes_mediaManagerIsCleared() {\n+        viewModel.markOriginalFileOrDelete(\"index\", \"blah\");\n+        viewModel.replaceRecentFileForQuestion(\"index\", \"blah\");\n+\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n+        whenFormSaverFinishes(SaveFormToDisk.SAVED);\n+\n+        Map<String, String> originalFiles = savedStateHandle.get(FormSaveViewModel.ORIGINAL_FILES);\n+        Map<String, String> recentFiles = savedStateHandle.get(FormSaveViewModel.RECENT_FILES);\n+\n+        assertThat(originalFiles.isEmpty(), equalTo(true));\n+        assertThat(recentFiles.isEmpty(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void whenFormSaverFinishes_onRecreatingFormSaveViewModel_mediaManagerIsCleared() {", "originalCommit": "88e97298c0cd228f145490c5763455721eba737d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3MDgwMQ==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r477470801", "bodyText": "I think we can delete whenFormSaverFinishes_mediaManagerIsCleared. We do not have any other test to check whether mediaManager is released when form save finishes. I'm not sure is it is really important to check whether all files get deleted when form save task is finished.", "author": "SaumiaSinghal", "createdAt": "2020-08-26T17:32:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxMjMwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3NDEyNg==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r477474126", "bodyText": "Yup I agree. I think my comment below lays out one test that would capture what whenFormSaverFinishes_mediaManagerIsCleared is trying to test.", "author": "seadowg", "createdAt": "2020-08-26T17:38:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxMjMwNA=="}], "type": "inlineReview", "revised_code": {"commit": "a4970b42ce39921cf72a7819547da4917ae50d1e", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java b/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\nindex 523db910c0..70b14d9fb9 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\n", "chunk": "@@ -339,36 +333,22 @@ public class FormSaveViewModelTest {\n     }\n \n     @Test\n-    public void whenFormSaverFinishes_mediaManagerIsCleared() {\n-        viewModel.markOriginalFileOrDelete(\"index\", \"blah\");\n-        viewModel.replaceRecentFileForQuestion(\"index\", \"blah\");\n-\n-        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n-        whenFormSaverFinishes(SaveFormToDisk.SAVED);\n-\n-        Map<String, String> originalFiles = savedStateHandle.get(FormSaveViewModel.ORIGINAL_FILES);\n-        Map<String, String> recentFiles = savedStateHandle.get(FormSaveViewModel.RECENT_FILES);\n-\n-        assertThat(originalFiles.isEmpty(), equalTo(true));\n-        assertThat(recentFiles.isEmpty(), equalTo(true));\n-    }\n-\n-    @Test\n-    public void whenFormSaverFinishes_onRecreatingFormSaveViewModel_mediaManagerIsCleared() {\n+    public void saveForm_runsWith_correctFiles() {\n         viewModel.markOriginalFileOrDelete(\"index\", \"blah\");\n         viewModel.replaceRecentFileForQuestion(\"index\", \"blah\");\n \n         FormSaveViewModel restoredViewModel = new FormSaveViewModel(savedStateHandle, () -> CURRENT_TIME, formSaver, mediaUtils, null);\n         restoredViewModel.formLoaded(formController);\n \n-        restoredViewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        restoredViewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n         whenFormSaverFinishes(SaveFormToDisk.SAVED);\n \n-        Map<String, String> originalFiles = savedStateHandle.get(FormSaveViewModel.ORIGINAL_FILES);\n-        Map<String, String> recentFiles = savedStateHandle.get(FormSaveViewModel.RECENT_FILES);\n+        assertThat(formSaver.files.contains(\"blah\"), equalTo(true));\n \n-        assertThat(originalFiles.isEmpty(), equalTo(true));\n-        assertThat(recentFiles.isEmpty(), equalTo(true));\n+        restoredViewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n+        whenFormSaverFinishes(SaveFormToDisk.SAVED);\n+\n+        assertThat(formSaver.files, nullValue());\n     }\n \n     @Test\n", "next_change": {"commit": "2bd32012affbea012d927138a1d08affc83b5858", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java b/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\nindex 70b14d9fb9..0447d466ac 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\n", "chunk": "@@ -333,22 +332,19 @@ public class FormSaveViewModelTest {\n     }\n \n     @Test\n-    public void saveForm_runsWith_correctFiles() {\n+    public void saveForm_savesCorrectFiles() {\n         viewModel.markOriginalFileOrDelete(\"index\", \"blah\");\n         viewModel.replaceRecentFileForQuestion(\"index\", \"blah\");\n \n-        FormSaveViewModel restoredViewModel = new FormSaveViewModel(savedStateHandle, () -> CURRENT_TIME, formSaver, mediaUtils, null);\n-        restoredViewModel.formLoaded(formController);\n-\n-        restoredViewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n         whenFormSaverFinishes(SaveFormToDisk.SAVED);\n \n-        assertThat(formSaver.files.contains(\"blah\"), equalTo(true));\n+        assertThat(formSaver.tempFiles.contains(\"blah\"), equalTo(true));\n \n-        restoredViewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n         whenFormSaverFinishes(SaveFormToDisk.SAVED);\n \n-        assertThat(formSaver.files, nullValue());\n+        assertThat(formSaver.tempFiles.isEmpty(), equalTo(true));\n     }\n \n     @Test\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxMzk3Mw==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r477413973", "body": "Instead of verifying the files here I think this test should run `saveForm` again and check that `deleteImageFileFromMediaProvider` is only called the first time. Does that make sense? Again, this is to test the intended behaviour rather than an implementation detail of that behaviour.", "bodyText": "Instead of verifying the files here I think this test should run saveForm again and check that deleteImageFileFromMediaProvider is only called the first time. Does that make sense? Again, this is to test the intended behaviour rather than an implementation detail of that behaviour.", "bodyHTML": "<p dir=\"auto\">Instead of verifying the files here I think this test should run <code>saveForm</code> again and check that <code>deleteImageFileFromMediaProvider</code> is only called the first time. Does that make sense? Again, this is to test the intended behaviour rather than an implementation detail of that behaviour.</p>", "author": "seadowg", "createdAt": "2020-08-26T16:01:20Z", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -325,6 +338,39 @@ public void whenFormSaverFinishes_isSaving_returnsFalse() {\n         assertThat(viewModel.isSaving(), equalTo(false));\n     }\n \n+    @Test\n+    public void whenFormSaverFinishes_mediaManagerIsCleared() {\n+        viewModel.markOriginalFileOrDelete(\"index\", \"blah\");\n+        viewModel.replaceRecentFileForQuestion(\"index\", \"blah\");\n+\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n+        whenFormSaverFinishes(SaveFormToDisk.SAVED);\n+\n+        Map<String, String> originalFiles = savedStateHandle.get(FormSaveViewModel.ORIGINAL_FILES);\n+        Map<String, String> recentFiles = savedStateHandle.get(FormSaveViewModel.RECENT_FILES);\n+\n+        assertThat(originalFiles.isEmpty(), equalTo(true));", "originalCommit": "88e97298c0cd228f145490c5763455721eba737d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4MjUwOA==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r477482508", "bodyText": "To verify calls to deleteImageFileFromMediaProvider(), I should use actual new DisFormSaver() instead of FormSaver, right?", "author": "SaumiaSinghal", "createdAt": "2020-08-26T17:53:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxMzk3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxMzY2Nw==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r477513667", "bodyText": "Oh I just meant like you did in the other test and call saveForm on the view model. Does that make sense. The test is to verify that if we call save once and then call save again then we don't try and delete the files from the first save. That's my understanding anyway. Does that make sense?", "author": "seadowg", "createdAt": "2020-08-26T18:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxMzk3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxNDgyOA==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r477514828", "bodyText": "So pseudo code would be:\n\nset up files to be deleted/saved\ncall save on view model\ncheck files are saved/deleted correctly (using mock of MediaUtils)\ncall save again\ncheck no files are saved/deleted (you can pass once() to verify to check it method has only been called once)", "author": "seadowg", "createdAt": "2020-08-26T18:51:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxMzk3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyNjU0MA==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r478326540", "bodyText": "Hi! the unit test saveForm_runsWith_correctFiles() is failing. Sorry I meant to name it saveForm_savesCorrectFiles(). I confirmed the failure is bacause of calling clearMediaFiles() in OnComplete, but that should not effect the FakeFormSaver, right?", "author": "SaumiaSinghal", "createdAt": "2020-08-27T10:47:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxMzk3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a4970b42ce39921cf72a7819547da4917ae50d1e", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java b/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\nindex 523db910c0..70b14d9fb9 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\n", "chunk": "@@ -339,36 +333,22 @@ public class FormSaveViewModelTest {\n     }\n \n     @Test\n-    public void whenFormSaverFinishes_mediaManagerIsCleared() {\n-        viewModel.markOriginalFileOrDelete(\"index\", \"blah\");\n-        viewModel.replaceRecentFileForQuestion(\"index\", \"blah\");\n-\n-        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n-        whenFormSaverFinishes(SaveFormToDisk.SAVED);\n-\n-        Map<String, String> originalFiles = savedStateHandle.get(FormSaveViewModel.ORIGINAL_FILES);\n-        Map<String, String> recentFiles = savedStateHandle.get(FormSaveViewModel.RECENT_FILES);\n-\n-        assertThat(originalFiles.isEmpty(), equalTo(true));\n-        assertThat(recentFiles.isEmpty(), equalTo(true));\n-    }\n-\n-    @Test\n-    public void whenFormSaverFinishes_onRecreatingFormSaveViewModel_mediaManagerIsCleared() {\n+    public void saveForm_runsWith_correctFiles() {\n         viewModel.markOriginalFileOrDelete(\"index\", \"blah\");\n         viewModel.replaceRecentFileForQuestion(\"index\", \"blah\");\n \n         FormSaveViewModel restoredViewModel = new FormSaveViewModel(savedStateHandle, () -> CURRENT_TIME, formSaver, mediaUtils, null);\n         restoredViewModel.formLoaded(formController);\n \n-        restoredViewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        restoredViewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n         whenFormSaverFinishes(SaveFormToDisk.SAVED);\n \n-        Map<String, String> originalFiles = savedStateHandle.get(FormSaveViewModel.ORIGINAL_FILES);\n-        Map<String, String> recentFiles = savedStateHandle.get(FormSaveViewModel.RECENT_FILES);\n+        assertThat(formSaver.files.contains(\"blah\"), equalTo(true));\n \n-        assertThat(originalFiles.isEmpty(), equalTo(true));\n-        assertThat(recentFiles.isEmpty(), equalTo(true));\n+        restoredViewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n+        whenFormSaverFinishes(SaveFormToDisk.SAVED);\n+\n+        assertThat(formSaver.files, nullValue());\n     }\n \n     @Test\n", "next_change": {"commit": "2bd32012affbea012d927138a1d08affc83b5858", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java b/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\nindex 70b14d9fb9..0447d466ac 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\n", "chunk": "@@ -333,22 +332,19 @@ public class FormSaveViewModelTest {\n     }\n \n     @Test\n-    public void saveForm_runsWith_correctFiles() {\n+    public void saveForm_savesCorrectFiles() {\n         viewModel.markOriginalFileOrDelete(\"index\", \"blah\");\n         viewModel.replaceRecentFileForQuestion(\"index\", \"blah\");\n \n-        FormSaveViewModel restoredViewModel = new FormSaveViewModel(savedStateHandle, () -> CURRENT_TIME, formSaver, mediaUtils, null);\n-        restoredViewModel.formLoaded(formController);\n-\n-        restoredViewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n         whenFormSaverFinishes(SaveFormToDisk.SAVED);\n \n-        assertThat(formSaver.files.contains(\"blah\"), equalTo(true));\n+        assertThat(formSaver.tempFiles.contains(\"blah\"), equalTo(true));\n \n-        restoredViewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", true);\n         whenFormSaverFinishes(SaveFormToDisk.SAVED);\n \n-        assertThat(formSaver.files, nullValue());\n+        assertThat(formSaver.tempFiles.isEmpty(), equalTo(true));\n     }\n \n     @Test\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxNDM3Mw==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r477414373", "body": "It looks like you don't need these 4 lines for anything?", "bodyText": "It looks like you don't need these 4 lines for anything?", "bodyHTML": "<p dir=\"auto\">It looks like you don't need these 4 lines for anything?</p>", "author": "seadowg", "createdAt": "2020-08-26T16:01:58Z", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -59,12 +65,19 @@ public void setup() {\n         formController = mock(FormController.class);\n         logger = mock(AuditEventLogger.class);\n         formSaver = mock(FormSaver.class);\n+        mediaUtils = mock(MediaUtils.class);\n         Analytics analytics = mock(Analytics.class);\n \n         when(formController.getAuditEventLogger()).thenReturn(logger);\n         when(logger.isChangeReasonRequired()).thenReturn(false);\n \n-        viewModel = new FormSaveViewModel(() -> CURRENT_TIME, formSaver, analytics);\n+        Map<String, String> originalFiles = new HashMap<>();", "originalCommit": "88e97298c0cd228f145490c5763455721eba737d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a4970b42ce39921cf72a7819547da4917ae50d1e", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java b/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\nindex 523db910c0..70b14d9fb9 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java\n", "chunk": "@@ -64,19 +64,12 @@ public class FormSaveViewModelTest {\n \n         formController = mock(FormController.class);\n         logger = mock(AuditEventLogger.class);\n-        formSaver = mock(FormSaver.class);\n         mediaUtils = mock(MediaUtils.class);\n         Analytics analytics = mock(Analytics.class);\n \n         when(formController.getAuditEventLogger()).thenReturn(logger);\n         when(logger.isChangeReasonRequired()).thenReturn(false);\n \n-        Map<String, String> originalFiles = new HashMap<>();\n-        Map<String, String> recentFiles = new HashMap<>();\n-\n-        originalFiles.put(\"questionIndex\", \"blah\");\n-        recentFiles.put(\"questionIndex\", \"blah\");\n-\n         viewModel = new FormSaveViewModel(savedStateHandle, () -> CURRENT_TIME, formSaver, mediaUtils, analytics);\n         viewModel.formLoaded(formController);\n     }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxOTgyOA==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r477519828", "body": "When `saveToDisk()` task is complete, I just call `clearMediaFiles()` . So when I try to verify call to `mediaUtils.deleteImageFileFromMediaProvider()`, the test fails.", "bodyText": "When saveToDisk() task is complete, I just call clearMediaFiles() . So when I try to verify call to mediaUtils.deleteImageFileFromMediaProvider(), the test fails.", "bodyHTML": "<p dir=\"auto\">When <code>saveToDisk()</code> task is complete, I just call <code>clearMediaFiles()</code> . So when I try to verify call to <code>mediaUtils.deleteImageFileFromMediaProvider()</code>, the test fails.</p>", "author": "SaumiaSinghal", "createdAt": "2020-08-26T18:59:45Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "diffHunk": "@@ -253,8 +279,35 @@ public AuditEventLogger getAuditEventLogger() {\n         return formController.getAuditEventLogger();\n     }\n \n-    public static class SaveResult {\n+    @Override\n+    public void markOriginalFileOrDelete(String questionIndex, String fileName) {\n+        if (questionIndex != null && fileName != null) {\n+            if (originalFiles.containsKey(questionIndex)) {\n+                mediaUtils.deleteImageFileFromMediaProvider(fileName);\n+            } else {\n+                originalFiles.put(questionIndex, fileName);\n+                stateHandle.set(ORIGINAL_FILES, originalFiles);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void replaceRecentFileForQuestion(String questionIndex, String fileName) {\n+        if (questionIndex != null && fileName != null) {\n+            if (recentFiles.containsKey(questionIndex)) {\n+                mediaUtils.deleteImageFileFromMediaProvider(recentFiles.get(questionIndex));\n+            }\n+            recentFiles.put(questionIndex, fileName);\n+            stateHandle.set(RECENT_FILES, recentFiles);\n+        }\n+    }\n \n+    private void clearMediaFiles() {", "originalCommit": "88e97298c0cd228f145490c5763455721eba737d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0Nzc3Mw==", "url": "https://github.com/getodk/collect/pull/4006#discussion_r478247773", "bodyText": "Ah sorry because the formSaver is mocked! My bad. The way to verify things are set up correctly then is to assert on the files passed to the fromSaver (as part of verify) instead of the call the mediaUtils.", "author": "seadowg", "createdAt": "2020-08-27T08:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxOTgyOA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a4970b42ce39921cf72a7819547da4917ae50d1e", "url": "https://github.com/getodk/collect/commit/a4970b42ce39921cf72a7819547da4917ae50d1e", "message": "craete FakeFormSaver", "committedDate": "2020-08-27T10:42:37Z", "type": "commit"}, {"oid": "2bd32012affbea012d927138a1d08affc83b5858", "url": "https://github.com/getodk/collect/commit/2bd32012affbea012d927138a1d08affc83b5858", "message": "fix unit tests", "committedDate": "2020-08-27T12:59:37Z", "type": "commit"}]}